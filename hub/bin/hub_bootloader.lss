
hub/bin/hub_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001404  08000000  08000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .preinit_array 00000000  08001404  08001404  000014a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .init_array   00000000  08001404  08001404  000014a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000000  08001404  08001404  000014a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000010  20000000  08001404  00001498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002a0  20000010  08001414  000014a8  2**2
                  ALLOC
  6 ._user_heap_stack 00001000  200002b0  08001414  000014a8  2**0
                  ALLOC
  7 .ARM.attributes 0000002a  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000dbcc  00000000  00000000  000014d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00002a60  00000000  00000000  0000f09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000eb8  00000000  00000000  00011afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000e70  00000000  00000000  000129b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0000447f  00000000  00000000  00013826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0000bb6d  00000000  00000000  00017ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0001f681  00000000  00000000  00023812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      0000004c  00000000  00000000  00042e93  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002034  00000000  00000000  00042ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00003e72  00000000  00000000  00044f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 20 00 20 45 10 00 08 41 10 00 08 3f 10 00 08     . . E...A...?...
	...
 800002c:	41 10 00 08 00 00 00 00 00 00 00 00 41 10 00 08     A...........A...
 800003c:	41 10 00 08 3f 10 00 08 3f 10 00 08 19 0b 00 08     A...?...?.......
 800004c:	3f 10 00 08 3f 10 00 08 3f 10 00 08 3f 10 00 08     ?...?...?...?...
 800005c:	49 08 00 08 3f 10 00 08 3f 10 00 08 3f 10 00 08     I...?...?...?...
 800006c:	3f 10 00 08 35 01 00 08 3f 10 00 08 3f 10 00 08     ?...5...?...?...
 800007c:	3f 10 00 08 3f 10 00 08 3f 10 00 08 3f 10 00 08     ?...?...?...?...
 800008c:	3f 10 00 08 3f 10 00 08 3f 10 00 08 3f 10 00 08     ?...?...?...?...
 800009c:	3f 10 00 08 3f 10 00 08 3f 10 00 08 3f 10 00 08     ?...?...?...?...
 80000ac:	3f 10 00 08 fd 00 00 08 3f 10 00 08 3f 10 00 08     ?.......?...?...
 80000bc:	3f 10 00 08                                         ?...

080000c0 <main>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

int main(void)
{
 80000c0:	b510      	push	{r4, lr}
    log_init();
 80000c2:	f000 f9c7 	bl	8000454 <log_init>
	timers_lptim_init();
 80000c6:	f000 fc05 	bl	80008d4 <timers_lptim_init>
	timers_tim6_init();
 80000ca:	f000 fc49 	bl	8000960 <timers_tim6_init>
    log_printf(MAIN, "Hub Bootloader Start\n");
 80000ce:	4908      	ldr	r1, [pc, #32]	; (80000f0 <main+0x30>)
 80000d0:	2000      	movs	r0, #0
 80000d2:	f000 f9cd 	bl	8000470 <log_printf>

    boot_jump_to_application(APP_ADDRESS);
 80000d6:	4807      	ldr	r0, [pc, #28]	; (80000f4 <main+0x34>)
 80000d8:	f000 f904 	bl	80002e4 <boot_jump_to_application>

    for (;;)
	{
		log_printf(MAIN, "Hub Bootloader Loop\n\n");
 80000dc:	4906      	ldr	r1, [pc, #24]	; (80000f8 <main+0x38>)
 80000de:	2000      	movs	r0, #0
 80000e0:	f000 f9c6 	bl	8000470 <log_printf>
		timers_delay_milliseconds(1000);
 80000e4:	20fa      	movs	r0, #250	; 0xfa
 80000e6:	0080      	lsls	r0, r0, #2
 80000e8:	f000 fc50 	bl	800098c <timers_delay_milliseconds>
    for (;;)
 80000ec:	e7f6      	b.n	80000dc <main+0x1c>
 80000ee:	46c0      	nop			; (mov r8, r8)
 80000f0:	080011f8 	.word	0x080011f8
 80000f4:	08004000 	.word	0x08004000
 80000f8:	08001210 	.word	0x08001210

080000fc <usart2_isr>:
}


// Interrupt routines
void usart2_isr(void)
{
 80000fc:	b510      	push	{r4, lr}
	usart_send(SPF_USART, usart_recv(SIM_USART));
 80000fe:	4c09      	ldr	r4, [pc, #36]	; (8000124 <usart2_isr+0x28>)
 8000100:	0020      	movs	r0, r4
 8000102:	f000 ff8d 	bl	8001020 <usart_recv>
 8000106:	0001      	movs	r1, r0
 8000108:	4807      	ldr	r0, [pc, #28]	; (8000128 <usart2_isr+0x2c>)
 800010a:	f000 ff85 	bl	8001018 <usart_send>

	sim_rx_buf[sim_rx_head++] = usart_recv(SIM_USART);
 800010e:	0020      	movs	r0, r4
 8000110:	f000 ff86 	bl	8001020 <usart_recv>
 8000114:	4a05      	ldr	r2, [pc, #20]	; (800012c <usart2_isr+0x30>)
 8000116:	7813      	ldrb	r3, [r2, #0]
 8000118:	1c59      	adds	r1, r3, #1
 800011a:	7011      	strb	r1, [r2, #0]
 800011c:	4a04      	ldr	r2, [pc, #16]	; (8000130 <usart2_isr+0x34>)
 800011e:	54d0      	strb	r0, [r2, r3]
}
 8000120:	bd10      	pop	{r4, pc}
 8000122:	46c0      	nop			; (mov r8, r8)
 8000124:	40004400 	.word	0x40004400
 8000128:	40013800 	.word	0x40013800
 800012c:	20000110 	.word	0x20000110
 8000130:	20000010 	.word	0x20000010

08000134 <adc_comp_isr>:

// ISRs
#ifdef _HUB
// For use with ADC1
void adc_comp_isr(void)
{
 8000134:	b570      	push	{r4, r5, r6, lr}
    // Takes about 150us to run

    // log_printf(MAIN, "ADC ISR %08X\n", ADC_ISR(ADC1));

    // Calculate batt_voltages
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8000136:	2400      	movs	r4, #0
 8000138:	e014      	b.n	8000164 <adc_comp_isr+0x30>
        batt_voltages[i] = ( (uint32_t)300 * ST_VREFINT_CAL * adc_vals[i + 1] ) / ( adc_vals[0] * 4095 ); }
 800013a:	4b51      	ldr	r3, [pc, #324]	; (8000280 <adc_comp_isr+0x14c>)
 800013c:	881b      	ldrh	r3, [r3, #0]
 800013e:	1c65      	adds	r5, r4, #1
 8000140:	4a50      	ldr	r2, [pc, #320]	; (8000284 <adc_comp_isr+0x150>)
 8000142:	0069      	lsls	r1, r5, #1
 8000144:	5a88      	ldrh	r0, [r1, r2]
 8000146:	4343      	muls	r3, r0
 8000148:	0098      	lsls	r0, r3, #2
 800014a:	18c3      	adds	r3, r0, r3
 800014c:	0118      	lsls	r0, r3, #4
 800014e:	1ac0      	subs	r0, r0, r3
 8000150:	0080      	lsls	r0, r0, #2
 8000152:	8813      	ldrh	r3, [r2, #0]
 8000154:	0319      	lsls	r1, r3, #12
 8000156:	1ac9      	subs	r1, r1, r3
 8000158:	f000 ffc2 	bl	80010e0 <__udivsi3>
 800015c:	0064      	lsls	r4, r4, #1
 800015e:	4b4a      	ldr	r3, [pc, #296]	; (8000288 <adc_comp_isr+0x154>)
 8000160:	5318      	strh	r0, [r3, r4]
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8000162:	b2ec      	uxtb	r4, r5
 8000164:	2c01      	cmp	r4, #1
 8000166:	d9e8      	bls.n	800013a <adc_comp_isr+0x6>

    // For Hub : Measured voltage is half of actual
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8000168:	2300      	movs	r3, #0
 800016a:	e006      	b.n	800017a <adc_comp_isr+0x46>
        batt_voltages[i] = batt_voltages[i] * 2; }
 800016c:	4946      	ldr	r1, [pc, #280]	; (8000288 <adc_comp_isr+0x154>)
 800016e:	0058      	lsls	r0, r3, #1
 8000170:	5a42      	ldrh	r2, [r0, r1]
 8000172:	0052      	lsls	r2, r2, #1
 8000174:	5242      	strh	r2, [r0, r1]
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8000176:	3301      	adds	r3, #1
 8000178:	b2db      	uxtb	r3, r3
 800017a:	2b01      	cmp	r3, #1
 800017c:	d9f6      	bls.n	800016c <adc_comp_isr+0x38>

    static uint16_t timer = 0;
    static uint8_t state = 0;
    switch(state)
 800017e:	4b43      	ldr	r3, [pc, #268]	; (800028c <adc_comp_isr+0x158>)
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	2b04      	cmp	r3, #4
 8000184:	d871      	bhi.n	800026a <adc_comp_isr+0x136>
 8000186:	009b      	lsls	r3, r3, #2
 8000188:	4a41      	ldr	r2, [pc, #260]	; (8000290 <adc_comp_isr+0x15c>)
 800018a:	58d3      	ldr	r3, [r2, r3]
 800018c:	469f      	mov	pc, r3
    {
        case 0:
            plugged_in = true;
            timer = timers_millis();
 800018e:	f000 fc13 	bl	80009b8 <timers_millis>
 8000192:	4b40      	ldr	r3, [pc, #256]	; (8000294 <adc_comp_isr+0x160>)
 8000194:	8018      	strh	r0, [r3, #0]
            if(batt_voltages[PWR_VOLTAGE] < batt_voltages[BATT_VOLTAGE])
 8000196:	4b3c      	ldr	r3, [pc, #240]	; (8000288 <adc_comp_isr+0x154>)
 8000198:	881a      	ldrh	r2, [r3, #0]
 800019a:	885b      	ldrh	r3, [r3, #2]
 800019c:	429a      	cmp	r2, r3
 800019e:	d268      	bcs.n	8000272 <adc_comp_isr+0x13e>
                state = 1;
 80001a0:	4b3a      	ldr	r3, [pc, #232]	; (800028c <adc_comp_isr+0x158>)
 80001a2:	2201      	movs	r2, #1
 80001a4:	701a      	strb	r2, [r3, #0]
 80001a6:	e064      	b.n	8000272 <adc_comp_isr+0x13e>
            break;

        case 1:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE])
 80001a8:	4b37      	ldr	r3, [pc, #220]	; (8000288 <adc_comp_isr+0x154>)
 80001aa:	881a      	ldrh	r2, [r3, #0]
 80001ac:	885b      	ldrh	r3, [r3, #2]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d903      	bls.n	80001ba <adc_comp_isr+0x86>
                state = 0;
 80001b2:	4b36      	ldr	r3, [pc, #216]	; (800028c <adc_comp_isr+0x158>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	701a      	strb	r2, [r3, #0]
 80001b8:	e05b      	b.n	8000272 <adc_comp_isr+0x13e>
            else if(timers_millis() - timer > 1000)
 80001ba:	f000 fbfd 	bl	80009b8 <timers_millis>
 80001be:	4b35      	ldr	r3, [pc, #212]	; (8000294 <adc_comp_isr+0x160>)
 80001c0:	881b      	ldrh	r3, [r3, #0]
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	23fa      	movs	r3, #250	; 0xfa
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	4298      	cmp	r0, r3
 80001ca:	dd52      	ble.n	8000272 <adc_comp_isr+0x13e>
                state = 2;
 80001cc:	4b2f      	ldr	r3, [pc, #188]	; (800028c <adc_comp_isr+0x158>)
 80001ce:	2202      	movs	r2, #2
 80001d0:	701a      	strb	r2, [r3, #0]
 80001d2:	e04e      	b.n	8000272 <adc_comp_isr+0x13e>
            break;
        
        case 2:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE]){
 80001d4:	4b2c      	ldr	r3, [pc, #176]	; (8000288 <adc_comp_isr+0x154>)
 80001d6:	881a      	ldrh	r2, [r3, #0]
 80001d8:	885b      	ldrh	r3, [r3, #2]
 80001da:	429a      	cmp	r2, r3
 80001dc:	d907      	bls.n	80001ee <adc_comp_isr+0xba>
                timer = timers_millis(); 
 80001de:	f000 fbeb 	bl	80009b8 <timers_millis>
 80001e2:	4b2c      	ldr	r3, [pc, #176]	; (8000294 <adc_comp_isr+0x160>)
 80001e4:	8018      	strh	r0, [r3, #0]
                state = 4;}
 80001e6:	4b29      	ldr	r3, [pc, #164]	; (800028c <adc_comp_isr+0x158>)
 80001e8:	2204      	movs	r2, #4
 80001ea:	701a      	strb	r2, [r3, #0]
 80001ec:	e041      	b.n	8000272 <adc_comp_isr+0x13e>
            else if(timers_millis() - timer > 10000){
 80001ee:	f000 fbe3 	bl	80009b8 <timers_millis>
 80001f2:	4b28      	ldr	r3, [pc, #160]	; (8000294 <adc_comp_isr+0x160>)
 80001f4:	881b      	ldrh	r3, [r3, #0]
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4b27      	ldr	r3, [pc, #156]	; (8000298 <adc_comp_isr+0x164>)
 80001fa:	4298      	cmp	r0, r3
 80001fc:	dd39      	ble.n	8000272 <adc_comp_isr+0x13e>
                state = 3;
 80001fe:	4b23      	ldr	r3, [pc, #140]	; (800028c <adc_comp_isr+0x158>)
 8000200:	2203      	movs	r2, #3
 8000202:	701a      	strb	r2, [r3, #0]
                plugged_in = false;
                log_printf(MAIN, "Plugged Out\n");}
 8000204:	4925      	ldr	r1, [pc, #148]	; (800029c <adc_comp_isr+0x168>)
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f932 	bl	8000470 <log_printf>
 800020c:	e031      	b.n	8000272 <adc_comp_isr+0x13e>
            break;
        
        case 3:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE]){
 800020e:	4b1e      	ldr	r3, [pc, #120]	; (8000288 <adc_comp_isr+0x154>)
 8000210:	881a      	ldrh	r2, [r3, #0]
 8000212:	885b      	ldrh	r3, [r3, #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d92c      	bls.n	8000272 <adc_comp_isr+0x13e>
                timer = timers_millis();
 8000218:	f000 fbce 	bl	80009b8 <timers_millis>
 800021c:	4b1d      	ldr	r3, [pc, #116]	; (8000294 <adc_comp_isr+0x160>)
 800021e:	8018      	strh	r0, [r3, #0]
                state = 0;
 8000220:	4b1a      	ldr	r3, [pc, #104]	; (800028c <adc_comp_isr+0x158>)
 8000222:	2200      	movs	r2, #0
 8000224:	701a      	strb	r2, [r3, #0]
                log_printf(MAIN, "Plugged In\n");}
 8000226:	491e      	ldr	r1, [pc, #120]	; (80002a0 <adc_comp_isr+0x16c>)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f921 	bl	8000470 <log_printf>
 800022e:	e020      	b.n	8000272 <adc_comp_isr+0x13e>
            break;

        case 4:
            if(batt_voltages[PWR_VOLTAGE] < batt_voltages[BATT_VOLTAGE]){
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <adc_comp_isr+0x154>)
 8000232:	881a      	ldrh	r2, [r3, #0]
 8000234:	885b      	ldrh	r3, [r3, #2]
 8000236:	429a      	cmp	r2, r3
 8000238:	d203      	bcs.n	8000242 <adc_comp_isr+0x10e>
                state = 2; }
 800023a:	4b14      	ldr	r3, [pc, #80]	; (800028c <adc_comp_isr+0x158>)
 800023c:	2202      	movs	r2, #2
 800023e:	701a      	strb	r2, [r3, #0]
 8000240:	e017      	b.n	8000272 <adc_comp_isr+0x13e>
            else if(timers_millis() - timer > 1000){
 8000242:	f000 fbb9 	bl	80009b8 <timers_millis>
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <adc_comp_isr+0x160>)
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	23fa      	movs	r3, #250	; 0xfa
 800024e:	009b      	lsls	r3, r3, #2
 8000250:	4298      	cmp	r0, r3
 8000252:	dd0e      	ble.n	8000272 <adc_comp_isr+0x13e>
                state = 0;
 8000254:	4b0d      	ldr	r3, [pc, #52]	; (800028c <adc_comp_isr+0x158>)
 8000256:	2200      	movs	r2, #0
 8000258:	701a      	strb	r2, [r3, #0]
                batt_rst_seq = true; 
 800025a:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <adc_comp_isr+0x170>)
 800025c:	3201      	adds	r2, #1
 800025e:	701a      	strb	r2, [r3, #0]
                log_printf(MAIN, "Reset Sequence\n"); }
 8000260:	4911      	ldr	r1, [pc, #68]	; (80002a8 <adc_comp_isr+0x174>)
 8000262:	2000      	movs	r0, #0
 8000264:	f000 f904 	bl	8000470 <log_printf>
 8000268:	e003      	b.n	8000272 <adc_comp_isr+0x13e>
            break;

        default:
            log_printf(MAIN, "Error ADC ISR Defaut Case\n");
 800026a:	4910      	ldr	r1, [pc, #64]	; (80002ac <adc_comp_isr+0x178>)
 800026c:	2000      	movs	r0, #0
 800026e:	f000 f8ff 	bl	8000470 <log_printf>
            break;
    }

    // log_printf(MAIN, "ADC ISR %u %u %u V\n",state, batt_voltages[0], batt_voltages[1]);

    ADC_ISR(ADC1) = 0xFFFFFFFF;
 8000272:	480f      	ldr	r0, [pc, #60]	; (80002b0 <adc_comp_isr+0x17c>)
 8000274:	2301      	movs	r3, #1
 8000276:	425b      	negs	r3, r3
 8000278:	6003      	str	r3, [r0, #0]
    adc_start_conversion_regular(ADC1);
 800027a:	f000 fc73 	bl	8000b64 <adc_start_conversion_regular>
}
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	1ff80078 	.word	0x1ff80078
 8000284:	20000114 	.word	0x20000114
 8000288:	2000011c 	.word	0x2000011c
 800028c:	20000120 	.word	0x20000120
 8000290:	08001270 	.word	0x08001270
 8000294:	20000122 	.word	0x20000122
 8000298:	00002710 	.word	0x00002710
 800029c:	08001228 	.word	0x08001228
 80002a0:	08001238 	.word	0x08001238
 80002a4:	2000011a 	.word	0x2000011a
 80002a8:	08001244 	.word	0x08001244
 80002ac:	08001254 	.word	0x08001254
 80002b0:	40012400 	.word	0x40012400

080002b4 <boot_deinit>:
}

void boot_deinit(void)
{
    // Reset all peripherals
    RCC_AHBRSTR = 0xFFFFFFFF;
 80002b4:	4907      	ldr	r1, [pc, #28]	; (80002d4 <boot_deinit+0x20>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	4252      	negs	r2, r2
 80002ba:	600a      	str	r2, [r1, #0]
    RCC_AHBRSTR = 0x00000000;
 80002bc:	2300      	movs	r3, #0
 80002be:	600b      	str	r3, [r1, #0]
    RCC_APB2RSTR = 0xFFFFFFFF;
 80002c0:	4905      	ldr	r1, [pc, #20]	; (80002d8 <boot_deinit+0x24>)
 80002c2:	600a      	str	r2, [r1, #0]
    RCC_APB2RSTR = 0x00000000;
 80002c4:	600b      	str	r3, [r1, #0]
    RCC_APB1RSTR = 0xFFFFFFFF;
 80002c6:	4905      	ldr	r1, [pc, #20]	; (80002dc <boot_deinit+0x28>)
 80002c8:	600a      	str	r2, [r1, #0]
    RCC_APB1RSTR = 0x00000000;
 80002ca:	600b      	str	r3, [r1, #0]
    RCC_IOPRSTR = 0xFFFFFFFF;
 80002cc:	4904      	ldr	r1, [pc, #16]	; (80002e0 <boot_deinit+0x2c>)
 80002ce:	600a      	str	r2, [r1, #0]
    RCC_IOPRSTR = 0x00000000;
 80002d0:	600b      	str	r3, [r1, #0]
}
 80002d2:	4770      	bx	lr
 80002d4:	40021020 	.word	0x40021020
 80002d8:	40021024 	.word	0x40021024
 80002dc:	40021028 	.word	0x40021028
 80002e0:	4002101c 	.word	0x4002101c

080002e4 <boot_jump_to_application>:

void boot_jump_to_application(uint32_t address)
{
 80002e4:	b510      	push	{r4, lr}
    // Disable Interrupts
    __asm__ volatile("CPSID I\n");
 80002e6:	b672      	cpsid	i

    // Update vector table offset
    SCB_VTOR = address;
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <boot_jump_to_application+0x1c>)
 80002ea:	6018      	str	r0, [r3, #0]

    // Update main stack pointer
    __asm__("msr msp, %0"
            :
            : "r"(MMIO32(address)));
 80002ec:	6803      	ldr	r3, [r0, #0]
    __asm__("msr msp, %0"
 80002ee:	f383 8808 	msr	MSP, r3

    // Get start address of program
    void (*start)(void) = (void *)MMIO32(address + 4);
 80002f2:	6844      	ldr	r4, [r0, #4]

    // Deinitialize all used peripherals
    boot_deinit();
 80002f4:	f7ff ffde 	bl	80002b4 <boot_deinit>

    // Enable interruptsf
    __asm__ volatile("CPSIE I\n");
 80002f8:	b662      	cpsie	i

    start();
 80002fa:	47a0      	blx	r4

    while (1)
 80002fc:	e7fe      	b.n	80002fc <boot_jump_to_application+0x18>
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	e000ed08 	.word	0xe000ed08

08000304 <clock_setup>:
// Static Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

//  Static Function Definitions
static void clock_setup(void) 
{
 8000304:	b510      	push	{r4, lr}
	// Enable MSI Osc 2.097Mhz
	rcc_osc_on(RCC_MSI);
 8000306:	2004      	movs	r0, #4
 8000308:	f000 fd0c 	bl	8000d24 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_MSI);
 800030c:	2004      	movs	r0, #4
 800030e:	f000 fd5f 	bl	8000dd0 <rcc_wait_for_osc_ready>

	// Set MSI to 2.097Mhz
	rcc_set_msi_range(5);
 8000312:	2005      	movs	r0, #5
 8000314:	f000 fd86 	bl	8000e24 <rcc_set_msi_range>

	// Set prescalers for AHB, APB1, APB2
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);				// AHB -> 2.097Mhz
 8000318:	2000      	movs	r0, #0
 800031a:	f000 fd79 	bl	8000e10 <rcc_set_hpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);			// APB1 -> 2.097Mhz
 800031e:	2000      	movs	r0, #0
 8000320:	f000 fd5e 	bl	8000de0 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);			// APB2 -> 2.097Mhz
 8000324:	2000      	movs	r0, #0
 8000326:	f000 fd67 	bl	8000df8 <rcc_set_ppre2>

	// Set flash, 2.097Mhz -> 0 waitstates
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 800032a:	2000      	movs	r0, #0
 800032c:	f000 fc26 	bl	8000b7c <flash_set_ws>

	// Set Peripheral Clock Frequencies used
	rcc_ahb_frequency = 2097000;
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <clock_setup+0x3c>)
 8000332:	4a04      	ldr	r2, [pc, #16]	; (8000344 <clock_setup+0x40>)
 8000334:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 2097000;
 8000336:	4a04      	ldr	r2, [pc, #16]	; (8000348 <clock_setup+0x44>)
 8000338:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = 2097000;
 800033a:	4a04      	ldr	r2, [pc, #16]	; (800034c <clock_setup+0x48>)
 800033c:	6013      	str	r3, [r2, #0]
}
 800033e:	bd10      	pop	{r4, pc}
 8000340:	001fff68 	.word	0x001fff68
 8000344:	20000004 	.word	0x20000004
 8000348:	20000008 	.word	0x20000008
 800034c:	2000000c 	.word	0x2000000c

08000350 <usart_setup>:

static void usart_setup(void) 
{
 8000350:	b570      	push	{r4, r5, r6, lr}
    rcc_periph_clock_enable(RCC_GPIOA);
 8000352:	20b0      	movs	r0, #176	; 0xb0
 8000354:	00c0      	lsls	r0, r0, #3
 8000356:	f000 fda7 	bl	8000ea8 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOB);
 800035a:	4826      	ldr	r0, [pc, #152]	; (80003f4 <usart_setup+0xa4>)
 800035c:	f000 fda4 	bl	8000ea8 <rcc_periph_clock_enable>

	gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_TX);
 8000360:	2580      	movs	r5, #128	; 0x80
 8000362:	00ad      	lsls	r5, r5, #2
 8000364:	24a0      	movs	r4, #160	; 0xa0
 8000366:	05e4      	lsls	r4, r4, #23
 8000368:	002b      	movs	r3, r5
 800036a:	2200      	movs	r2, #0
 800036c:	2102      	movs	r1, #2
 800036e:	0020      	movs	r0, r4
 8000370:	f000 fc27 	bl	8000bc2 <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_RX);
 8000374:	2680      	movs	r6, #128	; 0x80
 8000376:	00f6      	lsls	r6, r6, #3
 8000378:	0033      	movs	r3, r6
 800037a:	2200      	movs	r2, #0
 800037c:	2102      	movs	r1, #2
 800037e:	0020      	movs	r0, r4
 8000380:	f000 fc1f 	bl	8000bc2 <gpio_mode_setup>
    
    gpio_set_output_options(SPF_USART_TX_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, SPF_USART_TX);
 8000384:	002b      	movs	r3, r5
 8000386:	2200      	movs	r2, #0
 8000388:	2100      	movs	r1, #0
 800038a:	0020      	movs	r0, r4
 800038c:	f000 fc39 	bl	8000c02 <gpio_set_output_options>

    gpio_set_af(SPF_USART_TX_PORT, SPF_USART_AF, SPF_USART_TX);
 8000390:	002a      	movs	r2, r5
 8000392:	2104      	movs	r1, #4
 8000394:	0020      	movs	r0, r4
 8000396:	f000 fc52 	bl	8000c3e <gpio_set_af>
    gpio_set_af(SPF_USART_RX_PORT, SPF_USART_AF, SPF_USART_RX);
 800039a:	0032      	movs	r2, r6
 800039c:	2104      	movs	r1, #4
 800039e:	0020      	movs	r0, r4
 80003a0:	f000 fc4d 	bl	8000c3e <gpio_set_af>
    
	rcc_periph_clock_enable(SPF_USART_RCC);
 80003a4:	4814      	ldr	r0, [pc, #80]	; (80003f8 <usart_setup+0xa8>)
 80003a6:	f000 fd7f 	bl	8000ea8 <rcc_periph_clock_enable>
    rcc_periph_reset_pulse(SPF_USART_RCC_RST);
 80003aa:	4814      	ldr	r0, [pc, #80]	; (80003fc <usart_setup+0xac>)
 80003ac:	f000 fd8a 	bl	8000ec4 <rcc_periph_reset_pulse>
	usart_disable(SPF_USART);
 80003b0:	4c13      	ldr	r4, [pc, #76]	; (8000400 <usart_setup+0xb0>)
 80003b2:	0020      	movs	r0, r4
 80003b4:	f000 fe21 	bl	8000ffa <usart_disable>
	usart_set_baudrate(SPF_USART, SPF_USART_BAUD);
 80003b8:	21e1      	movs	r1, #225	; 0xe1
 80003ba:	0249      	lsls	r1, r1, #9
 80003bc:	0020      	movs	r0, r4
 80003be:	f000 fdbf 	bl	8000f40 <usart_set_baudrate>
	usart_set_databits(SPF_USART, 8);
 80003c2:	2108      	movs	r1, #8
 80003c4:	0020      	movs	r0, r4
 80003c6:	f000 fde7 	bl	8000f98 <usart_set_databits>
	usart_set_stopbits(SPF_USART,USART_STOPBITS_1);
 80003ca:	2100      	movs	r1, #0
 80003cc:	0020      	movs	r0, r4
 80003ce:	f000 fdf1 	bl	8000fb4 <usart_set_stopbits>
	usart_set_mode(SPF_USART, USART_MODE_TX_RX);
 80003d2:	210c      	movs	r1, #12
 80003d4:	0020      	movs	r0, r4
 80003d6:	f000 fdfd 	bl	8000fd4 <usart_set_mode>
	usart_set_parity(SPF_USART, USART_PARITY_NONE);
 80003da:	2100      	movs	r1, #0
 80003dc:	0020      	movs	r0, r4
 80003de:	f000 fdf1 	bl	8000fc4 <usart_set_parity>
	usart_set_flow_control(SPF_USART, USART_FLOWCONTROL_NONE);
 80003e2:	2100      	movs	r1, #0
 80003e4:	0020      	movs	r0, r4
 80003e6:	f000 fdfb 	bl	8000fe0 <usart_set_flow_control>
	usart_enable(SPF_USART);
 80003ea:	0020      	movs	r0, r4
 80003ec:	f000 fe00 	bl	8000ff0 <usart_enable>
}
 80003f0:	bd70      	pop	{r4, r5, r6, pc}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	00000581 	.word	0x00000581
 80003f8:	0000068e 	.word	0x0000068e
 80003fc:	0000048e 	.word	0x0000048e
 8000400:	40013800 	.word	0x40013800

08000404 <_putchar_mem>:
	usart_send_blocking(SPF_USART, character);	
	#endif
}

static void _putchar_mem(char character)
{
 8000404:	b510      	push	{r4, lr}
 8000406:	0001      	movs	r1, r0
	mem_eeprom_write_byte(curr_address++, character);
 8000408:	4c07      	ldr	r4, [pc, #28]	; (8000428 <_putchar_mem+0x24>)
 800040a:	6820      	ldr	r0, [r4, #0]
 800040c:	1c43      	adds	r3, r0, #1
 800040e:	6023      	str	r3, [r4, #0]
 8000410:	f000 f868 	bl	80004e4 <mem_eeprom_write_byte>
	
	if(curr_address == LOG_START + LOG_SIZE)
 8000414:	6822      	ldr	r2, [r4, #0]
 8000416:	4b05      	ldr	r3, [pc, #20]	; (800042c <_putchar_mem+0x28>)
 8000418:	429a      	cmp	r2, r3
 800041a:	d000      	beq.n	800041e <_putchar_mem+0x1a>
	{
		curr_address = LOG_START;
	}
}
 800041c:	bd10      	pop	{r4, pc}
		curr_address = LOG_START;
 800041e:	4b02      	ldr	r3, [pc, #8]	; (8000428 <_putchar_mem+0x24>)
 8000420:	4a03      	ldr	r2, [pc, #12]	; (8000430 <_putchar_mem+0x2c>)
 8000422:	601a      	str	r2, [r3, #0]
}
 8000424:	e7fa      	b.n	800041c <_putchar_mem+0x18>
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	20000000 	.word	0x20000000
 800042c:	08080800 	.word	0x08080800
 8000430:	08080400 	.word	0x08080400

08000434 <_putchar_spf>:
{
 8000434:	b510      	push	{r4, lr}
	usart_send_blocking(SPF_USART, character);	
 8000436:	0001      	movs	r1, r0
 8000438:	4801      	ldr	r0, [pc, #4]	; (8000440 <_putchar_spf+0xc>)
 800043a:	f000 fde3 	bl	8001004 <usart_send_blocking>
}
 800043e:	bd10      	pop	{r4, pc}
 8000440:	40013800 	.word	0x40013800

08000444 <_putchar_main>:
{
 8000444:	b510      	push	{r4, lr}
 8000446:	0004      	movs	r4, r0
	_putchar_mem(character);
 8000448:	f7ff ffdc 	bl	8000404 <_putchar_mem>
	_putchar_spf(character);			
 800044c:	0020      	movs	r0, r4
 800044e:	f7ff fff1 	bl	8000434 <_putchar_spf>
}
 8000452:	bd10      	pop	{r4, pc}

08000454 <log_init>:
{
 8000454:	b510      	push	{r4, lr}
	mem_init();
 8000456:	f000 f83f 	bl	80004d8 <mem_init>
    curr_address = 0;
 800045a:	4b04      	ldr	r3, [pc, #16]	; (800046c <log_init+0x18>)
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
    clock_setup();
 8000460:	f7ff ff50 	bl	8000304 <clock_setup>
    usart_setup();
 8000464:	f7ff ff74 	bl	8000350 <usart_setup>
}
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	20000000 	.word	0x20000000

08000470 <log_printf>:
{
 8000470:	b40e      	push	{r1, r2, r3}
 8000472:	b500      	push	{lr}
 8000474:	b082      	sub	sp, #8
 8000476:	ab03      	add	r3, sp, #12
 8000478:	cb02      	ldmia	r3!, {r1}
	va_start(va, format);
 800047a:	9301      	str	r3, [sp, #4]
    switch (type)
 800047c:	2802      	cmp	r0, #2
 800047e:	d01e      	beq.n	80004be <log_printf+0x4e>
 8000480:	d808      	bhi.n	8000494 <log_printf+0x24>
 8000482:	2800      	cmp	r0, #0
 8000484:	d00d      	beq.n	80004a2 <log_printf+0x32>
 8000486:	2801      	cmp	r0, #1
 8000488:	d10f      	bne.n	80004aa <log_printf+0x3a>
        fnprintf(_putchar_spf, format, va);
 800048a:	9a01      	ldr	r2, [sp, #4]
 800048c:	480e      	ldr	r0, [pc, #56]	; (80004c8 <log_printf+0x58>)
 800048e:	f000 f8d9 	bl	8000644 <fnprintf>
		break;
 8000492:	e00a      	b.n	80004aa <log_printf+0x3a>
    switch (type)
 8000494:	2804      	cmp	r0, #4
 8000496:	d108      	bne.n	80004aa <log_printf+0x3a>
        fnprintf(_putchar_main, format, va);
 8000498:	9a01      	ldr	r2, [sp, #4]
 800049a:	480c      	ldr	r0, [pc, #48]	; (80004cc <log_printf+0x5c>)
 800049c:	f000 f8d2 	bl	8000644 <fnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {}
 80004a0:	e003      	b.n	80004aa <log_printf+0x3a>
        fnprintf(_putchar_main, format, va);
 80004a2:	9a01      	ldr	r2, [sp, #4]
 80004a4:	4809      	ldr	r0, [pc, #36]	; (80004cc <log_printf+0x5c>)
 80004a6:	f000 f8cd 	bl	8000644 <fnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {}
 80004aa:	2140      	movs	r1, #64	; 0x40
 80004ac:	4808      	ldr	r0, [pc, #32]	; (80004d0 <log_printf+0x60>)
 80004ae:	f000 fdc0 	bl	8001032 <usart_get_flag>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d0f9      	beq.n	80004aa <log_printf+0x3a>
}
 80004b6:	b002      	add	sp, #8
 80004b8:	bc08      	pop	{r3}
 80004ba:	b003      	add	sp, #12
 80004bc:	4718      	bx	r3
        fnprintf(_putchar_mem, format, va);
 80004be:	9a01      	ldr	r2, [sp, #4]
 80004c0:	4804      	ldr	r0, [pc, #16]	; (80004d4 <log_printf+0x64>)
 80004c2:	f000 f8bf 	bl	8000644 <fnprintf>
		break;
 80004c6:	e7f0      	b.n	80004aa <log_printf+0x3a>
 80004c8:	08000435 	.word	0x08000435
 80004cc:	08000445 	.word	0x08000445
 80004d0:	40013800 	.word	0x40013800
 80004d4:	08000405 	.word	0x08000405

080004d8 <mem_init>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

void mem_init(void)
{
 80004d8:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_MIF);
 80004da:	20c1      	movs	r0, #193	; 0xc1
 80004dc:	00c0      	lsls	r0, r0, #3
 80004de:	f000 fce3 	bl	8000ea8 <rcc_periph_clock_enable>
    // {
    //     // log_printf(MAIN, "%08x : %08x\n", next_reading_add, MMIO32(next_reading_add));
    //     msg_num++;
    //     next_reading_add += 4;
    // }
}
 80004e2:	bd10      	pop	{r4, pc}

080004e4 <mem_eeprom_write_byte>:

    return true;
}

bool mem_eeprom_write_byte(uint32_t address, uint8_t data)
{
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0004      	movs	r4, r0
 80004e8:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <mem_eeprom_write_byte+0x44>)
 80004ec:	18c2      	adds	r2, r0, r3
 80004ee:	2380      	movs	r3, #128	; 0x80
 80004f0:	011b      	lsls	r3, r3, #4
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d301      	bcc.n	80004fa <mem_eeprom_write_byte+0x16>
        return false;
 80004f6:	2000      	movs	r0, #0
        FLASH_SR = FLASH_SR_EOP;

    flash_lock_pecr();

    return true;
}
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock_pecr();
 80004fa:	f000 fb49 	bl	8000b90 <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 80004fe:	4a0b      	ldr	r2, [pc, #44]	; (800052c <mem_eeprom_write_byte+0x48>)
 8000500:	6813      	ldr	r3, [r2, #0]
 8000502:	490b      	ldr	r1, [pc, #44]	; (8000530 <mem_eeprom_write_byte+0x4c>)
 8000504:	400b      	ands	r3, r1
 8000506:	6013      	str	r3, [r2, #0]
    MMIO8(address) = data;
 8000508:	7025      	strb	r5, [r4, #0]
    while (FLASH_SR & FLASH_SR_BSY);
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <mem_eeprom_write_byte+0x50>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	07db      	lsls	r3, r3, #31
 8000510:	d4fb      	bmi.n	800050a <mem_eeprom_write_byte+0x26>
    if (FLASH_SR & FLASH_SR_EOP)
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <mem_eeprom_write_byte+0x50>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	079b      	lsls	r3, r3, #30
 8000518:	d502      	bpl.n	8000520 <mem_eeprom_write_byte+0x3c>
        FLASH_SR = FLASH_SR_EOP;
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <mem_eeprom_write_byte+0x50>)
 800051c:	2202      	movs	r2, #2
 800051e:	601a      	str	r2, [r3, #0]
    flash_lock_pecr();
 8000520:	f000 fb42 	bl	8000ba8 <flash_lock_pecr>
    return true;
 8000524:	2001      	movs	r0, #1
 8000526:	e7e7      	b.n	80004f8 <mem_eeprom_write_byte+0x14>
 8000528:	f7f80000 	.word	0xf7f80000
 800052c:	40022004 	.word	0x40022004
 8000530:	fffffeff 	.word	0xfffffeff
 8000534:	40022018 	.word	0x40022018

08000538 <_atoi>:
    return (ch >= '0') && (ch <= '9');
}

// internal ASCII string to uint32_t conversion
static uint32_t _atoi(const char **str)
{
 8000538:	0001      	movs	r1, r0
    uint32_t i = 0U;
 800053a:	2000      	movs	r0, #0
    while (_is_digit(**str))
 800053c:	680a      	ldr	r2, [r1, #0]
 800053e:	7813      	ldrb	r3, [r2, #0]
    return (ch >= '0') && (ch <= '9');
 8000540:	3b30      	subs	r3, #48	; 0x30
 8000542:	b2db      	uxtb	r3, r3
    while (_is_digit(**str))
 8000544:	2b09      	cmp	r3, #9
 8000546:	d808      	bhi.n	800055a <_atoi+0x22>
    {
        i = i * 10U + (uint32_t)(*((*str)++) - '0');
 8000548:	0083      	lsls	r3, r0, #2
 800054a:	181b      	adds	r3, r3, r0
 800054c:	005b      	lsls	r3, r3, #1
 800054e:	1c50      	adds	r0, r2, #1
 8000550:	6008      	str	r0, [r1, #0]
 8000552:	7810      	ldrb	r0, [r2, #0]
 8000554:	18c0      	adds	r0, r0, r3
 8000556:	3830      	subs	r0, #48	; 0x30
 8000558:	e7f0      	b.n	800053c <_atoi+0x4>
    }
    return i;
}
 800055a:	4770      	bx	lr

0800055c <_ntoa_format>:

// internal itoa format
static uint32_t _ntoa_format(out_fct_type out, int32_t value, uint32_t base, uint32_t width, bool sign)
{
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46de      	mov	lr, fp
 8000560:	4657      	mov	r7, sl
 8000562:	464e      	mov	r6, r9
 8000564:	4645      	mov	r5, r8
 8000566:	b5e0      	push	{r5, r6, r7, lr}
 8000568:	b089      	sub	sp, #36	; 0x24
 800056a:	4680      	mov	r8, r0
 800056c:	0008      	movs	r0, r1
 800056e:	0015      	movs	r5, r2
 8000570:	469b      	mov	fp, r3
 8000572:	ab12      	add	r3, sp, #72	; 0x48
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	4699      	mov	r9, r3
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    uint32_t len = 0;
    bool negative = false;

    // write if precision != 0 and value is != 0
    if (value)
 8000578:	2900      	cmp	r1, #0
 800057a:	d059      	beq.n	8000630 <_ntoa_format+0xd4>
    {
        if(value < 0)
 800057c:	db03      	blt.n	8000586 <_ntoa_format+0x2a>
    bool negative = false;
 800057e:	2300      	movs	r3, #0
 8000580:	469a      	mov	sl, r3
 8000582:	2400      	movs	r4, #0
 8000584:	e011      	b.n	80005aa <_ntoa_format+0x4e>
        {
            negative = true;
            value = 0 - value; 
 8000586:	4248      	negs	r0, r1
            negative = true;
 8000588:	2301      	movs	r3, #1
 800058a:	469a      	mov	sl, r3
 800058c:	e7f9      	b.n	8000582 <_ntoa_format+0x26>
        } 
        // Digits to char
        do
        {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 800058e:	3130      	adds	r1, #48	; 0x30
 8000590:	b2c9      	uxtb	r1, r1
 8000592:	1c67      	adds	r7, r4, #1
 8000594:	466b      	mov	r3, sp
 8000596:	5519      	strb	r1, [r3, r4]
            value /= base;
 8000598:	0029      	movs	r1, r5
 800059a:	0030      	movs	r0, r6
 800059c:	f000 fda0 	bl	80010e0 <__udivsi3>
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80005a0:	2800      	cmp	r0, #0
 80005a2:	d010      	beq.n	80005c6 <_ntoa_format+0x6a>
 80005a4:	2f1f      	cmp	r7, #31
 80005a6:	d80e      	bhi.n	80005c6 <_ntoa_format+0x6a>
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 80005a8:	003c      	movs	r4, r7
            const char digit = (char)(value % base);
 80005aa:	0006      	movs	r6, r0
 80005ac:	0029      	movs	r1, r5
 80005ae:	f000 fe1d 	bl	80011ec <__aeabi_uidivmod>
 80005b2:	b2c9      	uxtb	r1, r1
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 80005b4:	2909      	cmp	r1, #9
 80005b6:	d9ea      	bls.n	800058e <_ntoa_format+0x32>
 80005b8:	3137      	adds	r1, #55	; 0x37
 80005ba:	b2c9      	uxtb	r1, r1
 80005bc:	e7e9      	b.n	8000592 <_ntoa_format+0x36>

        // pad leading zeros
        while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
        {
            buf[len++] = '0';
 80005be:	2330      	movs	r3, #48	; 0x30
 80005c0:	466a      	mov	r2, sp
 80005c2:	55d3      	strb	r3, [r2, r7]
 80005c4:	3701      	adds	r7, #1
        while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80005c6:	455f      	cmp	r7, fp
 80005c8:	d201      	bcs.n	80005ce <_ntoa_format+0x72>
 80005ca:	2f1f      	cmp	r7, #31
 80005cc:	d9f7      	bls.n	80005be <_ntoa_format+0x62>
        }

        // Base specifier
        if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80005ce:	2d10      	cmp	r5, #16
 80005d0:	d019      	beq.n	8000606 <_ntoa_format+0xaa>
        {
            buf[len++] = 'X';
        }
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80005d2:	2d02      	cmp	r5, #2
 80005d4:	d01e      	beq.n	8000614 <_ntoa_format+0xb8>
        {
            buf[len++] = 'b';
        }
        if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80005d6:	2d10      	cmp	r5, #16
 80005d8:	d023      	beq.n	8000622 <_ntoa_format+0xc6>
 80005da:	2d02      	cmp	r5, #2
 80005dc:	d021      	beq.n	8000622 <_ntoa_format+0xc6>
        {
            buf[len++] = '0';
        }

        // Negative sign
        if ( sign && negative && (len < PRINTF_NTOA_BUFFER_SIZE) )
 80005de:	464b      	mov	r3, r9
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d008      	beq.n	80005f6 <_ntoa_format+0x9a>
 80005e4:	4653      	mov	r3, sl
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d005      	beq.n	80005f6 <_ntoa_format+0x9a>
 80005ea:	2f1f      	cmp	r7, #31
 80005ec:	d803      	bhi.n	80005f6 <_ntoa_format+0x9a>
        {
            buf[len++] = '-';
 80005ee:	232d      	movs	r3, #45	; 0x2d
 80005f0:	466a      	mov	r2, sp
 80005f2:	55d3      	strb	r3, [r2, r7]
 80005f4:	3701      	adds	r7, #1
        }

        // reverse string and write out
        uint32_t i = len;
 80005f6:	003c      	movs	r4, r7
        while (i)
 80005f8:	2c00      	cmp	r4, #0
 80005fa:	d01a      	beq.n	8000632 <_ntoa_format+0xd6>
        {
            out(buf[--i]);
 80005fc:	3c01      	subs	r4, #1
 80005fe:	466b      	mov	r3, sp
 8000600:	5d18      	ldrb	r0, [r3, r4]
 8000602:	47c0      	blx	r8
 8000604:	e7f8      	b.n	80005f8 <_ntoa_format+0x9c>
        if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8000606:	2f1f      	cmp	r7, #31
 8000608:	d8e3      	bhi.n	80005d2 <_ntoa_format+0x76>
            buf[len++] = 'X';
 800060a:	2358      	movs	r3, #88	; 0x58
 800060c:	466a      	mov	r2, sp
 800060e:	55d3      	strb	r3, [r2, r7]
 8000610:	3701      	adds	r7, #1
 8000612:	e7e0      	b.n	80005d6 <_ntoa_format+0x7a>
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8000614:	2f1f      	cmp	r7, #31
 8000616:	d8de      	bhi.n	80005d6 <_ntoa_format+0x7a>
            buf[len++] = 'b';
 8000618:	2362      	movs	r3, #98	; 0x62
 800061a:	466a      	mov	r2, sp
 800061c:	55d3      	strb	r3, [r2, r7]
 800061e:	3701      	adds	r7, #1
 8000620:	e7d9      	b.n	80005d6 <_ntoa_format+0x7a>
        if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8000622:	2f1f      	cmp	r7, #31
 8000624:	d8db      	bhi.n	80005de <_ntoa_format+0x82>
            buf[len++] = '0';
 8000626:	2330      	movs	r3, #48	; 0x30
 8000628:	466a      	mov	r2, sp
 800062a:	55d3      	strb	r3, [r2, r7]
 800062c:	3701      	adds	r7, #1
 800062e:	e7d6      	b.n	80005de <_ntoa_format+0x82>
    uint32_t len = 0;
 8000630:	2700      	movs	r7, #0
        }
    }
    return len;
}
 8000632:	0038      	movs	r0, r7
 8000634:	b009      	add	sp, #36	; 0x24
 8000636:	bcf0      	pop	{r4, r5, r6, r7}
 8000638:	46bb      	mov	fp, r7
 800063a:	46b2      	mov	sl, r6
 800063c:	46a9      	mov	r9, r5
 800063e:	46a0      	mov	r8, r4
 8000640:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000644 <fnprintf>:

uint32_t fnprintf(out_fct_type out, const char *format, va_list va)
{
 8000644:	b570      	push	{r4, r5, r6, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	0005      	movs	r5, r0
 800064a:	9103      	str	r1, [sp, #12]
 800064c:	9202      	str	r2, [sp, #8]
    uint32_t width;
    uint32_t idx = 0U;
 800064e:	2400      	movs	r4, #0

    while (*format)
 8000650:	e004      	b.n	800065c <fnprintf+0x18>
            format++;
        }
        else
        {
            // Just print char
            out(*format);
 8000652:	47a8      	blx	r5
            idx++;
 8000654:	3401      	adds	r4, #1
            format++;
 8000656:	9b03      	ldr	r3, [sp, #12]
 8000658:	3301      	adds	r3, #1
 800065a:	9303      	str	r3, [sp, #12]
    while (*format)
 800065c:	9b03      	ldr	r3, [sp, #12]
 800065e:	7818      	ldrb	r0, [r3, #0]
 8000660:	2800      	cmp	r0, #0
 8000662:	d100      	bne.n	8000666 <fnprintf+0x22>
 8000664:	e089      	b.n	800077a <fnprintf+0x136>
        if (*format == '%')
 8000666:	2825      	cmp	r0, #37	; 0x25
 8000668:	d1f3      	bne.n	8000652 <fnprintf+0xe>
            format++;
 800066a:	1c5a      	adds	r2, r3, #1
 800066c:	9203      	str	r2, [sp, #12]
            continue;
        }

        // evaluate width field
        width = 0U;
        if (_is_digit(*format))
 800066e:	785b      	ldrb	r3, [r3, #1]
    return (ch >= '0') && (ch <= '9');
 8000670:	3b30      	subs	r3, #48	; 0x30
 8000672:	b2db      	uxtb	r3, r3
        if (_is_digit(*format))
 8000674:	2b09      	cmp	r3, #9
 8000676:	d90b      	bls.n	8000690 <fnprintf+0x4c>
        width = 0U;
 8000678:	2300      	movs	r3, #0
        {
            width = _atoi(&format);
        }

        // evaluate specifier
        switch (*format)
 800067a:	9a03      	ldr	r2, [sp, #12]
 800067c:	7810      	ldrb	r0, [r2, #0]
 800067e:	0002      	movs	r2, r0
 8000680:	3a25      	subs	r2, #37	; 0x25
 8000682:	b2d1      	uxtb	r1, r2
 8000684:	2953      	cmp	r1, #83	; 0x53
 8000686:	d872      	bhi.n	800076e <fnprintf+0x12a>
 8000688:	008a      	lsls	r2, r1, #2
 800068a:	493d      	ldr	r1, [pc, #244]	; (8000780 <fnprintf+0x13c>)
 800068c:	588a      	ldr	r2, [r1, r2]
 800068e:	4697      	mov	pc, r2
            width = _atoi(&format);
 8000690:	a803      	add	r0, sp, #12
 8000692:	f7ff ff51 	bl	8000538 <_atoi>
 8000696:	0003      	movs	r3, r0
 8000698:	e7ef      	b.n	800067a <fnprintf+0x36>
        case 'o':
        case 'b':
        {
            // set the base
            uint32_t base;
            if (*format == 'x' || *format == 'X')
 800069a:	2878      	cmp	r0, #120	; 0x78
 800069c:	d009      	beq.n	80006b2 <fnprintf+0x6e>
 800069e:	2858      	cmp	r0, #88	; 0x58
 80006a0:	d01a      	beq.n	80006d8 <fnprintf+0x94>
            {
                base = 16U;
            }
            else if (*format == 'o')
 80006a2:	286f      	cmp	r0, #111	; 0x6f
 80006a4:	d01a      	beq.n	80006dc <fnprintf+0x98>
            {
                base = 8U;
            }
            else if (*format == 'b')
 80006a6:	2862      	cmp	r0, #98	; 0x62
 80006a8:	d001      	beq.n	80006ae <fnprintf+0x6a>
            {
                base = 2U;
            }
            else
            {
                base = 10U;
 80006aa:	220a      	movs	r2, #10
 80006ac:	e002      	b.n	80006b4 <fnprintf+0x70>
                base = 2U;
 80006ae:	2202      	movs	r2, #2
 80006b0:	e000      	b.n	80006b4 <fnprintf+0x70>
                base = 16U;
 80006b2:	2210      	movs	r2, #16
            }

            // convert integer
            if ((*format == 'i') || (*format == 'd'))
 80006b4:	2869      	cmp	r0, #105	; 0x69
 80006b6:	d001      	beq.n	80006bc <fnprintf+0x78>
 80006b8:	2864      	cmp	r0, #100	; 0x64
 80006ba:	d111      	bne.n	80006e0 <fnprintf+0x9c>
            {
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, true);
 80006bc:	9902      	ldr	r1, [sp, #8]
 80006be:	1d08      	adds	r0, r1, #4
 80006c0:	9002      	str	r0, [sp, #8]
 80006c2:	6809      	ldr	r1, [r1, #0]
 80006c4:	2001      	movs	r0, #1
 80006c6:	9000      	str	r0, [sp, #0]
 80006c8:	0028      	movs	r0, r5
 80006ca:	f7ff ff47 	bl	800055c <_ntoa_format>
 80006ce:	1824      	adds	r4, r4, r0
            }
            else
            {
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, false);
            }
            format++;
 80006d0:	9b03      	ldr	r3, [sp, #12]
 80006d2:	3301      	adds	r3, #1
 80006d4:	9303      	str	r3, [sp, #12]
            break;
 80006d6:	e7c1      	b.n	800065c <fnprintf+0x18>
                base = 16U;
 80006d8:	2210      	movs	r2, #16
 80006da:	e7eb      	b.n	80006b4 <fnprintf+0x70>
                base = 8U;
 80006dc:	2208      	movs	r2, #8
 80006de:	e7e9      	b.n	80006b4 <fnprintf+0x70>
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, false);
 80006e0:	9902      	ldr	r1, [sp, #8]
 80006e2:	1d08      	adds	r0, r1, #4
 80006e4:	9002      	str	r0, [sp, #8]
 80006e6:	6809      	ldr	r1, [r1, #0]
 80006e8:	2000      	movs	r0, #0
 80006ea:	9000      	str	r0, [sp, #0]
 80006ec:	0028      	movs	r0, r5
 80006ee:	f7ff ff35 	bl	800055c <_ntoa_format>
 80006f2:	1824      	adds	r4, r4, r0
 80006f4:	e7ec      	b.n	80006d0 <fnprintf+0x8c>
        }

        case 'c':
        {
            out((char)va_arg(va, int));
 80006f6:	9b02      	ldr	r3, [sp, #8]
 80006f8:	1d1a      	adds	r2, r3, #4
 80006fa:	9202      	str	r2, [sp, #8]
 80006fc:	7818      	ldrb	r0, [r3, #0]
 80006fe:	47a8      	blx	r5
            idx++;
 8000700:	3401      	adds	r4, #1
            format++;
 8000702:	9b03      	ldr	r3, [sp, #12]
 8000704:	3301      	adds	r3, #1
 8000706:	9303      	str	r3, [sp, #12]
            break;
 8000708:	e7a8      	b.n	800065c <fnprintf+0x18>
        }

        case 's':
        {
            const char *p = va_arg(va, char *);
 800070a:	9b02      	ldr	r3, [sp, #8]
 800070c:	1d1a      	adds	r2, r3, #4
 800070e:	9202      	str	r2, [sp, #8]
 8000710:	681e      	ldr	r6, [r3, #0]
    for (s = str; *s && maxsize--; ++s)
 8000712:	0033      	movs	r3, r6
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	00d2      	lsls	r2, r2, #3
 8000718:	e001      	b.n	800071e <fnprintf+0xda>
 800071a:	3301      	adds	r3, #1
 800071c:	000a      	movs	r2, r1
 800071e:	7819      	ldrb	r1, [r3, #0]
 8000720:	2900      	cmp	r1, #0
 8000722:	d002      	beq.n	800072a <fnprintf+0xe6>
 8000724:	1e51      	subs	r1, r2, #1
 8000726:	2a00      	cmp	r2, #0
 8000728:	d1f7      	bne.n	800071a <fnprintf+0xd6>
            uint32_t l = _strnlen_s(p, PRINTF_MAX_STR_LEN);

            // string output
            while (*p != 0)
 800072a:	7830      	ldrb	r0, [r6, #0]
 800072c:	2800      	cmp	r0, #0
 800072e:	d003      	beq.n	8000738 <fnprintf+0xf4>
            {
                out(*(p++));
 8000730:	3601      	adds	r6, #1
 8000732:	47a8      	blx	r5
                idx++;
 8000734:	3401      	adds	r4, #1
 8000736:	e7f8      	b.n	800072a <fnprintf+0xe6>
            }
            format++;
 8000738:	9b03      	ldr	r3, [sp, #12]
 800073a:	3301      	adds	r3, #1
 800073c:	9303      	str	r3, [sp, #12]
            break;
 800073e:	e78d      	b.n	800065c <fnprintf+0x18>
        }

        case 'p':
        {
            width = sizeof(void *) * 2U;
            idx += _ntoa_format(out, (int32_t)((uintptr_t)va_arg(va, void *)), 16U, width, false);
 8000740:	9b02      	ldr	r3, [sp, #8]
 8000742:	1d1a      	adds	r2, r3, #4
 8000744:	9202      	str	r2, [sp, #8]
 8000746:	6819      	ldr	r1, [r3, #0]
 8000748:	2300      	movs	r3, #0
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	3308      	adds	r3, #8
 800074e:	2210      	movs	r2, #16
 8000750:	0028      	movs	r0, r5
 8000752:	f7ff ff03 	bl	800055c <_ntoa_format>
 8000756:	1824      	adds	r4, r4, r0
            format++;
 8000758:	9b03      	ldr	r3, [sp, #12]
 800075a:	3301      	adds	r3, #1
 800075c:	9303      	str	r3, [sp, #12]
            break;
 800075e:	e77d      	b.n	800065c <fnprintf+0x18>
        }

        case '%':
        {
            out('%');
 8000760:	2025      	movs	r0, #37	; 0x25
 8000762:	47a8      	blx	r5
            idx++;
 8000764:	3401      	adds	r4, #1
            format++;
 8000766:	9b03      	ldr	r3, [sp, #12]
 8000768:	3301      	adds	r3, #1
 800076a:	9303      	str	r3, [sp, #12]
            break;
 800076c:	e776      	b.n	800065c <fnprintf+0x18>
        }

        default:
        {
            out(*format);
 800076e:	47a8      	blx	r5
            idx++;
 8000770:	3401      	adds	r4, #1
            format++;
 8000772:	9b03      	ldr	r3, [sp, #12]
 8000774:	3301      	adds	r3, #1
 8000776:	9303      	str	r3, [sp, #12]
            break;
 8000778:	e770      	b.n	800065c <fnprintf+0x18>
        }
        }
    }
    // return written chars without terminating \0
    return idx;
}
 800077a:	0020      	movs	r0, r4
 800077c:	b004      	add	sp, #16
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	08001284 	.word	0x08001284

08000784 <spi_read_single>:
 * 
 * @param reg Register to read
 * @retval Value read from register
 */
static uint8_t spi_read_single(uint8_t reg)
{
 8000784:	b570      	push	{r4, r5, r6, lr}
 8000786:	0004      	movs	r4, r0
  spi_chip_select();
 8000788:	25a0      	movs	r5, #160	; 0xa0
 800078a:	05ed      	lsls	r5, r5, #23
 800078c:	2140      	movs	r1, #64	; 0x40
 800078e:	0028      	movs	r0, r5
 8000790:	f000 fa14 	bl	8000bbc <gpio_clear>
  timers_delay_microseconds(1);
 8000794:	2001      	movs	r0, #1
 8000796:	f000 f8c5 	bl	8000924 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, reg);                   
 800079a:	b2a1      	uxth	r1, r4
 800079c:	4c08      	ldr	r4, [pc, #32]	; (80007c0 <spi_read_single+0x3c>)
 800079e:	0020      	movs	r0, r4
 80007a0:	f000 fbb8 	bl	8000f14 <spi_xfer>
  uint8_t in =  spi_xfer(RFM_SPI, 0x00);                   
 80007a4:	2100      	movs	r1, #0
 80007a6:	0020      	movs	r0, r4
 80007a8:	f000 fbb4 	bl	8000f14 <spi_xfer>
 80007ac:	b2c4      	uxtb	r4, r0
    
  spi_chip_deselect(); 
 80007ae:	2140      	movs	r1, #64	; 0x40
 80007b0:	0028      	movs	r0, r5
 80007b2:	f000 fa01 	bl	8000bb8 <gpio_set>
  timers_delay_microseconds(1);
 80007b6:	2001      	movs	r0, #1
 80007b8:	f000 f8b4 	bl	8000924 <timers_delay_microseconds>

  return in;
}
 80007bc:	0020      	movs	r0, r4
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	40003800 	.word	0x40003800

080007c4 <spi_write_single>:
  spi_chip_deselect();     
  timers_delay_microseconds(1);
}

static void spi_write_single(uint8_t reg, uint8_t data)
{
 80007c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c6:	0005      	movs	r5, r0
 80007c8:	000e      	movs	r6, r1
  // Set MSB for write operation
  uint8_t cmd = 0x80 | reg;
 80007ca:	2480      	movs	r4, #128	; 0x80
 80007cc:	4264      	negs	r4, r4
 80007ce:	4304      	orrs	r4, r0
 80007d0:	b2e4      	uxtb	r4, r4

  spi_chip_select();
 80007d2:	27a0      	movs	r7, #160	; 0xa0
 80007d4:	05ff      	lsls	r7, r7, #23
 80007d6:	2140      	movs	r1, #64	; 0x40
 80007d8:	0038      	movs	r0, r7
 80007da:	f000 f9ef 	bl	8000bbc <gpio_clear>
  timers_delay_microseconds(1);
 80007de:	2001      	movs	r0, #1
 80007e0:	f000 f8a0 	bl	8000924 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, cmd);                 
 80007e4:	b2a1      	uxth	r1, r4
 80007e6:	4c15      	ldr	r4, [pc, #84]	; (800083c <spi_write_single+0x78>)
 80007e8:	0020      	movs	r0, r4
 80007ea:	f000 fb93 	bl	8000f14 <spi_xfer>
  spi_xfer(RFM_SPI, data);             
 80007ee:	b2b1      	uxth	r1, r6
 80007f0:	0020      	movs	r0, r4
 80007f2:	f000 fb8f 	bl	8000f14 <spi_xfer>

  spi_chip_deselect(); 
 80007f6:	2140      	movs	r1, #64	; 0x40
 80007f8:	0038      	movs	r0, r7
 80007fa:	f000 f9dd 	bl	8000bb8 <gpio_set>
  timers_delay_microseconds(1);
 80007fe:	2001      	movs	r0, #1
 8000800:	f000 f890 	bl	8000924 <timers_delay_microseconds>

  uint8_t curr_data = spi_read_single(reg);
 8000804:	0028      	movs	r0, r5
 8000806:	f7ff ffbd 	bl	8000784 <spi_read_single>
 800080a:	0004      	movs	r4, r0

  // log_printf(MAIN, "%02x : %02x\n", reg, data);

  if(reg == RFM_REG_12_IRQ_FLAGS)    
 800080c:	2d12      	cmp	r5, #18
 800080e:	d013      	beq.n	8000838 <spi_write_single+0x74>
    return;

  TIMEOUT(10000, "RFM SPI Write", ((reg << 16) | data), (curr_data == data), ;, timers_delay_microseconds(100); curr_data = spi_read_single(reg););
 8000810:	f000 f8da 	bl	80009c8 <timeout_init>
 8000814:	042a      	lsls	r2, r5, #16
 8000816:	4332      	orrs	r2, r6
 8000818:	4909      	ldr	r1, [pc, #36]	; (8000840 <spi_write_single+0x7c>)
 800081a:	480a      	ldr	r0, [pc, #40]	; (8000844 <spi_write_single+0x80>)
 800081c:	f000 f8e2 	bl	80009e4 <timeout>
 8000820:	2800      	cmp	r0, #0
 8000822:	d109      	bne.n	8000838 <spi_write_single+0x74>
 8000824:	42b4      	cmp	r4, r6
 8000826:	d007      	beq.n	8000838 <spi_write_single+0x74>
 8000828:	2064      	movs	r0, #100	; 0x64
 800082a:	f000 f87b 	bl	8000924 <timers_delay_microseconds>
 800082e:	0028      	movs	r0, r5
 8000830:	f7ff ffa8 	bl	8000784 <spi_read_single>
 8000834:	0004      	movs	r4, r0
 8000836:	e7ed      	b.n	8000814 <spi_write_single+0x50>

  // log_printf(MAIN, "%02x : %02x : %02x\n", reg, data, curr_data);
}
 8000838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	40003800 	.word	0x40003800
 8000840:	080013d4 	.word	0x080013d4
 8000844:	00002710 	.word	0x00002710

08000848 <exti4_15_isr>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void exti4_15_isr(void)
{
 8000848:	b570      	push	{r4, r5, r6, lr}
  uint16_t timer = timers_micros();
 800084a:	f000 f881 	bl	8000950 <timers_micros>
  
  exti_reset_request(RFM_IO_0_EXTI);
 800084e:	2480      	movs	r4, #128	; 0x80
 8000850:	00e4      	lsls	r4, r4, #3
 8000852:	0020      	movs	r0, r4
 8000854:	f000 f98c 	bl	8000b70 <exti_reset_request>
  exti_reset_request(RFM_IO_0_EXTI);
 8000858:	0020      	movs	r0, r4
 800085a:	f000 f989 	bl	8000b70 <exti_reset_request>

  // Store IRQ Flags
  packets_buf[packets_head].flags = get_irq();
 800085e:	4d1b      	ldr	r5, [pc, #108]	; (80008cc <exti4_15_isr+0x84>)
 8000860:	782e      	ldrb	r6, [r5, #0]
  return spi_read_single(RFM_REG_12_IRQ_FLAGS);
 8000862:	2012      	movs	r0, #18
 8000864:	f7ff ff8e 	bl	8000784 <spi_read_single>
  packets_buf[packets_head].flags = get_irq();
 8000868:	4c19      	ldr	r4, [pc, #100]	; (80008d0 <exti4_15_isr+0x88>)
 800086a:	0073      	lsls	r3, r6, #1
 800086c:	199b      	adds	r3, r3, r6
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	18e3      	adds	r3, r4, r3
 8000872:	7418      	strb	r0, [r3, #16]
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 8000874:	21ff      	movs	r1, #255	; 0xff
 8000876:	2012      	movs	r0, #18
 8000878:	f7ff ffa4 	bl	80007c4 <spi_write_single>
 800087c:	21ff      	movs	r1, #255	; 0xff
 800087e:	2012      	movs	r0, #18
 8000880:	f7ff ffa0 	bl	80007c4 <spi_write_single>
  clear_irq(RFM_IRQ_ALL);
  clear_irq(RFM_IRQ_ALL);

  // Get signal strength
  packets_buf[packets_head].rssi = spi_read_single(RFM_REG_1A_PKT_RSSI_VALUE);
 8000884:	201a      	movs	r0, #26
 8000886:	f7ff ff7d 	bl	8000784 <spi_read_single>
 800088a:	782a      	ldrb	r2, [r5, #0]
 800088c:	b200      	sxth	r0, r0
  packets_buf[packets_head].rssi -= 137;
 800088e:	0053      	lsls	r3, r2, #1
 8000890:	189b      	adds	r3, r3, r2
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	18e3      	adds	r3, r4, r3
 8000896:	3889      	subs	r0, #137	; 0x89
 8000898:	8298      	strh	r0, [r3, #20]
  packets_buf[packets_head].snr = spi_read_single(RFM_REG_19_PKT_SNR_VALUE) / 4;
 800089a:	2019      	movs	r0, #25
 800089c:	f7ff ff72 	bl	8000784 <spi_read_single>
 80008a0:	782b      	ldrb	r3, [r5, #0]
 80008a2:	005a      	lsls	r2, r3, #1
 80008a4:	18d2      	adds	r2, r2, r3
 80008a6:	00d2      	lsls	r2, r2, #3
 80008a8:	18a4      	adds	r4, r4, r2
 80008aa:	0880      	lsrs	r0, r0, #2
 80008ac:	74a0      	strb	r0, [r4, #18]

  // Check for CRC error
  packets_buf[packets_head].crc_ok = !(packets_buf[packets_head].flags & RFM_IRQ_PAYLOAD_CRC_ERROR);
 80008ae:	7c22      	ldrb	r2, [r4, #16]
 80008b0:	0952      	lsrs	r2, r2, #5
 80008b2:	2101      	movs	r1, #1
 80008b4:	404a      	eors	r2, r1
 80008b6:	2101      	movs	r1, #1
 80008b8:	400a      	ands	r2, r1
 80008ba:	7462      	strb	r2, [r4, #17]

  packets_head = (packets_head + 1) % PACKETS_BUF_SIZE;
 80008bc:	3301      	adds	r3, #1
 80008be:	220f      	movs	r2, #15
 80008c0:	4013      	ands	r3, r2
 80008c2:	702b      	strb	r3, [r5, #0]

  uint16_t time = timers_micros() - timer;
 80008c4:	f000 f844 	bl	8000950 <timers_micros>
  // log_printf(MAIN, "ISR %u %u %u\n", time, packets_head, packets_tail);
}
 80008c8:	bd70      	pop	{r4, r5, r6, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	200002a4 	.word	0x200002a4
 80008d0:	20000124 	.word	0x20000124

080008d4 <timers_lptim_init>:
}


// Setup lptim1 as approx. microsecond counter
void timers_lptim_init(void)
{
 80008d4:	b510      	push	{r4, lr}
    // Input clock is 2.097Mhz
    rcc_set_peripheral_clk_sel(LPTIM1, RCC_CCIPR_LPTIM1SEL_APB);
 80008d6:	4c10      	ldr	r4, [pc, #64]	; (8000918 <timers_lptim_init+0x44>)
 80008d8:	2100      	movs	r1, #0
 80008da:	0020      	movs	r0, r4
 80008dc:	f000 faae 	bl	8000e3c <rcc_set_peripheral_clk_sel>
 
    rcc_periph_clock_enable(RCC_LPTIM1);
 80008e0:	480e      	ldr	r0, [pc, #56]	; (800091c <timers_lptim_init+0x48>)
 80008e2:	f000 fae1 	bl	8000ea8 <rcc_periph_clock_enable>
    
    lptimer_set_internal_clock_source(LPTIM1);
 80008e6:	0020      	movs	r0, r4
 80008e8:	f000 f9f2 	bl	8000cd0 <lptimer_set_internal_clock_source>
    lptimer_enable_trigger(LPTIM1, LPTIM_CFGR_TRIGEN_SW);
 80008ec:	2100      	movs	r1, #0
 80008ee:	0020      	movs	r0, r4
 80008f0:	f000 f9e4 	bl	8000cbc <lptimer_enable_trigger>
    lptimer_set_prescaler(LPTIM1, LPTIM_CFGR_PRESC_2);
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	0089      	lsls	r1, r1, #2
 80008f8:	0020      	movs	r0, r4
 80008fa:	f000 f9d7 	bl	8000cac <lptimer_set_prescaler>
    
    lptimer_enable(LPTIM1);
 80008fe:	0020      	movs	r0, r4
 8000900:	f000 f9ca 	bl	8000c98 <lptimer_enable>
    
    lptimer_set_period(LPTIM1, 0xffff);
 8000904:	4906      	ldr	r1, [pc, #24]	; (8000920 <timers_lptim_init+0x4c>)
 8000906:	0020      	movs	r0, r4
 8000908:	f000 f9e0 	bl	8000ccc <lptimer_set_period>
    
    lptimer_start_counter(LPTIM1, LPTIM_CR_CNTSTRT);
 800090c:	2104      	movs	r1, #4
 800090e:	0020      	movs	r0, r4
 8000910:	f000 f9c7 	bl	8000ca2 <lptimer_start_counter>
}
 8000914:	bd10      	pop	{r4, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	40007c00 	.word	0x40007c00
 800091c:	0000071f 	.word	0x0000071f
 8000920:	0000ffff 	.word	0x0000ffff

08000924 <timers_delay_microseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_microseconds(uint32_t delay_microseconds)
{
 8000924:	b570      	push	{r4, r5, r6, lr}
 8000926:	0004      	movs	r4, r0
    uint32_t curr_time = lptimer_get_counter(LPTIM1);
 8000928:	4807      	ldr	r0, [pc, #28]	; (8000948 <timers_delay_microseconds+0x24>)
 800092a:	f000 f9b2 	bl	8000c92 <lptimer_get_counter>
 800092e:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_microseconds > 65000)
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <timers_delay_microseconds+0x28>)
 8000932:	429c      	cmp	r4, r3
 8000934:	d900      	bls.n	8000938 <timers_delay_microseconds+0x14>
        delay_microseconds = 65000;
 8000936:	001c      	movs	r4, r3

    while (lptimer_get_counter(LPTIM1) - curr_time < delay_microseconds);
 8000938:	4803      	ldr	r0, [pc, #12]	; (8000948 <timers_delay_microseconds+0x24>)
 800093a:	f000 f9aa 	bl	8000c92 <lptimer_get_counter>
 800093e:	1b40      	subs	r0, r0, r5
 8000940:	42a0      	cmp	r0, r4
 8000942:	d3f9      	bcc.n	8000938 <timers_delay_microseconds+0x14>
}
 8000944:	bd70      	pop	{r4, r5, r6, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	40007c00 	.word	0x40007c00
 800094c:	0000fde8 	.word	0x0000fde8

08000950 <timers_micros>:
}
*/

// Returns value of microsecond counter
uint16_t timers_micros(void)
{
 8000950:	b510      	push	{r4, lr}
    return (uint16_t)lptimer_get_counter(LPTIM1);
 8000952:	4802      	ldr	r0, [pc, #8]	; (800095c <timers_micros+0xc>)
 8000954:	f000 f99d 	bl	8000c92 <lptimer_get_counter>
}
 8000958:	bd10      	pop	{r4, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	40007c00 	.word	0x40007c00

08000960 <timers_tim6_init>:


// Setup TIM6 as millisecond counter. Clocked by APB1
void timers_tim6_init(void)
{
 8000960:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_TIM6);
 8000962:	4808      	ldr	r0, [pc, #32]	; (8000984 <timers_tim6_init+0x24>)
 8000964:	f000 faa0 	bl	8000ea8 <rcc_periph_clock_enable>
    timer_disable_counter(TIM6);
 8000968:	4c07      	ldr	r4, [pc, #28]	; (8000988 <timers_tim6_init+0x28>)
 800096a:	0020      	movs	r0, r4
 800096c:	f000 fadf 	bl	8000f2e <timer_disable_counter>
    timer_set_prescaler(TIM6, (2097 - 1));
 8000970:	2183      	movs	r1, #131	; 0x83
 8000972:	0109      	lsls	r1, r1, #4
 8000974:	0020      	movs	r0, r4
 8000976:	f000 fadf 	bl	8000f38 <timer_set_prescaler>
    timer_enable_counter(TIM6);
 800097a:	0020      	movs	r0, r4
 800097c:	f000 fad2 	bl	8000f24 <timer_enable_counter>
}
 8000980:	bd10      	pop	{r4, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	00000704 	.word	0x00000704
 8000988:	40001000 	.word	0x40001000

0800098c <timers_delay_milliseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_milliseconds(uint32_t delay_milliseconds)
{
 800098c:	b570      	push	{r4, r5, r6, lr}
 800098e:	0004      	movs	r4, r0
    uint32_t curr_time = timer_get_counter(TIM6);
 8000990:	4807      	ldr	r0, [pc, #28]	; (80009b0 <timers_delay_milliseconds+0x24>)
 8000992:	f000 fad3 	bl	8000f3c <timer_get_counter>
 8000996:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_milliseconds > 65000)
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <timers_delay_milliseconds+0x28>)
 800099a:	429c      	cmp	r4, r3
 800099c:	d900      	bls.n	80009a0 <timers_delay_milliseconds+0x14>
        delay_milliseconds = 65000;
 800099e:	001c      	movs	r4, r3

    while (timer_get_counter(TIM6) - curr_time < delay_milliseconds);
 80009a0:	4803      	ldr	r0, [pc, #12]	; (80009b0 <timers_delay_milliseconds+0x24>)
 80009a2:	f000 facb 	bl	8000f3c <timer_get_counter>
 80009a6:	1b40      	subs	r0, r0, r5
 80009a8:	42a0      	cmp	r0, r4
 80009aa:	d3f9      	bcc.n	80009a0 <timers_delay_milliseconds+0x14>
}
 80009ac:	bd70      	pop	{r4, r5, r6, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	40001000 	.word	0x40001000
 80009b4:	0000fde8 	.word	0x0000fde8

080009b8 <timers_millis>:

// Returns value of millisecond counter
uint16_t timers_millis(void)
{
 80009b8:	b510      	push	{r4, lr}
    return timer_get_counter(TIM6);
 80009ba:	4802      	ldr	r0, [pc, #8]	; (80009c4 <timers_millis+0xc>)
 80009bc:	f000 fabe 	bl	8000f3c <timer_get_counter>
 80009c0:	b280      	uxth	r0, r0
}
 80009c2:	bd10      	pop	{r4, pc}
 80009c4:	40001000 	.word	0x40001000

080009c8 <timeout_init>:
}


// Timout functions
void timeout_init(void)
{
 80009c8:	b510      	push	{r4, lr}
    timeout_counter     = 0; 
 80009ca:	4b04      	ldr	r3, [pc, #16]	; (80009dc <timeout_init+0x14>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
    // timeout_counter     = 2140483648; 
    timeout_timer       = timers_micros(); 
 80009d0:	f7ff ffbe 	bl	8000950 <timers_micros>
 80009d4:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <timeout_init+0x18>)
 80009d6:	8018      	strh	r0, [r3, #0]
}
 80009d8:	bd10      	pop	{r4, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	200002a8 	.word	0x200002a8
 80009e0:	200002ac 	.word	0x200002ac

080009e4 <timeout>:

bool timeout(uint32_t time_microseconds, char *msg, uint32_t data)
{
 80009e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009e6:	b083      	sub	sp, #12
 80009e8:	0006      	movs	r6, r0
 80009ea:	9101      	str	r1, [sp, #4]
 80009ec:	0015      	movs	r5, r2
    timeout_counter    += (uint16_t)(timers_micros() - timeout_timer);
 80009ee:	f7ff ffaf 	bl	8000950 <timers_micros>
 80009f2:	4c0d      	ldr	r4, [pc, #52]	; (8000a28 <timeout+0x44>)
 80009f4:	8823      	ldrh	r3, [r4, #0]
 80009f6:	1ac3      	subs	r3, r0, r3
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	4f0c      	ldr	r7, [pc, #48]	; (8000a2c <timeout+0x48>)
 80009fc:	683a      	ldr	r2, [r7, #0]
 80009fe:	4694      	mov	ip, r2
 8000a00:	4463      	add	r3, ip
 8000a02:	603b      	str	r3, [r7, #0]
    timeout_timer       = timers_micros();
 8000a04:	f7ff ffa4 	bl	8000950 <timers_micros>
 8000a08:	8020      	strh	r0, [r4, #0]

    // log_printf(MAIN, "%u\n", timeout_counter);

    if(timeout_counter > time_microseconds)
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	42b3      	cmp	r3, r6
 8000a0e:	d802      	bhi.n	8000a16 <timeout+0x32>
    {
        log_printf(MAIN, "Timeout %s %08X\n", msg, data);
        return true;
    }
    else    
        return false;
 8000a10:	2000      	movs	r0, #0
}
 8000a12:	b003      	add	sp, #12
 8000a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
        log_printf(MAIN, "Timeout %s %08X\n", msg, data);
 8000a16:	002b      	movs	r3, r5
 8000a18:	9a01      	ldr	r2, [sp, #4]
 8000a1a:	4905      	ldr	r1, [pc, #20]	; (8000a30 <timeout+0x4c>)
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff fd27 	bl	8000470 <log_printf>
        return true;
 8000a22:	2001      	movs	r0, #1
 8000a24:	e7f5      	b.n	8000a12 <timeout+0x2e>
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	200002ac 	.word	0x200002ac
 8000a2c:	200002a8 	.word	0x200002a8
 8000a30:	080013e4 	.word	0x080013e4

08000a34 <set_gpio_for_standby>:

void set_gpio_for_standby(void)
{   
 8000a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Common
    // LED
    gpio_mode_setup(LED_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, LED);
 8000a36:	2680      	movs	r6, #128	; 0x80
 8000a38:	0076      	lsls	r6, r6, #1
 8000a3a:	4c36      	ldr	r4, [pc, #216]	; (8000b14 <set_gpio_for_standby+0xe0>)
 8000a3c:	0033      	movs	r3, r6
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2103      	movs	r1, #3
 8000a42:	0020      	movs	r0, r4
 8000a44:	f000 f8bd 	bl	8000bc2 <gpio_mode_setup>
    gpio_set(LED_PORT, LED);
 8000a48:	0031      	movs	r1, r6
 8000a4a:	0020      	movs	r0, r4
 8000a4c:	f000 f8b4 	bl	8000bb8 <gpio_set>

    // Serial Print
    gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, SPF_USART_TX);
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	25a0      	movs	r5, #160	; 0xa0
 8000a54:	05ed      	lsls	r5, r5, #23
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	0028      	movs	r0, r5
 8000a5e:	f000 f8b0 	bl	8000bc2 <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE,  SPF_USART_RX);
 8000a62:	2780      	movs	r7, #128	; 0x80
 8000a64:	00ff      	lsls	r7, r7, #3
 8000a66:	003b      	movs	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	0028      	movs	r0, r5
 8000a6e:	f000 f8a8 	bl	8000bc2 <gpio_mode_setup>
	gpio_set(SPF_USART_RX_PORT, SPF_USART_RX);
 8000a72:	0039      	movs	r1, r7
 8000a74:	0028      	movs	r0, r5
 8000a76:	f000 f89f 	bl	8000bb8 <gpio_set>

    // Batt Sense
    gpio_mode_setup(BATT_SENS_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, BATT_SENS);
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2103      	movs	r1, #3
 8000a80:	0028      	movs	r0, r5
 8000a82:	f000 f89e 	bl	8000bc2 <gpio_mode_setup>
    
    // RFM
    // SPI
    gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_ANALOG,   GPIO_PUPD_NONE,       RFM_SPI_MISO);
 8000a86:	2380      	movs	r3, #128	; 0x80
 8000a88:	01db      	lsls	r3, r3, #7
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2103      	movs	r1, #3
 8000a8e:	0020      	movs	r0, r4
 8000a90:	f000 f897 	bl	8000bc2 <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_SCK_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_SCK);
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	019b      	lsls	r3, r3, #6
 8000a98:	2202      	movs	r2, #2
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	0020      	movs	r0, r4
 8000a9e:	f000 f890 	bl	8000bc2 <gpio_mode_setup>
    gpio_mode_setup(RFM_SPI_MOSI_PORT,  GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_MOSI);
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	021b      	lsls	r3, r3, #8
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	0020      	movs	r0, r4
 8000aac:	f000 f889 	bl	8000bc2 <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_NSS_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_SPI_NSS);
 8000ab0:	2340      	movs	r3, #64	; 0x40
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	0028      	movs	r0, r5
 8000ab8:	f000 f883 	bl	8000bc2 <gpio_mode_setup>
    gpio_mode_setup(RFM_RESET_PORT,     GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_RESET);
 8000abc:	2310      	movs	r3, #16
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	0028      	movs	r0, r5
 8000ac4:	f000 f87d 	bl	8000bc2 <gpio_mode_setup>

    // DIO
    gpio_mode_setup(RFM_IO_0_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_0);
 8000ac8:	003b      	movs	r3, r7
 8000aca:	2200      	movs	r2, #0
 8000acc:	2103      	movs	r1, #3
 8000ace:	0020      	movs	r0, r4
 8000ad0:	f000 f877 	bl	8000bc2 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_1_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_1);
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	011b      	lsls	r3, r3, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2103      	movs	r1, #3
 8000adc:	0020      	movs	r0, r4
 8000ade:	f000 f870 	bl	8000bc2 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_2_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_2);
 8000ae2:	0033      	movs	r3, r6
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2103      	movs	r1, #3
 8000ae8:	0028      	movs	r0, r5
 8000aea:	f000 f86a 	bl	8000bc2 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_3_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_3);
 8000aee:	2302      	movs	r3, #2
 8000af0:	2200      	movs	r2, #0
 8000af2:	2103      	movs	r1, #3
 8000af4:	0020      	movs	r0, r4
 8000af6:	f000 f864 	bl	8000bc2 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_4_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_4);
 8000afa:	2304      	movs	r3, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	2103      	movs	r1, #3
 8000b00:	0020      	movs	r0, r4
 8000b02:	f000 f85e 	bl	8000bc2 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_5_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_5);
 8000b06:	2301      	movs	r3, #1
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2103      	movs	r1, #3
 8000b0c:	0020      	movs	r0, r4
 8000b0e:	f000 f858 	bl	8000bc2 <gpio_mode_setup>
    gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
	gpio_mode_setup(TEMP_I2C_SDA_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SDA);

    #endif

}
 8000b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b14:	50000400 	.word	0x50000400

08000b18 <rtc_isr>:

// Override default rtc interrupt handler
void rtc_isr(void)
{ 
 8000b18:	b510      	push	{r4, lr}
    exti_reset_request(EXTI20);
 8000b1a:	2080      	movs	r0, #128	; 0x80
 8000b1c:	0340      	lsls	r0, r0, #13
 8000b1e:	f000 f827 	bl	8000b70 <exti_reset_request>

    // scb_reset_system();

    log_init();
 8000b22:	f7ff fc97 	bl	8000454 <log_init>
    log_printf(MAIN, "RTC ISR\n");
 8000b26:	490d      	ldr	r1, [pc, #52]	; (8000b5c <rtc_isr+0x44>)
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f7ff fca1 	bl	8000470 <log_printf>

    if(RTC_ISR & RTC_ISR_WUTF)
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <rtc_isr+0x48>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	055b      	lsls	r3, r3, #21
 8000b34:	d400      	bmi.n	8000b38 <rtc_isr+0x20>
        pwr_clear_standby_flag();
        rtc_lock();
	    pwr_enable_backup_domain_write_protect();
        set_gpio_for_standby();
    }
}
 8000b36:	bd10      	pop	{r4, pc}
        pwr_disable_backup_domain_write_protect();
 8000b38:	f000 f8d0 	bl	8000cdc <pwr_disable_backup_domain_write_protect>
        rtc_unlock();
 8000b3c:	f000 f9d2 	bl	8000ee4 <rtc_unlock>
	    rtc_clear_wakeup_flag();
 8000b40:	f000 f9de 	bl	8000f00 <rtc_clear_wakeup_flag>
        pwr_clear_wakeup_flag();
 8000b44:	f000 f8e6 	bl	8000d14 <pwr_clear_wakeup_flag>
        pwr_clear_standby_flag();
 8000b48:	f000 f8dc 	bl	8000d04 <pwr_clear_standby_flag>
        rtc_lock();
 8000b4c:	f000 f9d2 	bl	8000ef4 <rtc_lock>
	    pwr_enable_backup_domain_write_protect();
 8000b50:	f000 f8ce 	bl	8000cf0 <pwr_enable_backup_domain_write_protect>
        set_gpio_for_standby();
 8000b54:	f7ff ff6e 	bl	8000a34 <set_gpio_for_standby>
}
 8000b58:	e7ed      	b.n	8000b36 <rtc_isr+0x1e>
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	080013f8 	.word	0x080013f8
 8000b60:	4000280c 	.word	0x4000280c

08000b64 <adc_start_conversion_regular>:
 * @param[in] adc ADC block register address base @ref adc_reg_base
 */
void adc_start_conversion_regular(uint32_t adc)
{
	/* Start conversion on regular channels. */
	ADC_CR(adc) |= ADC_CR_ADSTART;
 8000b64:	2304      	movs	r3, #4
 8000b66:	6882      	ldr	r2, [r0, #8]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	6083      	str	r3, [r0, #8]
}
 8000b6c:	4770      	bx	lr
	...

08000b70 <exti_reset_request>:
{
#if defined(EXTI_RPR1) && defined(EXTI_FPR1)
	EXTI_RPR1 = extis;
	EXTI_FPR1 = extis;
#else
	EXTI_PR = extis;
 8000b70:	4b01      	ldr	r3, [pc, #4]	; (8000b78 <exti_reset_request+0x8>)
 8000b72:	6018      	str	r0, [r3, #0]
#endif
}
 8000b74:	4770      	bx	lr
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	40010414 	.word	0x40010414

08000b7c <flash_set_ws>:
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8000b7c:	2101      	movs	r1, #1
	reg32 = FLASH_ACR;
 8000b7e:	4a03      	ldr	r2, [pc, #12]	; (8000b8c <flash_set_ws+0x10>)
 8000b80:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8000b82:	438b      	bics	r3, r1
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 8000b84:	4303      	orrs	r3, r0
	FLASH_ACR = reg32;
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	4770      	bx	lr
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	40022000 	.word	0x40022000

08000b90 <flash_unlock_pecr>:
 * yourself.
 * @sa flash_unlock
 */
void flash_unlock_pecr(void)
{
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY1;
 8000b90:	4b02      	ldr	r3, [pc, #8]	; (8000b9c <flash_unlock_pecr+0xc>)
 8000b92:	4a03      	ldr	r2, [pc, #12]	; (8000ba0 <flash_unlock_pecr+0x10>)
 8000b94:	601a      	str	r2, [r3, #0]
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY2;
 8000b96:	4a03      	ldr	r2, [pc, #12]	; (8000ba4 <flash_unlock_pecr+0x14>)
 8000b98:	601a      	str	r2, [r3, #0]
}
 8000b9a:	4770      	bx	lr
 8000b9c:	4002200c 	.word	0x4002200c
 8000ba0:	89abcdef 	.word	0x89abcdef
 8000ba4:	02030405 	.word	0x02030405

08000ba8 <flash_lock_pecr>:

void flash_lock_pecr(void)
{
	FLASH_PECR |= FLASH_PECR_PELOCK;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	4a02      	ldr	r2, [pc, #8]	; (8000bb4 <flash_lock_pecr+0xc>)
 8000bac:	6811      	ldr	r1, [r2, #0]
 8000bae:	430b      	orrs	r3, r1
 8000bb0:	6013      	str	r3, [r2, #0]
}
 8000bb2:	4770      	bx	lr
 8000bb4:	40022004 	.word	0x40022004

08000bb8 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8000bb8:	6181      	str	r1, [r0, #24]
}
 8000bba:	4770      	bx	lr

08000bbc <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8000bbc:	0409      	lsls	r1, r1, #16
 8000bbe:	6181      	str	r1, [r0, #24]
}
 8000bc0:	4770      	bx	lr

08000bc2 <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 8000bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc4:	b085      	sub	sp, #20
 8000bc6:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8000bc8:	2703      	movs	r7, #3
	pupd = GPIO_PUPDR(gpioport);
 8000bca:	2100      	movs	r1, #0
{
 8000bcc:	9202      	str	r2, [sp, #8]
 8000bce:	9303      	str	r3, [sp, #12]
	moder = GPIO_MODER(gpioport);
 8000bd0:	6802      	ldr	r2, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 8000bd2:	68c3      	ldr	r3, [r0, #12]
		if (!((1 << i) & gpios)) {
 8000bd4:	9c03      	ldr	r4, [sp, #12]
 8000bd6:	2501      	movs	r5, #1
 8000bd8:	410c      	asrs	r4, r1
 8000bda:	422c      	tst	r4, r5
 8000bdc:	d00a      	beq.n	8000bf4 <gpio_mode_setup+0x32>
		moder &= ~GPIO_MODE_MASK(i);
 8000bde:	003d      	movs	r5, r7
 8000be0:	004c      	lsls	r4, r1, #1
 8000be2:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8000be4:	9e01      	ldr	r6, [sp, #4]
		moder &= ~GPIO_MODE_MASK(i);
 8000be6:	43aa      	bics	r2, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 8000be8:	43ab      	bics	r3, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000bea:	9d02      	ldr	r5, [sp, #8]
		moder |= GPIO_MODE(i, mode);
 8000bec:	40a6      	lsls	r6, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000bee:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8000bf0:	4332      	orrs	r2, r6
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000bf2:	432b      	orrs	r3, r5
	for (i = 0; i < 16; i++) {
 8000bf4:	3101      	adds	r1, #1
 8000bf6:	2910      	cmp	r1, #16
 8000bf8:	d1ec      	bne.n	8000bd4 <gpio_mode_setup+0x12>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 8000bfa:	6002      	str	r2, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 8000bfc:	60c3      	str	r3, [r0, #12]
}
 8000bfe:	b005      	add	sp, #20
 8000c00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c02 <gpio_set_output_options>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_output_options(uint32_t gpioport, uint8_t otype, uint8_t speed,
			     uint16_t gpios)
{
 8000c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c04:	9201      	str	r2, [sp, #4]
	uint16_t i;
	uint32_t ospeedr;

	if (otype == 0x1) {
 8000c06:	2901      	cmp	r1, #1
 8000c08:	d116      	bne.n	8000c38 <gpio_set_output_options+0x36>
		GPIO_OTYPER(gpioport) |= gpios;
 8000c0a:	6841      	ldr	r1, [r0, #4]
 8000c0c:	4319      	orrs	r1, r3
	} else {
		GPIO_OTYPER(gpioport) &= ~gpios;
	}

	ospeedr = GPIO_OSPEEDR(gpioport);
 8000c0e:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8000c10:	2601      	movs	r6, #1
			continue;
		}
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8000c12:	2703      	movs	r7, #3
		GPIO_OTYPER(gpioport) &= ~gpios;
 8000c14:	6041      	str	r1, [r0, #4]
	ospeedr = GPIO_OSPEEDR(gpioport);
 8000c16:	6881      	ldr	r1, [r0, #8]
		if (!((1 << i) & gpios)) {
 8000c18:	001d      	movs	r5, r3
 8000c1a:	4125      	asrs	r5, r4
 8000c1c:	4235      	tst	r5, r6
 8000c1e:	d006      	beq.n	8000c2e <gpio_set_output_options+0x2c>
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8000c20:	003a      	movs	r2, r7
 8000c22:	0065      	lsls	r5, r4, #1
 8000c24:	40aa      	lsls	r2, r5
 8000c26:	4391      	bics	r1, r2
		ospeedr |= GPIO_OSPEED(i, speed);
 8000c28:	9a01      	ldr	r2, [sp, #4]
 8000c2a:	40aa      	lsls	r2, r5
 8000c2c:	4311      	orrs	r1, r2
	for (i = 0; i < 16; i++) {
 8000c2e:	3401      	adds	r4, #1
 8000c30:	2c10      	cmp	r4, #16
 8000c32:	d1f1      	bne.n	8000c18 <gpio_set_output_options+0x16>
	}

	GPIO_OSPEEDR(gpioport) = ospeedr;
 8000c34:	6081      	str	r1, [r0, #8]
}
 8000c36:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		GPIO_OTYPER(gpioport) &= ~gpios;
 8000c38:	6841      	ldr	r1, [r0, #4]
 8000c3a:	4399      	bics	r1, r3
 8000c3c:	e7e7      	b.n	8000c0e <gpio_set_output_options+0xc>

08000c3e <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 8000c3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);
 8000c40:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 8000c42:	2601      	movs	r6, #1
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 8000c44:	270f      	movs	r7, #15
	afrl = GPIO_AFRL(gpioport);
 8000c46:	6a04      	ldr	r4, [r0, #32]
{
 8000c48:	9100      	str	r1, [sp, #0]
	afrh = GPIO_AFRH(gpioport);
 8000c4a:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8000c4c:	9201      	str	r2, [sp, #4]
		if (!((1 << i) & gpios)) {
 8000c4e:	9d01      	ldr	r5, [sp, #4]
 8000c50:	411d      	asrs	r5, r3
 8000c52:	4235      	tst	r5, r6
 8000c54:	d006      	beq.n	8000c64 <gpio_set_af+0x26>
		afrl &= ~GPIO_AFR_MASK(i);
 8000c56:	003a      	movs	r2, r7
 8000c58:	009d      	lsls	r5, r3, #2
 8000c5a:	40aa      	lsls	r2, r5
 8000c5c:	4394      	bics	r4, r2
		afrl |= GPIO_AFR(i, alt_func_num);
 8000c5e:	9a00      	ldr	r2, [sp, #0]
 8000c60:	40aa      	lsls	r2, r5
 8000c62:	4314      	orrs	r4, r2
	for (i = 0; i < 8; i++) {
 8000c64:	3301      	adds	r3, #1
 8000c66:	2b08      	cmp	r3, #8
 8000c68:	d1f1      	bne.n	8000c4e <gpio_set_af+0x10>
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8000c6a:	2601      	movs	r6, #1
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8000c6c:	270f      	movs	r7, #15
		if (!((1 << i) & gpios)) {
 8000c6e:	9a01      	ldr	r2, [sp, #4]
 8000c70:	411a      	asrs	r2, r3
 8000c72:	4232      	tst	r2, r6
 8000c74:	d007      	beq.n	8000c86 <gpio_set_af+0x48>
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8000c76:	003a      	movs	r2, r7
 8000c78:	009d      	lsls	r5, r3, #2
 8000c7a:	3d20      	subs	r5, #32
 8000c7c:	40aa      	lsls	r2, r5
 8000c7e:	4391      	bics	r1, r2
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 8000c80:	9a00      	ldr	r2, [sp, #0]
 8000c82:	40aa      	lsls	r2, r5
 8000c84:	4311      	orrs	r1, r2
	for (i = 8; i < 16; i++) {
 8000c86:	3301      	adds	r3, #1
 8000c88:	2b10      	cmp	r3, #16
 8000c8a:	d1f0      	bne.n	8000c6e <gpio_set_af+0x30>
	}

	GPIO_AFRL(gpioport) = afrl;
 8000c8c:	6204      	str	r4, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 8000c8e:	6241      	str	r1, [r0, #36]	; 0x24
}
 8000c90:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08000c92 <lptimer_get_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @returns Counter value.
 */
uint16_t lptimer_get_counter(uint32_t lptimer_peripheral)
{
	return LPTIM_CNT(lptimer_peripheral);
 8000c92:	69c0      	ldr	r0, [r0, #28]
 8000c94:	b280      	uxth	r0, r0
}
 8000c96:	4770      	bx	lr

08000c98 <lptimer_enable>:
 *
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 */
void lptimer_enable(uint32_t lptimer_peripheral)
{
	LPTIM_CR(lptimer_peripheral) |= LPTIM_CR_ENABLE;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	6902      	ldr	r2, [r0, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	6103      	str	r3, [r0, #16]
}
 8000ca0:	4770      	bx	lr

08000ca2 <lptimer_start_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] mode lptimer start mode (@ref LPTIM_CR_SNGSTRT or @ref LPTIM_CR_CNTSTRT)
 */
void lptimer_start_counter(uint32_t lptimer_peripheral, uint32_t mode)
{
	LPTIM_CR(lptimer_peripheral) |= mode;
 8000ca2:	6903      	ldr	r3, [r0, #16]
 8000ca4:	430b      	orrs	r3, r1
 8000ca6:	6103      	str	r3, [r0, #16]
}
 8000ca8:	4770      	bx	lr
	...

08000cac <lptimer_set_prescaler>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] prescaler Clock prescaler (@ref lptim_cfgr_presc)
 */
void lptimer_set_prescaler(uint32_t lptimer_peripheral, uint32_t prescaler)
{
	uint32_t reg32 = LPTIM_CFGR(lptimer_peripheral);
 8000cac:	68c3      	ldr	r3, [r0, #12]
	reg32 &= ~(LPTIM_CFGR_PRESC_MASK << LPTIM_CFGR_PRESC_SHIFT);
 8000cae:	4a02      	ldr	r2, [pc, #8]	; (8000cb8 <lptimer_set_prescaler+0xc>)
 8000cb0:	4013      	ands	r3, r2
	LPTIM_CFGR(lptimer_peripheral) = reg32 | prescaler;
 8000cb2:	430b      	orrs	r3, r1
 8000cb4:	60c3      	str	r3, [r0, #12]
}
 8000cb6:	4770      	bx	lr
 8000cb8:	fffff1ff 	.word	0xfffff1ff

08000cbc <lptimer_enable_trigger>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] trigen Enable Trigger
 */
void lptimer_enable_trigger(uint32_t lptimer_peripheral, uint32_t trigen)
{
	uint32_t reg32 = LPTIM_CFGR(lptimer_peripheral);
 8000cbc:	68c3      	ldr	r3, [r0, #12]
	reg32 &= ~(LPTIM_CFGR_TRIGEN_MASK << LPTIM_CFGR_TRIGEN_SHIFT);
 8000cbe:	4a02      	ldr	r2, [pc, #8]	; (8000cc8 <lptimer_enable_trigger+0xc>)
 8000cc0:	4013      	ands	r3, r2
	LPTIM_CFGR(lptimer_peripheral) = reg32 | trigen;
 8000cc2:	430b      	orrs	r3, r1
 8000cc4:	60c3      	str	r3, [r0, #12]
}
 8000cc6:	4770      	bx	lr
 8000cc8:	fff1ffff 	.word	0xfff1ffff

08000ccc <lptimer_set_period>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] period_value Autoreload value. Must be greater that CMP value.
 */
void lptimer_set_period(uint32_t lptimer_peripheral, uint16_t period_value)
{
	LPTIM_ARR(lptimer_peripheral) = period_value;
 8000ccc:	6181      	str	r1, [r0, #24]
}
 8000cce:	4770      	bx	lr

08000cd0 <lptimer_set_internal_clock_source>:
 *
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 */
void lptimer_set_internal_clock_source(uint32_t lptimer_peripheral)
{
	LPTIM_CFGR(lptimer_peripheral) &= ~LPTIM_CFGR_CKSEL;
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	68c3      	ldr	r3, [r0, #12]
 8000cd4:	4393      	bics	r3, r2
 8000cd6:	60c3      	str	r3, [r0, #12]
}
 8000cd8:	4770      	bx	lr
	...

08000cdc <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	4a03      	ldr	r2, [pc, #12]	; (8000cec <pwr_disable_backup_domain_write_protect+0x10>)
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	6811      	ldr	r1, [r2, #0]
 8000ce4:	430b      	orrs	r3, r1
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	4770      	bx	lr
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	40007000 	.word	0x40007000

08000cf0 <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 8000cf0:	4a02      	ldr	r2, [pc, #8]	; (8000cfc <pwr_enable_backup_domain_write_protect+0xc>)
 8000cf2:	4903      	ldr	r1, [pc, #12]	; (8000d00 <pwr_enable_backup_domain_write_protect+0x10>)
 8000cf4:	6813      	ldr	r3, [r2, #0]
 8000cf6:	400b      	ands	r3, r1
 8000cf8:	6013      	str	r3, [r2, #0]
}
 8000cfa:	4770      	bx	lr
 8000cfc:	40007000 	.word	0x40007000
 8000d00:	fffffeff 	.word	0xfffffeff

08000d04 <pwr_clear_standby_flag>:
This is set when the processor returns from a standby mode.
*/

void pwr_clear_standby_flag(void)
{
	PWR_CR |= PWR_CR_CSBF;
 8000d04:	2308      	movs	r3, #8
 8000d06:	4a02      	ldr	r2, [pc, #8]	; (8000d10 <pwr_clear_standby_flag+0xc>)
 8000d08:	6811      	ldr	r1, [r2, #0]
 8000d0a:	430b      	orrs	r3, r1
 8000d0c:	6013      	str	r3, [r2, #0]
}
 8000d0e:	4770      	bx	lr
 8000d10:	40007000 	.word	0x40007000

08000d14 <pwr_clear_wakeup_flag>:
This is set when the processor receives a wakeup signal.
*/

void pwr_clear_wakeup_flag(void)
{
	PWR_CR |= PWR_CR_CWUF;
 8000d14:	2304      	movs	r3, #4
 8000d16:	4a02      	ldr	r2, [pc, #8]	; (8000d20 <pwr_clear_wakeup_flag+0xc>)
 8000d18:	6811      	ldr	r1, [r2, #0]
 8000d1a:	430b      	orrs	r3, r1
 8000d1c:	6013      	str	r3, [r2, #0]
}
 8000d1e:	4770      	bx	lr
 8000d20:	40007000 	.word	0x40007000

08000d24 <rcc_osc_on>:
uint32_t rcc_ahb_frequency = 2097000;
uint32_t rcc_apb1_frequency = 2097000;
uint32_t rcc_apb2_frequency = 2097000;

void rcc_osc_on(enum rcc_osc osc)
{
 8000d24:	b500      	push	{lr}
 8000d26:	2806      	cmp	r0, #6
 8000d28:	d80b      	bhi.n	8000d42 <rcc_osc_on+0x1e>
 8000d2a:	f000 f9cf 	bl	80010cc <__gnu_thumb1_case_uqi>
 8000d2e:	1004      	.short	0x1004
 8000d30:	1b0b1915 	.word	0x1b0b1915
 8000d34:	1d          	.byte	0x1d
 8000d35:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <rcc_osc_on+0x48>)
 8000d3a:	045b      	lsls	r3, r3, #17
 8000d3c:	6811      	ldr	r1, [r2, #0]
		break;
	case RCC_LSE:
		RCC_CSR |= RCC_CSR_LSEON;
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
 8000d3e:	430b      	orrs	r3, r1
 8000d40:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8000d42:	bd00      	pop	{pc}
		RCC_CR |= RCC_CR_MSION;
 8000d44:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <rcc_osc_on+0x48>)
		RCC_CSR |= RCC_CSR_LSEON;
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	6811      	ldr	r1, [r2, #0]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	e7f7      	b.n	8000d3e <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSEON;
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <rcc_osc_on+0x48>)
 8000d52:	025b      	lsls	r3, r3, #9
 8000d54:	6811      	ldr	r1, [r2, #0]
 8000d56:	e7f2      	b.n	8000d3e <rcc_osc_on+0x1a>
		RCC_CRRCR |= RCC_CRRCR_HSI48ON;
 8000d58:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <rcc_osc_on+0x4c>)
		RCC_CSR |= RCC_CSR_LSION;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	6811      	ldr	r1, [r2, #0]
 8000d5e:	e7ee      	b.n	8000d3e <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSI16ON;
 8000d60:	4a02      	ldr	r2, [pc, #8]	; (8000d6c <rcc_osc_on+0x48>)
 8000d62:	e7fa      	b.n	8000d5a <rcc_osc_on+0x36>
		RCC_CSR |= RCC_CSR_LSEON;
 8000d64:	4a03      	ldr	r2, [pc, #12]	; (8000d74 <rcc_osc_on+0x50>)
 8000d66:	e7ee      	b.n	8000d46 <rcc_osc_on+0x22>
		RCC_CSR |= RCC_CSR_LSION;
 8000d68:	4a02      	ldr	r2, [pc, #8]	; (8000d74 <rcc_osc_on+0x50>)
 8000d6a:	e7f6      	b.n	8000d5a <rcc_osc_on+0x36>
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40021008 	.word	0x40021008
 8000d74:	40021050 	.word	0x40021050

08000d78 <rcc_is_osc_ready>:
	cm3_assert_not_reached();
}


bool rcc_is_osc_ready(enum rcc_osc osc)
{
 8000d78:	2300      	movs	r3, #0
 8000d7a:	b500      	push	{lr}
 8000d7c:	2806      	cmp	r0, #6
 8000d7e:	d80a      	bhi.n	8000d96 <rcc_is_osc_ready+0x1e>
 8000d80:	3301      	adds	r3, #1
 8000d82:	f000 f9a3 	bl	80010cc <__gnu_thumb1_case_uqi>
 8000d86:	0a04      	.short	0x0a04
 8000d88:	1a160e12 	.word	0x1a160e12
 8000d8c:	1c          	.byte	0x1c
 8000d8d:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 8000d8e:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <rcc_is_osc_ready+0x4c>)
 8000d90:	6810      	ldr	r0, [r2, #0]
 8000d92:	0e40      	lsrs	r0, r0, #25
	case RCC_MSI:
		return RCC_CR & RCC_CR_MSIRDY;
	case RCC_LSE:
		return RCC_CSR & RCC_CSR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 8000d94:	4003      	ands	r3, r0
	}
	return false;
}
 8000d96:	0018      	movs	r0, r3
 8000d98:	bd00      	pop	{pc}
		return RCC_CR & RCC_CR_HSERDY;
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <rcc_is_osc_ready+0x4c>)
 8000d9c:	6810      	ldr	r0, [r2, #0]
 8000d9e:	0c40      	lsrs	r0, r0, #17
 8000da0:	e7f8      	b.n	8000d94 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_HSI16RDY;
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <rcc_is_osc_ready+0x4c>)
 8000da4:	6810      	ldr	r0, [r2, #0]
 8000da6:	0880      	lsrs	r0, r0, #2
 8000da8:	e7f4      	b.n	8000d94 <rcc_is_osc_ready+0x1c>
		return RCC_CRRCR & RCC_CRRCR_HSI48RDY;
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <rcc_is_osc_ready+0x50>)
		return RCC_CSR & RCC_CSR_LSIRDY;
 8000dac:	6810      	ldr	r0, [r2, #0]
 8000dae:	0840      	lsrs	r0, r0, #1
 8000db0:	e7f0      	b.n	8000d94 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_MSIRDY;
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <rcc_is_osc_ready+0x4c>)
		return RCC_CSR & RCC_CSR_LSERDY;
 8000db4:	6810      	ldr	r0, [r2, #0]
 8000db6:	0a40      	lsrs	r0, r0, #9
 8000db8:	e7ec      	b.n	8000d94 <rcc_is_osc_ready+0x1c>
 8000dba:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <rcc_is_osc_ready+0x54>)
 8000dbc:	e7fa      	b.n	8000db4 <rcc_is_osc_ready+0x3c>
		return RCC_CSR & RCC_CSR_LSIRDY;
 8000dbe:	4a03      	ldr	r2, [pc, #12]	; (8000dcc <rcc_is_osc_ready+0x54>)
 8000dc0:	e7f4      	b.n	8000dac <rcc_is_osc_ready+0x34>
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40021008 	.word	0x40021008
 8000dcc:	40021050 	.word	0x40021050

08000dd0 <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 8000dd0:	b510      	push	{r4, lr}
 8000dd2:	0004      	movs	r4, r0
	while (!rcc_is_osc_ready(osc));
 8000dd4:	0020      	movs	r0, r4
 8000dd6:	f7ff ffcf 	bl	8000d78 <rcc_is_osc_ready>
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	d0fa      	beq.n	8000dd4 <rcc_wait_for_osc_ready+0x4>
}
 8000dde:	bd10      	pop	{r4, pc}

08000de0 <rcc_set_ppre1>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb1pre
 */

void rcc_set_ppre1(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8000de0:	4a03      	ldr	r2, [pc, #12]	; (8000df0 <rcc_set_ppre1+0x10>)
 8000de2:	4904      	ldr	r1, [pc, #16]	; (8000df4 <rcc_set_ppre1+0x14>)
 8000de4:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE1_MASK << RCC_CFGR_PPRE1_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8000de6:	0200      	lsls	r0, r0, #8
	uint32_t reg = RCC_CFGR
 8000de8:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8000dea:	4318      	orrs	r0, r3
 8000dec:	6010      	str	r0, [r2, #0]
}
 8000dee:	4770      	bx	lr
 8000df0:	4002100c 	.word	0x4002100c
 8000df4:	fffff8ff 	.word	0xfffff8ff

08000df8 <rcc_set_ppre2>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb2pre
 */

void rcc_set_ppre2(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8000df8:	4a03      	ldr	r2, [pc, #12]	; (8000e08 <rcc_set_ppre2+0x10>)
 8000dfa:	4904      	ldr	r1, [pc, #16]	; (8000e0c <rcc_set_ppre2+0x14>)
 8000dfc:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE2_MASK << RCC_CFGR_PPRE2_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8000dfe:	02c0      	lsls	r0, r0, #11
	uint32_t reg = RCC_CFGR
 8000e00:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8000e02:	4318      	orrs	r0, r3
 8000e04:	6010      	str	r0, [r2, #0]
}
 8000e06:	4770      	bx	lr
 8000e08:	4002100c 	.word	0x4002100c
 8000e0c:	ffffc7ff 	.word	0xffffc7ff

08000e10 <rcc_set_hpre>:
 * @param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
 */

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8000e10:	21f0      	movs	r1, #240	; 0xf0
 8000e12:	4a03      	ldr	r2, [pc, #12]	; (8000e20 <rcc_set_hpre+0x10>)
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8000e14:	0100      	lsls	r0, r0, #4
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8000e16:	6813      	ldr	r3, [r2, #0]
 8000e18:	438b      	bics	r3, r1
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8000e1a:	4318      	orrs	r0, r3
 8000e1c:	6010      	str	r0, [r2, #0]
}
 8000e1e:	4770      	bx	lr
 8000e20:	4002100c 	.word	0x4002100c

08000e24 <rcc_set_msi_range>:
*
 * @param msi_range desired range @ref rcc_icscr_msirange
 */
void rcc_set_msi_range(uint32_t msi_range)
{
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8000e24:	4a03      	ldr	r2, [pc, #12]	; (8000e34 <rcc_set_msi_range+0x10>)
 8000e26:	4904      	ldr	r1, [pc, #16]	; (8000e38 <rcc_set_msi_range+0x14>)
 8000e28:	6813      	ldr	r3, [r2, #0]
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8000e2a:	0340      	lsls	r0, r0, #13
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8000e2c:	400b      	ands	r3, r1
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8000e2e:	4318      	orrs	r0, r3
 8000e30:	6010      	str	r0, [r2, #0]
}
 8000e32:	4770      	bx	lr
 8000e34:	40021004 	.word	0x40021004
 8000e38:	ffff1fff 	.word	0xffff1fff

08000e3c <rcc_set_peripheral_clk_sel>:
void rcc_set_peripheral_clk_sel(uint32_t periph, uint32_t sel)
{
	uint8_t shift;
	uint32_t mask;

	switch (periph) {
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <rcc_set_peripheral_clk_sel+0x50>)
{
 8000e3e:	000a      	movs	r2, r1
 8000e40:	b510      	push	{r4, lr}
	switch (periph) {
 8000e42:	4298      	cmp	r0, r3
 8000e44:	d01c      	beq.n	8000e80 <rcc_set_peripheral_clk_sel+0x44>
 8000e46:	d80b      	bhi.n	8000e60 <rcc_set_peripheral_clk_sel+0x24>
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <rcc_set_peripheral_clk_sel+0x54>)
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d01a      	beq.n	8000e84 <rcc_set_peripheral_clk_sel+0x48>
 8000e4e:	4911      	ldr	r1, [pc, #68]	; (8000e94 <rcc_set_peripheral_clk_sel+0x58>)
			shift = RCC_CCIPR_I2C3SEL_SHIFT;
			mask = RCC_CCIPR_I2C3SEL_MASK;
			break;

		case I2C1_BASE:
			shift = RCC_CCIPR_I2C1SEL_SHIFT;
 8000e50:	230c      	movs	r3, #12
	switch (periph) {
 8000e52:	4288      	cmp	r0, r1
 8000e54:	d00b      	beq.n	8000e6e <rcc_set_peripheral_clk_sel+0x32>
 8000e56:	4910      	ldr	r1, [pc, #64]	; (8000e98 <rcc_set_peripheral_clk_sel+0x5c>)
			shift = RCC_CCIPR_LPUART1SEL_SHIFT;
			mask = RCC_CCIPR_LPUART1SEL_MASK;
			break;

		case USART2_BASE:
			shift = RCC_CCIPR_USART2SEL_SHIFT;
 8000e58:	3b0a      	subs	r3, #10
	switch (periph) {
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d007      	beq.n	8000e6e <rcc_set_peripheral_clk_sel+0x32>
			return;
	}

	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
	RCC_CCIPR = reg32 | (sel << shift);
}
 8000e5e:	bd10      	pop	{r4, pc}
	switch (periph) {
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <rcc_set_peripheral_clk_sel+0x60>)
 8000e62:	4298      	cmp	r0, r3
 8000e64:	d010      	beq.n	8000e88 <rcc_set_peripheral_clk_sel+0x4c>
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <rcc_set_peripheral_clk_sel+0x64>)
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	d1f8      	bne.n	8000e5e <rcc_set_peripheral_clk_sel+0x22>
			shift = RCC_CCIPR_USART1SEL_SHIFT;
 8000e6c:	2300      	movs	r3, #0
	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
 8000e6e:	2003      	movs	r0, #3
 8000e70:	4098      	lsls	r0, r3
	RCC_CCIPR = reg32 | (sel << shift);
 8000e72:	409a      	lsls	r2, r3
	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
 8000e74:	4c0b      	ldr	r4, [pc, #44]	; (8000ea4 <rcc_set_peripheral_clk_sel+0x68>)
 8000e76:	6821      	ldr	r1, [r4, #0]
 8000e78:	4381      	bics	r1, r0
	RCC_CCIPR = reg32 | (sel << shift);
 8000e7a:	4311      	orrs	r1, r2
 8000e7c:	6021      	str	r1, [r4, #0]
 8000e7e:	e7ee      	b.n	8000e5e <rcc_set_peripheral_clk_sel+0x22>
	switch (periph) {
 8000e80:	2310      	movs	r3, #16
 8000e82:	e7f4      	b.n	8000e6e <rcc_set_peripheral_clk_sel+0x32>
			shift = RCC_CCIPR_LPUART1SEL_SHIFT;
 8000e84:	230a      	movs	r3, #10
 8000e86:	e7f2      	b.n	8000e6e <rcc_set_peripheral_clk_sel+0x32>
			shift = RCC_CCIPR_LPTIM1SEL_SHIFT;
 8000e88:	2312      	movs	r3, #18
 8000e8a:	e7f0      	b.n	8000e6e <rcc_set_peripheral_clk_sel+0x32>
 8000e8c:	40007800 	.word	0x40007800
 8000e90:	40004800 	.word	0x40004800
 8000e94:	40005400 	.word	0x40005400
 8000e98:	40004400 	.word	0x40004400
 8000e9c:	40007c00 	.word	0x40007c00
 8000ea0:	40013800 	.word	0x40013800
 8000ea4:	4002104c 	.word	0x4002104c

08000ea8 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <rcc_periph_clock_enable+0x18>)
 8000eaa:	0942      	lsrs	r2, r0, #5
 8000eac:	18d2      	adds	r2, r2, r3
 8000eae:	231f      	movs	r3, #31
 8000eb0:	4018      	ands	r0, r3
 8000eb2:	3b1e      	subs	r3, #30
 8000eb4:	4083      	lsls	r3, r0
 8000eb6:	6811      	ldr	r1, [r2, #0]
 8000eb8:	430b      	orrs	r3, r1
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	4770      	bx	lr
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <rcc_periph_reset_pulse+0x1c>)
 8000ec6:	0943      	lsrs	r3, r0, #5
 8000ec8:	189b      	adds	r3, r3, r2
 8000eca:	221f      	movs	r2, #31
 8000ecc:	4010      	ands	r0, r2
 8000ece:	3a1e      	subs	r2, #30
 8000ed0:	4082      	lsls	r2, r0
 8000ed2:	6819      	ldr	r1, [r3, #0]
 8000ed4:	4311      	orrs	r1, r2
 8000ed6:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 8000ed8:	6819      	ldr	r1, [r3, #0]
 8000eda:	4391      	bics	r1, r2
 8000edc:	6019      	str	r1, [r3, #0]
}
 8000ede:	4770      	bx	lr
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <rtc_unlock>:
/** @brief Unlock write access to the RTC registers

*/
void rtc_unlock(void)
{
	RTC_WPR = 0xca;
 8000ee4:	22ca      	movs	r2, #202	; 0xca
 8000ee6:	4b02      	ldr	r3, [pc, #8]	; (8000ef0 <rtc_unlock+0xc>)
 8000ee8:	601a      	str	r2, [r3, #0]
	RTC_WPR = 0x53;
 8000eea:	3a77      	subs	r2, #119	; 0x77
 8000eec:	601a      	str	r2, [r3, #0]
}
 8000eee:	4770      	bx	lr
 8000ef0:	40002824 	.word	0x40002824

08000ef4 <rtc_lock>:
/** @brief Lock write access to the RTC registers

*/
void rtc_lock(void)
{
	RTC_WPR = 0xff;
 8000ef4:	22ff      	movs	r2, #255	; 0xff
 8000ef6:	4b01      	ldr	r3, [pc, #4]	; (8000efc <rtc_lock+0x8>)
 8000ef8:	601a      	str	r2, [r3, #0]
}
 8000efa:	4770      	bx	lr
 8000efc:	40002824 	.word	0x40002824

08000f00 <rtc_clear_wakeup_flag>:

@details This function should be called first in the rtc_wkup_isr()
*/
void rtc_clear_wakeup_flag(void)
{
	RTC_ISR &= ~RTC_ISR_WUTF;
 8000f00:	4a02      	ldr	r2, [pc, #8]	; (8000f0c <rtc_clear_wakeup_flag+0xc>)
 8000f02:	4903      	ldr	r1, [pc, #12]	; (8000f10 <rtc_clear_wakeup_flag+0x10>)
 8000f04:	6813      	ldr	r3, [r2, #0]
 8000f06:	400b      	ands	r3, r1
 8000f08:	6013      	str	r3, [r2, #0]
}
 8000f0a:	4770      	bx	lr
 8000f0c:	4000280c 	.word	0x4000280c
 8000f10:	fffffbff 	.word	0xfffffbff

08000f14 <spi_xfer>:
uint16_t spi_xfer(uint32_t spi, uint16_t data)
{
	spi_write(spi, data);

	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8000f14:	2301      	movs	r3, #1
	SPI_DR(spi) = data;
 8000f16:	60c1      	str	r1, [r0, #12]
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8000f18:	6882      	ldr	r2, [r0, #8]
 8000f1a:	421a      	tst	r2, r3
 8000f1c:	d0fc      	beq.n	8000f18 <spi_xfer+0x4>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 8000f1e:	68c0      	ldr	r0, [r0, #12]
 8000f20:	b280      	uxth	r0, r0
}
 8000f22:	4770      	bx	lr

08000f24 <timer_enable_counter>:
tim_reg_base
*/

void timer_enable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_CEN;
 8000f24:	2301      	movs	r3, #1
 8000f26:	6802      	ldr	r2, [r0, #0]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	6003      	str	r3, [r0, #0]
}
 8000f2c:	4770      	bx	lr

08000f2e <timer_disable_counter>:
tim_reg_base
*/

void timer_disable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_CEN;
 8000f2e:	2201      	movs	r2, #1
 8000f30:	6803      	ldr	r3, [r0, #0]
 8000f32:	4393      	bics	r3, r2
 8000f34:	6003      	str	r3, [r0, #0]
}
 8000f36:	4770      	bx	lr

08000f38 <timer_set_prescaler>:
@param[in] value Unsigned int32. Prescaler values 0...0xFFFF.
*/

void timer_set_prescaler(uint32_t timer_peripheral, uint32_t value)
{
	TIM_PSC(timer_peripheral) = value;
 8000f38:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000f3a:	4770      	bx	lr

08000f3c <timer_get_counter>:
@returns Unsigned int32. Counter value.
*/

uint32_t timer_get_counter(uint32_t timer_peripheral)
{
	return TIM_CNT(timer_peripheral);
 8000f3c:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8000f3e:	4770      	bx	lr

08000f40 <usart_set_baudrate>:
void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;

#if defined USART1
	if ((usart == USART1)
 8000f40:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <usart_set_baudrate+0x44>)
{
 8000f42:	b570      	push	{r4, r5, r6, lr}
 8000f44:	0005      	movs	r5, r0
 8000f46:	000c      	movs	r4, r1
 8000f48:	084e      	lsrs	r6, r1, #1
	if ((usart == USART1)
 8000f4a:	4298      	cmp	r0, r3
 8000f4c:	d107      	bne.n	8000f5e <usart_set_baudrate+0x1e>
#if defined USART6
		|| (usart == USART6)
#endif
		) {
		clock = rcc_apb2_frequency;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <usart_set_baudrate+0x48>)
 8000f50:	6818      	ldr	r0, [r3, #0]
			+ ((clock % baud) * 256 + baud / 2) / baud;
		return;
	}
#endif

	USART_BRR(usart) = (clock + baud / 2) / baud;
 8000f52:	0021      	movs	r1, r4
 8000f54:	1830      	adds	r0, r6, r0
 8000f56:	f000 f8c3 	bl	80010e0 <__udivsi3>
 8000f5a:	60e8      	str	r0, [r5, #12]
 8000f5c:	e010      	b.n	8000f80 <usart_set_baudrate+0x40>
	uint32_t clock = rcc_apb1_frequency;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <usart_set_baudrate+0x4c>)
 8000f60:	6818      	ldr	r0, [r3, #0]
	if (usart == LPUART1) {
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <usart_set_baudrate+0x50>)
 8000f64:	429d      	cmp	r5, r3
 8000f66:	d1f4      	bne.n	8000f52 <usart_set_baudrate+0x12>
		USART_BRR(usart) = (clock / baud) * 256
 8000f68:	f000 f940 	bl	80011ec <__aeabi_uidivmod>
 8000f6c:	0005      	movs	r5, r0
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8000f6e:	0208      	lsls	r0, r1, #8
 8000f70:	1980      	adds	r0, r0, r6
 8000f72:	0021      	movs	r1, r4
 8000f74:	f000 f8b4 	bl	80010e0 <__udivsi3>
		USART_BRR(usart) = (clock / baud) * 256
 8000f78:	022d      	lsls	r5, r5, #8
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <usart_set_baudrate+0x54>)
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8000f7c:	1940      	adds	r0, r0, r5
		USART_BRR(usart) = (clock / baud) * 256
 8000f7e:	6018      	str	r0, [r3, #0]
}
 8000f80:	bd70      	pop	{r4, r5, r6, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	40013800 	.word	0x40013800
 8000f88:	2000000c 	.word	0x2000000c
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	40004800 	.word	0x40004800
 8000f94:	4000480c 	.word	0x4000480c

08000f98 <usart_set_databits>:
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
 8000f98:	2908      	cmp	r1, #8
 8000f9a:	d104      	bne.n	8000fa6 <usart_set_databits+0xe>
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 8000f9c:	6803      	ldr	r3, [r0, #0]
 8000f9e:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <usart_set_databits+0x18>)
 8000fa0:	4013      	ands	r3, r2
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8000fa2:	6003      	str	r3, [r0, #0]
	}
}
 8000fa4:	4770      	bx	lr
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	6802      	ldr	r2, [r0, #0]
 8000faa:	015b      	lsls	r3, r3, #5
 8000fac:	4313      	orrs	r3, r2
 8000fae:	e7f8      	b.n	8000fa2 <usart_set_databits+0xa>
 8000fb0:	ffffefff 	.word	0xffffefff

08000fb4 <usart_set_stopbits>:

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 8000fb4:	6843      	ldr	r3, [r0, #4]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 8000fb6:	4a02      	ldr	r2, [pc, #8]	; (8000fc0 <usart_set_stopbits+0xc>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 8000fbc:	6043      	str	r3, [r0, #4]
}
 8000fbe:	4770      	bx	lr
 8000fc0:	ffffcfff 	.word	0xffffcfff

08000fc4 <usart_set_parity>:

void usart_set_parity(uint32_t usart, uint32_t parity)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 8000fc4:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 8000fc6:	4a02      	ldr	r2, [pc, #8]	; (8000fd0 <usart_set_parity+0xc>)
 8000fc8:	4013      	ands	r3, r2
 8000fca:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8000fcc:	6003      	str	r3, [r0, #0]
}
 8000fce:	4770      	bx	lr
 8000fd0:	fffff9ff 	.word	0xfffff9ff

08000fd4 <usart_set_mode>:
void usart_set_mode(uint32_t usart, uint32_t mode)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8000fd4:	220c      	movs	r2, #12
	reg32 = USART_CR1(usart);
 8000fd6:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8000fd8:	4393      	bics	r3, r2
 8000fda:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8000fdc:	6003      	str	r3, [r0, #0]
}
 8000fde:	4770      	bx	lr

08000fe0 <usart_set_flow_control>:

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 8000fe0:	6883      	ldr	r3, [r0, #8]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 8000fe2:	4a02      	ldr	r2, [pc, #8]	; (8000fec <usart_set_flow_control+0xc>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 8000fe8:	6083      	str	r3, [r0, #8]
}
 8000fea:	4770      	bx	lr
 8000fec:	fffffcff 	.word	0xfffffcff

08000ff0 <usart_enable>:
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	6802      	ldr	r2, [r0, #0]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	6003      	str	r3, [r0, #0]
}
 8000ff8:	4770      	bx	lr

08000ffa <usart_disable>:
usart_reg_base
*/

void usart_disable(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_UE;
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	6803      	ldr	r3, [r0, #0]
 8000ffe:	4393      	bics	r3, r2
 8001000:	6003      	str	r3, [r0, #0]
}
 8001002:	4770      	bx	lr

08001004 <usart_send_blocking>:
usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(uint32_t usart, uint16_t data)
{
 8001004:	b570      	push	{r4, r5, r6, lr}
 8001006:	000d      	movs	r5, r1
 8001008:	0004      	movs	r4, r0
	usart_wait_send_ready(usart);
 800100a:	f000 f80d 	bl	8001028 <usart_wait_send_ready>
	usart_send(usart, data);
 800100e:	0029      	movs	r1, r5
 8001010:	0020      	movs	r0, r4
 8001012:	f000 f801 	bl	8001018 <usart_send>
}
 8001016:	bd70      	pop	{r4, r5, r6, pc}

08001018 <usart_send>:
 */

void usart_send(uint32_t usart, uint16_t data)
{
	/* Send data. */
	USART_TDR(usart) = (data & USART_TDR_MASK);
 8001018:	05c9      	lsls	r1, r1, #23
 800101a:	0dc9      	lsrs	r1, r1, #23
 800101c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800101e:	4770      	bx	lr

08001020 <usart_recv>:
 */

uint16_t usart_recv(uint32_t usart)
{
	/* Receive data. */
	return USART_RDR(usart) & USART_RDR_MASK;
 8001020:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001022:	05c0      	lsls	r0, r0, #23
 8001024:	0dc0      	lsrs	r0, r0, #23
}
 8001026:	4770      	bx	lr

08001028 <usart_wait_send_ready>:
 */

void usart_wait_send_ready(uint32_t usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_ISR(usart) & USART_ISR_TXE) == 0);
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	69c2      	ldr	r2, [r0, #28]
 800102c:	421a      	tst	r2, r3
 800102e:	d0fc      	beq.n	800102a <usart_wait_send_ready+0x2>
}
 8001030:	4770      	bx	lr

08001032 <usart_get_flag>:
 * @returns boolean: flag set.
 */

bool usart_get_flag(uint32_t usart, uint32_t flag)
{
	return ((USART_ISR(usart) & flag) != 0);
 8001032:	69c0      	ldr	r0, [r0, #28]
 8001034:	4008      	ands	r0, r1
 8001036:	1e41      	subs	r1, r0, #1
 8001038:	4188      	sbcs	r0, r1
 800103a:	b2c0      	uxtb	r0, r0
}
 800103c:	4770      	bx	lr

0800103e <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 800103e:	e7fe      	b.n	800103e <blocking_handler>

08001040 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 8001040:	4770      	bx	lr
	...

08001044 <reset_handler>:
{
 8001044:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <reset_handler+0x5c>)
 8001048:	4a16      	ldr	r2, [pc, #88]	; (80010a4 <reset_handler+0x60>)
 800104a:	4917      	ldr	r1, [pc, #92]	; (80010a8 <reset_handler+0x64>)
 800104c:	428b      	cmp	r3, r1
 800104e:	d318      	bcc.n	8001082 <reset_handler+0x3e>
		*dest++ = 0;
 8001050:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 8001052:	4a16      	ldr	r2, [pc, #88]	; (80010ac <reset_handler+0x68>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d317      	bcc.n	8001088 <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	4a15      	ldr	r2, [pc, #84]	; (80010b0 <reset_handler+0x6c>)
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001060:	4c14      	ldr	r4, [pc, #80]	; (80010b4 <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 8001062:	430b      	orrs	r3, r1
 8001064:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <reset_handler+0x74>)
 8001068:	429c      	cmp	r4, r3
 800106a:	d30f      	bcc.n	800108c <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 800106c:	4c13      	ldr	r4, [pc, #76]	; (80010bc <reset_handler+0x78>)
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <reset_handler+0x7c>)
 8001070:	429c      	cmp	r4, r3
 8001072:	d30e      	bcc.n	8001092 <reset_handler+0x4e>
	(void)main();
 8001074:	f7ff f824 	bl	80000c0 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001078:	4c12      	ldr	r4, [pc, #72]	; (80010c4 <reset_handler+0x80>)
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <reset_handler+0x84>)
 800107c:	429c      	cmp	r4, r3
 800107e:	d30b      	bcc.n	8001098 <reset_handler+0x54>
}
 8001080:	bd10      	pop	{r4, pc}
		*dest = *src;
 8001082:	ca01      	ldmia	r2!, {r0}
 8001084:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 8001086:	e7e1      	b.n	800104c <reset_handler+0x8>
		*dest++ = 0;
 8001088:	c302      	stmia	r3!, {r1}
 800108a:	e7e3      	b.n	8001054 <reset_handler+0x10>
		(*fp)();
 800108c:	cc08      	ldmia	r4!, {r3}
 800108e:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001090:	e7e9      	b.n	8001066 <reset_handler+0x22>
		(*fp)();
 8001092:	cc08      	ldmia	r4!, {r3}
 8001094:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8001096:	e7ea      	b.n	800106e <reset_handler+0x2a>
		(*fp)();
 8001098:	cc08      	ldmia	r4!, {r3}
 800109a:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 800109c:	e7ed      	b.n	800107a <reset_handler+0x36>
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	20000000 	.word	0x20000000
 80010a4:	08001404 	.word	0x08001404
 80010a8:	20000010 	.word	0x20000010
 80010ac:	200002b0 	.word	0x200002b0
 80010b0:	e000ed14 	.word	0xe000ed14
 80010b4:	08001404 	.word	0x08001404
 80010b8:	08001404 	.word	0x08001404
 80010bc:	08001404 	.word	0x08001404
 80010c0:	08001404 	.word	0x08001404
 80010c4:	08001404 	.word	0x08001404
 80010c8:	08001404 	.word	0x08001404

080010cc <__gnu_thumb1_case_uqi>:
 80010cc:	b402      	push	{r1}
 80010ce:	4671      	mov	r1, lr
 80010d0:	0849      	lsrs	r1, r1, #1
 80010d2:	0049      	lsls	r1, r1, #1
 80010d4:	5c09      	ldrb	r1, [r1, r0]
 80010d6:	0049      	lsls	r1, r1, #1
 80010d8:	448e      	add	lr, r1
 80010da:	bc02      	pop	{r1}
 80010dc:	4770      	bx	lr
 80010de:	46c0      	nop			; (mov r8, r8)

080010e0 <__udivsi3>:
 80010e0:	2200      	movs	r2, #0
 80010e2:	0843      	lsrs	r3, r0, #1
 80010e4:	428b      	cmp	r3, r1
 80010e6:	d374      	bcc.n	80011d2 <__udivsi3+0xf2>
 80010e8:	0903      	lsrs	r3, r0, #4
 80010ea:	428b      	cmp	r3, r1
 80010ec:	d35f      	bcc.n	80011ae <__udivsi3+0xce>
 80010ee:	0a03      	lsrs	r3, r0, #8
 80010f0:	428b      	cmp	r3, r1
 80010f2:	d344      	bcc.n	800117e <__udivsi3+0x9e>
 80010f4:	0b03      	lsrs	r3, r0, #12
 80010f6:	428b      	cmp	r3, r1
 80010f8:	d328      	bcc.n	800114c <__udivsi3+0x6c>
 80010fa:	0c03      	lsrs	r3, r0, #16
 80010fc:	428b      	cmp	r3, r1
 80010fe:	d30d      	bcc.n	800111c <__udivsi3+0x3c>
 8001100:	22ff      	movs	r2, #255	; 0xff
 8001102:	0209      	lsls	r1, r1, #8
 8001104:	ba12      	rev	r2, r2
 8001106:	0c03      	lsrs	r3, r0, #16
 8001108:	428b      	cmp	r3, r1
 800110a:	d302      	bcc.n	8001112 <__udivsi3+0x32>
 800110c:	1212      	asrs	r2, r2, #8
 800110e:	0209      	lsls	r1, r1, #8
 8001110:	d065      	beq.n	80011de <__udivsi3+0xfe>
 8001112:	0b03      	lsrs	r3, r0, #12
 8001114:	428b      	cmp	r3, r1
 8001116:	d319      	bcc.n	800114c <__udivsi3+0x6c>
 8001118:	e000      	b.n	800111c <__udivsi3+0x3c>
 800111a:	0a09      	lsrs	r1, r1, #8
 800111c:	0bc3      	lsrs	r3, r0, #15
 800111e:	428b      	cmp	r3, r1
 8001120:	d301      	bcc.n	8001126 <__udivsi3+0x46>
 8001122:	03cb      	lsls	r3, r1, #15
 8001124:	1ac0      	subs	r0, r0, r3
 8001126:	4152      	adcs	r2, r2
 8001128:	0b83      	lsrs	r3, r0, #14
 800112a:	428b      	cmp	r3, r1
 800112c:	d301      	bcc.n	8001132 <__udivsi3+0x52>
 800112e:	038b      	lsls	r3, r1, #14
 8001130:	1ac0      	subs	r0, r0, r3
 8001132:	4152      	adcs	r2, r2
 8001134:	0b43      	lsrs	r3, r0, #13
 8001136:	428b      	cmp	r3, r1
 8001138:	d301      	bcc.n	800113e <__udivsi3+0x5e>
 800113a:	034b      	lsls	r3, r1, #13
 800113c:	1ac0      	subs	r0, r0, r3
 800113e:	4152      	adcs	r2, r2
 8001140:	0b03      	lsrs	r3, r0, #12
 8001142:	428b      	cmp	r3, r1
 8001144:	d301      	bcc.n	800114a <__udivsi3+0x6a>
 8001146:	030b      	lsls	r3, r1, #12
 8001148:	1ac0      	subs	r0, r0, r3
 800114a:	4152      	adcs	r2, r2
 800114c:	0ac3      	lsrs	r3, r0, #11
 800114e:	428b      	cmp	r3, r1
 8001150:	d301      	bcc.n	8001156 <__udivsi3+0x76>
 8001152:	02cb      	lsls	r3, r1, #11
 8001154:	1ac0      	subs	r0, r0, r3
 8001156:	4152      	adcs	r2, r2
 8001158:	0a83      	lsrs	r3, r0, #10
 800115a:	428b      	cmp	r3, r1
 800115c:	d301      	bcc.n	8001162 <__udivsi3+0x82>
 800115e:	028b      	lsls	r3, r1, #10
 8001160:	1ac0      	subs	r0, r0, r3
 8001162:	4152      	adcs	r2, r2
 8001164:	0a43      	lsrs	r3, r0, #9
 8001166:	428b      	cmp	r3, r1
 8001168:	d301      	bcc.n	800116e <__udivsi3+0x8e>
 800116a:	024b      	lsls	r3, r1, #9
 800116c:	1ac0      	subs	r0, r0, r3
 800116e:	4152      	adcs	r2, r2
 8001170:	0a03      	lsrs	r3, r0, #8
 8001172:	428b      	cmp	r3, r1
 8001174:	d301      	bcc.n	800117a <__udivsi3+0x9a>
 8001176:	020b      	lsls	r3, r1, #8
 8001178:	1ac0      	subs	r0, r0, r3
 800117a:	4152      	adcs	r2, r2
 800117c:	d2cd      	bcs.n	800111a <__udivsi3+0x3a>
 800117e:	09c3      	lsrs	r3, r0, #7
 8001180:	428b      	cmp	r3, r1
 8001182:	d301      	bcc.n	8001188 <__udivsi3+0xa8>
 8001184:	01cb      	lsls	r3, r1, #7
 8001186:	1ac0      	subs	r0, r0, r3
 8001188:	4152      	adcs	r2, r2
 800118a:	0983      	lsrs	r3, r0, #6
 800118c:	428b      	cmp	r3, r1
 800118e:	d301      	bcc.n	8001194 <__udivsi3+0xb4>
 8001190:	018b      	lsls	r3, r1, #6
 8001192:	1ac0      	subs	r0, r0, r3
 8001194:	4152      	adcs	r2, r2
 8001196:	0943      	lsrs	r3, r0, #5
 8001198:	428b      	cmp	r3, r1
 800119a:	d301      	bcc.n	80011a0 <__udivsi3+0xc0>
 800119c:	014b      	lsls	r3, r1, #5
 800119e:	1ac0      	subs	r0, r0, r3
 80011a0:	4152      	adcs	r2, r2
 80011a2:	0903      	lsrs	r3, r0, #4
 80011a4:	428b      	cmp	r3, r1
 80011a6:	d301      	bcc.n	80011ac <__udivsi3+0xcc>
 80011a8:	010b      	lsls	r3, r1, #4
 80011aa:	1ac0      	subs	r0, r0, r3
 80011ac:	4152      	adcs	r2, r2
 80011ae:	08c3      	lsrs	r3, r0, #3
 80011b0:	428b      	cmp	r3, r1
 80011b2:	d301      	bcc.n	80011b8 <__udivsi3+0xd8>
 80011b4:	00cb      	lsls	r3, r1, #3
 80011b6:	1ac0      	subs	r0, r0, r3
 80011b8:	4152      	adcs	r2, r2
 80011ba:	0883      	lsrs	r3, r0, #2
 80011bc:	428b      	cmp	r3, r1
 80011be:	d301      	bcc.n	80011c4 <__udivsi3+0xe4>
 80011c0:	008b      	lsls	r3, r1, #2
 80011c2:	1ac0      	subs	r0, r0, r3
 80011c4:	4152      	adcs	r2, r2
 80011c6:	0843      	lsrs	r3, r0, #1
 80011c8:	428b      	cmp	r3, r1
 80011ca:	d301      	bcc.n	80011d0 <__udivsi3+0xf0>
 80011cc:	004b      	lsls	r3, r1, #1
 80011ce:	1ac0      	subs	r0, r0, r3
 80011d0:	4152      	adcs	r2, r2
 80011d2:	1a41      	subs	r1, r0, r1
 80011d4:	d200      	bcs.n	80011d8 <__udivsi3+0xf8>
 80011d6:	4601      	mov	r1, r0
 80011d8:	4152      	adcs	r2, r2
 80011da:	4610      	mov	r0, r2
 80011dc:	4770      	bx	lr
 80011de:	e7ff      	b.n	80011e0 <__udivsi3+0x100>
 80011e0:	b501      	push	{r0, lr}
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 f806 	bl	80011f4 <__aeabi_idiv0>
 80011e8:	bd02      	pop	{r1, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)

080011ec <__aeabi_uidivmod>:
 80011ec:	2900      	cmp	r1, #0
 80011ee:	d0f7      	beq.n	80011e0 <__udivsi3+0x100>
 80011f0:	e776      	b.n	80010e0 <__udivsi3>
 80011f2:	4770      	bx	lr

080011f4 <__aeabi_idiv0>:
 80011f4:	4770      	bx	lr
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	20627548 	.word	0x20627548
 80011fc:	746f6f42 	.word	0x746f6f42
 8001200:	64616f6c 	.word	0x64616f6c
 8001204:	53207265 	.word	0x53207265
 8001208:	74726174 	.word	0x74726174
 800120c:	0000000a 	.word	0x0000000a
 8001210:	20627548 	.word	0x20627548
 8001214:	746f6f42 	.word	0x746f6f42
 8001218:	64616f6c 	.word	0x64616f6c
 800121c:	4c207265 	.word	0x4c207265
 8001220:	0a706f6f 	.word	0x0a706f6f
 8001224:	0000000a 	.word	0x0000000a
 8001228:	67756c50 	.word	0x67756c50
 800122c:	20646567 	.word	0x20646567
 8001230:	0a74754f 	.word	0x0a74754f
 8001234:	00000000 	.word	0x00000000
 8001238:	67756c50 	.word	0x67756c50
 800123c:	20646567 	.word	0x20646567
 8001240:	000a6e49 	.word	0x000a6e49
 8001244:	65736552 	.word	0x65736552
 8001248:	65532074 	.word	0x65532074
 800124c:	6e657571 	.word	0x6e657571
 8001250:	000a6563 	.word	0x000a6563
 8001254:	6f727245 	.word	0x6f727245
 8001258:	44412072 	.word	0x44412072
 800125c:	53492043 	.word	0x53492043
 8001260:	65442052 	.word	0x65442052
 8001264:	74756166 	.word	0x74756166
 8001268:	73614320 	.word	0x73614320
 800126c:	00000a65 	.word	0x00000a65
 8001270:	0800018e 	.word	0x0800018e
 8001274:	080001a8 	.word	0x080001a8
 8001278:	080001d4 	.word	0x080001d4
 800127c:	0800020e 	.word	0x0800020e
 8001280:	08000230 	.word	0x08000230
 8001284:	08000760 	.word	0x08000760
 8001288:	0800076e 	.word	0x0800076e
 800128c:	0800076e 	.word	0x0800076e
 8001290:	0800076e 	.word	0x0800076e
 8001294:	0800076e 	.word	0x0800076e
 8001298:	0800076e 	.word	0x0800076e
 800129c:	0800076e 	.word	0x0800076e
 80012a0:	0800076e 	.word	0x0800076e
 80012a4:	0800076e 	.word	0x0800076e
 80012a8:	0800076e 	.word	0x0800076e
 80012ac:	0800076e 	.word	0x0800076e
 80012b0:	0800076e 	.word	0x0800076e
 80012b4:	0800076e 	.word	0x0800076e
 80012b8:	0800076e 	.word	0x0800076e
 80012bc:	0800076e 	.word	0x0800076e
 80012c0:	0800076e 	.word	0x0800076e
 80012c4:	0800076e 	.word	0x0800076e
 80012c8:	0800076e 	.word	0x0800076e
 80012cc:	0800076e 	.word	0x0800076e
 80012d0:	0800076e 	.word	0x0800076e
 80012d4:	0800076e 	.word	0x0800076e
 80012d8:	0800076e 	.word	0x0800076e
 80012dc:	0800076e 	.word	0x0800076e
 80012e0:	0800076e 	.word	0x0800076e
 80012e4:	0800076e 	.word	0x0800076e
 80012e8:	0800076e 	.word	0x0800076e
 80012ec:	0800076e 	.word	0x0800076e
 80012f0:	0800076e 	.word	0x0800076e
 80012f4:	0800076e 	.word	0x0800076e
 80012f8:	0800076e 	.word	0x0800076e
 80012fc:	0800076e 	.word	0x0800076e
 8001300:	0800076e 	.word	0x0800076e
 8001304:	0800076e 	.word	0x0800076e
 8001308:	0800076e 	.word	0x0800076e
 800130c:	0800076e 	.word	0x0800076e
 8001310:	0800076e 	.word	0x0800076e
 8001314:	0800076e 	.word	0x0800076e
 8001318:	0800076e 	.word	0x0800076e
 800131c:	0800076e 	.word	0x0800076e
 8001320:	0800076e 	.word	0x0800076e
 8001324:	0800076e 	.word	0x0800076e
 8001328:	0800076e 	.word	0x0800076e
 800132c:	0800076e 	.word	0x0800076e
 8001330:	0800076e 	.word	0x0800076e
 8001334:	0800076e 	.word	0x0800076e
 8001338:	0800076e 	.word	0x0800076e
 800133c:	0800076e 	.word	0x0800076e
 8001340:	0800076e 	.word	0x0800076e
 8001344:	0800076e 	.word	0x0800076e
 8001348:	0800076e 	.word	0x0800076e
 800134c:	0800076e 	.word	0x0800076e
 8001350:	0800069a 	.word	0x0800069a
 8001354:	0800076e 	.word	0x0800076e
 8001358:	0800076e 	.word	0x0800076e
 800135c:	0800076e 	.word	0x0800076e
 8001360:	0800076e 	.word	0x0800076e
 8001364:	0800076e 	.word	0x0800076e
 8001368:	0800076e 	.word	0x0800076e
 800136c:	0800076e 	.word	0x0800076e
 8001370:	0800076e 	.word	0x0800076e
 8001374:	0800076e 	.word	0x0800076e
 8001378:	0800069a 	.word	0x0800069a
 800137c:	080006f6 	.word	0x080006f6
 8001380:	0800069a 	.word	0x0800069a
 8001384:	0800076e 	.word	0x0800076e
 8001388:	0800076e 	.word	0x0800076e
 800138c:	0800076e 	.word	0x0800076e
 8001390:	0800076e 	.word	0x0800076e
 8001394:	0800069a 	.word	0x0800069a
 8001398:	0800076e 	.word	0x0800076e
 800139c:	0800076e 	.word	0x0800076e
 80013a0:	0800076e 	.word	0x0800076e
 80013a4:	0800076e 	.word	0x0800076e
 80013a8:	0800076e 	.word	0x0800076e
 80013ac:	0800069a 	.word	0x0800069a
 80013b0:	08000740 	.word	0x08000740
 80013b4:	0800076e 	.word	0x0800076e
 80013b8:	0800076e 	.word	0x0800076e
 80013bc:	0800070a 	.word	0x0800070a
 80013c0:	0800076e 	.word	0x0800076e
 80013c4:	0800069a 	.word	0x0800069a
 80013c8:	0800076e 	.word	0x0800076e
 80013cc:	0800076e 	.word	0x0800076e
 80013d0:	0800069a 	.word	0x0800069a
 80013d4:	204d4652 	.word	0x204d4652
 80013d8:	20495053 	.word	0x20495053
 80013dc:	74697257 	.word	0x74697257
 80013e0:	00000065 	.word	0x00000065
 80013e4:	656d6954 	.word	0x656d6954
 80013e8:	2074756f 	.word	0x2074756f
 80013ec:	25207325 	.word	0x25207325
 80013f0:	0a583830 	.word	0x0a583830
 80013f4:	00000000 	.word	0x00000000
 80013f8:	20435452 	.word	0x20435452
 80013fc:	0a525349 	.word	0x0a525349
 8001400:	00000000 	.word	0x00000000
