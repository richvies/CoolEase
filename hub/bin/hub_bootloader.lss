
hub/bin/hub_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cb4  08000000  08000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .preinit_array 00000000  08002cb4  08002cb4  00002d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .init_array   00000000  08002cb4  08002cb4  00002d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000000  08002cb4  08002cb4  00002d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000004c  20000000  08002cb4  00002d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000430  2000004c  08002d00  00002d94  2**2
                  ALLOC
  6 ._user_heap_stack 00001004  2000047c  08002d00  00002d94  2**0
                  ALLOC
  7 .ARM.attributes 0000002a  00000000  00000000  00002d94  2**0
                  CONTENTS, READONLY
  8 .debug_info   00017152  00000000  00000000  00002dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 000042f8  00000000  00000000  00019f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00006f86  00000000  00000000  0001e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000011d8  00000000  00000000  0002518e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001270  00000000  00000000  00026366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0000904e  00000000  00000000  000275d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000f32e  00000000  00000000  00030624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000232c1  00000000  00000000  0003f952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      0000004c  00000000  00000000  00062c13  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002874  00000000  00000000  00062c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 20 00 20 21 25 00 08 1f 25 00 08 1d 25 00 08     . . !%...%...%..
	...
 800002c:	1f 25 00 08 00 00 00 00 00 00 00 00 1f 25 00 08     .%...........%..
 800003c:	1f 25 00 08 1d 25 00 08 1d 25 00 08 e5 0e 00 08     .%...%...%......
 800004c:	1d 25 00 08 1d 25 00 08 1d 25 00 08 1d 25 00 08     .%...%...%...%..
 800005c:	45 0c 00 08 1d 25 00 08 1d 25 00 08 1d 25 00 08     E....%...%...%..
 800006c:	1d 25 00 08 75 05 00 08 1d 25 00 08 1d 25 00 08     .%..u....%...%..
 800007c:	1d 25 00 08 1d 25 00 08 1d 25 00 08 1d 25 00 08     .%...%...%...%..
 800008c:	1d 25 00 08 1d 25 00 08 1d 25 00 08 1d 25 00 08     .%...%...%...%..
 800009c:	1d 25 00 08 1d 25 00 08 1d 25 00 08 1d 25 00 08     .%...%...%...%..
 80000ac:	1d 25 00 08 3d 05 00 08 1d 25 00 08 1d 25 00 08     .%..=....%...%..
 80000bc:	b5 03 00 08                                         ....

080000c0 <clock_setup_msi_2mhz>:

#include <stdint.h>
#include <stddef.h>

void clock_setup_msi_2mhz(void) 
{
 80000c0:	b510      	push	{r4, lr}
	// Enable MSI Osc 2.097Mhz
	rcc_osc_on(RCC_MSI);
 80000c2:	2004      	movs	r0, #4
 80000c4:	f001 f812 	bl	80010ec <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_MSI);
 80000c8:	2004      	movs	r0, #4
 80000ca:	f001 f893 	bl	80011f4 <rcc_wait_for_osc_ready>

	// Set MSI to 2.097Mhz
	rcc_set_msi_range(5);
 80000ce:	2005      	movs	r0, #5
 80000d0:	f001 f8ea 	bl	80012a8 <rcc_set_msi_range>

	// Set prescalers for AHB, APB1, APB2
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);				// AHB -> 2.097Mhz
 80000d4:	2000      	movs	r0, #0
 80000d6:	f001 f8dd 	bl	8001294 <rcc_set_hpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);			// APB1 -> 2.097Mhz
 80000da:	2000      	movs	r0, #0
 80000dc:	f001 f8c2 	bl	8001264 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);			// APB2 -> 2.097Mhz
 80000e0:	2000      	movs	r0, #0
 80000e2:	f001 f8cb 	bl	800127c <rcc_set_ppre2>

	// Set flash, 2.097Mhz -> 0 waitstates
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 80000e6:	2000      	movs	r0, #0
 80000e8:	f000 ff2c 	bl	8000f44 <flash_set_ws>

	// Set Peripheral Clock Frequencies used
	rcc_ahb_frequency = 2097000;
 80000ec:	4b03      	ldr	r3, [pc, #12]	; (80000fc <clock_setup_msi_2mhz+0x3c>)
 80000ee:	4a04      	ldr	r2, [pc, #16]	; (8000100 <clock_setup_msi_2mhz+0x40>)
 80000f0:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 2097000;
 80000f2:	4a04      	ldr	r2, [pc, #16]	; (8000104 <clock_setup_msi_2mhz+0x44>)
 80000f4:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = 2097000;
 80000f6:	4a04      	ldr	r2, [pc, #16]	; (8000108 <clock_setup_msi_2mhz+0x48>)
 80000f8:	6013      	str	r3, [r2, #0]
}
 80000fa:	bd10      	pop	{r4, pc}
 80000fc:	001fff68 	.word	0x001fff68
 8000100:	20000040 	.word	0x20000040
 8000104:	20000044 	.word	0x20000044
 8000108:	20000048 	.word	0x20000048

0800010c <hid_control_request>:
                                                          void (**complete)(usbd_device *, struct usb_setup_data *))
{
    (void)complete;
    (void)dev;

    if ((req->bmRequestType != 0x81) ||
 800010c:	7808      	ldrb	r0, [r1, #0]
 800010e:	2881      	cmp	r0, #129	; 0x81
 8000110:	d110      	bne.n	8000134 <hid_control_request+0x28>
        (req->bRequest != USB_REQ_GET_DESCRIPTOR) ||
 8000112:	7848      	ldrb	r0, [r1, #1]
    if ((req->bmRequestType != 0x81) ||
 8000114:	2806      	cmp	r0, #6
 8000116:	d10f      	bne.n	8000138 <hid_control_request+0x2c>
        (req->wValue != 0x2200))
 8000118:	7888      	ldrb	r0, [r1, #2]
 800011a:	78c9      	ldrb	r1, [r1, #3]
 800011c:	0209      	lsls	r1, r1, #8
 800011e:	4301      	orrs	r1, r0
        (req->bRequest != USB_REQ_GET_DESCRIPTOR) ||
 8000120:	2088      	movs	r0, #136	; 0x88
 8000122:	0180      	lsls	r0, r0, #6
 8000124:	4281      	cmp	r1, r0
 8000126:	d109      	bne.n	800013c <hid_control_request+0x30>
        return USBD_REQ_NOTSUPP;

    //  Handle the HID report descriptor.
    *buf = (uint8_t *)hid_report_descriptor;
 8000128:	4905      	ldr	r1, [pc, #20]	; (8000140 <hid_control_request+0x34>)
 800012a:	6011      	str	r1, [r2, #0]
    *len = sizeof(hid_report_descriptor);
 800012c:	2219      	movs	r2, #25
 800012e:	801a      	strh	r2, [r3, #0]

    return USBD_REQ_HANDLED;
 8000130:	2001      	movs	r0, #1
 8000132:	e000      	b.n	8000136 <hid_control_request+0x2a>
        return USBD_REQ_NOTSUPP;
 8000134:	2000      	movs	r0, #0
}
 8000136:	4770      	bx	lr
        return USBD_REQ_NOTSUPP;
 8000138:	2000      	movs	r0, #0
 800013a:	e7fc      	b.n	8000136 <hid_control_request+0x2a>
 800013c:	2000      	movs	r0, #0
 800013e:	e7fa      	b.n	8000136 <hid_control_request+0x2a>
 8000140:	080029ec 	.word	0x080029ec

08000144 <hid_set_config>:
{
 8000144:	b510      	push	{r4, lr}
 8000146:	b082      	sub	sp, #8
 8000148:	0004      	movs	r4, r0
    usbd_ep_setup(dev, ENDPOINT_HID_IN, USB_ENDPOINT_ATTR_INTERRUPT, 64, hid_in_report_callback);
 800014a:	4b0d      	ldr	r3, [pc, #52]	; (8000180 <hid_set_config+0x3c>)
 800014c:	9300      	str	r3, [sp, #0]
 800014e:	2340      	movs	r3, #64	; 0x40
 8000150:	2203      	movs	r2, #3
 8000152:	2181      	movs	r1, #129	; 0x81
 8000154:	f001 f9e2 	bl	800151c <usbd_ep_setup>
    usbd_ep_setup(dev, ENDPOINT_HID_OUT, USB_ENDPOINT_ATTR_INTERRUPT, 64, hid_out_report_callback);
 8000158:	4b0a      	ldr	r3, [pc, #40]	; (8000184 <hid_set_config+0x40>)
 800015a:	9300      	str	r3, [sp, #0]
 800015c:	2340      	movs	r3, #64	; 0x40
 800015e:	2203      	movs	r2, #3
 8000160:	2101      	movs	r1, #1
 8000162:	0020      	movs	r0, r4
 8000164:	f001 f9da 	bl	800151c <usbd_ep_setup>
    usbd_register_control_callback(
 8000168:	4b07      	ldr	r3, [pc, #28]	; (8000188 <hid_set_config+0x44>)
 800016a:	227f      	movs	r2, #127	; 0x7f
 800016c:	2101      	movs	r1, #1
 800016e:	0020      	movs	r0, r4
 8000170:	f001 facf 	bl	8001712 <usbd_register_control_callback>
    usb_state = CONNECTED;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <hid_set_config+0x48>)
 8000176:	2201      	movs	r2, #1
 8000178:	701a      	strb	r2, [r3, #0]
}
 800017a:	b002      	add	sp, #8
 800017c:	bd10      	pop	{r4, pc}
 800017e:	46c0      	nop			; (mov r8, r8)
 8000180:	080001e5 	.word	0x080001e5
 8000184:	08000191 	.word	0x08000191
 8000188:	0800010d 	.word	0x0800010d
 800018c:	2000004e 	.word	0x2000004e

08000190 <hid_out_report_callback>:
        }
    }
}

static void hid_out_report_callback(usbd_device *dev, uint8_t ea)
{
 8000190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000192:	b087      	sub	sp, #28
 8000194:	0005      	movs	r5, r0
 8000196:	000e      	movs	r6, r1
    // serial_printf("G");

    // Have to write a packet back here to begin IN transactions
    uint8_t buf[] = "Out Report Callback\n";
 8000198:	466a      	mov	r2, sp
 800019a:	4b0f      	ldr	r3, [pc, #60]	; (80001d8 <hid_out_report_callback+0x48>)
 800019c:	0014      	movs	r4, r2
 800019e:	cb83      	ldmia	r3!, {r0, r1, r7}
 80001a0:	c483      	stmia	r4!, {r0, r1, r7}
 80001a2:	cb03      	ldmia	r3!, {r0, r1}
 80001a4:	c403      	stmia	r4!, {r0, r1}
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	7023      	strb	r3, [r4, #0]
    usbd_ep_write_packet(dev, ea, buf, HID_REPORT_SIZE);
 80001aa:	2340      	movs	r3, #64	; 0x40
 80001ac:	0031      	movs	r1, r6
 80001ae:	0028      	movs	r0, r5
 80001b0:	f001 f9d4 	bl	800155c <usbd_ep_write_packet>

    usbd_ep_read_packet(dev, ea, hid_report_buf, HID_REPORT_SIZE);
 80001b4:	4c09      	ldr	r4, [pc, #36]	; (80001dc <hid_out_report_callback+0x4c>)
 80001b6:	2340      	movs	r3, #64	; 0x40
 80001b8:	0022      	movs	r2, r4
 80001ba:	0031      	movs	r1, r6
 80001bc:	0028      	movs	r0, r5
 80001be:	f001 f9d4 	bl	800156a <usbd_ep_read_packet>
    uint8_t command = hid_report_buf[0];
 80001c2:	7823      	ldrb	r3, [r4, #0]

    // serial_printf("Out Report command: %i data: %s\n", command, &hid_report_buf[4]);

    // Get Log
    if (command == 1)
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d001      	beq.n	80001cc <hid_out_report_callback+0x3c>
    {
        usb_state = GET_LOG;
        log_read_reset();
    }
}
 80001c8:	b007      	add	sp, #28
 80001ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        usb_state = GET_LOG;
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <hid_out_report_callback+0x50>)
 80001ce:	2202      	movs	r2, #2
 80001d0:	701a      	strb	r2, [r3, #0]
        log_read_reset();
 80001d2:	f000 fb79 	bl	80008c8 <log_read_reset>
}
 80001d6:	e7f7      	b.n	80001c8 <hid_out_report_callback+0x38>
 80001d8:	0800291c 	.word	0x0800291c
 80001dc:	20000000 	.word	0x20000000
 80001e0:	2000004e 	.word	0x2000004e

080001e4 <hid_in_report_callback>:
{
 80001e4:	b570      	push	{r4, r5, r6, lr}
 80001e6:	0005      	movs	r5, r0
 80001e8:	000e      	movs	r6, r1
    if (usb_state == GET_LOG)
 80001ea:	4b12      	ldr	r3, [pc, #72]	; (8000234 <hid_in_report_callback+0x50>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	2b02      	cmp	r3, #2
 80001f0:	d01d      	beq.n	800022e <hid_in_report_callback+0x4a>
}
 80001f2:	bd70      	pop	{r4, r5, r6, pc}
            hid_report_buf[i] = log_read();
 80001f4:	f000 fb50 	bl	8000898 <log_read>
 80001f8:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <hid_in_report_callback+0x54>)
 80001fa:	5518      	strb	r0, [r3, r4]
        for (uint16_t i = 0; i < HID_REPORT_SIZE; i++)
 80001fc:	3401      	adds	r4, #1
 80001fe:	b2a4      	uxth	r4, r4
 8000200:	2c3f      	cmp	r4, #63	; 0x3f
 8000202:	d9f7      	bls.n	80001f4 <hid_in_report_callback+0x10>
        bytes_sent += HID_REPORT_SIZE;
 8000204:	4c0d      	ldr	r4, [pc, #52]	; (800023c <hid_in_report_callback+0x58>)
 8000206:	8823      	ldrh	r3, [r4, #0]
 8000208:	3340      	adds	r3, #64	; 0x40
 800020a:	8023      	strh	r3, [r4, #0]
        usbd_ep_write_packet(dev, ea, hid_report_buf, HID_REPORT_SIZE);
 800020c:	2340      	movs	r3, #64	; 0x40
 800020e:	4a0a      	ldr	r2, [pc, #40]	; (8000238 <hid_in_report_callback+0x54>)
 8000210:	0031      	movs	r1, r6
 8000212:	0028      	movs	r0, r5
 8000214:	f001 f9a2 	bl	800155c <usbd_ep_write_packet>
        if(bytes_sent >= log_size())
 8000218:	f000 fb60 	bl	80008dc <log_size>
 800021c:	8823      	ldrh	r3, [r4, #0]
 800021e:	4298      	cmp	r0, r3
 8000220:	d8e7      	bhi.n	80001f2 <hid_in_report_callback+0xe>
            usb_state = RESET;
 8000222:	2300      	movs	r3, #0
 8000224:	4a03      	ldr	r2, [pc, #12]	; (8000234 <hid_in_report_callback+0x50>)
 8000226:	7013      	strb	r3, [r2, #0]
            bytes_sent = 0;
 8000228:	4a04      	ldr	r2, [pc, #16]	; (800023c <hid_in_report_callback+0x58>)
 800022a:	8013      	strh	r3, [r2, #0]
}
 800022c:	e7e1      	b.n	80001f2 <hid_in_report_callback+0xe>
        for (uint16_t i = 0; i < HID_REPORT_SIZE; i++)
 800022e:	2400      	movs	r4, #0
 8000230:	e7e6      	b.n	8000200 <hid_in_report_callback+0x1c>
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	2000004e 	.word	0x2000004e
 8000238:	20000000 	.word	0x20000000
 800023c:	2000004c 	.word	0x2000004c

08000240 <cusb_clock_init>:
{
 8000240:	b510      	push	{r4, lr}
    flash_set_ws(FLASH_ACR_LATENCY_0WS);
 8000242:	2000      	movs	r0, #0
 8000244:	f000 fe7e 	bl	8000f44 <flash_set_ws>
    rcc_osc_on(RCC_HSI16);
 8000248:	2003      	movs	r0, #3
 800024a:	f000 ff4f 	bl	80010ec <rcc_osc_on>
    rcc_wait_for_osc_ready(RCC_HSI16);
 800024e:	2003      	movs	r0, #3
 8000250:	f000 ffd0 	bl	80011f4 <rcc_wait_for_osc_ready>
    rcc_set_sysclk_source(RCC_HSI16);
 8000254:	2003      	movs	r0, #3
 8000256:	f000 ffdf 	bl	8001218 <rcc_set_sysclk_source>
    RCC_CFGR |= RCC_CFGR_STOPWUCK_HSI16;
 800025a:	4a1f      	ldr	r2, [pc, #124]	; (80002d8 <cusb_clock_init+0x98>)
 800025c:	6811      	ldr	r1, [r2, #0]
 800025e:	2380      	movs	r3, #128	; 0x80
 8000260:	021b      	lsls	r3, r3, #8
 8000262:	430b      	orrs	r3, r1
 8000264:	6013      	str	r3, [r2, #0]
    rcc_set_hpre(RCC_CFGR_HPRE_NODIV);   //  AHB -> 16Mhz
 8000266:	2000      	movs	r0, #0
 8000268:	f001 f814 	bl	8001294 <rcc_set_hpre>
    rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV); //  APB1 ->16Mhz
 800026c:	2000      	movs	r0, #0
 800026e:	f000 fff9 	bl	8001264 <rcc_set_ppre1>
    rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV); //  APB2 ->16Mhz
 8000272:	2000      	movs	r0, #0
 8000274:	f001 f802 	bl	800127c <rcc_set_ppre2>
    rcc_ahb_frequency = 16000000;
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <cusb_clock_init+0x9c>)
 800027a:	4a19      	ldr	r2, [pc, #100]	; (80002e0 <cusb_clock_init+0xa0>)
 800027c:	6013      	str	r3, [r2, #0]
    rcc_apb1_frequency = 16000000;
 800027e:	4a19      	ldr	r2, [pc, #100]	; (80002e4 <cusb_clock_init+0xa4>)
 8000280:	6013      	str	r3, [r2, #0]
    rcc_apb2_frequency = 16000000;
 8000282:	4a19      	ldr	r2, [pc, #100]	; (80002e8 <cusb_clock_init+0xa8>)
 8000284:	6013      	str	r3, [r2, #0]
    rcc_periph_clock_enable(RCC_SYSCFG);
 8000286:	20d0      	movs	r0, #208	; 0xd0
 8000288:	00c0      	lsls	r0, r0, #3
 800028a:	f001 f84f 	bl	800132c <rcc_periph_clock_enable>
    SYSCFG_CFGR3 |= 0x01;
 800028e:	4a17      	ldr	r2, [pc, #92]	; (80002ec <cusb_clock_init+0xac>)
 8000290:	6813      	ldr	r3, [r2, #0]
 8000292:	2101      	movs	r1, #1
 8000294:	430b      	orrs	r3, r1
 8000296:	6013      	str	r3, [r2, #0]
    while (!(SYSCFG_CFGR3 & SYSCFG_CFGR3_VREFINT_RDYF))
 8000298:	4b14      	ldr	r3, [pc, #80]	; (80002ec <cusb_clock_init+0xac>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	d5fb      	bpl.n	8000298 <cusb_clock_init+0x58>
    SYSCFG_CFGR3 |= SYSCFG_CFGR3_ENREF_HSI48;
 80002a0:	4a12      	ldr	r2, [pc, #72]	; (80002ec <cusb_clock_init+0xac>)
 80002a2:	6811      	ldr	r1, [r2, #0]
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	019b      	lsls	r3, r3, #6
 80002a8:	430b      	orrs	r3, r1
 80002aa:	6013      	str	r3, [r2, #0]
    while (!(SYSCFG_CFGR3 & SYSCFG_CFGR3_REF_HSI48_RDYF))
 80002ac:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <cusb_clock_init+0xac>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	015b      	lsls	r3, r3, #5
 80002b2:	d5fb      	bpl.n	80002ac <cusb_clock_init+0x6c>
    rcc_osc_on(RCC_HSI48);
 80002b4:	2002      	movs	r0, #2
 80002b6:	f000 ff19 	bl	80010ec <rcc_osc_on>
    rcc_wait_for_osc_ready(RCC_HSI48);
 80002ba:	2002      	movs	r0, #2
 80002bc:	f000 ff9a 	bl	80011f4 <rcc_wait_for_osc_ready>
    rcc_periph_clock_enable(RCC_USB);
 80002c0:	480b      	ldr	r0, [pc, #44]	; (80002f0 <cusb_clock_init+0xb0>)
 80002c2:	f001 f833 	bl	800132c <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_CRS);
 80002c6:	480b      	ldr	r0, [pc, #44]	; (80002f4 <cusb_clock_init+0xb4>)
 80002c8:	f001 f830 	bl	800132c <rcc_periph_clock_enable>
    rcc_set_hsi48_source_rc48();
 80002cc:	f000 ff9a 	bl	8001204 <rcc_set_hsi48_source_rc48>
    rcc_osc_off(RCC_MSI);
 80002d0:	2004      	movs	r0, #4
 80002d2:	f000 ff35 	bl	8001140 <rcc_osc_off>
}
 80002d6:	bd10      	pop	{r4, pc}
 80002d8:	4002100c 	.word	0x4002100c
 80002dc:	00f42400 	.word	0x00f42400
 80002e0:	20000040 	.word	0x20000040
 80002e4:	20000044 	.word	0x20000044
 80002e8:	20000048 	.word	0x20000048
 80002ec:	40010020 	.word	0x40010020
 80002f0:	00000717 	.word	0x00000717
 80002f4:	0000071b 	.word	0x0000071b

080002f8 <cusb_init>:
{
 80002f8:	b510      	push	{r4, lr}
 80002fa:	b084      	sub	sp, #16
    cusb_clock_init();
 80002fc:	f7ff ffa0 	bl	8000240 <cusb_clock_init>
    usb_state = RESET;
 8000300:	2300      	movs	r3, #0
 8000302:	4a13      	ldr	r2, [pc, #76]	; (8000350 <cusb_init+0x58>)
 8000304:	7013      	strb	r3, [r2, #0]
    SET_REG(USB_CNTR_REG, USB_CNTR_FRES);
 8000306:	4a13      	ldr	r2, [pc, #76]	; (8000354 <cusb_init+0x5c>)
 8000308:	2101      	movs	r1, #1
 800030a:	6011      	str	r1, [r2, #0]
    SET_REG(USB_CNTR_REG, 0);
 800030c:	6013      	str	r3, [r2, #0]
    SET_REG(USB_ISTR_REG, 0);
 800030e:	4a12      	ldr	r2, [pc, #72]	; (8000358 <cusb_init+0x60>)
 8000310:	6013      	str	r3, [r2, #0]
    usbd_dev = usbd_init(&st_usbfs_v2_usb_driver, &dev_desc, &cfg_desc, usb_strings, sizeof(usb_strings) / sizeof(const char *), usbd_control_buffer, sizeof(usbd_control_buffer));
 8000312:	3380      	adds	r3, #128	; 0x80
 8000314:	9302      	str	r3, [sp, #8]
 8000316:	4b11      	ldr	r3, [pc, #68]	; (800035c <cusb_init+0x64>)
 8000318:	9301      	str	r3, [sp, #4]
 800031a:	2304      	movs	r3, #4
 800031c:	9300      	str	r3, [sp, #0]
 800031e:	4b10      	ldr	r3, [pc, #64]	; (8000360 <cusb_init+0x68>)
 8000320:	4a10      	ldr	r2, [pc, #64]	; (8000364 <cusb_init+0x6c>)
 8000322:	4911      	ldr	r1, [pc, #68]	; (8000368 <cusb_init+0x70>)
 8000324:	4811      	ldr	r0, [pc, #68]	; (800036c <cusb_init+0x74>)
 8000326:	f001 f8cd 	bl	80014c4 <usbd_init>
 800032a:	4c11      	ldr	r4, [pc, #68]	; (8000370 <cusb_init+0x78>)
 800032c:	6020      	str	r0, [r4, #0]
    usbd_register_reset_callback(usbd_dev, cusb_reset_callback);
 800032e:	4911      	ldr	r1, [pc, #68]	; (8000374 <cusb_init+0x7c>)
 8000330:	f001 f8f2 	bl	8001518 <usbd_register_reset_callback>
    usbd_register_set_config_callback(usbd_dev, hid_set_config);
 8000334:	6820      	ldr	r0, [r4, #0]
 8000336:	4910      	ldr	r1, [pc, #64]	; (8000378 <cusb_init+0x80>)
 8000338:	f001 fd80 	bl	8001e3c <usbd_register_set_config_callback>
    nvic_enable_irq(NVIC_USB_IRQ);
 800033c:	201f      	movs	r0, #31
 800033e:	f002 f933 	bl	80025a8 <nvic_enable_irq>
    nvic_set_priority(NVIC_USB_IRQ, 0);
 8000342:	2100      	movs	r1, #0
 8000344:	201f      	movs	r0, #31
 8000346:	f002 f93b 	bl	80025c0 <nvic_set_priority>
}
 800034a:	b004      	add	sp, #16
 800034c:	bd10      	pop	{r4, pc}
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	2000004e 	.word	0x2000004e
 8000354:	40005c40 	.word	0x40005c40
 8000358:	40005c44 	.word	0x40005c44
 800035c:	20000050 	.word	0x20000050
 8000360:	08002a18 	.word	0x08002a18
 8000364:	08002984 	.word	0x08002984
 8000368:	08002994 	.word	0x08002994
 800036c:	08002c80 	.word	0x08002c80
 8000370:	200000d0 	.word	0x200000d0
 8000374:	080003a1 	.word	0x080003a1
 8000378:	08000145 	.word	0x08000145

0800037c <cusb_send>:
{
 800037c:	b500      	push	{lr}
 800037e:	b083      	sub	sp, #12
 8000380:	466b      	mov	r3, sp
 8000382:	1dda      	adds	r2, r3, #7
 8000384:	7010      	strb	r0, [r2, #0]
    usbd_ep_write_packet(usbd_dev, ENDPOINT_HID_IN, (const void *)&character, 1);
 8000386:	4b04      	ldr	r3, [pc, #16]	; (8000398 <cusb_send+0x1c>)
 8000388:	6818      	ldr	r0, [r3, #0]
 800038a:	2301      	movs	r3, #1
 800038c:	2181      	movs	r1, #129	; 0x81
 800038e:	f001 f8e5 	bl	800155c <usbd_ep_write_packet>
}
 8000392:	b003      	add	sp, #12
 8000394:	bd00      	pop	{pc}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	200000d0 	.word	0x200000d0

0800039c <cusb_hook_reset>:

/*////////////////////////////////////////////////////////////////////////////*/
// Hook Function Weak Definitions
/*////////////////////////////////////////////////////////////////////////////*/

void __attribute__ ((weak)) cusb_hook_reset(void) {}
 800039c:	4770      	bx	lr
	...

080003a0 <cusb_reset_callback>:
{
 80003a0:	b510      	push	{r4, lr}
    usb_state = RESET;
 80003a2:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <cusb_reset_callback+0x10>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	701a      	strb	r2, [r3, #0]
    cusb_hook_reset();
 80003a8:	f7ff fff8 	bl	800039c <cusb_hook_reset>
}
 80003ac:	bd10      	pop	{r4, pc}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	2000004e 	.word	0x2000004e

080003b4 <usb_isr>:
/*////////////////////////////////////////////////////////////////////////////*/
// USB Interrupt
/*////////////////////////////////////////////////////////////////////////////*/

void usb_isr(void)
{
 80003b4:	b570      	push	{r4, r5, r6, lr}
    // This print is definitley not the problem with hidapi write failing
    serial_printf("I");
 80003b6:	4843      	ldr	r0, [pc, #268]	; (80004c4 <usb_isr+0x110>)
 80003b8:	f000 fa56 	bl	8000868 <serial_printf>

    uint16_t istr = *USB_ISTR_REG;
 80003bc:	4b42      	ldr	r3, [pc, #264]	; (80004c8 <usb_isr+0x114>)
 80003be:	681b      	ldr	r3, [r3, #0]

    if (istr & USB_ISTR_RESET)
 80003c0:	041a      	lsls	r2, r3, #16
 80003c2:	0c15      	lsrs	r5, r2, #16
 80003c4:	0152      	lsls	r2, r2, #5
 80003c6:	d42e      	bmi.n	8000426 <usb_isr+0x72>
        usbd_dev->pm_top = USBD_PM_TOP;
        _usbd_reset(usbd_dev);
        return;
    }

    if (istr & USB_ISTR_CTR)
 80003c8:	041a      	lsls	r2, r3, #16
 80003ca:	d436      	bmi.n	800043a <usb_isr+0x86>
        {
            USB_CLR_EP_RX_CTR(ep);
        }
    }

    if (istr & USB_ISTR_SUSP)
 80003cc:	052b      	lsls	r3, r5, #20
 80003ce:	d508      	bpl.n	80003e2 <usb_isr+0x2e>
    {
        USB_CLR_ISTR_SUSP();
 80003d0:	4b3d      	ldr	r3, [pc, #244]	; (80004c8 <usb_isr+0x114>)
 80003d2:	4a3e      	ldr	r2, [pc, #248]	; (80004cc <usb_isr+0x118>)
 80003d4:	601a      	str	r2, [r3, #0]
        if (usbd_dev->user_callback_suspend)
 80003d6:	4b3e      	ldr	r3, [pc, #248]	; (80004d0 <usb_isr+0x11c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	6a1b      	ldr	r3, [r3, #32]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d000      	beq.n	80003e2 <usb_isr+0x2e>
        {
            usbd_dev->user_callback_suspend();
 80003e0:	4798      	blx	r3
        }
    }

    if (istr & USB_ISTR_WKUP)
 80003e2:	04eb      	lsls	r3, r5, #19
 80003e4:	d508      	bpl.n	80003f8 <usb_isr+0x44>
    {
        USB_CLR_ISTR_WKUP();
 80003e6:	4b38      	ldr	r3, [pc, #224]	; (80004c8 <usb_isr+0x114>)
 80003e8:	4a3a      	ldr	r2, [pc, #232]	; (80004d4 <usb_isr+0x120>)
 80003ea:	601a      	str	r2, [r3, #0]
        if (usbd_dev->user_callback_resume)
 80003ec:	4b38      	ldr	r3, [pc, #224]	; (80004d0 <usb_isr+0x11c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d000      	beq.n	80003f8 <usb_isr+0x44>
        {
            usbd_dev->user_callback_resume();
 80003f6:	4798      	blx	r3
        }
    }

    if (istr & USB_ISTR_SOF)
 80003f8:	05ab      	lsls	r3, r5, #22
 80003fa:	d508      	bpl.n	800040e <usb_isr+0x5a>
    {
        USB_CLR_ISTR_SOF();
 80003fc:	4b32      	ldr	r3, [pc, #200]	; (80004c8 <usb_isr+0x114>)
 80003fe:	4a36      	ldr	r2, [pc, #216]	; (80004d8 <usb_isr+0x124>)
 8000400:	601a      	str	r2, [r3, #0]
        if (usbd_dev->user_callback_sof)
 8000402:	4b33      	ldr	r3, [pc, #204]	; (80004d0 <usb_isr+0x11c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000408:	2b00      	cmp	r3, #0
 800040a:	d000      	beq.n	800040e <usb_isr+0x5a>
        {
            usbd_dev->user_callback_sof();
 800040c:	4798      	blx	r3
        }
    }

    if (usbd_dev->user_callback_sof)
 800040e:	4b30      	ldr	r3, [pc, #192]	; (80004d0 <usb_isr+0x11c>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000414:	2b00      	cmp	r3, #0
 8000416:	d04f      	beq.n	80004b8 <usb_isr+0x104>
    {
        *USB_CNTR_REG |= USB_CNTR_SOFM;
 8000418:	4a30      	ldr	r2, [pc, #192]	; (80004dc <usb_isr+0x128>)
 800041a:	6811      	ldr	r1, [r2, #0]
 800041c:	2380      	movs	r3, #128	; 0x80
 800041e:	009b      	lsls	r3, r3, #2
 8000420:	430b      	orrs	r3, r1
 8000422:	6013      	str	r3, [r2, #0]
    }
    else
    {
        *USB_CNTR_REG &= ~USB_CNTR_SOFM;
    }
}
 8000424:	bd70      	pop	{r4, r5, r6, pc}
        USB_CLR_ISTR_RESET();
 8000426:	4b28      	ldr	r3, [pc, #160]	; (80004c8 <usb_isr+0x114>)
 8000428:	4a2d      	ldr	r2, [pc, #180]	; (80004e0 <usb_isr+0x12c>)
 800042a:	601a      	str	r2, [r3, #0]
        usbd_dev->pm_top = USBD_PM_TOP;
 800042c:	4b28      	ldr	r3, [pc, #160]	; (80004d0 <usb_isr+0x11c>)
 800042e:	6818      	ldr	r0, [r3, #0]
 8000430:	2340      	movs	r3, #64	; 0x40
 8000432:	8303      	strh	r3, [r0, #24]
        _usbd_reset(usbd_dev);
 8000434:	f001 f87b 	bl	800152e <_usbd_reset>
        return;
 8000438:	e7f4      	b.n	8000424 <usb_isr+0x70>
        uint8_t ep = istr & USB_ISTR_EP_ID;
 800043a:	240f      	movs	r4, #15
 800043c:	401c      	ands	r4, r3
        if (istr & USB_ISTR_DIR)
 800043e:	06eb      	lsls	r3, r5, #27
 8000440:	d512      	bpl.n	8000468 <usb_isr+0xb4>
            if (*USB_EP_REG(ep) & USB_EP_SETUP)
 8000442:	00a3      	lsls	r3, r4, #2
 8000444:	4a27      	ldr	r2, [pc, #156]	; (80004e4 <usb_isr+0x130>)
 8000446:	4694      	mov	ip, r2
 8000448:	4463      	add	r3, ip
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	051b      	lsls	r3, r3, #20
 800044e:	d401      	bmi.n	8000454 <usb_isr+0xa0>
                type = USB_TRANSACTION_OUT;
 8000450:	2101      	movs	r1, #1
 8000452:	e016      	b.n	8000482 <usb_isr+0xce>
                st_usbfs_ep_read_packet(usbd_dev, ep, &usbd_dev->control_state.req, 8);
 8000454:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <usb_isr+0x11c>)
 8000456:	6818      	ldr	r0, [r3, #0]
 8000458:	0002      	movs	r2, r0
 800045a:	3230      	adds	r2, #48	; 0x30
 800045c:	2308      	movs	r3, #8
 800045e:	0021      	movs	r1, r4
 8000460:	f001 ff22 	bl	80022a8 <st_usbfs_ep_read_packet>
                type = USB_TRANSACTION_SETUP;
 8000464:	2102      	movs	r1, #2
 8000466:	e00c      	b.n	8000482 <usb_isr+0xce>
            USB_CLR_EP_TX_CTR(ep);
 8000468:	00a1      	lsls	r1, r4, #2
 800046a:	4b1e      	ldr	r3, [pc, #120]	; (80004e4 <usb_isr+0x130>)
 800046c:	469c      	mov	ip, r3
 800046e:	4461      	add	r1, ip
 8000470:	680b      	ldr	r3, [r1, #0]
 8000472:	b21b      	sxth	r3, r3
 8000474:	4a1c      	ldr	r2, [pc, #112]	; (80004e8 <usb_isr+0x134>)
 8000476:	401a      	ands	r2, r3
 8000478:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <usb_isr+0x138>)
 800047a:	4313      	orrs	r3, r2
 800047c:	b29b      	uxth	r3, r3
 800047e:	600b      	str	r3, [r1, #0]
            type = USB_TRANSACTION_IN;
 8000480:	2100      	movs	r1, #0
        if (usbd_dev->user_callback_ctr[ep][type])
 8000482:	4a13      	ldr	r2, [pc, #76]	; (80004d0 <usb_isr+0x11c>)
 8000484:	6810      	ldr	r0, [r2, #0]
 8000486:	0063      	lsls	r3, r4, #1
 8000488:	191b      	adds	r3, r3, r4
 800048a:	185b      	adds	r3, r3, r1
 800048c:	331a      	adds	r3, #26
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	581b      	ldr	r3, [r3, r0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d002      	beq.n	800049c <usb_isr+0xe8>
            usbd_dev->user_callback_ctr[ep][type](usbd_dev, ep);
 8000496:	0021      	movs	r1, r4
 8000498:	4798      	blx	r3
 800049a:	e797      	b.n	80003cc <usb_isr+0x18>
            USB_CLR_EP_RX_CTR(ep);
 800049c:	00a3      	lsls	r3, r4, #2
 800049e:	4a11      	ldr	r2, [pc, #68]	; (80004e4 <usb_isr+0x130>)
 80004a0:	4694      	mov	ip, r2
 80004a2:	4463      	add	r3, ip
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	b212      	sxth	r2, r2
 80004a8:	490f      	ldr	r1, [pc, #60]	; (80004e8 <usb_isr+0x134>)
 80004aa:	400a      	ands	r2, r1
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	430a      	orrs	r2, r1
 80004b0:	b212      	sxth	r2, r2
 80004b2:	b292      	uxth	r2, r2
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	e789      	b.n	80003cc <usb_isr+0x18>
        *USB_CNTR_REG &= ~USB_CNTR_SOFM;
 80004b8:	4a08      	ldr	r2, [pc, #32]	; (80004dc <usb_isr+0x128>)
 80004ba:	6813      	ldr	r3, [r2, #0]
 80004bc:	490c      	ldr	r1, [pc, #48]	; (80004f0 <usb_isr+0x13c>)
 80004be:	400b      	ands	r3, r1
 80004c0:	6013      	str	r3, [r2, #0]
 80004c2:	e7af      	b.n	8000424 <usb_isr+0x70>
 80004c4:	08002934 	.word	0x08002934
 80004c8:	40005c44 	.word	0x40005c44
 80004cc:	0000f7ff 	.word	0x0000f7ff
 80004d0:	200000d0 	.word	0x200000d0
 80004d4:	0000efff 	.word	0x0000efff
 80004d8:	0000fdff 	.word	0x0000fdff
 80004dc:	40005c40 	.word	0x40005c40
 80004e0:	0000fbff 	.word	0x0000fbff
 80004e4:	40005c00 	.word	0x40005c00
 80004e8:	00000f0f 	.word	0x00000f0f
 80004ec:	ffff8000 	.word	0xffff8000
 80004f0:	fffffdff 	.word	0xfffffdff

080004f4 <main>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

int main(void)
{
 80004f4:	b510      	push	{r4, lr}
	clock_setup_msi_2mhz();
 80004f6:	f7ff fde3 	bl	80000c0 <clock_setup_msi_2mhz>
    log_init();
 80004fa:	f000 f995 	bl	8000828 <log_init>
	timers_lptim_init();
 80004fe:	f000 fbe7 	bl	8000cd0 <timers_lptim_init>
	timers_tim6_init();
 8000502:	f000 fc2b 	bl	8000d5c <timers_tim6_init>

    log_printf("Hub Bl Start\n");
 8000506:	480a      	ldr	r0, [pc, #40]	; (8000530 <main+0x3c>)
 8000508:	f000 f976 	bl	80007f8 <log_printf>

	for (uint16_t i = 0; i < 10; i++)
 800050c:	2400      	movs	r4, #0
 800050e:	e005      	b.n	800051c <main+0x28>
	{
		log_printf("Test %i\n", i);
 8000510:	0021      	movs	r1, r4
 8000512:	4808      	ldr	r0, [pc, #32]	; (8000534 <main+0x40>)
 8000514:	f000 f970 	bl	80007f8 <log_printf>
	for (uint16_t i = 0; i < 10; i++)
 8000518:	3401      	adds	r4, #1
 800051a:	b2a4      	uxth	r4, r4
 800051c:	2c09      	cmp	r4, #9
 800051e:	d9f7      	bls.n	8000510 <main+0x1c>
	}

	serial_printf("Hub Bootloader Ready");
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <main+0x44>)
 8000522:	f000 f9a1 	bl	8000868 <serial_printf>

	cusb_init();
 8000526:	f7ff fee7 	bl	80002f8 <cusb_init>

    for (;;)
	{
		// log_printf("Hub Bootloader Loop\n\n");
		// timers_delay_milliseconds(1000);
		__asm__("nop");
 800052a:	46c0      	nop			; (mov r8, r8)
    for (;;)
 800052c:	e7fd      	b.n	800052a <main+0x36>
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	08002a28 	.word	0x08002a28
 8000534:	08002a38 	.word	0x08002a38
 8000538:	08002a44 	.word	0x08002a44

0800053c <usart2_isr>:
}


// Interrupt routines
void usart2_isr(void)
{
 800053c:	b510      	push	{r4, lr}
	usart_send(SPF_USART, usart_recv(SIM_USART));
 800053e:	4c09      	ldr	r4, [pc, #36]	; (8000564 <usart2_isr+0x28>)
 8000540:	0020      	movs	r0, r4
 8000542:	f000 ffaf 	bl	80014a4 <usart_recv>
 8000546:	0001      	movs	r1, r0
 8000548:	4807      	ldr	r0, [pc, #28]	; (8000568 <usart2_isr+0x2c>)
 800054a:	f000 ffa7 	bl	800149c <usart_send>

	sim_rx_buf[sim_rx_head++] = usart_recv(SIM_USART);
 800054e:	0020      	movs	r0, r4
 8000550:	f000 ffa8 	bl	80014a4 <usart_recv>
 8000554:	4a05      	ldr	r2, [pc, #20]	; (800056c <usart2_isr+0x30>)
 8000556:	7813      	ldrb	r3, [r2, #0]
 8000558:	1c59      	adds	r1, r3, #1
 800055a:	7011      	strb	r1, [r2, #0]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <usart2_isr+0x34>)
 800055e:	54d0      	strb	r0, [r2, r3]
}
 8000560:	bd10      	pop	{r4, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	40004400 	.word	0x40004400
 8000568:	40013800 	.word	0x40013800
 800056c:	200001d4 	.word	0x200001d4
 8000570:	200000d4 	.word	0x200000d4

08000574 <adc_comp_isr>:

// ISRs
#ifdef _HUB
// For use with ADC1
void adc_comp_isr(void)
{
 8000574:	b570      	push	{r4, r5, r6, lr}
    // Takes about 150us to run

    // log_printf("ADC ISR %08X\n", ADC_ISR(ADC1));

    // Calculate batt_voltages
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8000576:	2400      	movs	r4, #0
 8000578:	e014      	b.n	80005a4 <adc_comp_isr+0x30>
        batt_voltages[i] = ( (uint32_t)300 * ST_VREFINT_CAL * adc_vals[i + 1] ) / ( adc_vals[0] * 4095 ); }
 800057a:	4b4f      	ldr	r3, [pc, #316]	; (80006b8 <adc_comp_isr+0x144>)
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	1c65      	adds	r5, r4, #1
 8000580:	4a4e      	ldr	r2, [pc, #312]	; (80006bc <adc_comp_isr+0x148>)
 8000582:	0069      	lsls	r1, r5, #1
 8000584:	5a88      	ldrh	r0, [r1, r2]
 8000586:	4343      	muls	r3, r0
 8000588:	0098      	lsls	r0, r3, #2
 800058a:	18c3      	adds	r3, r0, r3
 800058c:	0118      	lsls	r0, r3, #4
 800058e:	1ac0      	subs	r0, r0, r3
 8000590:	0080      	lsls	r0, r0, #2
 8000592:	8813      	ldrh	r3, [r2, #0]
 8000594:	0319      	lsls	r1, r3, #12
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	f002 f84a 	bl	8002630 <__udivsi3>
 800059c:	0064      	lsls	r4, r4, #1
 800059e:	4b48      	ldr	r3, [pc, #288]	; (80006c0 <adc_comp_isr+0x14c>)
 80005a0:	5318      	strh	r0, [r3, r4]
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 80005a2:	b2ec      	uxtb	r4, r5
 80005a4:	2c01      	cmp	r4, #1
 80005a6:	d9e8      	bls.n	800057a <adc_comp_isr+0x6>

    // For Hub : Measured voltage is half of actual
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 80005a8:	2300      	movs	r3, #0
 80005aa:	e006      	b.n	80005ba <adc_comp_isr+0x46>
        batt_voltages[i] = batt_voltages[i] * 2; }
 80005ac:	4944      	ldr	r1, [pc, #272]	; (80006c0 <adc_comp_isr+0x14c>)
 80005ae:	0058      	lsls	r0, r3, #1
 80005b0:	5a42      	ldrh	r2, [r0, r1]
 80005b2:	0052      	lsls	r2, r2, #1
 80005b4:	5242      	strh	r2, [r0, r1]
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 80005b6:	3301      	adds	r3, #1
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d9f6      	bls.n	80005ac <adc_comp_isr+0x38>

    static uint16_t timer = 0;
    static uint8_t state = 0;
    switch(state)
 80005be:	4b41      	ldr	r3, [pc, #260]	; (80006c4 <adc_comp_isr+0x150>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	d86e      	bhi.n	80006a4 <adc_comp_isr+0x130>
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4a3f      	ldr	r2, [pc, #252]	; (80006c8 <adc_comp_isr+0x154>)
 80005ca:	58d3      	ldr	r3, [r2, r3]
 80005cc:	469f      	mov	pc, r3
    {
        case 0:
            plugged_in = true;
            timer = timers_millis();
 80005ce:	f000 fbdb 	bl	8000d88 <timers_millis>
 80005d2:	4b3e      	ldr	r3, [pc, #248]	; (80006cc <adc_comp_isr+0x158>)
 80005d4:	8018      	strh	r0, [r3, #0]
            if(batt_voltages[PWR_VOLTAGE] < batt_voltages[BATT_VOLTAGE])
 80005d6:	4b3a      	ldr	r3, [pc, #232]	; (80006c0 <adc_comp_isr+0x14c>)
 80005d8:	881a      	ldrh	r2, [r3, #0]
 80005da:	885b      	ldrh	r3, [r3, #2]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d264      	bcs.n	80006aa <adc_comp_isr+0x136>
                state = 1;
 80005e0:	4b38      	ldr	r3, [pc, #224]	; (80006c4 <adc_comp_isr+0x150>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	e060      	b.n	80006aa <adc_comp_isr+0x136>
            break;

        case 1:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE])
 80005e8:	4b35      	ldr	r3, [pc, #212]	; (80006c0 <adc_comp_isr+0x14c>)
 80005ea:	881a      	ldrh	r2, [r3, #0]
 80005ec:	885b      	ldrh	r3, [r3, #2]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d903      	bls.n	80005fa <adc_comp_isr+0x86>
                state = 0;
 80005f2:	4b34      	ldr	r3, [pc, #208]	; (80006c4 <adc_comp_isr+0x150>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
 80005f8:	e057      	b.n	80006aa <adc_comp_isr+0x136>
            else if(timers_millis() - timer > 1000)
 80005fa:	f000 fbc5 	bl	8000d88 <timers_millis>
 80005fe:	4b33      	ldr	r3, [pc, #204]	; (80006cc <adc_comp_isr+0x158>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	1ac0      	subs	r0, r0, r3
 8000604:	23fa      	movs	r3, #250	; 0xfa
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4298      	cmp	r0, r3
 800060a:	dd4e      	ble.n	80006aa <adc_comp_isr+0x136>
                state = 2;
 800060c:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <adc_comp_isr+0x150>)
 800060e:	2202      	movs	r2, #2
 8000610:	701a      	strb	r2, [r3, #0]
 8000612:	e04a      	b.n	80006aa <adc_comp_isr+0x136>
            break;
        
        case 2:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE]){
 8000614:	4b2a      	ldr	r3, [pc, #168]	; (80006c0 <adc_comp_isr+0x14c>)
 8000616:	881a      	ldrh	r2, [r3, #0]
 8000618:	885b      	ldrh	r3, [r3, #2]
 800061a:	429a      	cmp	r2, r3
 800061c:	d907      	bls.n	800062e <adc_comp_isr+0xba>
                timer = timers_millis(); 
 800061e:	f000 fbb3 	bl	8000d88 <timers_millis>
 8000622:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <adc_comp_isr+0x158>)
 8000624:	8018      	strh	r0, [r3, #0]
                state = 4;}
 8000626:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <adc_comp_isr+0x150>)
 8000628:	2204      	movs	r2, #4
 800062a:	701a      	strb	r2, [r3, #0]
 800062c:	e03d      	b.n	80006aa <adc_comp_isr+0x136>
            else if(timers_millis() - timer > 10000){
 800062e:	f000 fbab 	bl	8000d88 <timers_millis>
 8000632:	4b26      	ldr	r3, [pc, #152]	; (80006cc <adc_comp_isr+0x158>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	1ac0      	subs	r0, r0, r3
 8000638:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <adc_comp_isr+0x15c>)
 800063a:	4298      	cmp	r0, r3
 800063c:	dd35      	ble.n	80006aa <adc_comp_isr+0x136>
                state = 3;
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <adc_comp_isr+0x150>)
 8000640:	2203      	movs	r2, #3
 8000642:	701a      	strb	r2, [r3, #0]
                plugged_in = false;
                log_printf("Plugged Out\n");}
 8000644:	4823      	ldr	r0, [pc, #140]	; (80006d4 <adc_comp_isr+0x160>)
 8000646:	f000 f8d7 	bl	80007f8 <log_printf>
 800064a:	e02e      	b.n	80006aa <adc_comp_isr+0x136>
            break;
        
        case 3:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE]){
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <adc_comp_isr+0x14c>)
 800064e:	881a      	ldrh	r2, [r3, #0]
 8000650:	885b      	ldrh	r3, [r3, #2]
 8000652:	429a      	cmp	r2, r3
 8000654:	d929      	bls.n	80006aa <adc_comp_isr+0x136>
                timer = timers_millis();
 8000656:	f000 fb97 	bl	8000d88 <timers_millis>
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <adc_comp_isr+0x158>)
 800065c:	8018      	strh	r0, [r3, #0]
                state = 0;
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <adc_comp_isr+0x150>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
                log_printf("Plugged In\n");}
 8000664:	481c      	ldr	r0, [pc, #112]	; (80006d8 <adc_comp_isr+0x164>)
 8000666:	f000 f8c7 	bl	80007f8 <log_printf>
 800066a:	e01e      	b.n	80006aa <adc_comp_isr+0x136>
            break;

        case 4:
            if(batt_voltages[PWR_VOLTAGE] < batt_voltages[BATT_VOLTAGE]){
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <adc_comp_isr+0x14c>)
 800066e:	881a      	ldrh	r2, [r3, #0]
 8000670:	885b      	ldrh	r3, [r3, #2]
 8000672:	429a      	cmp	r2, r3
 8000674:	d203      	bcs.n	800067e <adc_comp_isr+0x10a>
                state = 2; }
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <adc_comp_isr+0x150>)
 8000678:	2202      	movs	r2, #2
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e015      	b.n	80006aa <adc_comp_isr+0x136>
            else if(timers_millis() - timer > 1000){
 800067e:	f000 fb83 	bl	8000d88 <timers_millis>
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <adc_comp_isr+0x158>)
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	1ac0      	subs	r0, r0, r3
 8000688:	23fa      	movs	r3, #250	; 0xfa
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	4298      	cmp	r0, r3
 800068e:	dd0c      	ble.n	80006aa <adc_comp_isr+0x136>
                state = 0;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <adc_comp_isr+0x150>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
                batt_rst_seq = true; 
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <adc_comp_isr+0x168>)
 8000698:	3201      	adds	r2, #1
 800069a:	701a      	strb	r2, [r3, #0]
                log_printf("Reset Sequence\n"); }
 800069c:	4810      	ldr	r0, [pc, #64]	; (80006e0 <adc_comp_isr+0x16c>)
 800069e:	f000 f8ab 	bl	80007f8 <log_printf>
 80006a2:	e002      	b.n	80006aa <adc_comp_isr+0x136>
            break;

        default:
            log_printf("Error ADC ISR Defaut Case\n");
 80006a4:	480f      	ldr	r0, [pc, #60]	; (80006e4 <adc_comp_isr+0x170>)
 80006a6:	f000 f8a7 	bl	80007f8 <log_printf>
            break;
    }

    // log_printf("ADC ISR %u %u %u V\n",state, batt_voltages[0], batt_voltages[1]);

    ADC_ISR(ADC1) = 0xFFFFFFFF;
 80006aa:	480f      	ldr	r0, [pc, #60]	; (80006e8 <adc_comp_isr+0x174>)
 80006ac:	2301      	movs	r3, #1
 80006ae:	425b      	negs	r3, r3
 80006b0:	6003      	str	r3, [r0, #0]
    adc_start_conversion_regular(ADC1);
 80006b2:	f000 fc3b 	bl	8000f2c <adc_start_conversion_regular>
}
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	1ff80078 	.word	0x1ff80078
 80006bc:	200001d8 	.word	0x200001d8
 80006c0:	200001e0 	.word	0x200001e0
 80006c4:	200001e4 	.word	0x200001e4
 80006c8:	08002aa4 	.word	0x08002aa4
 80006cc:	200001e6 	.word	0x200001e6
 80006d0:	00002710 	.word	0x00002710
 80006d4:	08002a5c 	.word	0x08002a5c
 80006d8:	08002a6c 	.word	0x08002a6c
 80006dc:	200001de 	.word	0x200001de
 80006e0:	08002a78 	.word	0x08002a78
 80006e4:	08002a88 	.word	0x08002a88
 80006e8:	40012400 	.word	0x40012400

080006ec <usart_setup>:
}

#ifdef DEBUG

static void usart_setup(void) 
{
 80006ec:	b570      	push	{r4, r5, r6, lr}
    rcc_periph_clock_enable(RCC_GPIOA);
 80006ee:	20b0      	movs	r0, #176	; 0xb0
 80006f0:	00c0      	lsls	r0, r0, #3
 80006f2:	f000 fe1b 	bl	800132c <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOB);
 80006f6:	4826      	ldr	r0, [pc, #152]	; (8000790 <usart_setup+0xa4>)
 80006f8:	f000 fe18 	bl	800132c <rcc_periph_clock_enable>

	gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_TX);
 80006fc:	2580      	movs	r5, #128	; 0x80
 80006fe:	00ad      	lsls	r5, r5, #2
 8000700:	24a0      	movs	r4, #160	; 0xa0
 8000702:	05e4      	lsls	r4, r4, #23
 8000704:	002b      	movs	r3, r5
 8000706:	2200      	movs	r2, #0
 8000708:	2102      	movs	r1, #2
 800070a:	0020      	movs	r0, r4
 800070c:	f000 fc3d 	bl	8000f8a <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_RX);
 8000710:	2680      	movs	r6, #128	; 0x80
 8000712:	00f6      	lsls	r6, r6, #3
 8000714:	0033      	movs	r3, r6
 8000716:	2200      	movs	r2, #0
 8000718:	2102      	movs	r1, #2
 800071a:	0020      	movs	r0, r4
 800071c:	f000 fc35 	bl	8000f8a <gpio_mode_setup>
    
    gpio_set_output_options(SPF_USART_TX_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, SPF_USART_TX);
 8000720:	002b      	movs	r3, r5
 8000722:	2200      	movs	r2, #0
 8000724:	2100      	movs	r1, #0
 8000726:	0020      	movs	r0, r4
 8000728:	f000 fc4f 	bl	8000fca <gpio_set_output_options>

    gpio_set_af(SPF_USART_TX_PORT, SPF_USART_AF, SPF_USART_TX);
 800072c:	002a      	movs	r2, r5
 800072e:	2104      	movs	r1, #4
 8000730:	0020      	movs	r0, r4
 8000732:	f000 fc68 	bl	8001006 <gpio_set_af>
    gpio_set_af(SPF_USART_RX_PORT, SPF_USART_AF, SPF_USART_RX);
 8000736:	0032      	movs	r2, r6
 8000738:	2104      	movs	r1, #4
 800073a:	0020      	movs	r0, r4
 800073c:	f000 fc63 	bl	8001006 <gpio_set_af>
    
	rcc_periph_clock_enable(SPF_USART_RCC);
 8000740:	4814      	ldr	r0, [pc, #80]	; (8000794 <usart_setup+0xa8>)
 8000742:	f000 fdf3 	bl	800132c <rcc_periph_clock_enable>
    rcc_periph_reset_pulse(SPF_USART_RCC_RST);
 8000746:	4814      	ldr	r0, [pc, #80]	; (8000798 <usart_setup+0xac>)
 8000748:	f000 fdfe 	bl	8001348 <rcc_periph_reset_pulse>
	usart_disable(SPF_USART);
 800074c:	4c13      	ldr	r4, [pc, #76]	; (800079c <usart_setup+0xb0>)
 800074e:	0020      	movs	r0, r4
 8000750:	f000 fe95 	bl	800147e <usart_disable>
	usart_set_baudrate(SPF_USART, SPF_USART_BAUD);
 8000754:	21e1      	movs	r1, #225	; 0xe1
 8000756:	0249      	lsls	r1, r1, #9
 8000758:	0020      	movs	r0, r4
 800075a:	f000 fe33 	bl	80013c4 <usart_set_baudrate>
	usart_set_databits(SPF_USART, 8);
 800075e:	2108      	movs	r1, #8
 8000760:	0020      	movs	r0, r4
 8000762:	f000 fe5b 	bl	800141c <usart_set_databits>
	usart_set_stopbits(SPF_USART,USART_STOPBITS_1);
 8000766:	2100      	movs	r1, #0
 8000768:	0020      	movs	r0, r4
 800076a:	f000 fe65 	bl	8001438 <usart_set_stopbits>
	usart_set_mode(SPF_USART, USART_MODE_TX_RX);
 800076e:	210c      	movs	r1, #12
 8000770:	0020      	movs	r0, r4
 8000772:	f000 fe71 	bl	8001458 <usart_set_mode>
	usart_set_parity(SPF_USART, USART_PARITY_NONE);
 8000776:	2100      	movs	r1, #0
 8000778:	0020      	movs	r0, r4
 800077a:	f000 fe65 	bl	8001448 <usart_set_parity>
	usart_set_flow_control(SPF_USART, USART_FLOWCONTROL_NONE);
 800077e:	2100      	movs	r1, #0
 8000780:	0020      	movs	r0, r4
 8000782:	f000 fe6f 	bl	8001464 <usart_set_flow_control>
	usart_enable(SPF_USART);
 8000786:	0020      	movs	r0, r4
 8000788:	f000 fe74 	bl	8001474 <usart_enable>
}
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	00000581 	.word	0x00000581
 8000794:	0000068e 	.word	0x0000068e
 8000798:	0000048e 	.word	0x0000048e
 800079c:	40013800 	.word	0x40013800

080007a0 <_putchar_mem>:
{
 80007a0:	b510      	push	{r4, lr}
 80007a2:	0001      	movs	r1, r0
	mem_eeprom_write_byte((uint32_t)&(logger->log[write_index]), character);
 80007a4:	4c06      	ldr	r4, [pc, #24]	; (80007c0 <_putchar_mem+0x20>)
 80007a6:	8820      	ldrh	r0, [r4, #0]
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <_putchar_mem+0x24>)
 80007aa:	469c      	mov	ip, r3
 80007ac:	4460      	add	r0, ip
 80007ae:	f000 f89b 	bl	80008e8 <mem_eeprom_write_byte>
	write_index = (write_index + 1)%EEPROM_LOG_SIZE;
 80007b2:	8823      	ldrh	r3, [r4, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	059b      	lsls	r3, r3, #22
 80007b8:	0d9b      	lsrs	r3, r3, #22
 80007ba:	8023      	strh	r3, [r4, #0]
}
 80007bc:	bd10      	pop	{r4, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	200001ea 	.word	0x200001ea
 80007c4:	08080104 	.word	0x08080104

080007c8 <_putchar_spf>:

static void _putchar_spf(char character)
{
 80007c8:	b510      	push	{r4, lr}
	usart_send_blocking(SPF_USART, character);	
 80007ca:	0001      	movs	r1, r0
 80007cc:	4801      	ldr	r0, [pc, #4]	; (80007d4 <_putchar_spf+0xc>)
 80007ce:	f000 fe5b 	bl	8001488 <usart_send_blocking>
}
 80007d2:	bd10      	pop	{r4, pc}
 80007d4:	40013800 	.word	0x40013800

080007d8 <_putchar_usb>:

#ifdef _HUB
static void _putchar_usb(char character)
{
 80007d8:	b510      	push	{r4, lr}
	cusb_send(character);
 80007da:	f7ff fdcf 	bl	800037c <cusb_send>
}
 80007de:	bd10      	pop	{r4, pc}

080007e0 <_putchar_main>:
{
 80007e0:	b510      	push	{r4, lr}
 80007e2:	0004      	movs	r4, r0
	_putchar_mem(character);
 80007e4:	f7ff ffdc 	bl	80007a0 <_putchar_mem>
	_putchar_spf(character);
 80007e8:	0020      	movs	r0, r4
 80007ea:	f7ff ffed 	bl	80007c8 <_putchar_spf>
	_putchar_usb(character);
 80007ee:	0020      	movs	r0, r4
 80007f0:	f7ff fff2 	bl	80007d8 <_putchar_usb>
}
 80007f4:	bd10      	pop	{r4, pc}
	...

080007f8 <log_printf>:
{
 80007f8:	b40f      	push	{r0, r1, r2, r3}
 80007fa:	b500      	push	{lr}
 80007fc:	b083      	sub	sp, #12
 80007fe:	aa04      	add	r2, sp, #16
 8000800:	ca02      	ldmia	r2!, {r1}
	va_start(va, format);
 8000802:	9201      	str	r2, [sp, #4]
	fnprintf(_putchar_main, format, va);
 8000804:	4806      	ldr	r0, [pc, #24]	; (8000820 <log_printf+0x28>)
 8000806:	f000 f917 	bl	8000a38 <fnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {}
 800080a:	2140      	movs	r1, #64	; 0x40
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <log_printf+0x2c>)
 800080e:	f000 fe52 	bl	80014b6 <usart_get_flag>
 8000812:	2800      	cmp	r0, #0
 8000814:	d0f9      	beq.n	800080a <log_printf+0x12>
}
 8000816:	b003      	add	sp, #12
 8000818:	bc08      	pop	{r3}
 800081a:	b004      	add	sp, #16
 800081c:	4718      	bx	r3
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	080007e1 	.word	0x080007e1
 8000824:	40013800 	.word	0x40013800

08000828 <log_init>:
{	
 8000828:	b510      	push	{r4, lr}
	write_index = logger->write_index;
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <log_init+0x2c>)
 800082c:	885b      	ldrh	r3, [r3, #2]
 800082e:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <log_init+0x30>)
 8000830:	8013      	strh	r3, [r2, #0]
	read_index 	= write_index;
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <log_init+0x34>)
 8000834:	8013      	strh	r3, [r2, #0]
	log_printf("\n\nLog Init\n----------------\n");
 8000836:	480a      	ldr	r0, [pc, #40]	; (8000860 <log_init+0x38>)
 8000838:	f7ff ffde 	bl	80007f8 <log_printf>
	cusb_init();
 800083c:	f7ff fd5c 	bl	80002f8 <cusb_init>
    usart_setup();
 8000840:	f7ff ff54 	bl	80006ec <usart_setup>
	for(int i = 0; i < 100000; i++){__asm__("nop");};
 8000844:	2300      	movs	r3, #0
 8000846:	4a07      	ldr	r2, [pc, #28]	; (8000864 <log_init+0x3c>)
 8000848:	4293      	cmp	r3, r2
 800084a:	dc02      	bgt.n	8000852 <log_init+0x2a>
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	3301      	adds	r3, #1
 8000850:	e7f9      	b.n	8000846 <log_init+0x1e>
}
 8000852:	bd10      	pop	{r4, pc}
 8000854:	08080100 	.word	0x08080100
 8000858:	200001ea 	.word	0x200001ea
 800085c:	200001e8 	.word	0x200001e8
 8000860:	08002ab8 	.word	0x08002ab8
 8000864:	0001869f 	.word	0x0001869f

08000868 <serial_printf>:
{
 8000868:	b40f      	push	{r0, r1, r2, r3}
 800086a:	b500      	push	{lr}
 800086c:	b083      	sub	sp, #12
 800086e:	aa04      	add	r2, sp, #16
 8000870:	ca02      	ldmia	r2!, {r1}
	va_start(va, format);
 8000872:	9201      	str	r2, [sp, #4]
	fnprintf(_putchar_spf, format, va);
 8000874:	4806      	ldr	r0, [pc, #24]	; (8000890 <serial_printf+0x28>)
 8000876:	f000 f8df 	bl	8000a38 <fnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {}
 800087a:	2140      	movs	r1, #64	; 0x40
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <serial_printf+0x2c>)
 800087e:	f000 fe1a 	bl	80014b6 <usart_get_flag>
 8000882:	2800      	cmp	r0, #0
 8000884:	d0f9      	beq.n	800087a <serial_printf+0x12>
}
 8000886:	b003      	add	sp, #12
 8000888:	bc08      	pop	{r3}
 800088a:	b004      	add	sp, #16
 800088c:	4718      	bx	r3
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	080007c9 	.word	0x080007c9
 8000894:	40013800 	.word	0x40013800

08000898 <log_read>:
{
 8000898:	b570      	push	{r4, r5, r6, lr}
	read_index = (read_index + 1) % logger->size;
 800089a:	4d09      	ldr	r5, [pc, #36]	; (80008c0 <log_read+0x28>)
 800089c:	8828      	ldrh	r0, [r5, #0]
 800089e:	3001      	adds	r0, #1
 80008a0:	4c08      	ldr	r4, [pc, #32]	; (80008c4 <log_read+0x2c>)
 80008a2:	8821      	ldrh	r1, [r4, #0]
 80008a4:	f002 f834 	bl	8002910 <__aeabi_idivmod>
 80008a8:	b289      	uxth	r1, r1
 80008aa:	8029      	strh	r1, [r5, #0]
	if(read_index == logger->write_index)
 80008ac:	8863      	ldrh	r3, [r4, #2]
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d003      	beq.n	80008ba <log_read+0x22>
		byte = logger->log[read_index];
 80008b2:	46a4      	mov	ip, r4
 80008b4:	4461      	add	r1, ip
 80008b6:	7908      	ldrb	r0, [r1, #4]
}
 80008b8:	bd70      	pop	{r4, r5, r6, pc}
		byte = 0;
 80008ba:	2000      	movs	r0, #0
 80008bc:	e7fc      	b.n	80008b8 <log_read+0x20>
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	200001e8 	.word	0x200001e8
 80008c4:	08080100 	.word	0x08080100

080008c8 <log_read_reset>:
	read_index = logger->write_index;
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <log_read_reset+0xc>)
 80008ca:	885a      	ldrh	r2, [r3, #2]
 80008cc:	4b02      	ldr	r3, [pc, #8]	; (80008d8 <log_read_reset+0x10>)
 80008ce:	801a      	strh	r2, [r3, #0]
}
 80008d0:	4770      	bx	lr
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	08080100 	.word	0x08080100
 80008d8:	200001e8 	.word	0x200001e8

080008dc <log_size>:
	return logger->size;
 80008dc:	4b01      	ldr	r3, [pc, #4]	; (80008e4 <log_size+0x8>)
 80008de:	8818      	ldrh	r0, [r3, #0]
}
 80008e0:	4770      	bx	lr
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	08080100 	.word	0x08080100

080008e8 <mem_eeprom_write_byte>:

    return true;
}

bool mem_eeprom_write_byte(uint32_t address, uint8_t data)
{
 80008e8:	b570      	push	{r4, r5, r6, lr}
 80008ea:	0004      	movs	r4, r0
 80008ec:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <mem_eeprom_write_byte+0x4c>)
 80008f0:	18c2      	adds	r2, r0, r3
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	011b      	lsls	r3, r3, #4
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d216      	bcs.n	8000928 <mem_eeprom_write_byte+0x40>
    {
        serial_printf("Mem Log EEPROM Address out of bounds\n");
        return false;
    }

    flash_unlock_pecr();
 80008fa:	f000 fb2d 	bl	8000f58 <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <mem_eeprom_write_byte+0x50>)
 8000900:	6813      	ldr	r3, [r2, #0]
 8000902:	490e      	ldr	r1, [pc, #56]	; (800093c <mem_eeprom_write_byte+0x54>)
 8000904:	400b      	ands	r3, r1
 8000906:	6013      	str	r3, [r2, #0]

    MMIO8(address) = data;
 8000908:	7025      	strb	r5, [r4, #0]

    while (FLASH_SR & FLASH_SR_BSY);
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <mem_eeprom_write_byte+0x58>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	07db      	lsls	r3, r3, #31
 8000910:	d4fb      	bmi.n	800090a <mem_eeprom_write_byte+0x22>
    if (FLASH_SR & FLASH_SR_EOP)
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <mem_eeprom_write_byte+0x58>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	079b      	lsls	r3, r3, #30
 8000918:	d502      	bpl.n	8000920 <mem_eeprom_write_byte+0x38>
        FLASH_SR = FLASH_SR_EOP;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <mem_eeprom_write_byte+0x58>)
 800091c:	2202      	movs	r2, #2
 800091e:	601a      	str	r2, [r3, #0]

    flash_lock_pecr();
 8000920:	f000 fb26 	bl	8000f70 <flash_lock_pecr>

    return true;
 8000924:	2001      	movs	r0, #1
}
 8000926:	bd70      	pop	{r4, r5, r6, pc}
        serial_printf("Mem Log EEPROM Address out of bounds\n");
 8000928:	4806      	ldr	r0, [pc, #24]	; (8000944 <mem_eeprom_write_byte+0x5c>)
 800092a:	f7ff ff9d 	bl	8000868 <serial_printf>
        return false;
 800092e:	2000      	movs	r0, #0
 8000930:	e7f9      	b.n	8000926 <mem_eeprom_write_byte+0x3e>
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	f7f80000 	.word	0xf7f80000
 8000938:	40022004 	.word	0x40022004
 800093c:	fffffeff 	.word	0xfffffeff
 8000940:	40022018 	.word	0x40022018
 8000944:	08002ad8 	.word	0x08002ad8

08000948 <_atoi>:
    return (ch >= '0') && (ch <= '9');
}

// internal ASCII string to uint32_t conversion
static uint32_t _atoi(const char **str)
{
 8000948:	0001      	movs	r1, r0
    uint32_t i = 0U;
 800094a:	2000      	movs	r0, #0
    while (_is_digit(**str))
 800094c:	680a      	ldr	r2, [r1, #0]
 800094e:	7813      	ldrb	r3, [r2, #0]
    return (ch >= '0') && (ch <= '9');
 8000950:	3b30      	subs	r3, #48	; 0x30
 8000952:	b2db      	uxtb	r3, r3
    while (_is_digit(**str))
 8000954:	2b09      	cmp	r3, #9
 8000956:	d808      	bhi.n	800096a <_atoi+0x22>
    {
        i = i * 10U + (uint32_t)(*((*str)++) - '0');
 8000958:	0083      	lsls	r3, r0, #2
 800095a:	181b      	adds	r3, r3, r0
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	1c50      	adds	r0, r2, #1
 8000960:	6008      	str	r0, [r1, #0]
 8000962:	7810      	ldrb	r0, [r2, #0]
 8000964:	18c0      	adds	r0, r0, r3
 8000966:	3830      	subs	r0, #48	; 0x30
 8000968:	e7f0      	b.n	800094c <_atoi+0x4>
    }
    return i;
}
 800096a:	4770      	bx	lr

0800096c <_ntoa_format>:

// internal itoa format
static uint32_t _ntoa_format(out_fct_type out, uint32_t value, uint32_t base, uint32_t width, bool negative)
{
 800096c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800096e:	46d6      	mov	lr, sl
 8000970:	464f      	mov	r7, r9
 8000972:	4646      	mov	r6, r8
 8000974:	b5c0      	push	{r6, r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	4680      	mov	r8, r0
 800097a:	000c      	movs	r4, r1
 800097c:	0015      	movs	r5, r2
 800097e:	469a      	mov	sl, r3
 8000980:	ab10      	add	r3, sp, #64	; 0x40
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4699      	mov	r9, r3
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    uint32_t len = 0;
 8000986:	2600      	movs	r6, #0
 8000988:	e00e      	b.n	80009a8 <_ntoa_format+0x3c>

    // Digits to char
    do
    {
        const char digit = (char)(value % base);
        buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 800098a:	3130      	adds	r1, #48	; 0x30
 800098c:	b2c9      	uxtb	r1, r1
 800098e:	1c77      	adds	r7, r6, #1
 8000990:	466b      	mov	r3, sp
 8000992:	5599      	strb	r1, [r3, r6]
        value /= base;
 8000994:	0029      	movs	r1, r5
 8000996:	0020      	movs	r0, r4
 8000998:	f001 fe4a 	bl	8002630 <__udivsi3>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800099c:	42ac      	cmp	r4, r5
 800099e:	d311      	bcc.n	80009c4 <_ntoa_format+0x58>
 80009a0:	2f1f      	cmp	r7, #31
 80009a2:	d80f      	bhi.n	80009c4 <_ntoa_format+0x58>
        buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 80009a4:	003e      	movs	r6, r7
        value /= base;
 80009a6:	0004      	movs	r4, r0
        const char digit = (char)(value % base);
 80009a8:	0029      	movs	r1, r5
 80009aa:	0020      	movs	r0, r4
 80009ac:	f001 fec6 	bl	800273c <__aeabi_uidivmod>
 80009b0:	b2c9      	uxtb	r1, r1
        buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 80009b2:	2909      	cmp	r1, #9
 80009b4:	d9e9      	bls.n	800098a <_ntoa_format+0x1e>
 80009b6:	3137      	adds	r1, #55	; 0x37
 80009b8:	b2c9      	uxtb	r1, r1
 80009ba:	e7e8      	b.n	800098e <_ntoa_format+0x22>

    // pad leading zeros
    while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
    {
        buf[len++] = '0';
 80009bc:	2330      	movs	r3, #48	; 0x30
 80009be:	466a      	mov	r2, sp
 80009c0:	55d3      	strb	r3, [r2, r7]
 80009c2:	3701      	adds	r7, #1
    while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80009c4:	4557      	cmp	r7, sl
 80009c6:	d201      	bcs.n	80009cc <_ntoa_format+0x60>
 80009c8:	2f1f      	cmp	r7, #31
 80009ca:	d9f7      	bls.n	80009bc <_ntoa_format+0x50>
    }

    // Base specifier
    if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80009cc:	2d10      	cmp	r5, #16
 80009ce:	d016      	beq.n	80009fe <_ntoa_format+0x92>
    {
        buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80009d0:	2d02      	cmp	r5, #2
 80009d2:	d01b      	beq.n	8000a0c <_ntoa_format+0xa0>
    {
        buf[len++] = 'b';
    }
    if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80009d4:	2d10      	cmp	r5, #16
 80009d6:	d020      	beq.n	8000a1a <_ntoa_format+0xae>
 80009d8:	2d02      	cmp	r5, #2
 80009da:	d01e      	beq.n	8000a1a <_ntoa_format+0xae>
    {
        buf[len++] = '0';
    }

    if (negative && (len < PRINTF_NTOA_BUFFER_SIZE))
 80009dc:	464b      	mov	r3, r9
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d005      	beq.n	80009ee <_ntoa_format+0x82>
 80009e2:	2f1f      	cmp	r7, #31
 80009e4:	d803      	bhi.n	80009ee <_ntoa_format+0x82>
    {
        buf[len++] = '-';
 80009e6:	232d      	movs	r3, #45	; 0x2d
 80009e8:	466a      	mov	r2, sp
 80009ea:	55d3      	strb	r3, [r2, r7]
 80009ec:	3701      	adds	r7, #1
    }

    // reverse string and write out
    uint32_t i = len;
 80009ee:	003c      	movs	r4, r7
    while (i)
 80009f0:	2c00      	cmp	r4, #0
 80009f2:	d019      	beq.n	8000a28 <_ntoa_format+0xbc>
    {
        out(buf[--i]);
 80009f4:	3c01      	subs	r4, #1
 80009f6:	466b      	mov	r3, sp
 80009f8:	5d18      	ldrb	r0, [r3, r4]
 80009fa:	47c0      	blx	r8
 80009fc:	e7f8      	b.n	80009f0 <_ntoa_format+0x84>
    if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80009fe:	2f1f      	cmp	r7, #31
 8000a00:	d8e6      	bhi.n	80009d0 <_ntoa_format+0x64>
        buf[len++] = 'X';
 8000a02:	2358      	movs	r3, #88	; 0x58
 8000a04:	466a      	mov	r2, sp
 8000a06:	55d3      	strb	r3, [r2, r7]
 8000a08:	3701      	adds	r7, #1
 8000a0a:	e7e3      	b.n	80009d4 <_ntoa_format+0x68>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8000a0c:	2f1f      	cmp	r7, #31
 8000a0e:	d8e1      	bhi.n	80009d4 <_ntoa_format+0x68>
        buf[len++] = 'b';
 8000a10:	2362      	movs	r3, #98	; 0x62
 8000a12:	466a      	mov	r2, sp
 8000a14:	55d3      	strb	r3, [r2, r7]
 8000a16:	3701      	adds	r7, #1
 8000a18:	e7dc      	b.n	80009d4 <_ntoa_format+0x68>
    if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8000a1a:	2f1f      	cmp	r7, #31
 8000a1c:	d8de      	bhi.n	80009dc <_ntoa_format+0x70>
        buf[len++] = '0';
 8000a1e:	2330      	movs	r3, #48	; 0x30
 8000a20:	466a      	mov	r2, sp
 8000a22:	55d3      	strb	r3, [r2, r7]
 8000a24:	3701      	adds	r7, #1
 8000a26:	e7d9      	b.n	80009dc <_ntoa_format+0x70>
    }
    return len;
}
 8000a28:	0038      	movs	r0, r7
 8000a2a:	b008      	add	sp, #32
 8000a2c:	bce0      	pop	{r5, r6, r7}
 8000a2e:	46ba      	mov	sl, r7
 8000a30:	46b1      	mov	r9, r6
 8000a32:	46a8      	mov	r8, r5
 8000a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000a38 <fnprintf>:

uint32_t fnprintf(out_fct_type out, const char *format, va_list va)
{
 8000a38:	b570      	push	{r4, r5, r6, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	0005      	movs	r5, r0
 8000a3e:	9103      	str	r1, [sp, #12]
 8000a40:	9202      	str	r2, [sp, #8]
    uint32_t width;
    uint32_t idx = 0U;
 8000a42:	2400      	movs	r4, #0

    while (*format)
 8000a44:	e004      	b.n	8000a50 <fnprintf+0x18>
            format++;
        }
        else
        {
            // Just print char
            out(*format);
 8000a46:	47a8      	blx	r5
            idx++;
 8000a48:	3401      	adds	r4, #1
            format++;
 8000a4a:	9b03      	ldr	r3, [sp, #12]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	9303      	str	r3, [sp, #12]
    while (*format)
 8000a50:	9b03      	ldr	r3, [sp, #12]
 8000a52:	7818      	ldrb	r0, [r3, #0]
 8000a54:	2800      	cmp	r0, #0
 8000a56:	d100      	bne.n	8000a5a <fnprintf+0x22>
 8000a58:	e08c      	b.n	8000b74 <fnprintf+0x13c>
        if (*format == '%')
 8000a5a:	2825      	cmp	r0, #37	; 0x25
 8000a5c:	d1f3      	bne.n	8000a46 <fnprintf+0xe>
            format++;
 8000a5e:	1c5a      	adds	r2, r3, #1
 8000a60:	9203      	str	r2, [sp, #12]
            continue;
        }

        // evaluate width field
        width = 0U;
        if (_is_digit(*format))
 8000a62:	785b      	ldrb	r3, [r3, #1]
    return (ch >= '0') && (ch <= '9');
 8000a64:	3b30      	subs	r3, #48	; 0x30
 8000a66:	b2db      	uxtb	r3, r3
        if (_is_digit(*format))
 8000a68:	2b09      	cmp	r3, #9
 8000a6a:	d90b      	bls.n	8000a84 <fnprintf+0x4c>
        width = 0U;
 8000a6c:	2300      	movs	r3, #0
        {
            width = _atoi(&format);
        }

        // evaluate specifier
        switch (*format)
 8000a6e:	9a03      	ldr	r2, [sp, #12]
 8000a70:	7810      	ldrb	r0, [r2, #0]
 8000a72:	0002      	movs	r2, r0
 8000a74:	3a25      	subs	r2, #37	; 0x25
 8000a76:	b2d1      	uxtb	r1, r2
 8000a78:	2953      	cmp	r1, #83	; 0x53
 8000a7a:	d875      	bhi.n	8000b68 <fnprintf+0x130>
 8000a7c:	008a      	lsls	r2, r1, #2
 8000a7e:	493f      	ldr	r1, [pc, #252]	; (8000b7c <fnprintf+0x144>)
 8000a80:	588a      	ldr	r2, [r1, r2]
 8000a82:	4697      	mov	pc, r2
            width = _atoi(&format);
 8000a84:	a803      	add	r0, sp, #12
 8000a86:	f7ff ff5f 	bl	8000948 <_atoi>
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	e7ef      	b.n	8000a6e <fnprintf+0x36>
        case 'o':
        case 'b':
        {
            // set the base
            uint32_t base;
            if (*format == 'x' || *format == 'X')
 8000a8e:	2878      	cmp	r0, #120	; 0x78
 8000a90:	d009      	beq.n	8000aa6 <fnprintf+0x6e>
 8000a92:	2858      	cmp	r0, #88	; 0x58
 8000a94:	d01d      	beq.n	8000ad2 <fnprintf+0x9a>
            {
                base = 16U;
            }
            else if (*format == 'o')
 8000a96:	286f      	cmp	r0, #111	; 0x6f
 8000a98:	d01d      	beq.n	8000ad6 <fnprintf+0x9e>
            {
                base = 8U;
            }
            else if (*format == 'b')
 8000a9a:	2862      	cmp	r0, #98	; 0x62
 8000a9c:	d001      	beq.n	8000aa2 <fnprintf+0x6a>
            {
                base = 2U;
            }
            else
            {
                base = 10U;
 8000a9e:	220a      	movs	r2, #10
 8000aa0:	e002      	b.n	8000aa8 <fnprintf+0x70>
                base = 2U;
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	e000      	b.n	8000aa8 <fnprintf+0x70>
                base = 16U;
 8000aa6:	2210      	movs	r2, #16
            }

            // convert integer
            if ((*format == 'i') || (*format == 'd'))
 8000aa8:	2869      	cmp	r0, #105	; 0x69
 8000aaa:	d001      	beq.n	8000ab0 <fnprintf+0x78>
 8000aac:	2864      	cmp	r0, #100	; 0x64
 8000aae:	d114      	bne.n	8000ada <fnprintf+0xa2>
            {
                int32_t val = (int32_t)va_arg(va, int);
 8000ab0:	9902      	ldr	r1, [sp, #8]
 8000ab2:	1d08      	adds	r0, r1, #4
 8000ab4:	9002      	str	r0, [sp, #8]
 8000ab6:	6808      	ldr	r0, [r1, #0]
                idx += _ntoa_format(out, (val < 0)? (0-val) : val, base, width, (val < 0)? true : false);
 8000ab8:	17c6      	asrs	r6, r0, #31
 8000aba:	1981      	adds	r1, r0, r6
 8000abc:	4071      	eors	r1, r6
 8000abe:	0fc0      	lsrs	r0, r0, #31
 8000ac0:	9000      	str	r0, [sp, #0]
 8000ac2:	0028      	movs	r0, r5
 8000ac4:	f7ff ff52 	bl	800096c <_ntoa_format>
 8000ac8:	1824      	adds	r4, r4, r0
            }
            else
            {
                idx += _ntoa_format(out, va_arg(va, int), base, width, false);
            }
            format++;
 8000aca:	9b03      	ldr	r3, [sp, #12]
 8000acc:	3301      	adds	r3, #1
 8000ace:	9303      	str	r3, [sp, #12]
            break;
 8000ad0:	e7be      	b.n	8000a50 <fnprintf+0x18>
                base = 16U;
 8000ad2:	2210      	movs	r2, #16
 8000ad4:	e7e8      	b.n	8000aa8 <fnprintf+0x70>
                base = 8U;
 8000ad6:	2208      	movs	r2, #8
 8000ad8:	e7e6      	b.n	8000aa8 <fnprintf+0x70>
                idx += _ntoa_format(out, va_arg(va, int), base, width, false);
 8000ada:	9902      	ldr	r1, [sp, #8]
 8000adc:	1d08      	adds	r0, r1, #4
 8000ade:	9002      	str	r0, [sp, #8]
 8000ae0:	6809      	ldr	r1, [r1, #0]
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	9000      	str	r0, [sp, #0]
 8000ae6:	0028      	movs	r0, r5
 8000ae8:	f7ff ff40 	bl	800096c <_ntoa_format>
 8000aec:	1824      	adds	r4, r4, r0
 8000aee:	e7ec      	b.n	8000aca <fnprintf+0x92>
        }

        case 'c':
        {
            out((char)va_arg(va, int));
 8000af0:	9b02      	ldr	r3, [sp, #8]
 8000af2:	1d1a      	adds	r2, r3, #4
 8000af4:	9202      	str	r2, [sp, #8]
 8000af6:	7818      	ldrb	r0, [r3, #0]
 8000af8:	47a8      	blx	r5
            idx++;
 8000afa:	3401      	adds	r4, #1
            format++;
 8000afc:	9b03      	ldr	r3, [sp, #12]
 8000afe:	3301      	adds	r3, #1
 8000b00:	9303      	str	r3, [sp, #12]
            break;
 8000b02:	e7a5      	b.n	8000a50 <fnprintf+0x18>
        }

        case 's':
        {
            const char *p = va_arg(va, char *);
 8000b04:	9b02      	ldr	r3, [sp, #8]
 8000b06:	1d1a      	adds	r2, r3, #4
 8000b08:	9202      	str	r2, [sp, #8]
 8000b0a:	681e      	ldr	r6, [r3, #0]
    for (s = str; *s && maxsize--; ++s)
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	2280      	movs	r2, #128	; 0x80
 8000b10:	00d2      	lsls	r2, r2, #3
 8000b12:	e001      	b.n	8000b18 <fnprintf+0xe0>
 8000b14:	3301      	adds	r3, #1
 8000b16:	000a      	movs	r2, r1
 8000b18:	7819      	ldrb	r1, [r3, #0]
 8000b1a:	2900      	cmp	r1, #0
 8000b1c:	d002      	beq.n	8000b24 <fnprintf+0xec>
 8000b1e:	1e51      	subs	r1, r2, #1
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	d1f7      	bne.n	8000b14 <fnprintf+0xdc>
            uint32_t l = _strnlen_s(p, PRINTF_MAX_STR_LEN);

            // string output
            while (*p != 0)
 8000b24:	7830      	ldrb	r0, [r6, #0]
 8000b26:	2800      	cmp	r0, #0
 8000b28:	d003      	beq.n	8000b32 <fnprintf+0xfa>
            {
                out(*(p++));
 8000b2a:	3601      	adds	r6, #1
 8000b2c:	47a8      	blx	r5
                idx++;
 8000b2e:	3401      	adds	r4, #1
 8000b30:	e7f8      	b.n	8000b24 <fnprintf+0xec>
            }
            format++;
 8000b32:	9b03      	ldr	r3, [sp, #12]
 8000b34:	3301      	adds	r3, #1
 8000b36:	9303      	str	r3, [sp, #12]
            break;
 8000b38:	e78a      	b.n	8000a50 <fnprintf+0x18>
        }

        case 'p':
        {
            width = sizeof(void *) * 2U;
            idx += _ntoa_format(out, (int32_t)((uintptr_t)va_arg(va, void *)), 16U, width, false);
 8000b3a:	9b02      	ldr	r3, [sp, #8]
 8000b3c:	1d1a      	adds	r2, r3, #4
 8000b3e:	9202      	str	r2, [sp, #8]
 8000b40:	6819      	ldr	r1, [r3, #0]
 8000b42:	2300      	movs	r3, #0
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	3308      	adds	r3, #8
 8000b48:	2210      	movs	r2, #16
 8000b4a:	0028      	movs	r0, r5
 8000b4c:	f7ff ff0e 	bl	800096c <_ntoa_format>
 8000b50:	1824      	adds	r4, r4, r0
            format++;
 8000b52:	9b03      	ldr	r3, [sp, #12]
 8000b54:	3301      	adds	r3, #1
 8000b56:	9303      	str	r3, [sp, #12]
            break;
 8000b58:	e77a      	b.n	8000a50 <fnprintf+0x18>
        }

        case '%':
        {
            out('%');
 8000b5a:	2025      	movs	r0, #37	; 0x25
 8000b5c:	47a8      	blx	r5
            idx++;
 8000b5e:	3401      	adds	r4, #1
            format++;
 8000b60:	9b03      	ldr	r3, [sp, #12]
 8000b62:	3301      	adds	r3, #1
 8000b64:	9303      	str	r3, [sp, #12]
            break;
 8000b66:	e773      	b.n	8000a50 <fnprintf+0x18>
        }

        default:
        {
            out(*format);
 8000b68:	47a8      	blx	r5
            idx++;
 8000b6a:	3401      	adds	r4, #1
            format++;
 8000b6c:	9b03      	ldr	r3, [sp, #12]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	9303      	str	r3, [sp, #12]
            break;
 8000b72:	e76d      	b.n	8000a50 <fnprintf+0x18>
        }
        }
    }
    // return written chars without terminating \0
    return idx;
}
 8000b74:	0020      	movs	r0, r4
 8000b76:	b004      	add	sp, #16
 8000b78:	bd70      	pop	{r4, r5, r6, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	08002b00 	.word	0x08002b00

08000b80 <spi_read_single>:
 * 
 * @param reg Register to read
 * @retval Value read from register
 */
static uint8_t spi_read_single(uint8_t reg)
{
 8000b80:	b570      	push	{r4, r5, r6, lr}
 8000b82:	0004      	movs	r4, r0
  spi_chip_select();
 8000b84:	25a0      	movs	r5, #160	; 0xa0
 8000b86:	05ed      	lsls	r5, r5, #23
 8000b88:	2140      	movs	r1, #64	; 0x40
 8000b8a:	0028      	movs	r0, r5
 8000b8c:	f000 f9fa 	bl	8000f84 <gpio_clear>
  timers_delay_microseconds(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 f8c5 	bl	8000d20 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, reg);                   
 8000b96:	b2a1      	uxth	r1, r4
 8000b98:	4c08      	ldr	r4, [pc, #32]	; (8000bbc <spi_read_single+0x3c>)
 8000b9a:	0020      	movs	r0, r4
 8000b9c:	f000 fbfc 	bl	8001398 <spi_xfer>
  uint8_t in =  spi_xfer(RFM_SPI, 0x00);                   
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	0020      	movs	r0, r4
 8000ba4:	f000 fbf8 	bl	8001398 <spi_xfer>
 8000ba8:	b2c4      	uxtb	r4, r0
    
  spi_chip_deselect(); 
 8000baa:	2140      	movs	r1, #64	; 0x40
 8000bac:	0028      	movs	r0, r5
 8000bae:	f000 f9e7 	bl	8000f80 <gpio_set>
  timers_delay_microseconds(1);
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f000 f8b4 	bl	8000d20 <timers_delay_microseconds>

  return in;
}
 8000bb8:	0020      	movs	r0, r4
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
 8000bbc:	40003800 	.word	0x40003800

08000bc0 <spi_write_single>:
  spi_chip_deselect();     
  timers_delay_microseconds(1);
}

static void spi_write_single(uint8_t reg, uint8_t data)
{
 8000bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc2:	0005      	movs	r5, r0
 8000bc4:	000e      	movs	r6, r1
  // Set MSB for write operation
  uint8_t cmd = 0x80 | reg;
 8000bc6:	2480      	movs	r4, #128	; 0x80
 8000bc8:	4264      	negs	r4, r4
 8000bca:	4304      	orrs	r4, r0
 8000bcc:	b2e4      	uxtb	r4, r4

  spi_chip_select();
 8000bce:	27a0      	movs	r7, #160	; 0xa0
 8000bd0:	05ff      	lsls	r7, r7, #23
 8000bd2:	2140      	movs	r1, #64	; 0x40
 8000bd4:	0038      	movs	r0, r7
 8000bd6:	f000 f9d5 	bl	8000f84 <gpio_clear>
  timers_delay_microseconds(1);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f000 f8a0 	bl	8000d20 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, cmd);                 
 8000be0:	b2a1      	uxth	r1, r4
 8000be2:	4c15      	ldr	r4, [pc, #84]	; (8000c38 <spi_write_single+0x78>)
 8000be4:	0020      	movs	r0, r4
 8000be6:	f000 fbd7 	bl	8001398 <spi_xfer>
  spi_xfer(RFM_SPI, data);             
 8000bea:	b2b1      	uxth	r1, r6
 8000bec:	0020      	movs	r0, r4
 8000bee:	f000 fbd3 	bl	8001398 <spi_xfer>

  spi_chip_deselect(); 
 8000bf2:	2140      	movs	r1, #64	; 0x40
 8000bf4:	0038      	movs	r0, r7
 8000bf6:	f000 f9c3 	bl	8000f80 <gpio_set>
  timers_delay_microseconds(1);
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f000 f890 	bl	8000d20 <timers_delay_microseconds>

  uint8_t curr_data = spi_read_single(reg);
 8000c00:	0028      	movs	r0, r5
 8000c02:	f7ff ffbd 	bl	8000b80 <spi_read_single>
 8000c06:	0004      	movs	r4, r0

  // log_printf("%02x : %02x\n", reg, data);

  if(reg == RFM_REG_12_IRQ_FLAGS)    
 8000c08:	2d12      	cmp	r5, #18
 8000c0a:	d013      	beq.n	8000c34 <spi_write_single+0x74>
    return;

  TIMEOUT(10000, "RFM SPI Write", ((reg << 16) | data), (curr_data == data), ;, timers_delay_microseconds(100); curr_data = spi_read_single(reg););
 8000c0c:	f000 f8c4 	bl	8000d98 <timeout_init>
 8000c10:	042a      	lsls	r2, r5, #16
 8000c12:	4332      	orrs	r2, r6
 8000c14:	4909      	ldr	r1, [pc, #36]	; (8000c3c <spi_write_single+0x7c>)
 8000c16:	480a      	ldr	r0, [pc, #40]	; (8000c40 <spi_write_single+0x80>)
 8000c18:	f000 f8cc 	bl	8000db4 <timeout>
 8000c1c:	2800      	cmp	r0, #0
 8000c1e:	d109      	bne.n	8000c34 <spi_write_single+0x74>
 8000c20:	42b4      	cmp	r4, r6
 8000c22:	d007      	beq.n	8000c34 <spi_write_single+0x74>
 8000c24:	2064      	movs	r0, #100	; 0x64
 8000c26:	f000 f87b 	bl	8000d20 <timers_delay_microseconds>
 8000c2a:	0028      	movs	r0, r5
 8000c2c:	f7ff ffa8 	bl	8000b80 <spi_read_single>
 8000c30:	0004      	movs	r4, r0
 8000c32:	e7ed      	b.n	8000c10 <spi_write_single+0x50>

  // log_printf("%02x : %02x : %02x\n", reg, data, curr_data);
}
 8000c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	40003800 	.word	0x40003800
 8000c3c:	08002c50 	.word	0x08002c50
 8000c40:	00002710 	.word	0x00002710

08000c44 <exti4_15_isr>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void exti4_15_isr(void)
{
 8000c44:	b570      	push	{r4, r5, r6, lr}
  uint16_t timer = timers_micros();
 8000c46:	f000 f881 	bl	8000d4c <timers_micros>
  
  exti_reset_request(RFM_IO_0_EXTI);
 8000c4a:	2480      	movs	r4, #128	; 0x80
 8000c4c:	00e4      	lsls	r4, r4, #3
 8000c4e:	0020      	movs	r0, r4
 8000c50:	f000 f972 	bl	8000f38 <exti_reset_request>
  exti_reset_request(RFM_IO_0_EXTI);
 8000c54:	0020      	movs	r0, r4
 8000c56:	f000 f96f 	bl	8000f38 <exti_reset_request>

  // Store IRQ Flags
  packets_buf[packets_head].flags = get_irq();
 8000c5a:	4d1b      	ldr	r5, [pc, #108]	; (8000cc8 <exti4_15_isr+0x84>)
 8000c5c:	782e      	ldrb	r6, [r5, #0]
  return spi_read_single(RFM_REG_12_IRQ_FLAGS);
 8000c5e:	2012      	movs	r0, #18
 8000c60:	f7ff ff8e 	bl	8000b80 <spi_read_single>
  packets_buf[packets_head].flags = get_irq();
 8000c64:	4c19      	ldr	r4, [pc, #100]	; (8000ccc <exti4_15_isr+0x88>)
 8000c66:	0073      	lsls	r3, r6, #1
 8000c68:	199b      	adds	r3, r3, r6
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	18e3      	adds	r3, r4, r3
 8000c6e:	7418      	strb	r0, [r3, #16]
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 8000c70:	21ff      	movs	r1, #255	; 0xff
 8000c72:	2012      	movs	r0, #18
 8000c74:	f7ff ffa4 	bl	8000bc0 <spi_write_single>
 8000c78:	21ff      	movs	r1, #255	; 0xff
 8000c7a:	2012      	movs	r0, #18
 8000c7c:	f7ff ffa0 	bl	8000bc0 <spi_write_single>
  clear_irq(RFM_IRQ_ALL);
  clear_irq(RFM_IRQ_ALL);

  // Get signal strength
  packets_buf[packets_head].rssi = spi_read_single(RFM_REG_1A_PKT_RSSI_VALUE);
 8000c80:	201a      	movs	r0, #26
 8000c82:	f7ff ff7d 	bl	8000b80 <spi_read_single>
 8000c86:	782a      	ldrb	r2, [r5, #0]
 8000c88:	b200      	sxth	r0, r0
  packets_buf[packets_head].rssi -= 137;
 8000c8a:	0053      	lsls	r3, r2, #1
 8000c8c:	189b      	adds	r3, r3, r2
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	18e3      	adds	r3, r4, r3
 8000c92:	3889      	subs	r0, #137	; 0x89
 8000c94:	8298      	strh	r0, [r3, #20]
  packets_buf[packets_head].snr = spi_read_single(RFM_REG_19_PKT_SNR_VALUE) / 4;
 8000c96:	2019      	movs	r0, #25
 8000c98:	f7ff ff72 	bl	8000b80 <spi_read_single>
 8000c9c:	782b      	ldrb	r3, [r5, #0]
 8000c9e:	005a      	lsls	r2, r3, #1
 8000ca0:	18d2      	adds	r2, r2, r3
 8000ca2:	00d2      	lsls	r2, r2, #3
 8000ca4:	18a4      	adds	r4, r4, r2
 8000ca6:	0880      	lsrs	r0, r0, #2
 8000ca8:	74a0      	strb	r0, [r4, #18]

  // Check for CRC error
  packets_buf[packets_head].crc_ok = !(packets_buf[packets_head].flags & RFM_IRQ_PAYLOAD_CRC_ERROR);
 8000caa:	7c22      	ldrb	r2, [r4, #16]
 8000cac:	0952      	lsrs	r2, r2, #5
 8000cae:	2101      	movs	r1, #1
 8000cb0:	404a      	eors	r2, r1
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	400a      	ands	r2, r1
 8000cb6:	7462      	strb	r2, [r4, #17]

  packets_head = (packets_head + 1) % PACKETS_BUF_SIZE;
 8000cb8:	3301      	adds	r3, #1
 8000cba:	220f      	movs	r2, #15
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	702b      	strb	r3, [r5, #0]

  uint16_t time = timers_micros() - timer;
 8000cc0:	f000 f844 	bl	8000d4c <timers_micros>
  // log_printf("ISR %u %u %u\n", time, packets_head, packets_tail);
}
 8000cc4:	bd70      	pop	{r4, r5, r6, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	2000036c 	.word	0x2000036c
 8000ccc:	200001ec 	.word	0x200001ec

08000cd0 <timers_lptim_init>:
}


// Setup lptim1 as approx. microsecond counter
void timers_lptim_init(void)
{
 8000cd0:	b510      	push	{r4, lr}
    // Input clock is 2.097Mhz
    rcc_set_peripheral_clk_sel(LPTIM1, RCC_CCIPR_LPTIM1SEL_APB);
 8000cd2:	4c10      	ldr	r4, [pc, #64]	; (8000d14 <timers_lptim_init+0x44>)
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	0020      	movs	r0, r4
 8000cd8:	f000 faf2 	bl	80012c0 <rcc_set_peripheral_clk_sel>
 
    rcc_periph_clock_enable(RCC_LPTIM1);
 8000cdc:	480e      	ldr	r0, [pc, #56]	; (8000d18 <timers_lptim_init+0x48>)
 8000cde:	f000 fb25 	bl	800132c <rcc_periph_clock_enable>
    
    lptimer_set_internal_clock_source(LPTIM1);
 8000ce2:	0020      	movs	r0, r4
 8000ce4:	f000 f9d8 	bl	8001098 <lptimer_set_internal_clock_source>
    lptimer_enable_trigger(LPTIM1, LPTIM_CFGR_TRIGEN_SW);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	0020      	movs	r0, r4
 8000cec:	f000 f9ca 	bl	8001084 <lptimer_enable_trigger>
    lptimer_set_prescaler(LPTIM1, LPTIM_CFGR_PRESC_2);
 8000cf0:	2180      	movs	r1, #128	; 0x80
 8000cf2:	0089      	lsls	r1, r1, #2
 8000cf4:	0020      	movs	r0, r4
 8000cf6:	f000 f9bd 	bl	8001074 <lptimer_set_prescaler>
    
    lptimer_enable(LPTIM1);
 8000cfa:	0020      	movs	r0, r4
 8000cfc:	f000 f9b0 	bl	8001060 <lptimer_enable>
    
    lptimer_set_period(LPTIM1, 0xffff);
 8000d00:	4906      	ldr	r1, [pc, #24]	; (8000d1c <timers_lptim_init+0x4c>)
 8000d02:	0020      	movs	r0, r4
 8000d04:	f000 f9c6 	bl	8001094 <lptimer_set_period>
    
    lptimer_start_counter(LPTIM1, LPTIM_CR_CNTSTRT);
 8000d08:	2104      	movs	r1, #4
 8000d0a:	0020      	movs	r0, r4
 8000d0c:	f000 f9ad 	bl	800106a <lptimer_start_counter>
}
 8000d10:	bd10      	pop	{r4, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	40007c00 	.word	0x40007c00
 8000d18:	0000071f 	.word	0x0000071f
 8000d1c:	0000ffff 	.word	0x0000ffff

08000d20 <timers_delay_microseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_microseconds(uint32_t delay_microseconds)
{
 8000d20:	b570      	push	{r4, r5, r6, lr}
 8000d22:	0004      	movs	r4, r0
    uint32_t curr_time = lptimer_get_counter(LPTIM1);
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <timers_delay_microseconds+0x24>)
 8000d26:	f000 f998 	bl	800105a <lptimer_get_counter>
 8000d2a:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_microseconds > 65000)
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <timers_delay_microseconds+0x28>)
 8000d2e:	429c      	cmp	r4, r3
 8000d30:	d900      	bls.n	8000d34 <timers_delay_microseconds+0x14>
        delay_microseconds = 65000;
 8000d32:	001c      	movs	r4, r3

    while (lptimer_get_counter(LPTIM1) - curr_time < delay_microseconds);
 8000d34:	4803      	ldr	r0, [pc, #12]	; (8000d44 <timers_delay_microseconds+0x24>)
 8000d36:	f000 f990 	bl	800105a <lptimer_get_counter>
 8000d3a:	1b40      	subs	r0, r0, r5
 8000d3c:	42a0      	cmp	r0, r4
 8000d3e:	d3f9      	bcc.n	8000d34 <timers_delay_microseconds+0x14>
}
 8000d40:	bd70      	pop	{r4, r5, r6, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	40007c00 	.word	0x40007c00
 8000d48:	0000fde8 	.word	0x0000fde8

08000d4c <timers_micros>:
}
*/

// Returns value of microsecond counter
uint16_t timers_micros(void)
{
 8000d4c:	b510      	push	{r4, lr}
    return (uint16_t)lptimer_get_counter(LPTIM1);
 8000d4e:	4802      	ldr	r0, [pc, #8]	; (8000d58 <timers_micros+0xc>)
 8000d50:	f000 f983 	bl	800105a <lptimer_get_counter>
}
 8000d54:	bd10      	pop	{r4, pc}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	40007c00 	.word	0x40007c00

08000d5c <timers_tim6_init>:


// Setup TIM6 as millisecond counter. Clocked by APB1
void timers_tim6_init(void)
{
 8000d5c:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_TIM6);
 8000d5e:	4808      	ldr	r0, [pc, #32]	; (8000d80 <timers_tim6_init+0x24>)
 8000d60:	f000 fae4 	bl	800132c <rcc_periph_clock_enable>
    timer_disable_counter(TIM6);
 8000d64:	4c07      	ldr	r4, [pc, #28]	; (8000d84 <timers_tim6_init+0x28>)
 8000d66:	0020      	movs	r0, r4
 8000d68:	f000 fb23 	bl	80013b2 <timer_disable_counter>
    timer_set_prescaler(TIM6, (2097 - 1));
 8000d6c:	2183      	movs	r1, #131	; 0x83
 8000d6e:	0109      	lsls	r1, r1, #4
 8000d70:	0020      	movs	r0, r4
 8000d72:	f000 fb23 	bl	80013bc <timer_set_prescaler>
    timer_enable_counter(TIM6);
 8000d76:	0020      	movs	r0, r4
 8000d78:	f000 fb16 	bl	80013a8 <timer_enable_counter>
}
 8000d7c:	bd10      	pop	{r4, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	00000704 	.word	0x00000704
 8000d84:	40001000 	.word	0x40001000

08000d88 <timers_millis>:
    while (timer_get_counter(TIM6) - curr_time < delay_milliseconds);
}

// Returns value of millisecond counter
uint16_t timers_millis(void)
{
 8000d88:	b510      	push	{r4, lr}
    return timer_get_counter(TIM6);
 8000d8a:	4802      	ldr	r0, [pc, #8]	; (8000d94 <timers_millis+0xc>)
 8000d8c:	f000 fb18 	bl	80013c0 <timer_get_counter>
 8000d90:	b280      	uxth	r0, r0
}
 8000d92:	bd10      	pop	{r4, pc}
 8000d94:	40001000 	.word	0x40001000

08000d98 <timeout_init>:
}


// Timout functions
void timeout_init(void)
{
 8000d98:	b510      	push	{r4, lr}
    timeout_counter     = 0; 
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <timeout_init+0x14>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
    // timeout_counter     = 2140483648; 
    timeout_timer       = timers_micros(); 
 8000da0:	f7ff ffd4 	bl	8000d4c <timers_micros>
 8000da4:	4b02      	ldr	r3, [pc, #8]	; (8000db0 <timeout_init+0x18>)
 8000da6:	8018      	strh	r0, [r3, #0]
}
 8000da8:	bd10      	pop	{r4, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	20000370 	.word	0x20000370
 8000db0:	20000374 	.word	0x20000374

08000db4 <timeout>:

bool timeout(uint32_t time_microseconds, char *msg, uint32_t data)
{
 8000db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db6:	b083      	sub	sp, #12
 8000db8:	0006      	movs	r6, r0
 8000dba:	9101      	str	r1, [sp, #4]
 8000dbc:	0015      	movs	r5, r2
    timeout_counter    += (uint16_t)(timers_micros() - timeout_timer);
 8000dbe:	f7ff ffc5 	bl	8000d4c <timers_micros>
 8000dc2:	4c0c      	ldr	r4, [pc, #48]	; (8000df4 <timeout+0x40>)
 8000dc4:	8823      	ldrh	r3, [r4, #0]
 8000dc6:	1ac3      	subs	r3, r0, r3
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	4f0b      	ldr	r7, [pc, #44]	; (8000df8 <timeout+0x44>)
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	4694      	mov	ip, r2
 8000dd0:	4463      	add	r3, ip
 8000dd2:	603b      	str	r3, [r7, #0]
    timeout_timer       = timers_micros();
 8000dd4:	f7ff ffba 	bl	8000d4c <timers_micros>
 8000dd8:	8020      	strh	r0, [r4, #0]

    // log_printf("%u\n", timeout_counter);

    if(timeout_counter > time_microseconds)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	42b3      	cmp	r3, r6
 8000dde:	d802      	bhi.n	8000de6 <timeout+0x32>
    {
        log_printf("Timeout %s %08X\n", msg, data);
        return true;
    }
    else    
        return false;
 8000de0:	2000      	movs	r0, #0
}
 8000de2:	b003      	add	sp, #12
 8000de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        log_printf("Timeout %s %08X\n", msg, data);
 8000de6:	002a      	movs	r2, r5
 8000de8:	9901      	ldr	r1, [sp, #4]
 8000dea:	4804      	ldr	r0, [pc, #16]	; (8000dfc <timeout+0x48>)
 8000dec:	f7ff fd04 	bl	80007f8 <log_printf>
        return true;
 8000df0:	2001      	movs	r0, #1
 8000df2:	e7f6      	b.n	8000de2 <timeout+0x2e>
 8000df4:	20000374 	.word	0x20000374
 8000df8:	20000370 	.word	0x20000370
 8000dfc:	08002c60 	.word	0x08002c60

08000e00 <set_gpio_for_standby>:

void set_gpio_for_standby(void)
{   
 8000e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Common
    // LED
    gpio_mode_setup(LED_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, LED);
 8000e02:	2680      	movs	r6, #128	; 0x80
 8000e04:	0076      	lsls	r6, r6, #1
 8000e06:	4c36      	ldr	r4, [pc, #216]	; (8000ee0 <set_gpio_for_standby+0xe0>)
 8000e08:	0033      	movs	r3, r6
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2103      	movs	r1, #3
 8000e0e:	0020      	movs	r0, r4
 8000e10:	f000 f8bb 	bl	8000f8a <gpio_mode_setup>
    gpio_set(LED_PORT, LED);
 8000e14:	0031      	movs	r1, r6
 8000e16:	0020      	movs	r0, r4
 8000e18:	f000 f8b2 	bl	8000f80 <gpio_set>

    // Serial Print
    gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, SPF_USART_TX);
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	25a0      	movs	r5, #160	; 0xa0
 8000e20:	05ed      	lsls	r5, r5, #23
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	2201      	movs	r2, #1
 8000e26:	2100      	movs	r1, #0
 8000e28:	0028      	movs	r0, r5
 8000e2a:	f000 f8ae 	bl	8000f8a <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE,  SPF_USART_RX);
 8000e2e:	2780      	movs	r7, #128	; 0x80
 8000e30:	00ff      	lsls	r7, r7, #3
 8000e32:	003b      	movs	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	2101      	movs	r1, #1
 8000e38:	0028      	movs	r0, r5
 8000e3a:	f000 f8a6 	bl	8000f8a <gpio_mode_setup>
	gpio_set(SPF_USART_RX_PORT, SPF_USART_RX);
 8000e3e:	0039      	movs	r1, r7
 8000e40:	0028      	movs	r0, r5
 8000e42:	f000 f89d 	bl	8000f80 <gpio_set>

    // Batt Sense
    gpio_mode_setup(BATT_SENS_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, BATT_SENS);
 8000e46:	2301      	movs	r3, #1
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2103      	movs	r1, #3
 8000e4c:	0028      	movs	r0, r5
 8000e4e:	f000 f89c 	bl	8000f8a <gpio_mode_setup>
    
    // RFM
    // SPI
    gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_ANALOG,   GPIO_PUPD_NONE,       RFM_SPI_MISO);
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	01db      	lsls	r3, r3, #7
 8000e56:	2200      	movs	r2, #0
 8000e58:	2103      	movs	r1, #3
 8000e5a:	0020      	movs	r0, r4
 8000e5c:	f000 f895 	bl	8000f8a <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_SCK_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_SCK);
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	019b      	lsls	r3, r3, #6
 8000e64:	2202      	movs	r2, #2
 8000e66:	2100      	movs	r1, #0
 8000e68:	0020      	movs	r0, r4
 8000e6a:	f000 f88e 	bl	8000f8a <gpio_mode_setup>
    gpio_mode_setup(RFM_SPI_MOSI_PORT,  GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_MOSI);
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	2202      	movs	r2, #2
 8000e74:	2100      	movs	r1, #0
 8000e76:	0020      	movs	r0, r4
 8000e78:	f000 f887 	bl	8000f8a <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_NSS_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_SPI_NSS);
 8000e7c:	2340      	movs	r3, #64	; 0x40
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2100      	movs	r1, #0
 8000e82:	0028      	movs	r0, r5
 8000e84:	f000 f881 	bl	8000f8a <gpio_mode_setup>
    gpio_mode_setup(RFM_RESET_PORT,     GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_RESET);
 8000e88:	2310      	movs	r3, #16
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	0028      	movs	r0, r5
 8000e90:	f000 f87b 	bl	8000f8a <gpio_mode_setup>

    // DIO
    gpio_mode_setup(RFM_IO_0_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_0);
 8000e94:	003b      	movs	r3, r7
 8000e96:	2200      	movs	r2, #0
 8000e98:	2103      	movs	r1, #3
 8000e9a:	0020      	movs	r0, r4
 8000e9c:	f000 f875 	bl	8000f8a <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_1_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_1);
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	011b      	lsls	r3, r3, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2103      	movs	r1, #3
 8000ea8:	0020      	movs	r0, r4
 8000eaa:	f000 f86e 	bl	8000f8a <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_2_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_2);
 8000eae:	0033      	movs	r3, r6
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2103      	movs	r1, #3
 8000eb4:	0028      	movs	r0, r5
 8000eb6:	f000 f868 	bl	8000f8a <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_3_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_3);
 8000eba:	2302      	movs	r3, #2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	0020      	movs	r0, r4
 8000ec2:	f000 f862 	bl	8000f8a <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_4_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_4);
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2103      	movs	r1, #3
 8000ecc:	0020      	movs	r0, r4
 8000ece:	f000 f85c 	bl	8000f8a <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_5_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_5);
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2103      	movs	r1, #3
 8000ed8:	0020      	movs	r0, r4
 8000eda:	f000 f856 	bl	8000f8a <gpio_mode_setup>
    gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
	gpio_mode_setup(TEMP_I2C_SDA_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SDA);

    #endif

}
 8000ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ee0:	50000400 	.word	0x50000400

08000ee4 <rtc_isr>:

// Override default rtc interrupt handler
void rtc_isr(void)
{ 
 8000ee4:	b510      	push	{r4, lr}
    exti_reset_request(EXTI20);
 8000ee6:	2080      	movs	r0, #128	; 0x80
 8000ee8:	0340      	lsls	r0, r0, #13
 8000eea:	f000 f825 	bl	8000f38 <exti_reset_request>

    // scb_reset_system();

    log_init();
 8000eee:	f7ff fc9b 	bl	8000828 <log_init>
    log_printf("RTC ISR\n");
 8000ef2:	480c      	ldr	r0, [pc, #48]	; (8000f24 <rtc_isr+0x40>)
 8000ef4:	f7ff fc80 	bl	80007f8 <log_printf>

    if(RTC_ISR & RTC_ISR_WUTF)
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <rtc_isr+0x44>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	055b      	lsls	r3, r3, #21
 8000efe:	d400      	bmi.n	8000f02 <rtc_isr+0x1e>
        pwr_clear_standby_flag();
        rtc_lock();
	    pwr_enable_backup_domain_write_protect();
        set_gpio_for_standby();
    }
}
 8000f00:	bd10      	pop	{r4, pc}
        pwr_disable_backup_domain_write_protect();
 8000f02:	f000 f8cf 	bl	80010a4 <pwr_disable_backup_domain_write_protect>
        rtc_unlock();
 8000f06:	f000 fa2f 	bl	8001368 <rtc_unlock>
	    rtc_clear_wakeup_flag();
 8000f0a:	f000 fa3b 	bl	8001384 <rtc_clear_wakeup_flag>
        pwr_clear_wakeup_flag();
 8000f0e:	f000 f8e5 	bl	80010dc <pwr_clear_wakeup_flag>
        pwr_clear_standby_flag();
 8000f12:	f000 f8db 	bl	80010cc <pwr_clear_standby_flag>
        rtc_lock();
 8000f16:	f000 fa2f 	bl	8001378 <rtc_lock>
	    pwr_enable_backup_domain_write_protect();
 8000f1a:	f000 f8cd 	bl	80010b8 <pwr_enable_backup_domain_write_protect>
        set_gpio_for_standby();
 8000f1e:	f7ff ff6f 	bl	8000e00 <set_gpio_for_standby>
}
 8000f22:	e7ed      	b.n	8000f00 <rtc_isr+0x1c>
 8000f24:	08002c74 	.word	0x08002c74
 8000f28:	4000280c 	.word	0x4000280c

08000f2c <adc_start_conversion_regular>:
 * @param[in] adc ADC block register address base @ref adc_reg_base
 */
void adc_start_conversion_regular(uint32_t adc)
{
	/* Start conversion on regular channels. */
	ADC_CR(adc) |= ADC_CR_ADSTART;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	6882      	ldr	r2, [r0, #8]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	6083      	str	r3, [r0, #8]
}
 8000f34:	4770      	bx	lr
	...

08000f38 <exti_reset_request>:
{
#if defined(EXTI_RPR1) && defined(EXTI_FPR1)
	EXTI_RPR1 = extis;
	EXTI_FPR1 = extis;
#else
	EXTI_PR = extis;
 8000f38:	4b01      	ldr	r3, [pc, #4]	; (8000f40 <exti_reset_request+0x8>)
 8000f3a:	6018      	str	r0, [r3, #0]
#endif
}
 8000f3c:	4770      	bx	lr
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	40010414 	.word	0x40010414

08000f44 <flash_set_ws>:
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8000f44:	2101      	movs	r1, #1
	reg32 = FLASH_ACR;
 8000f46:	4a03      	ldr	r2, [pc, #12]	; (8000f54 <flash_set_ws+0x10>)
 8000f48:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8000f4a:	438b      	bics	r3, r1
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 8000f4c:	4303      	orrs	r3, r0
	FLASH_ACR = reg32;
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	4770      	bx	lr
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	40022000 	.word	0x40022000

08000f58 <flash_unlock_pecr>:
 * yourself.
 * @sa flash_unlock
 */
void flash_unlock_pecr(void)
{
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY1;
 8000f58:	4b02      	ldr	r3, [pc, #8]	; (8000f64 <flash_unlock_pecr+0xc>)
 8000f5a:	4a03      	ldr	r2, [pc, #12]	; (8000f68 <flash_unlock_pecr+0x10>)
 8000f5c:	601a      	str	r2, [r3, #0]
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY2;
 8000f5e:	4a03      	ldr	r2, [pc, #12]	; (8000f6c <flash_unlock_pecr+0x14>)
 8000f60:	601a      	str	r2, [r3, #0]
}
 8000f62:	4770      	bx	lr
 8000f64:	4002200c 	.word	0x4002200c
 8000f68:	89abcdef 	.word	0x89abcdef
 8000f6c:	02030405 	.word	0x02030405

08000f70 <flash_lock_pecr>:

void flash_lock_pecr(void)
{
	FLASH_PECR |= FLASH_PECR_PELOCK;
 8000f70:	2301      	movs	r3, #1
 8000f72:	4a02      	ldr	r2, [pc, #8]	; (8000f7c <flash_lock_pecr+0xc>)
 8000f74:	6811      	ldr	r1, [r2, #0]
 8000f76:	430b      	orrs	r3, r1
 8000f78:	6013      	str	r3, [r2, #0]
}
 8000f7a:	4770      	bx	lr
 8000f7c:	40022004 	.word	0x40022004

08000f80 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8000f80:	6181      	str	r1, [r0, #24]
}
 8000f82:	4770      	bx	lr

08000f84 <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8000f84:	0409      	lsls	r1, r1, #16
 8000f86:	6181      	str	r1, [r0, #24]
}
 8000f88:	4770      	bx	lr

08000f8a <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 8000f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8c:	b085      	sub	sp, #20
 8000f8e:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8000f90:	2703      	movs	r7, #3
	pupd = GPIO_PUPDR(gpioport);
 8000f92:	2100      	movs	r1, #0
{
 8000f94:	9202      	str	r2, [sp, #8]
 8000f96:	9303      	str	r3, [sp, #12]
	moder = GPIO_MODER(gpioport);
 8000f98:	6802      	ldr	r2, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 8000f9a:	68c3      	ldr	r3, [r0, #12]
		if (!((1 << i) & gpios)) {
 8000f9c:	9c03      	ldr	r4, [sp, #12]
 8000f9e:	2501      	movs	r5, #1
 8000fa0:	410c      	asrs	r4, r1
 8000fa2:	422c      	tst	r4, r5
 8000fa4:	d00a      	beq.n	8000fbc <gpio_mode_setup+0x32>
		moder &= ~GPIO_MODE_MASK(i);
 8000fa6:	003d      	movs	r5, r7
 8000fa8:	004c      	lsls	r4, r1, #1
 8000faa:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8000fac:	9e01      	ldr	r6, [sp, #4]
		moder &= ~GPIO_MODE_MASK(i);
 8000fae:	43aa      	bics	r2, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 8000fb0:	43ab      	bics	r3, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000fb2:	9d02      	ldr	r5, [sp, #8]
		moder |= GPIO_MODE(i, mode);
 8000fb4:	40a6      	lsls	r6, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000fb6:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8000fb8:	4332      	orrs	r2, r6
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000fba:	432b      	orrs	r3, r5
	for (i = 0; i < 16; i++) {
 8000fbc:	3101      	adds	r1, #1
 8000fbe:	2910      	cmp	r1, #16
 8000fc0:	d1ec      	bne.n	8000f9c <gpio_mode_setup+0x12>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 8000fc2:	6002      	str	r2, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 8000fc4:	60c3      	str	r3, [r0, #12]
}
 8000fc6:	b005      	add	sp, #20
 8000fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fca <gpio_set_output_options>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_output_options(uint32_t gpioport, uint8_t otype, uint8_t speed,
			     uint16_t gpios)
{
 8000fca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000fcc:	9201      	str	r2, [sp, #4]
	uint16_t i;
	uint32_t ospeedr;

	if (otype == 0x1) {
 8000fce:	2901      	cmp	r1, #1
 8000fd0:	d116      	bne.n	8001000 <gpio_set_output_options+0x36>
		GPIO_OTYPER(gpioport) |= gpios;
 8000fd2:	6841      	ldr	r1, [r0, #4]
 8000fd4:	4319      	orrs	r1, r3
	} else {
		GPIO_OTYPER(gpioport) &= ~gpios;
	}

	ospeedr = GPIO_OSPEEDR(gpioport);
 8000fd6:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8000fd8:	2601      	movs	r6, #1
			continue;
		}
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8000fda:	2703      	movs	r7, #3
		GPIO_OTYPER(gpioport) &= ~gpios;
 8000fdc:	6041      	str	r1, [r0, #4]
	ospeedr = GPIO_OSPEEDR(gpioport);
 8000fde:	6881      	ldr	r1, [r0, #8]
		if (!((1 << i) & gpios)) {
 8000fe0:	001d      	movs	r5, r3
 8000fe2:	4125      	asrs	r5, r4
 8000fe4:	4235      	tst	r5, r6
 8000fe6:	d006      	beq.n	8000ff6 <gpio_set_output_options+0x2c>
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8000fe8:	003a      	movs	r2, r7
 8000fea:	0065      	lsls	r5, r4, #1
 8000fec:	40aa      	lsls	r2, r5
 8000fee:	4391      	bics	r1, r2
		ospeedr |= GPIO_OSPEED(i, speed);
 8000ff0:	9a01      	ldr	r2, [sp, #4]
 8000ff2:	40aa      	lsls	r2, r5
 8000ff4:	4311      	orrs	r1, r2
	for (i = 0; i < 16; i++) {
 8000ff6:	3401      	adds	r4, #1
 8000ff8:	2c10      	cmp	r4, #16
 8000ffa:	d1f1      	bne.n	8000fe0 <gpio_set_output_options+0x16>
	}

	GPIO_OSPEEDR(gpioport) = ospeedr;
 8000ffc:	6081      	str	r1, [r0, #8]
}
 8000ffe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		GPIO_OTYPER(gpioport) &= ~gpios;
 8001000:	6841      	ldr	r1, [r0, #4]
 8001002:	4399      	bics	r1, r3
 8001004:	e7e7      	b.n	8000fd6 <gpio_set_output_options+0xc>

08001006 <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 8001006:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);
 8001008:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 800100a:	2601      	movs	r6, #1
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 800100c:	270f      	movs	r7, #15
	afrl = GPIO_AFRL(gpioport);
 800100e:	6a04      	ldr	r4, [r0, #32]
{
 8001010:	9100      	str	r1, [sp, #0]
	afrh = GPIO_AFRH(gpioport);
 8001012:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8001014:	9201      	str	r2, [sp, #4]
		if (!((1 << i) & gpios)) {
 8001016:	9d01      	ldr	r5, [sp, #4]
 8001018:	411d      	asrs	r5, r3
 800101a:	4235      	tst	r5, r6
 800101c:	d006      	beq.n	800102c <gpio_set_af+0x26>
		afrl &= ~GPIO_AFR_MASK(i);
 800101e:	003a      	movs	r2, r7
 8001020:	009d      	lsls	r5, r3, #2
 8001022:	40aa      	lsls	r2, r5
 8001024:	4394      	bics	r4, r2
		afrl |= GPIO_AFR(i, alt_func_num);
 8001026:	9a00      	ldr	r2, [sp, #0]
 8001028:	40aa      	lsls	r2, r5
 800102a:	4314      	orrs	r4, r2
	for (i = 0; i < 8; i++) {
 800102c:	3301      	adds	r3, #1
 800102e:	2b08      	cmp	r3, #8
 8001030:	d1f1      	bne.n	8001016 <gpio_set_af+0x10>
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8001032:	2601      	movs	r6, #1
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8001034:	270f      	movs	r7, #15
		if (!((1 << i) & gpios)) {
 8001036:	9a01      	ldr	r2, [sp, #4]
 8001038:	411a      	asrs	r2, r3
 800103a:	4232      	tst	r2, r6
 800103c:	d007      	beq.n	800104e <gpio_set_af+0x48>
		afrh &= ~GPIO_AFR_MASK(i - 8);
 800103e:	003a      	movs	r2, r7
 8001040:	009d      	lsls	r5, r3, #2
 8001042:	3d20      	subs	r5, #32
 8001044:	40aa      	lsls	r2, r5
 8001046:	4391      	bics	r1, r2
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 8001048:	9a00      	ldr	r2, [sp, #0]
 800104a:	40aa      	lsls	r2, r5
 800104c:	4311      	orrs	r1, r2
	for (i = 8; i < 16; i++) {
 800104e:	3301      	adds	r3, #1
 8001050:	2b10      	cmp	r3, #16
 8001052:	d1f0      	bne.n	8001036 <gpio_set_af+0x30>
	}

	GPIO_AFRL(gpioport) = afrl;
 8001054:	6204      	str	r4, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 8001056:	6241      	str	r1, [r0, #36]	; 0x24
}
 8001058:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0800105a <lptimer_get_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @returns Counter value.
 */
uint16_t lptimer_get_counter(uint32_t lptimer_peripheral)
{
	return LPTIM_CNT(lptimer_peripheral);
 800105a:	69c0      	ldr	r0, [r0, #28]
 800105c:	b280      	uxth	r0, r0
}
 800105e:	4770      	bx	lr

08001060 <lptimer_enable>:
 *
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 */
void lptimer_enable(uint32_t lptimer_peripheral)
{
	LPTIM_CR(lptimer_peripheral) |= LPTIM_CR_ENABLE;
 8001060:	2301      	movs	r3, #1
 8001062:	6902      	ldr	r2, [r0, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	6103      	str	r3, [r0, #16]
}
 8001068:	4770      	bx	lr

0800106a <lptimer_start_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] mode lptimer start mode (@ref LPTIM_CR_SNGSTRT or @ref LPTIM_CR_CNTSTRT)
 */
void lptimer_start_counter(uint32_t lptimer_peripheral, uint32_t mode)
{
	LPTIM_CR(lptimer_peripheral) |= mode;
 800106a:	6903      	ldr	r3, [r0, #16]
 800106c:	430b      	orrs	r3, r1
 800106e:	6103      	str	r3, [r0, #16]
}
 8001070:	4770      	bx	lr
	...

08001074 <lptimer_set_prescaler>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] prescaler Clock prescaler (@ref lptim_cfgr_presc)
 */
void lptimer_set_prescaler(uint32_t lptimer_peripheral, uint32_t prescaler)
{
	uint32_t reg32 = LPTIM_CFGR(lptimer_peripheral);
 8001074:	68c3      	ldr	r3, [r0, #12]
	reg32 &= ~(LPTIM_CFGR_PRESC_MASK << LPTIM_CFGR_PRESC_SHIFT);
 8001076:	4a02      	ldr	r2, [pc, #8]	; (8001080 <lptimer_set_prescaler+0xc>)
 8001078:	4013      	ands	r3, r2
	LPTIM_CFGR(lptimer_peripheral) = reg32 | prescaler;
 800107a:	430b      	orrs	r3, r1
 800107c:	60c3      	str	r3, [r0, #12]
}
 800107e:	4770      	bx	lr
 8001080:	fffff1ff 	.word	0xfffff1ff

08001084 <lptimer_enable_trigger>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] trigen Enable Trigger
 */
void lptimer_enable_trigger(uint32_t lptimer_peripheral, uint32_t trigen)
{
	uint32_t reg32 = LPTIM_CFGR(lptimer_peripheral);
 8001084:	68c3      	ldr	r3, [r0, #12]
	reg32 &= ~(LPTIM_CFGR_TRIGEN_MASK << LPTIM_CFGR_TRIGEN_SHIFT);
 8001086:	4a02      	ldr	r2, [pc, #8]	; (8001090 <lptimer_enable_trigger+0xc>)
 8001088:	4013      	ands	r3, r2
	LPTIM_CFGR(lptimer_peripheral) = reg32 | trigen;
 800108a:	430b      	orrs	r3, r1
 800108c:	60c3      	str	r3, [r0, #12]
}
 800108e:	4770      	bx	lr
 8001090:	fff1ffff 	.word	0xfff1ffff

08001094 <lptimer_set_period>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] period_value Autoreload value. Must be greater that CMP value.
 */
void lptimer_set_period(uint32_t lptimer_peripheral, uint16_t period_value)
{
	LPTIM_ARR(lptimer_peripheral) = period_value;
 8001094:	6181      	str	r1, [r0, #24]
}
 8001096:	4770      	bx	lr

08001098 <lptimer_set_internal_clock_source>:
 *
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 */
void lptimer_set_internal_clock_source(uint32_t lptimer_peripheral)
{
	LPTIM_CFGR(lptimer_peripheral) &= ~LPTIM_CFGR_CKSEL;
 8001098:	2201      	movs	r2, #1
 800109a:	68c3      	ldr	r3, [r0, #12]
 800109c:	4393      	bics	r3, r2
 800109e:	60c3      	str	r3, [r0, #12]
}
 80010a0:	4770      	bx	lr
	...

080010a4 <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	4a03      	ldr	r2, [pc, #12]	; (80010b4 <pwr_disable_backup_domain_write_protect+0x10>)
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	6811      	ldr	r1, [r2, #0]
 80010ac:	430b      	orrs	r3, r1
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	4770      	bx	lr
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	40007000 	.word	0x40007000

080010b8 <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 80010b8:	4a02      	ldr	r2, [pc, #8]	; (80010c4 <pwr_enable_backup_domain_write_protect+0xc>)
 80010ba:	4903      	ldr	r1, [pc, #12]	; (80010c8 <pwr_enable_backup_domain_write_protect+0x10>)
 80010bc:	6813      	ldr	r3, [r2, #0]
 80010be:	400b      	ands	r3, r1
 80010c0:	6013      	str	r3, [r2, #0]
}
 80010c2:	4770      	bx	lr
 80010c4:	40007000 	.word	0x40007000
 80010c8:	fffffeff 	.word	0xfffffeff

080010cc <pwr_clear_standby_flag>:
This is set when the processor returns from a standby mode.
*/

void pwr_clear_standby_flag(void)
{
	PWR_CR |= PWR_CR_CSBF;
 80010cc:	2308      	movs	r3, #8
 80010ce:	4a02      	ldr	r2, [pc, #8]	; (80010d8 <pwr_clear_standby_flag+0xc>)
 80010d0:	6811      	ldr	r1, [r2, #0]
 80010d2:	430b      	orrs	r3, r1
 80010d4:	6013      	str	r3, [r2, #0]
}
 80010d6:	4770      	bx	lr
 80010d8:	40007000 	.word	0x40007000

080010dc <pwr_clear_wakeup_flag>:
This is set when the processor receives a wakeup signal.
*/

void pwr_clear_wakeup_flag(void)
{
	PWR_CR |= PWR_CR_CWUF;
 80010dc:	2304      	movs	r3, #4
 80010de:	4a02      	ldr	r2, [pc, #8]	; (80010e8 <pwr_clear_wakeup_flag+0xc>)
 80010e0:	6811      	ldr	r1, [r2, #0]
 80010e2:	430b      	orrs	r3, r1
 80010e4:	6013      	str	r3, [r2, #0]
}
 80010e6:	4770      	bx	lr
 80010e8:	40007000 	.word	0x40007000

080010ec <rcc_osc_on>:
uint32_t rcc_ahb_frequency = 2097000;
uint32_t rcc_apb1_frequency = 2097000;
uint32_t rcc_apb2_frequency = 2097000;

void rcc_osc_on(enum rcc_osc osc)
{
 80010ec:	b500      	push	{lr}
 80010ee:	2806      	cmp	r0, #6
 80010f0:	d80b      	bhi.n	800110a <rcc_osc_on+0x1e>
 80010f2:	f001 fa93 	bl	800261c <__gnu_thumb1_case_uqi>
 80010f6:	1004      	.short	0x1004
 80010f8:	1b0b1915 	.word	0x1b0b1915
 80010fc:	1d          	.byte	0x1d
 80010fd:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	4a0c      	ldr	r2, [pc, #48]	; (8001134 <rcc_osc_on+0x48>)
 8001102:	045b      	lsls	r3, r3, #17
 8001104:	6811      	ldr	r1, [r2, #0]
		break;
	case RCC_LSE:
		RCC_CSR |= RCC_CSR_LSEON;
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
 8001106:	430b      	orrs	r3, r1
 8001108:	6013      	str	r3, [r2, #0]
		break;
	}
}
 800110a:	bd00      	pop	{pc}
		RCC_CR |= RCC_CR_MSION;
 800110c:	4a09      	ldr	r2, [pc, #36]	; (8001134 <rcc_osc_on+0x48>)
		RCC_CSR |= RCC_CSR_LSEON;
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	6811      	ldr	r1, [r2, #0]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	e7f7      	b.n	8001106 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSEON;
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <rcc_osc_on+0x48>)
 800111a:	025b      	lsls	r3, r3, #9
 800111c:	6811      	ldr	r1, [r2, #0]
 800111e:	e7f2      	b.n	8001106 <rcc_osc_on+0x1a>
		RCC_CRRCR |= RCC_CRRCR_HSI48ON;
 8001120:	4a05      	ldr	r2, [pc, #20]	; (8001138 <rcc_osc_on+0x4c>)
		RCC_CSR |= RCC_CSR_LSION;
 8001122:	2301      	movs	r3, #1
 8001124:	6811      	ldr	r1, [r2, #0]
 8001126:	e7ee      	b.n	8001106 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSI16ON;
 8001128:	4a02      	ldr	r2, [pc, #8]	; (8001134 <rcc_osc_on+0x48>)
 800112a:	e7fa      	b.n	8001122 <rcc_osc_on+0x36>
		RCC_CSR |= RCC_CSR_LSEON;
 800112c:	4a03      	ldr	r2, [pc, #12]	; (800113c <rcc_osc_on+0x50>)
 800112e:	e7ee      	b.n	800110e <rcc_osc_on+0x22>
		RCC_CSR |= RCC_CSR_LSION;
 8001130:	4a02      	ldr	r2, [pc, #8]	; (800113c <rcc_osc_on+0x50>)
 8001132:	e7f6      	b.n	8001122 <rcc_osc_on+0x36>
 8001134:	40021000 	.word	0x40021000
 8001138:	40021008 	.word	0x40021008
 800113c:	40021050 	.word	0x40021050

08001140 <rcc_osc_off>:

void rcc_osc_off(enum rcc_osc osc)
{
 8001140:	b500      	push	{lr}
 8001142:	2806      	cmp	r0, #6
 8001144:	d80a      	bhi.n	800115c <rcc_osc_off+0x1c>
 8001146:	f001 fa69 	bl	800261c <__gnu_thumb1_case_uqi>
 800114a:	0e04      	.short	0x0e04
 800114c:	190a1712 	.word	0x190a1712
 8001150:	1b          	.byte	0x1b
 8001151:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR &= ~RCC_CR_PLLON;
 8001152:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <rcc_osc_off+0x44>)
 8001154:	490c      	ldr	r1, [pc, #48]	; (8001188 <rcc_osc_off+0x48>)
 8001156:	6813      	ldr	r3, [r2, #0]
		break;
	case RCC_HSI16:
		RCC_CR &= ~RCC_CR_HSI16ON;
		break;
	case RCC_LSE:
		RCC_CSR &= ~RCC_CSR_LSEON;
 8001158:	400b      	ands	r3, r1
		break;
	case RCC_LSI:
		RCC_CSR &= ~RCC_CSR_LSION;
 800115a:	6013      	str	r3, [r2, #0]
		break;
	}
}
 800115c:	bd00      	pop	{pc}
		RCC_CR &= ~RCC_CR_MSION;
 800115e:	4a09      	ldr	r2, [pc, #36]	; (8001184 <rcc_osc_off+0x44>)
		RCC_CSR &= ~RCC_CSR_LSEON;
 8001160:	6813      	ldr	r3, [r2, #0]
 8001162:	490a      	ldr	r1, [pc, #40]	; (800118c <rcc_osc_off+0x4c>)
 8001164:	e7f8      	b.n	8001158 <rcc_osc_off+0x18>
		RCC_CR &= ~RCC_CR_HSEON;
 8001166:	4a07      	ldr	r2, [pc, #28]	; (8001184 <rcc_osc_off+0x44>)
 8001168:	4909      	ldr	r1, [pc, #36]	; (8001190 <rcc_osc_off+0x50>)
 800116a:	6813      	ldr	r3, [r2, #0]
 800116c:	e7f4      	b.n	8001158 <rcc_osc_off+0x18>
		RCC_CRRCR &= ~RCC_CRRCR_HSI48ON;
 800116e:	4a09      	ldr	r2, [pc, #36]	; (8001194 <rcc_osc_off+0x54>)
		RCC_CSR &= ~RCC_CSR_LSION;
 8001170:	2101      	movs	r1, #1
 8001172:	6813      	ldr	r3, [r2, #0]
 8001174:	438b      	bics	r3, r1
 8001176:	e7f0      	b.n	800115a <rcc_osc_off+0x1a>
		RCC_CR &= ~RCC_CR_HSI16ON;
 8001178:	4a02      	ldr	r2, [pc, #8]	; (8001184 <rcc_osc_off+0x44>)
 800117a:	e7f9      	b.n	8001170 <rcc_osc_off+0x30>
		RCC_CSR &= ~RCC_CSR_LSEON;
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <rcc_osc_off+0x58>)
 800117e:	e7ef      	b.n	8001160 <rcc_osc_off+0x20>
		RCC_CSR &= ~RCC_CSR_LSION;
 8001180:	4a05      	ldr	r2, [pc, #20]	; (8001198 <rcc_osc_off+0x58>)
 8001182:	e7f5      	b.n	8001170 <rcc_osc_off+0x30>
 8001184:	40021000 	.word	0x40021000
 8001188:	feffffff 	.word	0xfeffffff
 800118c:	fffffeff 	.word	0xfffffeff
 8001190:	fffeffff 	.word	0xfffeffff
 8001194:	40021008 	.word	0x40021008
 8001198:	40021050 	.word	0x40021050

0800119c <rcc_is_osc_ready>:
	cm3_assert_not_reached();
}


bool rcc_is_osc_ready(enum rcc_osc osc)
{
 800119c:	2300      	movs	r3, #0
 800119e:	b500      	push	{lr}
 80011a0:	2806      	cmp	r0, #6
 80011a2:	d80a      	bhi.n	80011ba <rcc_is_osc_ready+0x1e>
 80011a4:	3301      	adds	r3, #1
 80011a6:	f001 fa39 	bl	800261c <__gnu_thumb1_case_uqi>
 80011aa:	0a04      	.short	0x0a04
 80011ac:	1a160e12 	.word	0x1a160e12
 80011b0:	1c          	.byte	0x1c
 80011b1:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 80011b2:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <rcc_is_osc_ready+0x4c>)
 80011b4:	6810      	ldr	r0, [r2, #0]
 80011b6:	0e40      	lsrs	r0, r0, #25
	case RCC_MSI:
		return RCC_CR & RCC_CR_MSIRDY;
	case RCC_LSE:
		return RCC_CSR & RCC_CSR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 80011b8:	4003      	ands	r3, r0
	}
	return false;
}
 80011ba:	0018      	movs	r0, r3
 80011bc:	bd00      	pop	{pc}
		return RCC_CR & RCC_CR_HSERDY;
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <rcc_is_osc_ready+0x4c>)
 80011c0:	6810      	ldr	r0, [r2, #0]
 80011c2:	0c40      	lsrs	r0, r0, #17
 80011c4:	e7f8      	b.n	80011b8 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_HSI16RDY;
 80011c6:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <rcc_is_osc_ready+0x4c>)
 80011c8:	6810      	ldr	r0, [r2, #0]
 80011ca:	0880      	lsrs	r0, r0, #2
 80011cc:	e7f4      	b.n	80011b8 <rcc_is_osc_ready+0x1c>
		return RCC_CRRCR & RCC_CRRCR_HSI48RDY;
 80011ce:	4a07      	ldr	r2, [pc, #28]	; (80011ec <rcc_is_osc_ready+0x50>)
		return RCC_CSR & RCC_CSR_LSIRDY;
 80011d0:	6810      	ldr	r0, [r2, #0]
 80011d2:	0840      	lsrs	r0, r0, #1
 80011d4:	e7f0      	b.n	80011b8 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_MSIRDY;
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <rcc_is_osc_ready+0x4c>)
		return RCC_CSR & RCC_CSR_LSERDY;
 80011d8:	6810      	ldr	r0, [r2, #0]
 80011da:	0a40      	lsrs	r0, r0, #9
 80011dc:	e7ec      	b.n	80011b8 <rcc_is_osc_ready+0x1c>
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <rcc_is_osc_ready+0x54>)
 80011e0:	e7fa      	b.n	80011d8 <rcc_is_osc_ready+0x3c>
		return RCC_CSR & RCC_CSR_LSIRDY;
 80011e2:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <rcc_is_osc_ready+0x54>)
 80011e4:	e7f4      	b.n	80011d0 <rcc_is_osc_ready+0x34>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40021008 	.word	0x40021008
 80011f0:	40021050 	.word	0x40021050

080011f4 <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 80011f4:	b510      	push	{r4, lr}
 80011f6:	0004      	movs	r4, r0
	while (!rcc_is_osc_ready(osc));
 80011f8:	0020      	movs	r0, r4
 80011fa:	f7ff ffcf 	bl	800119c <rcc_is_osc_ready>
 80011fe:	2800      	cmp	r0, #0
 8001200:	d0fa      	beq.n	80011f8 <rcc_wait_for_osc_ready+0x4>
}
 8001202:	bd10      	pop	{r4, pc}

08001204 <rcc_set_hsi48_source_rc48>:
/*---------------------------------------------------------------------------*/
/** @brief RCC Set HSI48 clock source to the RC48 (CRS)
 */
void rcc_set_hsi48_source_rc48(void)
{
	RCC_CCIPR |= RCC_CCIPR_HSI48SEL;
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	4a03      	ldr	r2, [pc, #12]	; (8001214 <rcc_set_hsi48_source_rc48+0x10>)
 8001208:	04db      	lsls	r3, r3, #19
 800120a:	6811      	ldr	r1, [r2, #0]
 800120c:	430b      	orrs	r3, r1
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	4770      	bx	lr
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	4002104c 	.word	0x4002104c

08001218 <rcc_set_sysclk_source>:
 *
 * @param[in] osc Oscillator ID. Only HSE, HSI16, MSI and PLL have effect.
 */

void rcc_set_sysclk_source(enum rcc_osc osc)
{
 8001218:	b500      	push	{lr}
 800121a:	2804      	cmp	r0, #4
 800121c:	d812      	bhi.n	8001244 <rcc_set_sysclk_source+0x2c>
 800121e:	f001 f9fd 	bl	800261c <__gnu_thumb1_case_uqi>
 8001222:	0903      	.short	0x0903
 8001224:	1211      	.short	0x1211
 8001226:	19          	.byte	0x19
 8001227:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CFGR |=  RCC_CFGR_SW_PLL;
 8001228:	2303      	movs	r3, #3
 800122a:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <rcc_set_sysclk_source+0x48>)
 800122c:	6811      	ldr	r1, [r2, #0]
 800122e:	430b      	orrs	r3, r1
		break;
	case RCC_HSI16:
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_HSI16;
		break;
	case RCC_MSI:
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_MSI;
 8001230:	6013      	str	r3, [r2, #0]
	case RCC_HSI48:
	case RCC_LSE:
	case RCC_LSI:
		break;
	}
}
 8001232:	e007      	b.n	8001244 <rcc_set_sysclk_source+0x2c>
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_HSE;
 8001234:	2203      	movs	r2, #3
 8001236:	490a      	ldr	r1, [pc, #40]	; (8001260 <rcc_set_sysclk_source+0x48>)
 8001238:	680b      	ldr	r3, [r1, #0]
 800123a:	4393      	bics	r3, r2
 800123c:	001a      	movs	r2, r3
 800123e:	2302      	movs	r3, #2
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_HSI16;
 8001240:	4313      	orrs	r3, r2
 8001242:	600b      	str	r3, [r1, #0]
}
 8001244:	bd00      	pop	{pc}
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_HSI16;
 8001246:	2203      	movs	r2, #3
 8001248:	4905      	ldr	r1, [pc, #20]	; (8001260 <rcc_set_sysclk_source+0x48>)
 800124a:	680b      	ldr	r3, [r1, #0]
 800124c:	4393      	bics	r3, r2
 800124e:	001a      	movs	r2, r3
 8001250:	2301      	movs	r3, #1
 8001252:	e7f5      	b.n	8001240 <rcc_set_sysclk_source+0x28>
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_MSI;
 8001254:	2103      	movs	r1, #3
 8001256:	4a02      	ldr	r2, [pc, #8]	; (8001260 <rcc_set_sysclk_source+0x48>)
 8001258:	6813      	ldr	r3, [r2, #0]
 800125a:	438b      	bics	r3, r1
 800125c:	e7e8      	b.n	8001230 <rcc_set_sysclk_source+0x18>
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	4002100c 	.word	0x4002100c

08001264 <rcc_set_ppre1>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb1pre
 */

void rcc_set_ppre1(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8001264:	4a03      	ldr	r2, [pc, #12]	; (8001274 <rcc_set_ppre1+0x10>)
 8001266:	4904      	ldr	r1, [pc, #16]	; (8001278 <rcc_set_ppre1+0x14>)
 8001268:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE1_MASK << RCC_CFGR_PPRE1_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 800126a:	0200      	lsls	r0, r0, #8
	uint32_t reg = RCC_CFGR
 800126c:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 800126e:	4318      	orrs	r0, r3
 8001270:	6010      	str	r0, [r2, #0]
}
 8001272:	4770      	bx	lr
 8001274:	4002100c 	.word	0x4002100c
 8001278:	fffff8ff 	.word	0xfffff8ff

0800127c <rcc_set_ppre2>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb2pre
 */

void rcc_set_ppre2(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 800127c:	4a03      	ldr	r2, [pc, #12]	; (800128c <rcc_set_ppre2+0x10>)
 800127e:	4904      	ldr	r1, [pc, #16]	; (8001290 <rcc_set_ppre2+0x14>)
 8001280:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE2_MASK << RCC_CFGR_PPRE2_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8001282:	02c0      	lsls	r0, r0, #11
	uint32_t reg = RCC_CFGR
 8001284:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8001286:	4318      	orrs	r0, r3
 8001288:	6010      	str	r0, [r2, #0]
}
 800128a:	4770      	bx	lr
 800128c:	4002100c 	.word	0x4002100c
 8001290:	ffffc7ff 	.word	0xffffc7ff

08001294 <rcc_set_hpre>:
 * @param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
 */

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8001294:	21f0      	movs	r1, #240	; 0xf0
 8001296:	4a03      	ldr	r2, [pc, #12]	; (80012a4 <rcc_set_hpre+0x10>)
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8001298:	0100      	lsls	r0, r0, #4
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 800129a:	6813      	ldr	r3, [r2, #0]
 800129c:	438b      	bics	r3, r1
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 800129e:	4318      	orrs	r0, r3
 80012a0:	6010      	str	r0, [r2, #0]
}
 80012a2:	4770      	bx	lr
 80012a4:	4002100c 	.word	0x4002100c

080012a8 <rcc_set_msi_range>:
*
 * @param msi_range desired range @ref rcc_icscr_msirange
 */
void rcc_set_msi_range(uint32_t msi_range)
{
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 80012a8:	4a03      	ldr	r2, [pc, #12]	; (80012b8 <rcc_set_msi_range+0x10>)
 80012aa:	4904      	ldr	r1, [pc, #16]	; (80012bc <rcc_set_msi_range+0x14>)
 80012ac:	6813      	ldr	r3, [r2, #0]
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 80012ae:	0340      	lsls	r0, r0, #13
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 80012b0:	400b      	ands	r3, r1
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 80012b2:	4318      	orrs	r0, r3
 80012b4:	6010      	str	r0, [r2, #0]
}
 80012b6:	4770      	bx	lr
 80012b8:	40021004 	.word	0x40021004
 80012bc:	ffff1fff 	.word	0xffff1fff

080012c0 <rcc_set_peripheral_clk_sel>:
void rcc_set_peripheral_clk_sel(uint32_t periph, uint32_t sel)
{
	uint8_t shift;
	uint32_t mask;

	switch (periph) {
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <rcc_set_peripheral_clk_sel+0x50>)
{
 80012c2:	000a      	movs	r2, r1
 80012c4:	b510      	push	{r4, lr}
	switch (periph) {
 80012c6:	4298      	cmp	r0, r3
 80012c8:	d01c      	beq.n	8001304 <rcc_set_peripheral_clk_sel+0x44>
 80012ca:	d80b      	bhi.n	80012e4 <rcc_set_peripheral_clk_sel+0x24>
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <rcc_set_peripheral_clk_sel+0x54>)
 80012ce:	4298      	cmp	r0, r3
 80012d0:	d01a      	beq.n	8001308 <rcc_set_peripheral_clk_sel+0x48>
 80012d2:	4911      	ldr	r1, [pc, #68]	; (8001318 <rcc_set_peripheral_clk_sel+0x58>)
			shift = RCC_CCIPR_I2C3SEL_SHIFT;
			mask = RCC_CCIPR_I2C3SEL_MASK;
			break;

		case I2C1_BASE:
			shift = RCC_CCIPR_I2C1SEL_SHIFT;
 80012d4:	230c      	movs	r3, #12
	switch (periph) {
 80012d6:	4288      	cmp	r0, r1
 80012d8:	d00b      	beq.n	80012f2 <rcc_set_peripheral_clk_sel+0x32>
 80012da:	4910      	ldr	r1, [pc, #64]	; (800131c <rcc_set_peripheral_clk_sel+0x5c>)
			shift = RCC_CCIPR_LPUART1SEL_SHIFT;
			mask = RCC_CCIPR_LPUART1SEL_MASK;
			break;

		case USART2_BASE:
			shift = RCC_CCIPR_USART2SEL_SHIFT;
 80012dc:	3b0a      	subs	r3, #10
	switch (periph) {
 80012de:	4288      	cmp	r0, r1
 80012e0:	d007      	beq.n	80012f2 <rcc_set_peripheral_clk_sel+0x32>
			return;
	}

	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
	RCC_CCIPR = reg32 | (sel << shift);
}
 80012e2:	bd10      	pop	{r4, pc}
	switch (periph) {
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <rcc_set_peripheral_clk_sel+0x60>)
 80012e6:	4298      	cmp	r0, r3
 80012e8:	d010      	beq.n	800130c <rcc_set_peripheral_clk_sel+0x4c>
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <rcc_set_peripheral_clk_sel+0x64>)
 80012ec:	4298      	cmp	r0, r3
 80012ee:	d1f8      	bne.n	80012e2 <rcc_set_peripheral_clk_sel+0x22>
			shift = RCC_CCIPR_USART1SEL_SHIFT;
 80012f0:	2300      	movs	r3, #0
	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
 80012f2:	2003      	movs	r0, #3
 80012f4:	4098      	lsls	r0, r3
	RCC_CCIPR = reg32 | (sel << shift);
 80012f6:	409a      	lsls	r2, r3
	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
 80012f8:	4c0b      	ldr	r4, [pc, #44]	; (8001328 <rcc_set_peripheral_clk_sel+0x68>)
 80012fa:	6821      	ldr	r1, [r4, #0]
 80012fc:	4381      	bics	r1, r0
	RCC_CCIPR = reg32 | (sel << shift);
 80012fe:	4311      	orrs	r1, r2
 8001300:	6021      	str	r1, [r4, #0]
 8001302:	e7ee      	b.n	80012e2 <rcc_set_peripheral_clk_sel+0x22>
	switch (periph) {
 8001304:	2310      	movs	r3, #16
 8001306:	e7f4      	b.n	80012f2 <rcc_set_peripheral_clk_sel+0x32>
			shift = RCC_CCIPR_LPUART1SEL_SHIFT;
 8001308:	230a      	movs	r3, #10
 800130a:	e7f2      	b.n	80012f2 <rcc_set_peripheral_clk_sel+0x32>
			shift = RCC_CCIPR_LPTIM1SEL_SHIFT;
 800130c:	2312      	movs	r3, #18
 800130e:	e7f0      	b.n	80012f2 <rcc_set_peripheral_clk_sel+0x32>
 8001310:	40007800 	.word	0x40007800
 8001314:	40004800 	.word	0x40004800
 8001318:	40005400 	.word	0x40005400
 800131c:	40004400 	.word	0x40004400
 8001320:	40007c00 	.word	0x40007c00
 8001324:	40013800 	.word	0x40013800
 8001328:	4002104c 	.word	0x4002104c

0800132c <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <rcc_periph_clock_enable+0x18>)
 800132e:	0942      	lsrs	r2, r0, #5
 8001330:	18d2      	adds	r2, r2, r3
 8001332:	231f      	movs	r3, #31
 8001334:	4018      	ands	r0, r3
 8001336:	3b1e      	subs	r3, #30
 8001338:	4083      	lsls	r3, r0
 800133a:	6811      	ldr	r1, [r2, #0]
 800133c:	430b      	orrs	r3, r1
 800133e:	6013      	str	r3, [r2, #0]
}
 8001340:	4770      	bx	lr
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	40021000 	.word	0x40021000

08001348 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8001348:	4a06      	ldr	r2, [pc, #24]	; (8001364 <rcc_periph_reset_pulse+0x1c>)
 800134a:	0943      	lsrs	r3, r0, #5
 800134c:	189b      	adds	r3, r3, r2
 800134e:	221f      	movs	r2, #31
 8001350:	4010      	ands	r0, r2
 8001352:	3a1e      	subs	r2, #30
 8001354:	4082      	lsls	r2, r0
 8001356:	6819      	ldr	r1, [r3, #0]
 8001358:	4311      	orrs	r1, r2
 800135a:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 800135c:	6819      	ldr	r1, [r3, #0]
 800135e:	4391      	bics	r1, r2
 8001360:	6019      	str	r1, [r3, #0]
}
 8001362:	4770      	bx	lr
 8001364:	40021000 	.word	0x40021000

08001368 <rtc_unlock>:
/** @brief Unlock write access to the RTC registers

*/
void rtc_unlock(void)
{
	RTC_WPR = 0xca;
 8001368:	22ca      	movs	r2, #202	; 0xca
 800136a:	4b02      	ldr	r3, [pc, #8]	; (8001374 <rtc_unlock+0xc>)
 800136c:	601a      	str	r2, [r3, #0]
	RTC_WPR = 0x53;
 800136e:	3a77      	subs	r2, #119	; 0x77
 8001370:	601a      	str	r2, [r3, #0]
}
 8001372:	4770      	bx	lr
 8001374:	40002824 	.word	0x40002824

08001378 <rtc_lock>:
/** @brief Lock write access to the RTC registers

*/
void rtc_lock(void)
{
	RTC_WPR = 0xff;
 8001378:	22ff      	movs	r2, #255	; 0xff
 800137a:	4b01      	ldr	r3, [pc, #4]	; (8001380 <rtc_lock+0x8>)
 800137c:	601a      	str	r2, [r3, #0]
}
 800137e:	4770      	bx	lr
 8001380:	40002824 	.word	0x40002824

08001384 <rtc_clear_wakeup_flag>:

@details This function should be called first in the rtc_wkup_isr()
*/
void rtc_clear_wakeup_flag(void)
{
	RTC_ISR &= ~RTC_ISR_WUTF;
 8001384:	4a02      	ldr	r2, [pc, #8]	; (8001390 <rtc_clear_wakeup_flag+0xc>)
 8001386:	4903      	ldr	r1, [pc, #12]	; (8001394 <rtc_clear_wakeup_flag+0x10>)
 8001388:	6813      	ldr	r3, [r2, #0]
 800138a:	400b      	ands	r3, r1
 800138c:	6013      	str	r3, [r2, #0]
}
 800138e:	4770      	bx	lr
 8001390:	4000280c 	.word	0x4000280c
 8001394:	fffffbff 	.word	0xfffffbff

08001398 <spi_xfer>:
uint16_t spi_xfer(uint32_t spi, uint16_t data)
{
	spi_write(spi, data);

	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8001398:	2301      	movs	r3, #1
	SPI_DR(spi) = data;
 800139a:	60c1      	str	r1, [r0, #12]
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 800139c:	6882      	ldr	r2, [r0, #8]
 800139e:	421a      	tst	r2, r3
 80013a0:	d0fc      	beq.n	800139c <spi_xfer+0x4>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 80013a2:	68c0      	ldr	r0, [r0, #12]
 80013a4:	b280      	uxth	r0, r0
}
 80013a6:	4770      	bx	lr

080013a8 <timer_enable_counter>:
tim_reg_base
*/

void timer_enable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_CEN;
 80013a8:	2301      	movs	r3, #1
 80013aa:	6802      	ldr	r2, [r0, #0]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	6003      	str	r3, [r0, #0]
}
 80013b0:	4770      	bx	lr

080013b2 <timer_disable_counter>:
tim_reg_base
*/

void timer_disable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_CEN;
 80013b2:	2201      	movs	r2, #1
 80013b4:	6803      	ldr	r3, [r0, #0]
 80013b6:	4393      	bics	r3, r2
 80013b8:	6003      	str	r3, [r0, #0]
}
 80013ba:	4770      	bx	lr

080013bc <timer_set_prescaler>:
@param[in] value Unsigned int32. Prescaler values 0...0xFFFF.
*/

void timer_set_prescaler(uint32_t timer_peripheral, uint32_t value)
{
	TIM_PSC(timer_peripheral) = value;
 80013bc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80013be:	4770      	bx	lr

080013c0 <timer_get_counter>:
@returns Unsigned int32. Counter value.
*/

uint32_t timer_get_counter(uint32_t timer_peripheral)
{
	return TIM_CNT(timer_peripheral);
 80013c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 80013c2:	4770      	bx	lr

080013c4 <usart_set_baudrate>:
void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;

#if defined USART1
	if ((usart == USART1)
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <usart_set_baudrate+0x44>)
{
 80013c6:	b570      	push	{r4, r5, r6, lr}
 80013c8:	0005      	movs	r5, r0
 80013ca:	000c      	movs	r4, r1
 80013cc:	084e      	lsrs	r6, r1, #1
	if ((usart == USART1)
 80013ce:	4298      	cmp	r0, r3
 80013d0:	d107      	bne.n	80013e2 <usart_set_baudrate+0x1e>
#if defined USART6
		|| (usart == USART6)
#endif
		) {
		clock = rcc_apb2_frequency;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <usart_set_baudrate+0x48>)
 80013d4:	6818      	ldr	r0, [r3, #0]
			+ ((clock % baud) * 256 + baud / 2) / baud;
		return;
	}
#endif

	USART_BRR(usart) = (clock + baud / 2) / baud;
 80013d6:	0021      	movs	r1, r4
 80013d8:	1830      	adds	r0, r6, r0
 80013da:	f001 f929 	bl	8002630 <__udivsi3>
 80013de:	60e8      	str	r0, [r5, #12]
 80013e0:	e010      	b.n	8001404 <usart_set_baudrate+0x40>
	uint32_t clock = rcc_apb1_frequency;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <usart_set_baudrate+0x4c>)
 80013e4:	6818      	ldr	r0, [r3, #0]
	if (usart == LPUART1) {
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <usart_set_baudrate+0x50>)
 80013e8:	429d      	cmp	r5, r3
 80013ea:	d1f4      	bne.n	80013d6 <usart_set_baudrate+0x12>
		USART_BRR(usart) = (clock / baud) * 256
 80013ec:	f001 f9a6 	bl	800273c <__aeabi_uidivmod>
 80013f0:	0005      	movs	r5, r0
			+ ((clock % baud) * 256 + baud / 2) / baud;
 80013f2:	0208      	lsls	r0, r1, #8
 80013f4:	1980      	adds	r0, r0, r6
 80013f6:	0021      	movs	r1, r4
 80013f8:	f001 f91a 	bl	8002630 <__udivsi3>
		USART_BRR(usart) = (clock / baud) * 256
 80013fc:	022d      	lsls	r5, r5, #8
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <usart_set_baudrate+0x54>)
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8001400:	1940      	adds	r0, r0, r5
		USART_BRR(usart) = (clock / baud) * 256
 8001402:	6018      	str	r0, [r3, #0]
}
 8001404:	bd70      	pop	{r4, r5, r6, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	40013800 	.word	0x40013800
 800140c:	20000048 	.word	0x20000048
 8001410:	20000044 	.word	0x20000044
 8001414:	40004800 	.word	0x40004800
 8001418:	4000480c 	.word	0x4000480c

0800141c <usart_set_databits>:
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
 800141c:	2908      	cmp	r1, #8
 800141e:	d104      	bne.n	800142a <usart_set_databits+0xe>
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 8001420:	6803      	ldr	r3, [r0, #0]
 8001422:	4a04      	ldr	r2, [pc, #16]	; (8001434 <usart_set_databits+0x18>)
 8001424:	4013      	ands	r3, r2
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8001426:	6003      	str	r3, [r0, #0]
	}
}
 8001428:	4770      	bx	lr
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	6802      	ldr	r2, [r0, #0]
 800142e:	015b      	lsls	r3, r3, #5
 8001430:	4313      	orrs	r3, r2
 8001432:	e7f8      	b.n	8001426 <usart_set_databits+0xa>
 8001434:	ffffefff 	.word	0xffffefff

08001438 <usart_set_stopbits>:

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 8001438:	6843      	ldr	r3, [r0, #4]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 800143a:	4a02      	ldr	r2, [pc, #8]	; (8001444 <usart_set_stopbits+0xc>)
 800143c:	4013      	ands	r3, r2
 800143e:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 8001440:	6043      	str	r3, [r0, #4]
}
 8001442:	4770      	bx	lr
 8001444:	ffffcfff 	.word	0xffffcfff

08001448 <usart_set_parity>:

void usart_set_parity(uint32_t usart, uint32_t parity)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 8001448:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 800144a:	4a02      	ldr	r2, [pc, #8]	; (8001454 <usart_set_parity+0xc>)
 800144c:	4013      	ands	r3, r2
 800144e:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8001450:	6003      	str	r3, [r0, #0]
}
 8001452:	4770      	bx	lr
 8001454:	fffff9ff 	.word	0xfffff9ff

08001458 <usart_set_mode>:
void usart_set_mode(uint32_t usart, uint32_t mode)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8001458:	220c      	movs	r2, #12
	reg32 = USART_CR1(usart);
 800145a:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 800145c:	4393      	bics	r3, r2
 800145e:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8001460:	6003      	str	r3, [r0, #0]
}
 8001462:	4770      	bx	lr

08001464 <usart_set_flow_control>:

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 8001464:	6883      	ldr	r3, [r0, #8]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 8001466:	4a02      	ldr	r2, [pc, #8]	; (8001470 <usart_set_flow_control+0xc>)
 8001468:	4013      	ands	r3, r2
 800146a:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 800146c:	6083      	str	r3, [r0, #8]
}
 800146e:	4770      	bx	lr
 8001470:	fffffcff 	.word	0xfffffcff

08001474 <usart_enable>:
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 8001474:	2301      	movs	r3, #1
 8001476:	6802      	ldr	r2, [r0, #0]
 8001478:	4313      	orrs	r3, r2
 800147a:	6003      	str	r3, [r0, #0]
}
 800147c:	4770      	bx	lr

0800147e <usart_disable>:
usart_reg_base
*/

void usart_disable(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_UE;
 800147e:	2201      	movs	r2, #1
 8001480:	6803      	ldr	r3, [r0, #0]
 8001482:	4393      	bics	r3, r2
 8001484:	6003      	str	r3, [r0, #0]
}
 8001486:	4770      	bx	lr

08001488 <usart_send_blocking>:
usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(uint32_t usart, uint16_t data)
{
 8001488:	b570      	push	{r4, r5, r6, lr}
 800148a:	000d      	movs	r5, r1
 800148c:	0004      	movs	r4, r0
	usart_wait_send_ready(usart);
 800148e:	f000 f80d 	bl	80014ac <usart_wait_send_ready>
	usart_send(usart, data);
 8001492:	0029      	movs	r1, r5
 8001494:	0020      	movs	r0, r4
 8001496:	f000 f801 	bl	800149c <usart_send>
}
 800149a:	bd70      	pop	{r4, r5, r6, pc}

0800149c <usart_send>:
 */

void usart_send(uint32_t usart, uint16_t data)
{
	/* Send data. */
	USART_TDR(usart) = (data & USART_TDR_MASK);
 800149c:	05c9      	lsls	r1, r1, #23
 800149e:	0dc9      	lsrs	r1, r1, #23
 80014a0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80014a2:	4770      	bx	lr

080014a4 <usart_recv>:
 */

uint16_t usart_recv(uint32_t usart)
{
	/* Receive data. */
	return USART_RDR(usart) & USART_RDR_MASK;
 80014a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80014a6:	05c0      	lsls	r0, r0, #23
 80014a8:	0dc0      	lsrs	r0, r0, #23
}
 80014aa:	4770      	bx	lr

080014ac <usart_wait_send_ready>:
 */

void usart_wait_send_ready(uint32_t usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_ISR(usart) & USART_ISR_TXE) == 0);
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	69c2      	ldr	r2, [r0, #28]
 80014b0:	421a      	tst	r2, r3
 80014b2:	d0fc      	beq.n	80014ae <usart_wait_send_ready+0x2>
}
 80014b4:	4770      	bx	lr

080014b6 <usart_get_flag>:
 * @returns boolean: flag set.
 */

bool usart_get_flag(uint32_t usart, uint32_t flag)
{
	return ((USART_ISR(usart) & flag) != 0);
 80014b6:	69c0      	ldr	r0, [r0, #28]
 80014b8:	4008      	ands	r0, r1
 80014ba:	1e41      	subs	r1, r0, #1
 80014bc:	4188      	sbcs	r0, r1
 80014be:	b2c0      	uxtb	r0, r0
}
 80014c0:	4770      	bx	lr
	...

080014c4 <usbd_init>:
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char * const *strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 80014c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014c6:	001d      	movs	r5, r3
 80014c8:	ab0a      	add	r3, sp, #40	; 0x28
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	0016      	movs	r6, r2
 80014ce:	9301      	str	r3, [sp, #4]
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 80014d0:	6803      	ldr	r3, [r0, #0]
{
 80014d2:	000f      	movs	r7, r1
 80014d4:	0004      	movs	r4, r0
	usbd_dev = driver->init();
 80014d6:	4798      	blx	r3

	usbd_dev->driver = driver;
 80014d8:	0003      	movs	r3, r0
 80014da:	33dc      	adds	r3, #220	; 0xdc
 80014dc:	601c      	str	r4, [r3, #0]
	usbd_dev->desc = dev;
	usbd_dev->config = conf;
	usbd_dev->strings = strings;
	usbd_dev->num_strings = num_strings;
 80014de:	9b08      	ldr	r3, [sp, #32]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
	    _usbd_control_in;

	int i;
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
		usbd_dev->user_callback_set_config[i] = NULL;
 80014e0:	0002      	movs	r2, r0
	usbd_dev->num_strings = num_strings;
 80014e2:	60c3      	str	r3, [r0, #12]
	usbd_dev->ctrl_buf = control_buffer;
 80014e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
		usbd_dev->user_callback_set_config[i] = NULL;
 80014e6:	32c8      	adds	r2, #200	; 0xc8
	usbd_dev->ctrl_buf = control_buffer;
 80014e8:	6103      	str	r3, [r0, #16]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 80014ea:	9b01      	ldr	r3, [sp, #4]
	usbd_dev->desc = dev;
 80014ec:	6007      	str	r7, [r0, #0]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 80014ee:	8283      	strh	r3, [r0, #20]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <usbd_init+0x48>)
	usbd_dev->config = conf;
 80014f2:	6046      	str	r6, [r0, #4]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 80014f4:	6703      	str	r3, [r0, #112]	; 0x70
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <usbd_init+0x4c>)
	usbd_dev->strings = strings;
 80014f8:	6085      	str	r5, [r0, #8]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 80014fa:	66c3      	str	r3, [r0, #108]	; 0x6c
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <usbd_init+0x50>)
 80014fe:	6683      	str	r3, [r0, #104]	; 0x68
		usbd_dev->user_callback_set_config[i] = NULL;
 8001500:	2300      	movs	r3, #0
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	6053      	str	r3, [r2, #4]
 8001506:	6093      	str	r3, [r2, #8]
 8001508:	60d3      	str	r3, [r2, #12]
	}

	return usbd_dev;
}
 800150a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800150c:	08001743 	.word	0x08001743
 8001510:	080017ad 	.word	0x080017ad
 8001514:	0800182f 	.word	0x0800182f

08001518 <usbd_register_reset_callback>:

void usbd_register_reset_callback(usbd_device *usbd_dev, void (*callback)(void))
{
	usbd_dev->user_callback_reset = callback;
 8001518:	61c1      	str	r1, [r0, #28]
}
 800151a:	4770      	bx	lr

0800151c <usbd_ep_setup>:
	}
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size, usbd_endpoint_callback callback)
{
 800151c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 800151e:	0004      	movs	r4, r0
 8001520:	9d06      	ldr	r5, [sp, #24]
 8001522:	34dc      	adds	r4, #220	; 0xdc
 8001524:	6824      	ldr	r4, [r4, #0]
 8001526:	9500      	str	r5, [sp, #0]
 8001528:	68a4      	ldr	r4, [r4, #8]
 800152a:	47a0      	blx	r4
}
 800152c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

0800152e <_usbd_reset>:
{
 800152e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	usbd_dev->current_address = 0;
 8001530:	2500      	movs	r5, #0
{
 8001532:	0004      	movs	r4, r0
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 8001534:	6803      	ldr	r3, [r0, #0]
	usbd_dev->current_address = 0;
 8001536:	82c5      	strh	r5, [r0, #22]
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 8001538:	79db      	ldrb	r3, [r3, #7]
 800153a:	002a      	movs	r2, r5
 800153c:	0029      	movs	r1, r5
 800153e:	9500      	str	r5, [sp, #0]
 8001540:	f7ff ffec 	bl	800151c <usbd_ep_setup>
	usbd_dev->driver->set_address(usbd_dev, 0);
 8001544:	0023      	movs	r3, r4
 8001546:	33dc      	adds	r3, #220	; 0xdc
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	0029      	movs	r1, r5
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	0020      	movs	r0, r4
 8001550:	4798      	blx	r3
	if (usbd_dev->user_callback_reset) {
 8001552:	69e3      	ldr	r3, [r4, #28]
 8001554:	42ab      	cmp	r3, r5
 8001556:	d000      	beq.n	800155a <_usbd_reset+0x2c>
		usbd_dev->user_callback_reset();
 8001558:	4798      	blx	r3
}
 800155a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

0800155c <usbd_ep_write_packet>:

uint16_t usbd_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			 const void *buf, uint16_t len)
{
 800155c:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 800155e:	0004      	movs	r4, r0
 8001560:	34dc      	adds	r4, #220	; 0xdc
 8001562:	6824      	ldr	r4, [r4, #0]
 8001564:	69e4      	ldr	r4, [r4, #28]
 8001566:	47a0      	blx	r4
}
 8001568:	bd10      	pop	{r4, pc}

0800156a <usbd_ep_read_packet>:

uint16_t usbd_ep_read_packet(usbd_device *usbd_dev, uint8_t addr, void *buf,
			     uint16_t len)
{
 800156a:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 800156c:	0004      	movs	r4, r0
 800156e:	34dc      	adds	r4, #220	; 0xdc
 8001570:	6824      	ldr	r4, [r4, #0]
 8001572:	6a24      	ldr	r4, [r4, #32]
 8001574:	47a0      	blx	r4
}
 8001576:	bd10      	pop	{r4, pc}

08001578 <usbd_ep_stall_set>:

void usbd_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 8001578:	0003      	movs	r3, r0
{
 800157a:	b510      	push	{r4, lr}
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 800157c:	33dc      	adds	r3, #220	; 0xdc
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	4798      	blx	r3
}
 8001584:	bd10      	pop	{r4, pc}

08001586 <usbd_ep_stall_get>:

uint8_t usbd_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 8001586:	0003      	movs	r3, r0
{
 8001588:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 800158a:	33dc      	adds	r3, #220	; 0xdc
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4798      	blx	r3
}
 8001592:	bd10      	pop	{r4, pc}

08001594 <usbd_ep_nak_set>:

void usbd_ep_nak_set(usbd_device *usbd_dev, uint8_t addr, uint8_t nak)
{
	usbd_dev->driver->ep_nak_set(usbd_dev, addr, nak);
 8001594:	0003      	movs	r3, r0
{
 8001596:	b510      	push	{r4, lr}
	usbd_dev->driver->ep_nak_set(usbd_dev, addr, nak);
 8001598:	33dc      	adds	r3, #220	; 0xdc
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	4798      	blx	r3
}
 80015a0:	bd10      	pop	{r4, pc}

080015a2 <usb_control_send_chunk>:

	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
 80015a2:	b570      	push	{r4, r5, r6, lr}
 80015a4:	0005      	movs	r5, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
 80015a6:	6803      	ldr	r3, [r0, #0]
{
 80015a8:	0004      	movs	r4, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
 80015aa:	79d9      	ldrb	r1, [r3, #7]
			usbd_dev->control_state.ctrl_len) {
 80015ac:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 80015ae:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80015b0:	352c      	adds	r5, #44	; 0x2c
	if (usbd_dev->desc->bMaxPacketSize0 <
 80015b2:	4299      	cmp	r1, r3
 80015b4:	d20e      	bcs.n	80015d4 <usb_control_send_chunk+0x32>
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 80015b6:	000b      	movs	r3, r1
 80015b8:	2100      	movs	r1, #0
 80015ba:	f7ff ffcf 	bl	800155c <usbd_ep_write_packet>
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->desc->bMaxPacketSize0);
		usbd_dev->control_state.state = DATA_IN;
 80015be:	2302      	movs	r3, #2
 80015c0:	702b      	strb	r3, [r5, #0]
		usbd_dev->control_state.ctrl_buf +=
			usbd_dev->desc->bMaxPacketSize0;
 80015c2:	6823      	ldr	r3, [r4, #0]
 80015c4:	79d9      	ldrb	r1, [r3, #7]
		usbd_dev->control_state.ctrl_buf +=
 80015c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80015c8:	185a      	adds	r2, r3, r1
		usbd_dev->control_state.ctrl_len -=
 80015ca:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf +=
 80015cc:	63a2      	str	r2, [r4, #56]	; 0x38
		usbd_dev->control_state.ctrl_len -=
 80015ce:	1a5b      	subs	r3, r3, r1
 80015d0:	87a3      	strh	r3, [r4, #60]	; 0x3c
			DATA_IN : LAST_DATA_IN;
		usbd_dev->control_state.needs_zlp = false;
		usbd_dev->control_state.ctrl_len = 0;
		usbd_dev->control_state.ctrl_buf = NULL;
	}
}
 80015d2:	bd70      	pop	{r4, r5, r6, pc}
		usbd_ep_write_packet(usbd_dev, 0,
 80015d4:	2100      	movs	r1, #0
 80015d6:	f7ff ffc1 	bl	800155c <usbd_ep_write_packet>
			usbd_dev->control_state.needs_zlp ?
 80015da:	0022      	movs	r2, r4
 80015dc:	3244      	adds	r2, #68	; 0x44
			DATA_IN : LAST_DATA_IN;
 80015de:	7813      	ldrb	r3, [r2, #0]
 80015e0:	4259      	negs	r1, r3
 80015e2:	414b      	adcs	r3, r1
 80015e4:	3302      	adds	r3, #2
		usbd_dev->control_state.state =
 80015e6:	702b      	strb	r3, [r5, #0]
		usbd_dev->control_state.needs_zlp = false;
 80015e8:	2300      	movs	r3, #0
 80015ea:	7013      	strb	r3, [r2, #0]
		usbd_dev->control_state.ctrl_len = 0;
 80015ec:	87a3      	strh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf = NULL;
 80015ee:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80015f0:	e7ef      	b.n	80015d2 <usb_control_send_chunk+0x30>

080015f2 <usb_control_request_dispatch>:
{
	int i, result = 0;
	struct user_control_callback *cb = usbd_dev->user_control_callback;

	/* Call user command hook function. */
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 80015f2:	0003      	movs	r3, r0
{
 80015f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f6:	0005      	movs	r5, r0
 80015f8:	0004      	movs	r4, r0
 80015fa:	000e      	movs	r6, r1
 80015fc:	b087      	sub	sp, #28
 80015fe:	3368      	adds	r3, #104	; 0x68
 8001600:	3548      	adds	r5, #72	; 0x48
 8001602:	9305      	str	r3, [sp, #20]
		if (cb[i].cb == NULL) {
 8001604:	682b      	ldr	r3, [r5, #0]
 8001606:	0027      	movs	r7, r4
 8001608:	469c      	mov	ip, r3
 800160a:	0023      	movs	r3, r4
 800160c:	3338      	adds	r3, #56	; 0x38
 800160e:	9304      	str	r3, [sp, #16]
 8001610:	4663      	mov	r3, ip
 8001612:	373c      	adds	r7, #60	; 0x3c
 8001614:	9703      	str	r7, [sp, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d107      	bne.n	800162a <usb_control_request_dispatch+0x38>
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 800161a:	0031      	movs	r1, r6
 800161c:	0020      	movs	r0, r4
 800161e:	9b03      	ldr	r3, [sp, #12]
 8001620:	9a04      	ldr	r2, [sp, #16]
 8001622:	f000 fc85 	bl	8001f30 <_usbd_standard_request>
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 8001626:	b007      	add	sp, #28
 8001628:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
 800162a:	7831      	ldrb	r1, [r6, #0]
 800162c:	796b      	ldrb	r3, [r5, #5]
 800162e:	792a      	ldrb	r2, [r5, #4]
 8001630:	400b      	ands	r3, r1
 8001632:	429a      	cmp	r2, r3
 8001634:	d004      	beq.n	8001640 <usb_control_request_dispatch+0x4e>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001636:	9b05      	ldr	r3, [sp, #20]
 8001638:	3508      	adds	r5, #8
 800163a:	429d      	cmp	r5, r3
 800163c:	d1e2      	bne.n	8001604 <usb_control_request_dispatch+0x12>
 800163e:	e7ec      	b.n	800161a <usb_control_request_dispatch+0x28>
			result = cb[i].cb(usbd_dev, req,
 8001640:	0023      	movs	r3, r4
 8001642:	3340      	adds	r3, #64	; 0x40
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	0031      	movs	r1, r6
 8001648:	0020      	movs	r0, r4
 800164a:	4667      	mov	r7, ip
 800164c:	9b03      	ldr	r3, [sp, #12]
 800164e:	9a04      	ldr	r2, [sp, #16]
 8001650:	47b8      	blx	r7
			if (result == USBD_REQ_HANDLED ||
 8001652:	2801      	cmp	r0, #1
 8001654:	d8ef      	bhi.n	8001636 <usb_control_request_dispatch+0x44>
 8001656:	e7e6      	b.n	8001626 <usb_control_request_dispatch+0x34>

08001658 <stall_transaction>:
{
 8001658:	b510      	push	{r4, lr}
	usbd_ep_stall_set(usbd_dev, 0, 1);
 800165a:	2201      	movs	r2, #1
{
 800165c:	0004      	movs	r4, r0
	usbd_ep_stall_set(usbd_dev, 0, 1);
 800165e:	2100      	movs	r1, #0
 8001660:	f7ff ff8a 	bl	8001578 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8001664:	2300      	movs	r3, #0
 8001666:	342c      	adds	r4, #44	; 0x2c
 8001668:	7023      	strb	r3, [r4, #0]
}
 800166a:	bd10      	pop	{r4, pc}

0800166c <usb_control_recv_chunk>:
{
 800166c:	b570      	push	{r4, r5, r6, lr}
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 800166e:	6803      	ldr	r3, [r0, #0]
 8001670:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8001672:	8ec5      	ldrh	r5, [r0, #54]	; 0x36
 8001674:	79db      	ldrb	r3, [r3, #7]
{
 8001676:	0004      	movs	r4, r0
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8001678:	1aad      	subs	r5, r5, r2
 800167a:	429d      	cmp	r5, r3
 800167c:	dd00      	ble.n	8001680 <usb_control_recv_chunk+0x14>
 800167e:	001d      	movs	r5, r3
				       usbd_dev->control_state.ctrl_buf +
 8001680:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8001682:	b2ae      	uxth	r6, r5
				       usbd_dev->control_state.ctrl_buf +
 8001684:	189a      	adds	r2, r3, r2
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8001686:	2100      	movs	r1, #0
 8001688:	0033      	movs	r3, r6
 800168a:	0020      	movs	r0, r4
 800168c:	f7ff ff6d 	bl	800156a <usbd_ep_read_packet>
	if (size != packetsize) {
 8001690:	4286      	cmp	r6, r0
 8001692:	d005      	beq.n	80016a0 <usb_control_recv_chunk+0x34>
		stall_transaction(usbd_dev);
 8001694:	0020      	movs	r0, r4
 8001696:	f7ff ffdf 	bl	8001658 <stall_transaction>
		return -1;
 800169a:	2001      	movs	r0, #1
 800169c:	4240      	negs	r0, r0
}
 800169e:	bd70      	pop	{r4, r5, r6, pc}
	usbd_dev->control_state.ctrl_len += size;
 80016a0:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80016a2:	b2a8      	uxth	r0, r5
 80016a4:	18f6      	adds	r6, r6, r3
 80016a6:	87a6      	strh	r6, [r4, #60]	; 0x3c
	return packetsize;
 80016a8:	e7f9      	b.n	800169e <usb_control_recv_chunk+0x32>

080016aa <usb_control_setup_read>:

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 80016aa:	b570      	push	{r4, r5, r6, lr}
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 80016ac:	6903      	ldr	r3, [r0, #16]
{
 80016ae:	0004      	movs	r4, r0
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 80016b0:	6383      	str	r3, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = req->wLength;
 80016b2:	79cb      	ldrb	r3, [r1, #7]
 80016b4:	798a      	ldrb	r2, [r1, #6]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	4313      	orrs	r3, r2
 80016ba:	8783      	strh	r3, [r0, #60]	; 0x3c
{
 80016bc:	000d      	movs	r5, r1

	if (usb_control_request_dispatch(usbd_dev, req)) {
 80016be:	f7ff ff98 	bl	80015f2 <usb_control_request_dispatch>
 80016c2:	2800      	cmp	r0, #0
 80016c4:	d021      	beq.n	800170a <usb_control_setup_read+0x60>
		if (req->wLength) {
 80016c6:	79eb      	ldrb	r3, [r5, #7]
 80016c8:	79aa      	ldrb	r2, [r5, #6]
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	4313      	orrs	r3, r2
 80016ce:	d013      	beq.n	80016f8 <usb_control_setup_read+0x4e>
			usbd_dev->control_state.needs_zlp =
				needs_zlp(usbd_dev->control_state.ctrl_len,
 80016d0:	6822      	ldr	r2, [r4, #0]
 80016d2:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 80016d4:	79d1      	ldrb	r1, [r2, #7]
	return false;
 80016d6:	2200      	movs	r2, #0
	if (len < wLength) {
 80016d8:	4283      	cmp	r3, r0
 80016da:	d906      	bls.n	80016ea <usb_control_setup_read+0x40>
		if (len && (len % ep_size == 0)) {
 80016dc:	4290      	cmp	r0, r2
 80016de:	d004      	beq.n	80016ea <usb_control_setup_read+0x40>
 80016e0:	f001 f916 	bl	8002910 <__aeabi_idivmod>
 80016e4:	424a      	negs	r2, r1
 80016e6:	414a      	adcs	r2, r1
 80016e8:	b2d2      	uxtb	r2, r2
			usbd_dev->control_state.needs_zlp =
 80016ea:	0023      	movs	r3, r4
 80016ec:	3344      	adds	r3, #68	; 0x44
					req->wLength,
					usbd_dev->desc->bMaxPacketSize0);
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 80016ee:	0020      	movs	r0, r4
			usbd_dev->control_state.needs_zlp =
 80016f0:	701a      	strb	r2, [r3, #0]
			usb_control_send_chunk(usbd_dev);
 80016f2:	f7ff ff56 	bl	80015a2 <usb_control_send_chunk>
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
	}
}
 80016f6:	bd70      	pop	{r4, r5, r6, pc}
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 80016f8:	001a      	movs	r2, r3
 80016fa:	0019      	movs	r1, r3
 80016fc:	0020      	movs	r0, r4
 80016fe:	f7ff ff2d 	bl	800155c <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8001702:	2304      	movs	r3, #4
 8001704:	342c      	adds	r4, #44	; 0x2c
 8001706:	7023      	strb	r3, [r4, #0]
}
 8001708:	e7f5      	b.n	80016f6 <usb_control_setup_read+0x4c>
		stall_transaction(usbd_dev);
 800170a:	0020      	movs	r0, r4
 800170c:	f7ff ffa4 	bl	8001658 <stall_transaction>
}
 8001710:	e7f1      	b.n	80016f6 <usb_control_setup_read+0x4c>

08001712 <usbd_register_control_callback>:
{
 8001712:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (usbd_dev->user_control_callback[i].cb) {
 8001714:	0007      	movs	r7, r0
{
 8001716:	0004      	movs	r4, r0
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001718:	2500      	movs	r5, #0
		if (usbd_dev->user_control_callback[i].cb) {
 800171a:	3748      	adds	r7, #72	; 0x48
 800171c:	00ee      	lsls	r6, r5, #3
 800171e:	59b8      	ldr	r0, [r7, r6]
 8001720:	2800      	cmp	r0, #0
 8001722:	d005      	beq.n	8001730 <usbd_register_control_callback+0x1e>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001724:	3501      	adds	r5, #1
 8001726:	2d04      	cmp	r5, #4
 8001728:	d1f8      	bne.n	800171c <usbd_register_control_callback+0xa>
	return -1;
 800172a:	2001      	movs	r0, #1
 800172c:	4240      	negs	r0, r0
}
 800172e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		usbd_dev->user_control_callback[i].type = type;
 8001730:	19a4      	adds	r4, r4, r6
 8001732:	0025      	movs	r5, r4
 8001734:	354c      	adds	r5, #76	; 0x4c
 8001736:	7029      	strb	r1, [r5, #0]
		usbd_dev->user_control_callback[i].type_mask = type_mask;
 8001738:	0021      	movs	r1, r4
 800173a:	314d      	adds	r1, #77	; 0x4d
 800173c:	700a      	strb	r2, [r1, #0]
		usbd_dev->user_control_callback[i].cb = callback;
 800173e:	64a3      	str	r3, [r4, #72]	; 0x48
		return 0;
 8001740:	e7f5      	b.n	800172e <usbd_register_control_callback+0x1c>

08001742 <_usbd_control_setup>:

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 8001742:	b570      	push	{r4, r5, r6, lr}
	struct usb_setup_data *req = &usbd_dev->control_state.req;
	(void)ea;

	usbd_dev->control_state.complete = NULL;
 8001744:	2500      	movs	r5, #0
{
 8001746:	0004      	movs	r4, r0

	usbd_ep_nak_set(usbd_dev, 0, 1);
 8001748:	2201      	movs	r2, #1
 800174a:	0029      	movs	r1, r5
	usbd_dev->control_state.complete = NULL;
 800174c:	6405      	str	r5, [r0, #64]	; 0x40
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 800174e:	0006      	movs	r6, r0
	usbd_ep_nak_set(usbd_dev, 0, 1);
 8001750:	f7ff ff20 	bl	8001594 <usbd_ep_nak_set>

	if (req->wLength == 0) {
 8001754:	0023      	movs	r3, r4
 8001756:	3336      	adds	r3, #54	; 0x36
 8001758:	781a      	ldrb	r2, [r3, #0]
 800175a:	3301      	adds	r3, #1
 800175c:	781b      	ldrb	r3, [r3, #0]
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 800175e:	3630      	adds	r6, #48	; 0x30
	if (req->wLength == 0) {
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	4313      	orrs	r3, r2
 8001764:	42ab      	cmp	r3, r5
 8001766:	d104      	bne.n	8001772 <_usbd_control_setup+0x30>
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
		usb_control_setup_read(usbd_dev, req);
 8001768:	0031      	movs	r1, r6
 800176a:	0020      	movs	r0, r4
 800176c:	f7ff ff9d 	bl	80016aa <usb_control_setup_read>
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 8001770:	bd70      	pop	{r4, r5, r6, pc}
	} else if (req->bmRequestType & 0x80) {
 8001772:	7832      	ldrb	r2, [r6, #0]
 8001774:	2a7f      	cmp	r2, #127	; 0x7f
 8001776:	d8f7      	bhi.n	8001768 <_usbd_control_setup+0x26>
	if (req->wLength > usbd_dev->ctrl_buf_len) {
 8001778:	8aa2      	ldrh	r2, [r4, #20]
 800177a:	429a      	cmp	r2, r3
 800177c:	d203      	bcs.n	8001786 <_usbd_control_setup+0x44>
		stall_transaction(usbd_dev);
 800177e:	0020      	movs	r0, r4
 8001780:	f7ff ff6a 	bl	8001658 <stall_transaction>
		return;
 8001784:	e7f4      	b.n	8001770 <_usbd_control_setup+0x2e>
		usbd_dev->control_state.state = LAST_DATA_OUT;
 8001786:	0029      	movs	r1, r5
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8001788:	6922      	ldr	r2, [r4, #16]
	usbd_dev->control_state.ctrl_len = 0;
 800178a:	87a5      	strh	r5, [r4, #60]	; 0x3c
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 800178c:	63a2      	str	r2, [r4, #56]	; 0x38
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 800178e:	6822      	ldr	r2, [r4, #0]
	usbd_ep_nak_set(usbd_dev, 0, 0);
 8001790:	0020      	movs	r0, r4
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8001792:	79d2      	ldrb	r2, [r2, #7]
		usbd_dev->control_state.state = LAST_DATA_OUT;
 8001794:	429a      	cmp	r2, r3
 8001796:	4169      	adcs	r1, r5
 8001798:	0022      	movs	r2, r4
 800179a:	000b      	movs	r3, r1
 800179c:	322c      	adds	r2, #44	; 0x2c
 800179e:	3305      	adds	r3, #5
 80017a0:	7013      	strb	r3, [r2, #0]
	usbd_ep_nak_set(usbd_dev, 0, 0);
 80017a2:	0029      	movs	r1, r5
 80017a4:	002a      	movs	r2, r5
 80017a6:	f7ff fef5 	bl	8001594 <usbd_ep_nak_set>
}
 80017aa:	e7e1      	b.n	8001770 <_usbd_control_setup+0x2e>

080017ac <_usbd_control_out>:

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
 80017ac:	b570      	push	{r4, r5, r6, lr}
	(void)ea;

	switch (usbd_dev->control_state.state) {
 80017ae:	0005      	movs	r5, r0
 80017b0:	352c      	adds	r5, #44	; 0x2c
 80017b2:	782b      	ldrb	r3, [r5, #0]
{
 80017b4:	0004      	movs	r4, r0
	switch (usbd_dev->control_state.state) {
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d011      	beq.n	80017de <_usbd_control_out+0x32>
 80017ba:	2b07      	cmp	r3, #7
 80017bc:	d026      	beq.n	800180c <_usbd_control_out+0x60>
 80017be:	2b05      	cmp	r3, #5
 80017c0:	d121      	bne.n	8001806 <_usbd_control_out+0x5a>
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 80017c2:	f7ff ff53 	bl	800166c <usb_control_recv_chunk>
 80017c6:	2800      	cmp	r0, #0
 80017c8:	db08      	blt.n	80017dc <_usbd_control_out+0x30>
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
					usbd_dev->control_state.ctrl_len) <=
 80017ca:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
		if ((usbd_dev->control_state.req.wLength -
 80017cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80017ce:	1a9b      	subs	r3, r3, r2
					usbd_dev->desc->bMaxPacketSize0) {
 80017d0:	6822      	ldr	r2, [r4, #0]
 80017d2:	79d2      	ldrb	r2, [r2, #7]
		if ((usbd_dev->control_state.req.wLength -
 80017d4:	4293      	cmp	r3, r2
 80017d6:	dc01      	bgt.n	80017dc <_usbd_control_out+0x30>
			usbd_dev->control_state.state = LAST_DATA_OUT;
 80017d8:	2306      	movs	r3, #6
		 */
		if (usb_control_request_dispatch(usbd_dev,
					&(usbd_dev->control_state.req))) {
			/* Go to status stage on success. */
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
			usbd_dev->control_state.state = STATUS_IN;
 80017da:	702b      	strb	r3, [r5, #0]
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 80017dc:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 80017de:	f7ff ff45 	bl	800166c <usb_control_recv_chunk>
 80017e2:	2800      	cmp	r0, #0
 80017e4:	dbfa      	blt.n	80017dc <_usbd_control_out+0x30>
		if (usb_control_request_dispatch(usbd_dev,
 80017e6:	0021      	movs	r1, r4
 80017e8:	0020      	movs	r0, r4
 80017ea:	3130      	adds	r1, #48	; 0x30
 80017ec:	f7ff ff01 	bl	80015f2 <usb_control_request_dispatch>
 80017f0:	2800      	cmp	r0, #0
 80017f2:	d007      	beq.n	8001804 <_usbd_control_out+0x58>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 80017f4:	2300      	movs	r3, #0
 80017f6:	0020      	movs	r0, r4
 80017f8:	001a      	movs	r2, r3
 80017fa:	0019      	movs	r1, r3
 80017fc:	f7ff feae 	bl	800155c <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8001800:	2304      	movs	r3, #4
 8001802:	e7ea      	b.n	80017da <_usbd_control_out+0x2e>
			stall_transaction(usbd_dev);
 8001804:	0020      	movs	r0, r4
		stall_transaction(usbd_dev);
 8001806:	f7ff ff27 	bl	8001658 <stall_transaction>
}
 800180a:	e7e7      	b.n	80017dc <_usbd_control_out+0x30>
		usbd_ep_read_packet(usbd_dev, 0, NULL, 0);
 800180c:	2300      	movs	r3, #0
 800180e:	001a      	movs	r2, r3
 8001810:	0019      	movs	r1, r3
 8001812:	f7ff feaa 	bl	800156a <usbd_ep_read_packet>
		usbd_dev->control_state.state = IDLE;
 8001816:	2300      	movs	r3, #0
 8001818:	702b      	strb	r3, [r5, #0]
		if (usbd_dev->control_state.complete) {
 800181a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <_usbd_control_out+0x7c>
			usbd_dev->control_state.complete(usbd_dev,
 8001820:	0021      	movs	r1, r4
 8001822:	0020      	movs	r0, r4
 8001824:	3130      	adds	r1, #48	; 0x30
 8001826:	4798      	blx	r3
		usbd_dev->control_state.complete = NULL;
 8001828:	2300      	movs	r3, #0
 800182a:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 800182c:	e7d6      	b.n	80017dc <_usbd_control_out+0x30>

0800182e <_usbd_control_in>:

void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
 800182e:	b570      	push	{r4, r5, r6, lr}
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8001830:	0005      	movs	r5, r0
 8001832:	352c      	adds	r5, #44	; 0x2c
 8001834:	782b      	ldrb	r3, [r5, #0]
{
 8001836:	0004      	movs	r4, r0
	switch (usbd_dev->control_state.state) {
 8001838:	2b03      	cmp	r3, #3
 800183a:	d006      	beq.n	800184a <_usbd_control_in+0x1c>
 800183c:	2b04      	cmp	r3, #4
 800183e:	d00b      	beq.n	8001858 <_usbd_control_in+0x2a>
 8001840:	2b02      	cmp	r3, #2
 8001842:	d121      	bne.n	8001888 <_usbd_control_in+0x5a>
	case DATA_IN:
		usb_control_send_chunk(usbd_dev);
 8001844:	f7ff fead 	bl	80015a2 <usb_control_send_chunk>
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8001848:	bd70      	pop	{r4, r5, r6, pc}
		usbd_dev->control_state.state = STATUS_OUT;
 800184a:	2307      	movs	r3, #7
		usbd_ep_nak_set(usbd_dev, 0, 0);
 800184c:	2200      	movs	r2, #0
		usbd_dev->control_state.state = STATUS_OUT;
 800184e:	702b      	strb	r3, [r5, #0]
		usbd_ep_nak_set(usbd_dev, 0, 0);
 8001850:	0011      	movs	r1, r2
 8001852:	f7ff fe9f 	bl	8001594 <usbd_ep_nak_set>
		break;
 8001856:	e7f7      	b.n	8001848 <_usbd_control_in+0x1a>
		if (usbd_dev->control_state.complete) {
 8001858:	0006      	movs	r6, r0
 800185a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800185c:	3630      	adds	r6, #48	; 0x30
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <_usbd_control_in+0x38>
			usbd_dev->control_state.complete(usbd_dev,
 8001862:	0031      	movs	r1, r6
 8001864:	4798      	blx	r3
		if ((req->bmRequestType == 0) &&
 8001866:	7833      	ldrb	r3, [r6, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10a      	bne.n	8001882 <_usbd_control_in+0x54>
 800186c:	7873      	ldrb	r3, [r6, #1]
 800186e:	2b05      	cmp	r3, #5
 8001870:	d107      	bne.n	8001882 <_usbd_control_in+0x54>
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8001872:	0023      	movs	r3, r4
 8001874:	3332      	adds	r3, #50	; 0x32
 8001876:	7819      	ldrb	r1, [r3, #0]
 8001878:	33aa      	adds	r3, #170	; 0xaa
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0020      	movs	r0, r4
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4798      	blx	r3
		usbd_dev->control_state.state = IDLE;
 8001882:	2300      	movs	r3, #0
 8001884:	702b      	strb	r3, [r5, #0]
		break;
 8001886:	e7df      	b.n	8001848 <_usbd_control_in+0x1a>
		stall_transaction(usbd_dev);
 8001888:	f7ff fee6 	bl	8001658 <stall_transaction>
}
 800188c:	e7dc      	b.n	8001848 <_usbd_control_in+0x1a>

0800188e <usb_standard_set_address>:

static enum usbd_request_return_codes
usb_standard_set_address(usbd_device *usbd_dev,
			 struct usb_setup_data *req, uint8_t **buf,
			 uint16_t *len)
{
 800188e:	b510      	push	{r4, lr}
	(void)req;
	(void)buf;
	(void)len;

	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 8001890:	780c      	ldrb	r4, [r1, #0]
 8001892:	2c00      	cmp	r4, #0
 8001894:	d114      	bne.n	80018c0 <usb_standard_set_address+0x32>
 8001896:	78cb      	ldrb	r3, [r1, #3]
 8001898:	788a      	ldrb	r2, [r1, #2]
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	4313      	orrs	r3, r2
 800189e:	2b7f      	cmp	r3, #127	; 0x7f
 80018a0:	d80c      	bhi.n	80018bc <usb_standard_set_address+0x2e>
		return USBD_REQ_NOTSUPP;
	}

	usbd_dev->current_address = req->wValue;
 80018a2:	7583      	strb	r3, [r0, #22]

	/*
	 * Special workaround for STM32F10[57] that require the address
	 * to be set here. This is undocumented!
	 */
	if (usbd_dev->driver->set_address_before_status) {
 80018a4:	0003      	movs	r3, r0
 80018a6:	33dc      	adds	r3, #220	; 0xdc
 80018a8:	681b      	ldr	r3, [r3, #0]
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
	}

	return USBD_REQ_HANDLED;
 80018aa:	3401      	adds	r4, #1
	if (usbd_dev->driver->set_address_before_status) {
 80018ac:	001a      	movs	r2, r3
 80018ae:	3230      	adds	r2, #48	; 0x30
 80018b0:	7812      	ldrb	r2, [r2, #0]
 80018b2:	2a00      	cmp	r2, #0
 80018b4:	d002      	beq.n	80018bc <usb_standard_set_address+0x2e>
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
 80018b6:	7889      	ldrb	r1, [r1, #2]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4798      	blx	r3
}
 80018bc:	0020      	movs	r0, r4
 80018be:	bd10      	pop	{r4, pc}
		return USBD_REQ_NOTSUPP;
 80018c0:	2400      	movs	r4, #0
 80018c2:	e7fb      	b.n	80018bc <usb_standard_set_address+0x2e>

080018c4 <usb_standard_set_configuration>:

static enum usbd_request_return_codes
usb_standard_set_configuration(usbd_device *usbd_dev,
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
 80018c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	(void)req;
	(void)buf;
	(void)len;

	if (req->wValue > 0) {
 80018c6:	78ca      	ldrb	r2, [r1, #3]
 80018c8:	788b      	ldrb	r3, [r1, #2]
 80018ca:	0212      	lsls	r2, r2, #8
{
 80018cc:	0004      	movs	r4, r0
 80018ce:	000d      	movs	r5, r1
	if (req->wValue > 0) {
 80018d0:	431a      	orrs	r2, r3
 80018d2:	d010      	beq.n	80018f6 <usb_standard_set_configuration+0x32>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 80018d4:	6803      	ldr	r3, [r0, #0]
			if (req->wValue
			    == usbd_dev->config[i].bConfigurationValue) {
 80018d6:	260d      	movs	r6, #13
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 80018d8:	7c58      	ldrb	r0, [r3, #17]
 80018da:	2300      	movs	r3, #0
 80018dc:	4298      	cmp	r0, r3
 80018de:	d801      	bhi.n	80018e4 <usb_standard_set_configuration+0x20>
				found_index = i;
				break;
			}
		}
		if (found_index < 0) {
			return USBD_REQ_NOTSUPP;
 80018e0:	2000      	movs	r0, #0
			}
		}
	}

	return USBD_REQ_HANDLED;
}
 80018e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			    == usbd_dev->config[i].bConfigurationValue) {
 80018e4:	0031      	movs	r1, r6
 80018e6:	4359      	muls	r1, r3
 80018e8:	6867      	ldr	r7, [r4, #4]
 80018ea:	1879      	adds	r1, r7, r1
			if (req->wValue
 80018ec:	7949      	ldrb	r1, [r1, #5]
 80018ee:	4291      	cmp	r1, r2
 80018f0:	d003      	beq.n	80018fa <usb_standard_set_configuration+0x36>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 80018f2:	3301      	adds	r3, #1
 80018f4:	e7f2      	b.n	80018dc <usb_standard_set_configuration+0x18>
	int found_index = -1;
 80018f6:	2301      	movs	r3, #1
 80018f8:	425b      	negs	r3, r3
	usbd_dev->current_config = found_index + 1;
 80018fa:	3301      	adds	r3, #1
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	75e3      	strb	r3, [r4, #23]
	if (usbd_dev->current_config > 0) {
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10c      	bne.n	800191e <usb_standard_set_configuration+0x5a>
	usbd_dev->driver->ep_reset(usbd_dev);
 8001904:	0023      	movs	r3, r4
	if (usbd_dev->user_callback_set_config[0]) {
 8001906:	0026      	movs	r6, r4
	usbd_dev->driver->ep_reset(usbd_dev);
 8001908:	33dc      	adds	r3, #220	; 0xdc
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	0020      	movs	r0, r4
 800190e:	68db      	ldr	r3, [r3, #12]
	if (usbd_dev->user_callback_set_config[0]) {
 8001910:	36c8      	adds	r6, #200	; 0xc8
	usbd_dev->driver->ep_reset(usbd_dev);
 8001912:	4798      	blx	r3
	if (usbd_dev->user_callback_set_config[0]) {
 8001914:	6833      	ldr	r3, [r6, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d11c      	bne.n	8001954 <usb_standard_set_configuration+0x90>
	return USBD_REQ_HANDLED;
 800191a:	2001      	movs	r0, #1
 800191c:	e7e1      	b.n	80018e2 <usb_standard_set_configuration+0x1e>
		cfg = &usbd_dev->config[usbd_dev->current_config - 1];
 800191e:	220d      	movs	r2, #13
 8001920:	4353      	muls	r3, r2
 8001922:	6862      	ldr	r2, [r4, #4]
 8001924:	3b0d      	subs	r3, #13
 8001926:	18d3      	adds	r3, r2, r3
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001928:	2200      	movs	r2, #0
				*cfg->interface[i].cur_altsetting = 0;
 800192a:	0016      	movs	r6, r2
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 800192c:	7919      	ldrb	r1, [r3, #4]
 800192e:	4291      	cmp	r1, r2
 8001930:	d9e8      	bls.n	8001904 <usb_standard_set_configuration+0x40>
			if (cfg->interface[i].cur_altsetting) {
 8001932:	7a98      	ldrb	r0, [r3, #10]
 8001934:	7a59      	ldrb	r1, [r3, #9]
 8001936:	0200      	lsls	r0, r0, #8
 8001938:	4308      	orrs	r0, r1
 800193a:	7ad9      	ldrb	r1, [r3, #11]
 800193c:	0409      	lsls	r1, r1, #16
 800193e:	4308      	orrs	r0, r1
 8001940:	7b19      	ldrb	r1, [r3, #12]
 8001942:	0609      	lsls	r1, r1, #24
 8001944:	4301      	orrs	r1, r0
 8001946:	0110      	lsls	r0, r2, #4
 8001948:	5841      	ldr	r1, [r0, r1]
 800194a:	2900      	cmp	r1, #0
 800194c:	d000      	beq.n	8001950 <usb_standard_set_configuration+0x8c>
				*cfg->interface[i].cur_altsetting = 0;
 800194e:	700e      	strb	r6, [r1, #0]
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001950:	3201      	adds	r2, #1
 8001952:	e7eb      	b.n	800192c <usb_standard_set_configuration+0x68>
			usbd_dev->user_control_callback[i].cb = NULL;
 8001954:	2300      	movs	r3, #0
 8001956:	0027      	movs	r7, r4
 8001958:	64a3      	str	r3, [r4, #72]	; 0x48
 800195a:	6523      	str	r3, [r4, #80]	; 0x50
 800195c:	65a3      	str	r3, [r4, #88]	; 0x58
 800195e:	6623      	str	r3, [r4, #96]	; 0x60
		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8001960:	37d8      	adds	r7, #216	; 0xd8
			if (usbd_dev->user_callback_set_config[i]) {
 8001962:	6833      	ldr	r3, [r6, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <usb_standard_set_configuration+0xb0>
				usbd_dev->user_callback_set_config[i](usbd_dev,
 8001968:	78e9      	ldrb	r1, [r5, #3]
 800196a:	78aa      	ldrb	r2, [r5, #2]
 800196c:	0209      	lsls	r1, r1, #8
 800196e:	0020      	movs	r0, r4
 8001970:	4311      	orrs	r1, r2
 8001972:	4798      	blx	r3
		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8001974:	3604      	adds	r6, #4
 8001976:	42b7      	cmp	r7, r6
 8001978:	d1f3      	bne.n	8001962 <usb_standard_set_configuration+0x9e>
 800197a:	e7ce      	b.n	800191a <usb_standard_set_configuration+0x56>

0800197c <usb_standard_get_configuration>:
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
	(void)req;

	if (*len > 1) {
 800197c:	8819      	ldrh	r1, [r3, #0]
{
 800197e:	b510      	push	{r4, lr}
	if (*len > 1) {
 8001980:	2901      	cmp	r1, #1
 8001982:	d901      	bls.n	8001988 <usb_standard_get_configuration+0xc>
		*len = 1;
 8001984:	2101      	movs	r1, #1
 8001986:	8019      	strh	r1, [r3, #0]
	}
	if (usbd_dev->current_config > 0) {
 8001988:	7dc1      	ldrb	r1, [r0, #23]
 800198a:	6814      	ldr	r4, [r2, #0]
 800198c:	2900      	cmp	r1, #0
 800198e:	d008      	beq.n	80019a2 <usb_standard_get_configuration+0x26>
		const struct usb_config_descriptor *cfg =
			&usbd_dev->config[usbd_dev->current_config - 1];
		(*buf)[0] = cfg->bConfigurationValue;
 8001990:	220d      	movs	r2, #13
 8001992:	4351      	muls	r1, r2
 8001994:	6843      	ldr	r3, [r0, #4]
 8001996:	185b      	adds	r3, r3, r1
 8001998:	3b0d      	subs	r3, #13
 800199a:	795b      	ldrb	r3, [r3, #5]
 800199c:	7023      	strb	r3, [r4, #0]
	} else {
		(*buf)[0] = 0;
	}

	return USBD_REQ_HANDLED;
}
 800199e:	2001      	movs	r0, #1
 80019a0:	bd10      	pop	{r4, pc}
		(*buf)[0] = 0;
 80019a2:	7021      	strb	r1, [r4, #0]
 80019a4:	e7fb      	b.n	800199e <usb_standard_get_configuration+0x22>

080019a6 <usb_standard_get_interface>:

static enum usbd_request_return_codes
usb_standard_get_interface(usbd_device *usbd_dev,
			   struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 80019a6:	b570      	push	{r4, r5, r6, lr}
	uint8_t *cur_altsetting;
	const struct usb_config_descriptor *cfx =
		&usbd_dev->config[usbd_dev->current_config - 1];
 80019a8:	240d      	movs	r4, #13
 80019aa:	7dc5      	ldrb	r5, [r0, #23]
	const struct usb_config_descriptor *cfx =
 80019ac:	6840      	ldr	r0, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 80019ae:	436c      	muls	r4, r5
 80019b0:	3c0d      	subs	r4, #13
	const struct usb_config_descriptor *cfx =
 80019b2:	1904      	adds	r4, r0, r4

	if (req->wIndex >= cfx->bNumInterfaces) {
 80019b4:	794d      	ldrb	r5, [r1, #5]
 80019b6:	7908      	ldrb	r0, [r1, #4]
 80019b8:	7926      	ldrb	r6, [r4, #4]
 80019ba:	022d      	lsls	r5, r5, #8
 80019bc:	4305      	orrs	r5, r0
		return USBD_REQ_NOTSUPP;
 80019be:	2000      	movs	r0, #0
	if (req->wIndex >= cfx->bNumInterfaces) {
 80019c0:	42ae      	cmp	r6, r5
 80019c2:	d917      	bls.n	80019f4 <usb_standard_get_interface+0x4e>
	}

	*len = 1;
 80019c4:	3001      	adds	r0, #1
 80019c6:	8018      	strh	r0, [r3, #0]
	cur_altsetting = cfx->interface[req->wIndex].cur_altsetting;
 80019c8:	7aa3      	ldrb	r3, [r4, #10]
 80019ca:	7a60      	ldrb	r0, [r4, #9]
 80019cc:	021b      	lsls	r3, r3, #8
 80019ce:	4303      	orrs	r3, r0
 80019d0:	7ae0      	ldrb	r0, [r4, #11]
 80019d2:	0400      	lsls	r0, r0, #16
 80019d4:	4303      	orrs	r3, r0
 80019d6:	7b20      	ldrb	r0, [r4, #12]
 80019d8:	790c      	ldrb	r4, [r1, #4]
 80019da:	0600      	lsls	r0, r0, #24
 80019dc:	4318      	orrs	r0, r3
 80019de:	794b      	ldrb	r3, [r1, #5]
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	4323      	orrs	r3, r4
 80019e4:	011b      	lsls	r3, r3, #4
 80019e6:	581b      	ldr	r3, [r3, r0]
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 80019e8:	1e19      	subs	r1, r3, #0
 80019ea:	d000      	beq.n	80019ee <usb_standard_get_interface+0x48>
 80019ec:	7819      	ldrb	r1, [r3, #0]

	return USBD_REQ_HANDLED;
 80019ee:	2001      	movs	r0, #1
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 80019f0:	6813      	ldr	r3, [r2, #0]
 80019f2:	7019      	strb	r1, [r3, #0]
}
 80019f4:	bd70      	pop	{r4, r5, r6, pc}

080019f6 <usb_standard_device_get_status>:
	(void)usbd_dev;
	(void)req;

	/* bit 0: self powered */
	/* bit 1: remote wakeup */
	if (*len > 2) {
 80019f6:	8819      	ldrh	r1, [r3, #0]
 80019f8:	2902      	cmp	r1, #2
 80019fa:	d901      	bls.n	8001a00 <usb_standard_device_get_status+0xa>
		*len = 2;
 80019fc:	2102      	movs	r1, #2
 80019fe:	8019      	strh	r1, [r3, #0]
	}
	(*buf)[0] = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	6811      	ldr	r1, [r2, #0]
	(*buf)[1] = 0;

	return USBD_REQ_HANDLED;
}
 8001a04:	2001      	movs	r0, #1
	(*buf)[0] = 0;
 8001a06:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	7053      	strb	r3, [r2, #1]
}
 8001a0c:	4770      	bx	lr

08001a0e <usb_standard_endpoint_get_status>:

static enum usbd_request_return_codes
usb_standard_endpoint_get_status(usbd_device *usbd_dev,
				 struct usb_setup_data *req,
				 uint8_t **buf, uint16_t *len)
{
 8001a0e:	b510      	push	{r4, lr}
 8001a10:	0014      	movs	r4, r2
	(void)req;

	if (*len > 2) {
 8001a12:	881a      	ldrh	r2, [r3, #0]
 8001a14:	2a02      	cmp	r2, #2
 8001a16:	d901      	bls.n	8001a1c <usb_standard_endpoint_get_status+0xe>
		*len = 2;
 8001a18:	2202      	movs	r2, #2
 8001a1a:	801a      	strh	r2, [r3, #0]
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8001a1c:	7909      	ldrb	r1, [r1, #4]
 8001a1e:	f7ff fdb2 	bl	8001586 <usbd_ep_stall_get>
 8001a22:	1e43      	subs	r3, r0, #1
 8001a24:	4198      	sbcs	r0, r3
	(*buf)[1] = 0;
 8001a26:	2200      	movs	r2, #0
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8001a28:	6823      	ldr	r3, [r4, #0]
 8001a2a:	7018      	strb	r0, [r3, #0]
	(*buf)[1] = 0;
 8001a2c:	6823      	ldr	r3, [r4, #0]

	return USBD_REQ_HANDLED;
}
 8001a2e:	2001      	movs	r0, #1
	(*buf)[1] = 0;
 8001a30:	705a      	strb	r2, [r3, #1]
}
 8001a32:	bd10      	pop	{r4, pc}

08001a34 <usb_standard_endpoint_stall>:

static enum usbd_request_return_codes
usb_standard_endpoint_stall(usbd_device *usbd_dev,
			    struct usb_setup_data *req,
			    uint8_t **buf, uint16_t *len)
{
 8001a34:	b510      	push	{r4, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 1);
 8001a36:	2201      	movs	r2, #1
 8001a38:	7909      	ldrb	r1, [r1, #4]
 8001a3a:	f7ff fd9d 	bl	8001578 <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 8001a3e:	2001      	movs	r0, #1
 8001a40:	bd10      	pop	{r4, pc}

08001a42 <usb_standard_endpoint_unstall>:

static enum usbd_request_return_codes
usb_standard_endpoint_unstall(usbd_device *usbd_dev,
			      struct usb_setup_data *req,
			      uint8_t **buf, uint16_t *len)
{
 8001a42:	b510      	push	{r4, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	7909      	ldrb	r1, [r1, #4]
 8001a48:	f7ff fd96 	bl	8001578 <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	bd10      	pop	{r4, pc}

08001a50 <usb_standard_set_interface>:
{
 8001a50:	b570      	push	{r4, r5, r6, lr}
		&usbd_dev->config[usbd_dev->current_config - 1];
 8001a52:	260d      	movs	r6, #13
{
 8001a54:	001d      	movs	r5, r3
		&usbd_dev->config[usbd_dev->current_config - 1];
 8001a56:	7dc3      	ldrb	r3, [r0, #23]
	if (req->wIndex >= cfx->bNumInterfaces) {
 8001a58:	794c      	ldrb	r4, [r1, #5]
		&usbd_dev->config[usbd_dev->current_config - 1];
 8001a5a:	435e      	muls	r6, r3
	const struct usb_config_descriptor *cfx =
 8001a5c:	6843      	ldr	r3, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 8001a5e:	3e0d      	subs	r6, #13
	const struct usb_config_descriptor *cfx =
 8001a60:	199e      	adds	r6, r3, r6
	if (req->wIndex >= cfx->bNumInterfaces) {
 8001a62:	790b      	ldrb	r3, [r1, #4]
 8001a64:	0224      	lsls	r4, r4, #8
 8001a66:	431c      	orrs	r4, r3
 8001a68:	7933      	ldrb	r3, [r6, #4]
		return USBD_REQ_NOTSUPP;
 8001a6a:	2200      	movs	r2, #0
	if (req->wIndex >= cfx->bNumInterfaces) {
 8001a6c:	42a3      	cmp	r3, r4
 8001a6e:	d92b      	bls.n	8001ac8 <usb_standard_set_interface+0x78>
	iface = &cfx->interface[req->wIndex];
 8001a70:	7ab2      	ldrb	r2, [r6, #10]
 8001a72:	7a73      	ldrb	r3, [r6, #9]
 8001a74:	0212      	lsls	r2, r2, #8
 8001a76:	431a      	orrs	r2, r3
 8001a78:	7af3      	ldrb	r3, [r6, #11]
 8001a7a:	0124      	lsls	r4, r4, #4
 8001a7c:	041b      	lsls	r3, r3, #16
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	7b33      	ldrb	r3, [r6, #12]
 8001a82:	061b      	lsls	r3, r3, #24
 8001a84:	4313      	orrs	r3, r2
 8001a86:	191b      	adds	r3, r3, r4
	if (req->wValue >= iface->num_altsetting) {
 8001a88:	78cc      	ldrb	r4, [r1, #3]
 8001a8a:	788a      	ldrb	r2, [r1, #2]
 8001a8c:	791e      	ldrb	r6, [r3, #4]
 8001a8e:	0224      	lsls	r4, r4, #8
 8001a90:	4314      	orrs	r4, r2
		return USBD_REQ_NOTSUPP;
 8001a92:	2200      	movs	r2, #0
	if (req->wValue >= iface->num_altsetting) {
 8001a94:	42a6      	cmp	r6, r4
 8001a96:	d917      	bls.n	8001ac8 <usb_standard_set_interface+0x78>
	if (iface->cur_altsetting) {
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	2a00      	cmp	r2, #0
 8001a9c:	d012      	beq.n	8001ac4 <usb_standard_set_interface+0x74>
		*iface->cur_altsetting = req->wValue;
 8001a9e:	7014      	strb	r4, [r2, #0]
	if (usbd_dev->user_callback_set_altsetting) {
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	33d8      	adds	r3, #216	; 0xd8
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d008      	beq.n	8001abc <usb_standard_set_interface+0x6c>
			usbd_dev->user_callback_set_altsetting(usbd_dev,
 8001aaa:	78ca      	ldrb	r2, [r1, #3]
 8001aac:	788c      	ldrb	r4, [r1, #2]
 8001aae:	0212      	lsls	r2, r2, #8
 8001ab0:	4322      	orrs	r2, r4
 8001ab2:	790c      	ldrb	r4, [r1, #4]
 8001ab4:	7949      	ldrb	r1, [r1, #5]
 8001ab6:	0209      	lsls	r1, r1, #8
 8001ab8:	4321      	orrs	r1, r4
 8001aba:	4798      	blx	r3
	*len = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	2201      	movs	r2, #1
 8001ac0:	802b      	strh	r3, [r5, #0]
	return USBD_REQ_HANDLED;
 8001ac2:	e001      	b.n	8001ac8 <usb_standard_set_interface+0x78>
	} else if (req->wValue > 0) {
 8001ac4:	2c00      	cmp	r4, #0
 8001ac6:	d0eb      	beq.n	8001aa0 <usb_standard_set_interface+0x50>
}
 8001ac8:	0010      	movs	r0, r2
 8001aca:	bd70      	pop	{r4, r5, r6, pc}

08001acc <usb_standard_get_descriptor>:
{
 8001acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ace:	b08f      	sub	sp, #60	; 0x3c
 8001ad0:	9305      	str	r3, [sp, #20]
 8001ad2:	0014      	movs	r4, r2
	descr_idx = usb_descriptor_index(req->wValue);
 8001ad4:	78ca      	ldrb	r2, [r1, #3]
 8001ad6:	788b      	ldrb	r3, [r1, #2]
 8001ad8:	0212      	lsls	r2, r2, #8
 8001ada:	4313      	orrs	r3, r2
{
 8001adc:	0006      	movs	r6, r0
	return wValue >> 8;
 8001ade:	0a12      	lsrs	r2, r2, #8
	switch (usb_descriptor_type(req->wValue)) {
 8001ae0:	2a02      	cmp	r2, #2
 8001ae2:	d013      	beq.n	8001b0c <usb_standard_get_descriptor+0x40>
 8001ae4:	2a03      	cmp	r2, #3
 8001ae6:	d100      	bne.n	8001aea <usb_standard_get_descriptor+0x1e>
 8001ae8:	e152      	b.n	8001d90 <usb_standard_get_descriptor+0x2c4>
 8001aea:	2000      	movs	r0, #0
 8001aec:	2a01      	cmp	r2, #1
 8001aee:	d10b      	bne.n	8001b08 <usb_standard_get_descriptor+0x3c>
		*buf = (uint8_t *) usbd_dev->desc;
 8001af0:	6833      	ldr	r3, [r6, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 8001af2:	7819      	ldrb	r1, [r3, #0]
		*buf = (uint8_t *) usbd_dev->desc;
 8001af4:	6023      	str	r3, [r4, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 8001af6:	9b05      	ldr	r3, [sp, #20]
 8001af8:	881a      	ldrh	r2, [r3, #0]
 8001afa:	1c0b      	adds	r3, r1, #0
 8001afc:	4291      	cmp	r1, r2
 8001afe:	d900      	bls.n	8001b02 <usb_standard_get_descriptor+0x36>
 8001b00:	1c13      	adds	r3, r2, #0
 8001b02:	9a05      	ldr	r2, [sp, #20]
 8001b04:	8013      	strh	r3, [r2, #0]
		return USBD_REQ_HANDLED;
 8001b06:	2001      	movs	r0, #1
}
 8001b08:	b00f      	add	sp, #60	; 0x3c
 8001b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*buf = usbd_dev->ctrl_buf;
 8001b0c:	6902      	ldr	r2, [r0, #16]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8001b0e:	b2db      	uxtb	r3, r3
		*buf = usbd_dev->ctrl_buf;
 8001b10:	6022      	str	r2, [r4, #0]
 8001b12:	9206      	str	r2, [sp, #24]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8001b14:	9a05      	ldr	r2, [sp, #20]
 8001b16:	8814      	ldrh	r4, [r2, #0]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8001b18:	220d      	movs	r2, #13
 8001b1a:	4353      	muls	r3, r2
 8001b1c:	6842      	ldr	r2, [r0, #4]
 8001b1e:	18d1      	adds	r1, r2, r3
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8001b20:	5cd3      	ldrb	r3, [r2, r3]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8001b22:	9104      	str	r1, [sp, #16]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8001b24:	1c1f      	adds	r7, r3, #0
 8001b26:	42a3      	cmp	r3, r4
 8001b28:	d900      	bls.n	8001b2c <usb_standard_get_descriptor+0x60>
 8001b2a:	1c27      	adds	r7, r4, #0
 8001b2c:	b2bb      	uxth	r3, r7
 8001b2e:	001a      	movs	r2, r3
 8001b30:	9904      	ldr	r1, [sp, #16]
 8001b32:	9806      	ldr	r0, [sp, #24]
 8001b34:	9303      	str	r3, [sp, #12]
 8001b36:	f000 fd61 	bl	80025fc <memcpy>
	buf += count;
 8001b3a:	9a03      	ldr	r2, [sp, #12]
 8001b3c:	9b06      	ldr	r3, [sp, #24]
 8001b3e:	4694      	mov	ip, r2
	len -= count;
 8001b40:	1aa4      	subs	r4, r4, r2
	buf += count;
 8001b42:	4463      	add	r3, ip
 8001b44:	9302      	str	r3, [sp, #8]
	len -= count;
 8001b46:	b2a3      	uxth	r3, r4
 8001b48:	9301      	str	r3, [sp, #4]
	totallen += cfg->bLength;
 8001b4a:	9b04      	ldr	r3, [sp, #16]
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	ab0c      	add	r3, sp, #48	; 0x30
 8001b50:	80da      	strh	r2, [r3, #6]
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001b52:	2300      	movs	r3, #0
 8001b54:	9307      	str	r3, [sp, #28]
 8001b56:	9b04      	ldr	r3, [sp, #16]
 8001b58:	791a      	ldrb	r2, [r3, #4]
 8001b5a:	466b      	mov	r3, sp
 8001b5c:	8b9b      	ldrh	r3, [r3, #28]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d80a      	bhi.n	8001b78 <usb_standard_get_descriptor+0xac>
	memcpy((tmpbuf + 2), &totallen, sizeof(uint16_t));
 8001b62:	9806      	ldr	r0, [sp, #24]
 8001b64:	ab0c      	add	r3, sp, #48	; 0x30
 8001b66:	2202      	movs	r2, #2
 8001b68:	1d99      	adds	r1, r3, #6
 8001b6a:	3002      	adds	r0, #2
 8001b6c:	f000 fd46 	bl	80025fc <memcpy>
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8001b70:	9b05      	ldr	r3, [sp, #20]
 8001b72:	9a03      	ldr	r2, [sp, #12]
 8001b74:	801a      	strh	r2, [r3, #0]
		return USBD_REQ_HANDLED;
 8001b76:	e7c6      	b.n	8001b06 <usb_standard_get_descriptor+0x3a>
		if (cfg->interface[i].iface_assoc) {
 8001b78:	9b07      	ldr	r3, [sp, #28]
 8001b7a:	9a04      	ldr	r2, [sp, #16]
 8001b7c:	011b      	lsls	r3, r3, #4
 8001b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001b80:	9b04      	ldr	r3, [sp, #16]
 8001b82:	7a92      	ldrb	r2, [r2, #10]
 8001b84:	7a5b      	ldrb	r3, [r3, #9]
 8001b86:	0212      	lsls	r2, r2, #8
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	9b04      	ldr	r3, [sp, #16]
 8001b8c:	7adb      	ldrb	r3, [r3, #11]
 8001b8e:	041b      	lsls	r3, r3, #16
 8001b90:	431a      	orrs	r2, r3
 8001b92:	9b04      	ldr	r3, [sp, #16]
 8001b94:	7b1b      	ldrb	r3, [r3, #12]
 8001b96:	061b      	lsls	r3, r3, #24
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001b9c:	189b      	adds	r3, r3, r2
 8001b9e:	689c      	ldr	r4, [r3, #8]
 8001ba0:	2c00      	cmp	r4, #0
 8001ba2:	d01d      	beq.n	8001be0 <usb_standard_get_descriptor+0x114>
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 8001ba4:	7823      	ldrb	r3, [r4, #0]
 8001ba6:	9a01      	ldr	r2, [sp, #4]
 8001ba8:	1c1f      	adds	r7, r3, #0
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <usb_standard_get_descriptor+0xe6>
 8001bae:	466b      	mov	r3, sp
 8001bb0:	889f      	ldrh	r7, [r3, #4]
 8001bb2:	b2bf      	uxth	r7, r7
 8001bb4:	003a      	movs	r2, r7
 8001bb6:	0021      	movs	r1, r4
 8001bb8:	9802      	ldr	r0, [sp, #8]
 8001bba:	f000 fd1f 	bl	80025fc <memcpy>
			buf += count;
 8001bbe:	9b02      	ldr	r3, [sp, #8]
 8001bc0:	19db      	adds	r3, r3, r7
 8001bc2:	9302      	str	r3, [sp, #8]
			len -= count;
 8001bc4:	9b01      	ldr	r3, [sp, #4]
 8001bc6:	1bdb      	subs	r3, r3, r7
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	9301      	str	r3, [sp, #4]
			total += count;
 8001bcc:	9b03      	ldr	r3, [sp, #12]
 8001bce:	18ff      	adds	r7, r7, r3
 8001bd0:	b2bb      	uxth	r3, r7
 8001bd2:	9303      	str	r3, [sp, #12]
			totallen += assoc->bLength;
 8001bd4:	ab0c      	add	r3, sp, #48	; 0x30
 8001bd6:	1d9a      	adds	r2, r3, #6
 8001bd8:	8811      	ldrh	r1, [r2, #0]
 8001bda:	7823      	ldrb	r3, [r4, #0]
 8001bdc:	185b      	adds	r3, r3, r1
 8001bde:	8013      	strh	r3, [r2, #0]
{
 8001be0:	2300      	movs	r3, #0
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 8001be2:	9a04      	ldr	r2, [sp, #16]
 8001be4:	9308      	str	r3, [sp, #32]
 8001be6:	9b04      	ldr	r3, [sp, #16]
 8001be8:	7a92      	ldrb	r2, [r2, #10]
 8001bea:	7a5b      	ldrb	r3, [r3, #9]
 8001bec:	0212      	lsls	r2, r2, #8
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	9b04      	ldr	r3, [sp, #16]
 8001bf2:	7adb      	ldrb	r3, [r3, #11]
 8001bf4:	041b      	lsls	r3, r3, #16
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	9b04      	ldr	r3, [sp, #16]
 8001bfa:	7b1b      	ldrb	r3, [r3, #12]
 8001bfc:	061b      	lsls	r3, r3, #24
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001c02:	189b      	adds	r3, r3, r2
 8001c04:	466a      	mov	r2, sp
 8001c06:	7919      	ldrb	r1, [r3, #4]
 8001c08:	8c12      	ldrh	r2, [r2, #32]
 8001c0a:	4291      	cmp	r1, r2
 8001c0c:	d802      	bhi.n	8001c14 <usb_standard_get_descriptor+0x148>
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001c0e:	9b07      	ldr	r3, [sp, #28]
 8001c10:	3301      	adds	r3, #1
 8001c12:	e79f      	b.n	8001b54 <usb_standard_get_descriptor+0x88>
			const struct usb_interface_descriptor *iface =
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	2315      	movs	r3, #21
 8001c18:	9908      	ldr	r1, [sp, #32]
 8001c1a:	434b      	muls	r3, r1
 8001c1c:	18d4      	adds	r4, r2, r3
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8001c1e:	5cd3      	ldrb	r3, [r2, r3]
 8001c20:	9a01      	ldr	r2, [sp, #4]
 8001c22:	1c1f      	adds	r7, r3, #0
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d901      	bls.n	8001c2c <usb_standard_get_descriptor+0x160>
 8001c28:	466b      	mov	r3, sp
 8001c2a:	889f      	ldrh	r7, [r3, #4]
 8001c2c:	b2bf      	uxth	r7, r7
 8001c2e:	003a      	movs	r2, r7
 8001c30:	0021      	movs	r1, r4
 8001c32:	9802      	ldr	r0, [sp, #8]
 8001c34:	f000 fce2 	bl	80025fc <memcpy>
			buf += count;
 8001c38:	9b02      	ldr	r3, [sp, #8]
			totallen += iface->bLength;
 8001c3a:	7826      	ldrb	r6, [r4, #0]
			buf += count;
 8001c3c:	19db      	adds	r3, r3, r7
 8001c3e:	9302      	str	r3, [sp, #8]
			len -= count;
 8001c40:	9b01      	ldr	r3, [sp, #4]
 8001c42:	1bdb      	subs	r3, r3, r7
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	9301      	str	r3, [sp, #4]
			total += count;
 8001c48:	9b03      	ldr	r3, [sp, #12]
 8001c4a:	18ff      	adds	r7, r7, r3
 8001c4c:	b2bb      	uxth	r3, r7
 8001c4e:	9303      	str	r3, [sp, #12]
			totallen += iface->bLength;
 8001c50:	ab0c      	add	r3, sp, #48	; 0x30
 8001c52:	88da      	ldrh	r2, [r3, #6]
 8001c54:	18b6      	adds	r6, r6, r2
 8001c56:	b2b6      	uxth	r6, r6
 8001c58:	80de      	strh	r6, [r3, #6]
			if (iface->extra) {
 8001c5a:	7ba3      	ldrb	r3, [r4, #14]
 8001c5c:	7b61      	ldrb	r1, [r4, #13]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	430b      	orrs	r3, r1
 8001c62:	7be1      	ldrb	r1, [r4, #15]
 8001c64:	0409      	lsls	r1, r1, #16
 8001c66:	430b      	orrs	r3, r1
 8001c68:	7c21      	ldrb	r1, [r4, #16]
 8001c6a:	0609      	lsls	r1, r1, #24
 8001c6c:	4319      	orrs	r1, r3
 8001c6e:	d024      	beq.n	8001cba <usb_standard_get_descriptor+0x1ee>
				       count = MIN(len, iface->extralen));
 8001c70:	7ca3      	ldrb	r3, [r4, #18]
 8001c72:	7c65      	ldrb	r5, [r4, #17]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	432b      	orrs	r3, r5
 8001c78:	7ce5      	ldrb	r5, [r4, #19]
 8001c7a:	042d      	lsls	r5, r5, #16
 8001c7c:	432b      	orrs	r3, r5
 8001c7e:	7d25      	ldrb	r5, [r4, #20]
 8001c80:	062d      	lsls	r5, r5, #24
 8001c82:	431d      	orrs	r5, r3
 8001c84:	9b01      	ldr	r3, [sp, #4]
 8001c86:	429d      	cmp	r5, r3
 8001c88:	dd00      	ble.n	8001c8c <usb_standard_get_descriptor+0x1c0>
 8001c8a:	001d      	movs	r5, r3
 8001c8c:	b2af      	uxth	r7, r5
				memcpy(buf, iface->extra,
 8001c8e:	003a      	movs	r2, r7
 8001c90:	9802      	ldr	r0, [sp, #8]
 8001c92:	f000 fcb3 	bl	80025fc <memcpy>
				buf += count;
 8001c96:	9b02      	ldr	r3, [sp, #8]
 8001c98:	19db      	adds	r3, r3, r7
 8001c9a:	9302      	str	r3, [sp, #8]
				len -= count;
 8001c9c:	9b01      	ldr	r3, [sp, #4]
 8001c9e:	1bdb      	subs	r3, r3, r7
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	9301      	str	r3, [sp, #4]
				total += count;
 8001ca4:	9b03      	ldr	r3, [sp, #12]
 8001ca6:	19df      	adds	r7, r3, r7
 8001ca8:	b2bb      	uxth	r3, r7
 8001caa:	9303      	str	r3, [sp, #12]
				totallen += iface->extralen;
 8001cac:	7ca3      	ldrb	r3, [r4, #18]
 8001cae:	7c62      	ldrb	r2, [r4, #17]
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	199e      	adds	r6, r3, r6
 8001cb6:	ab0c      	add	r3, sp, #48	; 0x30
 8001cb8:	80de      	strh	r6, [r3, #6]
{
 8001cba:	2300      	movs	r3, #0
 8001cbc:	9309      	str	r3, [sp, #36]	; 0x24
			for (k = 0; k < iface->bNumEndpoints; k++) {
 8001cbe:	466b      	mov	r3, sp
 8001cc0:	7922      	ldrb	r2, [r4, #4]
 8001cc2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d802      	bhi.n	8001cce <usb_standard_get_descriptor+0x202>
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 8001cc8:	9b08      	ldr	r3, [sp, #32]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	e789      	b.n	8001be2 <usb_standard_get_descriptor+0x116>
				    &iface->endpoint[k];
 8001cce:	7aa2      	ldrb	r2, [r4, #10]
 8001cd0:	7a63      	ldrb	r3, [r4, #9]
 8001cd2:	0212      	lsls	r2, r2, #8
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	7ae3      	ldrb	r3, [r4, #11]
				const struct usb_endpoint_descriptor *ep =
 8001cd8:	9909      	ldr	r1, [sp, #36]	; 0x24
				    &iface->endpoint[k];
 8001cda:	041b      	lsls	r3, r3, #16
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	7b23      	ldrb	r3, [r4, #12]
 8001ce0:	061b      	lsls	r3, r3, #24
 8001ce2:	4313      	orrs	r3, r2
				const struct usb_endpoint_descriptor *ep =
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	434a      	muls	r2, r1
 8001ce8:	189d      	adds	r5, r3, r2
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 8001cea:	5c9b      	ldrb	r3, [r3, r2]
 8001cec:	9a01      	ldr	r2, [sp, #4]
 8001cee:	1c1f      	adds	r7, r3, #0
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <usb_standard_get_descriptor+0x22c>
 8001cf4:	466b      	mov	r3, sp
 8001cf6:	889f      	ldrh	r7, [r3, #4]
 8001cf8:	b2bf      	uxth	r7, r7
 8001cfa:	003a      	movs	r2, r7
 8001cfc:	0029      	movs	r1, r5
 8001cfe:	9802      	ldr	r0, [sp, #8]
 8001d00:	f000 fc7c 	bl	80025fc <memcpy>
				buf += count;
 8001d04:	9b02      	ldr	r3, [sp, #8]
				totallen += ep->bLength;
 8001d06:	aa0c      	add	r2, sp, #48	; 0x30
				buf += count;
 8001d08:	19db      	adds	r3, r3, r7
 8001d0a:	9302      	str	r3, [sp, #8]
				len -= count;
 8001d0c:	9b01      	ldr	r3, [sp, #4]
				totallen += ep->bLength;
 8001d0e:	88d1      	ldrh	r1, [r2, #6]
				len -= count;
 8001d10:	1bdb      	subs	r3, r3, r7
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	9301      	str	r3, [sp, #4]
				total += count;
 8001d16:	9b03      	ldr	r3, [sp, #12]
 8001d18:	18ff      	adds	r7, r7, r3
 8001d1a:	b2bb      	uxth	r3, r7
 8001d1c:	9303      	str	r3, [sp, #12]
				totallen += ep->bLength;
 8001d1e:	782b      	ldrb	r3, [r5, #0]
 8001d20:	185b      	adds	r3, r3, r1
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	930a      	str	r3, [sp, #40]	; 0x28
 8001d26:	80d3      	strh	r3, [r2, #6]
				if (ep->extra) {
 8001d28:	7a2b      	ldrb	r3, [r5, #8]
 8001d2a:	79e9      	ldrb	r1, [r5, #7]
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	430b      	orrs	r3, r1
 8001d30:	7a69      	ldrb	r1, [r5, #9]
 8001d32:	0409      	lsls	r1, r1, #16
 8001d34:	430b      	orrs	r3, r1
 8001d36:	7aa9      	ldrb	r1, [r5, #10]
 8001d38:	0609      	lsls	r1, r1, #24
 8001d3a:	4319      	orrs	r1, r3
 8001d3c:	d025      	beq.n	8001d8a <usb_standard_get_descriptor+0x2be>
					       count = MIN(len, ep->extralen));
 8001d3e:	7b2b      	ldrb	r3, [r5, #12]
 8001d40:	7aee      	ldrb	r6, [r5, #11]
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	4333      	orrs	r3, r6
 8001d46:	7b6e      	ldrb	r6, [r5, #13]
 8001d48:	0436      	lsls	r6, r6, #16
 8001d4a:	4333      	orrs	r3, r6
 8001d4c:	7bae      	ldrb	r6, [r5, #14]
 8001d4e:	0636      	lsls	r6, r6, #24
 8001d50:	431e      	orrs	r6, r3
 8001d52:	9b01      	ldr	r3, [sp, #4]
 8001d54:	429e      	cmp	r6, r3
 8001d56:	dd00      	ble.n	8001d5a <usb_standard_get_descriptor+0x28e>
 8001d58:	001e      	movs	r6, r3
 8001d5a:	b2b7      	uxth	r7, r6
					memcpy(buf, ep->extra,
 8001d5c:	003a      	movs	r2, r7
 8001d5e:	9802      	ldr	r0, [sp, #8]
 8001d60:	f000 fc4c 	bl	80025fc <memcpy>
					buf += count;
 8001d64:	9b02      	ldr	r3, [sp, #8]
 8001d66:	19db      	adds	r3, r3, r7
 8001d68:	9302      	str	r3, [sp, #8]
					len -= count;
 8001d6a:	9b01      	ldr	r3, [sp, #4]
 8001d6c:	1bdb      	subs	r3, r3, r7
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	9301      	str	r3, [sp, #4]
					total += count;
 8001d72:	9b03      	ldr	r3, [sp, #12]
 8001d74:	19df      	adds	r7, r3, r7
 8001d76:	b2bb      	uxth	r3, r7
 8001d78:	9303      	str	r3, [sp, #12]
					totallen += ep->extralen;
 8001d7a:	7b2b      	ldrb	r3, [r5, #12]
 8001d7c:	7aea      	ldrb	r2, [r5, #11]
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	4313      	orrs	r3, r2
 8001d82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001d84:	189b      	adds	r3, r3, r2
 8001d86:	aa0c      	add	r2, sp, #48	; 0x30
 8001d88:	80d3      	strh	r3, [r2, #6]
			for (k = 0; k < iface->bNumEndpoints; k++) {
 8001d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	e795      	b.n	8001cbc <usb_standard_get_descriptor+0x1f0>
 8001d90:	b2db      	uxtb	r3, r3
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;
 8001d92:	6905      	ldr	r5, [r0, #16]
		if (descr_idx == 0) {
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d110      	bne.n	8001dba <usb_standard_get_descriptor+0x2ee>
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 8001d98:	3309      	adds	r3, #9
 8001d9a:	70ab      	strb	r3, [r5, #2]
 8001d9c:	3b05      	subs	r3, #5
 8001d9e:	70eb      	strb	r3, [r5, #3]
			*len = MIN(*len, sd->bLength);
 8001da0:	9a05      	ldr	r2, [sp, #20]
			sd->bLength = sizeof(sd->bLength) +
 8001da2:	702b      	strb	r3, [r5, #0]
			*len = MIN(*len, sd->bLength);
 8001da4:	8811      	ldrh	r1, [r2, #0]
 8001da6:	1c0a      	adds	r2, r1, #0
 8001da8:	4299      	cmp	r1, r3
 8001daa:	d900      	bls.n	8001dae <usb_standard_get_descriptor+0x2e2>
 8001dac:	1c1a      	adds	r2, r3, #0
 8001dae:	9b05      	ldr	r3, [sp, #20]
 8001db0:	801a      	strh	r2, [r3, #0]
		sd->bDescriptorType = USB_DT_STRING;
 8001db2:	2303      	movs	r3, #3
 8001db4:	706b      	strb	r3, [r5, #1]
		*buf = (uint8_t *)sd;
 8001db6:	6025      	str	r5, [r4, #0]
 8001db8:	e6a5      	b.n	8001b06 <usb_standard_get_descriptor+0x3a>
			if (!usbd_dev->strings) {
 8001dba:	6887      	ldr	r7, [r0, #8]
			array_idx = descr_idx - 1;
 8001dbc:	3b01      	subs	r3, #1
				return USBD_REQ_NOTSUPP;
 8001dbe:	1e38      	subs	r0, r7, #0
			if (!usbd_dev->strings) {
 8001dc0:	d100      	bne.n	8001dc4 <usb_standard_get_descriptor+0x2f8>
 8001dc2:	e6a1      	b.n	8001b08 <usb_standard_get_descriptor+0x3c>
			if (array_idx >= usbd_dev->num_strings) {
 8001dc4:	68f2      	ldr	r2, [r6, #12]
				return USBD_REQ_NOTSUPP;
 8001dc6:	2000      	movs	r0, #0
			if (array_idx >= usbd_dev->num_strings) {
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dc00      	bgt.n	8001dce <usb_standard_get_descriptor+0x302>
 8001dcc:	e69c      	b.n	8001b08 <usb_standard_get_descriptor+0x3c>
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 8001dce:	794a      	ldrb	r2, [r1, #5]
 8001dd0:	7908      	ldrb	r0, [r1, #4]
 8001dd2:	4913      	ldr	r1, [pc, #76]	; (8001e20 <usb_standard_get_descriptor+0x354>)
 8001dd4:	0212      	lsls	r2, r2, #8
 8001dd6:	4302      	orrs	r2, r0
				return USBD_REQ_NOTSUPP;
 8001dd8:	2000      	movs	r0, #0
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 8001dda:	428a      	cmp	r2, r1
 8001ddc:	d000      	beq.n	8001de0 <usb_standard_get_descriptor+0x314>
 8001dde:	e693      	b.n	8001b08 <usb_standard_get_descriptor+0x3c>
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	59de      	ldr	r6, [r3, r7]
 8001de4:	0030      	movs	r0, r6
 8001de6:	f000 fc12 	bl	800260e <strlen>
				      sizeof(sd->bLength) +
 8001dea:	3001      	adds	r0, #1
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8001dec:	0040      	lsls	r0, r0, #1
			*len = MIN(*len, sd->bLength);
 8001dee:	9b05      	ldr	r3, [sp, #20]
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8001df0:	b2c0      	uxtb	r0, r0
 8001df2:	7028      	strb	r0, [r5, #0]
			*len = MIN(*len, sd->bLength);
 8001df4:	881a      	ldrh	r2, [r3, #0]
 8001df6:	1c13      	adds	r3, r2, #0
 8001df8:	4282      	cmp	r2, r0
 8001dfa:	d900      	bls.n	8001dfe <usb_standard_get_descriptor+0x332>
 8001dfc:	1c03      	adds	r3, r0, #0
 8001dfe:	9a05      	ldr	r2, [sp, #20]
 8001e00:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < (*len / 2) - 1; i++) {
 8001e02:	2300      	movs	r3, #0
 8001e04:	9a05      	ldr	r2, [sp, #20]
 8001e06:	8812      	ldrh	r2, [r2, #0]
 8001e08:	0852      	lsrs	r2, r2, #1
 8001e0a:	3a01      	subs	r2, #1
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	ddd0      	ble.n	8001db2 <usb_standard_get_descriptor+0x2e6>
				sd->wData[i] =
 8001e10:	5cf1      	ldrb	r1, [r6, r3]
 8001e12:	005a      	lsls	r2, r3, #1
 8001e14:	18aa      	adds	r2, r5, r2
 8001e16:	7091      	strb	r1, [r2, #2]
 8001e18:	2100      	movs	r1, #0
			for (i = 0; i < (*len / 2) - 1; i++) {
 8001e1a:	3301      	adds	r3, #1
				sd->wData[i] =
 8001e1c:	70d1      	strb	r1, [r2, #3]
			for (i = 0; i < (*len / 2) - 1; i++) {
 8001e1e:	e7f1      	b.n	8001e04 <usb_standard_get_descriptor+0x338>
 8001e20:	00000409 	.word	0x00000409

08001e24 <usb_standard_interface_get_status>:
 8001e24:	8819      	ldrh	r1, [r3, #0]
 8001e26:	2902      	cmp	r1, #2
 8001e28:	d901      	bls.n	8001e2e <usb_standard_interface_get_status+0xa>
 8001e2a:	2102      	movs	r1, #2
 8001e2c:	8019      	strh	r1, [r3, #0]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	6811      	ldr	r1, [r2, #0]
 8001e32:	2001      	movs	r0, #1
 8001e34:	700b      	strb	r3, [r1, #0]
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	7053      	strb	r3, [r2, #1]
 8001e3a:	4770      	bx	lr

08001e3c <usbd_register_set_config_callback>:
{
 8001e3c:	b510      	push	{r4, lr}
		if (usbd_dev->user_callback_set_config[i]) {
 8001e3e:	0004      	movs	r4, r0
{
 8001e40:	0002      	movs	r2, r0
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8001e42:	2300      	movs	r3, #0
		if (usbd_dev->user_callback_set_config[i]) {
 8001e44:	34c8      	adds	r4, #200	; 0xc8
 8001e46:	0098      	lsls	r0, r3, #2
 8001e48:	5820      	ldr	r0, [r4, r0]
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	d007      	beq.n	8001e5e <usbd_register_set_config_callback+0x22>
			if (usbd_dev->user_callback_set_config[i] == callback) {
 8001e4e:	4288      	cmp	r0, r1
 8001e50:	d009      	beq.n	8001e66 <usbd_register_set_config_callback+0x2a>
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8001e52:	3301      	adds	r3, #1
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d1f6      	bne.n	8001e46 <usbd_register_set_config_callback+0xa>
	return -1;
 8001e58:	2001      	movs	r0, #1
 8001e5a:	4240      	negs	r0, r0
}
 8001e5c:	bd10      	pop	{r4, pc}
		usbd_dev->user_callback_set_config[i] = callback;
 8001e5e:	3332      	adds	r3, #50	; 0x32
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	5099      	str	r1, [r3, r2]
		return 0;
 8001e64:	e7fa      	b.n	8001e5c <usbd_register_set_config_callback+0x20>
				return 0;
 8001e66:	2000      	movs	r0, #0
 8001e68:	e7f8      	b.n	8001e5c <usbd_register_set_config_callback+0x20>
	...

08001e6c <_usbd_standard_request_device>:

enum usbd_request_return_codes
_usbd_standard_request_device(usbd_device *usbd_dev,
			      struct usb_setup_data *req, uint8_t **buf,
			      uint16_t *len)
{
 8001e6c:	b570      	push	{r4, r5, r6, lr}
 8001e6e:	0005      	movs	r5, r0
 8001e70:	7848      	ldrb	r0, [r1, #1]
 8001e72:	2809      	cmp	r0, #9
 8001e74:	d812      	bhi.n	8001e9c <_usbd_standard_request_device+0x30>
 8001e76:	f000 fbd1 	bl	800261c <__gnu_thumb1_case_uqi>
 8001e7a:	110d      	.short	0x110d
 8001e7c:	0f111111 	.word	0x0f111111
 8001e80:	0509110b 	.word	0x0509110b
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8001e84:	4c06      	ldr	r4, [pc, #24]	; (8001ea0 <_usbd_standard_request_device+0x34>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 8001e86:	0028      	movs	r0, r5
 8001e88:	47a0      	blx	r4
}
 8001e8a:	bd70      	pop	{r4, r5, r6, pc}
		command = usb_standard_get_configuration;
 8001e8c:	4c05      	ldr	r4, [pc, #20]	; (8001ea4 <_usbd_standard_request_device+0x38>)
		break;
 8001e8e:	e7fa      	b.n	8001e86 <_usbd_standard_request_device+0x1a>
		command = usb_standard_get_descriptor;
 8001e90:	4c05      	ldr	r4, [pc, #20]	; (8001ea8 <_usbd_standard_request_device+0x3c>)
		break;
 8001e92:	e7f8      	b.n	8001e86 <_usbd_standard_request_device+0x1a>
		command = usb_standard_device_get_status;
 8001e94:	4c05      	ldr	r4, [pc, #20]	; (8001eac <_usbd_standard_request_device+0x40>)
		break;
 8001e96:	e7f6      	b.n	8001e86 <_usbd_standard_request_device+0x1a>
		command = usb_standard_set_address;
 8001e98:	4c05      	ldr	r4, [pc, #20]	; (8001eb0 <_usbd_standard_request_device+0x44>)
 8001e9a:	e7f4      	b.n	8001e86 <_usbd_standard_request_device+0x1a>
	switch (req->bRequest) {
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	e7f4      	b.n	8001e8a <_usbd_standard_request_device+0x1e>
 8001ea0:	080018c5 	.word	0x080018c5
 8001ea4:	0800197d 	.word	0x0800197d
 8001ea8:	08001acd 	.word	0x08001acd
 8001eac:	080019f7 	.word	0x080019f7
 8001eb0:	0800188f 	.word	0x0800188f

08001eb4 <_usbd_standard_request_interface>:

enum usbd_request_return_codes
_usbd_standard_request_interface(usbd_device *usbd_dev,
				 struct usb_setup_data *req, uint8_t **buf,
				 uint16_t *len)
{
 8001eb4:	b570      	push	{r4, r5, r6, lr}
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8001eb6:	784c      	ldrb	r4, [r1, #1]
{
 8001eb8:	0005      	movs	r5, r0
	switch (req->bRequest) {
 8001eba:	2c0a      	cmp	r4, #10
 8001ebc:	d008      	beq.n	8001ed0 <_usbd_standard_request_interface+0x1c>
 8001ebe:	2c0b      	cmp	r4, #11
 8001ec0:	d008      	beq.n	8001ed4 <_usbd_standard_request_interface+0x20>
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	4284      	cmp	r4, r0
 8001ec6:	d102      	bne.n	8001ece <_usbd_standard_request_interface+0x1a>
		break;
	case USB_REQ_SET_INTERFACE:
		command = usb_standard_set_interface;
		break;
	case USB_REQ_GET_STATUS:
		command = usb_standard_interface_get_status;
 8001ec8:	4c03      	ldr	r4, [pc, #12]	; (8001ed8 <_usbd_standard_request_interface+0x24>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 8001eca:	0028      	movs	r0, r5
 8001ecc:	47a0      	blx	r4
}
 8001ece:	bd70      	pop	{r4, r5, r6, pc}
		command = usb_standard_get_interface;
 8001ed0:	4c02      	ldr	r4, [pc, #8]	; (8001edc <_usbd_standard_request_interface+0x28>)
 8001ed2:	e7fa      	b.n	8001eca <_usbd_standard_request_interface+0x16>
	switch (req->bRequest) {
 8001ed4:	4c02      	ldr	r4, [pc, #8]	; (8001ee0 <_usbd_standard_request_interface+0x2c>)
 8001ed6:	e7f8      	b.n	8001eca <_usbd_standard_request_interface+0x16>
 8001ed8:	08001e25 	.word	0x08001e25
 8001edc:	080019a7 	.word	0x080019a7
 8001ee0:	08001a51 	.word	0x08001a51

08001ee4 <_usbd_standard_request_endpoint>:

enum usbd_request_return_codes
_usbd_standard_request_endpoint(usbd_device *usbd_dev,
				struct usb_setup_data *req, uint8_t **buf,
				uint16_t *len)
{
 8001ee4:	b570      	push	{r4, r5, r6, lr}
 8001ee6:	0005      	movs	r5, r0
	enum usbd_request_return_codes (*command) (usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8001ee8:	7848      	ldrb	r0, [r1, #1]
 8001eea:	2801      	cmp	r0, #1
 8001eec:	d005      	beq.n	8001efa <_usbd_standard_request_endpoint+0x16>
 8001eee:	2803      	cmp	r0, #3
 8001ef0:	d00c      	beq.n	8001f0c <_usbd_standard_request_endpoint+0x28>
 8001ef2:	2800      	cmp	r0, #0
 8001ef4:	d013      	beq.n	8001f1e <_usbd_standard_request_endpoint+0x3a>
		 */
		break;
	}

	if (!command) {
		return USBD_REQ_NOTSUPP;
 8001ef6:	2000      	movs	r0, #0
	}

	return command(usbd_dev, req, buf, len);
}
 8001ef8:	bd70      	pop	{r4, r5, r6, pc}
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8001efa:	78c8      	ldrb	r0, [r1, #3]
 8001efc:	788c      	ldrb	r4, [r1, #2]
 8001efe:	0200      	lsls	r0, r0, #8
 8001f00:	4320      	orrs	r0, r4
			command = usb_standard_endpoint_unstall;
 8001f02:	4c08      	ldr	r4, [pc, #32]	; (8001f24 <_usbd_standard_request_endpoint+0x40>)
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8001f04:	d1f7      	bne.n	8001ef6 <_usbd_standard_request_endpoint+0x12>
	return command(usbd_dev, req, buf, len);
 8001f06:	0028      	movs	r0, r5
 8001f08:	47a0      	blx	r4
 8001f0a:	e7f5      	b.n	8001ef8 <_usbd_standard_request_endpoint+0x14>
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8001f0c:	78cc      	ldrb	r4, [r1, #3]
 8001f0e:	7888      	ldrb	r0, [r1, #2]
 8001f10:	0224      	lsls	r4, r4, #8
 8001f12:	4304      	orrs	r4, r0
		return USBD_REQ_NOTSUPP;
 8001f14:	2000      	movs	r0, #0
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8001f16:	4284      	cmp	r4, r0
 8001f18:	d1ee      	bne.n	8001ef8 <_usbd_standard_request_endpoint+0x14>
			command = usb_standard_endpoint_stall;
 8001f1a:	4c03      	ldr	r4, [pc, #12]	; (8001f28 <_usbd_standard_request_endpoint+0x44>)
 8001f1c:	e7f3      	b.n	8001f06 <_usbd_standard_request_endpoint+0x22>
	switch (req->bRequest) {
 8001f1e:	4c03      	ldr	r4, [pc, #12]	; (8001f2c <_usbd_standard_request_endpoint+0x48>)
 8001f20:	e7f1      	b.n	8001f06 <_usbd_standard_request_endpoint+0x22>
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	08001a43 	.word	0x08001a43
 8001f28:	08001a35 	.word	0x08001a35
 8001f2c:	08001a0f 	.word	0x08001a0f

08001f30 <_usbd_standard_request>:

enum usbd_request_return_codes
_usbd_standard_request(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len)
{
 8001f30:	b570      	push	{r4, r5, r6, lr}
	/* FIXME: Have class/vendor requests as well. */
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) {
 8001f32:	780d      	ldrb	r5, [r1, #0]
 8001f34:	2660      	movs	r6, #96	; 0x60
 8001f36:	002c      	movs	r4, r5
 8001f38:	4034      	ands	r4, r6
 8001f3a:	4235      	tst	r5, r6
 8001f3c:	d112      	bne.n	8001f64 <_usbd_standard_request+0x34>
		return USBD_REQ_NOTSUPP;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
 8001f3e:	3e41      	subs	r6, #65	; 0x41
 8001f40:	4035      	ands	r5, r6
 8001f42:	2d01      	cmp	r5, #1
 8001f44:	d008      	beq.n	8001f58 <_usbd_standard_request+0x28>
 8001f46:	2d02      	cmp	r5, #2
 8001f48:	d009      	beq.n	8001f5e <_usbd_standard_request+0x2e>
 8001f4a:	2d00      	cmp	r5, #0
 8001f4c:	d102      	bne.n	8001f54 <_usbd_standard_request+0x24>
	case USB_REQ_TYPE_DEVICE:
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
 8001f4e:	f7ff ff8d 	bl	8001e6c <_usbd_standard_request_device>
	case USB_REQ_TYPE_INTERFACE:
		return _usbd_standard_request_interface(usbd_dev, req,
							buf, len);
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 8001f52:	0004      	movs	r4, r0
	default:
		return USBD_REQ_NOTSUPP;
	}
}
 8001f54:	0020      	movs	r0, r4
 8001f56:	bd70      	pop	{r4, r5, r6, pc}
		return _usbd_standard_request_interface(usbd_dev, req,
 8001f58:	f7ff ffac 	bl	8001eb4 <_usbd_standard_request_interface>
 8001f5c:	e7f9      	b.n	8001f52 <_usbd_standard_request+0x22>
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 8001f5e:	f7ff ffc1 	bl	8001ee4 <_usbd_standard_request_endpoint>
 8001f62:	e7f6      	b.n	8001f52 <_usbd_standard_request+0x22>
		return USBD_REQ_NOTSUPP;
 8001f64:	2400      	movs	r4, #0
 8001f66:	e7f5      	b.n	8001f54 <_usbd_standard_request+0x24>

08001f68 <st_usbfs_set_address>:

void st_usbfs_set_address(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	/* Set device address and enable. */
	SET_REG(USB_DADDR_REG, (addr & USB_DADDR_ADDR) | USB_DADDR_EF);
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	4319      	orrs	r1, r3
 8001f6c:	4b01      	ldr	r3, [pc, #4]	; (8001f74 <st_usbfs_set_address+0xc>)
 8001f6e:	6019      	str	r1, [r3, #0]
}
 8001f70:	4770      	bx	lr
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	40005c4c 	.word	0x40005c4c

08001f78 <st_usbfs_set_ep_rx_bufsize>:
	 *	0		0		0			??? "Not allowed" according to RM0091, RM0008
	 *	1		0		1			2
	 *	61		0		31			62
	 *	63		1		1			64
	 */
	if (size > 62) {
 8001f78:	2a3e      	cmp	r2, #62	; 0x3e
 8001f7a:	d910      	bls.n	8001f9e <st_usbfs_set_ep_rx_bufsize+0x26>
		/* Round up, div by 32 and sub 1 == (size + 31)/32 - 1 == (size-1)/32)*/
		size = ((size - 1) >> 5) & 0x1F;
		realsize = (size + 1) << 5;
		/* Set BL_SIZE bit (no macro for this) */
		size |= (1<<5);
 8001f7c:	2320      	movs	r3, #32
		size = ((size - 1) >> 5) & 0x1F;
 8001f7e:	3a01      	subs	r2, #1
 8001f80:	0592      	lsls	r2, r2, #22
 8001f82:	0ed2      	lsrs	r2, r2, #27
		realsize = (size + 1) << 5;
 8001f84:	0150      	lsls	r0, r2, #5
 8001f86:	3020      	adds	r0, #32
		size |= (1<<5);
 8001f88:	431a      	orrs	r2, r3
		/* round up and div by 2 */
		size = (size + 1) >> 1;
		realsize = size << 1;
	}
	/* write to the BL_SIZE and NUM_BLOCK fields */
	USB_SET_EP_RX_COUNT(ep, size << 10);
 8001f8a:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <st_usbfs_set_ep_rx_bufsize+0x30>)
 8001f8c:	00c9      	lsls	r1, r1, #3
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0292      	lsls	r2, r2, #10
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	18c9      	adds	r1, r1, r3
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <st_usbfs_set_ep_rx_bufsize+0x34>)
 8001f98:	18c9      	adds	r1, r1, r3
 8001f9a:	800a      	strh	r2, [r1, #0]
	return realsize;
}
 8001f9c:	4770      	bx	lr
		size = (size + 1) >> 1;
 8001f9e:	3201      	adds	r2, #1
 8001fa0:	0852      	lsrs	r2, r2, #1
		realsize = size << 1;
 8001fa2:	0050      	lsls	r0, r2, #1
 8001fa4:	b280      	uxth	r0, r0
 8001fa6:	e7f0      	b.n	8001f8a <st_usbfs_set_ep_rx_bufsize+0x12>
 8001fa8:	40005c50 	.word	0x40005c50
 8001fac:	40006006 	.word	0x40006006

08001fb0 <st_usbfs_ep_setup>:

void st_usbfs_ep_setup(usbd_device *dev, uint8_t addr, uint8_t type,
		uint16_t max_size,
		void (*callback) (usbd_device *usbd_dev,
		uint8_t ep))
{
 8001fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb2:	0005      	movs	r5, r0
	/* Translate USB standard type codes to STM32. */
	const uint16_t typelookup[] = {
 8001fb4:	4837      	ldr	r0, [pc, #220]	; (8002094 <st_usbfs_ep_setup+0xe4>)
{
 8001fb6:	b085      	sub	sp, #20
	const uint16_t typelookup[] = {
 8001fb8:	9002      	str	r0, [sp, #8]
 8001fba:	20c0      	movs	r0, #192	; 0xc0
		[USB_ENDPOINT_ATTR_ISOCHRONOUS] = USB_EP_TYPE_ISO,
		[USB_ENDPOINT_ATTR_BULK] = USB_EP_TYPE_BULK,
		[USB_ENDPOINT_ATTR_INTERRUPT] = USB_EP_TYPE_INTERRUPT,
	};
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;
 8001fbc:	267f      	movs	r6, #127	; 0x7f
	const uint16_t typelookup[] = {
 8001fbe:	04c0      	lsls	r0, r0, #19
 8001fc0:	9003      	str	r0, [sp, #12]
	addr &= 0x7f;
 8001fc2:	400e      	ands	r6, r1

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
 8001fc4:	4834      	ldr	r0, [pc, #208]	; (8002098 <st_usbfs_ep_setup+0xe8>)
 8001fc6:	00b4      	lsls	r4, r6, #2
 8001fc8:	1824      	adds	r4, r4, r0
 8001fca:	6820      	ldr	r0, [r4, #0]
 8001fcc:	4f33      	ldr	r7, [pc, #204]	; (800209c <st_usbfs_ep_setup+0xec>)
	USB_SET_EP_TYPE(addr, typelookup[type]);
 8001fce:	0052      	lsls	r2, r2, #1
	USB_SET_EP_ADDR(addr, addr);
 8001fd0:	4038      	ands	r0, r7
 8001fd2:	4330      	orrs	r0, r6
 8001fd4:	b280      	uxth	r0, r0
 8001fd6:	6020      	str	r0, [r4, #0]
	USB_SET_EP_TYPE(addr, typelookup[type]);
 8001fd8:	6827      	ldr	r7, [r4, #0]
 8001fda:	4831      	ldr	r0, [pc, #196]	; (80020a0 <st_usbfs_ep_setup+0xf0>)
 8001fdc:	4038      	ands	r0, r7
 8001fde:	af02      	add	r7, sp, #8
 8001fe0:	5bd2      	ldrh	r2, [r2, r7]
 8001fe2:	4f30      	ldr	r7, [pc, #192]	; (80020a4 <st_usbfs_ep_setup+0xf4>)
 8001fe4:	4310      	orrs	r0, r2
 8001fe6:	b280      	uxth	r0, r0
 8001fe8:	b24a      	sxtb	r2, r1
 8001fea:	6020      	str	r0, [r4, #0]

	if (dir || (addr == 0)) {
 8001fec:	4694      	mov	ip, r2
 8001fee:	482e      	ldr	r0, [pc, #184]	; (80020a8 <st_usbfs_ep_setup+0xf8>)
 8001ff0:	2a00      	cmp	r2, #0
 8001ff2:	db22      	blt.n	800203a <st_usbfs_ep_setup+0x8a>
 8001ff4:	2e00      	cmp	r6, #0
 8001ff6:	d020      	beq.n	800203a <st_usbfs_ep_setup+0x8a>
		dev->pm_top += max_size;
	}

	if (!dir) {
		uint16_t realsize;
		USB_SET_EP_RX_ADDR(addr, dev->pm_top);
 8001ff8:	6800      	ldr	r0, [r0, #0]
 8001ffa:	00f2      	lsls	r2, r6, #3
 8001ffc:	b280      	uxth	r0, r0
 8001ffe:	1812      	adds	r2, r2, r0
 8002000:	482a      	ldr	r0, [pc, #168]	; (80020ac <st_usbfs_ep_setup+0xfc>)
 8002002:	8b29      	ldrh	r1, [r5, #24]
 8002004:	1812      	adds	r2, r2, r0
 8002006:	8011      	strh	r1, [r2, #0]
		realsize = st_usbfs_set_ep_rx_bufsize(dev, addr, max_size);
 8002008:	0028      	movs	r0, r5
 800200a:	001a      	movs	r2, r3
 800200c:	0031      	movs	r1, r6
 800200e:	f7ff ffb3 	bl	8001f78 <st_usbfs_set_ep_rx_bufsize>
		if (callback) {
 8002012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002014:	2b00      	cmp	r3, #0
 8002016:	d136      	bne.n	8002086 <st_usbfs_ep_setup+0xd6>
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
			    (void *)callback;
		}
		USB_CLR_EP_RX_DTOG(addr);
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	4a25      	ldr	r2, [pc, #148]	; (80020b0 <st_usbfs_ep_setup+0x100>)
 800201c:	4013      	ands	r3, r2
 800201e:	6023      	str	r3, [r4, #0]
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8002020:	6823      	ldr	r3, [r4, #0]
 8002022:	4a24      	ldr	r2, [pc, #144]	; (80020b4 <st_usbfs_ep_setup+0x104>)
 8002024:	401a      	ands	r2, r3
 8002026:	23c0      	movs	r3, #192	; 0xc0
 8002028:	019b      	lsls	r3, r3, #6
 800202a:	4053      	eors	r3, r2
 800202c:	433b      	orrs	r3, r7
 800202e:	b29b      	uxth	r3, r3
 8002030:	6023      	str	r3, [r4, #0]
		dev->pm_top += realsize;
 8002032:	8b2b      	ldrh	r3, [r5, #24]
 8002034:	18c0      	adds	r0, r0, r3
 8002036:	8328      	strh	r0, [r5, #24]
	}
}
 8002038:	e023      	b.n	8002082 <st_usbfs_ep_setup+0xd2>
		USB_SET_EP_TX_ADDR(addr, dev->pm_top);
 800203a:	6802      	ldr	r2, [r0, #0]
 800203c:	8b29      	ldrh	r1, [r5, #24]
 800203e:	b292      	uxth	r2, r2
 8002040:	9101      	str	r1, [sp, #4]
 8002042:	00f1      	lsls	r1, r6, #3
 8002044:	1889      	adds	r1, r1, r2
 8002046:	4a1c      	ldr	r2, [pc, #112]	; (80020b8 <st_usbfs_ep_setup+0x108>)
 8002048:	1889      	adds	r1, r1, r2
 800204a:	9a01      	ldr	r2, [sp, #4]
 800204c:	800a      	strh	r2, [r1, #0]
		if (callback) {
 800204e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002050:	2a00      	cmp	r2, #0
 8002052:	d004      	beq.n	800205e <st_usbfs_ep_setup+0xae>
			dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
 8002054:	220c      	movs	r2, #12
 8002056:	4372      	muls	r2, r6
 8002058:	990a      	ldr	r1, [sp, #40]	; 0x28
 800205a:	18aa      	adds	r2, r5, r2
 800205c:	6691      	str	r1, [r2, #104]	; 0x68
		USB_CLR_EP_TX_DTOG(addr);
 800205e:	6822      	ldr	r2, [r4, #0]
 8002060:	4916      	ldr	r1, [pc, #88]	; (80020bc <st_usbfs_ep_setup+0x10c>)
 8002062:	400a      	ands	r2, r1
 8002064:	6022      	str	r2, [r4, #0]
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 8002066:	6822      	ldr	r2, [r4, #0]
 8002068:	4915      	ldr	r1, [pc, #84]	; (80020c0 <st_usbfs_ep_setup+0x110>)
 800206a:	4011      	ands	r1, r2
 800206c:	2220      	movs	r2, #32
 800206e:	404a      	eors	r2, r1
 8002070:	433a      	orrs	r2, r7
 8002072:	b292      	uxth	r2, r2
 8002074:	6022      	str	r2, [r4, #0]
		dev->pm_top += max_size;
 8002076:	8b2a      	ldrh	r2, [r5, #24]
 8002078:	189a      	adds	r2, r3, r2
 800207a:	832a      	strh	r2, [r5, #24]
	if (!dir) {
 800207c:	4662      	mov	r2, ip
 800207e:	2a00      	cmp	r2, #0
 8002080:	daba      	bge.n	8001ff8 <st_usbfs_ep_setup+0x48>
}
 8002082:	b005      	add	sp, #20
 8002084:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
 8002086:	230c      	movs	r3, #12
 8002088:	435e      	muls	r6, r3
 800208a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800208c:	19ae      	adds	r6, r5, r6
 800208e:	66f3      	str	r3, [r6, #108]	; 0x6c
 8002090:	e7c2      	b.n	8002018 <st_usbfs_ep_setup+0x68>
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	04000200 	.word	0x04000200
 8002098:	40005c00 	.word	0x40005c00
 800209c:	ffff8f80 	.word	0xffff8f80
 80020a0:	ffff898f 	.word	0xffff898f
 80020a4:	ffff8080 	.word	0xffff8080
 80020a8:	40005c50 	.word	0x40005c50
 80020ac:	40006004 	.word	0x40006004
 80020b0:	0000cf8f 	.word	0x0000cf8f
 80020b4:	0000bf8f 	.word	0x0000bf8f
 80020b8:	40006000 	.word	0x40006000
 80020bc:	00008fcf 	.word	0x00008fcf
 80020c0:	00008fbf 	.word	0x00008fbf

080020c4 <st_usbfs_endpoints_reset>:

void st_usbfs_endpoints_reset(usbd_device *dev)
{
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <st_usbfs_endpoints_reset+0x30>)
	int i;

	/* Reset all endpoints. */
	for (i = 1; i < 8; i++) {
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 80020c8:	4e0b      	ldr	r6, [pc, #44]	; (80020f8 <st_usbfs_endpoints_reset+0x34>)
 80020ca:	490c      	ldr	r1, [pc, #48]	; (80020fc <st_usbfs_endpoints_reset+0x38>)
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 80020cc:	4d0c      	ldr	r5, [pc, #48]	; (8002100 <st_usbfs_endpoints_reset+0x3c>)
	for (i = 1; i < 8; i++) {
 80020ce:	4c0d      	ldr	r4, [pc, #52]	; (8002104 <st_usbfs_endpoints_reset+0x40>)
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 80020d0:	6813      	ldr	r3, [r2, #0]
 80020d2:	4033      	ands	r3, r6
 80020d4:	430b      	orrs	r3, r1
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	6013      	str	r3, [r2, #0]
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 80020da:	6813      	ldr	r3, [r2, #0]
 80020dc:	402b      	ands	r3, r5
 80020de:	430b      	orrs	r3, r1
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	c208      	stmia	r2!, {r3}
	for (i = 1; i < 8; i++) {
 80020e4:	42a2      	cmp	r2, r4
 80020e6:	d1f3      	bne.n	80020d0 <st_usbfs_endpoints_reset+0xc>
	}
	dev->pm_top = USBD_PM_TOP + (2 * dev->desc->bMaxPacketSize0);
 80020e8:	6803      	ldr	r3, [r0, #0]
 80020ea:	79db      	ldrb	r3, [r3, #7]
 80020ec:	3320      	adds	r3, #32
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	8303      	strh	r3, [r0, #24]
}
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
 80020f4:	40005c04 	.word	0x40005c04
 80020f8:	ffff8fbf 	.word	0xffff8fbf
 80020fc:	ffff8080 	.word	0xffff8080
 8002100:	ffffbf8f 	.word	0xffffbf8f
 8002104:	40005c20 	.word	0x40005c20

08002108 <st_usbfs_ep_stall_set>:

void st_usbfs_ep_stall_set(usbd_device *dev, uint8_t addr,
				   uint8_t stall)
{
 8002108:	b530      	push	{r4, r5, lr}
 800210a:	4822      	ldr	r0, [pc, #136]	; (8002194 <st_usbfs_ep_stall_set+0x8c>)
	(void)dev;
	if (addr == 0) {
 800210c:	2900      	cmp	r1, #0
 800210e:	d126      	bne.n	800215e <st_usbfs_ep_stall_set+0x56>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8002110:	4c21      	ldr	r4, [pc, #132]	; (8002198 <st_usbfs_ep_stall_set+0x90>)
 8002112:	4d22      	ldr	r5, [pc, #136]	; (800219c <st_usbfs_ep_stall_set+0x94>)
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	401d      	ands	r5, r3
 8002118:	2310      	movs	r3, #16
 800211a:	2a00      	cmp	r2, #0
 800211c:	d100      	bne.n	8002120 <st_usbfs_ep_stall_set+0x18>
 800211e:	18db      	adds	r3, r3, r3
 8002120:	406b      	eors	r3, r5
 8002122:	b21b      	sxth	r3, r3
 8002124:	4303      	orrs	r3, r0
 8002126:	b29b      	uxth	r3, r3
 8002128:	6023      	str	r3, [r4, #0]
		if (!stall) {
			USB_CLR_EP_TX_DTOG(addr);
		}
	} else {
		/* Reset to DATA0 if clearing stall condition. */
		if (!stall) {
 800212a:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <st_usbfs_ep_stall_set+0x90>)
 800212c:	0089      	lsls	r1, r1, #2
 800212e:	18c9      	adds	r1, r1, r3
 8002130:	2a00      	cmp	r2, #0
 8002132:	d103      	bne.n	800213c <st_usbfs_ep_stall_set+0x34>
			USB_CLR_EP_RX_DTOG(addr);
 8002134:	680b      	ldr	r3, [r1, #0]
 8002136:	4c1a      	ldr	r4, [pc, #104]	; (80021a0 <st_usbfs_ep_stall_set+0x98>)
 8002138:	4023      	ands	r3, r4
 800213a:	600b      	str	r3, [r1, #0]
		}

		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 800213c:	680c      	ldr	r4, [r1, #0]
 800213e:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <st_usbfs_ep_stall_set+0x9c>)
 8002140:	401c      	ands	r4, r3
 8002142:	0013      	movs	r3, r2
 8002144:	1e5a      	subs	r2, r3, #1
 8002146:	4193      	sbcs	r3, r2
 8002148:	425a      	negs	r2, r3
 800214a:	23c0      	movs	r3, #192	; 0xc0
 800214c:	0352      	lsls	r2, r2, #13
 800214e:	019b      	lsls	r3, r3, #6
 8002150:	18d2      	adds	r2, r2, r3
 8002152:	4062      	eors	r2, r4
 8002154:	b212      	sxth	r2, r2
 8002156:	4302      	orrs	r2, r0
 8002158:	b292      	uxth	r2, r2
 800215a:	600a      	str	r2, [r1, #0]
				   USB_EP_RX_STAT_VALID);
	}
}
 800215c:	e019      	b.n	8002192 <st_usbfs_ep_stall_set+0x8a>
	if (addr & 0x80) {
 800215e:	b24b      	sxtb	r3, r1
 8002160:	2b00      	cmp	r3, #0
 8002162:	dae2      	bge.n	800212a <st_usbfs_ep_stall_set+0x22>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8002164:	237f      	movs	r3, #127	; 0x7f
 8002166:	4019      	ands	r1, r3
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <st_usbfs_ep_stall_set+0x90>)
 800216a:	0089      	lsls	r1, r1, #2
 800216c:	18c9      	adds	r1, r1, r3
 800216e:	680b      	ldr	r3, [r1, #0]
 8002170:	4c0a      	ldr	r4, [pc, #40]	; (800219c <st_usbfs_ep_stall_set+0x94>)
 8002172:	401c      	ands	r4, r3
 8002174:	2310      	movs	r3, #16
 8002176:	2a00      	cmp	r2, #0
 8002178:	d100      	bne.n	800217c <st_usbfs_ep_stall_set+0x74>
 800217a:	18db      	adds	r3, r3, r3
 800217c:	4063      	eors	r3, r4
 800217e:	b21b      	sxth	r3, r3
 8002180:	4318      	orrs	r0, r3
 8002182:	b280      	uxth	r0, r0
 8002184:	6008      	str	r0, [r1, #0]
		if (!stall) {
 8002186:	2a00      	cmp	r2, #0
 8002188:	d103      	bne.n	8002192 <st_usbfs_ep_stall_set+0x8a>
			USB_CLR_EP_TX_DTOG(addr);
 800218a:	680b      	ldr	r3, [r1, #0]
 800218c:	4a06      	ldr	r2, [pc, #24]	; (80021a8 <st_usbfs_ep_stall_set+0xa0>)
 800218e:	4013      	ands	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
}
 8002192:	bd30      	pop	{r4, r5, pc}
 8002194:	ffff8080 	.word	0xffff8080
 8002198:	40005c00 	.word	0x40005c00
 800219c:	00008fbf 	.word	0x00008fbf
 80021a0:	0000cf8f 	.word	0x0000cf8f
 80021a4:	0000bf8f 	.word	0x0000bf8f
 80021a8:	00008fcf 	.word	0x00008fcf

080021ac <st_usbfs_ep_stall_get>:

uint8_t st_usbfs_ep_stall_get(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	if (addr & 0x80) {
 80021ac:	b24b      	sxtb	r3, r1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	da0c      	bge.n	80021cc <st_usbfs_ep_stall_get+0x20>
		if ((*USB_EP_REG(addr & 0x7F) & USB_EP_TX_STAT) ==
 80021b2:	237f      	movs	r3, #127	; 0x7f
 80021b4:	4019      	ands	r1, r3
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <st_usbfs_ep_stall_get+0x34>)
 80021b8:	0089      	lsls	r1, r1, #2
 80021ba:	18c9      	adds	r1, r1, r3
 80021bc:	2330      	movs	r3, #48	; 0x30
 80021be:	6808      	ldr	r0, [r1, #0]
 80021c0:	4018      	ands	r0, r3
 80021c2:	3810      	subs	r0, #16
		    USB_EP_TX_STAT_STALL) {
			return 1;
		}
	} else {
		if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) ==
 80021c4:	4243      	negs	r3, r0
 80021c6:	4158      	adcs	r0, r3
			return 1;
 80021c8:	b2c0      	uxtb	r0, r0
		    USB_EP_RX_STAT_STALL) {
			return 1;
		}
	}
	return 0;
}
 80021ca:	4770      	bx	lr
		if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) ==
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <st_usbfs_ep_stall_get+0x34>)
 80021ce:	0089      	lsls	r1, r1, #2
 80021d0:	18c9      	adds	r1, r1, r3
 80021d2:	23c0      	movs	r3, #192	; 0xc0
 80021d4:	6808      	ldr	r0, [r1, #0]
 80021d6:	019b      	lsls	r3, r3, #6
 80021d8:	4018      	ands	r0, r3
 80021da:	4b02      	ldr	r3, [pc, #8]	; (80021e4 <st_usbfs_ep_stall_get+0x38>)
 80021dc:	18c0      	adds	r0, r0, r3
 80021de:	e7f1      	b.n	80021c4 <st_usbfs_ep_stall_get+0x18>
 80021e0:	40005c00 	.word	0x40005c00
 80021e4:	fffff000 	.word	0xfffff000

080021e8 <st_usbfs_ep_nak_set>:

void st_usbfs_ep_nak_set(usbd_device *dev, uint8_t addr, uint8_t nak)
{
	(void)dev;
	/* It does not make sense to force NAK on IN endpoints. */
	if (addr & 0x80) {
 80021e8:	b24b      	sxtb	r3, r1
{
 80021ea:	b510      	push	{r4, lr}
	if (addr & 0x80) {
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	db11      	blt.n	8002214 <st_usbfs_ep_nak_set+0x2c>
		return;
	}

	st_usbfs_force_nak[addr] = nak;
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <st_usbfs_ep_nak_set+0x3c>)
 80021f2:	4c0d      	ldr	r4, [pc, #52]	; (8002228 <st_usbfs_ep_nak_set+0x40>)
 80021f4:	545a      	strb	r2, [r3, r1]

	if (nak) {
 80021f6:	4b0d      	ldr	r3, [pc, #52]	; (800222c <st_usbfs_ep_nak_set+0x44>)
 80021f8:	0089      	lsls	r1, r1, #2
 80021fa:	480d      	ldr	r0, [pc, #52]	; (8002230 <st_usbfs_ep_nak_set+0x48>)
 80021fc:	18c9      	adds	r1, r1, r3
 80021fe:	2a00      	cmp	r2, #0
 8002200:	d009      	beq.n	8002216 <st_usbfs_ep_nak_set+0x2e>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_NAK);
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	680a      	ldr	r2, [r1, #0]
 8002206:	019b      	lsls	r3, r3, #6
 8002208:	4022      	ands	r2, r4
 800220a:	b292      	uxth	r2, r2
	} else {
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 800220c:	4053      	eors	r3, r2
 800220e:	4303      	orrs	r3, r0
 8002210:	b29b      	uxth	r3, r3
 8002212:	600b      	str	r3, [r1, #0]
	}
}
 8002214:	bd10      	pop	{r4, pc}
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8002216:	22c0      	movs	r2, #192	; 0xc0
 8002218:	680b      	ldr	r3, [r1, #0]
 800221a:	0192      	lsls	r2, r2, #6
 800221c:	4023      	ands	r3, r4
 800221e:	b29b      	uxth	r3, r3
 8002220:	e7f4      	b.n	800220c <st_usbfs_ep_nak_set+0x24>
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	20000474 	.word	0x20000474
 8002228:	ffffbf8f 	.word	0xffffbf8f
 800222c:	40005c00 	.word	0x40005c00
 8002230:	ffff8080 	.word	0xffff8080

08002234 <st_usbfs_ep_write_packet>:

uint16_t st_usbfs_ep_write_packet(usbd_device *dev, uint8_t addr,
				     const void *buf, uint16_t len)
{
 8002234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002236:	000c      	movs	r4, r1
 8002238:	001d      	movs	r5, r3
	(void)dev;
	addr &= 0x7F;
 800223a:	237f      	movs	r3, #127	; 0x7f
{
 800223c:	0011      	movs	r1, r2

	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 800223e:	2230      	movs	r2, #48	; 0x30
	addr &= 0x7F;
 8002240:	401c      	ands	r4, r3
	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <st_usbfs_ep_write_packet+0x5c>)
 8002244:	00a6      	lsls	r6, r4, #2
 8002246:	18f6      	adds	r6, r6, r3
 8002248:	6833      	ldr	r3, [r6, #0]
 800224a:	4013      	ands	r3, r2
 800224c:	4293      	cmp	r3, r2
 800224e:	d01c      	beq.n	800228a <st_usbfs_ep_write_packet+0x56>
		return 0;
	}

	st_usbfs_copy_to_pm(USB_GET_EP_TX_BUFF(addr), buf, len);
 8002250:	4810      	ldr	r0, [pc, #64]	; (8002294 <st_usbfs_ep_write_packet+0x60>)
 8002252:	4f11      	ldr	r7, [pc, #68]	; (8002298 <st_usbfs_ep_write_packet+0x64>)
 8002254:	0002      	movs	r2, r0
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	00e4      	lsls	r4, r4, #3
 800225a:	b29b      	uxth	r3, r3
 800225c:	18e3      	adds	r3, r4, r3
 800225e:	181b      	adds	r3, r3, r0
 8002260:	8818      	ldrh	r0, [r3, #0]
 8002262:	1880      	adds	r0, r0, r2
 8002264:	002a      	movs	r2, r5
 8002266:	f000 f921 	bl	80024ac <st_usbfs_copy_to_pm>
	USB_SET_EP_TX_COUNT(addr, len);
 800226a:	6839      	ldr	r1, [r7, #0]
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <st_usbfs_ep_write_packet+0x68>)
 800226e:	b289      	uxth	r1, r1
 8002270:	1864      	adds	r4, r4, r1
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 8002272:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <st_usbfs_ep_write_packet+0x6c>)
	USB_SET_EP_TX_COUNT(addr, len);
 8002274:	18e4      	adds	r4, r4, r3
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 8002276:	6833      	ldr	r3, [r6, #0]
	USB_SET_EP_TX_COUNT(addr, len);
 8002278:	8025      	strh	r5, [r4, #0]
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 800227a:	4013      	ands	r3, r2
 800227c:	2230      	movs	r2, #48	; 0x30
 800227e:	4053      	eors	r3, r2
 8002280:	4a08      	ldr	r2, [pc, #32]	; (80022a4 <st_usbfs_ep_write_packet+0x70>)
 8002282:	4313      	orrs	r3, r2
 8002284:	6033      	str	r3, [r6, #0]

	return len;
}
 8002286:	0028      	movs	r0, r5
 8002288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 800228a:	2500      	movs	r5, #0
 800228c:	e7fb      	b.n	8002286 <st_usbfs_ep_write_packet+0x52>
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	40005c00 	.word	0x40005c00
 8002294:	40006000 	.word	0x40006000
 8002298:	40005c50 	.word	0x40005c50
 800229c:	40006002 	.word	0x40006002
 80022a0:	00008fbf 	.word	0x00008fbf
 80022a4:	00008080 	.word	0x00008080

080022a8 <st_usbfs_ep_read_packet>:

uint16_t st_usbfs_ep_read_packet(usbd_device *dev, uint8_t addr,
					 void *buf, uint16_t len)
{
 80022a8:	0010      	movs	r0, r2
	(void)dev;
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 80022aa:	22c0      	movs	r2, #192	; 0xc0
{
 80022ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ae:	001c      	movs	r4, r3
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 80022b0:	4b1e      	ldr	r3, [pc, #120]	; (800232c <st_usbfs_ep_read_packet+0x84>)
 80022b2:	008d      	lsls	r5, r1, #2
 80022b4:	18ed      	adds	r5, r5, r3
 80022b6:	682b      	ldr	r3, [r5, #0]
 80022b8:	0192      	lsls	r2, r2, #6
{
 80022ba:	000f      	movs	r7, r1
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 80022bc:	4013      	ands	r3, r2
 80022be:	4293      	cmp	r3, r2
 80022c0:	d032      	beq.n	8002328 <st_usbfs_ep_read_packet+0x80>
		return 0;
	}

	len = MIN(USB_GET_EP_RX_COUNT(addr) & 0x3ff, len);
 80022c2:	4a1b      	ldr	r2, [pc, #108]	; (8002330 <st_usbfs_ep_read_packet+0x88>)
 80022c4:	00ce      	lsls	r6, r1, #3
 80022c6:	6813      	ldr	r3, [r2, #0]
 80022c8:	491a      	ldr	r1, [pc, #104]	; (8002334 <st_usbfs_ep_read_packet+0x8c>)
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	18f3      	adds	r3, r6, r3
 80022ce:	185b      	adds	r3, r3, r1
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	059b      	lsls	r3, r3, #22
 80022d4:	0d9b      	lsrs	r3, r3, #22
 80022d6:	429c      	cmp	r4, r3
 80022d8:	d906      	bls.n	80022e8 <st_usbfs_ep_read_packet+0x40>
 80022da:	6813      	ldr	r3, [r2, #0]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	18f3      	adds	r3, r6, r3
 80022e0:	185b      	adds	r3, r3, r1
 80022e2:	881c      	ldrh	r4, [r3, #0]
 80022e4:	05a4      	lsls	r4, r4, #22
 80022e6:	0da4      	lsrs	r4, r4, #22
	st_usbfs_copy_from_pm(buf, USB_GET_EP_RX_BUFF(addr), len);
 80022e8:	6813      	ldr	r3, [r2, #0]
 80022ea:	0022      	movs	r2, r4
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	18f6      	adds	r6, r6, r3
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <st_usbfs_ep_read_packet+0x90>)
 80022f2:	18f6      	adds	r6, r6, r3
 80022f4:	8831      	ldrh	r1, [r6, #0]
 80022f6:	4b11      	ldr	r3, [pc, #68]	; (800233c <st_usbfs_ep_read_packet+0x94>)
 80022f8:	18c9      	adds	r1, r1, r3
 80022fa:	f000 f8e5 	bl	80024c8 <st_usbfs_copy_from_pm>
	USB_CLR_EP_RX_CTR(addr);
 80022fe:	682b      	ldr	r3, [r5, #0]
 8002300:	4a0f      	ldr	r2, [pc, #60]	; (8002340 <st_usbfs_ep_read_packet+0x98>)
 8002302:	401a      	ands	r2, r3
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	4313      	orrs	r3, r2
 8002308:	602b      	str	r3, [r5, #0]

	if (!st_usbfs_force_nak[addr]) {
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <st_usbfs_ep_read_packet+0x9c>)
 800230c:	5ddb      	ldrb	r3, [r3, r7]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d108      	bne.n	8002324 <st_usbfs_ep_read_packet+0x7c>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8002312:	682b      	ldr	r3, [r5, #0]
 8002314:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <st_usbfs_ep_read_packet+0xa0>)
 8002316:	401a      	ands	r2, r3
 8002318:	23c0      	movs	r3, #192	; 0xc0
 800231a:	019b      	lsls	r3, r3, #6
 800231c:	4053      	eors	r3, r2
 800231e:	4a0b      	ldr	r2, [pc, #44]	; (800234c <st_usbfs_ep_read_packet+0xa4>)
 8002320:	4313      	orrs	r3, r2
 8002322:	602b      	str	r3, [r5, #0]
	}

	return len;
}
 8002324:	0020      	movs	r0, r4
 8002326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 8002328:	2400      	movs	r4, #0
 800232a:	e7fb      	b.n	8002324 <st_usbfs_ep_read_packet+0x7c>
 800232c:	40005c00 	.word	0x40005c00
 8002330:	40005c50 	.word	0x40005c50
 8002334:	40006006 	.word	0x40006006
 8002338:	40006004 	.word	0x40006004
 800233c:	40006000 	.word	0x40006000
 8002340:	00000f0f 	.word	0x00000f0f
 8002344:	20000474 	.word	0x20000474
 8002348:	0000bf8f 	.word	0x0000bf8f
 800234c:	00008080 	.word	0x00008080

08002350 <st_usbfs_poll>:

void st_usbfs_poll(usbd_device *dev)
{
 8002350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t istr = *USB_ISTR_REG;
 8002352:	4b35      	ldr	r3, [pc, #212]	; (8002428 <st_usbfs_poll+0xd8>)
{
 8002354:	0004      	movs	r4, r0
	uint16_t istr = *USB_ISTR_REG;
 8002356:	681d      	ldr	r5, [r3, #0]

	if (istr & USB_ISTR_RESET) {
 8002358:	001f      	movs	r7, r3
 800235a:	b2aa      	uxth	r2, r5
 800235c:	9201      	str	r2, [sp, #4]
 800235e:	056a      	lsls	r2, r5, #21
 8002360:	d506      	bpl.n	8002370 <st_usbfs_poll+0x20>
		USB_CLR_ISTR_RESET();
 8002362:	4a32      	ldr	r2, [pc, #200]	; (800242c <st_usbfs_poll+0xdc>)
 8002364:	601a      	str	r2, [r3, #0]
		dev->pm_top = USBD_PM_TOP;
 8002366:	2340      	movs	r3, #64	; 0x40
 8002368:	8303      	strh	r3, [r0, #24]
		_usbd_reset(dev);
 800236a:	f7ff f8e0 	bl	800152e <_usbd_reset>
	if (dev->user_callback_sof) {
		*USB_CNTR_REG |= USB_CNTR_SOFM;
	} else {
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
	}
}
 800236e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	if (istr & USB_ISTR_CTR) {
 8002370:	042b      	lsls	r3, r5, #16
 8002372:	d520      	bpl.n	80023b6 <st_usbfs_poll+0x66>
		uint8_t ep = istr & USB_ISTR_EP_ID;
 8002374:	230f      	movs	r3, #15
		if (istr & USB_ISTR_DIR) {
 8002376:	2210      	movs	r2, #16
		uint8_t ep = istr & USB_ISTR_EP_ID;
 8002378:	401d      	ands	r5, r3
		if (istr & USB_ISTR_DIR) {
 800237a:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <st_usbfs_poll+0xe0>)
 800237c:	00ae      	lsls	r6, r5, #2
 800237e:	18f6      	adds	r6, r6, r3
 8002380:	9901      	ldr	r1, [sp, #4]
 8002382:	9b01      	ldr	r3, [sp, #4]
 8002384:	4013      	ands	r3, r2
 8002386:	4211      	tst	r1, r2
 8002388:	d03a      	beq.n	8002400 <st_usbfs_poll+0xb0>
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
 800238a:	6833      	ldr	r3, [r6, #0]
				type = USB_TRANSACTION_OUT;
 800238c:	3a0f      	subs	r2, #15
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
 800238e:	051b      	lsls	r3, r3, #20
 8002390:	d506      	bpl.n	80023a0 <st_usbfs_poll+0x50>
				st_usbfs_ep_read_packet(dev, ep, &dev->control_state.req, 8);
 8002392:	0002      	movs	r2, r0
 8002394:	2308      	movs	r3, #8
 8002396:	3230      	adds	r2, #48	; 0x30
 8002398:	0029      	movs	r1, r5
 800239a:	f7ff ff85 	bl	80022a8 <st_usbfs_ep_read_packet>
				type = USB_TRANSACTION_SETUP;
 800239e:	2202      	movs	r2, #2
		if (dev->user_callback_ctr[ep][type]) {
 80023a0:	2303      	movs	r3, #3
 80023a2:	436b      	muls	r3, r5
 80023a4:	189b      	adds	r3, r3, r2
 80023a6:	331a      	adds	r3, #26
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	591b      	ldr	r3, [r3, r4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d030      	beq.n	8002412 <st_usbfs_poll+0xc2>
			dev->user_callback_ctr[ep][type] (dev, ep);
 80023b0:	0029      	movs	r1, r5
 80023b2:	0020      	movs	r0, r4
 80023b4:	4798      	blx	r3
	if (istr & USB_ISTR_SUSP) {
 80023b6:	9b01      	ldr	r3, [sp, #4]
 80023b8:	051b      	lsls	r3, r3, #20
 80023ba:	d505      	bpl.n	80023c8 <st_usbfs_poll+0x78>
		USB_CLR_ISTR_SUSP();
 80023bc:	4b1d      	ldr	r3, [pc, #116]	; (8002434 <st_usbfs_poll+0xe4>)
 80023be:	603b      	str	r3, [r7, #0]
		if (dev->user_callback_suspend) {
 80023c0:	6a23      	ldr	r3, [r4, #32]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d000      	beq.n	80023c8 <st_usbfs_poll+0x78>
			dev->user_callback_suspend();
 80023c6:	4798      	blx	r3
	if (istr & USB_ISTR_WKUP) {
 80023c8:	9b01      	ldr	r3, [sp, #4]
 80023ca:	04db      	lsls	r3, r3, #19
 80023cc:	d505      	bpl.n	80023da <st_usbfs_poll+0x8a>
		USB_CLR_ISTR_WKUP();
 80023ce:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <st_usbfs_poll+0xe8>)
 80023d0:	603b      	str	r3, [r7, #0]
		if (dev->user_callback_resume) {
 80023d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d000      	beq.n	80023da <st_usbfs_poll+0x8a>
			dev->user_callback_resume();
 80023d8:	4798      	blx	r3
	if (istr & USB_ISTR_SOF) {
 80023da:	9b01      	ldr	r3, [sp, #4]
 80023dc:	4d17      	ldr	r5, [pc, #92]	; (800243c <st_usbfs_poll+0xec>)
 80023de:	059b      	lsls	r3, r3, #22
 80023e0:	d505      	bpl.n	80023ee <st_usbfs_poll+0x9e>
 80023e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		USB_CLR_ISTR_SOF();
 80023e4:	4a16      	ldr	r2, [pc, #88]	; (8002440 <st_usbfs_poll+0xf0>)
 80023e6:	603a      	str	r2, [r7, #0]
		if (dev->user_callback_sof) {
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d019      	beq.n	8002420 <st_usbfs_poll+0xd0>
			dev->user_callback_sof();
 80023ec:	4798      	blx	r3
	if (dev->user_callback_sof) {
 80023ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d015      	beq.n	8002420 <st_usbfs_poll+0xd0>
		*USB_CNTR_REG |= USB_CNTR_SOFM;
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	682a      	ldr	r2, [r5, #0]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4313      	orrs	r3, r2
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
 80023fc:	602b      	str	r3, [r5, #0]
 80023fe:	e7b6      	b.n	800236e <st_usbfs_poll+0x1e>
			USB_CLR_EP_TX_CTR(ep);
 8002400:	6832      	ldr	r2, [r6, #0]
 8002402:	4910      	ldr	r1, [pc, #64]	; (8002444 <st_usbfs_poll+0xf4>)
 8002404:	400a      	ands	r2, r1
 8002406:	2180      	movs	r1, #128	; 0x80
 8002408:	0209      	lsls	r1, r1, #8
 800240a:	430a      	orrs	r2, r1
 800240c:	6032      	str	r2, [r6, #0]
			type = USB_TRANSACTION_IN;
 800240e:	001a      	movs	r2, r3
 8002410:	e7c6      	b.n	80023a0 <st_usbfs_poll+0x50>
			USB_CLR_EP_RX_CTR(ep);
 8002412:	6833      	ldr	r3, [r6, #0]
 8002414:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <st_usbfs_poll+0xf4>)
 8002416:	401a      	ands	r2, r3
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	4313      	orrs	r3, r2
 800241c:	6033      	str	r3, [r6, #0]
 800241e:	e7ca      	b.n	80023b6 <st_usbfs_poll+0x66>
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
 8002420:	682b      	ldr	r3, [r5, #0]
 8002422:	4a09      	ldr	r2, [pc, #36]	; (8002448 <st_usbfs_poll+0xf8>)
 8002424:	4013      	ands	r3, r2
 8002426:	e7e9      	b.n	80023fc <st_usbfs_poll+0xac>
 8002428:	40005c44 	.word	0x40005c44
 800242c:	0000fbff 	.word	0x0000fbff
 8002430:	40005c00 	.word	0x40005c00
 8002434:	0000f7ff 	.word	0x0000f7ff
 8002438:	0000efff 	.word	0x0000efff
 800243c:	40005c40 	.word	0x40005c40
 8002440:	0000fdff 	.word	0x0000fdff
 8002444:	00000f0f 	.word	0x00000f0f
 8002448:	fffffdff 	.word	0xfffffdff

0800244c <st_usbfs_v2_disconnect>:
}

static void st_usbfs_v2_disconnect(usbd_device *usbd_dev, bool disconnected)
{
	(void)usbd_dev;
	uint16_t reg = GET_REG(USB_BCDR_REG);
 800244c:	4805      	ldr	r0, [pc, #20]	; (8002464 <st_usbfs_v2_disconnect+0x18>)
 800244e:	6803      	ldr	r3, [r0, #0]
	if (disconnected) {
 8002450:	2900      	cmp	r1, #0
 8002452:	d004      	beq.n	800245e <st_usbfs_v2_disconnect+0x12>
		SET_REG(USB_BCDR_REG, reg | USB_BCDR_DPPU);
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <st_usbfs_v2_disconnect+0x1c>)
 8002456:	4313      	orrs	r3, r2
 8002458:	b29b      	uxth	r3, r3
	} else {
		SET_REG(USB_BCDR_REG, reg & ~USB_BCDR_DPPU);
 800245a:	6003      	str	r3, [r0, #0]
	}
}
 800245c:	4770      	bx	lr
		SET_REG(USB_BCDR_REG, reg & ~USB_BCDR_DPPU);
 800245e:	045b      	lsls	r3, r3, #17
 8002460:	0c5b      	lsrs	r3, r3, #17
 8002462:	e7fa      	b.n	800245a <st_usbfs_v2_disconnect+0xe>
 8002464:	40005c58 	.word	0x40005c58
 8002468:	ffff8000 	.word	0xffff8000

0800246c <st_usbfs_v2_usbd_init>:
{
 800246c:	b510      	push	{r4, lr}
	rcc_periph_clock_enable(RCC_USB);
 800246e:	4809      	ldr	r0, [pc, #36]	; (8002494 <st_usbfs_v2_usbd_init+0x28>)
 8002470:	f7fe ff5c 	bl	800132c <rcc_periph_clock_enable>
	SET_REG(USB_CNTR_REG, 0);
 8002474:	2300      	movs	r3, #0
 8002476:	4a08      	ldr	r2, [pc, #32]	; (8002498 <st_usbfs_v2_usbd_init+0x2c>)
	SET_REG(USB_BTABLE_REG, 0);
 8002478:	4908      	ldr	r1, [pc, #32]	; (800249c <st_usbfs_v2_usbd_init+0x30>)
	SET_REG(USB_CNTR_REG, 0);
 800247a:	6013      	str	r3, [r2, #0]
	SET_REG(USB_BTABLE_REG, 0);
 800247c:	600b      	str	r3, [r1, #0]
	SET_REG(USB_ISTR_REG, 0);
 800247e:	4908      	ldr	r1, [pc, #32]	; (80024a0 <st_usbfs_v2_usbd_init+0x34>)
}
 8002480:	4808      	ldr	r0, [pc, #32]	; (80024a4 <st_usbfs_v2_usbd_init+0x38>)
	SET_REG(USB_ISTR_REG, 0);
 8002482:	600b      	str	r3, [r1, #0]
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
 8002484:	239c      	movs	r3, #156	; 0x9c
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	6013      	str	r3, [r2, #0]
	SET_REG(USB_BCDR_REG, USB_BCDR_DPPU);
 800248a:	2280      	movs	r2, #128	; 0x80
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <st_usbfs_v2_usbd_init+0x3c>)
 800248e:	0212      	lsls	r2, r2, #8
 8002490:	601a      	str	r2, [r3, #0]
}
 8002492:	bd10      	pop	{r4, pc}
 8002494:	00000717 	.word	0x00000717
 8002498:	40005c40 	.word	0x40005c40
 800249c:	40005c50 	.word	0x40005c50
 80024a0:	40005c44 	.word	0x40005c44
 80024a4:	20000378 	.word	0x20000378
 80024a8:	40005c58 	.word	0x40005c58

080024ac <st_usbfs_copy_to_pm>:
	for (i = 0; i < len; i += 2) {
 80024ac:	2300      	movs	r3, #0
{
 80024ae:	b5f0      	push	{r4, r5, r6, r7, lr}
		*PM++ = (uint16_t)lbuf[i+1] << 8 | lbuf[i];
 80024b0:	1c4f      	adds	r7, r1, #1
 80024b2:	18c6      	adds	r6, r0, r3
	for (i = 0; i < len; i += 2) {
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d800      	bhi.n	80024ba <st_usbfs_copy_to_pm+0xe>
}
 80024b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*PM++ = (uint16_t)lbuf[i+1] << 8 | lbuf[i];
 80024ba:	5cfd      	ldrb	r5, [r7, r3]
 80024bc:	5ccc      	ldrb	r4, [r1, r3]
 80024be:	022d      	lsls	r5, r5, #8
 80024c0:	432c      	orrs	r4, r5
 80024c2:	8034      	strh	r4, [r6, #0]
	for (i = 0; i < len; i += 2) {
 80024c4:	3302      	adds	r3, #2
 80024c6:	e7f4      	b.n	80024b2 <st_usbfs_copy_to_pm+0x6>

080024c8 <st_usbfs_copy_from_pm>:
	uint8_t odd = len & 1;
 80024c8:	2301      	movs	r3, #1
{
 80024ca:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t odd = len & 1;
 80024cc:	0014      	movs	r4, r2
	if (((uintptr_t) buf) & 0x01) {
 80024ce:	0006      	movs	r6, r0
	len >>= 1;
 80024d0:	40da      	lsrs	r2, r3
	uint8_t odd = len & 1;
 80024d2:	401c      	ands	r4, r3
	if (((uintptr_t) buf) & 0x01) {
 80024d4:	4218      	tst	r0, r3
 80024d6:	d11e      	bne.n	8002516 <st_usbfs_copy_from_pm+0x4e>
	const volatile uint16_t *PM = vPM;
 80024d8:	000e      	movs	r6, r1
	len >>= 1;
 80024da:	0013      	movs	r3, r2
 80024dc:	0005      	movs	r5, r0
		for (; len; PM++, buf += 2, len--) {
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d011      	beq.n	8002506 <st_usbfs_copy_from_pm+0x3e>
			*(uint16_t *) buf = *PM;
 80024e2:	8837      	ldrh	r7, [r6, #0]
		for (; len; PM++, buf += 2, len--) {
 80024e4:	3b01      	subs	r3, #1
			*(uint16_t *) buf = *PM;
 80024e6:	802f      	strh	r7, [r5, #0]
		for (; len; PM++, buf += 2, len--) {
 80024e8:	3602      	adds	r6, #2
 80024ea:	3502      	adds	r5, #2
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	e7f6      	b.n	80024de <st_usbfs_copy_from_pm+0x16>
			uint16_t value = *PM;
 80024f0:	883b      	ldrh	r3, [r7, #0]
		for (; len; PM++, len--) {
 80024f2:	3d01      	subs	r5, #1
			uint16_t value = *PM;
 80024f4:	b29b      	uxth	r3, r3
			*(uint8_t *) buf++ = value;
 80024f6:	7033      	strb	r3, [r6, #0]
			*(uint8_t *) buf++ = value >> 8;
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	7073      	strb	r3, [r6, #1]
		for (; len; PM++, len--) {
 80024fc:	3702      	adds	r7, #2
 80024fe:	b2ad      	uxth	r5, r5
 8002500:	3602      	adds	r6, #2
 8002502:	2d00      	cmp	r5, #0
 8002504:	d1f4      	bne.n	80024f0 <st_usbfs_copy_from_pm+0x28>
 8002506:	0052      	lsls	r2, r2, #1
 8002508:	1880      	adds	r0, r0, r2
 800250a:	188a      	adds	r2, r1, r2
	if (odd) {
 800250c:	2c00      	cmp	r4, #0
 800250e:	d001      	beq.n	8002514 <st_usbfs_copy_from_pm+0x4c>
		*(uint8_t *) buf = *(uint8_t *) PM;
 8002510:	7813      	ldrb	r3, [r2, #0]
 8002512:	7003      	strb	r3, [r0, #0]
}
 8002514:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const volatile uint16_t *PM = vPM;
 8002516:	000f      	movs	r7, r1
	len >>= 1;
 8002518:	0015      	movs	r5, r2
 800251a:	e7f2      	b.n	8002502 <st_usbfs_copy_from_pm+0x3a>

0800251c <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 800251c:	e7fe      	b.n	800251c <blocking_handler>

0800251e <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 800251e:	4770      	bx	lr

08002520 <reset_handler>:
{
 8002520:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <reset_handler+0x5c>)
 8002524:	4a16      	ldr	r2, [pc, #88]	; (8002580 <reset_handler+0x60>)
 8002526:	4917      	ldr	r1, [pc, #92]	; (8002584 <reset_handler+0x64>)
 8002528:	428b      	cmp	r3, r1
 800252a:	d318      	bcc.n	800255e <reset_handler+0x3e>
		*dest++ = 0;
 800252c:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 800252e:	4a16      	ldr	r2, [pc, #88]	; (8002588 <reset_handler+0x68>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d317      	bcc.n	8002564 <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	4a15      	ldr	r2, [pc, #84]	; (800258c <reset_handler+0x6c>)
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 800253c:	4c14      	ldr	r4, [pc, #80]	; (8002590 <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 800253e:	430b      	orrs	r3, r1
 8002540:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8002542:	4b14      	ldr	r3, [pc, #80]	; (8002594 <reset_handler+0x74>)
 8002544:	429c      	cmp	r4, r3
 8002546:	d30f      	bcc.n	8002568 <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8002548:	4c13      	ldr	r4, [pc, #76]	; (8002598 <reset_handler+0x78>)
 800254a:	4b14      	ldr	r3, [pc, #80]	; (800259c <reset_handler+0x7c>)
 800254c:	429c      	cmp	r4, r3
 800254e:	d30e      	bcc.n	800256e <reset_handler+0x4e>
	(void)main();
 8002550:	f7fd ffd0 	bl	80004f4 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8002554:	4c12      	ldr	r4, [pc, #72]	; (80025a0 <reset_handler+0x80>)
 8002556:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <reset_handler+0x84>)
 8002558:	429c      	cmp	r4, r3
 800255a:	d30b      	bcc.n	8002574 <reset_handler+0x54>
}
 800255c:	bd10      	pop	{r4, pc}
		*dest = *src;
 800255e:	ca01      	ldmia	r2!, {r0}
 8002560:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 8002562:	e7e1      	b.n	8002528 <reset_handler+0x8>
		*dest++ = 0;
 8002564:	c302      	stmia	r3!, {r1}
 8002566:	e7e3      	b.n	8002530 <reset_handler+0x10>
		(*fp)();
 8002568:	cc08      	ldmia	r4!, {r3}
 800256a:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 800256c:	e7e9      	b.n	8002542 <reset_handler+0x22>
		(*fp)();
 800256e:	cc08      	ldmia	r4!, {r3}
 8002570:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8002572:	e7ea      	b.n	800254a <reset_handler+0x2a>
		(*fp)();
 8002574:	cc08      	ldmia	r4!, {r3}
 8002576:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8002578:	e7ed      	b.n	8002556 <reset_handler+0x36>
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	20000000 	.word	0x20000000
 8002580:	08002cb4 	.word	0x08002cb4
 8002584:	2000004c 	.word	0x2000004c
 8002588:	2000047c 	.word	0x2000047c
 800258c:	e000ed14 	.word	0xe000ed14
 8002590:	08002cb4 	.word	0x08002cb4
 8002594:	08002cb4 	.word	0x08002cb4
 8002598:	08002cb4 	.word	0x08002cb4
 800259c:	08002cb4 	.word	0x08002cb4
 80025a0:	08002cb4 	.word	0x08002cb4
 80025a4:	08002cb4 	.word	0x08002cb4

080025a8 <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref CM3_nvic_defines_irqs
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 80025a8:	4a04      	ldr	r2, [pc, #16]	; (80025bc <nvic_enable_irq+0x14>)
 80025aa:	0943      	lsrs	r3, r0, #5
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	189b      	adds	r3, r3, r2
 80025b0:	221f      	movs	r2, #31
 80025b2:	4010      	ands	r0, r2
 80025b4:	3a1e      	subs	r2, #30
 80025b6:	4082      	lsls	r2, r0
 80025b8:	601a      	str	r2, [r3, #0]
}
 80025ba:	4770      	bx	lr
 80025bc:	e000e100 	.word	0xe000e100

080025c0 <nvic_set_priority>:
 * @param[in] irqn Interrupt number @ref CM3_nvic_defines_irqs
 * @param[in] priority Interrupt priority (0 ... 255 in steps of 16)
 */
#endif
void nvic_set_priority(uint8_t irqn, uint8_t priority)
{
 80025c0:	b510      	push	{r4, lr}
	/* code from lpc43xx/nvic.c -- this is quite a hack and alludes to the
	 * negative interrupt numbers assigned to the system interrupts. better
	 * handling would mean signed integers. */
	if (irqn >= NVIC_IRQ_COUNT) {
 80025c2:	281f      	cmp	r0, #31
 80025c4:	d912      	bls.n	80025ec <nvic_set_priority+0x2c>
		/* Cortex-M  system interrupts */
#if defined(__ARM_ARCH_6M__)
		/* ARM6M supports only 32bit word access to SHPR registers */
		irqn = (irqn & 0xF) - 4;
 80025c6:	230f      	movs	r3, #15
 80025c8:	4018      	ands	r0, r3
 80025ca:	3804      	subs	r0, #4
 80025cc:	b2c0      	uxtb	r0, r0
		uint8_t shift = (irqn & 0x3) << 3;
		uint8_t reg = irqn >> 2;
		SCB_SHPR32(reg) = ((SCB_SHPR32(reg) & ~(0xFFUL << shift)) |
 80025ce:	0883      	lsrs	r3, r0, #2
 80025d0:	4a08      	ldr	r2, [pc, #32]	; (80025f4 <nvic_set_priority+0x34>)
 80025d2:	009b      	lsls	r3, r3, #2
		/* Device specific interrupts */
#if defined(__ARM_ARCH_6M__)
		/* ARM6M supports only 32bit word access to IPR registers */
		uint8_t shift = (irqn & 0x3) << 3;
		uint8_t reg = irqn >> 2;
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 80025d4:	2418      	movs	r4, #24
		uint8_t shift = (irqn & 0x3) << 3;
 80025d6:	00c0      	lsls	r0, r0, #3
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 80025d8:	4020      	ands	r0, r4
 80025da:	34e7      	adds	r4, #231	; 0xe7
 80025dc:	4084      	lsls	r4, r0
				((uint32_t) priority) << shift);
 80025de:	4081      	lsls	r1, r0
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 80025e0:	189b      	adds	r3, r3, r2
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	43a2      	bics	r2, r4
 80025e6:	4311      	orrs	r1, r2
 80025e8:	6019      	str	r1, [r3, #0]
#else
		NVIC_IPR(irqn) = priority;
#endif
	}
}
 80025ea:	bd10      	pop	{r4, pc}
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 80025ec:	0883      	lsrs	r3, r0, #2
 80025ee:	4a02      	ldr	r2, [pc, #8]	; (80025f8 <nvic_set_priority+0x38>)
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	e7ef      	b.n	80025d4 <nvic_set_priority+0x14>
 80025f4:	e000ed18 	.word	0xe000ed18
 80025f8:	e000e400 	.word	0xe000e400

080025fc <memcpy>:
 80025fc:	2300      	movs	r3, #0
 80025fe:	b510      	push	{r4, lr}
 8002600:	429a      	cmp	r2, r3
 8002602:	d100      	bne.n	8002606 <memcpy+0xa>
 8002604:	bd10      	pop	{r4, pc}
 8002606:	5ccc      	ldrb	r4, [r1, r3]
 8002608:	54c4      	strb	r4, [r0, r3]
 800260a:	3301      	adds	r3, #1
 800260c:	e7f8      	b.n	8002600 <memcpy+0x4>

0800260e <strlen>:
 800260e:	2300      	movs	r3, #0
 8002610:	5cc2      	ldrb	r2, [r0, r3]
 8002612:	3301      	adds	r3, #1
 8002614:	2a00      	cmp	r2, #0
 8002616:	d1fb      	bne.n	8002610 <strlen+0x2>
 8002618:	1e58      	subs	r0, r3, #1
 800261a:	4770      	bx	lr

0800261c <__gnu_thumb1_case_uqi>:
 800261c:	b402      	push	{r1}
 800261e:	4671      	mov	r1, lr
 8002620:	0849      	lsrs	r1, r1, #1
 8002622:	0049      	lsls	r1, r1, #1
 8002624:	5c09      	ldrb	r1, [r1, r0]
 8002626:	0049      	lsls	r1, r1, #1
 8002628:	448e      	add	lr, r1
 800262a:	bc02      	pop	{r1}
 800262c:	4770      	bx	lr
 800262e:	46c0      	nop			; (mov r8, r8)

08002630 <__udivsi3>:
 8002630:	2200      	movs	r2, #0
 8002632:	0843      	lsrs	r3, r0, #1
 8002634:	428b      	cmp	r3, r1
 8002636:	d374      	bcc.n	8002722 <__udivsi3+0xf2>
 8002638:	0903      	lsrs	r3, r0, #4
 800263a:	428b      	cmp	r3, r1
 800263c:	d35f      	bcc.n	80026fe <__udivsi3+0xce>
 800263e:	0a03      	lsrs	r3, r0, #8
 8002640:	428b      	cmp	r3, r1
 8002642:	d344      	bcc.n	80026ce <__udivsi3+0x9e>
 8002644:	0b03      	lsrs	r3, r0, #12
 8002646:	428b      	cmp	r3, r1
 8002648:	d328      	bcc.n	800269c <__udivsi3+0x6c>
 800264a:	0c03      	lsrs	r3, r0, #16
 800264c:	428b      	cmp	r3, r1
 800264e:	d30d      	bcc.n	800266c <__udivsi3+0x3c>
 8002650:	22ff      	movs	r2, #255	; 0xff
 8002652:	0209      	lsls	r1, r1, #8
 8002654:	ba12      	rev	r2, r2
 8002656:	0c03      	lsrs	r3, r0, #16
 8002658:	428b      	cmp	r3, r1
 800265a:	d302      	bcc.n	8002662 <__udivsi3+0x32>
 800265c:	1212      	asrs	r2, r2, #8
 800265e:	0209      	lsls	r1, r1, #8
 8002660:	d065      	beq.n	800272e <__udivsi3+0xfe>
 8002662:	0b03      	lsrs	r3, r0, #12
 8002664:	428b      	cmp	r3, r1
 8002666:	d319      	bcc.n	800269c <__udivsi3+0x6c>
 8002668:	e000      	b.n	800266c <__udivsi3+0x3c>
 800266a:	0a09      	lsrs	r1, r1, #8
 800266c:	0bc3      	lsrs	r3, r0, #15
 800266e:	428b      	cmp	r3, r1
 8002670:	d301      	bcc.n	8002676 <__udivsi3+0x46>
 8002672:	03cb      	lsls	r3, r1, #15
 8002674:	1ac0      	subs	r0, r0, r3
 8002676:	4152      	adcs	r2, r2
 8002678:	0b83      	lsrs	r3, r0, #14
 800267a:	428b      	cmp	r3, r1
 800267c:	d301      	bcc.n	8002682 <__udivsi3+0x52>
 800267e:	038b      	lsls	r3, r1, #14
 8002680:	1ac0      	subs	r0, r0, r3
 8002682:	4152      	adcs	r2, r2
 8002684:	0b43      	lsrs	r3, r0, #13
 8002686:	428b      	cmp	r3, r1
 8002688:	d301      	bcc.n	800268e <__udivsi3+0x5e>
 800268a:	034b      	lsls	r3, r1, #13
 800268c:	1ac0      	subs	r0, r0, r3
 800268e:	4152      	adcs	r2, r2
 8002690:	0b03      	lsrs	r3, r0, #12
 8002692:	428b      	cmp	r3, r1
 8002694:	d301      	bcc.n	800269a <__udivsi3+0x6a>
 8002696:	030b      	lsls	r3, r1, #12
 8002698:	1ac0      	subs	r0, r0, r3
 800269a:	4152      	adcs	r2, r2
 800269c:	0ac3      	lsrs	r3, r0, #11
 800269e:	428b      	cmp	r3, r1
 80026a0:	d301      	bcc.n	80026a6 <__udivsi3+0x76>
 80026a2:	02cb      	lsls	r3, r1, #11
 80026a4:	1ac0      	subs	r0, r0, r3
 80026a6:	4152      	adcs	r2, r2
 80026a8:	0a83      	lsrs	r3, r0, #10
 80026aa:	428b      	cmp	r3, r1
 80026ac:	d301      	bcc.n	80026b2 <__udivsi3+0x82>
 80026ae:	028b      	lsls	r3, r1, #10
 80026b0:	1ac0      	subs	r0, r0, r3
 80026b2:	4152      	adcs	r2, r2
 80026b4:	0a43      	lsrs	r3, r0, #9
 80026b6:	428b      	cmp	r3, r1
 80026b8:	d301      	bcc.n	80026be <__udivsi3+0x8e>
 80026ba:	024b      	lsls	r3, r1, #9
 80026bc:	1ac0      	subs	r0, r0, r3
 80026be:	4152      	adcs	r2, r2
 80026c0:	0a03      	lsrs	r3, r0, #8
 80026c2:	428b      	cmp	r3, r1
 80026c4:	d301      	bcc.n	80026ca <__udivsi3+0x9a>
 80026c6:	020b      	lsls	r3, r1, #8
 80026c8:	1ac0      	subs	r0, r0, r3
 80026ca:	4152      	adcs	r2, r2
 80026cc:	d2cd      	bcs.n	800266a <__udivsi3+0x3a>
 80026ce:	09c3      	lsrs	r3, r0, #7
 80026d0:	428b      	cmp	r3, r1
 80026d2:	d301      	bcc.n	80026d8 <__udivsi3+0xa8>
 80026d4:	01cb      	lsls	r3, r1, #7
 80026d6:	1ac0      	subs	r0, r0, r3
 80026d8:	4152      	adcs	r2, r2
 80026da:	0983      	lsrs	r3, r0, #6
 80026dc:	428b      	cmp	r3, r1
 80026de:	d301      	bcc.n	80026e4 <__udivsi3+0xb4>
 80026e0:	018b      	lsls	r3, r1, #6
 80026e2:	1ac0      	subs	r0, r0, r3
 80026e4:	4152      	adcs	r2, r2
 80026e6:	0943      	lsrs	r3, r0, #5
 80026e8:	428b      	cmp	r3, r1
 80026ea:	d301      	bcc.n	80026f0 <__udivsi3+0xc0>
 80026ec:	014b      	lsls	r3, r1, #5
 80026ee:	1ac0      	subs	r0, r0, r3
 80026f0:	4152      	adcs	r2, r2
 80026f2:	0903      	lsrs	r3, r0, #4
 80026f4:	428b      	cmp	r3, r1
 80026f6:	d301      	bcc.n	80026fc <__udivsi3+0xcc>
 80026f8:	010b      	lsls	r3, r1, #4
 80026fa:	1ac0      	subs	r0, r0, r3
 80026fc:	4152      	adcs	r2, r2
 80026fe:	08c3      	lsrs	r3, r0, #3
 8002700:	428b      	cmp	r3, r1
 8002702:	d301      	bcc.n	8002708 <__udivsi3+0xd8>
 8002704:	00cb      	lsls	r3, r1, #3
 8002706:	1ac0      	subs	r0, r0, r3
 8002708:	4152      	adcs	r2, r2
 800270a:	0883      	lsrs	r3, r0, #2
 800270c:	428b      	cmp	r3, r1
 800270e:	d301      	bcc.n	8002714 <__udivsi3+0xe4>
 8002710:	008b      	lsls	r3, r1, #2
 8002712:	1ac0      	subs	r0, r0, r3
 8002714:	4152      	adcs	r2, r2
 8002716:	0843      	lsrs	r3, r0, #1
 8002718:	428b      	cmp	r3, r1
 800271a:	d301      	bcc.n	8002720 <__udivsi3+0xf0>
 800271c:	004b      	lsls	r3, r1, #1
 800271e:	1ac0      	subs	r0, r0, r3
 8002720:	4152      	adcs	r2, r2
 8002722:	1a41      	subs	r1, r0, r1
 8002724:	d200      	bcs.n	8002728 <__udivsi3+0xf8>
 8002726:	4601      	mov	r1, r0
 8002728:	4152      	adcs	r2, r2
 800272a:	4610      	mov	r0, r2
 800272c:	4770      	bx	lr
 800272e:	e7ff      	b.n	8002730 <__udivsi3+0x100>
 8002730:	b501      	push	{r0, lr}
 8002732:	2000      	movs	r0, #0
 8002734:	f000 f8f0 	bl	8002918 <__aeabi_idiv0>
 8002738:	bd02      	pop	{r1, pc}
 800273a:	46c0      	nop			; (mov r8, r8)

0800273c <__aeabi_uidivmod>:
 800273c:	2900      	cmp	r1, #0
 800273e:	d0f7      	beq.n	8002730 <__udivsi3+0x100>
 8002740:	e776      	b.n	8002630 <__udivsi3>
 8002742:	4770      	bx	lr

08002744 <__divsi3>:
 8002744:	4603      	mov	r3, r0
 8002746:	430b      	orrs	r3, r1
 8002748:	d47f      	bmi.n	800284a <__divsi3+0x106>
 800274a:	2200      	movs	r2, #0
 800274c:	0843      	lsrs	r3, r0, #1
 800274e:	428b      	cmp	r3, r1
 8002750:	d374      	bcc.n	800283c <__divsi3+0xf8>
 8002752:	0903      	lsrs	r3, r0, #4
 8002754:	428b      	cmp	r3, r1
 8002756:	d35f      	bcc.n	8002818 <__divsi3+0xd4>
 8002758:	0a03      	lsrs	r3, r0, #8
 800275a:	428b      	cmp	r3, r1
 800275c:	d344      	bcc.n	80027e8 <__divsi3+0xa4>
 800275e:	0b03      	lsrs	r3, r0, #12
 8002760:	428b      	cmp	r3, r1
 8002762:	d328      	bcc.n	80027b6 <__divsi3+0x72>
 8002764:	0c03      	lsrs	r3, r0, #16
 8002766:	428b      	cmp	r3, r1
 8002768:	d30d      	bcc.n	8002786 <__divsi3+0x42>
 800276a:	22ff      	movs	r2, #255	; 0xff
 800276c:	0209      	lsls	r1, r1, #8
 800276e:	ba12      	rev	r2, r2
 8002770:	0c03      	lsrs	r3, r0, #16
 8002772:	428b      	cmp	r3, r1
 8002774:	d302      	bcc.n	800277c <__divsi3+0x38>
 8002776:	1212      	asrs	r2, r2, #8
 8002778:	0209      	lsls	r1, r1, #8
 800277a:	d065      	beq.n	8002848 <__divsi3+0x104>
 800277c:	0b03      	lsrs	r3, r0, #12
 800277e:	428b      	cmp	r3, r1
 8002780:	d319      	bcc.n	80027b6 <__divsi3+0x72>
 8002782:	e000      	b.n	8002786 <__divsi3+0x42>
 8002784:	0a09      	lsrs	r1, r1, #8
 8002786:	0bc3      	lsrs	r3, r0, #15
 8002788:	428b      	cmp	r3, r1
 800278a:	d301      	bcc.n	8002790 <__divsi3+0x4c>
 800278c:	03cb      	lsls	r3, r1, #15
 800278e:	1ac0      	subs	r0, r0, r3
 8002790:	4152      	adcs	r2, r2
 8002792:	0b83      	lsrs	r3, r0, #14
 8002794:	428b      	cmp	r3, r1
 8002796:	d301      	bcc.n	800279c <__divsi3+0x58>
 8002798:	038b      	lsls	r3, r1, #14
 800279a:	1ac0      	subs	r0, r0, r3
 800279c:	4152      	adcs	r2, r2
 800279e:	0b43      	lsrs	r3, r0, #13
 80027a0:	428b      	cmp	r3, r1
 80027a2:	d301      	bcc.n	80027a8 <__divsi3+0x64>
 80027a4:	034b      	lsls	r3, r1, #13
 80027a6:	1ac0      	subs	r0, r0, r3
 80027a8:	4152      	adcs	r2, r2
 80027aa:	0b03      	lsrs	r3, r0, #12
 80027ac:	428b      	cmp	r3, r1
 80027ae:	d301      	bcc.n	80027b4 <__divsi3+0x70>
 80027b0:	030b      	lsls	r3, r1, #12
 80027b2:	1ac0      	subs	r0, r0, r3
 80027b4:	4152      	adcs	r2, r2
 80027b6:	0ac3      	lsrs	r3, r0, #11
 80027b8:	428b      	cmp	r3, r1
 80027ba:	d301      	bcc.n	80027c0 <__divsi3+0x7c>
 80027bc:	02cb      	lsls	r3, r1, #11
 80027be:	1ac0      	subs	r0, r0, r3
 80027c0:	4152      	adcs	r2, r2
 80027c2:	0a83      	lsrs	r3, r0, #10
 80027c4:	428b      	cmp	r3, r1
 80027c6:	d301      	bcc.n	80027cc <__divsi3+0x88>
 80027c8:	028b      	lsls	r3, r1, #10
 80027ca:	1ac0      	subs	r0, r0, r3
 80027cc:	4152      	adcs	r2, r2
 80027ce:	0a43      	lsrs	r3, r0, #9
 80027d0:	428b      	cmp	r3, r1
 80027d2:	d301      	bcc.n	80027d8 <__divsi3+0x94>
 80027d4:	024b      	lsls	r3, r1, #9
 80027d6:	1ac0      	subs	r0, r0, r3
 80027d8:	4152      	adcs	r2, r2
 80027da:	0a03      	lsrs	r3, r0, #8
 80027dc:	428b      	cmp	r3, r1
 80027de:	d301      	bcc.n	80027e4 <__divsi3+0xa0>
 80027e0:	020b      	lsls	r3, r1, #8
 80027e2:	1ac0      	subs	r0, r0, r3
 80027e4:	4152      	adcs	r2, r2
 80027e6:	d2cd      	bcs.n	8002784 <__divsi3+0x40>
 80027e8:	09c3      	lsrs	r3, r0, #7
 80027ea:	428b      	cmp	r3, r1
 80027ec:	d301      	bcc.n	80027f2 <__divsi3+0xae>
 80027ee:	01cb      	lsls	r3, r1, #7
 80027f0:	1ac0      	subs	r0, r0, r3
 80027f2:	4152      	adcs	r2, r2
 80027f4:	0983      	lsrs	r3, r0, #6
 80027f6:	428b      	cmp	r3, r1
 80027f8:	d301      	bcc.n	80027fe <__divsi3+0xba>
 80027fa:	018b      	lsls	r3, r1, #6
 80027fc:	1ac0      	subs	r0, r0, r3
 80027fe:	4152      	adcs	r2, r2
 8002800:	0943      	lsrs	r3, r0, #5
 8002802:	428b      	cmp	r3, r1
 8002804:	d301      	bcc.n	800280a <__divsi3+0xc6>
 8002806:	014b      	lsls	r3, r1, #5
 8002808:	1ac0      	subs	r0, r0, r3
 800280a:	4152      	adcs	r2, r2
 800280c:	0903      	lsrs	r3, r0, #4
 800280e:	428b      	cmp	r3, r1
 8002810:	d301      	bcc.n	8002816 <__divsi3+0xd2>
 8002812:	010b      	lsls	r3, r1, #4
 8002814:	1ac0      	subs	r0, r0, r3
 8002816:	4152      	adcs	r2, r2
 8002818:	08c3      	lsrs	r3, r0, #3
 800281a:	428b      	cmp	r3, r1
 800281c:	d301      	bcc.n	8002822 <__divsi3+0xde>
 800281e:	00cb      	lsls	r3, r1, #3
 8002820:	1ac0      	subs	r0, r0, r3
 8002822:	4152      	adcs	r2, r2
 8002824:	0883      	lsrs	r3, r0, #2
 8002826:	428b      	cmp	r3, r1
 8002828:	d301      	bcc.n	800282e <__divsi3+0xea>
 800282a:	008b      	lsls	r3, r1, #2
 800282c:	1ac0      	subs	r0, r0, r3
 800282e:	4152      	adcs	r2, r2
 8002830:	0843      	lsrs	r3, r0, #1
 8002832:	428b      	cmp	r3, r1
 8002834:	d301      	bcc.n	800283a <__divsi3+0xf6>
 8002836:	004b      	lsls	r3, r1, #1
 8002838:	1ac0      	subs	r0, r0, r3
 800283a:	4152      	adcs	r2, r2
 800283c:	1a41      	subs	r1, r0, r1
 800283e:	d200      	bcs.n	8002842 <__divsi3+0xfe>
 8002840:	4601      	mov	r1, r0
 8002842:	4152      	adcs	r2, r2
 8002844:	4610      	mov	r0, r2
 8002846:	4770      	bx	lr
 8002848:	e05d      	b.n	8002906 <__divsi3+0x1c2>
 800284a:	0fca      	lsrs	r2, r1, #31
 800284c:	d000      	beq.n	8002850 <__divsi3+0x10c>
 800284e:	4249      	negs	r1, r1
 8002850:	1003      	asrs	r3, r0, #32
 8002852:	d300      	bcc.n	8002856 <__divsi3+0x112>
 8002854:	4240      	negs	r0, r0
 8002856:	4053      	eors	r3, r2
 8002858:	2200      	movs	r2, #0
 800285a:	469c      	mov	ip, r3
 800285c:	0903      	lsrs	r3, r0, #4
 800285e:	428b      	cmp	r3, r1
 8002860:	d32d      	bcc.n	80028be <__divsi3+0x17a>
 8002862:	0a03      	lsrs	r3, r0, #8
 8002864:	428b      	cmp	r3, r1
 8002866:	d312      	bcc.n	800288e <__divsi3+0x14a>
 8002868:	22fc      	movs	r2, #252	; 0xfc
 800286a:	0189      	lsls	r1, r1, #6
 800286c:	ba12      	rev	r2, r2
 800286e:	0a03      	lsrs	r3, r0, #8
 8002870:	428b      	cmp	r3, r1
 8002872:	d30c      	bcc.n	800288e <__divsi3+0x14a>
 8002874:	0189      	lsls	r1, r1, #6
 8002876:	1192      	asrs	r2, r2, #6
 8002878:	428b      	cmp	r3, r1
 800287a:	d308      	bcc.n	800288e <__divsi3+0x14a>
 800287c:	0189      	lsls	r1, r1, #6
 800287e:	1192      	asrs	r2, r2, #6
 8002880:	428b      	cmp	r3, r1
 8002882:	d304      	bcc.n	800288e <__divsi3+0x14a>
 8002884:	0189      	lsls	r1, r1, #6
 8002886:	d03a      	beq.n	80028fe <__divsi3+0x1ba>
 8002888:	1192      	asrs	r2, r2, #6
 800288a:	e000      	b.n	800288e <__divsi3+0x14a>
 800288c:	0989      	lsrs	r1, r1, #6
 800288e:	09c3      	lsrs	r3, r0, #7
 8002890:	428b      	cmp	r3, r1
 8002892:	d301      	bcc.n	8002898 <__divsi3+0x154>
 8002894:	01cb      	lsls	r3, r1, #7
 8002896:	1ac0      	subs	r0, r0, r3
 8002898:	4152      	adcs	r2, r2
 800289a:	0983      	lsrs	r3, r0, #6
 800289c:	428b      	cmp	r3, r1
 800289e:	d301      	bcc.n	80028a4 <__divsi3+0x160>
 80028a0:	018b      	lsls	r3, r1, #6
 80028a2:	1ac0      	subs	r0, r0, r3
 80028a4:	4152      	adcs	r2, r2
 80028a6:	0943      	lsrs	r3, r0, #5
 80028a8:	428b      	cmp	r3, r1
 80028aa:	d301      	bcc.n	80028b0 <__divsi3+0x16c>
 80028ac:	014b      	lsls	r3, r1, #5
 80028ae:	1ac0      	subs	r0, r0, r3
 80028b0:	4152      	adcs	r2, r2
 80028b2:	0903      	lsrs	r3, r0, #4
 80028b4:	428b      	cmp	r3, r1
 80028b6:	d301      	bcc.n	80028bc <__divsi3+0x178>
 80028b8:	010b      	lsls	r3, r1, #4
 80028ba:	1ac0      	subs	r0, r0, r3
 80028bc:	4152      	adcs	r2, r2
 80028be:	08c3      	lsrs	r3, r0, #3
 80028c0:	428b      	cmp	r3, r1
 80028c2:	d301      	bcc.n	80028c8 <__divsi3+0x184>
 80028c4:	00cb      	lsls	r3, r1, #3
 80028c6:	1ac0      	subs	r0, r0, r3
 80028c8:	4152      	adcs	r2, r2
 80028ca:	0883      	lsrs	r3, r0, #2
 80028cc:	428b      	cmp	r3, r1
 80028ce:	d301      	bcc.n	80028d4 <__divsi3+0x190>
 80028d0:	008b      	lsls	r3, r1, #2
 80028d2:	1ac0      	subs	r0, r0, r3
 80028d4:	4152      	adcs	r2, r2
 80028d6:	d2d9      	bcs.n	800288c <__divsi3+0x148>
 80028d8:	0843      	lsrs	r3, r0, #1
 80028da:	428b      	cmp	r3, r1
 80028dc:	d301      	bcc.n	80028e2 <__divsi3+0x19e>
 80028de:	004b      	lsls	r3, r1, #1
 80028e0:	1ac0      	subs	r0, r0, r3
 80028e2:	4152      	adcs	r2, r2
 80028e4:	1a41      	subs	r1, r0, r1
 80028e6:	d200      	bcs.n	80028ea <__divsi3+0x1a6>
 80028e8:	4601      	mov	r1, r0
 80028ea:	4663      	mov	r3, ip
 80028ec:	4152      	adcs	r2, r2
 80028ee:	105b      	asrs	r3, r3, #1
 80028f0:	4610      	mov	r0, r2
 80028f2:	d301      	bcc.n	80028f8 <__divsi3+0x1b4>
 80028f4:	4240      	negs	r0, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d500      	bpl.n	80028fc <__divsi3+0x1b8>
 80028fa:	4249      	negs	r1, r1
 80028fc:	4770      	bx	lr
 80028fe:	4663      	mov	r3, ip
 8002900:	105b      	asrs	r3, r3, #1
 8002902:	d300      	bcc.n	8002906 <__divsi3+0x1c2>
 8002904:	4240      	negs	r0, r0
 8002906:	b501      	push	{r0, lr}
 8002908:	2000      	movs	r0, #0
 800290a:	f000 f805 	bl	8002918 <__aeabi_idiv0>
 800290e:	bd02      	pop	{r1, pc}

08002910 <__aeabi_idivmod>:
 8002910:	2900      	cmp	r1, #0
 8002912:	d0f8      	beq.n	8002906 <__divsi3+0x1c2>
 8002914:	e716      	b.n	8002744 <__divsi3>
 8002916:	4770      	bx	lr

08002918 <__aeabi_idiv0>:
 8002918:	4770      	bx	lr
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	2074754f 	.word	0x2074754f
 8002920:	6f706552 	.word	0x6f706552
 8002924:	43207472 	.word	0x43207472
 8002928:	626c6c61 	.word	0x626c6c61
 800292c:	0a6b6361 	.word	0x0a6b6361
 8002930:	00000000 	.word	0x00000000
 8002934:	00000049 	.word	0x00000049
 8002938:	6c6f6f43 	.word	0x6c6f6f43
 800293c:	65736145 	.word	0x65736145
 8002940:	00000000 	.word	0x00000000
 8002944:	6c6f6f43 	.word	0x6c6f6f43
 8002948:	65736145 	.word	0x65736145
 800294c:	62754820 	.word	0x62754820
 8002950:	00000000 	.word	0x00000000
 8002954:	34333231 	.word	0x34333231
 8002958:	00000035 	.word	0x00000035
 800295c:	74737543 	.word	0x74737543
 8002960:	48206d6f 	.word	0x48206d6f
 8002964:	43204449 	.word	0x43204449
 8002968:	69666e6f 	.word	0x69666e6f
 800296c:	73754367 	.word	0x73754367
 8002970:	206d6f74 	.word	0x206d6f74
 8002974:	20444948 	.word	0x20444948
 8002978:	65746e49 	.word	0x65746e49
 800297c:	63616672 	.word	0x63616672
 8002980:	00000065 	.word	0x00000065

08002984 <cfg_desc>:
 8002984:	00000209 80040101 002a08c8 00000008     ..........*.....

08002994 <dev_desc>:
 8002994:	02000112 40000000 57500483 02010200     .......@..PW....
 80029a4:	00000103                                ....

080029a8 <hid_function>:
 80029a8:	01112109 19220100 00000000              .!....".....

080029b4 <hid_interface>:
 80029b4:	00000409 00000302 0029cc05 0029a808     ..........)...).
 80029c4:	00000908 00000000                       ........

080029cc <hid_interface_endpoints>:
 80029cc:	03810507 00010040 00000000 07000000     ....@...........
 80029dc:	40030105 00000100 00000000 00000000     ...@............

080029ec <hid_report_descriptor>:
 80029ec:	09ff0006 0901a101 26001501 087500ff     ...........&..u.
 80029fc:	02814095 02910109 000000c0              .@..........

08002a08 <interfaces>:
 8002a08:	00000000 00000001 00000000 080029b4     .............)..

08002a18 <usb_strings>:
 8002a18:	08002938 08002944 08002954 0800295c     8)..D)..T)..\)..
 8002a28:	20627548 53206c42 74726174 0000000a     Hub Bl Start....
 8002a38:	74736554 0a692520 00000000 20627548     Test %i.....Hub 
 8002a48:	746f6f42 64616f6c 52207265 79646165     Bootloader Ready
 8002a58:	00000000 67756c50 20646567 0a74754f     ....Plugged Out.
 8002a68:	00000000 67756c50 20646567 000a6e49     ....Plugged In..
 8002a78:	65736552 65532074 6e657571 000a6563     Reset Sequence..
 8002a88:	6f727245 44412072 53492043 65442052     Error ADC ISR De
 8002a98:	74756166 73614320 00000a65 080005ce     faut Case.......
 8002aa8:	080005e8 08000614 0800064c 0800066c     ........L...l...
 8002ab8:	6f4c0a0a 6e492067 2d0a7469 2d2d2d2d     ..Log Init.-----
 8002ac8:	2d2d2d2d 2d2d2d2d 0a2d2d2d 00000000     -----------.....
 8002ad8:	206d654d 20676f4c 52504545 41204d4f     Mem Log EEPROM A
 8002ae8:	65726464 6f207373 6f207475 6f622066     ddress out of bo
 8002af8:	73646e75 0000000a 08000b5a 08000b68     unds....Z...h...
 8002b08:	08000b68 08000b68 08000b68 08000b68     h...h...h...h...
 8002b18:	08000b68 08000b68 08000b68 08000b68     h...h...h...h...
 8002b28:	08000b68 08000b68 08000b68 08000b68     h...h...h...h...
 8002b38:	08000b68 08000b68 08000b68 08000b68     h...h...h...h...
 8002b48:	08000b68 08000b68 08000b68 08000b68     h...h...h...h...
 8002b58:	08000b68 08000b68 08000b68 08000b68     h...h...h...h...
 8002b68:	08000b68 08000b68 08000b68 08000b68     h...h...h...h...
 8002b78:	08000b68 08000b68 08000b68 08000b68     h...h...h...h...
 8002b88:	08000b68 08000b68 08000b68 08000b68     h...h...h...h...
 8002b98:	08000b68 08000b68 08000b68 08000b68     h...h...h...h...
 8002ba8:	08000b68 08000b68 08000b68 08000b68     h...h...h...h...
 8002bb8:	08000b68 08000b68 08000b68 08000b68     h...h...h...h...
 8002bc8:	08000b68 08000a8e 08000b68 08000b68     h.......h...h...
 8002bd8:	08000b68 08000b68 08000b68 08000b68     h...h...h...h...
 8002be8:	08000b68 08000b68 08000b68 08000a8e     h...h...h.......
 8002bf8:	08000af0 08000a8e 08000b68 08000b68     ........h...h...
 8002c08:	08000b68 08000b68 08000a8e 08000b68     h...h.......h...
 8002c18:	08000b68 08000b68 08000b68 08000b68     h...h...h...h...
 8002c28:	08000a8e 08000b3a 08000b68 08000b68     ....:...h...h...
 8002c38:	08000b04 08000b68 08000a8e 08000b68     ....h.......h...
 8002c48:	08000b68 08000a8e 204d4652 20495053     h.......RFM SPI 
 8002c58:	74697257 00000065 656d6954 2074756f     Write...Timeout 
 8002c68:	25207325 0a583830 00000000 20435452     %s %08X.....RTC 
 8002c78:	0a525349 00000000                       ISR.....

08002c80 <st_usbfs_v2_usb_driver>:
 8002c80:	0800246d 08001f69 08001fb1 080020c5     m$..i........ ..
 8002c90:	08002109 080021e9 080021ad 08002235     .!...!...!..5"..
 8002ca0:	080022a9 08002351 0800244d 00000000     ."..Q#..M$......
 8002cb0:	00000000                                ....
