
hub/bin/hub.elf:     file format elf32-littlearm


Disassembly of section .text:

08004000 <vector_table>:
 8004000:	00 20 00 20 5d 52 00 08 11 41 00 08 21 41 00 08     . . ]R...A..!A..
	...
 800402c:	59 52 00 08 00 00 00 00 00 00 00 00 59 52 00 08     YR..........YR..
 800403c:	59 52 00 08 57 52 00 08 57 52 00 08 c1 4c 00 08     YR..WR..WR...L..
 800404c:	57 52 00 08 57 52 00 08 57 52 00 08 57 52 00 08     WR..WR..WR..WR..
 800405c:	c5 48 00 08 57 52 00 08 57 52 00 08 57 52 00 08     .H..WR..WR..WR..
 800406c:	57 52 00 08 69 41 00 08 57 52 00 08 57 52 00 08     WR..iA..WR..WR..
 800407c:	57 52 00 08 57 52 00 08 57 52 00 08 57 52 00 08     WR..WR..WR..WR..
 800408c:	57 52 00 08 57 52 00 08 57 52 00 08 57 52 00 08     WR..WR..WR..WR..
 800409c:	57 52 00 08 57 52 00 08 57 52 00 08 57 52 00 08     WR..WR..WR..WR..
 80040ac:	57 52 00 08 31 41 00 08 57 52 00 08 57 52 00 08     WR..1A..WR..WR..
 80040bc:	57 52 00 08                                         WR..

080040c0 <main>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

int main(void)
{
 80040c0:	b510      	push	{r4, lr}
	log_init();
 80040c2:	f000 f9b9 	bl	8004438 <log_init>
	timers_lptim_init();
 80040c6:	f000 fcd9 	bl	8004a7c <timers_lptim_init>
	timers_tim6_init();
 80040ca:	f000 fd1d 	bl	8004b08 <timers_tim6_init>
  	// gpio_init();
	// mem_init();
	// aes_init();
	// batt_init();

	for(int i = 0; i < 100000; i++){__asm__("nop");};
 80040ce:	2300      	movs	r3, #0
 80040d0:	e001      	b.n	80040d6 <main+0x16>
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	3301      	adds	r3, #1
 80040d6:	4a0b      	ldr	r2, [pc, #44]	; (8004104 <main+0x44>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	ddfa      	ble.n	80040d2 <main+0x12>

	log_printf(MAIN, "Hub Start\n");
 80040dc:	490a      	ldr	r1, [pc, #40]	; (8004108 <main+0x48>)
 80040de:	2000      	movs	r0, #0
 80040e0:	f000 f9b8 	bl	8004454 <log_printf>
	flash_led(100, 5);
 80040e4:	2105      	movs	r1, #5
 80040e6:	2064      	movs	r0, #100	; 0x64
 80040e8:	f000 fc98 	bl	8004a1c <flash_led>

	test_mem_write_read();
 80040ec:	f000 fc30 	bl	8004950 <test_mem_write_read>
	(void)test_hub2;


	for (;;)
	{
		log_printf(MAIN, "Hub Loop\n\n");
 80040f0:	4906      	ldr	r1, [pc, #24]	; (800410c <main+0x4c>)
 80040f2:	2000      	movs	r0, #0
 80040f4:	f000 f9ae 	bl	8004454 <log_printf>
		timers_delay_milliseconds(1000);
 80040f8:	20fa      	movs	r0, #250	; 0xfa
 80040fa:	0080      	lsls	r0, r0, #2
 80040fc:	f000 fd1a 	bl	8004b34 <timers_delay_milliseconds>
	for (;;)
 8004100:	e7f6      	b.n	80040f0 <main+0x30>
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	0001869f 	.word	0x0001869f
 8004108:	08005568 	.word	0x08005568
 800410c:	08005574 	.word	0x08005574

08004110 <nmi_handler>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void nmi_handler(void)
{
 8004110:	b510      	push	{r4, lr}
  log_printf(MAIN, "nmi\n");
 8004112:	4902      	ldr	r1, [pc, #8]	; (800411c <nmi_handler+0xc>)
 8004114:	2000      	movs	r0, #0
 8004116:	f000 f99d 	bl	8004454 <log_printf>
	while(1)
 800411a:	e7fe      	b.n	800411a <nmi_handler+0xa>
 800411c:	08005580 	.word	0x08005580

08004120 <hard_fault_handler>:
		
	}
}

void hard_fault_handler(void)
{
 8004120:	b510      	push	{r4, lr}
  log_printf(MAIN, "hard fault\n");
 8004122:	4902      	ldr	r1, [pc, #8]	; (800412c <hard_fault_handler+0xc>)
 8004124:	2000      	movs	r0, #0
 8004126:	f000 f995 	bl	8004454 <log_printf>
	while(1)
 800412a:	e7fe      	b.n	800412a <hard_fault_handler+0xa>
 800412c:	08005588 	.word	0x08005588

08004130 <usart2_isr>:
}


// Interrupt routines
void usart2_isr(void)
{
 8004130:	b510      	push	{r4, lr}
	usart_send(SPF_USART, usart_recv(SIM_USART));
 8004132:	4c09      	ldr	r4, [pc, #36]	; (8004158 <usart2_isr+0x28>)
 8004134:	0020      	movs	r0, r4
 8004136:	f001 f87f 	bl	8005238 <usart_recv>
 800413a:	0001      	movs	r1, r0
 800413c:	4807      	ldr	r0, [pc, #28]	; (800415c <usart2_isr+0x2c>)
 800413e:	f001 f877 	bl	8005230 <usart_send>

	sim_rx_buf[sim_rx_head++] = usart_recv(SIM_USART);
 8004142:	0020      	movs	r0, r4
 8004144:	f001 f878 	bl	8005238 <usart_recv>
 8004148:	4a05      	ldr	r2, [pc, #20]	; (8004160 <usart2_isr+0x30>)
 800414a:	7813      	ldrb	r3, [r2, #0]
 800414c:	1c59      	adds	r1, r3, #1
 800414e:	7011      	strb	r1, [r2, #0]
 8004150:	4a04      	ldr	r2, [pc, #16]	; (8004164 <usart2_isr+0x34>)
 8004152:	54d0      	strb	r0, [r2, r3]
}
 8004154:	bd10      	pop	{r4, pc}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	40004400 	.word	0x40004400
 800415c:	40013800 	.word	0x40013800
 8004160:	20000204 	.word	0x20000204
 8004164:	20000104 	.word	0x20000104

08004168 <adc_comp_isr>:

// ISRs
#ifdef _HUB
// For use with ADC1
void adc_comp_isr(void)
{
 8004168:	b570      	push	{r4, r5, r6, lr}
    // Takes about 150us to run

    // log_printf(MAIN, "ADC ISR %08X\n", ADC_ISR(ADC1));

    // Calculate batt_voltages
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 800416a:	2400      	movs	r4, #0
 800416c:	e014      	b.n	8004198 <adc_comp_isr+0x30>
        batt_voltages[i] = ( (uint32_t)300 * ST_VREFINT_CAL * adc_vals[i + 1] ) / ( adc_vals[0] * 4095 ); }
 800416e:	4b51      	ldr	r3, [pc, #324]	; (80042b4 <adc_comp_isr+0x14c>)
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	1c65      	adds	r5, r4, #1
 8004174:	4a50      	ldr	r2, [pc, #320]	; (80042b8 <adc_comp_isr+0x150>)
 8004176:	0069      	lsls	r1, r5, #1
 8004178:	5a88      	ldrh	r0, [r1, r2]
 800417a:	4343      	muls	r3, r0
 800417c:	0098      	lsls	r0, r3, #2
 800417e:	18c3      	adds	r3, r0, r3
 8004180:	0118      	lsls	r0, r3, #4
 8004182:	1ac0      	subs	r0, r0, r3
 8004184:	0080      	lsls	r0, r0, #2
 8004186:	8813      	ldrh	r3, [r2, #0]
 8004188:	0319      	lsls	r1, r3, #12
 800418a:	1ac9      	subs	r1, r1, r3
 800418c:	f001 f940 	bl	8005410 <__udivsi3>
 8004190:	0064      	lsls	r4, r4, #1
 8004192:	4b4a      	ldr	r3, [pc, #296]	; (80042bc <adc_comp_isr+0x154>)
 8004194:	5318      	strh	r0, [r3, r4]
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8004196:	b2ec      	uxtb	r4, r5
 8004198:	2c01      	cmp	r4, #1
 800419a:	d9e8      	bls.n	800416e <adc_comp_isr+0x6>

    // For Hub : Measured voltage is half of actual
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 800419c:	2300      	movs	r3, #0
 800419e:	e006      	b.n	80041ae <adc_comp_isr+0x46>
        batt_voltages[i] = batt_voltages[i] * 2; }
 80041a0:	4946      	ldr	r1, [pc, #280]	; (80042bc <adc_comp_isr+0x154>)
 80041a2:	0058      	lsls	r0, r3, #1
 80041a4:	5a42      	ldrh	r2, [r0, r1]
 80041a6:	0052      	lsls	r2, r2, #1
 80041a8:	5242      	strh	r2, [r0, r1]
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 80041aa:	3301      	adds	r3, #1
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d9f6      	bls.n	80041a0 <adc_comp_isr+0x38>

    static uint16_t timer = 0;
    static uint8_t state = 0;
    switch(state)
 80041b2:	4b43      	ldr	r3, [pc, #268]	; (80042c0 <adc_comp_isr+0x158>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d871      	bhi.n	800429e <adc_comp_isr+0x136>
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4a41      	ldr	r2, [pc, #260]	; (80042c4 <adc_comp_isr+0x15c>)
 80041be:	58d3      	ldr	r3, [r2, r3]
 80041c0:	469f      	mov	pc, r3
    {
        case 0:
            plugged_in = true;
            timer = timers_millis();
 80041c2:	f000 fccd 	bl	8004b60 <timers_millis>
 80041c6:	4b40      	ldr	r3, [pc, #256]	; (80042c8 <adc_comp_isr+0x160>)
 80041c8:	8018      	strh	r0, [r3, #0]
            if(batt_voltages[PWR_VOLTAGE] < batt_voltages[BATT_VOLTAGE])
 80041ca:	4b3c      	ldr	r3, [pc, #240]	; (80042bc <adc_comp_isr+0x154>)
 80041cc:	881a      	ldrh	r2, [r3, #0]
 80041ce:	885b      	ldrh	r3, [r3, #2]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d268      	bcs.n	80042a6 <adc_comp_isr+0x13e>
                state = 1;
 80041d4:	4b3a      	ldr	r3, [pc, #232]	; (80042c0 <adc_comp_isr+0x158>)
 80041d6:	2201      	movs	r2, #1
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	e064      	b.n	80042a6 <adc_comp_isr+0x13e>
            break;

        case 1:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE])
 80041dc:	4b37      	ldr	r3, [pc, #220]	; (80042bc <adc_comp_isr+0x154>)
 80041de:	881a      	ldrh	r2, [r3, #0]
 80041e0:	885b      	ldrh	r3, [r3, #2]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d903      	bls.n	80041ee <adc_comp_isr+0x86>
                state = 0;
 80041e6:	4b36      	ldr	r3, [pc, #216]	; (80042c0 <adc_comp_isr+0x158>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	e05b      	b.n	80042a6 <adc_comp_isr+0x13e>
            else if(timers_millis() - timer > 1000)
 80041ee:	f000 fcb7 	bl	8004b60 <timers_millis>
 80041f2:	4b35      	ldr	r3, [pc, #212]	; (80042c8 <adc_comp_isr+0x160>)
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	1ac0      	subs	r0, r0, r3
 80041f8:	23fa      	movs	r3, #250	; 0xfa
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4298      	cmp	r0, r3
 80041fe:	dd52      	ble.n	80042a6 <adc_comp_isr+0x13e>
                state = 2;
 8004200:	4b2f      	ldr	r3, [pc, #188]	; (80042c0 <adc_comp_isr+0x158>)
 8004202:	2202      	movs	r2, #2
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	e04e      	b.n	80042a6 <adc_comp_isr+0x13e>
            break;
        
        case 2:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE]){
 8004208:	4b2c      	ldr	r3, [pc, #176]	; (80042bc <adc_comp_isr+0x154>)
 800420a:	881a      	ldrh	r2, [r3, #0]
 800420c:	885b      	ldrh	r3, [r3, #2]
 800420e:	429a      	cmp	r2, r3
 8004210:	d907      	bls.n	8004222 <adc_comp_isr+0xba>
                timer = timers_millis(); 
 8004212:	f000 fca5 	bl	8004b60 <timers_millis>
 8004216:	4b2c      	ldr	r3, [pc, #176]	; (80042c8 <adc_comp_isr+0x160>)
 8004218:	8018      	strh	r0, [r3, #0]
                state = 4;}
 800421a:	4b29      	ldr	r3, [pc, #164]	; (80042c0 <adc_comp_isr+0x158>)
 800421c:	2204      	movs	r2, #4
 800421e:	701a      	strb	r2, [r3, #0]
 8004220:	e041      	b.n	80042a6 <adc_comp_isr+0x13e>
            else if(timers_millis() - timer > 10000){
 8004222:	f000 fc9d 	bl	8004b60 <timers_millis>
 8004226:	4b28      	ldr	r3, [pc, #160]	; (80042c8 <adc_comp_isr+0x160>)
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	1ac0      	subs	r0, r0, r3
 800422c:	4b27      	ldr	r3, [pc, #156]	; (80042cc <adc_comp_isr+0x164>)
 800422e:	4298      	cmp	r0, r3
 8004230:	dd39      	ble.n	80042a6 <adc_comp_isr+0x13e>
                state = 3;
 8004232:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <adc_comp_isr+0x158>)
 8004234:	2203      	movs	r2, #3
 8004236:	701a      	strb	r2, [r3, #0]
                plugged_in = false;
                log_printf(MAIN, "Plugged Out\n");}
 8004238:	4925      	ldr	r1, [pc, #148]	; (80042d0 <adc_comp_isr+0x168>)
 800423a:	2000      	movs	r0, #0
 800423c:	f000 f90a 	bl	8004454 <log_printf>
 8004240:	e031      	b.n	80042a6 <adc_comp_isr+0x13e>
            break;
        
        case 3:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE]){
 8004242:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <adc_comp_isr+0x154>)
 8004244:	881a      	ldrh	r2, [r3, #0]
 8004246:	885b      	ldrh	r3, [r3, #2]
 8004248:	429a      	cmp	r2, r3
 800424a:	d92c      	bls.n	80042a6 <adc_comp_isr+0x13e>
                timer = timers_millis();
 800424c:	f000 fc88 	bl	8004b60 <timers_millis>
 8004250:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <adc_comp_isr+0x160>)
 8004252:	8018      	strh	r0, [r3, #0]
                state = 0;
 8004254:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <adc_comp_isr+0x158>)
 8004256:	2200      	movs	r2, #0
 8004258:	701a      	strb	r2, [r3, #0]
                log_printf(MAIN, "Plugged In\n");}
 800425a:	491e      	ldr	r1, [pc, #120]	; (80042d4 <adc_comp_isr+0x16c>)
 800425c:	2000      	movs	r0, #0
 800425e:	f000 f8f9 	bl	8004454 <log_printf>
 8004262:	e020      	b.n	80042a6 <adc_comp_isr+0x13e>
            break;

        case 4:
            if(batt_voltages[PWR_VOLTAGE] < batt_voltages[BATT_VOLTAGE]){
 8004264:	4b15      	ldr	r3, [pc, #84]	; (80042bc <adc_comp_isr+0x154>)
 8004266:	881a      	ldrh	r2, [r3, #0]
 8004268:	885b      	ldrh	r3, [r3, #2]
 800426a:	429a      	cmp	r2, r3
 800426c:	d203      	bcs.n	8004276 <adc_comp_isr+0x10e>
                state = 2; }
 800426e:	4b14      	ldr	r3, [pc, #80]	; (80042c0 <adc_comp_isr+0x158>)
 8004270:	2202      	movs	r2, #2
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	e017      	b.n	80042a6 <adc_comp_isr+0x13e>
            else if(timers_millis() - timer > 1000){
 8004276:	f000 fc73 	bl	8004b60 <timers_millis>
 800427a:	4b13      	ldr	r3, [pc, #76]	; (80042c8 <adc_comp_isr+0x160>)
 800427c:	881b      	ldrh	r3, [r3, #0]
 800427e:	1ac0      	subs	r0, r0, r3
 8004280:	23fa      	movs	r3, #250	; 0xfa
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4298      	cmp	r0, r3
 8004286:	dd0e      	ble.n	80042a6 <adc_comp_isr+0x13e>
                state = 0;
 8004288:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <adc_comp_isr+0x158>)
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]
                batt_rst_seq = true; 
 800428e:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <adc_comp_isr+0x170>)
 8004290:	3201      	adds	r2, #1
 8004292:	701a      	strb	r2, [r3, #0]
                log_printf(MAIN, "Reset Sequence\n"); }
 8004294:	4911      	ldr	r1, [pc, #68]	; (80042dc <adc_comp_isr+0x174>)
 8004296:	2000      	movs	r0, #0
 8004298:	f000 f8dc 	bl	8004454 <log_printf>
 800429c:	e003      	b.n	80042a6 <adc_comp_isr+0x13e>
            break;

        default:
            log_printf(MAIN, "Error ADC ISR Defaut Case\n");
 800429e:	4910      	ldr	r1, [pc, #64]	; (80042e0 <adc_comp_isr+0x178>)
 80042a0:	2000      	movs	r0, #0
 80042a2:	f000 f8d7 	bl	8004454 <log_printf>
            break;
    }

    // log_printf(MAIN, "ADC ISR %u %u %u V\n",state, batt_voltages[0], batt_voltages[1]);

    ADC_ISR(ADC1) = 0xFFFFFFFF;
 80042a6:	480f      	ldr	r0, [pc, #60]	; (80042e4 <adc_comp_isr+0x17c>)
 80042a8:	2301      	movs	r3, #1
 80042aa:	425b      	negs	r3, r3
 80042ac:	6003      	str	r3, [r0, #0]
    adc_start_conversion_regular(ADC1);
 80042ae:	f000 fd2d 	bl	8004d0c <adc_start_conversion_regular>
}
 80042b2:	bd70      	pop	{r4, r5, r6, pc}
 80042b4:	1ff80078 	.word	0x1ff80078
 80042b8:	20000208 	.word	0x20000208
 80042bc:	20000210 	.word	0x20000210
 80042c0:	20000214 	.word	0x20000214
 80042c4:	080055dc 	.word	0x080055dc
 80042c8:	20000216 	.word	0x20000216
 80042cc:	00002710 	.word	0x00002710
 80042d0:	08005594 	.word	0x08005594
 80042d4:	080055a4 	.word	0x080055a4
 80042d8:	2000020e 	.word	0x2000020e
 80042dc:	080055b0 	.word	0x080055b0
 80042e0:	080055c0 	.word	0x080055c0
 80042e4:	40012400 	.word	0x40012400

080042e8 <clock_setup>:
// Static Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

//  Static Function Definitions
static void clock_setup(void) 
{
 80042e8:	b510      	push	{r4, lr}
	// Enable MSI Osc 2.097Mhz
	rcc_osc_on(RCC_MSI);
 80042ea:	2004      	movs	r0, #4
 80042ec:	f000 fe26 	bl	8004f3c <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_MSI);
 80042f0:	2004      	movs	r0, #4
 80042f2:	f000 fe79 	bl	8004fe8 <rcc_wait_for_osc_ready>

	// Set MSI to 2.097Mhz
	rcc_set_msi_range(5);
 80042f6:	2005      	movs	r0, #5
 80042f8:	f000 fea0 	bl	800503c <rcc_set_msi_range>

	// Set prescalers for AHB, APB1, APB2
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);				// AHB -> 2.097Mhz
 80042fc:	2000      	movs	r0, #0
 80042fe:	f000 fe93 	bl	8005028 <rcc_set_hpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);			// APB1 -> 2.097Mhz
 8004302:	2000      	movs	r0, #0
 8004304:	f000 fe78 	bl	8004ff8 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);			// APB2 -> 2.097Mhz
 8004308:	2000      	movs	r0, #0
 800430a:	f000 fe81 	bl	8005010 <rcc_set_ppre2>

	// Set flash, 2.097Mhz -> 0 waitstates
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 800430e:	2000      	movs	r0, #0
 8004310:	f000 fd08 	bl	8004d24 <flash_set_ws>

	// Set Peripheral Clock Frequencies used
	rcc_ahb_frequency = 2097000;
 8004314:	4b03      	ldr	r3, [pc, #12]	; (8004324 <clock_setup+0x3c>)
 8004316:	4a04      	ldr	r2, [pc, #16]	; (8004328 <clock_setup+0x40>)
 8004318:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 2097000;
 800431a:	4a04      	ldr	r2, [pc, #16]	; (800432c <clock_setup+0x44>)
 800431c:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = 2097000;
 800431e:	4a04      	ldr	r2, [pc, #16]	; (8004330 <clock_setup+0x48>)
 8004320:	6013      	str	r3, [r2, #0]
}
 8004322:	bd10      	pop	{r4, pc}
 8004324:	001fff68 	.word	0x001fff68
 8004328:	20000094 	.word	0x20000094
 800432c:	20000098 	.word	0x20000098
 8004330:	2000009c 	.word	0x2000009c

08004334 <usart_setup>:

static void usart_setup(void) 
{
 8004334:	b570      	push	{r4, r5, r6, lr}
    rcc_periph_clock_enable(RCC_GPIOA);
 8004336:	20b0      	movs	r0, #176	; 0xb0
 8004338:	00c0      	lsls	r0, r0, #3
 800433a:	f000 fec1 	bl	80050c0 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOB);
 800433e:	4826      	ldr	r0, [pc, #152]	; (80043d8 <usart_setup+0xa4>)
 8004340:	f000 febe 	bl	80050c0 <rcc_periph_clock_enable>

	gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_TX);
 8004344:	2580      	movs	r5, #128	; 0x80
 8004346:	00ad      	lsls	r5, r5, #2
 8004348:	24a0      	movs	r4, #160	; 0xa0
 800434a:	05e4      	lsls	r4, r4, #23
 800434c:	002b      	movs	r3, r5
 800434e:	2200      	movs	r2, #0
 8004350:	2102      	movs	r1, #2
 8004352:	0020      	movs	r0, r4
 8004354:	f000 fd41 	bl	8004dda <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_RX);
 8004358:	2680      	movs	r6, #128	; 0x80
 800435a:	00f6      	lsls	r6, r6, #3
 800435c:	0033      	movs	r3, r6
 800435e:	2200      	movs	r2, #0
 8004360:	2102      	movs	r1, #2
 8004362:	0020      	movs	r0, r4
 8004364:	f000 fd39 	bl	8004dda <gpio_mode_setup>
    
    gpio_set_output_options(SPF_USART_TX_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, SPF_USART_TX);
 8004368:	002b      	movs	r3, r5
 800436a:	2200      	movs	r2, #0
 800436c:	2100      	movs	r1, #0
 800436e:	0020      	movs	r0, r4
 8004370:	f000 fd53 	bl	8004e1a <gpio_set_output_options>

    gpio_set_af(SPF_USART_TX_PORT, SPF_USART_AF, SPF_USART_TX);
 8004374:	002a      	movs	r2, r5
 8004376:	2104      	movs	r1, #4
 8004378:	0020      	movs	r0, r4
 800437a:	f000 fd6c 	bl	8004e56 <gpio_set_af>
    gpio_set_af(SPF_USART_RX_PORT, SPF_USART_AF, SPF_USART_RX);
 800437e:	0032      	movs	r2, r6
 8004380:	2104      	movs	r1, #4
 8004382:	0020      	movs	r0, r4
 8004384:	f000 fd67 	bl	8004e56 <gpio_set_af>
    
	rcc_periph_clock_enable(SPF_USART_RCC);
 8004388:	4814      	ldr	r0, [pc, #80]	; (80043dc <usart_setup+0xa8>)
 800438a:	f000 fe99 	bl	80050c0 <rcc_periph_clock_enable>
    rcc_periph_reset_pulse(SPF_USART_RCC_RST);
 800438e:	4814      	ldr	r0, [pc, #80]	; (80043e0 <usart_setup+0xac>)
 8004390:	f000 fea4 	bl	80050dc <rcc_periph_reset_pulse>
	usart_disable(SPF_USART);
 8004394:	4c13      	ldr	r4, [pc, #76]	; (80043e4 <usart_setup+0xb0>)
 8004396:	0020      	movs	r0, r4
 8004398:	f000 ff3b 	bl	8005212 <usart_disable>
	usart_set_baudrate(SPF_USART, SPF_USART_BAUD);
 800439c:	21e1      	movs	r1, #225	; 0xe1
 800439e:	0249      	lsls	r1, r1, #9
 80043a0:	0020      	movs	r0, r4
 80043a2:	f000 fed9 	bl	8005158 <usart_set_baudrate>
	usart_set_databits(SPF_USART, 8);
 80043a6:	2108      	movs	r1, #8
 80043a8:	0020      	movs	r0, r4
 80043aa:	f000 ff01 	bl	80051b0 <usart_set_databits>
	usart_set_stopbits(SPF_USART,USART_STOPBITS_1);
 80043ae:	2100      	movs	r1, #0
 80043b0:	0020      	movs	r0, r4
 80043b2:	f000 ff0b 	bl	80051cc <usart_set_stopbits>
	usart_set_mode(SPF_USART, USART_MODE_TX_RX);
 80043b6:	210c      	movs	r1, #12
 80043b8:	0020      	movs	r0, r4
 80043ba:	f000 ff17 	bl	80051ec <usart_set_mode>
	usart_set_parity(SPF_USART, USART_PARITY_NONE);
 80043be:	2100      	movs	r1, #0
 80043c0:	0020      	movs	r0, r4
 80043c2:	f000 ff0b 	bl	80051dc <usart_set_parity>
	usart_set_flow_control(SPF_USART, USART_FLOWCONTROL_NONE);
 80043c6:	2100      	movs	r1, #0
 80043c8:	0020      	movs	r0, r4
 80043ca:	f000 ff15 	bl	80051f8 <usart_set_flow_control>
	usart_enable(SPF_USART);
 80043ce:	0020      	movs	r0, r4
 80043d0:	f000 ff1a 	bl	8005208 <usart_enable>
}
 80043d4:	bd70      	pop	{r4, r5, r6, pc}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	00000581 	.word	0x00000581
 80043dc:	0000068e 	.word	0x0000068e
 80043e0:	0000048e 	.word	0x0000048e
 80043e4:	40013800 	.word	0x40013800

080043e8 <_putchar_mem>:
	usart_send_blocking(SPF_USART, character);	
	#endif
}

static void _putchar_mem(char character)
{
 80043e8:	b510      	push	{r4, lr}
 80043ea:	0001      	movs	r1, r0
	mem_eeprom_write_byte(curr_address++, character);
 80043ec:	4c07      	ldr	r4, [pc, #28]	; (800440c <_putchar_mem+0x24>)
 80043ee:	6820      	ldr	r0, [r4, #0]
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	6023      	str	r3, [r4, #0]
 80043f4:	f000 f892 	bl	800451c <mem_eeprom_write_byte>
	
	if(curr_address == LOG_START + LOG_SIZE)
 80043f8:	6822      	ldr	r2, [r4, #0]
 80043fa:	4b05      	ldr	r3, [pc, #20]	; (8004410 <_putchar_mem+0x28>)
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d000      	beq.n	8004402 <_putchar_mem+0x1a>
	{
		curr_address = LOG_START;
	}
}
 8004400:	bd10      	pop	{r4, pc}
		curr_address = LOG_START;
 8004402:	4b02      	ldr	r3, [pc, #8]	; (800440c <_putchar_mem+0x24>)
 8004404:	4a03      	ldr	r2, [pc, #12]	; (8004414 <_putchar_mem+0x2c>)
 8004406:	601a      	str	r2, [r3, #0]
}
 8004408:	e7fa      	b.n	8004400 <_putchar_mem+0x18>
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	20000000 	.word	0x20000000
 8004410:	08080800 	.word	0x08080800
 8004414:	08080400 	.word	0x08080400

08004418 <_putchar_spf>:
{
 8004418:	b510      	push	{r4, lr}
	usart_send_blocking(SPF_USART, character);	
 800441a:	0001      	movs	r1, r0
 800441c:	4801      	ldr	r0, [pc, #4]	; (8004424 <_putchar_spf+0xc>)
 800441e:	f000 fefd 	bl	800521c <usart_send_blocking>
}
 8004422:	bd10      	pop	{r4, pc}
 8004424:	40013800 	.word	0x40013800

08004428 <_putchar_main>:
{
 8004428:	b510      	push	{r4, lr}
 800442a:	0004      	movs	r4, r0
	_putchar_mem(character);
 800442c:	f7ff ffdc 	bl	80043e8 <_putchar_mem>
	_putchar_spf(character);			
 8004430:	0020      	movs	r0, r4
 8004432:	f7ff fff1 	bl	8004418 <_putchar_spf>
}
 8004436:	bd10      	pop	{r4, pc}

08004438 <log_init>:
{
 8004438:	b510      	push	{r4, lr}
	mem_init();
 800443a:	f000 f83f 	bl	80044bc <mem_init>
    curr_address = 0;
 800443e:	4b04      	ldr	r3, [pc, #16]	; (8004450 <log_init+0x18>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
    clock_setup();
 8004444:	f7ff ff50 	bl	80042e8 <clock_setup>
    usart_setup();
 8004448:	f7ff ff74 	bl	8004334 <usart_setup>
}
 800444c:	bd10      	pop	{r4, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	20000000 	.word	0x20000000

08004454 <log_printf>:
{
 8004454:	b40e      	push	{r1, r2, r3}
 8004456:	b500      	push	{lr}
 8004458:	b082      	sub	sp, #8
 800445a:	ab03      	add	r3, sp, #12
 800445c:	cb02      	ldmia	r3!, {r1}
	va_start(va, format);
 800445e:	9301      	str	r3, [sp, #4]
    switch (type)
 8004460:	2802      	cmp	r0, #2
 8004462:	d01e      	beq.n	80044a2 <log_printf+0x4e>
 8004464:	d808      	bhi.n	8004478 <log_printf+0x24>
 8004466:	2800      	cmp	r0, #0
 8004468:	d00d      	beq.n	8004486 <log_printf+0x32>
 800446a:	2801      	cmp	r0, #1
 800446c:	d10f      	bne.n	800448e <log_printf+0x3a>
        fnprintf(_putchar_spf, format, va);
 800446e:	9a01      	ldr	r2, [sp, #4]
 8004470:	480e      	ldr	r0, [pc, #56]	; (80044ac <log_printf+0x58>)
 8004472:	f000 f925 	bl	80046c0 <fnprintf>
		break;
 8004476:	e00a      	b.n	800448e <log_printf+0x3a>
    switch (type)
 8004478:	2804      	cmp	r0, #4
 800447a:	d108      	bne.n	800448e <log_printf+0x3a>
        fnprintf(_putchar_main, format, va);
 800447c:	9a01      	ldr	r2, [sp, #4]
 800447e:	480c      	ldr	r0, [pc, #48]	; (80044b0 <log_printf+0x5c>)
 8004480:	f000 f91e 	bl	80046c0 <fnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {}
 8004484:	e003      	b.n	800448e <log_printf+0x3a>
        fnprintf(_putchar_main, format, va);
 8004486:	9a01      	ldr	r2, [sp, #4]
 8004488:	4809      	ldr	r0, [pc, #36]	; (80044b0 <log_printf+0x5c>)
 800448a:	f000 f919 	bl	80046c0 <fnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {}
 800448e:	2140      	movs	r1, #64	; 0x40
 8004490:	4808      	ldr	r0, [pc, #32]	; (80044b4 <log_printf+0x60>)
 8004492:	f000 feda 	bl	800524a <usart_get_flag>
 8004496:	2800      	cmp	r0, #0
 8004498:	d0f9      	beq.n	800448e <log_printf+0x3a>
}
 800449a:	b002      	add	sp, #8
 800449c:	bc08      	pop	{r3}
 800449e:	b003      	add	sp, #12
 80044a0:	4718      	bx	r3
        fnprintf(_putchar_mem, format, va);
 80044a2:	9a01      	ldr	r2, [sp, #4]
 80044a4:	4804      	ldr	r0, [pc, #16]	; (80044b8 <log_printf+0x64>)
 80044a6:	f000 f90b 	bl	80046c0 <fnprintf>
		break;
 80044aa:	e7f0      	b.n	800448e <log_printf+0x3a>
 80044ac:	08004419 	.word	0x08004419
 80044b0:	08004429 	.word	0x08004429
 80044b4:	40013800 	.word	0x40013800
 80044b8:	080043e9 	.word	0x080043e9

080044bc <mem_init>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

void mem_init(void)
{
 80044bc:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_MIF);
 80044be:	20c1      	movs	r0, #193	; 0xc1
 80044c0:	00c0      	lsls	r0, r0, #3
 80044c2:	f000 fdfd 	bl	80050c0 <rcc_periph_clock_enable>
    // {
    //     // log_printf(MAIN, "%08x : %08x\n", next_reading_add, MMIO32(next_reading_add));
    //     msg_num++;
    //     next_reading_add += 4;
    // }
}
 80044c6:	bd10      	pop	{r4, pc}

080044c8 <mem_eeprom_write_word>:


bool mem_eeprom_write_word(uint32_t address, uint32_t data)
{
 80044c8:	b570      	push	{r4, r5, r6, lr}
 80044ca:	0004      	movs	r4, r0
 80044cc:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 80044ce:	4b0f      	ldr	r3, [pc, #60]	; (800450c <mem_eeprom_write_word+0x44>)
 80044d0:	18c2      	adds	r2, r0, r3
 80044d2:	2380      	movs	r3, #128	; 0x80
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d301      	bcc.n	80044de <mem_eeprom_write_word+0x16>
        return false;
 80044da:	2000      	movs	r0, #0
        FLASH_SR = FLASH_SR_EOP;

    flash_lock_pecr();

    return true;
}
 80044dc:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock_pecr();
 80044de:	f000 fc37 	bl	8004d50 <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 80044e2:	4a0b      	ldr	r2, [pc, #44]	; (8004510 <mem_eeprom_write_word+0x48>)
 80044e4:	6813      	ldr	r3, [r2, #0]
 80044e6:	490b      	ldr	r1, [pc, #44]	; (8004514 <mem_eeprom_write_word+0x4c>)
 80044e8:	400b      	ands	r3, r1
 80044ea:	6013      	str	r3, [r2, #0]
    MMIO32(address) = data;
 80044ec:	6025      	str	r5, [r4, #0]
    while (FLASH_SR & FLASH_SR_BSY);
 80044ee:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <mem_eeprom_write_word+0x50>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	07db      	lsls	r3, r3, #31
 80044f4:	d4fb      	bmi.n	80044ee <mem_eeprom_write_word+0x26>
    if (FLASH_SR & FLASH_SR_EOP)
 80044f6:	4b08      	ldr	r3, [pc, #32]	; (8004518 <mem_eeprom_write_word+0x50>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	079b      	lsls	r3, r3, #30
 80044fc:	d502      	bpl.n	8004504 <mem_eeprom_write_word+0x3c>
        FLASH_SR = FLASH_SR_EOP;
 80044fe:	4b06      	ldr	r3, [pc, #24]	; (8004518 <mem_eeprom_write_word+0x50>)
 8004500:	2202      	movs	r2, #2
 8004502:	601a      	str	r2, [r3, #0]
    flash_lock_pecr();
 8004504:	f000 fc30 	bl	8004d68 <flash_lock_pecr>
    return true;
 8004508:	2001      	movs	r0, #1
 800450a:	e7e7      	b.n	80044dc <mem_eeprom_write_word+0x14>
 800450c:	f7f80000 	.word	0xf7f80000
 8004510:	40022004 	.word	0x40022004
 8004514:	fffffeff 	.word	0xfffffeff
 8004518:	40022018 	.word	0x40022018

0800451c <mem_eeprom_write_byte>:

    return true;
}

bool mem_eeprom_write_byte(uint32_t address, uint8_t data)
{
 800451c:	b570      	push	{r4, r5, r6, lr}
 800451e:	0004      	movs	r4, r0
 8004520:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 8004522:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <mem_eeprom_write_byte+0x44>)
 8004524:	18c2      	adds	r2, r0, r3
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	429a      	cmp	r2, r3
 800452c:	d301      	bcc.n	8004532 <mem_eeprom_write_byte+0x16>
        return false;
 800452e:	2000      	movs	r0, #0
        FLASH_SR = FLASH_SR_EOP;

    flash_lock_pecr();

    return true;
}
 8004530:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock_pecr();
 8004532:	f000 fc0d 	bl	8004d50 <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 8004536:	4a0b      	ldr	r2, [pc, #44]	; (8004564 <mem_eeprom_write_byte+0x48>)
 8004538:	6813      	ldr	r3, [r2, #0]
 800453a:	490b      	ldr	r1, [pc, #44]	; (8004568 <mem_eeprom_write_byte+0x4c>)
 800453c:	400b      	ands	r3, r1
 800453e:	6013      	str	r3, [r2, #0]
    MMIO8(address) = data;
 8004540:	7025      	strb	r5, [r4, #0]
    while (FLASH_SR & FLASH_SR_BSY);
 8004542:	4b0a      	ldr	r3, [pc, #40]	; (800456c <mem_eeprom_write_byte+0x50>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	07db      	lsls	r3, r3, #31
 8004548:	d4fb      	bmi.n	8004542 <mem_eeprom_write_byte+0x26>
    if (FLASH_SR & FLASH_SR_EOP)
 800454a:	4b08      	ldr	r3, [pc, #32]	; (800456c <mem_eeprom_write_byte+0x50>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	079b      	lsls	r3, r3, #30
 8004550:	d502      	bpl.n	8004558 <mem_eeprom_write_byte+0x3c>
        FLASH_SR = FLASH_SR_EOP;
 8004552:	4b06      	ldr	r3, [pc, #24]	; (800456c <mem_eeprom_write_byte+0x50>)
 8004554:	2202      	movs	r2, #2
 8004556:	601a      	str	r2, [r3, #0]
    flash_lock_pecr();
 8004558:	f000 fc06 	bl	8004d68 <flash_lock_pecr>
    return true;
 800455c:	2001      	movs	r0, #1
 800455e:	e7e7      	b.n	8004530 <mem_eeprom_write_byte+0x14>
 8004560:	f7f80000 	.word	0xf7f80000
 8004564:	40022004 	.word	0x40022004
 8004568:	fffffeff 	.word	0xfffffeff
 800456c:	40022018 	.word	0x40022018

08004570 <mem_flash_erase_page>:


bool mem_flash_erase_page(uint32_t address)
{
 8004570:	b510      	push	{r4, lr}
 8004572:	0004      	movs	r4, r0
    bool result = false;

    // Check page aligned
    if (address & 0x7F)
 8004574:	0643      	lsls	r3, r0, #25
 8004576:	d002      	beq.n	800457e <mem_flash_erase_page+0xe>
        return false; 
 8004578:	2400      	movs	r4, #0

    flash_unlock();
    result = mem_flash_do_page_erase(address);
    flash_lock();
    return result;
}
 800457a:	0020      	movs	r0, r4
 800457c:	bd10      	pop	{r4, pc}
    flash_unlock();
 800457e:	f000 fc17 	bl	8004db0 <flash_unlock>
    result = mem_flash_do_page_erase(address);
 8004582:	0020      	movs	r0, r4
 8004584:	f000 ffe0 	bl	8005548 <__mem_flash_do_page_erase_veneer>
 8004588:	0004      	movs	r4, r0
    flash_lock();
 800458a:	f000 fc19 	bl	8004dc0 <flash_lock>
    return result;
 800458e:	e7f4      	b.n	800457a <mem_flash_erase_page+0xa>

08004590 <mem_flash_write_half_page>:

bool mem_flash_write_half_page(uint32_t address, uint32_t *data)
{
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	0004      	movs	r4, r0
 8004594:	000d      	movs	r5, r1
    bool result = false;

    if ((uint32_t)address & 0x3F)
 8004596:	0683      	lsls	r3, r0, #26
 8004598:	d002      	beq.n	80045a0 <mem_flash_write_half_page+0x10>
        return false; //not half-page aligned
 800459a:	2400      	movs	r4, #0

    flash_unlock();
    result = mem_flash_do_write_half_page(address, data);
    flash_lock();
    return result;
}
 800459c:	0020      	movs	r0, r4
 800459e:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock();
 80045a0:	f000 fc06 	bl	8004db0 <flash_unlock>
    result = mem_flash_do_write_half_page(address, data);
 80045a4:	0029      	movs	r1, r5
 80045a6:	0020      	movs	r0, r4
 80045a8:	f000 ffd6 	bl	8005558 <__mem_flash_do_write_half_page_veneer>
 80045ac:	0004      	movs	r4, r0
    flash_lock();
 80045ae:	f000 fc07 	bl	8004dc0 <flash_lock>
    return result;
 80045b2:	e7f3      	b.n	800459c <mem_flash_write_half_page+0xc>

080045b4 <_atoi>:
    return (ch >= '0') && (ch <= '9');
}

// internal ASCII string to uint32_t conversion
static uint32_t _atoi(const char **str)
{
 80045b4:	0001      	movs	r1, r0
    uint32_t i = 0U;
 80045b6:	2000      	movs	r0, #0
    while (_is_digit(**str))
 80045b8:	680a      	ldr	r2, [r1, #0]
 80045ba:	7813      	ldrb	r3, [r2, #0]
    return (ch >= '0') && (ch <= '9');
 80045bc:	3b30      	subs	r3, #48	; 0x30
 80045be:	b2db      	uxtb	r3, r3
    while (_is_digit(**str))
 80045c0:	2b09      	cmp	r3, #9
 80045c2:	d808      	bhi.n	80045d6 <_atoi+0x22>
    {
        i = i * 10U + (uint32_t)(*((*str)++) - '0');
 80045c4:	0083      	lsls	r3, r0, #2
 80045c6:	181b      	adds	r3, r3, r0
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	1c50      	adds	r0, r2, #1
 80045cc:	6008      	str	r0, [r1, #0]
 80045ce:	7810      	ldrb	r0, [r2, #0]
 80045d0:	18c0      	adds	r0, r0, r3
 80045d2:	3830      	subs	r0, #48	; 0x30
 80045d4:	e7f0      	b.n	80045b8 <_atoi+0x4>
    }
    return i;
}
 80045d6:	4770      	bx	lr

080045d8 <_ntoa_format>:

// internal itoa format
static uint32_t _ntoa_format(out_fct_type out, int32_t value, uint32_t base, uint32_t width, bool sign)
{
 80045d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045da:	46de      	mov	lr, fp
 80045dc:	4657      	mov	r7, sl
 80045de:	464e      	mov	r6, r9
 80045e0:	4645      	mov	r5, r8
 80045e2:	b5e0      	push	{r5, r6, r7, lr}
 80045e4:	b089      	sub	sp, #36	; 0x24
 80045e6:	4680      	mov	r8, r0
 80045e8:	0008      	movs	r0, r1
 80045ea:	0015      	movs	r5, r2
 80045ec:	469b      	mov	fp, r3
 80045ee:	ab12      	add	r3, sp, #72	; 0x48
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	4699      	mov	r9, r3
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    uint32_t len = 0;
    bool negative = false;

    // write if precision != 0 and value is != 0
    if (value)
 80045f4:	2900      	cmp	r1, #0
 80045f6:	d059      	beq.n	80046ac <_ntoa_format+0xd4>
    {
        if(value < 0)
 80045f8:	db03      	blt.n	8004602 <_ntoa_format+0x2a>
    bool negative = false;
 80045fa:	2300      	movs	r3, #0
 80045fc:	469a      	mov	sl, r3
 80045fe:	2400      	movs	r4, #0
 8004600:	e011      	b.n	8004626 <_ntoa_format+0x4e>
        {
            negative = true;
            value = 0 - value; 
 8004602:	4248      	negs	r0, r1
            negative = true;
 8004604:	2301      	movs	r3, #1
 8004606:	469a      	mov	sl, r3
 8004608:	e7f9      	b.n	80045fe <_ntoa_format+0x26>
        } 
        // Digits to char
        do
        {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 800460a:	3130      	adds	r1, #48	; 0x30
 800460c:	b2c9      	uxtb	r1, r1
 800460e:	1c67      	adds	r7, r4, #1
 8004610:	466b      	mov	r3, sp
 8004612:	5519      	strb	r1, [r3, r4]
            value /= base;
 8004614:	0029      	movs	r1, r5
 8004616:	0030      	movs	r0, r6
 8004618:	f000 fefa 	bl	8005410 <__udivsi3>
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800461c:	2800      	cmp	r0, #0
 800461e:	d010      	beq.n	8004642 <_ntoa_format+0x6a>
 8004620:	2f1f      	cmp	r7, #31
 8004622:	d80e      	bhi.n	8004642 <_ntoa_format+0x6a>
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 8004624:	003c      	movs	r4, r7
            const char digit = (char)(value % base);
 8004626:	0006      	movs	r6, r0
 8004628:	0029      	movs	r1, r5
 800462a:	f000 ff77 	bl	800551c <__aeabi_uidivmod>
 800462e:	b2c9      	uxtb	r1, r1
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 8004630:	2909      	cmp	r1, #9
 8004632:	d9ea      	bls.n	800460a <_ntoa_format+0x32>
 8004634:	3137      	adds	r1, #55	; 0x37
 8004636:	b2c9      	uxtb	r1, r1
 8004638:	e7e9      	b.n	800460e <_ntoa_format+0x36>

        // pad leading zeros
        while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
        {
            buf[len++] = '0';
 800463a:	2330      	movs	r3, #48	; 0x30
 800463c:	466a      	mov	r2, sp
 800463e:	55d3      	strb	r3, [r2, r7]
 8004640:	3701      	adds	r7, #1
        while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004642:	455f      	cmp	r7, fp
 8004644:	d201      	bcs.n	800464a <_ntoa_format+0x72>
 8004646:	2f1f      	cmp	r7, #31
 8004648:	d9f7      	bls.n	800463a <_ntoa_format+0x62>
        }

        // Base specifier
        if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 800464a:	2d10      	cmp	r5, #16
 800464c:	d019      	beq.n	8004682 <_ntoa_format+0xaa>
        {
            buf[len++] = 'X';
        }
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 800464e:	2d02      	cmp	r5, #2
 8004650:	d01e      	beq.n	8004690 <_ntoa_format+0xb8>
        {
            buf[len++] = 'b';
        }
        if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004652:	2d10      	cmp	r5, #16
 8004654:	d023      	beq.n	800469e <_ntoa_format+0xc6>
 8004656:	2d02      	cmp	r5, #2
 8004658:	d021      	beq.n	800469e <_ntoa_format+0xc6>
        {
            buf[len++] = '0';
        }

        // Negative sign
        if ( sign && negative && (len < PRINTF_NTOA_BUFFER_SIZE) )
 800465a:	464b      	mov	r3, r9
 800465c:	2b00      	cmp	r3, #0
 800465e:	d008      	beq.n	8004672 <_ntoa_format+0x9a>
 8004660:	4653      	mov	r3, sl
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <_ntoa_format+0x9a>
 8004666:	2f1f      	cmp	r7, #31
 8004668:	d803      	bhi.n	8004672 <_ntoa_format+0x9a>
        {
            buf[len++] = '-';
 800466a:	232d      	movs	r3, #45	; 0x2d
 800466c:	466a      	mov	r2, sp
 800466e:	55d3      	strb	r3, [r2, r7]
 8004670:	3701      	adds	r7, #1
        }

        // reverse string and write out
        uint32_t i = len;
 8004672:	003c      	movs	r4, r7
        while (i)
 8004674:	2c00      	cmp	r4, #0
 8004676:	d01a      	beq.n	80046ae <_ntoa_format+0xd6>
        {
            out(buf[--i]);
 8004678:	3c01      	subs	r4, #1
 800467a:	466b      	mov	r3, sp
 800467c:	5d18      	ldrb	r0, [r3, r4]
 800467e:	47c0      	blx	r8
 8004680:	e7f8      	b.n	8004674 <_ntoa_format+0x9c>
        if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004682:	2f1f      	cmp	r7, #31
 8004684:	d8e3      	bhi.n	800464e <_ntoa_format+0x76>
            buf[len++] = 'X';
 8004686:	2358      	movs	r3, #88	; 0x58
 8004688:	466a      	mov	r2, sp
 800468a:	55d3      	strb	r3, [r2, r7]
 800468c:	3701      	adds	r7, #1
 800468e:	e7e0      	b.n	8004652 <_ntoa_format+0x7a>
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004690:	2f1f      	cmp	r7, #31
 8004692:	d8de      	bhi.n	8004652 <_ntoa_format+0x7a>
            buf[len++] = 'b';
 8004694:	2362      	movs	r3, #98	; 0x62
 8004696:	466a      	mov	r2, sp
 8004698:	55d3      	strb	r3, [r2, r7]
 800469a:	3701      	adds	r7, #1
 800469c:	e7d9      	b.n	8004652 <_ntoa_format+0x7a>
        if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 800469e:	2f1f      	cmp	r7, #31
 80046a0:	d8db      	bhi.n	800465a <_ntoa_format+0x82>
            buf[len++] = '0';
 80046a2:	2330      	movs	r3, #48	; 0x30
 80046a4:	466a      	mov	r2, sp
 80046a6:	55d3      	strb	r3, [r2, r7]
 80046a8:	3701      	adds	r7, #1
 80046aa:	e7d6      	b.n	800465a <_ntoa_format+0x82>
    uint32_t len = 0;
 80046ac:	2700      	movs	r7, #0
        }
    }
    return len;
}
 80046ae:	0038      	movs	r0, r7
 80046b0:	b009      	add	sp, #36	; 0x24
 80046b2:	bcf0      	pop	{r4, r5, r6, r7}
 80046b4:	46bb      	mov	fp, r7
 80046b6:	46b2      	mov	sl, r6
 80046b8:	46a9      	mov	r9, r5
 80046ba:	46a0      	mov	r8, r4
 80046bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080046c0 <fnprintf>:

uint32_t fnprintf(out_fct_type out, const char *format, va_list va)
{
 80046c0:	b570      	push	{r4, r5, r6, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	0005      	movs	r5, r0
 80046c6:	9103      	str	r1, [sp, #12]
 80046c8:	9202      	str	r2, [sp, #8]
    uint32_t width;
    uint32_t idx = 0U;
 80046ca:	2400      	movs	r4, #0

    while (*format)
 80046cc:	e004      	b.n	80046d8 <fnprintf+0x18>
            format++;
        }
        else
        {
            // Just print char
            out(*format);
 80046ce:	47a8      	blx	r5
            idx++;
 80046d0:	3401      	adds	r4, #1
            format++;
 80046d2:	9b03      	ldr	r3, [sp, #12]
 80046d4:	3301      	adds	r3, #1
 80046d6:	9303      	str	r3, [sp, #12]
    while (*format)
 80046d8:	9b03      	ldr	r3, [sp, #12]
 80046da:	7818      	ldrb	r0, [r3, #0]
 80046dc:	2800      	cmp	r0, #0
 80046de:	d100      	bne.n	80046e2 <fnprintf+0x22>
 80046e0:	e089      	b.n	80047f6 <fnprintf+0x136>
        if (*format == '%')
 80046e2:	2825      	cmp	r0, #37	; 0x25
 80046e4:	d1f3      	bne.n	80046ce <fnprintf+0xe>
            format++;
 80046e6:	1c5a      	adds	r2, r3, #1
 80046e8:	9203      	str	r2, [sp, #12]
            continue;
        }

        // evaluate width field
        width = 0U;
        if (_is_digit(*format))
 80046ea:	785b      	ldrb	r3, [r3, #1]
    return (ch >= '0') && (ch <= '9');
 80046ec:	3b30      	subs	r3, #48	; 0x30
 80046ee:	b2db      	uxtb	r3, r3
        if (_is_digit(*format))
 80046f0:	2b09      	cmp	r3, #9
 80046f2:	d90b      	bls.n	800470c <fnprintf+0x4c>
        width = 0U;
 80046f4:	2300      	movs	r3, #0
        {
            width = _atoi(&format);
        }

        // evaluate specifier
        switch (*format)
 80046f6:	9a03      	ldr	r2, [sp, #12]
 80046f8:	7810      	ldrb	r0, [r2, #0]
 80046fa:	0002      	movs	r2, r0
 80046fc:	3a25      	subs	r2, #37	; 0x25
 80046fe:	b2d1      	uxtb	r1, r2
 8004700:	2953      	cmp	r1, #83	; 0x53
 8004702:	d872      	bhi.n	80047ea <fnprintf+0x12a>
 8004704:	008a      	lsls	r2, r1, #2
 8004706:	493d      	ldr	r1, [pc, #244]	; (80047fc <fnprintf+0x13c>)
 8004708:	588a      	ldr	r2, [r1, r2]
 800470a:	4697      	mov	pc, r2
            width = _atoi(&format);
 800470c:	a803      	add	r0, sp, #12
 800470e:	f7ff ff51 	bl	80045b4 <_atoi>
 8004712:	0003      	movs	r3, r0
 8004714:	e7ef      	b.n	80046f6 <fnprintf+0x36>
        case 'o':
        case 'b':
        {
            // set the base
            uint32_t base;
            if (*format == 'x' || *format == 'X')
 8004716:	2878      	cmp	r0, #120	; 0x78
 8004718:	d009      	beq.n	800472e <fnprintf+0x6e>
 800471a:	2858      	cmp	r0, #88	; 0x58
 800471c:	d01a      	beq.n	8004754 <fnprintf+0x94>
            {
                base = 16U;
            }
            else if (*format == 'o')
 800471e:	286f      	cmp	r0, #111	; 0x6f
 8004720:	d01a      	beq.n	8004758 <fnprintf+0x98>
            {
                base = 8U;
            }
            else if (*format == 'b')
 8004722:	2862      	cmp	r0, #98	; 0x62
 8004724:	d001      	beq.n	800472a <fnprintf+0x6a>
            {
                base = 2U;
            }
            else
            {
                base = 10U;
 8004726:	220a      	movs	r2, #10
 8004728:	e002      	b.n	8004730 <fnprintf+0x70>
                base = 2U;
 800472a:	2202      	movs	r2, #2
 800472c:	e000      	b.n	8004730 <fnprintf+0x70>
                base = 16U;
 800472e:	2210      	movs	r2, #16
            }

            // convert integer
            if ((*format == 'i') || (*format == 'd'))
 8004730:	2869      	cmp	r0, #105	; 0x69
 8004732:	d001      	beq.n	8004738 <fnprintf+0x78>
 8004734:	2864      	cmp	r0, #100	; 0x64
 8004736:	d111      	bne.n	800475c <fnprintf+0x9c>
            {
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, true);
 8004738:	9902      	ldr	r1, [sp, #8]
 800473a:	1d08      	adds	r0, r1, #4
 800473c:	9002      	str	r0, [sp, #8]
 800473e:	6809      	ldr	r1, [r1, #0]
 8004740:	2001      	movs	r0, #1
 8004742:	9000      	str	r0, [sp, #0]
 8004744:	0028      	movs	r0, r5
 8004746:	f7ff ff47 	bl	80045d8 <_ntoa_format>
 800474a:	1824      	adds	r4, r4, r0
            }
            else
            {
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, false);
            }
            format++;
 800474c:	9b03      	ldr	r3, [sp, #12]
 800474e:	3301      	adds	r3, #1
 8004750:	9303      	str	r3, [sp, #12]
            break;
 8004752:	e7c1      	b.n	80046d8 <fnprintf+0x18>
                base = 16U;
 8004754:	2210      	movs	r2, #16
 8004756:	e7eb      	b.n	8004730 <fnprintf+0x70>
                base = 8U;
 8004758:	2208      	movs	r2, #8
 800475a:	e7e9      	b.n	8004730 <fnprintf+0x70>
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, false);
 800475c:	9902      	ldr	r1, [sp, #8]
 800475e:	1d08      	adds	r0, r1, #4
 8004760:	9002      	str	r0, [sp, #8]
 8004762:	6809      	ldr	r1, [r1, #0]
 8004764:	2000      	movs	r0, #0
 8004766:	9000      	str	r0, [sp, #0]
 8004768:	0028      	movs	r0, r5
 800476a:	f7ff ff35 	bl	80045d8 <_ntoa_format>
 800476e:	1824      	adds	r4, r4, r0
 8004770:	e7ec      	b.n	800474c <fnprintf+0x8c>
        }

        case 'c':
        {
            out((char)va_arg(va, int));
 8004772:	9b02      	ldr	r3, [sp, #8]
 8004774:	1d1a      	adds	r2, r3, #4
 8004776:	9202      	str	r2, [sp, #8]
 8004778:	7818      	ldrb	r0, [r3, #0]
 800477a:	47a8      	blx	r5
            idx++;
 800477c:	3401      	adds	r4, #1
            format++;
 800477e:	9b03      	ldr	r3, [sp, #12]
 8004780:	3301      	adds	r3, #1
 8004782:	9303      	str	r3, [sp, #12]
            break;
 8004784:	e7a8      	b.n	80046d8 <fnprintf+0x18>
        }

        case 's':
        {
            const char *p = va_arg(va, char *);
 8004786:	9b02      	ldr	r3, [sp, #8]
 8004788:	1d1a      	adds	r2, r3, #4
 800478a:	9202      	str	r2, [sp, #8]
 800478c:	681e      	ldr	r6, [r3, #0]
    for (s = str; *s && maxsize--; ++s)
 800478e:	0033      	movs	r3, r6
 8004790:	2280      	movs	r2, #128	; 0x80
 8004792:	00d2      	lsls	r2, r2, #3
 8004794:	e001      	b.n	800479a <fnprintf+0xda>
 8004796:	3301      	adds	r3, #1
 8004798:	000a      	movs	r2, r1
 800479a:	7819      	ldrb	r1, [r3, #0]
 800479c:	2900      	cmp	r1, #0
 800479e:	d002      	beq.n	80047a6 <fnprintf+0xe6>
 80047a0:	1e51      	subs	r1, r2, #1
 80047a2:	2a00      	cmp	r2, #0
 80047a4:	d1f7      	bne.n	8004796 <fnprintf+0xd6>
            uint32_t l = _strnlen_s(p, PRINTF_MAX_STR_LEN);

            // string output
            while (*p != 0)
 80047a6:	7830      	ldrb	r0, [r6, #0]
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d003      	beq.n	80047b4 <fnprintf+0xf4>
            {
                out(*(p++));
 80047ac:	3601      	adds	r6, #1
 80047ae:	47a8      	blx	r5
                idx++;
 80047b0:	3401      	adds	r4, #1
 80047b2:	e7f8      	b.n	80047a6 <fnprintf+0xe6>
            }
            format++;
 80047b4:	9b03      	ldr	r3, [sp, #12]
 80047b6:	3301      	adds	r3, #1
 80047b8:	9303      	str	r3, [sp, #12]
            break;
 80047ba:	e78d      	b.n	80046d8 <fnprintf+0x18>
        }

        case 'p':
        {
            width = sizeof(void *) * 2U;
            idx += _ntoa_format(out, (int32_t)((uintptr_t)va_arg(va, void *)), 16U, width, false);
 80047bc:	9b02      	ldr	r3, [sp, #8]
 80047be:	1d1a      	adds	r2, r3, #4
 80047c0:	9202      	str	r2, [sp, #8]
 80047c2:	6819      	ldr	r1, [r3, #0]
 80047c4:	2300      	movs	r3, #0
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	3308      	adds	r3, #8
 80047ca:	2210      	movs	r2, #16
 80047cc:	0028      	movs	r0, r5
 80047ce:	f7ff ff03 	bl	80045d8 <_ntoa_format>
 80047d2:	1824      	adds	r4, r4, r0
            format++;
 80047d4:	9b03      	ldr	r3, [sp, #12]
 80047d6:	3301      	adds	r3, #1
 80047d8:	9303      	str	r3, [sp, #12]
            break;
 80047da:	e77d      	b.n	80046d8 <fnprintf+0x18>
        }

        case '%':
        {
            out('%');
 80047dc:	2025      	movs	r0, #37	; 0x25
 80047de:	47a8      	blx	r5
            idx++;
 80047e0:	3401      	adds	r4, #1
            format++;
 80047e2:	9b03      	ldr	r3, [sp, #12]
 80047e4:	3301      	adds	r3, #1
 80047e6:	9303      	str	r3, [sp, #12]
            break;
 80047e8:	e776      	b.n	80046d8 <fnprintf+0x18>
        }

        default:
        {
            out(*format);
 80047ea:	47a8      	blx	r5
            idx++;
 80047ec:	3401      	adds	r4, #1
            format++;
 80047ee:	9b03      	ldr	r3, [sp, #12]
 80047f0:	3301      	adds	r3, #1
 80047f2:	9303      	str	r3, [sp, #12]
            break;
 80047f4:	e770      	b.n	80046d8 <fnprintf+0x18>
        }
        }
    }
    // return written chars without terminating \0
    return idx;
}
 80047f6:	0020      	movs	r0, r4
 80047f8:	b004      	add	sp, #16
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	080055f0 	.word	0x080055f0

08004800 <spi_read_single>:
 * 
 * @param reg Register to read
 * @retval Value read from register
 */
static uint8_t spi_read_single(uint8_t reg)
{
 8004800:	b570      	push	{r4, r5, r6, lr}
 8004802:	0004      	movs	r4, r0
  spi_chip_select();
 8004804:	25a0      	movs	r5, #160	; 0xa0
 8004806:	05ed      	lsls	r5, r5, #23
 8004808:	2140      	movs	r1, #64	; 0x40
 800480a:	0028      	movs	r0, r5
 800480c:	f000 fae2 	bl	8004dd4 <gpio_clear>
  timers_delay_microseconds(1);
 8004810:	2001      	movs	r0, #1
 8004812:	f000 f95b 	bl	8004acc <timers_delay_microseconds>

  spi_xfer(RFM_SPI, reg);                   
 8004816:	b2a1      	uxth	r1, r4
 8004818:	4c08      	ldr	r4, [pc, #32]	; (800483c <spi_read_single+0x3c>)
 800481a:	0020      	movs	r0, r4
 800481c:	f000 fc86 	bl	800512c <spi_xfer>
  uint8_t in =  spi_xfer(RFM_SPI, 0x00);                   
 8004820:	2100      	movs	r1, #0
 8004822:	0020      	movs	r0, r4
 8004824:	f000 fc82 	bl	800512c <spi_xfer>
 8004828:	b2c4      	uxtb	r4, r0
    
  spi_chip_deselect(); 
 800482a:	2140      	movs	r1, #64	; 0x40
 800482c:	0028      	movs	r0, r5
 800482e:	f000 facf 	bl	8004dd0 <gpio_set>
  timers_delay_microseconds(1);
 8004832:	2001      	movs	r0, #1
 8004834:	f000 f94a 	bl	8004acc <timers_delay_microseconds>

  return in;
}
 8004838:	0020      	movs	r0, r4
 800483a:	bd70      	pop	{r4, r5, r6, pc}
 800483c:	40003800 	.word	0x40003800

08004840 <spi_write_single>:
  spi_chip_deselect();     
  timers_delay_microseconds(1);
}

static void spi_write_single(uint8_t reg, uint8_t data)
{
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	0005      	movs	r5, r0
 8004844:	000e      	movs	r6, r1
  // Set MSB for write operation
  uint8_t cmd = 0x80 | reg;
 8004846:	2480      	movs	r4, #128	; 0x80
 8004848:	4264      	negs	r4, r4
 800484a:	4304      	orrs	r4, r0
 800484c:	b2e4      	uxtb	r4, r4

  spi_chip_select();
 800484e:	27a0      	movs	r7, #160	; 0xa0
 8004850:	05ff      	lsls	r7, r7, #23
 8004852:	2140      	movs	r1, #64	; 0x40
 8004854:	0038      	movs	r0, r7
 8004856:	f000 fabd 	bl	8004dd4 <gpio_clear>
  timers_delay_microseconds(1);
 800485a:	2001      	movs	r0, #1
 800485c:	f000 f936 	bl	8004acc <timers_delay_microseconds>

  spi_xfer(RFM_SPI, cmd);                 
 8004860:	b2a1      	uxth	r1, r4
 8004862:	4c15      	ldr	r4, [pc, #84]	; (80048b8 <spi_write_single+0x78>)
 8004864:	0020      	movs	r0, r4
 8004866:	f000 fc61 	bl	800512c <spi_xfer>
  spi_xfer(RFM_SPI, data);             
 800486a:	b2b1      	uxth	r1, r6
 800486c:	0020      	movs	r0, r4
 800486e:	f000 fc5d 	bl	800512c <spi_xfer>

  spi_chip_deselect(); 
 8004872:	2140      	movs	r1, #64	; 0x40
 8004874:	0038      	movs	r0, r7
 8004876:	f000 faab 	bl	8004dd0 <gpio_set>
  timers_delay_microseconds(1);
 800487a:	2001      	movs	r0, #1
 800487c:	f000 f926 	bl	8004acc <timers_delay_microseconds>

  uint8_t curr_data = spi_read_single(reg);
 8004880:	0028      	movs	r0, r5
 8004882:	f7ff ffbd 	bl	8004800 <spi_read_single>
 8004886:	0004      	movs	r4, r0

  // log_printf(MAIN, "%02x : %02x\n", reg, data);

  if(reg == RFM_REG_12_IRQ_FLAGS)    
 8004888:	2d12      	cmp	r5, #18
 800488a:	d013      	beq.n	80048b4 <spi_write_single+0x74>
    return;

  TIMEOUT(10000, "RFM SPI Write", ((reg << 16) | data), (curr_data == data), ;, timers_delay_microseconds(100); curr_data = spi_read_single(reg););
 800488c:	f000 f970 	bl	8004b70 <timeout_init>
 8004890:	042a      	lsls	r2, r5, #16
 8004892:	4332      	orrs	r2, r6
 8004894:	4909      	ldr	r1, [pc, #36]	; (80048bc <spi_write_single+0x7c>)
 8004896:	480a      	ldr	r0, [pc, #40]	; (80048c0 <spi_write_single+0x80>)
 8004898:	f000 f978 	bl	8004b8c <timeout>
 800489c:	2800      	cmp	r0, #0
 800489e:	d109      	bne.n	80048b4 <spi_write_single+0x74>
 80048a0:	42b4      	cmp	r4, r6
 80048a2:	d007      	beq.n	80048b4 <spi_write_single+0x74>
 80048a4:	2064      	movs	r0, #100	; 0x64
 80048a6:	f000 f911 	bl	8004acc <timers_delay_microseconds>
 80048aa:	0028      	movs	r0, r5
 80048ac:	f7ff ffa8 	bl	8004800 <spi_read_single>
 80048b0:	0004      	movs	r4, r0
 80048b2:	e7ed      	b.n	8004890 <spi_write_single+0x50>

  // log_printf(MAIN, "%02x : %02x : %02x\n", reg, data, curr_data);
}
 80048b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	40003800 	.word	0x40003800
 80048bc:	08005740 	.word	0x08005740
 80048c0:	00002710 	.word	0x00002710

080048c4 <exti4_15_isr>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void exti4_15_isr(void)
{
 80048c4:	b570      	push	{r4, r5, r6, lr}
  uint16_t timer = timers_micros();
 80048c6:	f000 f917 	bl	8004af8 <timers_micros>
  
  exti_reset_request(RFM_IO_0_EXTI);
 80048ca:	2480      	movs	r4, #128	; 0x80
 80048cc:	00e4      	lsls	r4, r4, #3
 80048ce:	0020      	movs	r0, r4
 80048d0:	f000 fa22 	bl	8004d18 <exti_reset_request>
  exti_reset_request(RFM_IO_0_EXTI);
 80048d4:	0020      	movs	r0, r4
 80048d6:	f000 fa1f 	bl	8004d18 <exti_reset_request>

  // Store IRQ Flags
  packets_buf[packets_head].flags = get_irq();
 80048da:	4d1b      	ldr	r5, [pc, #108]	; (8004948 <exti4_15_isr+0x84>)
 80048dc:	782e      	ldrb	r6, [r5, #0]
  return spi_read_single(RFM_REG_12_IRQ_FLAGS);
 80048de:	2012      	movs	r0, #18
 80048e0:	f7ff ff8e 	bl	8004800 <spi_read_single>
  packets_buf[packets_head].flags = get_irq();
 80048e4:	4c19      	ldr	r4, [pc, #100]	; (800494c <exti4_15_isr+0x88>)
 80048e6:	0073      	lsls	r3, r6, #1
 80048e8:	199b      	adds	r3, r3, r6
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	18e3      	adds	r3, r4, r3
 80048ee:	7418      	strb	r0, [r3, #16]
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 80048f0:	21ff      	movs	r1, #255	; 0xff
 80048f2:	2012      	movs	r0, #18
 80048f4:	f7ff ffa4 	bl	8004840 <spi_write_single>
 80048f8:	21ff      	movs	r1, #255	; 0xff
 80048fa:	2012      	movs	r0, #18
 80048fc:	f7ff ffa0 	bl	8004840 <spi_write_single>
  clear_irq(RFM_IRQ_ALL);
  clear_irq(RFM_IRQ_ALL);

  // Get signal strength
  packets_buf[packets_head].rssi = spi_read_single(RFM_REG_1A_PKT_RSSI_VALUE);
 8004900:	201a      	movs	r0, #26
 8004902:	f7ff ff7d 	bl	8004800 <spi_read_single>
 8004906:	782a      	ldrb	r2, [r5, #0]
 8004908:	b200      	sxth	r0, r0
  packets_buf[packets_head].rssi -= 137;
 800490a:	0053      	lsls	r3, r2, #1
 800490c:	189b      	adds	r3, r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	18e3      	adds	r3, r4, r3
 8004912:	3889      	subs	r0, #137	; 0x89
 8004914:	8298      	strh	r0, [r3, #20]
  packets_buf[packets_head].snr = spi_read_single(RFM_REG_19_PKT_SNR_VALUE) / 4;
 8004916:	2019      	movs	r0, #25
 8004918:	f7ff ff72 	bl	8004800 <spi_read_single>
 800491c:	782b      	ldrb	r3, [r5, #0]
 800491e:	005a      	lsls	r2, r3, #1
 8004920:	18d2      	adds	r2, r2, r3
 8004922:	00d2      	lsls	r2, r2, #3
 8004924:	18a4      	adds	r4, r4, r2
 8004926:	0880      	lsrs	r0, r0, #2
 8004928:	74a0      	strb	r0, [r4, #18]

  // Check for CRC error
  packets_buf[packets_head].crc_ok = !(packets_buf[packets_head].flags & RFM_IRQ_PAYLOAD_CRC_ERROR);
 800492a:	7c22      	ldrb	r2, [r4, #16]
 800492c:	0952      	lsrs	r2, r2, #5
 800492e:	2101      	movs	r1, #1
 8004930:	404a      	eors	r2, r1
 8004932:	2101      	movs	r1, #1
 8004934:	400a      	ands	r2, r1
 8004936:	7462      	strb	r2, [r4, #17]

  packets_head = (packets_head + 1) % PACKETS_BUF_SIZE;
 8004938:	3301      	adds	r3, #1
 800493a:	220f      	movs	r2, #15
 800493c:	4013      	ands	r3, r2
 800493e:	702b      	strb	r3, [r5, #0]

  uint16_t time = timers_micros() - timer;
 8004940:	f000 f8da 	bl	8004af8 <timers_micros>
  // log_printf(MAIN, "ISR %u %u %u\n", time, packets_head, packets_tail);
}
 8004944:	bd70      	pop	{r4, r5, r6, pc}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	20000398 	.word	0x20000398
 800494c:	20000218 	.word	0x20000218

08004950 <test_mem_write_read>:
/*////////////////////////////////////////////////////////////////////////////*/
// Memory tests
/*////////////////////////////////////////////////////////////////////////////*/

void test_mem_write_read(void)
{
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	b082      	sub	sp, #8
    uint32_t eeprom_address = EEPROM_END - EEPROM_PAGE_SIZE;
    uint32_t eeprom_word    = 0x12345678;

    uint32_t flash_address = FLASH_END - FLASH_PAGE_SIZE;
    uint32_t *flash_data   = (uint32_t*)malloc(64); 
 8004954:	2040      	movs	r0, #64	; 0x40
 8004956:	f000 fcc5 	bl	80052e4 <malloc>
 800495a:	0004      	movs	r4, r0
    flash_data[0] = 0x12345678;
 800495c:	4e22      	ldr	r6, [pc, #136]	; (80049e8 <test_mem_write_read+0x98>)
 800495e:	6006      	str	r6, [r0, #0]
    flash_data[1] = 0x24681234;
 8004960:	4b22      	ldr	r3, [pc, #136]	; (80049ec <test_mem_write_read+0x9c>)
 8004962:	6043      	str	r3, [r0, #4]

    log_printf(MAIN, "Test Mem Write Read\n\n");
 8004964:	4922      	ldr	r1, [pc, #136]	; (80049f0 <test_mem_write_read+0xa0>)
 8004966:	2000      	movs	r0, #0
 8004968:	f7ff fd74 	bl	8004454 <log_printf>

    log_printf(MAIN, "EEPROM Start: %08x : %08x\n", eeprom_address, MMIO32(eeprom_address));
 800496c:	4d21      	ldr	r5, [pc, #132]	; (80049f4 <test_mem_write_read+0xa4>)
 800496e:	682b      	ldr	r3, [r5, #0]
 8004970:	002a      	movs	r2, r5
 8004972:	4921      	ldr	r1, [pc, #132]	; (80049f8 <test_mem_write_read+0xa8>)
 8004974:	2000      	movs	r0, #0
 8004976:	f7ff fd6d 	bl	8004454 <log_printf>
    log_printf(MAIN, "Programming: %08x\n", eeprom_word); mem_eeprom_write_word(eeprom_address, eeprom_word);
 800497a:	0032      	movs	r2, r6
 800497c:	491f      	ldr	r1, [pc, #124]	; (80049fc <test_mem_write_read+0xac>)
 800497e:	2000      	movs	r0, #0
 8004980:	f7ff fd68 	bl	8004454 <log_printf>
 8004984:	0031      	movs	r1, r6
 8004986:	0028      	movs	r0, r5
 8004988:	f7ff fd9e 	bl	80044c8 <mem_eeprom_write_word>
    log_printf(MAIN, "EEPROM End: %08x : %08x\n\n", eeprom_address, MMIO32(eeprom_address));
 800498c:	682b      	ldr	r3, [r5, #0]
 800498e:	002a      	movs	r2, r5
 8004990:	491b      	ldr	r1, [pc, #108]	; (8004a00 <test_mem_write_read+0xb0>)
 8004992:	2000      	movs	r0, #0
 8004994:	f7ff fd5e 	bl	8004454 <log_printf>

    log_printf(MAIN, "Flash Erase\n"); mem_flash_erase_page(flash_address);
 8004998:	491a      	ldr	r1, [pc, #104]	; (8004a04 <test_mem_write_read+0xb4>)
 800499a:	2000      	movs	r0, #0
 800499c:	f7ff fd5a 	bl	8004454 <log_printf>
 80049a0:	4d19      	ldr	r5, [pc, #100]	; (8004a08 <test_mem_write_read+0xb8>)
 80049a2:	0028      	movs	r0, r5
 80049a4:	f7ff fde4 	bl	8004570 <mem_flash_erase_page>
    log_printf(MAIN, "Flash Start: %08x : %08x\n%08x : %08x\n", flash_address, MMIO32(flash_address), flash_address+4, MMIO32(flash_address+4));
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	4e18      	ldr	r6, [pc, #96]	; (8004a0c <test_mem_write_read+0xbc>)
 80049ac:	6832      	ldr	r2, [r6, #0]
 80049ae:	9201      	str	r2, [sp, #4]
 80049b0:	9600      	str	r6, [sp, #0]
 80049b2:	002a      	movs	r2, r5
 80049b4:	4916      	ldr	r1, [pc, #88]	; (8004a10 <test_mem_write_read+0xc0>)
 80049b6:	2000      	movs	r0, #0
 80049b8:	f7ff fd4c 	bl	8004454 <log_printf>
    log_printf(MAIN, "Programming %08x %08x\n", flash_data[0], flash_data[1]); mem_flash_write_half_page(flash_address, flash_data);
 80049bc:	6863      	ldr	r3, [r4, #4]
 80049be:	6822      	ldr	r2, [r4, #0]
 80049c0:	4914      	ldr	r1, [pc, #80]	; (8004a14 <test_mem_write_read+0xc4>)
 80049c2:	2000      	movs	r0, #0
 80049c4:	f7ff fd46 	bl	8004454 <log_printf>
 80049c8:	0021      	movs	r1, r4
 80049ca:	0028      	movs	r0, r5
 80049cc:	f7ff fde0 	bl	8004590 <mem_flash_write_half_page>
    // log_printf(MAIN, "Programming %08x\n", flash_data[1]); mem_flash_write_word(flash_address, flash_data[1]);
    log_printf(MAIN, "Flash End: %08x : %08x\n%08x : %08x\n", flash_address, MMIO32(flash_address), flash_address+4, MMIO32(flash_address+4));
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	6832      	ldr	r2, [r6, #0]
 80049d4:	9201      	str	r2, [sp, #4]
 80049d6:	9600      	str	r6, [sp, #0]
 80049d8:	002a      	movs	r2, r5
 80049da:	490f      	ldr	r1, [pc, #60]	; (8004a18 <test_mem_write_read+0xc8>)
 80049dc:	2000      	movs	r0, #0
 80049de:	f7ff fd39 	bl	8004454 <log_printf>
}
 80049e2:	b002      	add	sp, #8
 80049e4:	bd70      	pop	{r4, r5, r6, pc}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	12345678 	.word	0x12345678
 80049ec:	24681234 	.word	0x24681234
 80049f0:	08005750 	.word	0x08005750
 80049f4:	080807fc 	.word	0x080807fc
 80049f8:	08005768 	.word	0x08005768
 80049fc:	08005784 	.word	0x08005784
 8004a00:	08005798 	.word	0x08005798
 8004a04:	080057b4 	.word	0x080057b4
 8004a08:	0800ff80 	.word	0x0800ff80
 8004a0c:	0800ff84 	.word	0x0800ff84
 8004a10:	080057c4 	.word	0x080057c4
 8004a14:	080057ec 	.word	0x080057ec
 8004a18:	08005804 	.word	0x08005804

08004a1c <flash_led>:
{
    boot_jump_to_application(address);
}

void flash_led(uint16_t milliseconds, uint8_t num_flashes)
{
 8004a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a1e:	46c6      	mov	lr, r8
 8004a20:	b500      	push	{lr}
 8004a22:	0005      	movs	r5, r0
 8004a24:	4688      	mov	r8, r1
	gpio_mode_setup(LED_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, LED);
 8004a26:	2680      	movs	r6, #128	; 0x80
 8004a28:	0076      	lsls	r6, r6, #1
 8004a2a:	4c13      	ldr	r4, [pc, #76]	; (8004a78 <flash_led+0x5c>)
 8004a2c:	0033      	movs	r3, r6
 8004a2e:	2200      	movs	r2, #0
 8004a30:	2101      	movs	r1, #1
 8004a32:	0020      	movs	r0, r4
 8004a34:	f000 f9d1 	bl	8004dda <gpio_mode_setup>
	gpio_clear(LED_PORT, LED);
 8004a38:	0031      	movs	r1, r6
 8004a3a:	0020      	movs	r0, r4
 8004a3c:	f000 f9ca 	bl	8004dd4 <gpio_clear>
	for(uint8_t i = 0; i < num_flashes; i++)
 8004a40:	2400      	movs	r4, #0
 8004a42:	4544      	cmp	r4, r8
 8004a44:	d215      	bcs.n	8004a72 <flash_led+0x56>
	{
		gpio_set(LED_PORT, LED);
 8004a46:	2780      	movs	r7, #128	; 0x80
 8004a48:	007f      	lsls	r7, r7, #1
 8004a4a:	4e0b      	ldr	r6, [pc, #44]	; (8004a78 <flash_led+0x5c>)
 8004a4c:	0039      	movs	r1, r7
 8004a4e:	0030      	movs	r0, r6
 8004a50:	f000 f9be 	bl	8004dd0 <gpio_set>
		timers_delay_milliseconds(milliseconds / 4);
 8004a54:	08a8      	lsrs	r0, r5, #2
 8004a56:	f000 f86d 	bl	8004b34 <timers_delay_milliseconds>
		gpio_clear(LED_PORT, LED);
 8004a5a:	0039      	movs	r1, r7
 8004a5c:	0030      	movs	r0, r6
 8004a5e:	f000 f9b9 	bl	8004dd4 <gpio_clear>
		timers_delay_milliseconds(3 * milliseconds / 4);
 8004a62:	0068      	lsls	r0, r5, #1
 8004a64:	1828      	adds	r0, r5, r0
 8004a66:	1080      	asrs	r0, r0, #2
 8004a68:	f000 f864 	bl	8004b34 <timers_delay_milliseconds>
	for(uint8_t i = 0; i < num_flashes; i++)
 8004a6c:	3401      	adds	r4, #1
 8004a6e:	b2e4      	uxtb	r4, r4
 8004a70:	e7e7      	b.n	8004a42 <flash_led+0x26>
	}
}
 8004a72:	bc80      	pop	{r7}
 8004a74:	46b8      	mov	r8, r7
 8004a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a78:	50000400 	.word	0x50000400

08004a7c <timers_lptim_init>:
}


// Setup lptim1 as approx. microsecond counter
void timers_lptim_init(void)
{
 8004a7c:	b510      	push	{r4, lr}
    // Input clock is 2.097Mhz
    rcc_set_peripheral_clk_sel(LPTIM1, RCC_CCIPR_LPTIM1SEL_APB);
 8004a7e:	4c10      	ldr	r4, [pc, #64]	; (8004ac0 <timers_lptim_init+0x44>)
 8004a80:	2100      	movs	r1, #0
 8004a82:	0020      	movs	r0, r4
 8004a84:	f000 fae6 	bl	8005054 <rcc_set_peripheral_clk_sel>
 
    rcc_periph_clock_enable(RCC_LPTIM1);
 8004a88:	480e      	ldr	r0, [pc, #56]	; (8004ac4 <timers_lptim_init+0x48>)
 8004a8a:	f000 fb19 	bl	80050c0 <rcc_periph_clock_enable>
    
    lptimer_set_internal_clock_source(LPTIM1);
 8004a8e:	0020      	movs	r0, r4
 8004a90:	f000 fa2a 	bl	8004ee8 <lptimer_set_internal_clock_source>
    lptimer_enable_trigger(LPTIM1, LPTIM_CFGR_TRIGEN_SW);
 8004a94:	2100      	movs	r1, #0
 8004a96:	0020      	movs	r0, r4
 8004a98:	f000 fa1c 	bl	8004ed4 <lptimer_enable_trigger>
    lptimer_set_prescaler(LPTIM1, LPTIM_CFGR_PRESC_2);
 8004a9c:	2180      	movs	r1, #128	; 0x80
 8004a9e:	0089      	lsls	r1, r1, #2
 8004aa0:	0020      	movs	r0, r4
 8004aa2:	f000 fa0f 	bl	8004ec4 <lptimer_set_prescaler>
    
    lptimer_enable(LPTIM1);
 8004aa6:	0020      	movs	r0, r4
 8004aa8:	f000 fa02 	bl	8004eb0 <lptimer_enable>
    
    lptimer_set_period(LPTIM1, 0xffff);
 8004aac:	4906      	ldr	r1, [pc, #24]	; (8004ac8 <timers_lptim_init+0x4c>)
 8004aae:	0020      	movs	r0, r4
 8004ab0:	f000 fa18 	bl	8004ee4 <lptimer_set_period>
    
    lptimer_start_counter(LPTIM1, LPTIM_CR_CNTSTRT);
 8004ab4:	2104      	movs	r1, #4
 8004ab6:	0020      	movs	r0, r4
 8004ab8:	f000 f9ff 	bl	8004eba <lptimer_start_counter>
}
 8004abc:	bd10      	pop	{r4, pc}
 8004abe:	46c0      	nop			; (mov r8, r8)
 8004ac0:	40007c00 	.word	0x40007c00
 8004ac4:	0000071f 	.word	0x0000071f
 8004ac8:	0000ffff 	.word	0x0000ffff

08004acc <timers_delay_microseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_microseconds(uint32_t delay_microseconds)
{
 8004acc:	b570      	push	{r4, r5, r6, lr}
 8004ace:	0004      	movs	r4, r0
    uint32_t curr_time = lptimer_get_counter(LPTIM1);
 8004ad0:	4807      	ldr	r0, [pc, #28]	; (8004af0 <timers_delay_microseconds+0x24>)
 8004ad2:	f000 f9ea 	bl	8004eaa <lptimer_get_counter>
 8004ad6:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_microseconds > 65000)
 8004ad8:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <timers_delay_microseconds+0x28>)
 8004ada:	429c      	cmp	r4, r3
 8004adc:	d900      	bls.n	8004ae0 <timers_delay_microseconds+0x14>
        delay_microseconds = 65000;
 8004ade:	001c      	movs	r4, r3

    while (lptimer_get_counter(LPTIM1) - curr_time < delay_microseconds);
 8004ae0:	4803      	ldr	r0, [pc, #12]	; (8004af0 <timers_delay_microseconds+0x24>)
 8004ae2:	f000 f9e2 	bl	8004eaa <lptimer_get_counter>
 8004ae6:	1b40      	subs	r0, r0, r5
 8004ae8:	42a0      	cmp	r0, r4
 8004aea:	d3f9      	bcc.n	8004ae0 <timers_delay_microseconds+0x14>
}
 8004aec:	bd70      	pop	{r4, r5, r6, pc}
 8004aee:	46c0      	nop			; (mov r8, r8)
 8004af0:	40007c00 	.word	0x40007c00
 8004af4:	0000fde8 	.word	0x0000fde8

08004af8 <timers_micros>:
}
*/

// Returns value of microsecond counter
uint16_t timers_micros(void)
{
 8004af8:	b510      	push	{r4, lr}
    return (uint16_t)lptimer_get_counter(LPTIM1);
 8004afa:	4802      	ldr	r0, [pc, #8]	; (8004b04 <timers_micros+0xc>)
 8004afc:	f000 f9d5 	bl	8004eaa <lptimer_get_counter>
}
 8004b00:	bd10      	pop	{r4, pc}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	40007c00 	.word	0x40007c00

08004b08 <timers_tim6_init>:


// Setup TIM6 as millisecond counter. Clocked by APB1
void timers_tim6_init(void)
{
 8004b08:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_TIM6);
 8004b0a:	4808      	ldr	r0, [pc, #32]	; (8004b2c <timers_tim6_init+0x24>)
 8004b0c:	f000 fad8 	bl	80050c0 <rcc_periph_clock_enable>
    timer_disable_counter(TIM6);
 8004b10:	4c07      	ldr	r4, [pc, #28]	; (8004b30 <timers_tim6_init+0x28>)
 8004b12:	0020      	movs	r0, r4
 8004b14:	f000 fb17 	bl	8005146 <timer_disable_counter>
    timer_set_prescaler(TIM6, (2097 - 1));
 8004b18:	2183      	movs	r1, #131	; 0x83
 8004b1a:	0109      	lsls	r1, r1, #4
 8004b1c:	0020      	movs	r0, r4
 8004b1e:	f000 fb17 	bl	8005150 <timer_set_prescaler>
    timer_enable_counter(TIM6);
 8004b22:	0020      	movs	r0, r4
 8004b24:	f000 fb0a 	bl	800513c <timer_enable_counter>
}
 8004b28:	bd10      	pop	{r4, pc}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	00000704 	.word	0x00000704
 8004b30:	40001000 	.word	0x40001000

08004b34 <timers_delay_milliseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_milliseconds(uint32_t delay_milliseconds)
{
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	0004      	movs	r4, r0
    uint32_t curr_time = timer_get_counter(TIM6);
 8004b38:	4807      	ldr	r0, [pc, #28]	; (8004b58 <timers_delay_milliseconds+0x24>)
 8004b3a:	f000 fb0b 	bl	8005154 <timer_get_counter>
 8004b3e:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_milliseconds > 65000)
 8004b40:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <timers_delay_milliseconds+0x28>)
 8004b42:	429c      	cmp	r4, r3
 8004b44:	d900      	bls.n	8004b48 <timers_delay_milliseconds+0x14>
        delay_milliseconds = 65000;
 8004b46:	001c      	movs	r4, r3

    while (timer_get_counter(TIM6) - curr_time < delay_milliseconds);
 8004b48:	4803      	ldr	r0, [pc, #12]	; (8004b58 <timers_delay_milliseconds+0x24>)
 8004b4a:	f000 fb03 	bl	8005154 <timer_get_counter>
 8004b4e:	1b40      	subs	r0, r0, r5
 8004b50:	42a0      	cmp	r0, r4
 8004b52:	d3f9      	bcc.n	8004b48 <timers_delay_milliseconds+0x14>
}
 8004b54:	bd70      	pop	{r4, r5, r6, pc}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	40001000 	.word	0x40001000
 8004b5c:	0000fde8 	.word	0x0000fde8

08004b60 <timers_millis>:

// Returns value of millisecond counter
uint16_t timers_millis(void)
{
 8004b60:	b510      	push	{r4, lr}
    return timer_get_counter(TIM6);
 8004b62:	4802      	ldr	r0, [pc, #8]	; (8004b6c <timers_millis+0xc>)
 8004b64:	f000 faf6 	bl	8005154 <timer_get_counter>
 8004b68:	b280      	uxth	r0, r0
}
 8004b6a:	bd10      	pop	{r4, pc}
 8004b6c:	40001000 	.word	0x40001000

08004b70 <timeout_init>:
}


// Timout functions
void timeout_init(void)
{
 8004b70:	b510      	push	{r4, lr}
    timeout_counter     = 0; 
 8004b72:	4b04      	ldr	r3, [pc, #16]	; (8004b84 <timeout_init+0x14>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
    // timeout_counter     = 2140483648; 
    timeout_timer       = timers_micros(); 
 8004b78:	f7ff ffbe 	bl	8004af8 <timers_micros>
 8004b7c:	4b02      	ldr	r3, [pc, #8]	; (8004b88 <timeout_init+0x18>)
 8004b7e:	8018      	strh	r0, [r3, #0]
}
 8004b80:	bd10      	pop	{r4, pc}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	2000039c 	.word	0x2000039c
 8004b88:	200003a0 	.word	0x200003a0

08004b8c <timeout>:

bool timeout(uint32_t time_microseconds, char *msg, uint32_t data)
{
 8004b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	0006      	movs	r6, r0
 8004b92:	9101      	str	r1, [sp, #4]
 8004b94:	0015      	movs	r5, r2
    timeout_counter    += (uint16_t)(timers_micros() - timeout_timer);
 8004b96:	f7ff ffaf 	bl	8004af8 <timers_micros>
 8004b9a:	4c0d      	ldr	r4, [pc, #52]	; (8004bd0 <timeout+0x44>)
 8004b9c:	8823      	ldrh	r3, [r4, #0]
 8004b9e:	1ac3      	subs	r3, r0, r3
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	4f0c      	ldr	r7, [pc, #48]	; (8004bd4 <timeout+0x48>)
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	4694      	mov	ip, r2
 8004ba8:	4463      	add	r3, ip
 8004baa:	603b      	str	r3, [r7, #0]
    timeout_timer       = timers_micros();
 8004bac:	f7ff ffa4 	bl	8004af8 <timers_micros>
 8004bb0:	8020      	strh	r0, [r4, #0]

    // log_printf(MAIN, "%u\n", timeout_counter);

    if(timeout_counter > time_microseconds)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	42b3      	cmp	r3, r6
 8004bb6:	d802      	bhi.n	8004bbe <timeout+0x32>
    {
        log_printf(MAIN, "Timeout %s %08X\n", msg, data);
        return true;
    }
    else    
        return false;
 8004bb8:	2000      	movs	r0, #0
}
 8004bba:	b003      	add	sp, #12
 8004bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        log_printf(MAIN, "Timeout %s %08X\n", msg, data);
 8004bbe:	002b      	movs	r3, r5
 8004bc0:	9a01      	ldr	r2, [sp, #4]
 8004bc2:	4905      	ldr	r1, [pc, #20]	; (8004bd8 <timeout+0x4c>)
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	f7ff fc45 	bl	8004454 <log_printf>
        return true;
 8004bca:	2001      	movs	r0, #1
 8004bcc:	e7f5      	b.n	8004bba <timeout+0x2e>
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	200003a0 	.word	0x200003a0
 8004bd4:	2000039c 	.word	0x2000039c
 8004bd8:	08005828 	.word	0x08005828

08004bdc <set_gpio_for_standby>:

void set_gpio_for_standby(void)
{   
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Common
    // LED
    gpio_mode_setup(LED_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, LED);
 8004bde:	2680      	movs	r6, #128	; 0x80
 8004be0:	0076      	lsls	r6, r6, #1
 8004be2:	4c36      	ldr	r4, [pc, #216]	; (8004cbc <set_gpio_for_standby+0xe0>)
 8004be4:	0033      	movs	r3, r6
 8004be6:	2200      	movs	r2, #0
 8004be8:	2103      	movs	r1, #3
 8004bea:	0020      	movs	r0, r4
 8004bec:	f000 f8f5 	bl	8004dda <gpio_mode_setup>
    gpio_set(LED_PORT, LED);
 8004bf0:	0031      	movs	r1, r6
 8004bf2:	0020      	movs	r0, r4
 8004bf4:	f000 f8ec 	bl	8004dd0 <gpio_set>

    // Serial Print
    gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, SPF_USART_TX);
 8004bf8:	2380      	movs	r3, #128	; 0x80
 8004bfa:	25a0      	movs	r5, #160	; 0xa0
 8004bfc:	05ed      	lsls	r5, r5, #23
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	2201      	movs	r2, #1
 8004c02:	2100      	movs	r1, #0
 8004c04:	0028      	movs	r0, r5
 8004c06:	f000 f8e8 	bl	8004dda <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE,  SPF_USART_RX);
 8004c0a:	2780      	movs	r7, #128	; 0x80
 8004c0c:	00ff      	lsls	r7, r7, #3
 8004c0e:	003b      	movs	r3, r7
 8004c10:	2200      	movs	r2, #0
 8004c12:	2101      	movs	r1, #1
 8004c14:	0028      	movs	r0, r5
 8004c16:	f000 f8e0 	bl	8004dda <gpio_mode_setup>
	gpio_set(SPF_USART_RX_PORT, SPF_USART_RX);
 8004c1a:	0039      	movs	r1, r7
 8004c1c:	0028      	movs	r0, r5
 8004c1e:	f000 f8d7 	bl	8004dd0 <gpio_set>

    // Batt Sense
    gpio_mode_setup(BATT_SENS_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, BATT_SENS);
 8004c22:	2301      	movs	r3, #1
 8004c24:	2200      	movs	r2, #0
 8004c26:	2103      	movs	r1, #3
 8004c28:	0028      	movs	r0, r5
 8004c2a:	f000 f8d6 	bl	8004dda <gpio_mode_setup>
    
    // RFM
    // SPI
    gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_ANALOG,   GPIO_PUPD_NONE,       RFM_SPI_MISO);
 8004c2e:	2380      	movs	r3, #128	; 0x80
 8004c30:	01db      	lsls	r3, r3, #7
 8004c32:	2200      	movs	r2, #0
 8004c34:	2103      	movs	r1, #3
 8004c36:	0020      	movs	r0, r4
 8004c38:	f000 f8cf 	bl	8004dda <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_SCK_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_SCK);
 8004c3c:	2380      	movs	r3, #128	; 0x80
 8004c3e:	019b      	lsls	r3, r3, #6
 8004c40:	2202      	movs	r2, #2
 8004c42:	2100      	movs	r1, #0
 8004c44:	0020      	movs	r0, r4
 8004c46:	f000 f8c8 	bl	8004dda <gpio_mode_setup>
    gpio_mode_setup(RFM_SPI_MOSI_PORT,  GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_MOSI);
 8004c4a:	2380      	movs	r3, #128	; 0x80
 8004c4c:	021b      	lsls	r3, r3, #8
 8004c4e:	2202      	movs	r2, #2
 8004c50:	2100      	movs	r1, #0
 8004c52:	0020      	movs	r0, r4
 8004c54:	f000 f8c1 	bl	8004dda <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_NSS_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_SPI_NSS);
 8004c58:	2340      	movs	r3, #64	; 0x40
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	0028      	movs	r0, r5
 8004c60:	f000 f8bb 	bl	8004dda <gpio_mode_setup>
    gpio_mode_setup(RFM_RESET_PORT,     GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_RESET);
 8004c64:	2310      	movs	r3, #16
 8004c66:	2201      	movs	r2, #1
 8004c68:	2100      	movs	r1, #0
 8004c6a:	0028      	movs	r0, r5
 8004c6c:	f000 f8b5 	bl	8004dda <gpio_mode_setup>

    // DIO
    gpio_mode_setup(RFM_IO_0_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_0);
 8004c70:	003b      	movs	r3, r7
 8004c72:	2200      	movs	r2, #0
 8004c74:	2103      	movs	r1, #3
 8004c76:	0020      	movs	r0, r4
 8004c78:	f000 f8af 	bl	8004dda <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_1_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_1);
 8004c7c:	2380      	movs	r3, #128	; 0x80
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	2200      	movs	r2, #0
 8004c82:	2103      	movs	r1, #3
 8004c84:	0020      	movs	r0, r4
 8004c86:	f000 f8a8 	bl	8004dda <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_2_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_2);
 8004c8a:	0033      	movs	r3, r6
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2103      	movs	r1, #3
 8004c90:	0028      	movs	r0, r5
 8004c92:	f000 f8a2 	bl	8004dda <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_3_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_3);
 8004c96:	2302      	movs	r3, #2
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2103      	movs	r1, #3
 8004c9c:	0020      	movs	r0, r4
 8004c9e:	f000 f89c 	bl	8004dda <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_4_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_4);
 8004ca2:	2304      	movs	r3, #4
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	2103      	movs	r1, #3
 8004ca8:	0020      	movs	r0, r4
 8004caa:	f000 f896 	bl	8004dda <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_5_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_5);
 8004cae:	2301      	movs	r3, #1
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2103      	movs	r1, #3
 8004cb4:	0020      	movs	r0, r4
 8004cb6:	f000 f890 	bl	8004dda <gpio_mode_setup>
    gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
	gpio_mode_setup(TEMP_I2C_SDA_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SDA);

    #endif

}
 8004cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cbc:	50000400 	.word	0x50000400

08004cc0 <rtc_isr>:

// Override default rtc interrupt handler
void rtc_isr(void)
{ 
 8004cc0:	b510      	push	{r4, lr}
    exti_reset_request(EXTI20);
 8004cc2:	2080      	movs	r0, #128	; 0x80
 8004cc4:	0340      	lsls	r0, r0, #13
 8004cc6:	f000 f827 	bl	8004d18 <exti_reset_request>

    // scb_reset_system();

    log_init();
 8004cca:	f7ff fbb5 	bl	8004438 <log_init>
    log_printf(MAIN, "RTC ISR\n");
 8004cce:	490d      	ldr	r1, [pc, #52]	; (8004d04 <rtc_isr+0x44>)
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f7ff fbbf 	bl	8004454 <log_printf>

    if(RTC_ISR & RTC_ISR_WUTF)
 8004cd6:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <rtc_isr+0x48>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	055b      	lsls	r3, r3, #21
 8004cdc:	d400      	bmi.n	8004ce0 <rtc_isr+0x20>
        pwr_clear_standby_flag();
        rtc_lock();
	    pwr_enable_backup_domain_write_protect();
        set_gpio_for_standby();
    }
}
 8004cde:	bd10      	pop	{r4, pc}
        pwr_disable_backup_domain_write_protect();
 8004ce0:	f000 f908 	bl	8004ef4 <pwr_disable_backup_domain_write_protect>
        rtc_unlock();
 8004ce4:	f000 fa0a 	bl	80050fc <rtc_unlock>
	    rtc_clear_wakeup_flag();
 8004ce8:	f000 fa16 	bl	8005118 <rtc_clear_wakeup_flag>
        pwr_clear_wakeup_flag();
 8004cec:	f000 f91e 	bl	8004f2c <pwr_clear_wakeup_flag>
        pwr_clear_standby_flag();
 8004cf0:	f000 f914 	bl	8004f1c <pwr_clear_standby_flag>
        rtc_lock();
 8004cf4:	f000 fa0a 	bl	800510c <rtc_lock>
	    pwr_enable_backup_domain_write_protect();
 8004cf8:	f000 f906 	bl	8004f08 <pwr_enable_backup_domain_write_protect>
        set_gpio_for_standby();
 8004cfc:	f7ff ff6e 	bl	8004bdc <set_gpio_for_standby>
}
 8004d00:	e7ed      	b.n	8004cde <rtc_isr+0x1e>
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	0800583c 	.word	0x0800583c
 8004d08:	4000280c 	.word	0x4000280c

08004d0c <adc_start_conversion_regular>:
 * @param[in] adc ADC block register address base @ref adc_reg_base
 */
void adc_start_conversion_regular(uint32_t adc)
{
	/* Start conversion on regular channels. */
	ADC_CR(adc) |= ADC_CR_ADSTART;
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	6882      	ldr	r2, [r0, #8]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	6083      	str	r3, [r0, #8]
}
 8004d14:	4770      	bx	lr
	...

08004d18 <exti_reset_request>:
{
#if defined(EXTI_RPR1) && defined(EXTI_FPR1)
	EXTI_RPR1 = extis;
	EXTI_FPR1 = extis;
#else
	EXTI_PR = extis;
 8004d18:	4b01      	ldr	r3, [pc, #4]	; (8004d20 <exti_reset_request+0x8>)
 8004d1a:	6018      	str	r0, [r3, #0]
#endif
}
 8004d1c:	4770      	bx	lr
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	40010414 	.word	0x40010414

08004d24 <flash_set_ws>:
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8004d24:	2101      	movs	r1, #1
	reg32 = FLASH_ACR;
 8004d26:	4a03      	ldr	r2, [pc, #12]	; (8004d34 <flash_set_ws+0x10>)
 8004d28:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8004d2a:	438b      	bics	r3, r1
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 8004d2c:	4303      	orrs	r3, r0
	FLASH_ACR = reg32;
 8004d2e:	6013      	str	r3, [r2, #0]
}
 8004d30:	4770      	bx	lr
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	40022000 	.word	0x40022000

08004d38 <flash_unlock_option_bytes>:

void flash_unlock_option_bytes(void)
{
	FLASH_OPTKEYR = FLASH_OPTKEYR_KEY1;
 8004d38:	4b02      	ldr	r3, [pc, #8]	; (8004d44 <flash_unlock_option_bytes+0xc>)
 8004d3a:	4a03      	ldr	r2, [pc, #12]	; (8004d48 <flash_unlock_option_bytes+0x10>)
 8004d3c:	601a      	str	r2, [r3, #0]
	FLASH_OPTKEYR = FLASH_OPTKEYR_KEY2;
 8004d3e:	4a03      	ldr	r2, [pc, #12]	; (8004d4c <flash_unlock_option_bytes+0x14>)
 8004d40:	601a      	str	r2, [r3, #0]
}
 8004d42:	4770      	bx	lr
 8004d44:	40022014 	.word	0x40022014
 8004d48:	fbead9c8 	.word	0xfbead9c8
 8004d4c:	24252627 	.word	0x24252627

08004d50 <flash_unlock_pecr>:
 * yourself.
 * @sa flash_unlock
 */
void flash_unlock_pecr(void)
{
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY1;
 8004d50:	4b02      	ldr	r3, [pc, #8]	; (8004d5c <flash_unlock_pecr+0xc>)
 8004d52:	4a03      	ldr	r2, [pc, #12]	; (8004d60 <flash_unlock_pecr+0x10>)
 8004d54:	601a      	str	r2, [r3, #0]
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY2;
 8004d56:	4a03      	ldr	r2, [pc, #12]	; (8004d64 <flash_unlock_pecr+0x14>)
 8004d58:	601a      	str	r2, [r3, #0]
}
 8004d5a:	4770      	bx	lr
 8004d5c:	4002200c 	.word	0x4002200c
 8004d60:	89abcdef 	.word	0x89abcdef
 8004d64:	02030405 	.word	0x02030405

08004d68 <flash_lock_pecr>:

void flash_lock_pecr(void)
{
	FLASH_PECR |= FLASH_PECR_PELOCK;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	4a02      	ldr	r2, [pc, #8]	; (8004d74 <flash_lock_pecr+0xc>)
 8004d6c:	6811      	ldr	r1, [r2, #0]
 8004d6e:	430b      	orrs	r3, r1
 8004d70:	6013      	str	r3, [r2, #0]
}
 8004d72:	4770      	bx	lr
 8004d74:	40022004 	.word	0x40022004

08004d78 <flash_unlock_progmem>:
 * you must have already unlocked access to this register!
 * @sa flash_unlock_pecr
 */
void flash_unlock_progmem(void)
{
	FLASH_PRGKEYR = FLASH_PRGKEYR_PRGKEY1;
 8004d78:	4b02      	ldr	r3, [pc, #8]	; (8004d84 <flash_unlock_progmem+0xc>)
 8004d7a:	4a03      	ldr	r2, [pc, #12]	; (8004d88 <flash_unlock_progmem+0x10>)
 8004d7c:	601a      	str	r2, [r3, #0]
	FLASH_PRGKEYR = FLASH_PRGKEYR_PRGKEY2;
 8004d7e:	4a03      	ldr	r2, [pc, #12]	; (8004d8c <flash_unlock_progmem+0x14>)
 8004d80:	601a      	str	r2, [r3, #0]
}
 8004d82:	4770      	bx	lr
 8004d84:	40022010 	.word	0x40022010
 8004d88:	8c9daebf 	.word	0x8c9daebf
 8004d8c:	13141516 	.word	0x13141516

08004d90 <flash_lock_progmem>:

void flash_lock_progmem(void)
{
	FLASH_PECR |= FLASH_PECR_PRGLOCK;
 8004d90:	2302      	movs	r3, #2
 8004d92:	4a02      	ldr	r2, [pc, #8]	; (8004d9c <flash_lock_progmem+0xc>)
 8004d94:	6811      	ldr	r1, [r2, #0]
 8004d96:	430b      	orrs	r3, r1
 8004d98:	6013      	str	r3, [r2, #0]
}
 8004d9a:	4770      	bx	lr
 8004d9c:	40022004 	.word	0x40022004

08004da0 <flash_lock_option_bytes>:

void flash_lock_option_bytes(void)
{
	FLASH_PECR |= FLASH_PECR_OPTLOCK;
 8004da0:	2304      	movs	r3, #4
 8004da2:	4a02      	ldr	r2, [pc, #8]	; (8004dac <flash_lock_option_bytes+0xc>)
 8004da4:	6811      	ldr	r1, [r2, #0]
 8004da6:	430b      	orrs	r3, r1
 8004da8:	6013      	str	r3, [r2, #0]
}
 8004daa:	4770      	bx	lr
 8004dac:	40022004 	.word	0x40022004

08004db0 <flash_unlock>:

/** @brief Unlock all segments of flash
 *
 */
void flash_unlock(void)
{
 8004db0:	b510      	push	{r4, lr}
	flash_unlock_pecr();
 8004db2:	f7ff ffcd 	bl	8004d50 <flash_unlock_pecr>
	flash_unlock_progmem();
 8004db6:	f7ff ffdf 	bl	8004d78 <flash_unlock_progmem>
	flash_unlock_option_bytes();
 8004dba:	f7ff ffbd 	bl	8004d38 <flash_unlock_option_bytes>
}
 8004dbe:	bd10      	pop	{r4, pc}

08004dc0 <flash_lock>:

/** @brief Lock all segments of flash
 *
 */
void flash_lock(void)
{
 8004dc0:	b510      	push	{r4, lr}
	flash_lock_option_bytes();
 8004dc2:	f7ff ffed 	bl	8004da0 <flash_lock_option_bytes>
	flash_lock_progmem();
 8004dc6:	f7ff ffe3 	bl	8004d90 <flash_lock_progmem>
	flash_lock_pecr();
 8004dca:	f7ff ffcd 	bl	8004d68 <flash_lock_pecr>
}
 8004dce:	bd10      	pop	{r4, pc}

08004dd0 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8004dd0:	6181      	str	r1, [r0, #24]
}
 8004dd2:	4770      	bx	lr

08004dd4 <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8004dd4:	0409      	lsls	r1, r1, #16
 8004dd6:	6181      	str	r1, [r0, #24]
}
 8004dd8:	4770      	bx	lr

08004dda <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 8004dda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8004de0:	2703      	movs	r7, #3
	pupd = GPIO_PUPDR(gpioport);
 8004de2:	2100      	movs	r1, #0
{
 8004de4:	9202      	str	r2, [sp, #8]
 8004de6:	9303      	str	r3, [sp, #12]
	moder = GPIO_MODER(gpioport);
 8004de8:	6802      	ldr	r2, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 8004dea:	68c3      	ldr	r3, [r0, #12]
		if (!((1 << i) & gpios)) {
 8004dec:	9c03      	ldr	r4, [sp, #12]
 8004dee:	2501      	movs	r5, #1
 8004df0:	410c      	asrs	r4, r1
 8004df2:	422c      	tst	r4, r5
 8004df4:	d00a      	beq.n	8004e0c <gpio_mode_setup+0x32>
		moder &= ~GPIO_MODE_MASK(i);
 8004df6:	003d      	movs	r5, r7
 8004df8:	004c      	lsls	r4, r1, #1
 8004dfa:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8004dfc:	9e01      	ldr	r6, [sp, #4]
		moder &= ~GPIO_MODE_MASK(i);
 8004dfe:	43aa      	bics	r2, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 8004e00:	43ab      	bics	r3, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 8004e02:	9d02      	ldr	r5, [sp, #8]
		moder |= GPIO_MODE(i, mode);
 8004e04:	40a6      	lsls	r6, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 8004e06:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8004e08:	4332      	orrs	r2, r6
		pupd |= GPIO_PUPD(i, pull_up_down);
 8004e0a:	432b      	orrs	r3, r5
	for (i = 0; i < 16; i++) {
 8004e0c:	3101      	adds	r1, #1
 8004e0e:	2910      	cmp	r1, #16
 8004e10:	d1ec      	bne.n	8004dec <gpio_mode_setup+0x12>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 8004e12:	6002      	str	r2, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 8004e14:	60c3      	str	r3, [r0, #12]
}
 8004e16:	b005      	add	sp, #20
 8004e18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e1a <gpio_set_output_options>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_output_options(uint32_t gpioport, uint8_t otype, uint8_t speed,
			     uint16_t gpios)
{
 8004e1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e1c:	9201      	str	r2, [sp, #4]
	uint16_t i;
	uint32_t ospeedr;

	if (otype == 0x1) {
 8004e1e:	2901      	cmp	r1, #1
 8004e20:	d116      	bne.n	8004e50 <gpio_set_output_options+0x36>
		GPIO_OTYPER(gpioport) |= gpios;
 8004e22:	6841      	ldr	r1, [r0, #4]
 8004e24:	4319      	orrs	r1, r3
	} else {
		GPIO_OTYPER(gpioport) &= ~gpios;
	}

	ospeedr = GPIO_OSPEEDR(gpioport);
 8004e26:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8004e28:	2601      	movs	r6, #1
			continue;
		}
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8004e2a:	2703      	movs	r7, #3
		GPIO_OTYPER(gpioport) &= ~gpios;
 8004e2c:	6041      	str	r1, [r0, #4]
	ospeedr = GPIO_OSPEEDR(gpioport);
 8004e2e:	6881      	ldr	r1, [r0, #8]
		if (!((1 << i) & gpios)) {
 8004e30:	001d      	movs	r5, r3
 8004e32:	4125      	asrs	r5, r4
 8004e34:	4235      	tst	r5, r6
 8004e36:	d006      	beq.n	8004e46 <gpio_set_output_options+0x2c>
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8004e38:	003a      	movs	r2, r7
 8004e3a:	0065      	lsls	r5, r4, #1
 8004e3c:	40aa      	lsls	r2, r5
 8004e3e:	4391      	bics	r1, r2
		ospeedr |= GPIO_OSPEED(i, speed);
 8004e40:	9a01      	ldr	r2, [sp, #4]
 8004e42:	40aa      	lsls	r2, r5
 8004e44:	4311      	orrs	r1, r2
	for (i = 0; i < 16; i++) {
 8004e46:	3401      	adds	r4, #1
 8004e48:	2c10      	cmp	r4, #16
 8004e4a:	d1f1      	bne.n	8004e30 <gpio_set_output_options+0x16>
	}

	GPIO_OSPEEDR(gpioport) = ospeedr;
 8004e4c:	6081      	str	r1, [r0, #8]
}
 8004e4e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		GPIO_OTYPER(gpioport) &= ~gpios;
 8004e50:	6841      	ldr	r1, [r0, #4]
 8004e52:	4399      	bics	r1, r3
 8004e54:	e7e7      	b.n	8004e26 <gpio_set_output_options+0xc>

08004e56 <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 8004e56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);
 8004e58:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 8004e5a:	2601      	movs	r6, #1
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 8004e5c:	270f      	movs	r7, #15
	afrl = GPIO_AFRL(gpioport);
 8004e5e:	6a04      	ldr	r4, [r0, #32]
{
 8004e60:	9100      	str	r1, [sp, #0]
	afrh = GPIO_AFRH(gpioport);
 8004e62:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8004e64:	9201      	str	r2, [sp, #4]
		if (!((1 << i) & gpios)) {
 8004e66:	9d01      	ldr	r5, [sp, #4]
 8004e68:	411d      	asrs	r5, r3
 8004e6a:	4235      	tst	r5, r6
 8004e6c:	d006      	beq.n	8004e7c <gpio_set_af+0x26>
		afrl &= ~GPIO_AFR_MASK(i);
 8004e6e:	003a      	movs	r2, r7
 8004e70:	009d      	lsls	r5, r3, #2
 8004e72:	40aa      	lsls	r2, r5
 8004e74:	4394      	bics	r4, r2
		afrl |= GPIO_AFR(i, alt_func_num);
 8004e76:	9a00      	ldr	r2, [sp, #0]
 8004e78:	40aa      	lsls	r2, r5
 8004e7a:	4314      	orrs	r4, r2
	for (i = 0; i < 8; i++) {
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d1f1      	bne.n	8004e66 <gpio_set_af+0x10>
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8004e82:	2601      	movs	r6, #1
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8004e84:	270f      	movs	r7, #15
		if (!((1 << i) & gpios)) {
 8004e86:	9a01      	ldr	r2, [sp, #4]
 8004e88:	411a      	asrs	r2, r3
 8004e8a:	4232      	tst	r2, r6
 8004e8c:	d007      	beq.n	8004e9e <gpio_set_af+0x48>
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8004e8e:	003a      	movs	r2, r7
 8004e90:	009d      	lsls	r5, r3, #2
 8004e92:	3d20      	subs	r5, #32
 8004e94:	40aa      	lsls	r2, r5
 8004e96:	4391      	bics	r1, r2
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 8004e98:	9a00      	ldr	r2, [sp, #0]
 8004e9a:	40aa      	lsls	r2, r5
 8004e9c:	4311      	orrs	r1, r2
	for (i = 8; i < 16; i++) {
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	2b10      	cmp	r3, #16
 8004ea2:	d1f0      	bne.n	8004e86 <gpio_set_af+0x30>
	}

	GPIO_AFRL(gpioport) = afrl;
 8004ea4:	6204      	str	r4, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 8004ea6:	6241      	str	r1, [r0, #36]	; 0x24
}
 8004ea8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08004eaa <lptimer_get_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @returns Counter value.
 */
uint16_t lptimer_get_counter(uint32_t lptimer_peripheral)
{
	return LPTIM_CNT(lptimer_peripheral);
 8004eaa:	69c0      	ldr	r0, [r0, #28]
 8004eac:	b280      	uxth	r0, r0
}
 8004eae:	4770      	bx	lr

08004eb0 <lptimer_enable>:
 *
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 */
void lptimer_enable(uint32_t lptimer_peripheral)
{
	LPTIM_CR(lptimer_peripheral) |= LPTIM_CR_ENABLE;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	6902      	ldr	r2, [r0, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	6103      	str	r3, [r0, #16]
}
 8004eb8:	4770      	bx	lr

08004eba <lptimer_start_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] mode lptimer start mode (@ref LPTIM_CR_SNGSTRT or @ref LPTIM_CR_CNTSTRT)
 */
void lptimer_start_counter(uint32_t lptimer_peripheral, uint32_t mode)
{
	LPTIM_CR(lptimer_peripheral) |= mode;
 8004eba:	6903      	ldr	r3, [r0, #16]
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	6103      	str	r3, [r0, #16]
}
 8004ec0:	4770      	bx	lr
	...

08004ec4 <lptimer_set_prescaler>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] prescaler Clock prescaler (@ref lptim_cfgr_presc)
 */
void lptimer_set_prescaler(uint32_t lptimer_peripheral, uint32_t prescaler)
{
	uint32_t reg32 = LPTIM_CFGR(lptimer_peripheral);
 8004ec4:	68c3      	ldr	r3, [r0, #12]
	reg32 &= ~(LPTIM_CFGR_PRESC_MASK << LPTIM_CFGR_PRESC_SHIFT);
 8004ec6:	4a02      	ldr	r2, [pc, #8]	; (8004ed0 <lptimer_set_prescaler+0xc>)
 8004ec8:	4013      	ands	r3, r2
	LPTIM_CFGR(lptimer_peripheral) = reg32 | prescaler;
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	60c3      	str	r3, [r0, #12]
}
 8004ece:	4770      	bx	lr
 8004ed0:	fffff1ff 	.word	0xfffff1ff

08004ed4 <lptimer_enable_trigger>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] trigen Enable Trigger
 */
void lptimer_enable_trigger(uint32_t lptimer_peripheral, uint32_t trigen)
{
	uint32_t reg32 = LPTIM_CFGR(lptimer_peripheral);
 8004ed4:	68c3      	ldr	r3, [r0, #12]
	reg32 &= ~(LPTIM_CFGR_TRIGEN_MASK << LPTIM_CFGR_TRIGEN_SHIFT);
 8004ed6:	4a02      	ldr	r2, [pc, #8]	; (8004ee0 <lptimer_enable_trigger+0xc>)
 8004ed8:	4013      	ands	r3, r2
	LPTIM_CFGR(lptimer_peripheral) = reg32 | trigen;
 8004eda:	430b      	orrs	r3, r1
 8004edc:	60c3      	str	r3, [r0, #12]
}
 8004ede:	4770      	bx	lr
 8004ee0:	fff1ffff 	.word	0xfff1ffff

08004ee4 <lptimer_set_period>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] period_value Autoreload value. Must be greater that CMP value.
 */
void lptimer_set_period(uint32_t lptimer_peripheral, uint16_t period_value)
{
	LPTIM_ARR(lptimer_peripheral) = period_value;
 8004ee4:	6181      	str	r1, [r0, #24]
}
 8004ee6:	4770      	bx	lr

08004ee8 <lptimer_set_internal_clock_source>:
 *
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 */
void lptimer_set_internal_clock_source(uint32_t lptimer_peripheral)
{
	LPTIM_CFGR(lptimer_peripheral) &= ~LPTIM_CFGR_CKSEL;
 8004ee8:	2201      	movs	r2, #1
 8004eea:	68c3      	ldr	r3, [r0, #12]
 8004eec:	4393      	bics	r3, r2
 8004eee:	60c3      	str	r3, [r0, #12]
}
 8004ef0:	4770      	bx	lr
	...

08004ef4 <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 8004ef4:	2380      	movs	r3, #128	; 0x80
 8004ef6:	4a03      	ldr	r2, [pc, #12]	; (8004f04 <pwr_disable_backup_domain_write_protect+0x10>)
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	6811      	ldr	r1, [r2, #0]
 8004efc:	430b      	orrs	r3, r1
 8004efe:	6013      	str	r3, [r2, #0]
}
 8004f00:	4770      	bx	lr
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	40007000 	.word	0x40007000

08004f08 <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 8004f08:	4a02      	ldr	r2, [pc, #8]	; (8004f14 <pwr_enable_backup_domain_write_protect+0xc>)
 8004f0a:	4903      	ldr	r1, [pc, #12]	; (8004f18 <pwr_enable_backup_domain_write_protect+0x10>)
 8004f0c:	6813      	ldr	r3, [r2, #0]
 8004f0e:	400b      	ands	r3, r1
 8004f10:	6013      	str	r3, [r2, #0]
}
 8004f12:	4770      	bx	lr
 8004f14:	40007000 	.word	0x40007000
 8004f18:	fffffeff 	.word	0xfffffeff

08004f1c <pwr_clear_standby_flag>:
This is set when the processor returns from a standby mode.
*/

void pwr_clear_standby_flag(void)
{
	PWR_CR |= PWR_CR_CSBF;
 8004f1c:	2308      	movs	r3, #8
 8004f1e:	4a02      	ldr	r2, [pc, #8]	; (8004f28 <pwr_clear_standby_flag+0xc>)
 8004f20:	6811      	ldr	r1, [r2, #0]
 8004f22:	430b      	orrs	r3, r1
 8004f24:	6013      	str	r3, [r2, #0]
}
 8004f26:	4770      	bx	lr
 8004f28:	40007000 	.word	0x40007000

08004f2c <pwr_clear_wakeup_flag>:
This is set when the processor receives a wakeup signal.
*/

void pwr_clear_wakeup_flag(void)
{
	PWR_CR |= PWR_CR_CWUF;
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	4a02      	ldr	r2, [pc, #8]	; (8004f38 <pwr_clear_wakeup_flag+0xc>)
 8004f30:	6811      	ldr	r1, [r2, #0]
 8004f32:	430b      	orrs	r3, r1
 8004f34:	6013      	str	r3, [r2, #0]
}
 8004f36:	4770      	bx	lr
 8004f38:	40007000 	.word	0x40007000

08004f3c <rcc_osc_on>:
uint32_t rcc_ahb_frequency = 2097000;
uint32_t rcc_apb1_frequency = 2097000;
uint32_t rcc_apb2_frequency = 2097000;

void rcc_osc_on(enum rcc_osc osc)
{
 8004f3c:	b500      	push	{lr}
 8004f3e:	2806      	cmp	r0, #6
 8004f40:	d80b      	bhi.n	8004f5a <rcc_osc_on+0x1e>
 8004f42:	f000 fa5b 	bl	80053fc <__gnu_thumb1_case_uqi>
 8004f46:	1004      	.short	0x1004
 8004f48:	1b0b1915 	.word	0x1b0b1915
 8004f4c:	1d          	.byte	0x1d
 8004f4d:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 8004f4e:	2380      	movs	r3, #128	; 0x80
 8004f50:	4a0c      	ldr	r2, [pc, #48]	; (8004f84 <rcc_osc_on+0x48>)
 8004f52:	045b      	lsls	r3, r3, #17
 8004f54:	6811      	ldr	r1, [r2, #0]
		break;
	case RCC_LSE:
		RCC_CSR |= RCC_CSR_LSEON;
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
 8004f56:	430b      	orrs	r3, r1
 8004f58:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8004f5a:	bd00      	pop	{pc}
		RCC_CR |= RCC_CR_MSION;
 8004f5c:	4a09      	ldr	r2, [pc, #36]	; (8004f84 <rcc_osc_on+0x48>)
		RCC_CSR |= RCC_CSR_LSEON;
 8004f5e:	2380      	movs	r3, #128	; 0x80
 8004f60:	6811      	ldr	r1, [r2, #0]
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	e7f7      	b.n	8004f56 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSEON;
 8004f66:	2380      	movs	r3, #128	; 0x80
 8004f68:	4a06      	ldr	r2, [pc, #24]	; (8004f84 <rcc_osc_on+0x48>)
 8004f6a:	025b      	lsls	r3, r3, #9
 8004f6c:	6811      	ldr	r1, [r2, #0]
 8004f6e:	e7f2      	b.n	8004f56 <rcc_osc_on+0x1a>
		RCC_CRRCR |= RCC_CRRCR_HSI48ON;
 8004f70:	4a05      	ldr	r2, [pc, #20]	; (8004f88 <rcc_osc_on+0x4c>)
		RCC_CSR |= RCC_CSR_LSION;
 8004f72:	2301      	movs	r3, #1
 8004f74:	6811      	ldr	r1, [r2, #0]
 8004f76:	e7ee      	b.n	8004f56 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSI16ON;
 8004f78:	4a02      	ldr	r2, [pc, #8]	; (8004f84 <rcc_osc_on+0x48>)
 8004f7a:	e7fa      	b.n	8004f72 <rcc_osc_on+0x36>
		RCC_CSR |= RCC_CSR_LSEON;
 8004f7c:	4a03      	ldr	r2, [pc, #12]	; (8004f8c <rcc_osc_on+0x50>)
 8004f7e:	e7ee      	b.n	8004f5e <rcc_osc_on+0x22>
		RCC_CSR |= RCC_CSR_LSION;
 8004f80:	4a02      	ldr	r2, [pc, #8]	; (8004f8c <rcc_osc_on+0x50>)
 8004f82:	e7f6      	b.n	8004f72 <rcc_osc_on+0x36>
 8004f84:	40021000 	.word	0x40021000
 8004f88:	40021008 	.word	0x40021008
 8004f8c:	40021050 	.word	0x40021050

08004f90 <rcc_is_osc_ready>:
	cm3_assert_not_reached();
}


bool rcc_is_osc_ready(enum rcc_osc osc)
{
 8004f90:	2300      	movs	r3, #0
 8004f92:	b500      	push	{lr}
 8004f94:	2806      	cmp	r0, #6
 8004f96:	d80a      	bhi.n	8004fae <rcc_is_osc_ready+0x1e>
 8004f98:	3301      	adds	r3, #1
 8004f9a:	f000 fa2f 	bl	80053fc <__gnu_thumb1_case_uqi>
 8004f9e:	0a04      	.short	0x0a04
 8004fa0:	1a160e12 	.word	0x1a160e12
 8004fa4:	1c          	.byte	0x1c
 8004fa5:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 8004fa6:	4a0d      	ldr	r2, [pc, #52]	; (8004fdc <rcc_is_osc_ready+0x4c>)
 8004fa8:	6810      	ldr	r0, [r2, #0]
 8004faa:	0e40      	lsrs	r0, r0, #25
	case RCC_MSI:
		return RCC_CR & RCC_CR_MSIRDY;
	case RCC_LSE:
		return RCC_CSR & RCC_CSR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 8004fac:	4003      	ands	r3, r0
	}
	return false;
}
 8004fae:	0018      	movs	r0, r3
 8004fb0:	bd00      	pop	{pc}
		return RCC_CR & RCC_CR_HSERDY;
 8004fb2:	4a0a      	ldr	r2, [pc, #40]	; (8004fdc <rcc_is_osc_ready+0x4c>)
 8004fb4:	6810      	ldr	r0, [r2, #0]
 8004fb6:	0c40      	lsrs	r0, r0, #17
 8004fb8:	e7f8      	b.n	8004fac <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_HSI16RDY;
 8004fba:	4a08      	ldr	r2, [pc, #32]	; (8004fdc <rcc_is_osc_ready+0x4c>)
 8004fbc:	6810      	ldr	r0, [r2, #0]
 8004fbe:	0880      	lsrs	r0, r0, #2
 8004fc0:	e7f4      	b.n	8004fac <rcc_is_osc_ready+0x1c>
		return RCC_CRRCR & RCC_CRRCR_HSI48RDY;
 8004fc2:	4a07      	ldr	r2, [pc, #28]	; (8004fe0 <rcc_is_osc_ready+0x50>)
		return RCC_CSR & RCC_CSR_LSIRDY;
 8004fc4:	6810      	ldr	r0, [r2, #0]
 8004fc6:	0840      	lsrs	r0, r0, #1
 8004fc8:	e7f0      	b.n	8004fac <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_MSIRDY;
 8004fca:	4a04      	ldr	r2, [pc, #16]	; (8004fdc <rcc_is_osc_ready+0x4c>)
		return RCC_CSR & RCC_CSR_LSERDY;
 8004fcc:	6810      	ldr	r0, [r2, #0]
 8004fce:	0a40      	lsrs	r0, r0, #9
 8004fd0:	e7ec      	b.n	8004fac <rcc_is_osc_ready+0x1c>
 8004fd2:	4a04      	ldr	r2, [pc, #16]	; (8004fe4 <rcc_is_osc_ready+0x54>)
 8004fd4:	e7fa      	b.n	8004fcc <rcc_is_osc_ready+0x3c>
		return RCC_CSR & RCC_CSR_LSIRDY;
 8004fd6:	4a03      	ldr	r2, [pc, #12]	; (8004fe4 <rcc_is_osc_ready+0x54>)
 8004fd8:	e7f4      	b.n	8004fc4 <rcc_is_osc_ready+0x34>
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	40021008 	.word	0x40021008
 8004fe4:	40021050 	.word	0x40021050

08004fe8 <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 8004fe8:	b510      	push	{r4, lr}
 8004fea:	0004      	movs	r4, r0
	while (!rcc_is_osc_ready(osc));
 8004fec:	0020      	movs	r0, r4
 8004fee:	f7ff ffcf 	bl	8004f90 <rcc_is_osc_ready>
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	d0fa      	beq.n	8004fec <rcc_wait_for_osc_ready+0x4>
}
 8004ff6:	bd10      	pop	{r4, pc}

08004ff8 <rcc_set_ppre1>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb1pre
 */

void rcc_set_ppre1(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8004ff8:	4a03      	ldr	r2, [pc, #12]	; (8005008 <rcc_set_ppre1+0x10>)
 8004ffa:	4904      	ldr	r1, [pc, #16]	; (800500c <rcc_set_ppre1+0x14>)
 8004ffc:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE1_MASK << RCC_CFGR_PPRE1_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8004ffe:	0200      	lsls	r0, r0, #8
	uint32_t reg = RCC_CFGR
 8005000:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8005002:	4318      	orrs	r0, r3
 8005004:	6010      	str	r0, [r2, #0]
}
 8005006:	4770      	bx	lr
 8005008:	4002100c 	.word	0x4002100c
 800500c:	fffff8ff 	.word	0xfffff8ff

08005010 <rcc_set_ppre2>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb2pre
 */

void rcc_set_ppre2(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8005010:	4a03      	ldr	r2, [pc, #12]	; (8005020 <rcc_set_ppre2+0x10>)
 8005012:	4904      	ldr	r1, [pc, #16]	; (8005024 <rcc_set_ppre2+0x14>)
 8005014:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE2_MASK << RCC_CFGR_PPRE2_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8005016:	02c0      	lsls	r0, r0, #11
	uint32_t reg = RCC_CFGR
 8005018:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 800501a:	4318      	orrs	r0, r3
 800501c:	6010      	str	r0, [r2, #0]
}
 800501e:	4770      	bx	lr
 8005020:	4002100c 	.word	0x4002100c
 8005024:	ffffc7ff 	.word	0xffffc7ff

08005028 <rcc_set_hpre>:
 * @param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
 */

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8005028:	21f0      	movs	r1, #240	; 0xf0
 800502a:	4a03      	ldr	r2, [pc, #12]	; (8005038 <rcc_set_hpre+0x10>)
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 800502c:	0100      	lsls	r0, r0, #4
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 800502e:	6813      	ldr	r3, [r2, #0]
 8005030:	438b      	bics	r3, r1
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8005032:	4318      	orrs	r0, r3
 8005034:	6010      	str	r0, [r2, #0]
}
 8005036:	4770      	bx	lr
 8005038:	4002100c 	.word	0x4002100c

0800503c <rcc_set_msi_range>:
*
 * @param msi_range desired range @ref rcc_icscr_msirange
 */
void rcc_set_msi_range(uint32_t msi_range)
{
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 800503c:	4a03      	ldr	r2, [pc, #12]	; (800504c <rcc_set_msi_range+0x10>)
 800503e:	4904      	ldr	r1, [pc, #16]	; (8005050 <rcc_set_msi_range+0x14>)
 8005040:	6813      	ldr	r3, [r2, #0]
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8005042:	0340      	lsls	r0, r0, #13
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8005044:	400b      	ands	r3, r1
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8005046:	4318      	orrs	r0, r3
 8005048:	6010      	str	r0, [r2, #0]
}
 800504a:	4770      	bx	lr
 800504c:	40021004 	.word	0x40021004
 8005050:	ffff1fff 	.word	0xffff1fff

08005054 <rcc_set_peripheral_clk_sel>:
void rcc_set_peripheral_clk_sel(uint32_t periph, uint32_t sel)
{
	uint8_t shift;
	uint32_t mask;

	switch (periph) {
 8005054:	4b13      	ldr	r3, [pc, #76]	; (80050a4 <rcc_set_peripheral_clk_sel+0x50>)
{
 8005056:	000a      	movs	r2, r1
 8005058:	b510      	push	{r4, lr}
	switch (periph) {
 800505a:	4298      	cmp	r0, r3
 800505c:	d01c      	beq.n	8005098 <rcc_set_peripheral_clk_sel+0x44>
 800505e:	d80b      	bhi.n	8005078 <rcc_set_peripheral_clk_sel+0x24>
 8005060:	4b11      	ldr	r3, [pc, #68]	; (80050a8 <rcc_set_peripheral_clk_sel+0x54>)
 8005062:	4298      	cmp	r0, r3
 8005064:	d01a      	beq.n	800509c <rcc_set_peripheral_clk_sel+0x48>
 8005066:	4911      	ldr	r1, [pc, #68]	; (80050ac <rcc_set_peripheral_clk_sel+0x58>)
			shift = RCC_CCIPR_I2C3SEL_SHIFT;
			mask = RCC_CCIPR_I2C3SEL_MASK;
			break;

		case I2C1_BASE:
			shift = RCC_CCIPR_I2C1SEL_SHIFT;
 8005068:	230c      	movs	r3, #12
	switch (periph) {
 800506a:	4288      	cmp	r0, r1
 800506c:	d00b      	beq.n	8005086 <rcc_set_peripheral_clk_sel+0x32>
 800506e:	4910      	ldr	r1, [pc, #64]	; (80050b0 <rcc_set_peripheral_clk_sel+0x5c>)
			shift = RCC_CCIPR_LPUART1SEL_SHIFT;
			mask = RCC_CCIPR_LPUART1SEL_MASK;
			break;

		case USART2_BASE:
			shift = RCC_CCIPR_USART2SEL_SHIFT;
 8005070:	3b0a      	subs	r3, #10
	switch (periph) {
 8005072:	4288      	cmp	r0, r1
 8005074:	d007      	beq.n	8005086 <rcc_set_peripheral_clk_sel+0x32>
			return;
	}

	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
	RCC_CCIPR = reg32 | (sel << shift);
}
 8005076:	bd10      	pop	{r4, pc}
	switch (periph) {
 8005078:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <rcc_set_peripheral_clk_sel+0x60>)
 800507a:	4298      	cmp	r0, r3
 800507c:	d010      	beq.n	80050a0 <rcc_set_peripheral_clk_sel+0x4c>
 800507e:	4b0e      	ldr	r3, [pc, #56]	; (80050b8 <rcc_set_peripheral_clk_sel+0x64>)
 8005080:	4298      	cmp	r0, r3
 8005082:	d1f8      	bne.n	8005076 <rcc_set_peripheral_clk_sel+0x22>
			shift = RCC_CCIPR_USART1SEL_SHIFT;
 8005084:	2300      	movs	r3, #0
	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
 8005086:	2003      	movs	r0, #3
 8005088:	4098      	lsls	r0, r3
	RCC_CCIPR = reg32 | (sel << shift);
 800508a:	409a      	lsls	r2, r3
	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
 800508c:	4c0b      	ldr	r4, [pc, #44]	; (80050bc <rcc_set_peripheral_clk_sel+0x68>)
 800508e:	6821      	ldr	r1, [r4, #0]
 8005090:	4381      	bics	r1, r0
	RCC_CCIPR = reg32 | (sel << shift);
 8005092:	4311      	orrs	r1, r2
 8005094:	6021      	str	r1, [r4, #0]
 8005096:	e7ee      	b.n	8005076 <rcc_set_peripheral_clk_sel+0x22>
	switch (periph) {
 8005098:	2310      	movs	r3, #16
 800509a:	e7f4      	b.n	8005086 <rcc_set_peripheral_clk_sel+0x32>
			shift = RCC_CCIPR_LPUART1SEL_SHIFT;
 800509c:	230a      	movs	r3, #10
 800509e:	e7f2      	b.n	8005086 <rcc_set_peripheral_clk_sel+0x32>
			shift = RCC_CCIPR_LPTIM1SEL_SHIFT;
 80050a0:	2312      	movs	r3, #18
 80050a2:	e7f0      	b.n	8005086 <rcc_set_peripheral_clk_sel+0x32>
 80050a4:	40007800 	.word	0x40007800
 80050a8:	40004800 	.word	0x40004800
 80050ac:	40005400 	.word	0x40005400
 80050b0:	40004400 	.word	0x40004400
 80050b4:	40007c00 	.word	0x40007c00
 80050b8:	40013800 	.word	0x40013800
 80050bc:	4002104c 	.word	0x4002104c

080050c0 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 80050c0:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <rcc_periph_clock_enable+0x18>)
 80050c2:	0942      	lsrs	r2, r0, #5
 80050c4:	18d2      	adds	r2, r2, r3
 80050c6:	231f      	movs	r3, #31
 80050c8:	4018      	ands	r0, r3
 80050ca:	3b1e      	subs	r3, #30
 80050cc:	4083      	lsls	r3, r0
 80050ce:	6811      	ldr	r1, [r2, #0]
 80050d0:	430b      	orrs	r3, r1
 80050d2:	6013      	str	r3, [r2, #0]
}
 80050d4:	4770      	bx	lr
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	40021000 	.word	0x40021000

080050dc <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 80050dc:	4a06      	ldr	r2, [pc, #24]	; (80050f8 <rcc_periph_reset_pulse+0x1c>)
 80050de:	0943      	lsrs	r3, r0, #5
 80050e0:	189b      	adds	r3, r3, r2
 80050e2:	221f      	movs	r2, #31
 80050e4:	4010      	ands	r0, r2
 80050e6:	3a1e      	subs	r2, #30
 80050e8:	4082      	lsls	r2, r0
 80050ea:	6819      	ldr	r1, [r3, #0]
 80050ec:	4311      	orrs	r1, r2
 80050ee:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 80050f0:	6819      	ldr	r1, [r3, #0]
 80050f2:	4391      	bics	r1, r2
 80050f4:	6019      	str	r1, [r3, #0]
}
 80050f6:	4770      	bx	lr
 80050f8:	40021000 	.word	0x40021000

080050fc <rtc_unlock>:
/** @brief Unlock write access to the RTC registers

*/
void rtc_unlock(void)
{
	RTC_WPR = 0xca;
 80050fc:	22ca      	movs	r2, #202	; 0xca
 80050fe:	4b02      	ldr	r3, [pc, #8]	; (8005108 <rtc_unlock+0xc>)
 8005100:	601a      	str	r2, [r3, #0]
	RTC_WPR = 0x53;
 8005102:	3a77      	subs	r2, #119	; 0x77
 8005104:	601a      	str	r2, [r3, #0]
}
 8005106:	4770      	bx	lr
 8005108:	40002824 	.word	0x40002824

0800510c <rtc_lock>:
/** @brief Lock write access to the RTC registers

*/
void rtc_lock(void)
{
	RTC_WPR = 0xff;
 800510c:	22ff      	movs	r2, #255	; 0xff
 800510e:	4b01      	ldr	r3, [pc, #4]	; (8005114 <rtc_lock+0x8>)
 8005110:	601a      	str	r2, [r3, #0]
}
 8005112:	4770      	bx	lr
 8005114:	40002824 	.word	0x40002824

08005118 <rtc_clear_wakeup_flag>:

@details This function should be called first in the rtc_wkup_isr()
*/
void rtc_clear_wakeup_flag(void)
{
	RTC_ISR &= ~RTC_ISR_WUTF;
 8005118:	4a02      	ldr	r2, [pc, #8]	; (8005124 <rtc_clear_wakeup_flag+0xc>)
 800511a:	4903      	ldr	r1, [pc, #12]	; (8005128 <rtc_clear_wakeup_flag+0x10>)
 800511c:	6813      	ldr	r3, [r2, #0]
 800511e:	400b      	ands	r3, r1
 8005120:	6013      	str	r3, [r2, #0]
}
 8005122:	4770      	bx	lr
 8005124:	4000280c 	.word	0x4000280c
 8005128:	fffffbff 	.word	0xfffffbff

0800512c <spi_xfer>:
uint16_t spi_xfer(uint32_t spi, uint16_t data)
{
	spi_write(spi, data);

	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 800512c:	2301      	movs	r3, #1
	SPI_DR(spi) = data;
 800512e:	60c1      	str	r1, [r0, #12]
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8005130:	6882      	ldr	r2, [r0, #8]
 8005132:	421a      	tst	r2, r3
 8005134:	d0fc      	beq.n	8005130 <spi_xfer+0x4>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 8005136:	68c0      	ldr	r0, [r0, #12]
 8005138:	b280      	uxth	r0, r0
}
 800513a:	4770      	bx	lr

0800513c <timer_enable_counter>:
tim_reg_base
*/

void timer_enable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_CEN;
 800513c:	2301      	movs	r3, #1
 800513e:	6802      	ldr	r2, [r0, #0]
 8005140:	4313      	orrs	r3, r2
 8005142:	6003      	str	r3, [r0, #0]
}
 8005144:	4770      	bx	lr

08005146 <timer_disable_counter>:
tim_reg_base
*/

void timer_disable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_CEN;
 8005146:	2201      	movs	r2, #1
 8005148:	6803      	ldr	r3, [r0, #0]
 800514a:	4393      	bics	r3, r2
 800514c:	6003      	str	r3, [r0, #0]
}
 800514e:	4770      	bx	lr

08005150 <timer_set_prescaler>:
@param[in] value Unsigned int32. Prescaler values 0...0xFFFF.
*/

void timer_set_prescaler(uint32_t timer_peripheral, uint32_t value)
{
	TIM_PSC(timer_peripheral) = value;
 8005150:	6281      	str	r1, [r0, #40]	; 0x28
}
 8005152:	4770      	bx	lr

08005154 <timer_get_counter>:
@returns Unsigned int32. Counter value.
*/

uint32_t timer_get_counter(uint32_t timer_peripheral)
{
	return TIM_CNT(timer_peripheral);
 8005154:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8005156:	4770      	bx	lr

08005158 <usart_set_baudrate>:
void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;

#if defined USART1
	if ((usart == USART1)
 8005158:	4b10      	ldr	r3, [pc, #64]	; (800519c <usart_set_baudrate+0x44>)
{
 800515a:	b570      	push	{r4, r5, r6, lr}
 800515c:	0005      	movs	r5, r0
 800515e:	000c      	movs	r4, r1
 8005160:	084e      	lsrs	r6, r1, #1
	if ((usart == USART1)
 8005162:	4298      	cmp	r0, r3
 8005164:	d107      	bne.n	8005176 <usart_set_baudrate+0x1e>
#if defined USART6
		|| (usart == USART6)
#endif
		) {
		clock = rcc_apb2_frequency;
 8005166:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <usart_set_baudrate+0x48>)
 8005168:	6818      	ldr	r0, [r3, #0]
			+ ((clock % baud) * 256 + baud / 2) / baud;
		return;
	}
#endif

	USART_BRR(usart) = (clock + baud / 2) / baud;
 800516a:	0021      	movs	r1, r4
 800516c:	1830      	adds	r0, r6, r0
 800516e:	f000 f94f 	bl	8005410 <__udivsi3>
 8005172:	60e8      	str	r0, [r5, #12]
 8005174:	e010      	b.n	8005198 <usart_set_baudrate+0x40>
	uint32_t clock = rcc_apb1_frequency;
 8005176:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <usart_set_baudrate+0x4c>)
 8005178:	6818      	ldr	r0, [r3, #0]
	if (usart == LPUART1) {
 800517a:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <usart_set_baudrate+0x50>)
 800517c:	429d      	cmp	r5, r3
 800517e:	d1f4      	bne.n	800516a <usart_set_baudrate+0x12>
		USART_BRR(usart) = (clock / baud) * 256
 8005180:	f000 f9cc 	bl	800551c <__aeabi_uidivmod>
 8005184:	0005      	movs	r5, r0
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8005186:	0208      	lsls	r0, r1, #8
 8005188:	1980      	adds	r0, r0, r6
 800518a:	0021      	movs	r1, r4
 800518c:	f000 f940 	bl	8005410 <__udivsi3>
		USART_BRR(usart) = (clock / baud) * 256
 8005190:	022d      	lsls	r5, r5, #8
 8005192:	4b06      	ldr	r3, [pc, #24]	; (80051ac <usart_set_baudrate+0x54>)
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8005194:	1940      	adds	r0, r0, r5
		USART_BRR(usart) = (clock / baud) * 256
 8005196:	6018      	str	r0, [r3, #0]
}
 8005198:	bd70      	pop	{r4, r5, r6, pc}
 800519a:	46c0      	nop			; (mov r8, r8)
 800519c:	40013800 	.word	0x40013800
 80051a0:	2000009c 	.word	0x2000009c
 80051a4:	20000098 	.word	0x20000098
 80051a8:	40004800 	.word	0x40004800
 80051ac:	4000480c 	.word	0x4000480c

080051b0 <usart_set_databits>:
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
 80051b0:	2908      	cmp	r1, #8
 80051b2:	d104      	bne.n	80051be <usart_set_databits+0xe>
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 80051b4:	6803      	ldr	r3, [r0, #0]
 80051b6:	4a04      	ldr	r2, [pc, #16]	; (80051c8 <usart_set_databits+0x18>)
 80051b8:	4013      	ands	r3, r2
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 80051ba:	6003      	str	r3, [r0, #0]
	}
}
 80051bc:	4770      	bx	lr
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 80051be:	2380      	movs	r3, #128	; 0x80
 80051c0:	6802      	ldr	r2, [r0, #0]
 80051c2:	015b      	lsls	r3, r3, #5
 80051c4:	4313      	orrs	r3, r2
 80051c6:	e7f8      	b.n	80051ba <usart_set_databits+0xa>
 80051c8:	ffffefff 	.word	0xffffefff

080051cc <usart_set_stopbits>:

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 80051cc:	6843      	ldr	r3, [r0, #4]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 80051ce:	4a02      	ldr	r2, [pc, #8]	; (80051d8 <usart_set_stopbits+0xc>)
 80051d0:	4013      	ands	r3, r2
 80051d2:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 80051d4:	6043      	str	r3, [r0, #4]
}
 80051d6:	4770      	bx	lr
 80051d8:	ffffcfff 	.word	0xffffcfff

080051dc <usart_set_parity>:

void usart_set_parity(uint32_t usart, uint32_t parity)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 80051dc:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 80051de:	4a02      	ldr	r2, [pc, #8]	; (80051e8 <usart_set_parity+0xc>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 80051e4:	6003      	str	r3, [r0, #0]
}
 80051e6:	4770      	bx	lr
 80051e8:	fffff9ff 	.word	0xfffff9ff

080051ec <usart_set_mode>:
void usart_set_mode(uint32_t usart, uint32_t mode)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 80051ec:	220c      	movs	r2, #12
	reg32 = USART_CR1(usart);
 80051ee:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 80051f0:	4393      	bics	r3, r2
 80051f2:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 80051f4:	6003      	str	r3, [r0, #0]
}
 80051f6:	4770      	bx	lr

080051f8 <usart_set_flow_control>:

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 80051f8:	6883      	ldr	r3, [r0, #8]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 80051fa:	4a02      	ldr	r2, [pc, #8]	; (8005204 <usart_set_flow_control+0xc>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 8005200:	6083      	str	r3, [r0, #8]
}
 8005202:	4770      	bx	lr
 8005204:	fffffcff 	.word	0xfffffcff

08005208 <usart_enable>:
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 8005208:	2301      	movs	r3, #1
 800520a:	6802      	ldr	r2, [r0, #0]
 800520c:	4313      	orrs	r3, r2
 800520e:	6003      	str	r3, [r0, #0]
}
 8005210:	4770      	bx	lr

08005212 <usart_disable>:
usart_reg_base
*/

void usart_disable(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_UE;
 8005212:	2201      	movs	r2, #1
 8005214:	6803      	ldr	r3, [r0, #0]
 8005216:	4393      	bics	r3, r2
 8005218:	6003      	str	r3, [r0, #0]
}
 800521a:	4770      	bx	lr

0800521c <usart_send_blocking>:
usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(uint32_t usart, uint16_t data)
{
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	000d      	movs	r5, r1
 8005220:	0004      	movs	r4, r0
	usart_wait_send_ready(usart);
 8005222:	f000 f80d 	bl	8005240 <usart_wait_send_ready>
	usart_send(usart, data);
 8005226:	0029      	movs	r1, r5
 8005228:	0020      	movs	r0, r4
 800522a:	f000 f801 	bl	8005230 <usart_send>
}
 800522e:	bd70      	pop	{r4, r5, r6, pc}

08005230 <usart_send>:
 */

void usart_send(uint32_t usart, uint16_t data)
{
	/* Send data. */
	USART_TDR(usart) = (data & USART_TDR_MASK);
 8005230:	05c9      	lsls	r1, r1, #23
 8005232:	0dc9      	lsrs	r1, r1, #23
 8005234:	6281      	str	r1, [r0, #40]	; 0x28
}
 8005236:	4770      	bx	lr

08005238 <usart_recv>:
 */

uint16_t usart_recv(uint32_t usart)
{
	/* Receive data. */
	return USART_RDR(usart) & USART_RDR_MASK;
 8005238:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800523a:	05c0      	lsls	r0, r0, #23
 800523c:	0dc0      	lsrs	r0, r0, #23
}
 800523e:	4770      	bx	lr

08005240 <usart_wait_send_ready>:
 */

void usart_wait_send_ready(uint32_t usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_ISR(usart) & USART_ISR_TXE) == 0);
 8005240:	2380      	movs	r3, #128	; 0x80
 8005242:	69c2      	ldr	r2, [r0, #28]
 8005244:	421a      	tst	r2, r3
 8005246:	d0fc      	beq.n	8005242 <usart_wait_send_ready+0x2>
}
 8005248:	4770      	bx	lr

0800524a <usart_get_flag>:
 * @returns boolean: flag set.
 */

bool usart_get_flag(uint32_t usart, uint32_t flag)
{
	return ((USART_ISR(usart) & flag) != 0);
 800524a:	69c0      	ldr	r0, [r0, #28]
 800524c:	4008      	ands	r0, r1
 800524e:	1e41      	subs	r1, r0, #1
 8005250:	4188      	sbcs	r0, r1
 8005252:	b2c0      	uxtb	r0, r0
}
 8005254:	4770      	bx	lr

08005256 <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 8005256:	e7fe      	b.n	8005256 <blocking_handler>

08005258 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 8005258:	4770      	bx	lr
	...

0800525c <reset_handler>:
{
 800525c:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 800525e:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <reset_handler+0x5c>)
 8005260:	4a16      	ldr	r2, [pc, #88]	; (80052bc <reset_handler+0x60>)
 8005262:	4917      	ldr	r1, [pc, #92]	; (80052c0 <reset_handler+0x64>)
 8005264:	428b      	cmp	r3, r1
 8005266:	d318      	bcc.n	800529a <reset_handler+0x3e>
		*dest++ = 0;
 8005268:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 800526a:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <reset_handler+0x68>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d317      	bcc.n	80052a0 <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 8005270:	2380      	movs	r3, #128	; 0x80
 8005272:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <reset_handler+0x6c>)
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8005278:	4c14      	ldr	r4, [pc, #80]	; (80052cc <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 800527a:	430b      	orrs	r3, r1
 800527c:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 800527e:	4b14      	ldr	r3, [pc, #80]	; (80052d0 <reset_handler+0x74>)
 8005280:	429c      	cmp	r4, r3
 8005282:	d30f      	bcc.n	80052a4 <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8005284:	4c13      	ldr	r4, [pc, #76]	; (80052d4 <reset_handler+0x78>)
 8005286:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <reset_handler+0x7c>)
 8005288:	429c      	cmp	r4, r3
 800528a:	d30e      	bcc.n	80052aa <reset_handler+0x4e>
	(void)main();
 800528c:	f7fe ff18 	bl	80040c0 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8005290:	4c12      	ldr	r4, [pc, #72]	; (80052dc <reset_handler+0x80>)
 8005292:	4b13      	ldr	r3, [pc, #76]	; (80052e0 <reset_handler+0x84>)
 8005294:	429c      	cmp	r4, r3
 8005296:	d30b      	bcc.n	80052b0 <reset_handler+0x54>
}
 8005298:	bd10      	pop	{r4, pc}
		*dest = *src;
 800529a:	ca01      	ldmia	r2!, {r0}
 800529c:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 800529e:	e7e1      	b.n	8005264 <reset_handler+0x8>
		*dest++ = 0;
 80052a0:	c302      	stmia	r3!, {r1}
 80052a2:	e7e3      	b.n	800526c <reset_handler+0x10>
		(*fp)();
 80052a4:	cc08      	ldmia	r4!, {r3}
 80052a6:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 80052a8:	e7e9      	b.n	800527e <reset_handler+0x22>
		(*fp)();
 80052aa:	cc08      	ldmia	r4!, {r3}
 80052ac:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 80052ae:	e7ea      	b.n	8005286 <reset_handler+0x2a>
		(*fp)();
 80052b0:	cc08      	ldmia	r4!, {r3}
 80052b2:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 80052b4:	e7ed      	b.n	8005292 <reset_handler+0x36>
 80052b6:	46c0      	nop			; (mov r8, r8)
 80052b8:	20000000 	.word	0x20000000
 80052bc:	08005848 	.word	0x08005848
 80052c0:	20000104 	.word	0x20000104
 80052c4:	200003c0 	.word	0x200003c0
 80052c8:	e000ed14 	.word	0xe000ed14
 80052cc:	08005848 	.word	0x08005848
 80052d0:	08005848 	.word	0x08005848
 80052d4:	08005848 	.word	0x08005848
 80052d8:	08005848 	.word	0x08005848
 80052dc:	08005848 	.word	0x08005848
 80052e0:	08005848 	.word	0x08005848

080052e4 <malloc>:
 80052e4:	b510      	push	{r4, lr}
 80052e6:	4b03      	ldr	r3, [pc, #12]	; (80052f4 <malloc+0x10>)
 80052e8:	0001      	movs	r1, r0
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	f000 f804 	bl	80052f8 <_malloc_r>
 80052f0:	bd10      	pop	{r4, pc}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	200000a0 	.word	0x200000a0

080052f8 <_malloc_r>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	2303      	movs	r3, #3
 80052fc:	1ccd      	adds	r5, r1, #3
 80052fe:	439d      	bics	r5, r3
 8005300:	3508      	adds	r5, #8
 8005302:	0006      	movs	r6, r0
 8005304:	2d0c      	cmp	r5, #12
 8005306:	d21f      	bcs.n	8005348 <_malloc_r+0x50>
 8005308:	250c      	movs	r5, #12
 800530a:	42a9      	cmp	r1, r5
 800530c:	d81e      	bhi.n	800534c <_malloc_r+0x54>
 800530e:	0030      	movs	r0, r6
 8005310:	f000 f862 	bl	80053d8 <__malloc_lock>
 8005314:	4925      	ldr	r1, [pc, #148]	; (80053ac <_malloc_r+0xb4>)
 8005316:	680a      	ldr	r2, [r1, #0]
 8005318:	0014      	movs	r4, r2
 800531a:	2c00      	cmp	r4, #0
 800531c:	d11a      	bne.n	8005354 <_malloc_r+0x5c>
 800531e:	4f24      	ldr	r7, [pc, #144]	; (80053b0 <_malloc_r+0xb8>)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d104      	bne.n	8005330 <_malloc_r+0x38>
 8005326:	0021      	movs	r1, r4
 8005328:	0030      	movs	r0, r6
 800532a:	f000 f843 	bl	80053b4 <_sbrk_r>
 800532e:	6038      	str	r0, [r7, #0]
 8005330:	0029      	movs	r1, r5
 8005332:	0030      	movs	r0, r6
 8005334:	f000 f83e 	bl	80053b4 <_sbrk_r>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d12b      	bne.n	8005394 <_malloc_r+0x9c>
 800533c:	230c      	movs	r3, #12
 800533e:	0030      	movs	r0, r6
 8005340:	6033      	str	r3, [r6, #0]
 8005342:	f000 f851 	bl	80053e8 <__malloc_unlock>
 8005346:	e003      	b.n	8005350 <_malloc_r+0x58>
 8005348:	2d00      	cmp	r5, #0
 800534a:	dade      	bge.n	800530a <_malloc_r+0x12>
 800534c:	230c      	movs	r3, #12
 800534e:	6033      	str	r3, [r6, #0]
 8005350:	2000      	movs	r0, #0
 8005352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	1b5b      	subs	r3, r3, r5
 8005358:	d419      	bmi.n	800538e <_malloc_r+0x96>
 800535a:	2b0b      	cmp	r3, #11
 800535c:	d903      	bls.n	8005366 <_malloc_r+0x6e>
 800535e:	6023      	str	r3, [r4, #0]
 8005360:	18e4      	adds	r4, r4, r3
 8005362:	6025      	str	r5, [r4, #0]
 8005364:	e003      	b.n	800536e <_malloc_r+0x76>
 8005366:	6863      	ldr	r3, [r4, #4]
 8005368:	42a2      	cmp	r2, r4
 800536a:	d10e      	bne.n	800538a <_malloc_r+0x92>
 800536c:	600b      	str	r3, [r1, #0]
 800536e:	0030      	movs	r0, r6
 8005370:	f000 f83a 	bl	80053e8 <__malloc_unlock>
 8005374:	0020      	movs	r0, r4
 8005376:	2207      	movs	r2, #7
 8005378:	300b      	adds	r0, #11
 800537a:	1d23      	adds	r3, r4, #4
 800537c:	4390      	bics	r0, r2
 800537e:	1ac2      	subs	r2, r0, r3
 8005380:	4298      	cmp	r0, r3
 8005382:	d0e6      	beq.n	8005352 <_malloc_r+0x5a>
 8005384:	1a1b      	subs	r3, r3, r0
 8005386:	50a3      	str	r3, [r4, r2]
 8005388:	e7e3      	b.n	8005352 <_malloc_r+0x5a>
 800538a:	6053      	str	r3, [r2, #4]
 800538c:	e7ef      	b.n	800536e <_malloc_r+0x76>
 800538e:	0022      	movs	r2, r4
 8005390:	6864      	ldr	r4, [r4, #4]
 8005392:	e7c2      	b.n	800531a <_malloc_r+0x22>
 8005394:	2303      	movs	r3, #3
 8005396:	1cc4      	adds	r4, r0, #3
 8005398:	439c      	bics	r4, r3
 800539a:	42a0      	cmp	r0, r4
 800539c:	d0e1      	beq.n	8005362 <_malloc_r+0x6a>
 800539e:	1a21      	subs	r1, r4, r0
 80053a0:	0030      	movs	r0, r6
 80053a2:	f000 f807 	bl	80053b4 <_sbrk_r>
 80053a6:	1c43      	adds	r3, r0, #1
 80053a8:	d1db      	bne.n	8005362 <_malloc_r+0x6a>
 80053aa:	e7c7      	b.n	800533c <_malloc_r+0x44>
 80053ac:	200003a4 	.word	0x200003a4
 80053b0:	200003a8 	.word	0x200003a8

080053b4 <_sbrk_r>:
 80053b4:	2300      	movs	r3, #0
 80053b6:	b570      	push	{r4, r5, r6, lr}
 80053b8:	4d06      	ldr	r5, [pc, #24]	; (80053d4 <_sbrk_r+0x20>)
 80053ba:	0004      	movs	r4, r0
 80053bc:	0008      	movs	r0, r1
 80053be:	602b      	str	r3, [r5, #0]
 80053c0:	f000 f8b2 	bl	8005528 <_sbrk>
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	d103      	bne.n	80053d0 <_sbrk_r+0x1c>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d000      	beq.n	80053d0 <_sbrk_r+0x1c>
 80053ce:	6023      	str	r3, [r4, #0]
 80053d0:	bd70      	pop	{r4, r5, r6, pc}
 80053d2:	46c0      	nop			; (mov r8, r8)
 80053d4:	200003b0 	.word	0x200003b0

080053d8 <__malloc_lock>:
 80053d8:	b510      	push	{r4, lr}
 80053da:	4802      	ldr	r0, [pc, #8]	; (80053e4 <__malloc_lock+0xc>)
 80053dc:	f000 f80c 	bl	80053f8 <__retarget_lock_acquire_recursive>
 80053e0:	bd10      	pop	{r4, pc}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	200003b8 	.word	0x200003b8

080053e8 <__malloc_unlock>:
 80053e8:	b510      	push	{r4, lr}
 80053ea:	4802      	ldr	r0, [pc, #8]	; (80053f4 <__malloc_unlock+0xc>)
 80053ec:	f000 f805 	bl	80053fa <__retarget_lock_release_recursive>
 80053f0:	bd10      	pop	{r4, pc}
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	200003b8 	.word	0x200003b8

080053f8 <__retarget_lock_acquire_recursive>:
 80053f8:	4770      	bx	lr

080053fa <__retarget_lock_release_recursive>:
 80053fa:	4770      	bx	lr

080053fc <__gnu_thumb1_case_uqi>:
 80053fc:	b402      	push	{r1}
 80053fe:	4671      	mov	r1, lr
 8005400:	0849      	lsrs	r1, r1, #1
 8005402:	0049      	lsls	r1, r1, #1
 8005404:	5c09      	ldrb	r1, [r1, r0]
 8005406:	0049      	lsls	r1, r1, #1
 8005408:	448e      	add	lr, r1
 800540a:	bc02      	pop	{r1}
 800540c:	4770      	bx	lr
 800540e:	46c0      	nop			; (mov r8, r8)

08005410 <__udivsi3>:
 8005410:	2200      	movs	r2, #0
 8005412:	0843      	lsrs	r3, r0, #1
 8005414:	428b      	cmp	r3, r1
 8005416:	d374      	bcc.n	8005502 <__udivsi3+0xf2>
 8005418:	0903      	lsrs	r3, r0, #4
 800541a:	428b      	cmp	r3, r1
 800541c:	d35f      	bcc.n	80054de <__udivsi3+0xce>
 800541e:	0a03      	lsrs	r3, r0, #8
 8005420:	428b      	cmp	r3, r1
 8005422:	d344      	bcc.n	80054ae <__udivsi3+0x9e>
 8005424:	0b03      	lsrs	r3, r0, #12
 8005426:	428b      	cmp	r3, r1
 8005428:	d328      	bcc.n	800547c <__udivsi3+0x6c>
 800542a:	0c03      	lsrs	r3, r0, #16
 800542c:	428b      	cmp	r3, r1
 800542e:	d30d      	bcc.n	800544c <__udivsi3+0x3c>
 8005430:	22ff      	movs	r2, #255	; 0xff
 8005432:	0209      	lsls	r1, r1, #8
 8005434:	ba12      	rev	r2, r2
 8005436:	0c03      	lsrs	r3, r0, #16
 8005438:	428b      	cmp	r3, r1
 800543a:	d302      	bcc.n	8005442 <__udivsi3+0x32>
 800543c:	1212      	asrs	r2, r2, #8
 800543e:	0209      	lsls	r1, r1, #8
 8005440:	d065      	beq.n	800550e <__udivsi3+0xfe>
 8005442:	0b03      	lsrs	r3, r0, #12
 8005444:	428b      	cmp	r3, r1
 8005446:	d319      	bcc.n	800547c <__udivsi3+0x6c>
 8005448:	e000      	b.n	800544c <__udivsi3+0x3c>
 800544a:	0a09      	lsrs	r1, r1, #8
 800544c:	0bc3      	lsrs	r3, r0, #15
 800544e:	428b      	cmp	r3, r1
 8005450:	d301      	bcc.n	8005456 <__udivsi3+0x46>
 8005452:	03cb      	lsls	r3, r1, #15
 8005454:	1ac0      	subs	r0, r0, r3
 8005456:	4152      	adcs	r2, r2
 8005458:	0b83      	lsrs	r3, r0, #14
 800545a:	428b      	cmp	r3, r1
 800545c:	d301      	bcc.n	8005462 <__udivsi3+0x52>
 800545e:	038b      	lsls	r3, r1, #14
 8005460:	1ac0      	subs	r0, r0, r3
 8005462:	4152      	adcs	r2, r2
 8005464:	0b43      	lsrs	r3, r0, #13
 8005466:	428b      	cmp	r3, r1
 8005468:	d301      	bcc.n	800546e <__udivsi3+0x5e>
 800546a:	034b      	lsls	r3, r1, #13
 800546c:	1ac0      	subs	r0, r0, r3
 800546e:	4152      	adcs	r2, r2
 8005470:	0b03      	lsrs	r3, r0, #12
 8005472:	428b      	cmp	r3, r1
 8005474:	d301      	bcc.n	800547a <__udivsi3+0x6a>
 8005476:	030b      	lsls	r3, r1, #12
 8005478:	1ac0      	subs	r0, r0, r3
 800547a:	4152      	adcs	r2, r2
 800547c:	0ac3      	lsrs	r3, r0, #11
 800547e:	428b      	cmp	r3, r1
 8005480:	d301      	bcc.n	8005486 <__udivsi3+0x76>
 8005482:	02cb      	lsls	r3, r1, #11
 8005484:	1ac0      	subs	r0, r0, r3
 8005486:	4152      	adcs	r2, r2
 8005488:	0a83      	lsrs	r3, r0, #10
 800548a:	428b      	cmp	r3, r1
 800548c:	d301      	bcc.n	8005492 <__udivsi3+0x82>
 800548e:	028b      	lsls	r3, r1, #10
 8005490:	1ac0      	subs	r0, r0, r3
 8005492:	4152      	adcs	r2, r2
 8005494:	0a43      	lsrs	r3, r0, #9
 8005496:	428b      	cmp	r3, r1
 8005498:	d301      	bcc.n	800549e <__udivsi3+0x8e>
 800549a:	024b      	lsls	r3, r1, #9
 800549c:	1ac0      	subs	r0, r0, r3
 800549e:	4152      	adcs	r2, r2
 80054a0:	0a03      	lsrs	r3, r0, #8
 80054a2:	428b      	cmp	r3, r1
 80054a4:	d301      	bcc.n	80054aa <__udivsi3+0x9a>
 80054a6:	020b      	lsls	r3, r1, #8
 80054a8:	1ac0      	subs	r0, r0, r3
 80054aa:	4152      	adcs	r2, r2
 80054ac:	d2cd      	bcs.n	800544a <__udivsi3+0x3a>
 80054ae:	09c3      	lsrs	r3, r0, #7
 80054b0:	428b      	cmp	r3, r1
 80054b2:	d301      	bcc.n	80054b8 <__udivsi3+0xa8>
 80054b4:	01cb      	lsls	r3, r1, #7
 80054b6:	1ac0      	subs	r0, r0, r3
 80054b8:	4152      	adcs	r2, r2
 80054ba:	0983      	lsrs	r3, r0, #6
 80054bc:	428b      	cmp	r3, r1
 80054be:	d301      	bcc.n	80054c4 <__udivsi3+0xb4>
 80054c0:	018b      	lsls	r3, r1, #6
 80054c2:	1ac0      	subs	r0, r0, r3
 80054c4:	4152      	adcs	r2, r2
 80054c6:	0943      	lsrs	r3, r0, #5
 80054c8:	428b      	cmp	r3, r1
 80054ca:	d301      	bcc.n	80054d0 <__udivsi3+0xc0>
 80054cc:	014b      	lsls	r3, r1, #5
 80054ce:	1ac0      	subs	r0, r0, r3
 80054d0:	4152      	adcs	r2, r2
 80054d2:	0903      	lsrs	r3, r0, #4
 80054d4:	428b      	cmp	r3, r1
 80054d6:	d301      	bcc.n	80054dc <__udivsi3+0xcc>
 80054d8:	010b      	lsls	r3, r1, #4
 80054da:	1ac0      	subs	r0, r0, r3
 80054dc:	4152      	adcs	r2, r2
 80054de:	08c3      	lsrs	r3, r0, #3
 80054e0:	428b      	cmp	r3, r1
 80054e2:	d301      	bcc.n	80054e8 <__udivsi3+0xd8>
 80054e4:	00cb      	lsls	r3, r1, #3
 80054e6:	1ac0      	subs	r0, r0, r3
 80054e8:	4152      	adcs	r2, r2
 80054ea:	0883      	lsrs	r3, r0, #2
 80054ec:	428b      	cmp	r3, r1
 80054ee:	d301      	bcc.n	80054f4 <__udivsi3+0xe4>
 80054f0:	008b      	lsls	r3, r1, #2
 80054f2:	1ac0      	subs	r0, r0, r3
 80054f4:	4152      	adcs	r2, r2
 80054f6:	0843      	lsrs	r3, r0, #1
 80054f8:	428b      	cmp	r3, r1
 80054fa:	d301      	bcc.n	8005500 <__udivsi3+0xf0>
 80054fc:	004b      	lsls	r3, r1, #1
 80054fe:	1ac0      	subs	r0, r0, r3
 8005500:	4152      	adcs	r2, r2
 8005502:	1a41      	subs	r1, r0, r1
 8005504:	d200      	bcs.n	8005508 <__udivsi3+0xf8>
 8005506:	4601      	mov	r1, r0
 8005508:	4152      	adcs	r2, r2
 800550a:	4610      	mov	r0, r2
 800550c:	4770      	bx	lr
 800550e:	e7ff      	b.n	8005510 <__udivsi3+0x100>
 8005510:	b501      	push	{r0, lr}
 8005512:	2000      	movs	r0, #0
 8005514:	f000 f806 	bl	8005524 <__aeabi_idiv0>
 8005518:	bd02      	pop	{r1, pc}
 800551a:	46c0      	nop			; (mov r8, r8)

0800551c <__aeabi_uidivmod>:
 800551c:	2900      	cmp	r1, #0
 800551e:	d0f7      	beq.n	8005510 <__udivsi3+0x100>
 8005520:	e776      	b.n	8005410 <__udivsi3>
 8005522:	4770      	bx	lr

08005524 <__aeabi_idiv0>:
 8005524:	4770      	bx	lr
 8005526:	46c0      	nop			; (mov r8, r8)

08005528 <_sbrk>:
 8005528:	4a04      	ldr	r2, [pc, #16]	; (800553c <_sbrk+0x14>)
 800552a:	0003      	movs	r3, r0
 800552c:	6810      	ldr	r0, [r2, #0]
 800552e:	2800      	cmp	r0, #0
 8005530:	d002      	beq.n	8005538 <_sbrk+0x10>
 8005532:	18c3      	adds	r3, r0, r3
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	4770      	bx	lr
 8005538:	4801      	ldr	r0, [pc, #4]	; (8005540 <_sbrk+0x18>)
 800553a:	e7fa      	b.n	8005532 <_sbrk+0xa>
 800553c:	200003ac 	.word	0x200003ac
 8005540:	200003c0 	.word	0x200003c0
 8005544:	00000000 	.word	0x00000000

08005548 <__mem_flash_do_page_erase_veneer>:
 8005548:	b401      	push	{r0}
 800554a:	4802      	ldr	r0, [pc, #8]	; (8005554 <__mem_flash_do_page_erase_veneer+0xc>)
 800554c:	4684      	mov	ip, r0
 800554e:	bc01      	pop	{r0}
 8005550:	4760      	bx	ip
 8005552:	bf00      	nop
 8005554:	20000005 	.word	0x20000005

08005558 <__mem_flash_do_write_half_page_veneer>:
 8005558:	b401      	push	{r0}
 800555a:	4802      	ldr	r0, [pc, #8]	; (8005564 <__mem_flash_do_write_half_page_veneer+0xc>)
 800555c:	4684      	mov	ip, r0
 800555e:	bc01      	pop	{r0}
 8005560:	4760      	bx	ip
 8005562:	bf00      	nop
 8005564:	20000045 	.word	0x20000045
 8005568:	20627548 	.word	0x20627548
 800556c:	72617453 	.word	0x72617453
 8005570:	00000a74 	.word	0x00000a74
 8005574:	20627548 	.word	0x20627548
 8005578:	706f6f4c 	.word	0x706f6f4c
 800557c:	00000a0a 	.word	0x00000a0a
 8005580:	0a696d6e 	.word	0x0a696d6e
 8005584:	00000000 	.word	0x00000000
 8005588:	64726168 	.word	0x64726168
 800558c:	75616620 	.word	0x75616620
 8005590:	000a746c 	.word	0x000a746c
 8005594:	67756c50 	.word	0x67756c50
 8005598:	20646567 	.word	0x20646567
 800559c:	0a74754f 	.word	0x0a74754f
 80055a0:	00000000 	.word	0x00000000
 80055a4:	67756c50 	.word	0x67756c50
 80055a8:	20646567 	.word	0x20646567
 80055ac:	000a6e49 	.word	0x000a6e49
 80055b0:	65736552 	.word	0x65736552
 80055b4:	65532074 	.word	0x65532074
 80055b8:	6e657571 	.word	0x6e657571
 80055bc:	000a6563 	.word	0x000a6563
 80055c0:	6f727245 	.word	0x6f727245
 80055c4:	44412072 	.word	0x44412072
 80055c8:	53492043 	.word	0x53492043
 80055cc:	65442052 	.word	0x65442052
 80055d0:	74756166 	.word	0x74756166
 80055d4:	73614320 	.word	0x73614320
 80055d8:	00000a65 	.word	0x00000a65
 80055dc:	080041c2 	.word	0x080041c2
 80055e0:	080041dc 	.word	0x080041dc
 80055e4:	08004208 	.word	0x08004208
 80055e8:	08004242 	.word	0x08004242
 80055ec:	08004264 	.word	0x08004264
 80055f0:	080047dc 	.word	0x080047dc
 80055f4:	080047ea 	.word	0x080047ea
 80055f8:	080047ea 	.word	0x080047ea
 80055fc:	080047ea 	.word	0x080047ea
 8005600:	080047ea 	.word	0x080047ea
 8005604:	080047ea 	.word	0x080047ea
 8005608:	080047ea 	.word	0x080047ea
 800560c:	080047ea 	.word	0x080047ea
 8005610:	080047ea 	.word	0x080047ea
 8005614:	080047ea 	.word	0x080047ea
 8005618:	080047ea 	.word	0x080047ea
 800561c:	080047ea 	.word	0x080047ea
 8005620:	080047ea 	.word	0x080047ea
 8005624:	080047ea 	.word	0x080047ea
 8005628:	080047ea 	.word	0x080047ea
 800562c:	080047ea 	.word	0x080047ea
 8005630:	080047ea 	.word	0x080047ea
 8005634:	080047ea 	.word	0x080047ea
 8005638:	080047ea 	.word	0x080047ea
 800563c:	080047ea 	.word	0x080047ea
 8005640:	080047ea 	.word	0x080047ea
 8005644:	080047ea 	.word	0x080047ea
 8005648:	080047ea 	.word	0x080047ea
 800564c:	080047ea 	.word	0x080047ea
 8005650:	080047ea 	.word	0x080047ea
 8005654:	080047ea 	.word	0x080047ea
 8005658:	080047ea 	.word	0x080047ea
 800565c:	080047ea 	.word	0x080047ea
 8005660:	080047ea 	.word	0x080047ea
 8005664:	080047ea 	.word	0x080047ea
 8005668:	080047ea 	.word	0x080047ea
 800566c:	080047ea 	.word	0x080047ea
 8005670:	080047ea 	.word	0x080047ea
 8005674:	080047ea 	.word	0x080047ea
 8005678:	080047ea 	.word	0x080047ea
 800567c:	080047ea 	.word	0x080047ea
 8005680:	080047ea 	.word	0x080047ea
 8005684:	080047ea 	.word	0x080047ea
 8005688:	080047ea 	.word	0x080047ea
 800568c:	080047ea 	.word	0x080047ea
 8005690:	080047ea 	.word	0x080047ea
 8005694:	080047ea 	.word	0x080047ea
 8005698:	080047ea 	.word	0x080047ea
 800569c:	080047ea 	.word	0x080047ea
 80056a0:	080047ea 	.word	0x080047ea
 80056a4:	080047ea 	.word	0x080047ea
 80056a8:	080047ea 	.word	0x080047ea
 80056ac:	080047ea 	.word	0x080047ea
 80056b0:	080047ea 	.word	0x080047ea
 80056b4:	080047ea 	.word	0x080047ea
 80056b8:	080047ea 	.word	0x080047ea
 80056bc:	08004716 	.word	0x08004716
 80056c0:	080047ea 	.word	0x080047ea
 80056c4:	080047ea 	.word	0x080047ea
 80056c8:	080047ea 	.word	0x080047ea
 80056cc:	080047ea 	.word	0x080047ea
 80056d0:	080047ea 	.word	0x080047ea
 80056d4:	080047ea 	.word	0x080047ea
 80056d8:	080047ea 	.word	0x080047ea
 80056dc:	080047ea 	.word	0x080047ea
 80056e0:	080047ea 	.word	0x080047ea
 80056e4:	08004716 	.word	0x08004716
 80056e8:	08004772 	.word	0x08004772
 80056ec:	08004716 	.word	0x08004716
 80056f0:	080047ea 	.word	0x080047ea
 80056f4:	080047ea 	.word	0x080047ea
 80056f8:	080047ea 	.word	0x080047ea
 80056fc:	080047ea 	.word	0x080047ea
 8005700:	08004716 	.word	0x08004716
 8005704:	080047ea 	.word	0x080047ea
 8005708:	080047ea 	.word	0x080047ea
 800570c:	080047ea 	.word	0x080047ea
 8005710:	080047ea 	.word	0x080047ea
 8005714:	080047ea 	.word	0x080047ea
 8005718:	08004716 	.word	0x08004716
 800571c:	080047bc 	.word	0x080047bc
 8005720:	080047ea 	.word	0x080047ea
 8005724:	080047ea 	.word	0x080047ea
 8005728:	08004786 	.word	0x08004786
 800572c:	080047ea 	.word	0x080047ea
 8005730:	08004716 	.word	0x08004716
 8005734:	080047ea 	.word	0x080047ea
 8005738:	080047ea 	.word	0x080047ea
 800573c:	08004716 	.word	0x08004716
 8005740:	204d4652 	.word	0x204d4652
 8005744:	20495053 	.word	0x20495053
 8005748:	74697257 	.word	0x74697257
 800574c:	00000065 	.word	0x00000065
 8005750:	74736554 	.word	0x74736554
 8005754:	6d654d20 	.word	0x6d654d20
 8005758:	69725720 	.word	0x69725720
 800575c:	52206574 	.word	0x52206574
 8005760:	0a646165 	.word	0x0a646165
 8005764:	0000000a 	.word	0x0000000a
 8005768:	52504545 	.word	0x52504545
 800576c:	53204d4f 	.word	0x53204d4f
 8005770:	74726174 	.word	0x74726174
 8005774:	3025203a 	.word	0x3025203a
 8005778:	3a207838 	.word	0x3a207838
 800577c:	38302520 	.word	0x38302520
 8005780:	00000a78 	.word	0x00000a78
 8005784:	676f7250 	.word	0x676f7250
 8005788:	6d6d6172 	.word	0x6d6d6172
 800578c:	3a676e69 	.word	0x3a676e69
 8005790:	38302520 	.word	0x38302520
 8005794:	00000a78 	.word	0x00000a78
 8005798:	52504545 	.word	0x52504545
 800579c:	45204d4f 	.word	0x45204d4f
 80057a0:	203a646e 	.word	0x203a646e
 80057a4:	78383025 	.word	0x78383025
 80057a8:	25203a20 	.word	0x25203a20
 80057ac:	0a783830 	.word	0x0a783830
 80057b0:	0000000a 	.word	0x0000000a
 80057b4:	73616c46 	.word	0x73616c46
 80057b8:	72452068 	.word	0x72452068
 80057bc:	0a657361 	.word	0x0a657361
 80057c0:	00000000 	.word	0x00000000
 80057c4:	73616c46 	.word	0x73616c46
 80057c8:	74532068 	.word	0x74532068
 80057cc:	3a747261 	.word	0x3a747261
 80057d0:	38302520 	.word	0x38302520
 80057d4:	203a2078 	.word	0x203a2078
 80057d8:	78383025 	.word	0x78383025
 80057dc:	3830250a 	.word	0x3830250a
 80057e0:	203a2078 	.word	0x203a2078
 80057e4:	78383025 	.word	0x78383025
 80057e8:	0000000a 	.word	0x0000000a
 80057ec:	676f7250 	.word	0x676f7250
 80057f0:	6d6d6172 	.word	0x6d6d6172
 80057f4:	20676e69 	.word	0x20676e69
 80057f8:	78383025 	.word	0x78383025
 80057fc:	38302520 	.word	0x38302520
 8005800:	00000a78 	.word	0x00000a78
 8005804:	73616c46 	.word	0x73616c46
 8005808:	6e452068 	.word	0x6e452068
 800580c:	25203a64 	.word	0x25203a64
 8005810:	20783830 	.word	0x20783830
 8005814:	3025203a 	.word	0x3025203a
 8005818:	250a7838 	.word	0x250a7838
 800581c:	20783830 	.word	0x20783830
 8005820:	3025203a 	.word	0x3025203a
 8005824:	000a7838 	.word	0x000a7838
 8005828:	656d6954 	.word	0x656d6954
 800582c:	2074756f 	.word	0x2074756f
 8005830:	25207325 	.word	0x25207325
 8005834:	0a583830 	.word	0x0a583830
 8005838:	00000000 	.word	0x00000000
 800583c:	20435452 	.word	0x20435452
 8005840:	0a525349 	.word	0x0a525349
 8005844:	00000000 	.word	0x00000000

Disassembly of section .data:

20000000 <curr_address>:
20000000:	08080400                                ....

20000004 <mem_flash_do_page_erase>:
 * address: Page-aligned address to erase
 */
static _RAM bool mem_flash_do_page_erase(uint32_t address)
{
    //erase operation
    FLASH_PECR |= FLASH_PECR_ERASE | FLASH_PECR_PROG;
20000004:	4a0c      	ldr	r2, [pc, #48]	; (20000038 <mem_flash_do_page_erase+0x34>)
20000006:	6811      	ldr	r1, [r2, #0]
20000008:	2382      	movs	r3, #130	; 0x82
2000000a:	009b      	lsls	r3, r3, #2
2000000c:	430b      	orrs	r3, r1
2000000e:	6013      	str	r3, [r2, #0]
    MMIO32(address) = (uint32_t)0;
20000010:	2300      	movs	r3, #0
20000012:	6003      	str	r3, [r0, #0]
    //wait for completion
    while (FLASH_SR & FLASH_SR_BSY) { }
20000014:	4b09      	ldr	r3, [pc, #36]	; (2000003c <mem_flash_do_page_erase+0x38>)
20000016:	681b      	ldr	r3, [r3, #0]
20000018:	07db      	lsls	r3, r3, #31
2000001a:	d4fb      	bmi.n	20000014 <mem_flash_do_page_erase+0x10>
    if (FLASH_SR & FLASH_SR_EOP)
2000001c:	4b07      	ldr	r3, [pc, #28]	; (2000003c <mem_flash_do_page_erase+0x38>)
2000001e:	681b      	ldr	r3, [r3, #0]
20000020:	079b      	lsls	r3, r3, #30
20000022:	d504      	bpl.n	2000002e <mem_flash_do_page_erase+0x2a>
    {
        //completed without incident
        FLASH_SR = FLASH_SR_EOP;
20000024:	4b05      	ldr	r3, [pc, #20]	; (2000003c <mem_flash_do_page_erase+0x38>)
20000026:	2202      	movs	r2, #2
20000028:	601a      	str	r2, [r3, #0]
        return true;
2000002a:	2001      	movs	r0, #1
    {
        //there was an error
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
        return false;
    }
}
2000002c:	4770      	bx	lr
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
2000002e:	4b03      	ldr	r3, [pc, #12]	; (2000003c <mem_flash_do_page_erase+0x38>)
20000030:	4a03      	ldr	r2, [pc, #12]	; (20000040 <mem_flash_do_page_erase+0x3c>)
20000032:	601a      	str	r2, [r3, #0]
        return false;
20000034:	2000      	movs	r0, #0
20000036:	e7f9      	b.n	2000002c <mem_flash_do_page_erase+0x28>
20000038:	40022004 	.word	0x40022004
2000003c:	40022018 	.word	0x40022018
20000040:	00020300 	.word	0x00020300

20000044 <mem_flash_do_write_half_page>:
 *
 * address: Half-page aligned address to write
 * data: Array to 16 32-bit words to write
 */
static _RAM bool mem_flash_do_write_half_page(uint32_t address, uint32_t *data)
{
20000044:	b510      	push	{r4, lr}
    uint8_t i;

    //half-page program operation
    FLASH_PECR |= FLASH_PECR_PROG | FLASH_PECR_FPRG;
20000046:	4a10      	ldr	r2, [pc, #64]	; (20000088 <mem_flash_do_write_half_page+0x44>)
20000048:	6814      	ldr	r4, [r2, #0]
2000004a:	2381      	movs	r3, #129	; 0x81
2000004c:	00db      	lsls	r3, r3, #3
2000004e:	4323      	orrs	r3, r4
20000050:	6013      	str	r3, [r2, #0]
    for (i = 0; i < 16; i++)
20000052:	2300      	movs	r3, #0
20000054:	2b0f      	cmp	r3, #15
20000056:	d805      	bhi.n	20000064 <mem_flash_do_write_half_page+0x20>
    {
        MMIO32(address) = data[i]; //the actual address written is unimportant as these words will be queued
20000058:	009a      	lsls	r2, r3, #2
2000005a:	5852      	ldr	r2, [r2, r1]
2000005c:	6002      	str	r2, [r0, #0]
    for (i = 0; i < 16; i++)
2000005e:	3301      	adds	r3, #1
20000060:	b2db      	uxtb	r3, r3
20000062:	e7f7      	b.n	20000054 <mem_flash_do_write_half_page+0x10>
    }
    //wait for completion
    while (FLASH_SR & FLASH_SR_BSY) { }
20000064:	4b09      	ldr	r3, [pc, #36]	; (2000008c <mem_flash_do_write_half_page+0x48>)
20000066:	681b      	ldr	r3, [r3, #0]
20000068:	07db      	lsls	r3, r3, #31
2000006a:	d4fb      	bmi.n	20000064 <mem_flash_do_write_half_page+0x20>
    if (FLASH_SR & FLASH_SR_EOP)
2000006c:	4b07      	ldr	r3, [pc, #28]	; (2000008c <mem_flash_do_write_half_page+0x48>)
2000006e:	681b      	ldr	r3, [r3, #0]
20000070:	079b      	lsls	r3, r3, #30
20000072:	d504      	bpl.n	2000007e <mem_flash_do_write_half_page+0x3a>
    {
        //completed without incident
        FLASH_SR = FLASH_SR_EOP;
20000074:	4b05      	ldr	r3, [pc, #20]	; (2000008c <mem_flash_do_write_half_page+0x48>)
20000076:	2202      	movs	r2, #2
20000078:	601a      	str	r2, [r3, #0]
        return true;
2000007a:	2001      	movs	r0, #1
        //there was an error
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_NOTZEROERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
        return false;

    }
}
2000007c:	bd10      	pop	{r4, pc}
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_NOTZEROERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
2000007e:	4b03      	ldr	r3, [pc, #12]	; (2000008c <mem_flash_do_write_half_page+0x48>)
20000080:	4a03      	ldr	r2, [pc, #12]	; (20000090 <mem_flash_do_write_half_page+0x4c>)
20000082:	601a      	str	r2, [r3, #0]
        return false;
20000084:	2000      	movs	r0, #0
20000086:	e7f9      	b.n	2000007c <mem_flash_do_write_half_page+0x38>
20000088:	40022004 	.word	0x40022004
2000008c:	40022018 	.word	0x40022018
20000090:	00030300 	.word	0x00030300

20000094 <rcc_ahb_frequency>:
20000094:	001fff68                                h...

20000098 <rcc_apb1_frequency>:
20000098:	001fff68                                h...

2000009c <rcc_apb2_frequency>:
2000009c:	001fff68                                h...

200000a0 <_impure_ptr>:
200000a0:	200000a4                                ... 

200000a4 <impure_data>:
	...
