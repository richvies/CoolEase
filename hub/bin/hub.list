
hub/bin/hub.elf:     file format elf32-littlearm


Disassembly of section .text:

08004000 <vector_table>:
 8004000:	00 20 00 20 59 71 00 08 b1 44 00 08 c1 44 00 08     . . Yq...D...D..
	...
 800402c:	57 71 00 08 00 00 00 00 00 00 00 00 57 71 00 08     Wq..........Wq..
 800403c:	57 71 00 08 55 71 00 08 55 71 00 08 b5 68 00 08     Wq..Uq..Uq...h..
 800404c:	55 71 00 08 55 71 00 08 55 71 00 08 55 71 00 08     Uq..Uq..Uq..Uq..
 800405c:	b9 64 00 08 55 71 00 08 55 71 00 08 55 71 00 08     .d..Uq..Uq..Uq..
 800406c:	55 71 00 08 f9 4e 00 08 55 71 00 08 55 71 00 08     Uq...N..Uq..Uq..
 800407c:	55 71 00 08 55 71 00 08 55 71 00 08 55 71 00 08     Uq..Uq..Uq..Uq..
 800408c:	55 71 00 08 55 71 00 08 55 71 00 08 55 71 00 08     Uq..Uq..Uq..Uq..
 800409c:	55 71 00 08 55 71 00 08 55 71 00 08 55 71 00 08     Uq..Uq..Uq..Uq..
 80040ac:	55 71 00 08 fd 4a 00 08 55 71 00 08 55 71 00 08     Uq...J..Uq..Uq..
 80040bc:	55 71 00 08                                         Uq..

080040c0 <get_sensor>:

sensor_t 	sensors[MAX_SENSORS];
uint8_t 	num_sensors = 0;

sensor_t *get_sensor(uint32_t dev_num)
{
 80040c0:	b510      	push	{r4, lr}
 80040c2:	0004      	movs	r4, r0
	sensor_t *sensor = NULL;

	for(uint8_t i = 0; i < num_sensors; i++)
 80040c4:	2300      	movs	r3, #0
	sensor_t *sensor = NULL;
 80040c6:	2000      	movs	r0, #0
	for(uint8_t i = 0; i < num_sensors; i++)
 80040c8:	e001      	b.n	80040ce <get_sensor+0xe>
 80040ca:	3301      	adds	r3, #1
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <get_sensor+0x34>)
 80040d0:	7812      	ldrb	r2, [r2, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d90c      	bls.n	80040f0 <get_sensor+0x30>
	{
		if(dev_num == sensors[i].dev_num)
 80040d6:	005a      	lsls	r2, r3, #1
 80040d8:	18d2      	adds	r2, r2, r3
 80040da:	00d2      	lsls	r2, r2, #3
 80040dc:	4906      	ldr	r1, [pc, #24]	; (80040f8 <get_sensor+0x38>)
 80040de:	188a      	adds	r2, r1, r2
 80040e0:	6852      	ldr	r2, [r2, #4]
 80040e2:	42a2      	cmp	r2, r4
 80040e4:	d1f1      	bne.n	80040ca <get_sensor+0xa>
			sensor = &sensors[i];
 80040e6:	0058      	lsls	r0, r3, #1
 80040e8:	18c0      	adds	r0, r0, r3
 80040ea:	00c0      	lsls	r0, r0, #3
 80040ec:	1840      	adds	r0, r0, r1
 80040ee:	e7ec      	b.n	80040ca <get_sensor+0xa>
	}
	return sensor;
}
 80040f0:	bd10      	pop	{r4, pc}
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	20000104 	.word	0x20000104
 80040f8:	20000108 	.word	0x20000108

080040fc <hub_download_info>:
		timers_delay_milliseconds(1);
	}
}

static void hub_download_info(void)
{
 80040fc:	b510      	push	{r4, lr}
	log_printf(MAIN, "Hub Redownload Info\n");
 80040fe:	4902      	ldr	r1, [pc, #8]	; (8004108 <hub_download_info+0xc>)
 8004100:	2000      	movs	r0, #0
 8004102:	f001 f857 	bl	80051b4 <log_printf>
}
 8004106:	bd10      	pop	{r4, pc}
 8004108:	08008cd8 	.word	0x08008cd8

0800410c <test_hub2>:
{
 800410c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800410e:	46ce      	mov	lr, r9
 8004110:	4647      	mov	r7, r8
 8004112:	b580      	push	{r7, lr}
 8004114:	b0c3      	sub	sp, #268	; 0x10c
	log_printf(MAIN, "Testing Hub 2\n");
 8004116:	49b7      	ldr	r1, [pc, #732]	; (80043f4 <test_hub2+0x2e8>)
 8004118:	2000      	movs	r0, #0
 800411a:	f001 f84b 	bl	80051b4 <log_printf>
	batt_enable_interrupt();
 800411e:	f000 fe39 	bl	8004d94 <batt_enable_interrupt>
	uint32_t dev_num = mem_get_dev_num();
 8004122:	f001 f8df 	bl	80052e4 <mem_get_dev_num>
 8004126:	4680      	mov	r8, r0
	num_sensors = 3;
 8004128:	4bb3      	ldr	r3, [pc, #716]	; (80043f8 <test_hub2+0x2ec>)
 800412a:	2203      	movs	r2, #3
 800412c:	701a      	strb	r2, [r3, #0]
	sensors[0].dev_num = DEV_NUM_CHIP;
 800412e:	4bb3      	ldr	r3, [pc, #716]	; (80043fc <test_hub2+0x2f0>)
 8004130:	3218      	adds	r2, #24
 8004132:	605a      	str	r2, [r3, #4]
	sensors[1].dev_num = 0x12345678;
 8004134:	4ab2      	ldr	r2, [pc, #712]	; (8004400 <test_hub2+0x2f4>)
 8004136:	61da      	str	r2, [r3, #28]
	sensors[2].dev_num = 0x87654321;
 8004138:	4ab2      	ldr	r2, [pc, #712]	; (8004404 <test_hub2+0x2f8>)
 800413a:	635a      	str	r2, [r3, #52]	; 0x34
	rfm_init();
 800413c:	f001 ffec 	bl	8006118 <rfm_init>
	rfm_config_for_lora(RFM_BW_125KHZ, RFM_CODING_RATE_4_5, RFM_SPREADING_FACTOR_128CPS, false, 0);
 8004140:	2300      	movs	r3, #0
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2270      	movs	r2, #112	; 0x70
 8004146:	2102      	movs	r1, #2
 8004148:	2070      	movs	r0, #112	; 0x70
 800414a:	f002 f873 	bl	8006234 <rfm_config_for_lora>
	rfm_start_listening();
 800414e:	f002 f8d7 	bl	8006300 <rfm_start_listening>
	log_printf(MAIN, "Ready\n");
 8004152:	49ad      	ldr	r1, [pc, #692]	; (8004408 <test_hub2+0x2fc>)
 8004154:	2000      	movs	r0, #0
 8004156:	f001 f82d 	bl	80051b4 <log_printf>
	uint8_t sim_buf_idx 	= 0;
 800415a:	2600      	movs	r6, #0
	bool 	upload_packets 	= false;
 800415c:	2300      	movs	r3, #0
 800415e:	4699      	mov	r9, r3
 8004160:	e132      	b.n	80043c8 <test_hub2+0x2bc>
			log_printf(MAIN, "GetPkts %u\n", rfm_get_num_packets());
 8004162:	f002 f99d 	bl	80064a0 <rfm_get_num_packets>
 8004166:	0002      	movs	r2, r0
 8004168:	49a8      	ldr	r1, [pc, #672]	; (800440c <test_hub2+0x300>)
 800416a:	2000      	movs	r0, #0
 800416c:	f001 f822 	bl	80051b4 <log_printf>
			sim_buf[sim_buf_idx++] = dev_num >> 24; 
 8004170:	4643      	mov	r3, r8
 8004172:	0e1a      	lsrs	r2, r3, #24
 8004174:	ab02      	add	r3, sp, #8
 8004176:	701a      	strb	r2, [r3, #0]
			sim_buf[sim_buf_idx++] = dev_num >> 16; 
 8004178:	4642      	mov	r2, r8
 800417a:	0c12      	lsrs	r2, r2, #16
 800417c:	705a      	strb	r2, [r3, #1]
			sim_buf[sim_buf_idx++] = dev_num >> 8; 
 800417e:	4642      	mov	r2, r8
 8004180:	0a12      	lsrs	r2, r2, #8
 8004182:	709a      	strb	r2, [r3, #2]
			sim_buf[sim_buf_idx++] = dev_num;
 8004184:	4642      	mov	r2, r8
 8004186:	70da      	strb	r2, [r3, #3]
			sim_buf[sim_buf_idx++] = batt_voltages[PWR_VOLTAGE] >> 8;
 8004188:	4aa1      	ldr	r2, [pc, #644]	; (8004410 <test_hub2+0x304>)
 800418a:	8812      	ldrh	r2, [r2, #0]
 800418c:	0a11      	lsrs	r1, r2, #8
 800418e:	7119      	strb	r1, [r3, #4]
			sim_buf[sim_buf_idx++] = batt_voltages[PWR_VOLTAGE];
 8004190:	715a      	strb	r2, [r3, #5]
 8004192:	2606      	movs	r6, #6
			upload_packets = false;
 8004194:	2300      	movs	r3, #0
 8004196:	4699      	mov	r9, r3
			while(rfm_get_num_packets())
 8004198:	e0b9      	b.n	800430e <test_hub2+0x202>
					log_printf(MAIN, "CRC Fail\n");
 800419a:	499e      	ldr	r1, [pc, #632]	; (8004414 <test_hub2+0x308>)
 800419c:	2000      	movs	r0, #0
 800419e:	f001 f809 	bl	80051b4 <log_printf>
					log_printf(MAIN, "!Crc\n");
 80041a2:	499d      	ldr	r1, [pc, #628]	; (8004418 <test_hub2+0x30c>)
 80041a4:	2000      	movs	r0, #0
 80041a6:	f001 f805 	bl	80051b4 <log_printf>
					flash_led(100, 5);
 80041aa:	2105      	movs	r1, #5
 80041ac:	2064      	movs	r0, #100	; 0x64
 80041ae:	f002 fa2f 	bl	8006610 <flash_led>
					continue;
 80041b2:	e0ac      	b.n	800430e <test_hub2+0x202>
					log_printf(MAIN, "Wrong Dev Num: %08X\n", packet->data.device_number);
 80041b4:	6822      	ldr	r2, [r4, #0]
 80041b6:	4999      	ldr	r1, [pc, #612]	; (800441c <test_hub2+0x310>)
 80041b8:	2000      	movs	r0, #0
 80041ba:	f000 fffb 	bl	80051b4 <log_printf>
					log_printf(MAIN, "WDN%08X\n", packet->data.device_number);
 80041be:	6822      	ldr	r2, [r4, #0]
 80041c0:	4997      	ldr	r1, [pc, #604]	; (8004420 <test_hub2+0x314>)
 80041c2:	2000      	movs	r0, #0
 80041c4:	f000 fff6 	bl	80051b4 <log_printf>
					flash_led(100, 3);
 80041c8:	2103      	movs	r1, #3
 80041ca:	2064      	movs	r0, #100	; 0x64
 80041cc:	f002 fa20 	bl	8006610 <flash_led>
					continue;
 80041d0:	e09d      	b.n	800430e <test_hub2+0x202>
					sensor->msg_num 		= packet->data.msg_number;
 80041d2:	6863      	ldr	r3, [r4, #4]
 80041d4:	60ab      	str	r3, [r5, #8]
					sensor->msg_num_start 	= packet->data.msg_number;
 80041d6:	60eb      	str	r3, [r5, #12]
					sensor->total_packets 	= 0;
 80041d8:	2200      	movs	r2, #0
 80041da:	616a      	str	r2, [r5, #20]
					sensor->ok_packets 		= 0;
 80041dc:	612a      	str	r2, [r5, #16]
					sensor->active = true;
 80041de:	3201      	adds	r2, #1
 80041e0:	706a      	strb	r2, [r5, #1]
					log_printf(MAIN, "First message from %u\nNumber: %i\n",sensor->dev_num, sensor->msg_num_start);
 80041e2:	686a      	ldr	r2, [r5, #4]
 80041e4:	498f      	ldr	r1, [pc, #572]	; (8004424 <test_hub2+0x318>)
 80041e6:	2000      	movs	r0, #0
 80041e8:	f000 ffe4 	bl	80051b4 <log_printf>
				sensor->ok_packets++;
 80041ec:	692b      	ldr	r3, [r5, #16]
 80041ee:	3301      	adds	r3, #1
 80041f0:	612b      	str	r3, [r5, #16]
				sensor->total_packets = 1 + packet->data.msg_number - sensor->msg_num_start;
 80041f2:	6863      	ldr	r3, [r4, #4]
 80041f4:	68ea      	ldr	r2, [r5, #12]
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	3301      	adds	r3, #1
 80041fa:	616b      	str	r3, [r5, #20]
				log_printf(MAIN, "Device ID: %08x\n", packet->data.device_number);
 80041fc:	6822      	ldr	r2, [r4, #0]
 80041fe:	498a      	ldr	r1, [pc, #552]	; (8004428 <test_hub2+0x31c>)
 8004200:	2000      	movs	r0, #0
 8004202:	f000 ffd7 	bl	80051b4 <log_printf>
				log_printf(MAIN, "Packet RSSI: %i dbm\n", packet->rssi);
 8004206:	2314      	movs	r3, #20
 8004208:	5ee2      	ldrsh	r2, [r4, r3]
 800420a:	4988      	ldr	r1, [pc, #544]	; (800442c <test_hub2+0x320>)
 800420c:	2000      	movs	r0, #0
 800420e:	f000 ffd1 	bl	80051b4 <log_printf>
				log_printf(MAIN, "Packet SNR: %i dB\n", packet->snr);
 8004212:	2212      	movs	r2, #18
 8004214:	56a2      	ldrsb	r2, [r4, r2]
 8004216:	4986      	ldr	r1, [pc, #536]	; (8004430 <test_hub2+0x324>)
 8004218:	2000      	movs	r0, #0
 800421a:	f000 ffcb 	bl	80051b4 <log_printf>
				log_printf(MAIN, "Power: %i\n", packet->data.power);
 800421e:	2208      	movs	r2, #8
 8004220:	56a2      	ldrsb	r2, [r4, r2]
 8004222:	4984      	ldr	r1, [pc, #528]	; (8004434 <test_hub2+0x328>)
 8004224:	2000      	movs	r0, #0
 8004226:	f000 ffc5 	bl	80051b4 <log_printf>
				log_printf(MAIN, "Battery: %uV\n", packet->data.battery);
 800422a:	8962      	ldrh	r2, [r4, #10]
 800422c:	4982      	ldr	r1, [pc, #520]	; (8004438 <test_hub2+0x32c>)
 800422e:	2000      	movs	r0, #0
 8004230:	f000 ffc0 	bl	80051b4 <log_printf>
				log_printf(MAIN, "Temperature: %i\n", packet->data.temperature);
 8004234:	230c      	movs	r3, #12
 8004236:	5ee2      	ldrsh	r2, [r4, r3]
 8004238:	4980      	ldr	r1, [pc, #512]	; (800443c <test_hub2+0x330>)
 800423a:	2000      	movs	r0, #0
 800423c:	f000 ffba 	bl	80051b4 <log_printf>
				log_printf(MAIN, "Message Number: %i\n", packet->data.msg_number);
 8004240:	6862      	ldr	r2, [r4, #4]
 8004242:	497f      	ldr	r1, [pc, #508]	; (8004440 <test_hub2+0x334>)
 8004244:	2000      	movs	r0, #0
 8004246:	f000 ffb5 	bl	80051b4 <log_printf>
				log_printf(MAIN, "Accuracy: %i / %i packets\n\n", sensor->ok_packets, sensor->total_packets);
 800424a:	696b      	ldr	r3, [r5, #20]
 800424c:	692a      	ldr	r2, [r5, #16]
 800424e:	497d      	ldr	r1, [pc, #500]	; (8004444 <test_hub2+0x338>)
 8004250:	2000      	movs	r0, #0
 8004252:	f000 ffaf 	bl	80051b4 <log_printf>
				sim_buf[sim_buf_idx++] = packet->data.device_number 		>> 24;	sim_buf[sim_buf_idx++] = packet->data.device_number 		>> 16; sim_buf[sim_buf_idx++] = packet->data.device_number 		>> 8; sim_buf[sim_buf_idx++] = packet->data.device_number;
 8004256:	78e1      	ldrb	r1, [r4, #3]
 8004258:	1c72      	adds	r2, r6, #1
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	ab02      	add	r3, sp, #8
 800425e:	5599      	strb	r1, [r3, r6]
 8004260:	8860      	ldrh	r0, [r4, #2]
 8004262:	1cb1      	adds	r1, r6, #2
 8004264:	b2c9      	uxtb	r1, r1
 8004266:	5498      	strb	r0, [r3, r2]
 8004268:	6822      	ldr	r2, [r4, #0]
 800426a:	0a10      	lsrs	r0, r2, #8
 800426c:	1cf2      	adds	r2, r6, #3
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	5458      	strb	r0, [r3, r1]
 8004272:	1d31      	adds	r1, r6, #4
 8004274:	b2c9      	uxtb	r1, r1
 8004276:	6820      	ldr	r0, [r4, #0]
 8004278:	5498      	strb	r0, [r3, r2]
				sim_buf[sim_buf_idx++] = packet->data.temperature 		>> 8; 	sim_buf[sim_buf_idx++] = packet->data.temperature;
 800427a:	1d72      	adds	r2, r6, #5
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	200d      	movs	r0, #13
 8004280:	5620      	ldrsb	r0, [r4, r0]
 8004282:	5458      	strb	r0, [r3, r1]
 8004284:	210c      	movs	r1, #12
 8004286:	5e60      	ldrsh	r0, [r4, r1]
 8004288:	1db1      	adds	r1, r6, #6
 800428a:	b2c9      	uxtb	r1, r1
 800428c:	5498      	strb	r0, [r3, r2]
				sim_buf[sim_buf_idx++] = packet->data.battery 			>> 8; 	sim_buf[sim_buf_idx++] = packet->data.battery;
 800428e:	8960      	ldrh	r0, [r4, #10]
 8004290:	1df2      	adds	r2, r6, #7
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	0a00      	lsrs	r0, r0, #8
 8004296:	5458      	strb	r0, [r3, r1]
 8004298:	8960      	ldrh	r0, [r4, #10]
 800429a:	0031      	movs	r1, r6
 800429c:	3108      	adds	r1, #8
 800429e:	b2c9      	uxtb	r1, r1
 80042a0:	5498      	strb	r0, [r3, r2]
				sim_buf[sim_buf_idx++] = sensor->total_packets		>> 24;	sim_buf[sim_buf_idx++] = sensor->total_packets		>> 16; sim_buf[sim_buf_idx++] = sensor->total_packets		>> 8; sim_buf[sim_buf_idx++] = sensor->total_packets;
 80042a2:	7de8      	ldrb	r0, [r5, #23]
 80042a4:	0032      	movs	r2, r6
 80042a6:	3209      	adds	r2, #9
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	5458      	strb	r0, [r3, r1]
 80042ac:	8ae8      	ldrh	r0, [r5, #22]
 80042ae:	0031      	movs	r1, r6
 80042b0:	310a      	adds	r1, #10
 80042b2:	b2c9      	uxtb	r1, r1
 80042b4:	5498      	strb	r0, [r3, r2]
 80042b6:	696a      	ldr	r2, [r5, #20]
 80042b8:	0a10      	lsrs	r0, r2, #8
 80042ba:	0032      	movs	r2, r6
 80042bc:	320b      	adds	r2, #11
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	5458      	strb	r0, [r3, r1]
 80042c2:	0031      	movs	r1, r6
 80042c4:	310c      	adds	r1, #12
 80042c6:	b2c9      	uxtb	r1, r1
 80042c8:	6968      	ldr	r0, [r5, #20]
 80042ca:	5498      	strb	r0, [r3, r2]
				sim_buf[sim_buf_idx++] = sensor->ok_packets			>> 24;	sim_buf[sim_buf_idx++] = sensor->ok_packets			>> 16; sim_buf[sim_buf_idx++] = sensor->ok_packets			>> 8; sim_buf[sim_buf_idx++] = sensor->ok_packets;
 80042cc:	7ce8      	ldrb	r0, [r5, #19]
 80042ce:	0032      	movs	r2, r6
 80042d0:	320d      	adds	r2, #13
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	5458      	strb	r0, [r3, r1]
 80042d6:	8a68      	ldrh	r0, [r5, #18]
 80042d8:	0031      	movs	r1, r6
 80042da:	310e      	adds	r1, #14
 80042dc:	b2c9      	uxtb	r1, r1
 80042de:	5498      	strb	r0, [r3, r2]
 80042e0:	692a      	ldr	r2, [r5, #16]
 80042e2:	0a10      	lsrs	r0, r2, #8
 80042e4:	0032      	movs	r2, r6
 80042e6:	320f      	adds	r2, #15
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	5458      	strb	r0, [r3, r1]
 80042ec:	6928      	ldr	r0, [r5, #16]
 80042ee:	0031      	movs	r1, r6
 80042f0:	3110      	adds	r1, #16
 80042f2:	b2c9      	uxtb	r1, r1
 80042f4:	5498      	strb	r0, [r3, r2]
				sim_buf[sim_buf_idx++] = packet->rssi				>> 8; 	sim_buf[sim_buf_idx++] = packet->rssi;
 80042f6:	0032      	movs	r2, r6
 80042f8:	3211      	adds	r2, #17
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	2015      	movs	r0, #21
 80042fe:	5620      	ldrsb	r0, [r4, r0]
 8004300:	5458      	strb	r0, [r3, r1]
 8004302:	2014      	movs	r0, #20
 8004304:	5e21      	ldrsh	r1, [r4, r0]
 8004306:	3612      	adds	r6, #18
 8004308:	b2f6      	uxtb	r6, r6
 800430a:	5499      	strb	r1, [r3, r2]
					upload_packets = true;
 800430c:	46b9      	mov	r9, r7
			while(rfm_get_num_packets())
 800430e:	f002 f8c7 	bl	80064a0 <rfm_get_num_packets>
 8004312:	2800      	cmp	r0, #0
 8004314:	d05d      	beq.n	80043d2 <test_hub2+0x2c6>
				packet = rfm_get_next_packet();
 8004316:	f002 f8a9 	bl	800646c <rfm_get_next_packet>
 800431a:	0004      	movs	r4, r0
				aes_ecb_decrypt(packet->data.buffer);
 800431c:	f000 fd32 	bl	8004d84 <aes_ecb_decrypt>
				rfm_organize_packet(packet);
 8004320:	0020      	movs	r0, r4
 8004322:	f002 f839 	bl	8006398 <rfm_organize_packet>
				if( !packet->crc_ok )
 8004326:	7c67      	ldrb	r7, [r4, #17]
 8004328:	2f00      	cmp	r7, #0
 800432a:	d100      	bne.n	800432e <test_hub2+0x222>
 800432c:	e735      	b.n	800419a <test_hub2+0x8e>
					log_printf(MAIN, "CRC OK\n");
 800432e:	4946      	ldr	r1, [pc, #280]	; (8004448 <test_hub2+0x33c>)
 8004330:	2000      	movs	r0, #0
 8004332:	f000 ff3f 	bl	80051b4 <log_printf>
					log_printf(MAIN, "CrcOk\n");
 8004336:	4945      	ldr	r1, [pc, #276]	; (800444c <test_hub2+0x340>)
 8004338:	2000      	movs	r0, #0
 800433a:	f000 ff3b 	bl	80051b4 <log_printf>
				sensor = get_sensor(packet->data.device_number);
 800433e:	6820      	ldr	r0, [r4, #0]
 8004340:	f7ff febe 	bl	80040c0 <get_sensor>
 8004344:	1e05      	subs	r5, r0, #0
				if(sensor == NULL)
 8004346:	d100      	bne.n	800434a <test_hub2+0x23e>
 8004348:	e734      	b.n	80041b4 <test_hub2+0xa8>
					flash_led(100, 1);
 800434a:	2101      	movs	r1, #1
 800434c:	2064      	movs	r0, #100	; 0x64
 800434e:	f002 f95f 	bl	8006610 <flash_led>
					log_printf(MAIN, "PktOk\n", packet->data.device_number);
 8004352:	6822      	ldr	r2, [r4, #0]
 8004354:	493e      	ldr	r1, [pc, #248]	; (8004450 <test_hub2+0x344>)
 8004356:	2000      	movs	r0, #0
 8004358:	f000 ff2c 	bl	80051b4 <log_printf>
				if(!sensor->active)
 800435c:	786b      	ldrb	r3, [r5, #1]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d100      	bne.n	8004364 <test_hub2+0x258>
 8004362:	e736      	b.n	80041d2 <test_hub2+0xc6>
				else if(++sensor->msg_num != packet->data.msg_number)
 8004364:	68ab      	ldr	r3, [r5, #8]
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	60aa      	str	r2, [r5, #8]
 800436a:	6863      	ldr	r3, [r4, #4]
 800436c:	429a      	cmp	r2, r3
 800436e:	d100      	bne.n	8004372 <test_hub2+0x266>
 8004370:	e73c      	b.n	80041ec <test_hub2+0xe0>
					log_printf(MAIN, "Missed Message %i\n", sensor->msg_num);
 8004372:	4938      	ldr	r1, [pc, #224]	; (8004454 <test_hub2+0x348>)
 8004374:	2000      	movs	r0, #0
 8004376:	f000 ff1d 	bl	80051b4 <log_printf>
					sensor->msg_num = packet->data.msg_number;
 800437a:	6863      	ldr	r3, [r4, #4]
 800437c:	60ab      	str	r3, [r5, #8]
 800437e:	e735      	b.n	80041ec <test_hub2+0xe0>
			log_printf(MAIN, "Uploading\n");
 8004380:	4935      	ldr	r1, [pc, #212]	; (8004458 <test_hub2+0x34c>)
 8004382:	2000      	movs	r0, #0
 8004384:	f000 ff16 	bl	80051b4 <log_printf>
			log_printf(MAIN, "SimUp\n");
 8004388:	4934      	ldr	r1, [pc, #208]	; (800445c <test_hub2+0x350>)
 800438a:	2000      	movs	r0, #0
 800438c:	f000 ff12 	bl	80051b4 <log_printf>
			sim_init();
 8004390:	f000 f986 	bl	80046a0 <sim_init>
			log_printf(MAIN, "SimInit\n");
 8004394:	4932      	ldr	r1, [pc, #200]	; (8004460 <test_hub2+0x354>)
 8004396:	2000      	movs	r0, #0
 8004398:	f000 ff0c 	bl	80051b4 <log_printf>
			sim_connect();
 800439c:	f000 fa28 	bl	80047f0 <sim_connect>
			log_printf(MAIN, "SimCnt\n");
 80043a0:	4930      	ldr	r1, [pc, #192]	; (8004464 <test_hub2+0x358>)
 80043a2:	2000      	movs	r0, #0
 80043a4:	f000 ff06 	bl	80051b4 <log_printf>
			sim_send_data(sim_buf, sim_buf_idx);
 80043a8:	0031      	movs	r1, r6
 80043aa:	a802      	add	r0, sp, #8
 80043ac:	f000 fa9e 	bl	80048ec <sim_send_data>
			log_printf(MAIN, "SimDone\n\n");
 80043b0:	492d      	ldr	r1, [pc, #180]	; (8004468 <test_hub2+0x35c>)
 80043b2:	2000      	movs	r0, #0
 80043b4:	f000 fefe 	bl	80051b4 <log_printf>
			sim_end();
 80043b8:	f000 f9da 	bl	8004770 <sim_end>
			upload_packets = false;
 80043bc:	2300      	movs	r3, #0
 80043be:	4699      	mov	r9, r3
 80043c0:	e00a      	b.n	80043d8 <test_hub2+0x2cc>
		timers_delay_milliseconds(1);
 80043c2:	2001      	movs	r0, #1
 80043c4:	f002 f9b0 	bl	8006728 <timers_delay_milliseconds>
		if(rfm_get_num_packets() > 0)
 80043c8:	f002 f86a 	bl	80064a0 <rfm_get_num_packets>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d000      	beq.n	80043d2 <test_hub2+0x2c6>
 80043d0:	e6c7      	b.n	8004162 <test_hub2+0x56>
		if(upload_packets)
 80043d2:	464b      	mov	r3, r9
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1d3      	bne.n	8004380 <test_hub2+0x274>
		if(batt_rst_seq)
 80043d8:	4b24      	ldr	r3, [pc, #144]	; (800446c <test_hub2+0x360>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <test_hub2+0x2b6>
			batt_rst_seq = false;
 80043e0:	4b22      	ldr	r3, [pc, #136]	; (800446c <test_hub2+0x360>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
			hub_download_info();
 80043e6:	f7ff fe89 	bl	80040fc <hub_download_info>
			log_printf(MAIN, "BattRst\n");
 80043ea:	4921      	ldr	r1, [pc, #132]	; (8004470 <test_hub2+0x364>)
 80043ec:	2000      	movs	r0, #0
 80043ee:	f000 fee1 	bl	80051b4 <log_printf>
 80043f2:	e7e6      	b.n	80043c2 <test_hub2+0x2b6>
 80043f4:	08008cf0 	.word	0x08008cf0
 80043f8:	20000104 	.word	0x20000104
 80043fc:	20000108 	.word	0x20000108
 8004400:	12345678 	.word	0x12345678
 8004404:	87654321 	.word	0x87654321
 8004408:	08008d00 	.word	0x08008d00
 800440c:	08008d08 	.word	0x08008d08
 8004410:	20000878 	.word	0x20000878
 8004414:	08008d14 	.word	0x08008d14
 8004418:	08008d20 	.word	0x08008d20
 800441c:	08008d38 	.word	0x08008d38
 8004420:	08008d50 	.word	0x08008d50
 8004424:	08008d64 	.word	0x08008d64
 8004428:	08008d9c 	.word	0x08008d9c
 800442c:	08008db0 	.word	0x08008db0
 8004430:	08008dc8 	.word	0x08008dc8
 8004434:	08008ddc 	.word	0x08008ddc
 8004438:	08008de8 	.word	0x08008de8
 800443c:	08008df8 	.word	0x08008df8
 8004440:	08008e0c 	.word	0x08008e0c
 8004444:	08008e20 	.word	0x08008e20
 8004448:	08008d28 	.word	0x08008d28
 800444c:	08008d30 	.word	0x08008d30
 8004450:	08008d5c 	.word	0x08008d5c
 8004454:	08008d88 	.word	0x08008d88
 8004458:	08008e3c 	.word	0x08008e3c
 800445c:	08008e48 	.word	0x08008e48
 8004460:	08008e50 	.word	0x08008e50
 8004464:	08008e5c 	.word	0x08008e5c
 8004468:	08008e64 	.word	0x08008e64
 800446c:	20000876 	.word	0x20000876
 8004470:	08008e70 	.word	0x08008e70

08004474 <main>:
{
 8004474:	b510      	push	{r4, lr}
	log_init();
 8004476:	f000 fe91 	bl	800519c <log_init>
	timers_lptim_init();
 800447a:	f002 f8f9 	bl	8006670 <timers_lptim_init>
	timers_tim6_init();
 800447e:	f002 f93d 	bl	80066fc <timers_tim6_init>
	for(int i = 0; i < 100000; i++){__asm__("nop");};
 8004482:	2300      	movs	r3, #0
 8004484:	4a08      	ldr	r2, [pc, #32]	; (80044a8 <main+0x34>)
 8004486:	4293      	cmp	r3, r2
 8004488:	dc02      	bgt.n	8004490 <main+0x1c>
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	3301      	adds	r3, #1
 800448e:	e7f9      	b.n	8004484 <main+0x10>
	log_printf(MAIN, "Hub Start\n");
 8004490:	4906      	ldr	r1, [pc, #24]	; (80044ac <main+0x38>)
 8004492:	2000      	movs	r0, #0
 8004494:	f000 fe8e 	bl	80051b4 <log_printf>
	flash_led(100, 5);
 8004498:	2105      	movs	r1, #5
 800449a:	2064      	movs	r0, #100	; 0x64
 800449c:	f002 f8b8 	bl	8006610 <flash_led>
	test_mem_write_read();
 80044a0:	f002 f850 	bl	8006544 <test_mem_write_read>
	(void)test_hub2();
 80044a4:	f7ff fe32 	bl	800410c <test_hub2>
 80044a8:	0001869f 	.word	0x0001869f
 80044ac:	08008e7c 	.word	0x08008e7c

080044b0 <nmi_handler>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void nmi_handler(void)
{
 80044b0:	b510      	push	{r4, lr}
  log_printf(MAIN, "nmi\n");
 80044b2:	4902      	ldr	r1, [pc, #8]	; (80044bc <nmi_handler+0xc>)
 80044b4:	2000      	movs	r0, #0
 80044b6:	f000 fe7d 	bl	80051b4 <log_printf>
	while(1)
 80044ba:	e7fe      	b.n	80044ba <nmi_handler+0xa>
 80044bc:	08008e88 	.word	0x08008e88

080044c0 <hard_fault_handler>:
		
	}
}

void hard_fault_handler(void)
{
 80044c0:	b510      	push	{r4, lr}
  log_printf(MAIN, "hard fault\n");
 80044c2:	4902      	ldr	r1, [pc, #8]	; (80044cc <hard_fault_handler+0xc>)
 80044c4:	2000      	movs	r0, #0
 80044c6:	f000 fe75 	bl	80051b4 <log_printf>
	while(1)
 80044ca:	e7fe      	b.n	80044ca <hard_fault_handler+0xa>
 80044cc:	08008e90 	.word	0x08008e90

080044d0 <clock_setup>:
}


// Static Function Definitions
static void clock_setup(void)
{
 80044d0:	b510      	push	{r4, lr}
	// Enable MSI Osc 2.097Mhz
	rcc_osc_on(RCC_MSI);
 80044d2:	2004      	movs	r0, #4
 80044d4:	f002 fc80 	bl	8006dd8 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_MSI);
 80044d8:	2004      	movs	r0, #4
 80044da:	f002 fcd3 	bl	8006e84 <rcc_wait_for_osc_ready>

	// Set MSI to 2.097Mhz
	rcc_set_msi_range(5);
 80044de:	2005      	movs	r0, #5
 80044e0:	f002 fcfa 	bl	8006ed8 <rcc_set_msi_range>

	// Set prescalers for AHB, APB1, APB2
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);				// AHB -> 2.097Mhz
 80044e4:	2000      	movs	r0, #0
 80044e6:	f002 fced 	bl	8006ec4 <rcc_set_hpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);			// APB1 -> 2.097Mhz
 80044ea:	2000      	movs	r0, #0
 80044ec:	f002 fcd2 	bl	8006e94 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);			// APB2 -> 2.097Mhz
 80044f0:	2000      	movs	r0, #0
 80044f2:	f002 fcdb 	bl	8006eac <rcc_set_ppre2>

	// Set flash, 2.097Mhz -> 0 waitstates
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 80044f6:	2000      	movs	r0, #0
 80044f8:	f002 fb62 	bl	8006bc0 <flash_set_ws>

	// Set Peripheral Clock Frequencies used
	rcc_ahb_frequency = 2097000;
 80044fc:	4b03      	ldr	r3, [pc, #12]	; (800450c <clock_setup+0x3c>)
 80044fe:	4a04      	ldr	r2, [pc, #16]	; (8004510 <clock_setup+0x40>)
 8004500:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 2097000;
 8004502:	4a04      	ldr	r2, [pc, #16]	; (8004514 <clock_setup+0x44>)
 8004504:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = 2097000;
 8004506:	4a04      	ldr	r2, [pc, #16]	; (8004518 <clock_setup+0x48>)
 8004508:	6013      	str	r3, [r2, #0]
}
 800450a:	bd10      	pop	{r4, pc}
 800450c:	001fff68 	.word	0x001fff68
 8004510:	20000094 	.word	0x20000094
 8004514:	20000098 	.word	0x20000098
 8004518:	2000009c 	.word	0x2000009c

0800451c <usart_setup>:

static void usart_setup(void) 
{
 800451c:	b510      	push	{r4, lr}
	rcc_periph_clock_enable(SIM_USART_RCC);
 800451e:	4827      	ldr	r0, [pc, #156]	; (80045bc <usart_setup+0xa0>)
 8004520:	f002 fd1c 	bl	8006f5c <rcc_periph_clock_enable>

	gpio_mode_setup(SIM_USART_TX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SIM_USART_TX);
 8004524:	24a0      	movs	r4, #160	; 0xa0
 8004526:	05e4      	lsls	r4, r4, #23
 8004528:	2304      	movs	r3, #4
 800452a:	2200      	movs	r2, #0
 800452c:	2102      	movs	r1, #2
 800452e:	0020      	movs	r0, r4
 8004530:	f002 fba1 	bl	8006c76 <gpio_mode_setup>
	gpio_mode_setup(SIM_USART_RX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SIM_USART_RX);
 8004534:	2308      	movs	r3, #8
 8004536:	2200      	movs	r2, #0
 8004538:	2102      	movs	r1, #2
 800453a:	0020      	movs	r0, r4
 800453c:	f002 fb9b 	bl	8006c76 <gpio_mode_setup>
    
    gpio_set_output_options(SIM_USART_TX_PORT, GPIO_PUPD_PULLUP, GPIO_OSPEED_2MHZ, SIM_USART_TX);
 8004540:	2304      	movs	r3, #4
 8004542:	2200      	movs	r2, #0
 8004544:	2101      	movs	r1, #1
 8004546:	0020      	movs	r0, r4
 8004548:	f002 fbb5 	bl	8006cb6 <gpio_set_output_options>

    gpio_set_af(SIM_USART_TX_PORT, SIM_USART_AF, SIM_USART_TX);
 800454c:	2204      	movs	r2, #4
 800454e:	2104      	movs	r1, #4
 8004550:	0020      	movs	r0, r4
 8004552:	f002 fbce 	bl	8006cf2 <gpio_set_af>
    gpio_set_af(SIM_USART_RX_PORT, SIM_USART_AF, SIM_USART_RX);
 8004556:	2208      	movs	r2, #8
 8004558:	2104      	movs	r1, #4
 800455a:	0020      	movs	r0, r4
 800455c:	f002 fbc9 	bl	8006cf2 <gpio_set_af>
    
    rcc_periph_reset_pulse(SIM_USART_RCC_RST);
 8004560:	4817      	ldr	r0, [pc, #92]	; (80045c0 <usart_setup+0xa4>)
 8004562:	f002 fd17 	bl	8006f94 <rcc_periph_reset_pulse>
	usart_disable(SIM_USART);
 8004566:	4c17      	ldr	r4, [pc, #92]	; (80045c4 <usart_setup+0xa8>)
 8004568:	0020      	movs	r0, r4
 800456a:	f002 fdcc 	bl	8007106 <usart_disable>
	usart_set_baudrate(SIM_USART, SIM_USART_BAUD);
 800456e:	2196      	movs	r1, #150	; 0x96
 8004570:	0209      	lsls	r1, r1, #8
 8004572:	0020      	movs	r0, r4
 8004574:	f002 fd6a 	bl	800704c <usart_set_baudrate>
	usart_set_databits(SIM_USART, 8);
 8004578:	2108      	movs	r1, #8
 800457a:	0020      	movs	r0, r4
 800457c:	f002 fd92 	bl	80070a4 <usart_set_databits>
	usart_set_stopbits(SIM_USART,USART_STOPBITS_1);
 8004580:	2100      	movs	r1, #0
 8004582:	0020      	movs	r0, r4
 8004584:	f002 fd9c 	bl	80070c0 <usart_set_stopbits>
	usart_set_mode(SIM_USART, USART_MODE_TX_RX);
 8004588:	210c      	movs	r1, #12
 800458a:	0020      	movs	r0, r4
 800458c:	f002 fda8 	bl	80070e0 <usart_set_mode>
	usart_set_parity(SIM_USART, USART_PARITY_NONE);
 8004590:	2100      	movs	r1, #0
 8004592:	0020      	movs	r0, r4
 8004594:	f002 fd9c 	bl	80070d0 <usart_set_parity>
	usart_set_flow_control(SIM_USART, USART_FLOWCONTROL_NONE);
 8004598:	2100      	movs	r1, #0
 800459a:	0020      	movs	r0, r4
 800459c:	f002 fda6 	bl	80070ec <usart_set_flow_control>
	usart_enable(SIM_USART);
 80045a0:	0020      	movs	r0, r4
 80045a2:	f002 fdab 	bl	80070fc <usart_enable>

	// Enable interrupt for RX
	usart_enable_rx_interrupt(SIM_USART);
 80045a6:	0020      	movs	r0, r4
 80045a8:	f002 fdbc 	bl	8007124 <usart_enable_rx_interrupt>
	nvic_enable_irq(SIM_USART_NVIC);
 80045ac:	201c      	movs	r0, #28
 80045ae:	f002 fe17 	bl	80071e0 <nvic_enable_irq>
  	nvic_set_priority(SIM_USART_NVIC, 0);
 80045b2:	2100      	movs	r1, #0
 80045b4:	201c      	movs	r0, #28
 80045b6:	f002 fe1f 	bl	80071f8 <nvic_set_priority>
}
 80045ba:	bd10      	pop	{r4, pc}
 80045bc:	00000711 	.word	0x00000711
 80045c0:	00000511 	.word	0x00000511
 80045c4:	40004400 	.word	0x40004400

080045c8 <_putchar>:
{
 80045c8:	b510      	push	{r4, lr}
	usart_send_blocking(SIM_USART, character);
 80045ca:	0004      	movs	r4, r0
 80045cc:	0001      	movs	r1, r0
 80045ce:	4804      	ldr	r0, [pc, #16]	; (80045e0 <_putchar+0x18>)
 80045d0:	f002 fd9e 	bl	8007110 <usart_send_blocking>
	usart_send_blocking(SPF_USART, character);	
 80045d4:	0021      	movs	r1, r4
 80045d6:	4803      	ldr	r0, [pc, #12]	; (80045e4 <_putchar+0x1c>)
 80045d8:	f002 fd9a 	bl	8007110 <usart_send_blocking>
}
 80045dc:	bd10      	pop	{r4, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	40004400 	.word	0x40004400
 80045e4:	40013800 	.word	0x40013800

080045e8 <check_response>:
{
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	0006      	movs	r6, r0
	bool found = false;
 80045ec:	2500      	movs	r5, #0
	while( sim_rx_tail != sim_rx_head )
 80045ee:	e00a      	b.n	8004606 <check_response+0x1e>
			memset(msg, 0, 256);
 80045f0:	2280      	movs	r2, #128	; 0x80
 80045f2:	0052      	lsls	r2, r2, #1
 80045f4:	2100      	movs	r1, #0
 80045f6:	4815      	ldr	r0, [pc, #84]	; (800464c <check_response+0x64>)
 80045f8:	f002 fe26 	bl	8007248 <memset>
			msg_idx = 0;
 80045fc:	4b14      	ldr	r3, [pc, #80]	; (8004650 <check_response+0x68>)
 80045fe:	2200      	movs	r2, #0
 8004600:	701a      	strb	r2, [r3, #0]
		if(found)
 8004602:	2d00      	cmp	r5, #0
 8004604:	d11f      	bne.n	8004646 <check_response+0x5e>
	while( sim_rx_tail != sim_rx_head )
 8004606:	4b13      	ldr	r3, [pc, #76]	; (8004654 <check_response+0x6c>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	4a13      	ldr	r2, [pc, #76]	; (8004658 <check_response+0x70>)
 800460c:	7812      	ldrb	r2, [r2, #0]
 800460e:	4293      	cmp	r3, r2
 8004610:	d018      	beq.n	8004644 <check_response+0x5c>
		char character = sim_rx_buf[sim_rx_tail++];
 8004612:	1c59      	adds	r1, r3, #1
 8004614:	4a0f      	ldr	r2, [pc, #60]	; (8004654 <check_response+0x6c>)
 8004616:	7011      	strb	r1, [r2, #0]
 8004618:	4a10      	ldr	r2, [pc, #64]	; (800465c <check_response+0x74>)
 800461a:	5cd2      	ldrb	r2, [r2, r3]
		msg[msg_idx++] = character;
 800461c:	4c0c      	ldr	r4, [pc, #48]	; (8004650 <check_response+0x68>)
 800461e:	7821      	ldrb	r1, [r4, #0]
 8004620:	1c4b      	adds	r3, r1, #1
 8004622:	b2db      	uxtb	r3, r3
 8004624:	7023      	strb	r3, [r4, #0]
 8004626:	4809      	ldr	r0, [pc, #36]	; (800464c <check_response+0x64>)
 8004628:	5442      	strb	r2, [r0, r1]
		if(character == '\n')
 800462a:	2a0a      	cmp	r2, #10
 800462c:	d1e9      	bne.n	8004602 <check_response+0x1a>
			msg[msg_idx++] = '\0';
 800462e:	1c59      	adds	r1, r3, #1
 8004630:	7021      	strb	r1, [r4, #0]
 8004632:	2200      	movs	r2, #0
 8004634:	54c2      	strb	r2, [r0, r3]
			if( strstr(msg, str) )
 8004636:	0031      	movs	r1, r6
 8004638:	f002 fe7e 	bl	8007338 <strstr>
 800463c:	2800      	cmp	r0, #0
 800463e:	d0d7      	beq.n	80045f0 <check_response+0x8>
				found = true;
 8004640:	2501      	movs	r5, #1
 8004642:	e7d5      	b.n	80045f0 <check_response+0x8>
	return false;
 8004644:	2500      	movs	r5, #0
}
 8004646:	0028      	movs	r0, r5
 8004648:	bd70      	pop	{r4, r5, r6, pc}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	200005b8 	.word	0x200005b8
 8004650:	200006b8 	.word	0x200006b8
 8004654:	200007bd 	.word	0x200007bd
 8004658:	200007bc 	.word	0x200007bc
 800465c:	200006bc 	.word	0x200006bc

08004660 <sim_printf>:
{	
 8004660:	b40f      	push	{r0, r1, r2, r3}
 8004662:	b510      	push	{r4, lr}
 8004664:	b084      	sub	sp, #16
 8004666:	a906      	add	r1, sp, #24
 8004668:	c908      	ldmia	r1!, {r3}
	va_start(va, format);
 800466a:	9102      	str	r1, [sp, #8]
  	const int ret = _vsnprintf(_putchar, buffer, (size_t)-1, format, va);
 800466c:	2201      	movs	r2, #1
 800466e:	9100      	str	r1, [sp, #0]
 8004670:	4252      	negs	r2, r2
 8004672:	a903      	add	r1, sp, #12
 8004674:	4808      	ldr	r0, [pc, #32]	; (8004698 <sim_printf+0x38>)
 8004676:	f001 f927 	bl	80058c8 <_vsnprintf>
 800467a:	0004      	movs	r4, r0
	while(!usart_get_flag(SIM_USART, USART_ISR_TC)) {__asm__("nop");}
 800467c:	2140      	movs	r1, #64	; 0x40
 800467e:	4807      	ldr	r0, [pc, #28]	; (800469c <sim_printf+0x3c>)
 8004680:	f002 fd62 	bl	8007148 <usart_get_flag>
 8004684:	2800      	cmp	r0, #0
 8004686:	d101      	bne.n	800468c <sim_printf+0x2c>
 8004688:	46c0      	nop			; (mov r8, r8)
 800468a:	e7f7      	b.n	800467c <sim_printf+0x1c>
}
 800468c:	0020      	movs	r0, r4
 800468e:	b004      	add	sp, #16
 8004690:	bc10      	pop	{r4}
 8004692:	bc08      	pop	{r3}
 8004694:	b004      	add	sp, #16
 8004696:	4718      	bx	r3
 8004698:	080045c9 	.word	0x080045c9
 800469c:	40004400 	.word	0x40004400

080046a0 <sim_init>:
{
 80046a0:	b510      	push	{r4, lr}
	log_printf(MAIN, "Sim Init\n");
 80046a2:	4927      	ldr	r1, [pc, #156]	; (8004740 <sim_init+0xa0>)
 80046a4:	2000      	movs	r0, #0
 80046a6:	f000 fd85 	bl	80051b4 <log_printf>
	rcc_periph_clock_enable(RCC_GPIOA);
 80046aa:	20b0      	movs	r0, #176	; 0xb0
 80046ac:	00c0      	lsls	r0, r0, #3
 80046ae:	f002 fc55 	bl	8006f5c <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOB);
 80046b2:	4824      	ldr	r0, [pc, #144]	; (8004744 <sim_init+0xa4>)
 80046b4:	f002 fc52 	bl	8006f5c <rcc_periph_clock_enable>
    clock_setup();
 80046b8:	f7ff ff0a 	bl	80044d0 <clock_setup>
    usart_setup();
 80046bc:	f7ff ff2e 	bl	800451c <usart_setup>
    gpio_mode_setup(SIM_RESET_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, SIM_RESET);
 80046c0:	24a0      	movs	r4, #160	; 0xa0
 80046c2:	05e4      	lsls	r4, r4, #23
 80046c4:	2310      	movs	r3, #16
 80046c6:	2200      	movs	r2, #0
 80046c8:	2101      	movs	r1, #1
 80046ca:	0020      	movs	r0, r4
 80046cc:	f002 fad3 	bl	8006c76 <gpio_mode_setup>
    gpio_set_output_options(SIM_RESET_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, SIM_RESET);
 80046d0:	2310      	movs	r3, #16
 80046d2:	2200      	movs	r2, #0
 80046d4:	2100      	movs	r1, #0
 80046d6:	0020      	movs	r0, r4
 80046d8:	f002 faed 	bl	8006cb6 <gpio_set_output_options>
	gpio_clear(SIM_RESET_PORT, SIM_RESET);
 80046dc:	2110      	movs	r1, #16
 80046de:	0020      	movs	r0, r4
 80046e0:	f002 fac6 	bl	8006c70 <gpio_clear>
	timers_delay_milliseconds(500);
 80046e4:	20fa      	movs	r0, #250	; 0xfa
 80046e6:	0040      	lsls	r0, r0, #1
 80046e8:	f002 f81e 	bl	8006728 <timers_delay_milliseconds>
	gpio_set(SIM_RESET_PORT, SIM_RESET);
 80046ec:	2110      	movs	r1, #16
 80046ee:	0020      	movs	r0, r4
 80046f0:	f002 fabc 	bl	8006c6c <gpio_set>
	timers_delay_milliseconds(5000);
 80046f4:	4814      	ldr	r0, [pc, #80]	; (8004748 <sim_init+0xa8>)
 80046f6:	f002 f817 	bl	8006728 <timers_delay_milliseconds>
	sim_rx_head = 0;
 80046fa:	2400      	movs	r4, #0
 80046fc:	4b13      	ldr	r3, [pc, #76]	; (800474c <sim_init+0xac>)
 80046fe:	701c      	strb	r4, [r3, #0]
	sim_rx_tail = 0;
 8004700:	4b13      	ldr	r3, [pc, #76]	; (8004750 <sim_init+0xb0>)
 8004702:	701c      	strb	r4, [r3, #0]
	memset(msg, 0, 256);
 8004704:	2280      	movs	r2, #128	; 0x80
 8004706:	0052      	lsls	r2, r2, #1
 8004708:	2100      	movs	r1, #0
 800470a:	4812      	ldr	r0, [pc, #72]	; (8004754 <sim_init+0xb4>)
 800470c:	f002 fd9c 	bl	8007248 <memset>
	msg_idx = 0;
 8004710:	4b11      	ldr	r3, [pc, #68]	; (8004758 <sim_init+0xb8>)
 8004712:	701c      	strb	r4, [r3, #0]
	sim_printf("ate0\r\n");
 8004714:	4811      	ldr	r0, [pc, #68]	; (800475c <sim_init+0xbc>)
 8004716:	f7ff ffa3 	bl	8004660 <sim_printf>
	TIMEOUT(1000000, "SIM: ate0", 0, check_response("OK"), ;, ;);
 800471a:	f002 f823 	bl	8006764 <timeout_init>
 800471e:	2200      	movs	r2, #0
 8004720:	490f      	ldr	r1, [pc, #60]	; (8004760 <sim_init+0xc0>)
 8004722:	4810      	ldr	r0, [pc, #64]	; (8004764 <sim_init+0xc4>)
 8004724:	f002 f82c 	bl	8006780 <timeout>
 8004728:	2800      	cmp	r0, #0
 800472a:	d104      	bne.n	8004736 <sim_init+0x96>
 800472c:	480e      	ldr	r0, [pc, #56]	; (8004768 <sim_init+0xc8>)
 800472e:	f7ff ff5b 	bl	80045e8 <check_response>
 8004732:	2800      	cmp	r0, #0
 8004734:	d0f3      	beq.n	800471e <sim_init+0x7e>
	log_printf(MAIN, "Sim Init Done\n");
 8004736:	490d      	ldr	r1, [pc, #52]	; (800476c <sim_init+0xcc>)
 8004738:	2000      	movs	r0, #0
 800473a:	f000 fd3b 	bl	80051b4 <log_printf>
}
 800473e:	bd10      	pop	{r4, pc}
 8004740:	08008e9c 	.word	0x08008e9c
 8004744:	00000581 	.word	0x00000581
 8004748:	00001388 	.word	0x00001388
 800474c:	200007bc 	.word	0x200007bc
 8004750:	200007bd 	.word	0x200007bd
 8004754:	200005b8 	.word	0x200005b8
 8004758:	200006b8 	.word	0x200006b8
 800475c:	08008ea8 	.word	0x08008ea8
 8004760:	08008eb4 	.word	0x08008eb4
 8004764:	000f4240 	.word	0x000f4240
 8004768:	08008eb0 	.word	0x08008eb0
 800476c:	08008ec0 	.word	0x08008ec0

08004770 <sim_end>:
{
 8004770:	b510      	push	{r4, lr}
	sim_printf("at+cfun=4\r\n");
 8004772:	4816      	ldr	r0, [pc, #88]	; (80047cc <sim_end+0x5c>)
 8004774:	f7ff ff74 	bl	8004660 <sim_printf>
	TIMEOUT(10000000, "SIM: at+cfun=4", 0, check_response("OK"), ;, ;);
 8004778:	f001 fff4 	bl	8006764 <timeout_init>
 800477c:	2200      	movs	r2, #0
 800477e:	4914      	ldr	r1, [pc, #80]	; (80047d0 <sim_end+0x60>)
 8004780:	4814      	ldr	r0, [pc, #80]	; (80047d4 <sim_end+0x64>)
 8004782:	f001 fffd 	bl	8006780 <timeout>
 8004786:	2800      	cmp	r0, #0
 8004788:	d104      	bne.n	8004794 <sim_end+0x24>
 800478a:	4813      	ldr	r0, [pc, #76]	; (80047d8 <sim_end+0x68>)
 800478c:	f7ff ff2c 	bl	80045e8 <check_response>
 8004790:	2800      	cmp	r0, #0
 8004792:	d0f3      	beq.n	800477c <sim_end+0xc>
	sim_printf("at+csclk=1\r\n");
 8004794:	4811      	ldr	r0, [pc, #68]	; (80047dc <sim_end+0x6c>)
 8004796:	f7ff ff63 	bl	8004660 <sim_printf>
	TIMEOUT(10000000, "SIM: at+csclk=1", 0, check_response("OK"), ;, ;);
 800479a:	f001 ffe3 	bl	8006764 <timeout_init>
 800479e:	2200      	movs	r2, #0
 80047a0:	490f      	ldr	r1, [pc, #60]	; (80047e0 <sim_end+0x70>)
 80047a2:	480c      	ldr	r0, [pc, #48]	; (80047d4 <sim_end+0x64>)
 80047a4:	f001 ffec 	bl	8006780 <timeout>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d104      	bne.n	80047b6 <sim_end+0x46>
 80047ac:	480a      	ldr	r0, [pc, #40]	; (80047d8 <sim_end+0x68>)
 80047ae:	f7ff ff1b 	bl	80045e8 <check_response>
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d0f3      	beq.n	800479e <sim_end+0x2e>
	usart_disable(SIM_USART);
 80047b6:	480b      	ldr	r0, [pc, #44]	; (80047e4 <sim_end+0x74>)
 80047b8:	f002 fca5 	bl	8007106 <usart_disable>
	rcc_periph_clock_disable(SIM_USART_RCC);
 80047bc:	480a      	ldr	r0, [pc, #40]	; (80047e8 <sim_end+0x78>)
 80047be:	f002 fbdb 	bl	8006f78 <rcc_periph_clock_disable>
	log_printf(MAIN, "Sim End Done\n");
 80047c2:	490a      	ldr	r1, [pc, #40]	; (80047ec <sim_end+0x7c>)
 80047c4:	2000      	movs	r0, #0
 80047c6:	f000 fcf5 	bl	80051b4 <log_printf>
}
 80047ca:	bd10      	pop	{r4, pc}
 80047cc:	08008ed0 	.word	0x08008ed0
 80047d0:	08008edc 	.word	0x08008edc
 80047d4:	00989680 	.word	0x00989680
 80047d8:	08008eb0 	.word	0x08008eb0
 80047dc:	08008eec 	.word	0x08008eec
 80047e0:	08008efc 	.word	0x08008efc
 80047e4:	40004400 	.word	0x40004400
 80047e8:	00000711 	.word	0x00000711
 80047ec:	08008f0c 	.word	0x08008f0c

080047f0 <sim_connect>:
{
 80047f0:	b510      	push	{r4, lr}
	sim_printf("at\r\n");
 80047f2:	482f      	ldr	r0, [pc, #188]	; (80048b0 <sim_connect+0xc0>)
 80047f4:	f7ff ff34 	bl	8004660 <sim_printf>
	TIMEOUT(10000000, "SIM: at", 0, check_response("OK"), ;, ;);
 80047f8:	f001 ffb4 	bl	8006764 <timeout_init>
 80047fc:	2200      	movs	r2, #0
 80047fe:	492d      	ldr	r1, [pc, #180]	; (80048b4 <sim_connect+0xc4>)
 8004800:	482d      	ldr	r0, [pc, #180]	; (80048b8 <sim_connect+0xc8>)
 8004802:	f001 ffbd 	bl	8006780 <timeout>
 8004806:	2800      	cmp	r0, #0
 8004808:	d104      	bne.n	8004814 <sim_connect+0x24>
 800480a:	482c      	ldr	r0, [pc, #176]	; (80048bc <sim_connect+0xcc>)
 800480c:	f7ff feec 	bl	80045e8 <check_response>
 8004810:	2800      	cmp	r0, #0
 8004812:	d0f3      	beq.n	80047fc <sim_connect+0xc>
	timers_delay_milliseconds(100);
 8004814:	2064      	movs	r0, #100	; 0x64
 8004816:	f001 ff87 	bl	8006728 <timers_delay_milliseconds>
	sim_printf("at+cfun=1\r\n");
 800481a:	4829      	ldr	r0, [pc, #164]	; (80048c0 <sim_connect+0xd0>)
 800481c:	f7ff ff20 	bl	8004660 <sim_printf>
	TIMEOUT(10000000, "SIM: at+cfun=1", 0, check_response("OK"), ;, ;);
 8004820:	f001 ffa0 	bl	8006764 <timeout_init>
 8004824:	2200      	movs	r2, #0
 8004826:	4927      	ldr	r1, [pc, #156]	; (80048c4 <sim_connect+0xd4>)
 8004828:	4823      	ldr	r0, [pc, #140]	; (80048b8 <sim_connect+0xc8>)
 800482a:	f001 ffa9 	bl	8006780 <timeout>
 800482e:	2800      	cmp	r0, #0
 8004830:	d104      	bne.n	800483c <sim_connect+0x4c>
 8004832:	4822      	ldr	r0, [pc, #136]	; (80048bc <sim_connect+0xcc>)
 8004834:	f7ff fed8 	bl	80045e8 <check_response>
 8004838:	2800      	cmp	r0, #0
 800483a:	d0f3      	beq.n	8004824 <sim_connect+0x34>
	TIMEOUT(20000000, "SIM: SMS Ready", 0, check_response("SMS Ready"), ;, ;);
 800483c:	f001 ff92 	bl	8006764 <timeout_init>
 8004840:	2200      	movs	r2, #0
 8004842:	4921      	ldr	r1, [pc, #132]	; (80048c8 <sim_connect+0xd8>)
 8004844:	4821      	ldr	r0, [pc, #132]	; (80048cc <sim_connect+0xdc>)
 8004846:	f001 ff9b 	bl	8006780 <timeout>
 800484a:	2800      	cmp	r0, #0
 800484c:	d104      	bne.n	8004858 <sim_connect+0x68>
 800484e:	4820      	ldr	r0, [pc, #128]	; (80048d0 <sim_connect+0xe0>)
 8004850:	f7ff feca 	bl	80045e8 <check_response>
 8004854:	2800      	cmp	r0, #0
 8004856:	d0f3      	beq.n	8004840 <sim_connect+0x50>
	timers_delay_milliseconds(100);
 8004858:	2064      	movs	r0, #100	; 0x64
 800485a:	f001 ff65 	bl	8006728 <timers_delay_milliseconds>
	sim_printf("at+creg=1\r\n");
 800485e:	481d      	ldr	r0, [pc, #116]	; (80048d4 <sim_connect+0xe4>)
 8004860:	f7ff fefe 	bl	8004660 <sim_printf>
	TIMEOUT(60000000, "SIM: at+creg=1", 0, check_response("+CREG: 5"), ;, ;);
 8004864:	f001 ff7e 	bl	8006764 <timeout_init>
 8004868:	2200      	movs	r2, #0
 800486a:	491b      	ldr	r1, [pc, #108]	; (80048d8 <sim_connect+0xe8>)
 800486c:	481b      	ldr	r0, [pc, #108]	; (80048dc <sim_connect+0xec>)
 800486e:	f001 ff87 	bl	8006780 <timeout>
 8004872:	2800      	cmp	r0, #0
 8004874:	d104      	bne.n	8004880 <sim_connect+0x90>
 8004876:	481a      	ldr	r0, [pc, #104]	; (80048e0 <sim_connect+0xf0>)
 8004878:	f7ff feb6 	bl	80045e8 <check_response>
 800487c:	2800      	cmp	r0, #0
 800487e:	d0f3      	beq.n	8004868 <sim_connect+0x78>
	timers_delay_milliseconds(100);
 8004880:	2064      	movs	r0, #100	; 0x64
 8004882:	f001 ff51 	bl	8006728 <timers_delay_milliseconds>
	sim_printf("at+creg=0\r\n");
 8004886:	4817      	ldr	r0, [pc, #92]	; (80048e4 <sim_connect+0xf4>)
 8004888:	f7ff feea 	bl	8004660 <sim_printf>
	TIMEOUT(60000000, "SIM: at+creg=0", 0, check_response("OK"), ;, ;);
 800488c:	f001 ff6a 	bl	8006764 <timeout_init>
 8004890:	2200      	movs	r2, #0
 8004892:	4915      	ldr	r1, [pc, #84]	; (80048e8 <sim_connect+0xf8>)
 8004894:	4811      	ldr	r0, [pc, #68]	; (80048dc <sim_connect+0xec>)
 8004896:	f001 ff73 	bl	8006780 <timeout>
 800489a:	2800      	cmp	r0, #0
 800489c:	d104      	bne.n	80048a8 <sim_connect+0xb8>
 800489e:	4807      	ldr	r0, [pc, #28]	; (80048bc <sim_connect+0xcc>)
 80048a0:	f7ff fea2 	bl	80045e8 <check_response>
 80048a4:	2800      	cmp	r0, #0
 80048a6:	d0f3      	beq.n	8004890 <sim_connect+0xa0>
	timers_delay_milliseconds(100);
 80048a8:	2064      	movs	r0, #100	; 0x64
 80048aa:	f001 ff3d 	bl	8006728 <timers_delay_milliseconds>
}
 80048ae:	bd10      	pop	{r4, pc}
 80048b0:	08008f1c 	.word	0x08008f1c
 80048b4:	08008f24 	.word	0x08008f24
 80048b8:	00989680 	.word	0x00989680
 80048bc:	08008eb0 	.word	0x08008eb0
 80048c0:	08008f2c 	.word	0x08008f2c
 80048c4:	08008f38 	.word	0x08008f38
 80048c8:	08008f54 	.word	0x08008f54
 80048cc:	01312d00 	.word	0x01312d00
 80048d0:	08008f48 	.word	0x08008f48
 80048d4:	08008f64 	.word	0x08008f64
 80048d8:	08008f7c 	.word	0x08008f7c
 80048dc:	03938700 	.word	0x03938700
 80048e0:	08008f70 	.word	0x08008f70
 80048e4:	08008f8c 	.word	0x08008f8c
 80048e8:	08008f98 	.word	0x08008f98

080048ec <sim_send_data>:
{
 80048ec:	b570      	push	{r4, r5, r6, lr}
 80048ee:	0006      	movs	r6, r0
 80048f0:	000d      	movs	r5, r1
	sim_printf("at+sapbr=3,1,APN,data.rewicom.net\r\n");
 80048f2:	4868      	ldr	r0, [pc, #416]	; (8004a94 <sim_send_data+0x1a8>)
 80048f4:	f7ff feb4 	bl	8004660 <sim_printf>
	TIMEOUT(1000000, "SIM: at+sapbr=3,1,APN,data.rewicom.net", 0, check_response("OK"), ;, ;);
 80048f8:	f001 ff34 	bl	8006764 <timeout_init>
 80048fc:	2200      	movs	r2, #0
 80048fe:	4966      	ldr	r1, [pc, #408]	; (8004a98 <sim_send_data+0x1ac>)
 8004900:	4866      	ldr	r0, [pc, #408]	; (8004a9c <sim_send_data+0x1b0>)
 8004902:	f001 ff3d 	bl	8006780 <timeout>
 8004906:	2800      	cmp	r0, #0
 8004908:	d104      	bne.n	8004914 <sim_send_data+0x28>
 800490a:	4865      	ldr	r0, [pc, #404]	; (8004aa0 <sim_send_data+0x1b4>)
 800490c:	f7ff fe6c 	bl	80045e8 <check_response>
 8004910:	2800      	cmp	r0, #0
 8004912:	d0f3      	beq.n	80048fc <sim_send_data+0x10>
	timers_delay_milliseconds(100);
 8004914:	2064      	movs	r0, #100	; 0x64
 8004916:	f001 ff07 	bl	8006728 <timers_delay_milliseconds>
	sim_printf("at+httpinit\r\n");
 800491a:	4862      	ldr	r0, [pc, #392]	; (8004aa4 <sim_send_data+0x1b8>)
 800491c:	f7ff fea0 	bl	8004660 <sim_printf>
	TIMEOUT(1000000, "SIM: at+httpinit", 0, check_response("OK"), ;, ;);
 8004920:	f001 ff20 	bl	8006764 <timeout_init>
 8004924:	2200      	movs	r2, #0
 8004926:	4960      	ldr	r1, [pc, #384]	; (8004aa8 <sim_send_data+0x1bc>)
 8004928:	485c      	ldr	r0, [pc, #368]	; (8004a9c <sim_send_data+0x1b0>)
 800492a:	f001 ff29 	bl	8006780 <timeout>
 800492e:	2800      	cmp	r0, #0
 8004930:	d104      	bne.n	800493c <sim_send_data+0x50>
 8004932:	485b      	ldr	r0, [pc, #364]	; (8004aa0 <sim_send_data+0x1b4>)
 8004934:	f7ff fe58 	bl	80045e8 <check_response>
 8004938:	2800      	cmp	r0, #0
 800493a:	d0f3      	beq.n	8004924 <sim_send_data+0x38>
	timers_delay_milliseconds(100);
 800493c:	2064      	movs	r0, #100	; 0x64
 800493e:	f001 fef3 	bl	8006728 <timers_delay_milliseconds>
	sim_printf("at+httppara=cid,1\r\n");
 8004942:	485a      	ldr	r0, [pc, #360]	; (8004aac <sim_send_data+0x1c0>)
 8004944:	f7ff fe8c 	bl	8004660 <sim_printf>
	TIMEOUT(1000000, "SIM: at+httppara=cid,1", 0, check_response("OK"), ;, ;);
 8004948:	f001 ff0c 	bl	8006764 <timeout_init>
 800494c:	2200      	movs	r2, #0
 800494e:	4958      	ldr	r1, [pc, #352]	; (8004ab0 <sim_send_data+0x1c4>)
 8004950:	4852      	ldr	r0, [pc, #328]	; (8004a9c <sim_send_data+0x1b0>)
 8004952:	f001 ff15 	bl	8006780 <timeout>
 8004956:	2800      	cmp	r0, #0
 8004958:	d104      	bne.n	8004964 <sim_send_data+0x78>
 800495a:	4851      	ldr	r0, [pc, #324]	; (8004aa0 <sim_send_data+0x1b4>)
 800495c:	f7ff fe44 	bl	80045e8 <check_response>
 8004960:	2800      	cmp	r0, #0
 8004962:	d0f3      	beq.n	800494c <sim_send_data+0x60>
	timers_delay_milliseconds(100);
 8004964:	2064      	movs	r0, #100	; 0x64
 8004966:	f001 fedf 	bl	8006728 <timers_delay_milliseconds>
	sim_printf("at+httppara=url,www.circuitboardsamurai.com:8085/website/upload_save_all.php?s=");
 800496a:	4852      	ldr	r0, [pc, #328]	; (8004ab4 <sim_send_data+0x1c8>)
 800496c:	f7ff fe78 	bl	8004660 <sim_printf>
	for(uint8_t i = 0; i < len; i++){ sim_printf("%02X", data[i]); }
 8004970:	2400      	movs	r4, #0
 8004972:	e005      	b.n	8004980 <sim_send_data+0x94>
 8004974:	5d31      	ldrb	r1, [r6, r4]
 8004976:	4850      	ldr	r0, [pc, #320]	; (8004ab8 <sim_send_data+0x1cc>)
 8004978:	f7ff fe72 	bl	8004660 <sim_printf>
 800497c:	3401      	adds	r4, #1
 800497e:	b2e4      	uxtb	r4, r4
 8004980:	42ac      	cmp	r4, r5
 8004982:	d3f7      	bcc.n	8004974 <sim_send_data+0x88>
	sim_printf("N\r\n");
 8004984:	484d      	ldr	r0, [pc, #308]	; (8004abc <sim_send_data+0x1d0>)
 8004986:	f7ff fe6b 	bl	8004660 <sim_printf>
	TIMEOUT(1000000, "SIM: at+httppara=url,www.circuitboardsamurai.com:8085/website/upload_save_all.php?s=", 0, check_response("OK"), ;, ;);
 800498a:	f001 feeb 	bl	8006764 <timeout_init>
 800498e:	2200      	movs	r2, #0
 8004990:	494b      	ldr	r1, [pc, #300]	; (8004ac0 <sim_send_data+0x1d4>)
 8004992:	4842      	ldr	r0, [pc, #264]	; (8004a9c <sim_send_data+0x1b0>)
 8004994:	f001 fef4 	bl	8006780 <timeout>
 8004998:	2800      	cmp	r0, #0
 800499a:	d104      	bne.n	80049a6 <sim_send_data+0xba>
 800499c:	4840      	ldr	r0, [pc, #256]	; (8004aa0 <sim_send_data+0x1b4>)
 800499e:	f7ff fe23 	bl	80045e8 <check_response>
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d0f3      	beq.n	800498e <sim_send_data+0xa2>
	timers_delay_milliseconds(100);
 80049a6:	2064      	movs	r0, #100	; 0x64
 80049a8:	f001 febe 	bl	8006728 <timers_delay_milliseconds>
	sim_printf("at+sapbr=1,1\r\n");
 80049ac:	4845      	ldr	r0, [pc, #276]	; (8004ac4 <sim_send_data+0x1d8>)
 80049ae:	f7ff fe57 	bl	8004660 <sim_printf>
	TIMEOUT(60000000, "SIM: at+sapbr=1,1", 0, check_response("OK"), ;, ;);
 80049b2:	f001 fed7 	bl	8006764 <timeout_init>
 80049b6:	2200      	movs	r2, #0
 80049b8:	4943      	ldr	r1, [pc, #268]	; (8004ac8 <sim_send_data+0x1dc>)
 80049ba:	4844      	ldr	r0, [pc, #272]	; (8004acc <sim_send_data+0x1e0>)
 80049bc:	f001 fee0 	bl	8006780 <timeout>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	d104      	bne.n	80049ce <sim_send_data+0xe2>
 80049c4:	4836      	ldr	r0, [pc, #216]	; (8004aa0 <sim_send_data+0x1b4>)
 80049c6:	f7ff fe0f 	bl	80045e8 <check_response>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	d0f3      	beq.n	80049b6 <sim_send_data+0xca>
	timers_delay_milliseconds(100);
 80049ce:	2064      	movs	r0, #100	; 0x64
 80049d0:	f001 feaa 	bl	8006728 <timers_delay_milliseconds>
	sim_printf("at+httpaction=0\r\n");
 80049d4:	483e      	ldr	r0, [pc, #248]	; (8004ad0 <sim_send_data+0x1e4>)
 80049d6:	f7ff fe43 	bl	8004660 <sim_printf>
	TIMEOUT(20000000, "SIM: at+httpaction=0", 0, check_response("OK"), ;, ;);
 80049da:	f001 fec3 	bl	8006764 <timeout_init>
 80049de:	2200      	movs	r2, #0
 80049e0:	493c      	ldr	r1, [pc, #240]	; (8004ad4 <sim_send_data+0x1e8>)
 80049e2:	483d      	ldr	r0, [pc, #244]	; (8004ad8 <sim_send_data+0x1ec>)
 80049e4:	f001 fecc 	bl	8006780 <timeout>
 80049e8:	2800      	cmp	r0, #0
 80049ea:	d104      	bne.n	80049f6 <sim_send_data+0x10a>
 80049ec:	482c      	ldr	r0, [pc, #176]	; (8004aa0 <sim_send_data+0x1b4>)
 80049ee:	f7ff fdfb 	bl	80045e8 <check_response>
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d0f3      	beq.n	80049de <sim_send_data+0xf2>
	TIMEOUT(60000000, "SIM: at+httpaction=0", 0, check_response("+HTTPACTION"), ;, ;);
 80049f6:	f001 feb5 	bl	8006764 <timeout_init>
 80049fa:	2200      	movs	r2, #0
 80049fc:	4935      	ldr	r1, [pc, #212]	; (8004ad4 <sim_send_data+0x1e8>)
 80049fe:	4833      	ldr	r0, [pc, #204]	; (8004acc <sim_send_data+0x1e0>)
 8004a00:	f001 febe 	bl	8006780 <timeout>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	d104      	bne.n	8004a12 <sim_send_data+0x126>
 8004a08:	4834      	ldr	r0, [pc, #208]	; (8004adc <sim_send_data+0x1f0>)
 8004a0a:	f7ff fded 	bl	80045e8 <check_response>
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	d0f3      	beq.n	80049fa <sim_send_data+0x10e>
	timers_delay_milliseconds(100);
 8004a12:	2064      	movs	r0, #100	; 0x64
 8004a14:	f001 fe88 	bl	8006728 <timers_delay_milliseconds>
	sim_printf("at+httpread\r\n");
 8004a18:	4831      	ldr	r0, [pc, #196]	; (8004ae0 <sim_send_data+0x1f4>)
 8004a1a:	f7ff fe21 	bl	8004660 <sim_printf>
	TIMEOUT(2000000, "SIM: at+httpread", 0, check_response("OK"), ;, ;);
 8004a1e:	f001 fea1 	bl	8006764 <timeout_init>
 8004a22:	2200      	movs	r2, #0
 8004a24:	492f      	ldr	r1, [pc, #188]	; (8004ae4 <sim_send_data+0x1f8>)
 8004a26:	4830      	ldr	r0, [pc, #192]	; (8004ae8 <sim_send_data+0x1fc>)
 8004a28:	f001 feaa 	bl	8006780 <timeout>
 8004a2c:	2800      	cmp	r0, #0
 8004a2e:	d104      	bne.n	8004a3a <sim_send_data+0x14e>
 8004a30:	481b      	ldr	r0, [pc, #108]	; (8004aa0 <sim_send_data+0x1b4>)
 8004a32:	f7ff fdd9 	bl	80045e8 <check_response>
 8004a36:	2800      	cmp	r0, #0
 8004a38:	d0f3      	beq.n	8004a22 <sim_send_data+0x136>
	timers_delay_milliseconds(100);
 8004a3a:	2064      	movs	r0, #100	; 0x64
 8004a3c:	f001 fe74 	bl	8006728 <timers_delay_milliseconds>
	sim_printf("at+httpterm\r\n");
 8004a40:	482a      	ldr	r0, [pc, #168]	; (8004aec <sim_send_data+0x200>)
 8004a42:	f7ff fe0d 	bl	8004660 <sim_printf>
	TIMEOUT(1000000, "SIM: at+httpterm", 0, check_response("OK"), ;, ;);
 8004a46:	f001 fe8d 	bl	8006764 <timeout_init>
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	4928      	ldr	r1, [pc, #160]	; (8004af0 <sim_send_data+0x204>)
 8004a4e:	4813      	ldr	r0, [pc, #76]	; (8004a9c <sim_send_data+0x1b0>)
 8004a50:	f001 fe96 	bl	8006780 <timeout>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d104      	bne.n	8004a62 <sim_send_data+0x176>
 8004a58:	4811      	ldr	r0, [pc, #68]	; (8004aa0 <sim_send_data+0x1b4>)
 8004a5a:	f7ff fdc5 	bl	80045e8 <check_response>
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	d0f3      	beq.n	8004a4a <sim_send_data+0x15e>
	timers_delay_milliseconds(100);
 8004a62:	2064      	movs	r0, #100	; 0x64
 8004a64:	f001 fe60 	bl	8006728 <timers_delay_milliseconds>
	sim_printf("at+sapbr=0,1\r\n");
 8004a68:	4822      	ldr	r0, [pc, #136]	; (8004af4 <sim_send_data+0x208>)
 8004a6a:	f7ff fdf9 	bl	8004660 <sim_printf>
	TIMEOUT(60000000, "SIM: at+sapbr=0,1", 0, check_response("OK"), ;, ;);
 8004a6e:	f001 fe79 	bl	8006764 <timeout_init>
 8004a72:	2200      	movs	r2, #0
 8004a74:	4920      	ldr	r1, [pc, #128]	; (8004af8 <sim_send_data+0x20c>)
 8004a76:	4815      	ldr	r0, [pc, #84]	; (8004acc <sim_send_data+0x1e0>)
 8004a78:	f001 fe82 	bl	8006780 <timeout>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d104      	bne.n	8004a8a <sim_send_data+0x19e>
 8004a80:	4807      	ldr	r0, [pc, #28]	; (8004aa0 <sim_send_data+0x1b4>)
 8004a82:	f7ff fdb1 	bl	80045e8 <check_response>
 8004a86:	2800      	cmp	r0, #0
 8004a88:	d0f3      	beq.n	8004a72 <sim_send_data+0x186>
	timers_delay_milliseconds(100);
 8004a8a:	2064      	movs	r0, #100	; 0x64
 8004a8c:	f001 fe4c 	bl	8006728 <timers_delay_milliseconds>
}
 8004a90:	bd70      	pop	{r4, r5, r6, pc}
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	08008fa8 	.word	0x08008fa8
 8004a98:	08008fcc 	.word	0x08008fcc
 8004a9c:	000f4240 	.word	0x000f4240
 8004aa0:	08008eb0 	.word	0x08008eb0
 8004aa4:	08008ff4 	.word	0x08008ff4
 8004aa8:	08009004 	.word	0x08009004
 8004aac:	08009018 	.word	0x08009018
 8004ab0:	0800902c 	.word	0x0800902c
 8004ab4:	08009044 	.word	0x08009044
 8004ab8:	08009094 	.word	0x08009094
 8004abc:	0800909c 	.word	0x0800909c
 8004ac0:	080090a0 	.word	0x080090a0
 8004ac4:	080090f8 	.word	0x080090f8
 8004ac8:	08009108 	.word	0x08009108
 8004acc:	03938700 	.word	0x03938700
 8004ad0:	0800911c 	.word	0x0800911c
 8004ad4:	08009130 	.word	0x08009130
 8004ad8:	01312d00 	.word	0x01312d00
 8004adc:	08009148 	.word	0x08009148
 8004ae0:	08009154 	.word	0x08009154
 8004ae4:	08009164 	.word	0x08009164
 8004ae8:	001e8480 	.word	0x001e8480
 8004aec:	08009178 	.word	0x08009178
 8004af0:	08009188 	.word	0x08009188
 8004af4:	0800919c 	.word	0x0800919c
 8004af8:	080091ac 	.word	0x080091ac

08004afc <usart2_isr>:


// Interrupt routines
void usart2_isr(void)
{
 8004afc:	b510      	push	{r4, lr}
	usart_send(SPF_USART, usart_recv(SIM_USART));
 8004afe:	4c09      	ldr	r4, [pc, #36]	; (8004b24 <usart2_isr+0x28>)
 8004b00:	0020      	movs	r0, r4
 8004b02:	f002 fb18 	bl	8007136 <usart_recv>
 8004b06:	0001      	movs	r1, r0
 8004b08:	4807      	ldr	r0, [pc, #28]	; (8004b28 <usart2_isr+0x2c>)
 8004b0a:	f002 fb10 	bl	800712e <usart_send>

	sim_rx_buf[sim_rx_head++] = usart_recv(SIM_USART);
 8004b0e:	0020      	movs	r0, r4
 8004b10:	f002 fb11 	bl	8007136 <usart_recv>
 8004b14:	4a05      	ldr	r2, [pc, #20]	; (8004b2c <usart2_isr+0x30>)
 8004b16:	7813      	ldrb	r3, [r2, #0]
 8004b18:	1c59      	adds	r1, r3, #1
 8004b1a:	7011      	strb	r1, [r2, #0]
 8004b1c:	4a04      	ldr	r2, [pc, #16]	; (8004b30 <usart2_isr+0x34>)
 8004b1e:	54d0      	strb	r0, [r2, r3]
}
 8004b20:	bd10      	pop	{r4, pc}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	40004400 	.word	0x40004400
 8004b28:	40013800 	.word	0x40013800
 8004b2c:	200007bc 	.word	0x200007bc
 8004b30:	200006bc 	.word	0x200006bc

08004b34 <AddRoundKey>:
}

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 8004b34:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8004b36:	2600      	movs	r6, #0
 8004b38:	e00f      	b.n	8004b5a <AddRoundKey+0x26>
  {
    for (j = 0; j < 4; ++j)
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8004b3a:	0084      	lsls	r4, r0, #2
 8004b3c:	19a4      	adds	r4, r4, r6
 8004b3e:	00a4      	lsls	r4, r4, #2
 8004b40:	191c      	adds	r4, r3, r4
 8004b42:	5d15      	ldrb	r5, [r2, r4]
 8004b44:	00b4      	lsls	r4, r6, #2
 8004b46:	190c      	adds	r4, r1, r4
 8004b48:	5ce7      	ldrb	r7, [r4, r3]
 8004b4a:	407d      	eors	r5, r7
 8004b4c:	54e5      	strb	r5, [r4, r3]
    for (j = 0; j < 4; ++j)
 8004b4e:	3301      	adds	r3, #1
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d9f1      	bls.n	8004b3a <AddRoundKey+0x6>
  for (i = 0; i < 4; ++i)
 8004b56:	3601      	adds	r6, #1
 8004b58:	b2f6      	uxtb	r6, r6
 8004b5a:	2e03      	cmp	r6, #3
 8004b5c:	d801      	bhi.n	8004b62 <AddRoundKey+0x2e>
    for (j = 0; j < 4; ++j)
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e7f7      	b.n	8004b52 <AddRoundKey+0x1e>
    }
  }
}
 8004b62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b64 <xtime>:
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8004b64:	0043      	lsls	r3, r0, #1
 8004b66:	09c0      	lsrs	r0, r0, #7
 8004b68:	0042      	lsls	r2, r0, #1
 8004b6a:	1880      	adds	r0, r0, r2
 8004b6c:	00c2      	lsls	r2, r0, #3
 8004b6e:	1880      	adds	r0, r0, r2
 8004b70:	4058      	eors	r0, r3
 8004b72:	b2c0      	uxtb	r0, r0
}
 8004b74:	4770      	bx	lr

08004b76 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 8004b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b78:	46de      	mov	lr, fp
 8004b7a:	4657      	mov	r7, sl
 8004b7c:	464e      	mov	r6, r9
 8004b7e:	4645      	mov	r5, r8
 8004b80:	b5e0      	push	{r5, r6, r7, lr}
 8004b82:	b08d      	sub	sp, #52	; 0x34
 8004b84:	9003      	str	r0, [sp, #12]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 8004b86:	2300      	movs	r3, #0
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	e0a3      	b.n	8004cd4 <InvMixColumns+0x15e>
  { 
    a = (*state)[i][0];
 8004b8c:	9b01      	ldr	r3, [sp, #4]
 8004b8e:	009a      	lsls	r2, r3, #2
 8004b90:	4693      	mov	fp, r2
 8004b92:	9b03      	ldr	r3, [sp, #12]
 8004b94:	5cd2      	ldrb	r2, [r2, r3]
 8004b96:	4692      	mov	sl, r2
    b = (*state)[i][1];
 8004b98:	001a      	movs	r2, r3
 8004b9a:	445a      	add	r2, fp
 8004b9c:	0013      	movs	r3, r2
 8004b9e:	7852      	ldrb	r2, [r2, #1]
 8004ba0:	4691      	mov	r9, r2
    c = (*state)[i][2];
 8004ba2:	789a      	ldrb	r2, [r3, #2]
 8004ba4:	4690      	mov	r8, r2
    d = (*state)[i][3];
 8004ba6:	9302      	str	r3, [sp, #8]
 8004ba8:	78dd      	ldrb	r5, [r3, #3]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8004baa:	4650      	mov	r0, sl
 8004bac:	f7ff ffda 	bl	8004b64 <xtime>
 8004bb0:	9004      	str	r0, [sp, #16]
 8004bb2:	f7ff ffd7 	bl	8004b64 <xtime>
 8004bb6:	9005      	str	r0, [sp, #20]
 8004bb8:	f7ff ffd4 	bl	8004b64 <xtime>
 8004bbc:	9006      	str	r0, [sp, #24]
 8004bbe:	4648      	mov	r0, r9
 8004bc0:	f7ff ffd0 	bl	8004b64 <xtime>
 8004bc4:	0004      	movs	r4, r0
 8004bc6:	f7ff ffcd 	bl	8004b64 <xtime>
 8004bca:	9007      	str	r0, [sp, #28]
 8004bcc:	f7ff ffca 	bl	8004b64 <xtime>
 8004bd0:	9000      	str	r0, [sp, #0]
 8004bd2:	4640      	mov	r0, r8
 8004bd4:	f7ff ffc6 	bl	8004b64 <xtime>
 8004bd8:	9008      	str	r0, [sp, #32]
 8004bda:	f7ff ffc3 	bl	8004b64 <xtime>
 8004bde:	9009      	str	r0, [sp, #36]	; 0x24
 8004be0:	f7ff ffc0 	bl	8004b64 <xtime>
 8004be4:	0006      	movs	r6, r0
 8004be6:	0028      	movs	r0, r5
 8004be8:	f7ff ffbc 	bl	8004b64 <xtime>
 8004bec:	900b      	str	r0, [sp, #44]	; 0x2c
 8004bee:	f7ff ffb9 	bl	8004b64 <xtime>
 8004bf2:	900a      	str	r0, [sp, #40]	; 0x28
 8004bf4:	f7ff ffb6 	bl	8004b64 <xtime>
 8004bf8:	0002      	movs	r2, r0
 8004bfa:	9b04      	ldr	r3, [sp, #16]
 8004bfc:	9905      	ldr	r1, [sp, #20]
 8004bfe:	404b      	eors	r3, r1
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	9906      	ldr	r1, [sp, #24]
 8004c04:	404b      	eors	r3, r1
 8004c06:	b2d8      	uxtb	r0, r3
 8004c08:	4649      	mov	r1, r9
 8004c0a:	4061      	eors	r1, r4
 8004c0c:	b2c9      	uxtb	r1, r1
 8004c0e:	9b00      	ldr	r3, [sp, #0]
 8004c10:	4059      	eors	r1, r3
 8004c12:	b2cb      	uxtb	r3, r1
 8004c14:	4043      	eors	r3, r0
 8004c16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c18:	4647      	mov	r7, r8
 8004c1a:	4079      	eors	r1, r7
 8004c1c:	b2c9      	uxtb	r1, r1
 8004c1e:	4071      	eors	r1, r6
 8004c20:	b2c9      	uxtb	r1, r1
 8004c22:	404b      	eors	r3, r1
 8004c24:	0011      	movs	r1, r2
 8004c26:	4069      	eors	r1, r5
 8004c28:	b2c9      	uxtb	r1, r1
 8004c2a:	404b      	eors	r3, r1
 8004c2c:	9903      	ldr	r1, [sp, #12]
 8004c2e:	465f      	mov	r7, fp
 8004c30:	547b      	strb	r3, [r7, r1]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 8004c32:	4653      	mov	r3, sl
 8004c34:	9906      	ldr	r1, [sp, #24]
 8004c36:	404b      	eors	r3, r1
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	9807      	ldr	r0, [sp, #28]
 8004c3c:	4044      	eors	r4, r0
 8004c3e:	b2e4      	uxtb	r4, r4
 8004c40:	9800      	ldr	r0, [sp, #0]
 8004c42:	4044      	eors	r4, r0
 8004c44:	b2e4      	uxtb	r4, r4
 8004c46:	405c      	eors	r4, r3
 8004c48:	9b08      	ldr	r3, [sp, #32]
 8004c4a:	4647      	mov	r7, r8
 8004c4c:	407b      	eors	r3, r7
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	4073      	eors	r3, r6
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	405c      	eors	r4, r3
 8004c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c58:	406b      	eors	r3, r5
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	4053      	eors	r3, r2
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	405c      	eors	r4, r3
 8004c62:	9b02      	ldr	r3, [sp, #8]
 8004c64:	705c      	strb	r4, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8004c66:	9c05      	ldr	r4, [sp, #20]
 8004c68:	4657      	mov	r7, sl
 8004c6a:	407c      	eors	r4, r7
 8004c6c:	b2e3      	uxtb	r3, r4
 8004c6e:	000c      	movs	r4, r1
 8004c70:	404b      	eors	r3, r1
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	464f      	mov	r7, r9
 8004c76:	4047      	eors	r7, r0
 8004c78:	b2f9      	uxtb	r1, r7
 8004c7a:	404b      	eors	r3, r1
 8004c7c:	9908      	ldr	r1, [sp, #32]
 8004c7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c80:	4041      	eors	r1, r0
 8004c82:	b2c8      	uxtb	r0, r1
 8004c84:	4070      	eors	r0, r6
 8004c86:	b2c0      	uxtb	r0, r0
 8004c88:	4043      	eors	r3, r0
 8004c8a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004c8c:	407d      	eors	r5, r7
 8004c8e:	b2ed      	uxtb	r5, r5
 8004c90:	4055      	eors	r5, r2
 8004c92:	b2ed      	uxtb	r5, r5
 8004c94:	406b      	eors	r3, r5
 8004c96:	9902      	ldr	r1, [sp, #8]
 8004c98:	708b      	strb	r3, [r1, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8004c9a:	9804      	ldr	r0, [sp, #16]
 8004c9c:	4655      	mov	r5, sl
 8004c9e:	4068      	eors	r0, r5
 8004ca0:	b2c0      	uxtb	r0, r0
 8004ca2:	4060      	eors	r0, r4
 8004ca4:	b2c3      	uxtb	r3, r0
 8004ca6:	464d      	mov	r5, r9
 8004ca8:	9c07      	ldr	r4, [sp, #28]
 8004caa:	4065      	eors	r5, r4
 8004cac:	b2e8      	uxtb	r0, r5
 8004cae:	9900      	ldr	r1, [sp, #0]
 8004cb0:	4048      	eors	r0, r1
 8004cb2:	b2c0      	uxtb	r0, r0
 8004cb4:	4058      	eors	r0, r3
 8004cb6:	4641      	mov	r1, r8
 8004cb8:	404e      	eors	r6, r1
 8004cba:	b2f6      	uxtb	r6, r6
 8004cbc:	4046      	eors	r6, r0
 8004cbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004cc0:	4078      	eors	r0, r7
 8004cc2:	b2c0      	uxtb	r0, r0
 8004cc4:	4042      	eors	r2, r0
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	4072      	eors	r2, r6
 8004cca:	9b02      	ldr	r3, [sp, #8]
 8004ccc:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8004cce:	9b01      	ldr	r3, [sp, #4]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	9301      	str	r3, [sp, #4]
 8004cd4:	9b01      	ldr	r3, [sp, #4]
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	dc00      	bgt.n	8004cdc <InvMixColumns+0x166>
 8004cda:	e757      	b.n	8004b8c <InvMixColumns+0x16>
  }
}
 8004cdc:	b00d      	add	sp, #52	; 0x34
 8004cde:	bcf0      	pop	{r4, r5, r6, r7}
 8004ce0:	46bb      	mov	fp, r7
 8004ce2:	46b2      	mov	sl, r6
 8004ce4:	46a9      	mov	r9, r5
 8004ce6:	46a0      	mov	r8, r4
 8004ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004cec <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8004cec:	b530      	push	{r4, r5, lr}
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8004cee:	2100      	movs	r1, #0
 8004cf0:	e00b      	b.n	8004d0a <InvSubBytes+0x1e>
  {
    for (j = 0; j < 4; ++j)
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8004cf2:	009a      	lsls	r2, r3, #2
 8004cf4:	1882      	adds	r2, r0, r2
 8004cf6:	5c54      	ldrb	r4, [r2, r1]
 8004cf8:	4d06      	ldr	r5, [pc, #24]	; (8004d14 <InvSubBytes+0x28>)
 8004cfa:	5d2c      	ldrb	r4, [r5, r4]
 8004cfc:	5454      	strb	r4, [r2, r1]
    for (j = 0; j < 4; ++j)
 8004cfe:	3301      	adds	r3, #1
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d9f5      	bls.n	8004cf2 <InvSubBytes+0x6>
  for (i = 0; i < 4; ++i)
 8004d06:	3101      	adds	r1, #1
 8004d08:	b2c9      	uxtb	r1, r1
 8004d0a:	2903      	cmp	r1, #3
 8004d0c:	d801      	bhi.n	8004d12 <InvSubBytes+0x26>
    for (j = 0; j < 4; ++j)
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e7f7      	b.n	8004d02 <InvSubBytes+0x16>
    }
  }
}
 8004d12:	bd30      	pop	{r4, r5, pc}
 8004d14:	080091c0 	.word	0x080091c0

08004d18 <InvShiftRows>:
static void InvShiftRows(state_t* state)
{
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp = (*state)[3][1];
 8004d18:	7b43      	ldrb	r3, [r0, #13]
  (*state)[3][1] = (*state)[2][1];
 8004d1a:	7a42      	ldrb	r2, [r0, #9]
 8004d1c:	7342      	strb	r2, [r0, #13]
  (*state)[2][1] = (*state)[1][1];
 8004d1e:	7942      	ldrb	r2, [r0, #5]
 8004d20:	7242      	strb	r2, [r0, #9]
  (*state)[1][1] = (*state)[0][1];
 8004d22:	7842      	ldrb	r2, [r0, #1]
 8004d24:	7142      	strb	r2, [r0, #5]
  (*state)[0][1] = temp;
 8004d26:	7043      	strb	r3, [r0, #1]

  // Rotate second row 2 columns to right 
  temp = (*state)[0][2];
 8004d28:	7883      	ldrb	r3, [r0, #2]
  (*state)[0][2] = (*state)[2][2];
 8004d2a:	7a82      	ldrb	r2, [r0, #10]
 8004d2c:	7082      	strb	r2, [r0, #2]
  (*state)[2][2] = temp;
 8004d2e:	7283      	strb	r3, [r0, #10]

  temp = (*state)[1][2];
 8004d30:	7983      	ldrb	r3, [r0, #6]
  (*state)[1][2] = (*state)[3][2];
 8004d32:	7b82      	ldrb	r2, [r0, #14]
 8004d34:	7182      	strb	r2, [r0, #6]
  (*state)[3][2] = temp;
 8004d36:	7383      	strb	r3, [r0, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8004d38:	78c3      	ldrb	r3, [r0, #3]
  (*state)[0][3] = (*state)[1][3];
 8004d3a:	79c2      	ldrb	r2, [r0, #7]
 8004d3c:	70c2      	strb	r2, [r0, #3]
  (*state)[1][3] = (*state)[2][3];
 8004d3e:	7ac2      	ldrb	r2, [r0, #11]
 8004d40:	71c2      	strb	r2, [r0, #7]
  (*state)[2][3] = (*state)[3][3];
 8004d42:	7bc2      	ldrb	r2, [r0, #15]
 8004d44:	72c2      	strb	r2, [r0, #11]
  (*state)[3][3] = temp;
 8004d46:	73c3      	strb	r3, [r0, #15]
}
 8004d48:	4770      	bx	lr

08004d4a <InvCipher>:
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
}

static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 8004d4a:	b570      	push	{r4, r5, r6, lr}
 8004d4c:	0005      	movs	r5, r0
 8004d4e:	000e      	movs	r6, r1
  uint8_t round = 0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 8004d50:	000a      	movs	r2, r1
 8004d52:	0001      	movs	r1, r0
 8004d54:	200a      	movs	r0, #10
 8004d56:	f7ff feed 	bl	8004b34 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 8004d5a:	2409      	movs	r4, #9
 8004d5c:	e004      	b.n	8004d68 <InvCipher+0x1e>
    InvSubBytes(state);
    AddRoundKey(round, state, RoundKey);
    if (round == 0) {
      break;
    }
    InvMixColumns(state);
 8004d5e:	0028      	movs	r0, r5
 8004d60:	f7ff ff09 	bl	8004b76 <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 8004d64:	3c01      	subs	r4, #1
 8004d66:	b2e4      	uxtb	r4, r4
    InvShiftRows(state);
 8004d68:	0028      	movs	r0, r5
 8004d6a:	f7ff ffd5 	bl	8004d18 <InvShiftRows>
    InvSubBytes(state);
 8004d6e:	0028      	movs	r0, r5
 8004d70:	f7ff ffbc 	bl	8004cec <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 8004d74:	0032      	movs	r2, r6
 8004d76:	0029      	movs	r1, r5
 8004d78:	0020      	movs	r0, r4
 8004d7a:	f7ff fedb 	bl	8004b34 <AddRoundKey>
    if (round == 0) {
 8004d7e:	2c00      	cmp	r4, #0
 8004d80:	d1ed      	bne.n	8004d5e <InvCipher+0x14>
  }

}
 8004d82:	bd70      	pop	{r4, r5, r6, pc}

08004d84 <aes_ecb_decrypt>:
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, round_key);
}

void aes_ecb_decrypt(uint8_t* buf)
{
 8004d84:	b510      	push	{r4, lr}
  // The next function call decrypts the PlainText with the Key using AES algorithm.
  InvCipher((state_t*)buf, round_key);
 8004d86:	4902      	ldr	r1, [pc, #8]	; (8004d90 <aes_ecb_decrypt+0xc>)
 8004d88:	f7ff ffdf 	bl	8004d4a <InvCipher>
}
 8004d8c:	bd10      	pop	{r4, pc}
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	200007c0 	.word	0x200007c0

08004d94 <batt_enable_interrupt>:
    adc_power_off(ADC1);
    rcc_periph_clock_disable(RCC_ADC1);
}

void batt_enable_interrupt(void)
{
 8004d94:	b570      	push	{r4, r5, r6, lr}
    // Enable clock and reset
    rcc_periph_clock_enable(RCC_ADC1);
 8004d96:	484d      	ldr	r0, [pc, #308]	; (8004ecc <batt_enable_interrupt+0x138>)
 8004d98:	f002 f8e0 	bl	8006f5c <rcc_periph_clock_enable>
    rcc_periph_reset_pulse(RST_ADC1);
 8004d9c:	484c      	ldr	r0, [pc, #304]	; (8004ed0 <batt_enable_interrupt+0x13c>)
 8004d9e:	f002 f8f9 	bl	8006f94 <rcc_periph_reset_pulse>

    // Set clock to APB clk / 4
    ADC_CFGR2(ADC1) |= (2 << 30);
 8004da2:	4a4c      	ldr	r2, [pc, #304]	; (8004ed4 <batt_enable_interrupt+0x140>)
 8004da4:	6811      	ldr	r1, [r2, #0]
 8004da6:	2380      	movs	r3, #128	; 0x80
 8004da8:	061b      	lsls	r3, r3, #24
 8004daa:	430b      	orrs	r3, r1
 8004dac:	6013      	str	r3, [r2, #0]
    
    // Power off and calibrate
    adc_power_off(ADC1);
 8004dae:	4d4a      	ldr	r5, [pc, #296]	; (8004ed8 <batt_enable_interrupt+0x144>)
 8004db0:	0028      	movs	r0, r5
 8004db2:	f001 fdcf 	bl	8006954 <adc_power_off>
    adc_calibrate(ADC1);
 8004db6:	0028      	movs	r0, r5
 8004db8:	f001 fddc 	bl	8006974 <adc_calibrate>

    // Config ADC
    adc_set_single_conversion_mode(ADC1);
 8004dbc:	0028      	movs	r0, r5
 8004dbe:	f001 fde1 	bl	8006984 <adc_set_single_conversion_mode>
    ADC_SMPR1(ADC1) &= ~7; ADC_SMPR1(ADC1) |= ADC_SMPR_SMP_160DOT5CYC;
 8004dc2:	4b46      	ldr	r3, [pc, #280]	; (8004edc <batt_enable_interrupt+0x148>)
 8004dc4:	6819      	ldr	r1, [r3, #0]
 8004dc6:	2007      	movs	r0, #7
 8004dc8:	4381      	bics	r1, r0
 8004dca:	6019      	str	r1, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4302      	orrs	r2, r0
 8004dd0:	601a      	str	r2, [r3, #0]
    ADC_IER(ADC1) = ADC_IER_EOSIE;
 8004dd2:	4b43      	ldr	r3, [pc, #268]	; (8004ee0 <batt_enable_interrupt+0x14c>)
 8004dd4:	2208      	movs	r2, #8
 8004dd6:	601a      	str	r2, [r3, #0]
    adc_enable_dma(ADC1);
 8004dd8:	0028      	movs	r0, r5
 8004dda:	f001 fddb 	bl	8006994 <adc_enable_dma>

    // Reverse scan direction so that VREF is always first conversion
    ADC_CFGR1(ADC1) |= ADC_CFGR1_SCANDIR;
 8004dde:	4a41      	ldr	r2, [pc, #260]	; (8004ee4 <batt_enable_interrupt+0x150>)
 8004de0:	6813      	ldr	r3, [r2, #0]
 8004de2:	2104      	movs	r1, #4
 8004de4:	430b      	orrs	r3, r1
 8004de6:	6013      	str	r3, [r2, #0]

    // Enable voltage reference
    adc_enable_vrefint();
 8004de8:	f001 fdda 	bl	80069a0 <adc_enable_vrefint>
    ADC_CFGR1(ADC1)  |= (1<<26) | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL;
    ADC_IER(ADC1) |= ADC_IER_AWD1IE;
    */

    // Enable inputs
    rcc_periph_clock_enable(RCC_GPIOA); 
 8004dec:	20b0      	movs	r0, #176	; 0xb0
 8004dee:	00c0      	lsls	r0, r0, #3
 8004df0:	f002 f8b4 	bl	8006f5c <rcc_periph_clock_enable>
    gpio_mode_setup(BATT_SENS_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, BATT_SENS);
 8004df4:	26a0      	movs	r6, #160	; 0xa0
 8004df6:	05f6      	lsls	r6, r6, #23
 8004df8:	2301      	movs	r3, #1
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2103      	movs	r1, #3
 8004dfe:	0030      	movs	r0, r6
 8004e00:	f001 ff39 	bl	8006c76 <gpio_mode_setup>

    // Set channels to convert
    ADC_CHSELR(ADC1) |= (1 << ADC_CHANNEL_VREF);
 8004e04:	4c38      	ldr	r4, [pc, #224]	; (8004ee8 <batt_enable_interrupt+0x154>)
 8004e06:	6822      	ldr	r2, [r4, #0]
 8004e08:	2380      	movs	r3, #128	; 0x80
 8004e0a:	029b      	lsls	r3, r3, #10
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	6023      	str	r3, [r4, #0]
    ADC_CHSELR(ADC1) |= (1 << 0);
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	2201      	movs	r2, #1
 8004e14:	4313      	orrs	r3, r2
 8004e16:	6023      	str	r3, [r4, #0]
    
    // Extra pwr channel for hub
    #ifdef _HUB
    gpio_mode_setup(PWR_SENS_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, PWR_SENS);
 8004e18:	2302      	movs	r3, #2
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2103      	movs	r1, #3
 8004e1e:	0030      	movs	r0, r6
 8004e20:	f001 ff29 	bl	8006c76 <gpio_mode_setup>
    ADC_CHSELR(ADC1) |= (1 << 1);
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	2202      	movs	r2, #2
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	6023      	str	r3, [r4, #0]
    #endif

    // Setup DMA
    rcc_periph_clock_enable(RCC_DMA);
 8004e2c:	20c0      	movs	r0, #192	; 0xc0
 8004e2e:	00c0      	lsls	r0, r0, #3
 8004e30:	f002 f894 	bl	8006f5c <rcc_periph_clock_enable>
    dma_channel_reset(DMA1, 1);
 8004e34:	4c2d      	ldr	r4, [pc, #180]	; (8004eec <batt_enable_interrupt+0x158>)
 8004e36:	2101      	movs	r1, #1
 8004e38:	0020      	movs	r0, r4
 8004e3a:	f001 fdc0 	bl	80069be <dma_channel_reset>

    dma_enable_circular_mode(DMA1, 1);
 8004e3e:	2101      	movs	r1, #1
 8004e40:	0020      	movs	r0, r4
 8004e42:	f001 fe11 	bl	8006a68 <dma_enable_circular_mode>
    dma_set_read_from_peripheral(DMA1, 1);
 8004e46:	2101      	movs	r1, #1
 8004e48:	0020      	movs	r0, r4
 8004e4a:	f001 fe1d 	bl	8006a88 <dma_set_read_from_peripheral>
    dma_set_number_of_data(DMA1, 1, 3);
 8004e4e:	2203      	movs	r2, #3
 8004e50:	2101      	movs	r1, #1
 8004e52:	0020      	movs	r0, r4
 8004e54:	f001 fe3e 	bl	8006ad4 <dma_set_number_of_data>
    dma_set_priority(DMA1, 1, DMA_CCR_PL_VERY_HIGH);
 8004e58:	22c0      	movs	r2, #192	; 0xc0
 8004e5a:	0192      	lsls	r2, r2, #6
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	0020      	movs	r0, r4
 8004e60:	f001 fdbe 	bl	80069e0 <dma_set_priority>

    dma_set_peripheral_address(DMA1, 1, (uint32_t)&ADC_DR(ADC1));
 8004e64:	4a22      	ldr	r2, [pc, #136]	; (8004ef0 <batt_enable_interrupt+0x15c>)
 8004e66:	2101      	movs	r1, #1
 8004e68:	0020      	movs	r0, r4
 8004e6a:	f001 fe21 	bl	8006ab0 <dma_set_peripheral_address>
    dma_set_peripheral_size(DMA1, 1, DMA_CCR_PSIZE_32BIT);
 8004e6e:	2280      	movs	r2, #128	; 0x80
 8004e70:	0092      	lsls	r2, r2, #2
 8004e72:	2101      	movs	r1, #1
 8004e74:	0020      	movs	r0, r4
 8004e76:	f001 fdd3 	bl	8006a20 <dma_set_peripheral_size>
    dma_disable_peripheral_increment_mode(DMA1, 1);
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	0020      	movs	r0, r4
 8004e7e:	f001 fde9 	bl	8006a54 <dma_disable_peripheral_increment_mode>

    dma_set_memory_address(DMA1, 1, (uint32_t)adc_vals);
 8004e82:	4a1c      	ldr	r2, [pc, #112]	; (8004ef4 <batt_enable_interrupt+0x160>)
 8004e84:	2101      	movs	r1, #1
 8004e86:	0020      	movs	r0, r4
 8004e88:	f001 fe1b 	bl	8006ac2 <dma_set_memory_address>
    dma_set_memory_size(DMA1, 1, DMA_CCR_MSIZE_16BIT);
 8004e8c:	2280      	movs	r2, #128	; 0x80
 8004e8e:	00d2      	lsls	r2, r2, #3
 8004e90:	2101      	movs	r1, #1
 8004e92:	0020      	movs	r0, r4
 8004e94:	f001 fdb4 	bl	8006a00 <dma_set_memory_size>
    dma_enable_memory_increment_mode(DMA1, 1);
 8004e98:	2101      	movs	r1, #1
 8004e9a:	0020      	movs	r0, r4
 8004e9c:	f001 fdd0 	bl	8006a40 <dma_enable_memory_increment_mode>

    dma_enable_channel(DMA1, 1);
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	0020      	movs	r0, r4
 8004ea4:	f001 fdfa 	bl	8006a9c <dma_enable_channel>

    // Turn on ADC
    adc_power_on(ADC1);
 8004ea8:	0028      	movs	r0, r5
 8004eaa:	f001 fd2e 	bl	800690a <adc_power_on>
    timers_delay_microseconds(1000);
 8004eae:	20fa      	movs	r0, #250	; 0xfa
 8004eb0:	0080      	lsls	r0, r0, #2
 8004eb2:	f001 fc05 	bl	80066c0 <timers_delay_microseconds>

    // Enable interrupt. Low priority
    nvic_enable_irq(NVIC_ADC_COMP_IRQ);
 8004eb6:	200c      	movs	r0, #12
 8004eb8:	f002 f992 	bl	80071e0 <nvic_enable_irq>
    nvic_set_priority(NVIC_ADC_COMP_IRQ, 0xFF);
 8004ebc:	21ff      	movs	r1, #255	; 0xff
 8004ebe:	200c      	movs	r0, #12
 8004ec0:	f002 f99a 	bl	80071f8 <nvic_set_priority>

    // Start conversions
    adc_start_conversion_regular(ADC1);
 8004ec4:	0028      	movs	r0, r5
 8004ec6:	f001 fd75 	bl	80069b4 <adc_start_conversion_regular>
}
 8004eca:	bd70      	pop	{r4, r5, r6, pc}
 8004ecc:	00000689 	.word	0x00000689
 8004ed0:	00000489 	.word	0x00000489
 8004ed4:	40012410 	.word	0x40012410
 8004ed8:	40012400 	.word	0x40012400
 8004edc:	40012414 	.word	0x40012414
 8004ee0:	40012404 	.word	0x40012404
 8004ee4:	4001240c 	.word	0x4001240c
 8004ee8:	40012428 	.word	0x40012428
 8004eec:	40020000 	.word	0x40020000
 8004ef0:	40012440 	.word	0x40012440
 8004ef4:	20000870 	.word	0x20000870

08004ef8 <adc_comp_isr>:

// ISRs
#ifdef _HUB
// For use with ADC1
void adc_comp_isr(void)
{
 8004ef8:	b570      	push	{r4, r5, r6, lr}
    // Takes about 150us to run

    // log_printf(MAIN, "ADC ISR %08X\n", ADC_ISR(ADC1));

    // Calculate batt_voltages
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8004efa:	2400      	movs	r4, #0
 8004efc:	e014      	b.n	8004f28 <adc_comp_isr+0x30>
        batt_voltages[i] = ( (uint32_t)300 * ST_VREFINT_CAL * adc_vals[i + 1] ) / ( adc_vals[0] * 4095 ); }
 8004efe:	4b51      	ldr	r3, [pc, #324]	; (8005044 <adc_comp_isr+0x14c>)
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	1c65      	adds	r5, r4, #1
 8004f04:	4a50      	ldr	r2, [pc, #320]	; (8005048 <adc_comp_isr+0x150>)
 8004f06:	0069      	lsls	r1, r5, #1
 8004f08:	5a88      	ldrh	r0, [r1, r2]
 8004f0a:	4343      	muls	r3, r0
 8004f0c:	0098      	lsls	r0, r3, #2
 8004f0e:	18c3      	adds	r3, r0, r3
 8004f10:	0118      	lsls	r0, r3, #4
 8004f12:	1ac0      	subs	r0, r0, r3
 8004f14:	0080      	lsls	r0, r0, #2
 8004f16:	8813      	ldrh	r3, [r2, #0]
 8004f18:	0319      	lsls	r1, r3, #12
 8004f1a:	1ac9      	subs	r1, r1, r3
 8004f1c:	f002 fa3e 	bl	800739c <__udivsi3>
 8004f20:	0064      	lsls	r4, r4, #1
 8004f22:	4b4a      	ldr	r3, [pc, #296]	; (800504c <adc_comp_isr+0x154>)
 8004f24:	5318      	strh	r0, [r3, r4]
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8004f26:	b2ec      	uxtb	r4, r5
 8004f28:	2c01      	cmp	r4, #1
 8004f2a:	d9e8      	bls.n	8004efe <adc_comp_isr+0x6>

    // For Hub : Measured voltage is half of actual
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e006      	b.n	8004f3e <adc_comp_isr+0x46>
        batt_voltages[i] = batt_voltages[i] * 2; }
 8004f30:	4946      	ldr	r1, [pc, #280]	; (800504c <adc_comp_isr+0x154>)
 8004f32:	0058      	lsls	r0, r3, #1
 8004f34:	5a42      	ldrh	r2, [r0, r1]
 8004f36:	0052      	lsls	r2, r2, #1
 8004f38:	5242      	strh	r2, [r0, r1]
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d9f6      	bls.n	8004f30 <adc_comp_isr+0x38>

    static uint16_t timer = 0;
    static uint8_t state = 0;
    switch(state)
 8004f42:	4b43      	ldr	r3, [pc, #268]	; (8005050 <adc_comp_isr+0x158>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d871      	bhi.n	800502e <adc_comp_isr+0x136>
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4a41      	ldr	r2, [pc, #260]	; (8005054 <adc_comp_isr+0x15c>)
 8004f4e:	58d3      	ldr	r3, [r2, r3]
 8004f50:	469f      	mov	pc, r3
    {
        case 0:
            plugged_in = true;
            timer = timers_millis();
 8004f52:	f001 fbff 	bl	8006754 <timers_millis>
 8004f56:	4b40      	ldr	r3, [pc, #256]	; (8005058 <adc_comp_isr+0x160>)
 8004f58:	8018      	strh	r0, [r3, #0]
            if(batt_voltages[PWR_VOLTAGE] < batt_voltages[BATT_VOLTAGE])
 8004f5a:	4b3c      	ldr	r3, [pc, #240]	; (800504c <adc_comp_isr+0x154>)
 8004f5c:	881a      	ldrh	r2, [r3, #0]
 8004f5e:	885b      	ldrh	r3, [r3, #2]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d268      	bcs.n	8005036 <adc_comp_isr+0x13e>
                state = 1;
 8004f64:	4b3a      	ldr	r3, [pc, #232]	; (8005050 <adc_comp_isr+0x158>)
 8004f66:	2201      	movs	r2, #1
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	e064      	b.n	8005036 <adc_comp_isr+0x13e>
            break;

        case 1:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE])
 8004f6c:	4b37      	ldr	r3, [pc, #220]	; (800504c <adc_comp_isr+0x154>)
 8004f6e:	881a      	ldrh	r2, [r3, #0]
 8004f70:	885b      	ldrh	r3, [r3, #2]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d903      	bls.n	8004f7e <adc_comp_isr+0x86>
                state = 0;
 8004f76:	4b36      	ldr	r3, [pc, #216]	; (8005050 <adc_comp_isr+0x158>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]
 8004f7c:	e05b      	b.n	8005036 <adc_comp_isr+0x13e>
            else if(timers_millis() - timer > 1000)
 8004f7e:	f001 fbe9 	bl	8006754 <timers_millis>
 8004f82:	4b35      	ldr	r3, [pc, #212]	; (8005058 <adc_comp_isr+0x160>)
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	1ac0      	subs	r0, r0, r3
 8004f88:	23fa      	movs	r3, #250	; 0xfa
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4298      	cmp	r0, r3
 8004f8e:	dd52      	ble.n	8005036 <adc_comp_isr+0x13e>
                state = 2;
 8004f90:	4b2f      	ldr	r3, [pc, #188]	; (8005050 <adc_comp_isr+0x158>)
 8004f92:	2202      	movs	r2, #2
 8004f94:	701a      	strb	r2, [r3, #0]
 8004f96:	e04e      	b.n	8005036 <adc_comp_isr+0x13e>
            break;
        
        case 2:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE]){
 8004f98:	4b2c      	ldr	r3, [pc, #176]	; (800504c <adc_comp_isr+0x154>)
 8004f9a:	881a      	ldrh	r2, [r3, #0]
 8004f9c:	885b      	ldrh	r3, [r3, #2]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d907      	bls.n	8004fb2 <adc_comp_isr+0xba>
                timer = timers_millis(); 
 8004fa2:	f001 fbd7 	bl	8006754 <timers_millis>
 8004fa6:	4b2c      	ldr	r3, [pc, #176]	; (8005058 <adc_comp_isr+0x160>)
 8004fa8:	8018      	strh	r0, [r3, #0]
                state = 4;}
 8004faa:	4b29      	ldr	r3, [pc, #164]	; (8005050 <adc_comp_isr+0x158>)
 8004fac:	2204      	movs	r2, #4
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	e041      	b.n	8005036 <adc_comp_isr+0x13e>
            else if(timers_millis() - timer > 10000){
 8004fb2:	f001 fbcf 	bl	8006754 <timers_millis>
 8004fb6:	4b28      	ldr	r3, [pc, #160]	; (8005058 <adc_comp_isr+0x160>)
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	1ac0      	subs	r0, r0, r3
 8004fbc:	4b27      	ldr	r3, [pc, #156]	; (800505c <adc_comp_isr+0x164>)
 8004fbe:	4298      	cmp	r0, r3
 8004fc0:	dd39      	ble.n	8005036 <adc_comp_isr+0x13e>
                state = 3;
 8004fc2:	4b23      	ldr	r3, [pc, #140]	; (8005050 <adc_comp_isr+0x158>)
 8004fc4:	2203      	movs	r2, #3
 8004fc6:	701a      	strb	r2, [r3, #0]
                plugged_in = false;
                log_printf(MAIN, "Plugged Out\n");}
 8004fc8:	4925      	ldr	r1, [pc, #148]	; (8005060 <adc_comp_isr+0x168>)
 8004fca:	2000      	movs	r0, #0
 8004fcc:	f000 f8f2 	bl	80051b4 <log_printf>
 8004fd0:	e031      	b.n	8005036 <adc_comp_isr+0x13e>
            break;
        
        case 3:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE]){
 8004fd2:	4b1e      	ldr	r3, [pc, #120]	; (800504c <adc_comp_isr+0x154>)
 8004fd4:	881a      	ldrh	r2, [r3, #0]
 8004fd6:	885b      	ldrh	r3, [r3, #2]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d92c      	bls.n	8005036 <adc_comp_isr+0x13e>
                timer = timers_millis();
 8004fdc:	f001 fbba 	bl	8006754 <timers_millis>
 8004fe0:	4b1d      	ldr	r3, [pc, #116]	; (8005058 <adc_comp_isr+0x160>)
 8004fe2:	8018      	strh	r0, [r3, #0]
                state = 0;
 8004fe4:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <adc_comp_isr+0x158>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	701a      	strb	r2, [r3, #0]
                log_printf(MAIN, "Plugged In\n");}
 8004fea:	491e      	ldr	r1, [pc, #120]	; (8005064 <adc_comp_isr+0x16c>)
 8004fec:	2000      	movs	r0, #0
 8004fee:	f000 f8e1 	bl	80051b4 <log_printf>
 8004ff2:	e020      	b.n	8005036 <adc_comp_isr+0x13e>
            break;

        case 4:
            if(batt_voltages[PWR_VOLTAGE] < batt_voltages[BATT_VOLTAGE]){
 8004ff4:	4b15      	ldr	r3, [pc, #84]	; (800504c <adc_comp_isr+0x154>)
 8004ff6:	881a      	ldrh	r2, [r3, #0]
 8004ff8:	885b      	ldrh	r3, [r3, #2]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d203      	bcs.n	8005006 <adc_comp_isr+0x10e>
                state = 2; }
 8004ffe:	4b14      	ldr	r3, [pc, #80]	; (8005050 <adc_comp_isr+0x158>)
 8005000:	2202      	movs	r2, #2
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	e017      	b.n	8005036 <adc_comp_isr+0x13e>
            else if(timers_millis() - timer > 1000){
 8005006:	f001 fba5 	bl	8006754 <timers_millis>
 800500a:	4b13      	ldr	r3, [pc, #76]	; (8005058 <adc_comp_isr+0x160>)
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	1ac0      	subs	r0, r0, r3
 8005010:	23fa      	movs	r3, #250	; 0xfa
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4298      	cmp	r0, r3
 8005016:	dd0e      	ble.n	8005036 <adc_comp_isr+0x13e>
                state = 0;
 8005018:	4b0d      	ldr	r3, [pc, #52]	; (8005050 <adc_comp_isr+0x158>)
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
                batt_rst_seq = true; 
 800501e:	4b12      	ldr	r3, [pc, #72]	; (8005068 <adc_comp_isr+0x170>)
 8005020:	3201      	adds	r2, #1
 8005022:	701a      	strb	r2, [r3, #0]
                log_printf(MAIN, "Reset Sequence\n"); }
 8005024:	4911      	ldr	r1, [pc, #68]	; (800506c <adc_comp_isr+0x174>)
 8005026:	2000      	movs	r0, #0
 8005028:	f000 f8c4 	bl	80051b4 <log_printf>
 800502c:	e003      	b.n	8005036 <adc_comp_isr+0x13e>
            break;

        default:
            log_printf(MAIN, "Error ADC ISR Defaut Case\n");
 800502e:	4910      	ldr	r1, [pc, #64]	; (8005070 <adc_comp_isr+0x178>)
 8005030:	2000      	movs	r0, #0
 8005032:	f000 f8bf 	bl	80051b4 <log_printf>
            break;
    }

    // log_printf(MAIN, "ADC ISR %u %u %u V\n",state, batt_voltages[0], batt_voltages[1]);

    ADC_ISR(ADC1) = 0xFFFFFFFF;
 8005036:	480f      	ldr	r0, [pc, #60]	; (8005074 <adc_comp_isr+0x17c>)
 8005038:	2301      	movs	r3, #1
 800503a:	425b      	negs	r3, r3
 800503c:	6003      	str	r3, [r0, #0]
    adc_start_conversion_regular(ADC1);
 800503e:	f001 fcb9 	bl	80069b4 <adc_start_conversion_regular>
}
 8005042:	bd70      	pop	{r4, r5, r6, pc}
 8005044:	1ff80078 	.word	0x1ff80078
 8005048:	20000870 	.word	0x20000870
 800504c:	20000878 	.word	0x20000878
 8005050:	2000087c 	.word	0x2000087c
 8005054:	08009308 	.word	0x08009308
 8005058:	2000087e 	.word	0x2000087e
 800505c:	00002710 	.word	0x00002710
 8005060:	080092c0 	.word	0x080092c0
 8005064:	080092d0 	.word	0x080092d0
 8005068:	20000876 	.word	0x20000876
 800506c:	080092dc 	.word	0x080092dc
 8005070:	080092ec 	.word	0x080092ec
 8005074:	40012400 	.word	0x40012400

08005078 <clock_setup>:
// Static Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

//  Static Function Definitions
static void clock_setup(void) 
{
 8005078:	b510      	push	{r4, lr}
	// Enable MSI Osc 2.097Mhz
	rcc_osc_on(RCC_MSI);
 800507a:	2004      	movs	r0, #4
 800507c:	f001 feac 	bl	8006dd8 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_MSI);
 8005080:	2004      	movs	r0, #4
 8005082:	f001 feff 	bl	8006e84 <rcc_wait_for_osc_ready>

	// Set MSI to 2.097Mhz
	rcc_set_msi_range(5);
 8005086:	2005      	movs	r0, #5
 8005088:	f001 ff26 	bl	8006ed8 <rcc_set_msi_range>

	// Set prescalers for AHB, APB1, APB2
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);				// AHB -> 2.097Mhz
 800508c:	2000      	movs	r0, #0
 800508e:	f001 ff19 	bl	8006ec4 <rcc_set_hpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);			// APB1 -> 2.097Mhz
 8005092:	2000      	movs	r0, #0
 8005094:	f001 fefe 	bl	8006e94 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);			// APB2 -> 2.097Mhz
 8005098:	2000      	movs	r0, #0
 800509a:	f001 ff07 	bl	8006eac <rcc_set_ppre2>

	// Set flash, 2.097Mhz -> 0 waitstates
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 800509e:	2000      	movs	r0, #0
 80050a0:	f001 fd8e 	bl	8006bc0 <flash_set_ws>

	// Set Peripheral Clock Frequencies used
	rcc_ahb_frequency = 2097000;
 80050a4:	4b03      	ldr	r3, [pc, #12]	; (80050b4 <clock_setup+0x3c>)
 80050a6:	4a04      	ldr	r2, [pc, #16]	; (80050b8 <clock_setup+0x40>)
 80050a8:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 2097000;
 80050aa:	4a04      	ldr	r2, [pc, #16]	; (80050bc <clock_setup+0x44>)
 80050ac:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = 2097000;
 80050ae:	4a04      	ldr	r2, [pc, #16]	; (80050c0 <clock_setup+0x48>)
 80050b0:	6013      	str	r3, [r2, #0]
}
 80050b2:	bd10      	pop	{r4, pc}
 80050b4:	001fff68 	.word	0x001fff68
 80050b8:	20000094 	.word	0x20000094
 80050bc:	20000098 	.word	0x20000098
 80050c0:	2000009c 	.word	0x2000009c

080050c4 <usart_setup>:

static void usart_setup(void) 
{
 80050c4:	b570      	push	{r4, r5, r6, lr}
    rcc_periph_clock_enable(RCC_GPIOA);
 80050c6:	20b0      	movs	r0, #176	; 0xb0
 80050c8:	00c0      	lsls	r0, r0, #3
 80050ca:	f001 ff47 	bl	8006f5c <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOB);
 80050ce:	4826      	ldr	r0, [pc, #152]	; (8005168 <usart_setup+0xa4>)
 80050d0:	f001 ff44 	bl	8006f5c <rcc_periph_clock_enable>

	gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_TX);
 80050d4:	2580      	movs	r5, #128	; 0x80
 80050d6:	00ad      	lsls	r5, r5, #2
 80050d8:	24a0      	movs	r4, #160	; 0xa0
 80050da:	05e4      	lsls	r4, r4, #23
 80050dc:	002b      	movs	r3, r5
 80050de:	2200      	movs	r2, #0
 80050e0:	2102      	movs	r1, #2
 80050e2:	0020      	movs	r0, r4
 80050e4:	f001 fdc7 	bl	8006c76 <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_RX);
 80050e8:	2680      	movs	r6, #128	; 0x80
 80050ea:	00f6      	lsls	r6, r6, #3
 80050ec:	0033      	movs	r3, r6
 80050ee:	2200      	movs	r2, #0
 80050f0:	2102      	movs	r1, #2
 80050f2:	0020      	movs	r0, r4
 80050f4:	f001 fdbf 	bl	8006c76 <gpio_mode_setup>
    
    gpio_set_output_options(SPF_USART_TX_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, SPF_USART_TX);
 80050f8:	002b      	movs	r3, r5
 80050fa:	2200      	movs	r2, #0
 80050fc:	2100      	movs	r1, #0
 80050fe:	0020      	movs	r0, r4
 8005100:	f001 fdd9 	bl	8006cb6 <gpio_set_output_options>

    gpio_set_af(SPF_USART_TX_PORT, SPF_USART_AF, SPF_USART_TX);
 8005104:	002a      	movs	r2, r5
 8005106:	2104      	movs	r1, #4
 8005108:	0020      	movs	r0, r4
 800510a:	f001 fdf2 	bl	8006cf2 <gpio_set_af>
    gpio_set_af(SPF_USART_RX_PORT, SPF_USART_AF, SPF_USART_RX);
 800510e:	0032      	movs	r2, r6
 8005110:	2104      	movs	r1, #4
 8005112:	0020      	movs	r0, r4
 8005114:	f001 fded 	bl	8006cf2 <gpio_set_af>
    
	rcc_periph_clock_enable(SPF_USART_RCC);
 8005118:	4814      	ldr	r0, [pc, #80]	; (800516c <usart_setup+0xa8>)
 800511a:	f001 ff1f 	bl	8006f5c <rcc_periph_clock_enable>
    rcc_periph_reset_pulse(SPF_USART_RCC_RST);
 800511e:	4814      	ldr	r0, [pc, #80]	; (8005170 <usart_setup+0xac>)
 8005120:	f001 ff38 	bl	8006f94 <rcc_periph_reset_pulse>
	usart_disable(SPF_USART);
 8005124:	4c13      	ldr	r4, [pc, #76]	; (8005174 <usart_setup+0xb0>)
 8005126:	0020      	movs	r0, r4
 8005128:	f001 ffed 	bl	8007106 <usart_disable>
	usart_set_baudrate(SPF_USART, SPF_USART_BAUD);
 800512c:	21e1      	movs	r1, #225	; 0xe1
 800512e:	0249      	lsls	r1, r1, #9
 8005130:	0020      	movs	r0, r4
 8005132:	f001 ff8b 	bl	800704c <usart_set_baudrate>
	usart_set_databits(SPF_USART, 8);
 8005136:	2108      	movs	r1, #8
 8005138:	0020      	movs	r0, r4
 800513a:	f001 ffb3 	bl	80070a4 <usart_set_databits>
	usart_set_stopbits(SPF_USART,USART_STOPBITS_1);
 800513e:	2100      	movs	r1, #0
 8005140:	0020      	movs	r0, r4
 8005142:	f001 ffbd 	bl	80070c0 <usart_set_stopbits>
	usart_set_mode(SPF_USART, USART_MODE_TX_RX);
 8005146:	210c      	movs	r1, #12
 8005148:	0020      	movs	r0, r4
 800514a:	f001 ffc9 	bl	80070e0 <usart_set_mode>
	usart_set_parity(SPF_USART, USART_PARITY_NONE);
 800514e:	2100      	movs	r1, #0
 8005150:	0020      	movs	r0, r4
 8005152:	f001 ffbd 	bl	80070d0 <usart_set_parity>
	usart_set_flow_control(SPF_USART, USART_FLOWCONTROL_NONE);
 8005156:	2100      	movs	r1, #0
 8005158:	0020      	movs	r0, r4
 800515a:	f001 ffc7 	bl	80070ec <usart_set_flow_control>
	usart_enable(SPF_USART);
 800515e:	0020      	movs	r0, r4
 8005160:	f001 ffcc 	bl	80070fc <usart_enable>
}
 8005164:	bd70      	pop	{r4, r5, r6, pc}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	00000581 	.word	0x00000581
 800516c:	0000068e 	.word	0x0000068e
 8005170:	0000048e 	.word	0x0000048e
 8005174:	40013800 	.word	0x40013800

08005178 <_putchar>:

static void _putchar(char character, void* buffer, size_t idx, size_t maxlen)
{
 8005178:	b510      	push	{r4, lr}
 800517a:	0004      	movs	r4, r0
	(void)buffer; (void)idx; (void)maxlen;

    mem_eeprom_write_byte(curr_address++, character);
 800517c:	4b05      	ldr	r3, [pc, #20]	; (8005194 <_putchar+0x1c>)
 800517e:	6818      	ldr	r0, [r3, #0]
 8005180:	1c42      	adds	r2, r0, #1
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	0021      	movs	r1, r4
 8005186:	f000 f861 	bl	800524c <mem_eeprom_write_byte>

    #ifdef DEBUG
	usart_send_blocking(SPF_USART, character);	
 800518a:	b2a1      	uxth	r1, r4
 800518c:	4802      	ldr	r0, [pc, #8]	; (8005198 <_putchar+0x20>)
 800518e:	f001 ffbf 	bl	8007110 <usart_send_blocking>
    #endif		
}
 8005192:	bd10      	pop	{r4, pc}
 8005194:	20000000 	.word	0x20000000
 8005198:	40013800 	.word	0x40013800

0800519c <log_init>:
{
 800519c:	b510      	push	{r4, lr}
    curr_address = 0;
 800519e:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <log_init+0x14>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]
    clock_setup();
 80051a4:	f7ff ff68 	bl	8005078 <clock_setup>
    usart_setup();
 80051a8:	f7ff ff8c 	bl	80050c4 <usart_setup>
}
 80051ac:	bd10      	pop	{r4, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	20000000 	.word	0x20000000

080051b4 <log_printf>:
{
 80051b4:	b40e      	push	{r1, r2, r3}
 80051b6:	b500      	push	{lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	aa05      	add	r2, sp, #20
 80051bc:	ca08      	ldmia	r2!, {r3}
	va_start(va, format);
 80051be:	9202      	str	r2, [sp, #8]
    switch (type)
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d007      	beq.n	80051d4 <log_printf+0x20>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {__asm__("nop");}
 80051c4:	2140      	movs	r1, #64	; 0x40
 80051c6:	480a      	ldr	r0, [pc, #40]	; (80051f0 <log_printf+0x3c>)
 80051c8:	f001 ffbe 	bl	8007148 <usart_get_flag>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d10a      	bne.n	80051e6 <log_printf+0x32>
 80051d0:	46c0      	nop			; (mov r8, r8)
 80051d2:	e7f7      	b.n	80051c4 <log_printf+0x10>
        _vsnprintf(_putchar, buffer, (size_t)-1, format, va);
 80051d4:	2201      	movs	r2, #1
 80051d6:	9902      	ldr	r1, [sp, #8]
 80051d8:	9100      	str	r1, [sp, #0]
 80051da:	4252      	negs	r2, r2
 80051dc:	a903      	add	r1, sp, #12
 80051de:	4805      	ldr	r0, [pc, #20]	; (80051f4 <log_printf+0x40>)
 80051e0:	f000 fb72 	bl	80058c8 <_vsnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {__asm__("nop");}
 80051e4:	e7ee      	b.n	80051c4 <log_printf+0x10>
}
 80051e6:	b004      	add	sp, #16
 80051e8:	bc08      	pop	{r3}
 80051ea:	b003      	add	sp, #12
 80051ec:	4718      	bx	r3
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	40013800 	.word	0x40013800
 80051f4:	08005179 	.word	0x08005179

080051f8 <mem_eeprom_write_word>:
    }
}


bool mem_eeprom_write_word(uint32_t address, uint32_t data)
{
 80051f8:	b570      	push	{r4, r5, r6, lr}
 80051fa:	0004      	movs	r4, r0
 80051fc:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 80051fe:	4b0f      	ldr	r3, [pc, #60]	; (800523c <mem_eeprom_write_word+0x44>)
 8005200:	18c2      	adds	r2, r0, r3
 8005202:	2380      	movs	r3, #128	; 0x80
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	429a      	cmp	r2, r3
 8005208:	d301      	bcc.n	800520e <mem_eeprom_write_word+0x16>
        return false;
 800520a:	2000      	movs	r0, #0
        FLASH_SR = FLASH_SR_EOP;

    flash_lock_pecr();

    return true;
}
 800520c:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock_pecr();
 800520e:	f001 fced 	bl	8006bec <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 8005212:	4a0b      	ldr	r2, [pc, #44]	; (8005240 <mem_eeprom_write_word+0x48>)
 8005214:	6813      	ldr	r3, [r2, #0]
 8005216:	490b      	ldr	r1, [pc, #44]	; (8005244 <mem_eeprom_write_word+0x4c>)
 8005218:	400b      	ands	r3, r1
 800521a:	6013      	str	r3, [r2, #0]
    MMIO32(address) = data;
 800521c:	6025      	str	r5, [r4, #0]
    while (FLASH_SR & FLASH_SR_BSY);
 800521e:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <mem_eeprom_write_word+0x50>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	07db      	lsls	r3, r3, #31
 8005224:	d4fb      	bmi.n	800521e <mem_eeprom_write_word+0x26>
    if (FLASH_SR & FLASH_SR_EOP)
 8005226:	4b08      	ldr	r3, [pc, #32]	; (8005248 <mem_eeprom_write_word+0x50>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	079b      	lsls	r3, r3, #30
 800522c:	d502      	bpl.n	8005234 <mem_eeprom_write_word+0x3c>
        FLASH_SR = FLASH_SR_EOP;
 800522e:	4b06      	ldr	r3, [pc, #24]	; (8005248 <mem_eeprom_write_word+0x50>)
 8005230:	2202      	movs	r2, #2
 8005232:	601a      	str	r2, [r3, #0]
    flash_lock_pecr();
 8005234:	f001 fce6 	bl	8006c04 <flash_lock_pecr>
    return true;
 8005238:	2001      	movs	r0, #1
 800523a:	e7e7      	b.n	800520c <mem_eeprom_write_word+0x14>
 800523c:	f7f80000 	.word	0xf7f80000
 8005240:	40022004 	.word	0x40022004
 8005244:	fffffeff 	.word	0xfffffeff
 8005248:	40022018 	.word	0x40022018

0800524c <mem_eeprom_write_byte>:

    return true;
}

bool mem_eeprom_write_byte(uint32_t address, uint8_t data)
{
 800524c:	b570      	push	{r4, r5, r6, lr}
 800524e:	0004      	movs	r4, r0
 8005250:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 8005252:	4b0f      	ldr	r3, [pc, #60]	; (8005290 <mem_eeprom_write_byte+0x44>)
 8005254:	18c2      	adds	r2, r0, r3
 8005256:	2380      	movs	r3, #128	; 0x80
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	429a      	cmp	r2, r3
 800525c:	d301      	bcc.n	8005262 <mem_eeprom_write_byte+0x16>
        return false;
 800525e:	2000      	movs	r0, #0
        FLASH_SR = FLASH_SR_EOP;

    flash_lock_pecr();

    return true;
}
 8005260:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock_pecr();
 8005262:	f001 fcc3 	bl	8006bec <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 8005266:	4a0b      	ldr	r2, [pc, #44]	; (8005294 <mem_eeprom_write_byte+0x48>)
 8005268:	6813      	ldr	r3, [r2, #0]
 800526a:	490b      	ldr	r1, [pc, #44]	; (8005298 <mem_eeprom_write_byte+0x4c>)
 800526c:	400b      	ands	r3, r1
 800526e:	6013      	str	r3, [r2, #0]
    MMIO8(address) = data;
 8005270:	7025      	strb	r5, [r4, #0]
    while (FLASH_SR & FLASH_SR_BSY);
 8005272:	4b0a      	ldr	r3, [pc, #40]	; (800529c <mem_eeprom_write_byte+0x50>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	07db      	lsls	r3, r3, #31
 8005278:	d4fb      	bmi.n	8005272 <mem_eeprom_write_byte+0x26>
    if (FLASH_SR & FLASH_SR_EOP)
 800527a:	4b08      	ldr	r3, [pc, #32]	; (800529c <mem_eeprom_write_byte+0x50>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	079b      	lsls	r3, r3, #30
 8005280:	d502      	bpl.n	8005288 <mem_eeprom_write_byte+0x3c>
        FLASH_SR = FLASH_SR_EOP;
 8005282:	4b06      	ldr	r3, [pc, #24]	; (800529c <mem_eeprom_write_byte+0x50>)
 8005284:	2202      	movs	r2, #2
 8005286:	601a      	str	r2, [r3, #0]
    flash_lock_pecr();
 8005288:	f001 fcbc 	bl	8006c04 <flash_lock_pecr>
    return true;
 800528c:	2001      	movs	r0, #1
 800528e:	e7e7      	b.n	8005260 <mem_eeprom_write_byte+0x14>
 8005290:	f7f80000 	.word	0xf7f80000
 8005294:	40022004 	.word	0x40022004
 8005298:	fffffeff 	.word	0xfffffeff
 800529c:	40022018 	.word	0x40022018

080052a0 <mem_flash_erase_page>:


bool mem_flash_erase_page(uint32_t address)
{
 80052a0:	b510      	push	{r4, lr}
 80052a2:	0004      	movs	r4, r0
    bool result = false;

    // Check page aligned
    if (address & 0x7F)
 80052a4:	0643      	lsls	r3, r0, #25
 80052a6:	d002      	beq.n	80052ae <mem_flash_erase_page+0xe>
        return false; 
 80052a8:	2400      	movs	r4, #0

    flash_unlock();
    result = mem_flash_do_page_erase(address);
    flash_lock();
    return result;
}
 80052aa:	0020      	movs	r0, r4
 80052ac:	bd10      	pop	{r4, pc}
    flash_unlock();
 80052ae:	f001 fccd 	bl	8006c4c <flash_unlock>
    result = mem_flash_do_page_erase(address);
 80052b2:	0020      	movs	r0, r4
 80052b4:	f003 fd00 	bl	8008cb8 <__mem_flash_do_page_erase_veneer>
 80052b8:	0004      	movs	r4, r0
    flash_lock();
 80052ba:	f001 fccf 	bl	8006c5c <flash_lock>
    return result;
 80052be:	e7f4      	b.n	80052aa <mem_flash_erase_page+0xa>

080052c0 <mem_flash_write_half_page>:

bool mem_flash_write_half_page(uint32_t address, uint32_t *data)
{
 80052c0:	b570      	push	{r4, r5, r6, lr}
 80052c2:	0004      	movs	r4, r0
 80052c4:	000d      	movs	r5, r1
    bool result = false;

    if ((uint32_t)address & 0x3F)
 80052c6:	0683      	lsls	r3, r0, #26
 80052c8:	d002      	beq.n	80052d0 <mem_flash_write_half_page+0x10>
        return false; //not half-page aligned
 80052ca:	2400      	movs	r4, #0

    flash_unlock();
    result = mem_flash_do_write_half_page(address, data);
    flash_lock();
    return result;
}
 80052cc:	0020      	movs	r0, r4
 80052ce:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock();
 80052d0:	f001 fcbc 	bl	8006c4c <flash_unlock>
    result = mem_flash_do_write_half_page(address, data);
 80052d4:	0029      	movs	r1, r5
 80052d6:	0020      	movs	r0, r4
 80052d8:	f003 fcf6 	bl	8008cc8 <__mem_flash_do_write_half_page_veneer>
 80052dc:	0004      	movs	r4, r0
    flash_lock();
 80052de:	f001 fcbd 	bl	8006c5c <flash_lock>
    return result;
 80052e2:	e7f3      	b.n	80052cc <mem_flash_write_half_page+0xc>

080052e4 <mem_get_dev_num>:
    return MMIO32(dev_state_add);
}

uint32_t mem_get_dev_num(void)
{
    return MMIO32(dev_num_add);
 80052e4:	4b01      	ldr	r3, [pc, #4]	; (80052ec <mem_get_dev_num+0x8>)
 80052e6:	6818      	ldr	r0, [r3, #0]
}
 80052e8:	4770      	bx	lr
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	08080004 	.word	0x08080004

080052f0 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80052f0:	4770      	bx	lr

080052f2 <_atoi>:
}


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80052f2:	0001      	movs	r1, r0
  unsigned int i = 0U;
 80052f4:	2000      	movs	r0, #0
  while (_is_digit(**str)) {
 80052f6:	680a      	ldr	r2, [r1, #0]
 80052f8:	7813      	ldrb	r3, [r2, #0]
  return (ch >= '0') && (ch <= '9');
 80052fa:	3b30      	subs	r3, #48	; 0x30
 80052fc:	b2db      	uxtb	r3, r3
  while (_is_digit(**str)) {
 80052fe:	2b09      	cmp	r3, #9
 8005300:	d808      	bhi.n	8005314 <_atoi+0x22>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8005302:	0083      	lsls	r3, r0, #2
 8005304:	181b      	adds	r3, r3, r0
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	1c50      	adds	r0, r2, #1
 800530a:	6008      	str	r0, [r1, #0]
 800530c:	7810      	ldrb	r0, [r2, #0]
 800530e:	18c0      	adds	r0, r0, r3
 8005310:	3830      	subs	r0, #48	; 0x30
 8005312:	e7f0      	b.n	80052f6 <_atoi+0x4>
  }
  return i;
}
 8005314:	4770      	bx	lr

08005316 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8005316:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005318:	46de      	mov	lr, fp
 800531a:	4657      	mov	r7, sl
 800531c:	464e      	mov	r6, r9
 800531e:	4645      	mov	r5, r8
 8005320:	b5e0      	push	{r5, r6, r7, lr}
 8005322:	b083      	sub	sp, #12
 8005324:	4693      	mov	fp, r2
 8005326:	001f      	movs	r7, r3
 8005328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800532a:	469a      	mov	sl, r3
 800532c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800532e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005330:	4699      	mov	r9, r3
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8005332:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005334:	079b      	lsls	r3, r3, #30
 8005336:	d003      	beq.n	8005340 <_out_rev+0x2a>
 8005338:	46b8      	mov	r8, r7
 800533a:	000f      	movs	r7, r1
 800533c:	0006      	movs	r6, r0
 800533e:	e022      	b.n	8005386 <_out_rev+0x70>
 8005340:	9201      	str	r2, [sp, #4]
 8005342:	46a3      	mov	fp, r4
 8005344:	4688      	mov	r8, r1
 8005346:	464e      	mov	r6, r9
 8005348:	46b9      	mov	r9, r7
 800534a:	0007      	movs	r7, r0
    for (size_t i = len; i < width; i++) {
 800534c:	42b4      	cmp	r4, r6
 800534e:	d207      	bcs.n	8005360 <_out_rev+0x4a>
      out(' ', buffer, idx++, maxlen);
 8005350:	1c55      	adds	r5, r2, #1
 8005352:	464b      	mov	r3, r9
 8005354:	4641      	mov	r1, r8
 8005356:	2020      	movs	r0, #32
 8005358:	47b8      	blx	r7
    for (size_t i = len; i < width; i++) {
 800535a:	3401      	adds	r4, #1
      out(' ', buffer, idx++, maxlen);
 800535c:	002a      	movs	r2, r5
 800535e:	e7f5      	b.n	800534c <_out_rev+0x36>
 8005360:	003d      	movs	r5, r7
 8005362:	464f      	mov	r7, r9
 8005364:	465c      	mov	r4, fp
 8005366:	9b01      	ldr	r3, [sp, #4]
 8005368:	469b      	mov	fp, r3
 800536a:	46b1      	mov	r9, r6
 800536c:	4646      	mov	r6, r8
 800536e:	46b8      	mov	r8, r7
 8005370:	0037      	movs	r7, r6
 8005372:	002e      	movs	r6, r5
 8005374:	e007      	b.n	8005386 <_out_rev+0x70>
    }
  }

  // reverse string
  while (len) {
    out(buf[--len], buffer, idx++, maxlen);
 8005376:	3c01      	subs	r4, #1
 8005378:	1c55      	adds	r5, r2, #1
 800537a:	4653      	mov	r3, sl
 800537c:	5d18      	ldrb	r0, [r3, r4]
 800537e:	4643      	mov	r3, r8
 8005380:	0039      	movs	r1, r7
 8005382:	47b0      	blx	r6
 8005384:	002a      	movs	r2, r5
  while (len) {
 8005386:	2c00      	cmp	r4, #0
 8005388:	d1f5      	bne.n	8005376 <_out_rev+0x60>
 800538a:	0035      	movs	r5, r6
 800538c:	003e      	movs	r6, r7
 800538e:	4647      	mov	r7, r8
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8005390:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005392:	079b      	lsls	r3, r3, #30
 8005394:	d407      	bmi.n	80053a6 <_out_rev+0x90>
      out(' ', buffer, idx++, maxlen);
    }
  }

  return idx;
}
 8005396:	0010      	movs	r0, r2
 8005398:	b003      	add	sp, #12
 800539a:	bcf0      	pop	{r4, r5, r6, r7}
 800539c:	46bb      	mov	fp, r7
 800539e:	46b2      	mov	sl, r6
 80053a0:	46a9      	mov	r9, r5
 80053a2:	46a0      	mov	r8, r4
 80053a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053a6:	46b0      	mov	r8, r6
 80053a8:	464e      	mov	r6, r9
 80053aa:	46b9      	mov	r9, r7
 80053ac:	002f      	movs	r7, r5
 80053ae:	465d      	mov	r5, fp
    while (idx - start_idx < width) {
 80053b0:	1b53      	subs	r3, r2, r5
 80053b2:	42b3      	cmp	r3, r6
 80053b4:	d2ef      	bcs.n	8005396 <_out_rev+0x80>
      out(' ', buffer, idx++, maxlen);
 80053b6:	1c54      	adds	r4, r2, #1
 80053b8:	464b      	mov	r3, r9
 80053ba:	4641      	mov	r1, r8
 80053bc:	2020      	movs	r0, #32
 80053be:	47b8      	blx	r7
 80053c0:	0022      	movs	r2, r4
 80053c2:	e7f5      	b.n	80053b0 <_out_rev+0x9a>

080053c4 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80053c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053c6:	46ce      	mov	lr, r9
 80053c8:	4647      	mov	r7, r8
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b085      	sub	sp, #20
 80053ce:	4694      	mov	ip, r2
 80053d0:	4698      	mov	r8, r3
 80053d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80053d6:	ab0e      	add	r3, sp, #56	; 0x38
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	4699      	mov	r9, r3
 80053dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80053de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053e0:	9e12      	ldr	r6, [sp, #72]	; 0x48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80053e2:	07b7      	lsls	r7, r6, #30
 80053e4:	d41b      	bmi.n	800541e <_ntoa_format+0x5a>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d008      	beq.n	80053fc <_ntoa_format+0x38>
 80053ea:	07f7      	lsls	r7, r6, #31
 80053ec:	d506      	bpl.n	80053fc <_ntoa_format+0x38>
 80053ee:	464f      	mov	r7, r9
 80053f0:	2f00      	cmp	r7, #0
 80053f2:	d102      	bne.n	80053fa <_ntoa_format+0x36>
 80053f4:	370c      	adds	r7, #12
 80053f6:	4237      	tst	r7, r6
 80053f8:	d000      	beq.n	80053fc <_ntoa_format+0x38>
      width--;
 80053fa:	3b01      	subs	r3, #1
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80053fc:	4294      	cmp	r4, r2
 80053fe:	d208      	bcs.n	8005412 <_ntoa_format+0x4e>
 8005400:	2c1f      	cmp	r4, #31
 8005402:	d806      	bhi.n	8005412 <_ntoa_format+0x4e>
      buf[len++] = '0';
 8005404:	2730      	movs	r7, #48	; 0x30
 8005406:	552f      	strb	r7, [r5, r4]
 8005408:	3401      	adds	r4, #1
 800540a:	e7f7      	b.n	80053fc <_ntoa_format+0x38>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 800540c:	2730      	movs	r7, #48	; 0x30
 800540e:	552f      	strb	r7, [r5, r4]
 8005410:	3401      	adds	r4, #1
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005412:	07f7      	lsls	r7, r6, #31
 8005414:	d503      	bpl.n	800541e <_ntoa_format+0x5a>
 8005416:	429c      	cmp	r4, r3
 8005418:	d201      	bcs.n	800541e <_ntoa_format+0x5a>
 800541a:	2c1f      	cmp	r4, #31
 800541c:	d9f6      	bls.n	800540c <_ntoa_format+0x48>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800541e:	06f7      	lsls	r7, r6, #27
 8005420:	d515      	bpl.n	800544e <_ntoa_format+0x8a>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8005422:	0577      	lsls	r7, r6, #21
 8005424:	d405      	bmi.n	8005432 <_ntoa_format+0x6e>
 8005426:	2c00      	cmp	r4, #0
 8005428:	d003      	beq.n	8005432 <_ntoa_format+0x6e>
 800542a:	4294      	cmp	r4, r2
 800542c:	d024      	beq.n	8005478 <_ntoa_format+0xb4>
 800542e:	429c      	cmp	r4, r3
 8005430:	d022      	beq.n	8005478 <_ntoa_format+0xb4>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005432:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005434:	2a10      	cmp	r2, #16
 8005436:	d02b      	beq.n	8005490 <_ntoa_format+0xcc>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005438:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800543a:	2a10      	cmp	r2, #16
 800543c:	d030      	beq.n	80054a0 <_ntoa_format+0xdc>
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800543e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005440:	2a02      	cmp	r2, #2
 8005442:	d035      	beq.n	80054b0 <_ntoa_format+0xec>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8005444:	2c1f      	cmp	r4, #31
 8005446:	d802      	bhi.n	800544e <_ntoa_format+0x8a>
      buf[len++] = '0';
 8005448:	2230      	movs	r2, #48	; 0x30
 800544a:	552a      	strb	r2, [r5, r4]
 800544c:	3401      	adds	r4, #1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800544e:	2c1f      	cmp	r4, #31
 8005450:	d805      	bhi.n	800545e <_ntoa_format+0x9a>
    if (negative) {
 8005452:	464a      	mov	r2, r9
 8005454:	2a00      	cmp	r2, #0
 8005456:	d031      	beq.n	80054bc <_ntoa_format+0xf8>
      buf[len++] = '-';
 8005458:	222d      	movs	r2, #45	; 0x2d
 800545a:	552a      	strb	r2, [r5, r4]
 800545c:	3401      	adds	r4, #1
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800545e:	9603      	str	r6, [sp, #12]
 8005460:	9302      	str	r3, [sp, #8]
 8005462:	9401      	str	r4, [sp, #4]
 8005464:	9500      	str	r5, [sp, #0]
 8005466:	4643      	mov	r3, r8
 8005468:	4662      	mov	r2, ip
 800546a:	f7ff ff54 	bl	8005316 <_out_rev>
}
 800546e:	b005      	add	sp, #20
 8005470:	bcc0      	pop	{r6, r7}
 8005472:	46b9      	mov	r9, r7
 8005474:	46b0      	mov	r8, r6
 8005476:	bdf0      	pop	{r4, r5, r6, r7, pc}
      len--;
 8005478:	1e62      	subs	r2, r4, #1
      if (len && (base == 16U)) {
 800547a:	2c01      	cmp	r4, #1
 800547c:	d006      	beq.n	800548c <_ntoa_format+0xc8>
 800547e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8005480:	2f10      	cmp	r7, #16
 8005482:	d001      	beq.n	8005488 <_ntoa_format+0xc4>
      len--;
 8005484:	0014      	movs	r4, r2
 8005486:	e7d4      	b.n	8005432 <_ntoa_format+0x6e>
        len--;
 8005488:	3c02      	subs	r4, #2
 800548a:	e7d2      	b.n	8005432 <_ntoa_format+0x6e>
      len--;
 800548c:	0014      	movs	r4, r2
 800548e:	e7d0      	b.n	8005432 <_ntoa_format+0x6e>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005490:	06b2      	lsls	r2, r6, #26
 8005492:	d4d1      	bmi.n	8005438 <_ntoa_format+0x74>
 8005494:	2c1f      	cmp	r4, #31
 8005496:	d8cf      	bhi.n	8005438 <_ntoa_format+0x74>
      buf[len++] = 'x';
 8005498:	2278      	movs	r2, #120	; 0x78
 800549a:	552a      	strb	r2, [r5, r4]
 800549c:	3401      	adds	r4, #1
 800549e:	e7d1      	b.n	8005444 <_ntoa_format+0x80>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80054a0:	06b2      	lsls	r2, r6, #26
 80054a2:	d5cc      	bpl.n	800543e <_ntoa_format+0x7a>
 80054a4:	2c1f      	cmp	r4, #31
 80054a6:	d8ca      	bhi.n	800543e <_ntoa_format+0x7a>
      buf[len++] = 'X';
 80054a8:	2258      	movs	r2, #88	; 0x58
 80054aa:	552a      	strb	r2, [r5, r4]
 80054ac:	3401      	adds	r4, #1
 80054ae:	e7c9      	b.n	8005444 <_ntoa_format+0x80>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80054b0:	2c1f      	cmp	r4, #31
 80054b2:	d8c7      	bhi.n	8005444 <_ntoa_format+0x80>
      buf[len++] = 'b';
 80054b4:	3260      	adds	r2, #96	; 0x60
 80054b6:	552a      	strb	r2, [r5, r4]
 80054b8:	3401      	adds	r4, #1
 80054ba:	e7c3      	b.n	8005444 <_ntoa_format+0x80>
    else if (flags & FLAGS_PLUS) {
 80054bc:	0772      	lsls	r2, r6, #29
 80054be:	d503      	bpl.n	80054c8 <_ntoa_format+0x104>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80054c0:	222b      	movs	r2, #43	; 0x2b
 80054c2:	552a      	strb	r2, [r5, r4]
 80054c4:	3401      	adds	r4, #1
 80054c6:	e7ca      	b.n	800545e <_ntoa_format+0x9a>
    else if (flags & FLAGS_SPACE) {
 80054c8:	0732      	lsls	r2, r6, #28
 80054ca:	d5c8      	bpl.n	800545e <_ntoa_format+0x9a>
      buf[len++] = ' ';
 80054cc:	2220      	movs	r2, #32
 80054ce:	552a      	strb	r2, [r5, r4]
 80054d0:	3401      	adds	r4, #1
 80054d2:	e7c4      	b.n	800545e <_ntoa_format+0x9a>

080054d4 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80054d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054d6:	46de      	mov	lr, fp
 80054d8:	4657      	mov	r7, sl
 80054da:	464e      	mov	r6, r9
 80054dc:	4645      	mov	r5, r8
 80054de:	b5e0      	push	{r5, r6, r7, lr}
 80054e0:	b093      	sub	sp, #76	; 0x4c
 80054e2:	4681      	mov	r9, r0
 80054e4:	468a      	mov	sl, r1
 80054e6:	9208      	str	r2, [sp, #32]
 80054e8:	9309      	str	r3, [sp, #36]	; 0x24
 80054ea:	ab1c      	add	r3, sp, #112	; 0x70
 80054ec:	cb10      	ldmia	r3!, {r4}
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	469b      	mov	fp, r3
 80054f2:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80054f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054f6:	4698      	mov	r8, r3
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 80054f8:	2c00      	cmp	r4, #0
 80054fa:	d103      	bne.n	8005504 <_ntoa_long+0x30>
    flags &= ~FLAGS_HASH;
 80054fc:	2310      	movs	r3, #16
 80054fe:	4642      	mov	r2, r8
 8005500:	439a      	bics	r2, r3
 8005502:	4690      	mov	r8, r2
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8005504:	2380      	movs	r3, #128	; 0x80
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	4646      	mov	r6, r8
 800550a:	401e      	ands	r6, r3
 800550c:	4642      	mov	r2, r8
 800550e:	421a      	tst	r2, r3
 8005510:	d012      	beq.n	8005538 <_ntoa_long+0x64>
 8005512:	2c00      	cmp	r4, #0
 8005514:	d022      	beq.n	800555c <_ntoa_long+0x88>
 8005516:	2600      	movs	r6, #0
 8005518:	e00e      	b.n	8005538 <_ntoa_long+0x64>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800551a:	3330      	adds	r3, #48	; 0x30
 800551c:	b2d9      	uxtb	r1, r3
 800551e:	1c77      	adds	r7, r6, #1
 8005520:	ab0a      	add	r3, sp, #40	; 0x28
 8005522:	5599      	strb	r1, [r3, r6]
      value /= base;
 8005524:	0029      	movs	r1, r5
 8005526:	0020      	movs	r0, r4
 8005528:	f001 ff38 	bl	800739c <__udivsi3>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800552c:	42ac      	cmp	r4, r5
 800552e:	d316      	bcc.n	800555e <_ntoa_long+0x8a>
 8005530:	2f1f      	cmp	r7, #31
 8005532:	d814      	bhi.n	800555e <_ntoa_long+0x8a>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8005534:	003e      	movs	r6, r7
      value /= base;
 8005536:	0004      	movs	r4, r0
      const char digit = (char)(value % base);
 8005538:	0029      	movs	r1, r5
 800553a:	0020      	movs	r0, r4
 800553c:	f001 ffb4 	bl	80074a8 <__aeabi_uidivmod>
 8005540:	b2cb      	uxtb	r3, r1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8005542:	2b09      	cmp	r3, #9
 8005544:	d9e9      	bls.n	800551a <_ntoa_long+0x46>
 8005546:	4642      	mov	r2, r8
 8005548:	0692      	lsls	r2, r2, #26
 800554a:	d505      	bpl.n	8005558 <_ntoa_long+0x84>
 800554c:	2141      	movs	r1, #65	; 0x41
 800554e:	18c9      	adds	r1, r1, r3
 8005550:	b2c9      	uxtb	r1, r1
 8005552:	390a      	subs	r1, #10
 8005554:	b2c9      	uxtb	r1, r1
 8005556:	e7e2      	b.n	800551e <_ntoa_long+0x4a>
 8005558:	2161      	movs	r1, #97	; 0x61
 800555a:	e7f8      	b.n	800554e <_ntoa_long+0x7a>
  size_t len = 0U;
 800555c:	0027      	movs	r7, r4
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800555e:	4643      	mov	r3, r8
 8005560:	9306      	str	r3, [sp, #24]
 8005562:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005564:	9305      	str	r3, [sp, #20]
 8005566:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005568:	9304      	str	r3, [sp, #16]
 800556a:	9503      	str	r5, [sp, #12]
 800556c:	465b      	mov	r3, fp
 800556e:	9302      	str	r3, [sp, #8]
 8005570:	9701      	str	r7, [sp, #4]
 8005572:	ab0a      	add	r3, sp, #40	; 0x28
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005578:	9a08      	ldr	r2, [sp, #32]
 800557a:	4651      	mov	r1, sl
 800557c:	4648      	mov	r0, r9
 800557e:	f7ff ff21 	bl	80053c4 <_ntoa_format>
}
 8005582:	b013      	add	sp, #76	; 0x4c
 8005584:	bcf0      	pop	{r4, r5, r6, r7}
 8005586:	46bb      	mov	fp, r7
 8005588:	46b2      	mov	sl, r6
 800558a:	46a9      	mov	r9, r5
 800558c:	46a0      	mov	r8, r4
 800558e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005590 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005592:	46de      	mov	lr, fp
 8005594:	4657      	mov	r7, sl
 8005596:	464e      	mov	r6, r9
 8005598:	4645      	mov	r5, r8
 800559a:	b5e0      	push	{r5, r6, r7, lr}
 800559c:	b093      	sub	sp, #76	; 0x4c
 800559e:	9004      	str	r0, [sp, #16]
 80055a0:	9105      	str	r1, [sp, #20]
 80055a2:	4692      	mov	sl, r2
 80055a4:	469b      	mov	fp, r3
 80055a6:	9d1e      	ldr	r5, [sp, #120]	; 0x78

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80055a8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80055aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80055ac:	0010      	movs	r0, r2
 80055ae:	0019      	movs	r1, r3
 80055b0:	f002 f87a 	bl	80076a8 <__aeabi_dcmpeq>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	d033      	beq.n	8005620 <_ftoa+0x90>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
  if (value < -DBL_MAX)
 80055b8:	2201      	movs	r2, #1
 80055ba:	4252      	negs	r2, r2
 80055bc:	4bb8      	ldr	r3, [pc, #736]	; (80058a0 <_ftoa+0x310>)
 80055be:	981c      	ldr	r0, [sp, #112]	; 0x70
 80055c0:	991d      	ldr	r1, [sp, #116]	; 0x74
 80055c2:	f002 f877 	bl	80076b4 <__aeabi_dcmplt>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d139      	bne.n	800563e <_ftoa+0xae>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
  if (value > DBL_MAX)
 80055ca:	2201      	movs	r2, #1
 80055cc:	4252      	negs	r2, r2
 80055ce:	4bb5      	ldr	r3, [pc, #724]	; (80058a4 <_ftoa+0x314>)
 80055d0:	981c      	ldr	r0, [sp, #112]	; 0x70
 80055d2:	991d      	ldr	r1, [sp, #116]	; 0x74
 80055d4:	f002 f882 	bl	80076dc <__aeabi_dcmpgt>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d13f      	bne.n	800565c <_ftoa+0xcc>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80055dc:	2200      	movs	r2, #0
 80055de:	4bb2      	ldr	r3, [pc, #712]	; (80058a8 <_ftoa+0x318>)
 80055e0:	981c      	ldr	r0, [sp, #112]	; 0x70
 80055e2:	991d      	ldr	r1, [sp, #116]	; 0x74
 80055e4:	f002 f87a 	bl	80076dc <__aeabi_dcmpgt>
 80055e8:	2800      	cmp	r0, #0
 80055ea:	d000      	beq.n	80055ee <_ftoa+0x5e>
 80055ec:	e153      	b.n	8005896 <_ftoa+0x306>
 80055ee:	2200      	movs	r2, #0
 80055f0:	4bae      	ldr	r3, [pc, #696]	; (80058ac <_ftoa+0x31c>)
 80055f2:	981c      	ldr	r0, [sp, #112]	; 0x70
 80055f4:	991d      	ldr	r1, [sp, #116]	; 0x74
 80055f6:	f002 f85d 	bl	80076b4 <__aeabi_dcmplt>
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d000      	beq.n	8005600 <_ftoa+0x70>
 80055fe:	e14c      	b.n	800589a <_ftoa+0x30a>
#endif
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
 8005600:	2200      	movs	r2, #0
 8005602:	2300      	movs	r3, #0
 8005604:	981c      	ldr	r0, [sp, #112]	; 0x70
 8005606:	991d      	ldr	r1, [sp, #116]	; 0x74
 8005608:	f002 f854 	bl	80076b4 <__aeabi_dcmplt>
 800560c:	2800      	cmp	r0, #0
 800560e:	d146      	bne.n	800569e <_ftoa+0x10e>
  bool negative = false;
 8005610:	2300      	movs	r3, #0
 8005612:	4699      	mov	r9, r3
    negative = true;
    value = 0 - value;
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8005614:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005616:	055b      	lsls	r3, r3, #21
 8005618:	d400      	bmi.n	800561c <_ftoa+0x8c>
 800561a:	e0ac      	b.n	8005776 <_ftoa+0x1e6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800561c:	2400      	movs	r4, #0
 800561e:	e04e      	b.n	80056be <_ftoa+0x12e>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8005620:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005622:	9303      	str	r3, [sp, #12]
 8005624:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005626:	9302      	str	r3, [sp, #8]
 8005628:	2303      	movs	r3, #3
 800562a:	9301      	str	r3, [sp, #4]
 800562c:	4ba0      	ldr	r3, [pc, #640]	; (80058b0 <_ftoa+0x320>)
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	465b      	mov	r3, fp
 8005632:	4652      	mov	r2, sl
 8005634:	9905      	ldr	r1, [sp, #20]
 8005636:	9804      	ldr	r0, [sp, #16]
 8005638:	f7ff fe6d 	bl	8005316 <_out_rev>
 800563c:	e024      	b.n	8005688 <_ftoa+0xf8>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800563e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005640:	9303      	str	r3, [sp, #12]
 8005642:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005644:	9302      	str	r3, [sp, #8]
 8005646:	2304      	movs	r3, #4
 8005648:	9301      	str	r3, [sp, #4]
 800564a:	4b9a      	ldr	r3, [pc, #616]	; (80058b4 <_ftoa+0x324>)
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	465b      	mov	r3, fp
 8005650:	4652      	mov	r2, sl
 8005652:	9905      	ldr	r1, [sp, #20]
 8005654:	9804      	ldr	r0, [sp, #16]
 8005656:	f7ff fe5e 	bl	8005316 <_out_rev>
 800565a:	e015      	b.n	8005688 <_ftoa+0xf8>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800565c:	2304      	movs	r3, #4
 800565e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005660:	401a      	ands	r2, r3
 8005662:	9920      	ldr	r1, [sp, #128]	; 0x80
 8005664:	420b      	tst	r3, r1
 8005666:	d016      	beq.n	8005696 <_ftoa+0x106>
 8005668:	4b93      	ldr	r3, [pc, #588]	; (80058b8 <_ftoa+0x328>)
 800566a:	2a00      	cmp	r2, #0
 800566c:	d015      	beq.n	800569a <_ftoa+0x10a>
 800566e:	2204      	movs	r2, #4
 8005670:	9920      	ldr	r1, [sp, #128]	; 0x80
 8005672:	9103      	str	r1, [sp, #12]
 8005674:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8005676:	9102      	str	r1, [sp, #8]
 8005678:	9201      	str	r2, [sp, #4]
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	465b      	mov	r3, fp
 800567e:	4652      	mov	r2, sl
 8005680:	9905      	ldr	r1, [sp, #20]
 8005682:	9804      	ldr	r0, [sp, #16]
 8005684:	f7ff fe47 	bl	8005316 <_out_rev>
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 8005688:	b013      	add	sp, #76	; 0x4c
 800568a:	bcf0      	pop	{r4, r5, r6, r7}
 800568c:	46bb      	mov	fp, r7
 800568e:	46b2      	mov	sl, r6
 8005690:	46a9      	mov	r9, r5
 8005692:	46a0      	mov	r8, r4
 8005694:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8005696:	4b89      	ldr	r3, [pc, #548]	; (80058bc <_ftoa+0x32c>)
 8005698:	e7e7      	b.n	800566a <_ftoa+0xda>
 800569a:	2203      	movs	r2, #3
 800569c:	e7e8      	b.n	8005670 <_ftoa+0xe0>
    value = 0 - value;
 800569e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80056a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80056a2:	2000      	movs	r0, #0
 80056a4:	2100      	movs	r1, #0
 80056a6:	f002 febd 	bl	8008424 <__aeabi_dsub>
 80056aa:	901c      	str	r0, [sp, #112]	; 0x70
 80056ac:	911d      	str	r1, [sp, #116]	; 0x74
    negative = true;
 80056ae:	2301      	movs	r3, #1
 80056b0:	4699      	mov	r9, r3
 80056b2:	e7af      	b.n	8005614 <_ftoa+0x84>
    buf[len++] = '0';
 80056b4:	ab0a      	add	r3, sp, #40	; 0x28
 80056b6:	2230      	movs	r2, #48	; 0x30
 80056b8:	551a      	strb	r2, [r3, r4]
    prec--;
 80056ba:	3d01      	subs	r5, #1
    buf[len++] = '0';
 80056bc:	3401      	adds	r4, #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80056be:	2c1f      	cmp	r4, #31
 80056c0:	d801      	bhi.n	80056c6 <_ftoa+0x136>
 80056c2:	2d09      	cmp	r5, #9
 80056c4:	d8f6      	bhi.n	80056b4 <_ftoa+0x124>
  int whole = (int)value;
 80056c6:	981c      	ldr	r0, [sp, #112]	; 0x70
 80056c8:	991d      	ldr	r1, [sp, #116]	; 0x74
 80056ca:	f003 fa3d 	bl	8008b48 <__aeabi_d2iz>
 80056ce:	0007      	movs	r7, r0
  double tmp = (value - whole) * pow10[prec];
 80056d0:	f003 fa70 	bl	8008bb4 <__aeabi_i2d>
 80056d4:	0002      	movs	r2, r0
 80056d6:	000b      	movs	r3, r1
 80056d8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80056da:	991d      	ldr	r1, [sp, #116]	; 0x74
 80056dc:	f002 fea2 	bl	8008424 <__aeabi_dsub>
 80056e0:	00ea      	lsls	r2, r5, #3
 80056e2:	4b77      	ldr	r3, [pc, #476]	; (80058c0 <_ftoa+0x330>)
 80056e4:	189b      	adds	r3, r3, r2
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	9208      	str	r2, [sp, #32]
 80056ec:	9309      	str	r3, [sp, #36]	; 0x24
 80056ee:	f002 fc2d 	bl	8007f4c <__aeabi_dmul>
  unsigned long frac = (unsigned long)tmp;
 80056f2:	9006      	str	r0, [sp, #24]
 80056f4:	9107      	str	r1, [sp, #28]
 80056f6:	f002 f805 	bl	8007704 <__aeabi_d2uiz>
 80056fa:	0006      	movs	r6, r0
  diff = tmp - frac;
 80056fc:	f003 fa8a 	bl	8008c14 <__aeabi_ui2d>
 8005700:	0002      	movs	r2, r0
 8005702:	000b      	movs	r3, r1
 8005704:	9806      	ldr	r0, [sp, #24]
 8005706:	9907      	ldr	r1, [sp, #28]
 8005708:	f002 fe8c 	bl	8008424 <__aeabi_dsub>
 800570c:	9006      	str	r0, [sp, #24]
 800570e:	9107      	str	r1, [sp, #28]
  if (diff > 0.5) {
 8005710:	2200      	movs	r2, #0
 8005712:	4b6c      	ldr	r3, [pc, #432]	; (80058c4 <_ftoa+0x334>)
 8005714:	f001 ffe2 	bl	80076dc <__aeabi_dcmpgt>
 8005718:	2800      	cmp	r0, #0
 800571a:	d02e      	beq.n	800577a <_ftoa+0x1ea>
    ++frac;
 800571c:	3601      	adds	r6, #1
    if (frac >= pow10[prec]) {
 800571e:	0030      	movs	r0, r6
 8005720:	f003 fa78 	bl	8008c14 <__aeabi_ui2d>
 8005724:	0002      	movs	r2, r0
 8005726:	000b      	movs	r3, r1
 8005728:	9808      	ldr	r0, [sp, #32]
 800572a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800572c:	f001 ffcc 	bl	80076c8 <__aeabi_dcmple>
 8005730:	2800      	cmp	r0, #0
 8005732:	d001      	beq.n	8005738 <_ftoa+0x1a8>
      ++whole;
 8005734:	3701      	adds	r7, #1
      frac = 0;
 8005736:	2600      	movs	r6, #0
  if (prec == 0U) {
 8005738:	2d00      	cmp	r5, #0
 800573a:	d12c      	bne.n	8005796 <_ftoa+0x206>
    diff = value - (double)whole;
 800573c:	0038      	movs	r0, r7
 800573e:	f003 fa39 	bl	8008bb4 <__aeabi_i2d>
 8005742:	0002      	movs	r2, r0
 8005744:	000b      	movs	r3, r1
 8005746:	981c      	ldr	r0, [sp, #112]	; 0x70
 8005748:	991d      	ldr	r1, [sp, #116]	; 0x74
 800574a:	f002 fe6b 	bl	8008424 <__aeabi_dsub>
 800574e:	0005      	movs	r5, r0
 8005750:	000e      	movs	r6, r1
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8005752:	2200      	movs	r2, #0
 8005754:	4b5b      	ldr	r3, [pc, #364]	; (80058c4 <_ftoa+0x334>)
 8005756:	f001 ffad 	bl	80076b4 <__aeabi_dcmplt>
 800575a:	2800      	cmp	r0, #0
 800575c:	d007      	beq.n	800576e <_ftoa+0x1de>
 800575e:	2200      	movs	r2, #0
 8005760:	4b58      	ldr	r3, [pc, #352]	; (80058c4 <_ftoa+0x334>)
 8005762:	0028      	movs	r0, r5
 8005764:	0031      	movs	r1, r6
 8005766:	f001 ffb9 	bl	80076dc <__aeabi_dcmpgt>
 800576a:	2800      	cmp	r0, #0
 800576c:	d03e      	beq.n	80057ec <_ftoa+0x25c>
 800576e:	07fb      	lsls	r3, r7, #31
 8005770:	d53c      	bpl.n	80057ec <_ftoa+0x25c>
      ++whole;
 8005772:	3701      	adds	r7, #1
 8005774:	e03a      	b.n	80057ec <_ftoa+0x25c>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8005776:	2506      	movs	r5, #6
 8005778:	e750      	b.n	800561c <_ftoa+0x8c>
  else if (diff < 0.5) {
 800577a:	2200      	movs	r2, #0
 800577c:	4b51      	ldr	r3, [pc, #324]	; (80058c4 <_ftoa+0x334>)
 800577e:	9806      	ldr	r0, [sp, #24]
 8005780:	9907      	ldr	r1, [sp, #28]
 8005782:	f001 ff97 	bl	80076b4 <__aeabi_dcmplt>
 8005786:	2800      	cmp	r0, #0
 8005788:	d1d6      	bne.n	8005738 <_ftoa+0x1a8>
  else if ((frac == 0U) || (frac & 1U)) {
 800578a:	2e00      	cmp	r6, #0
 800578c:	d001      	beq.n	8005792 <_ftoa+0x202>
 800578e:	07f3      	lsls	r3, r6, #31
 8005790:	d5d2      	bpl.n	8005738 <_ftoa+0x1a8>
    ++frac;
 8005792:	3601      	adds	r6, #1
 8005794:	e7d0      	b.n	8005738 <_ftoa+0x1a8>
 8005796:	46b8      	mov	r8, r7
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005798:	2c1f      	cmp	r4, #31
 800579a:	d811      	bhi.n	80057c0 <_ftoa+0x230>
      --count;
 800579c:	3d01      	subs	r5, #1
      buf[len++] = (char)(48U + (frac % 10U));
 800579e:	210a      	movs	r1, #10
 80057a0:	0030      	movs	r0, r6
 80057a2:	f001 fe81 	bl	80074a8 <__aeabi_uidivmod>
 80057a6:	1c67      	adds	r7, r4, #1
 80057a8:	3130      	adds	r1, #48	; 0x30
 80057aa:	ab0a      	add	r3, sp, #40	; 0x28
 80057ac:	5519      	strb	r1, [r3, r4]
      if (!(frac /= 10U)) {
 80057ae:	210a      	movs	r1, #10
 80057b0:	0030      	movs	r0, r6
 80057b2:	f001 fdf3 	bl	800739c <__udivsi3>
 80057b6:	2e09      	cmp	r6, #9
 80057b8:	d90e      	bls.n	80057d8 <_ftoa+0x248>
 80057ba:	0006      	movs	r6, r0
      buf[len++] = (char)(48U + (frac % 10U));
 80057bc:	003c      	movs	r4, r7
 80057be:	e7eb      	b.n	8005798 <_ftoa+0x208>
 80057c0:	4647      	mov	r7, r8
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80057c2:	2c1f      	cmp	r4, #31
 80057c4:	d80c      	bhi.n	80057e0 <_ftoa+0x250>
 80057c6:	1e6b      	subs	r3, r5, #1
 80057c8:	2d00      	cmp	r5, #0
 80057ca:	d009      	beq.n	80057e0 <_ftoa+0x250>
      buf[len++] = '0';
 80057cc:	aa0a      	add	r2, sp, #40	; 0x28
 80057ce:	2130      	movs	r1, #48	; 0x30
 80057d0:	5511      	strb	r1, [r2, r4]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80057d2:	001d      	movs	r5, r3
      buf[len++] = '0';
 80057d4:	3401      	adds	r4, #1
 80057d6:	e7f4      	b.n	80057c2 <_ftoa+0x232>
 80057d8:	003b      	movs	r3, r7
 80057da:	4647      	mov	r7, r8
      buf[len++] = (char)(48U + (frac % 10U));
 80057dc:	001c      	movs	r4, r3
 80057de:	e7f0      	b.n	80057c2 <_ftoa+0x232>
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80057e0:	2c1f      	cmp	r4, #31
 80057e2:	d803      	bhi.n	80057ec <_ftoa+0x25c>
      buf[len++] = '.';
 80057e4:	ab0a      	add	r3, sp, #40	; 0x28
 80057e6:	222e      	movs	r2, #46	; 0x2e
 80057e8:	551a      	strb	r2, [r3, r4]
 80057ea:	3401      	adds	r4, #1
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80057ec:	2c1f      	cmp	r4, #31
 80057ee:	d810      	bhi.n	8005812 <_ftoa+0x282>
    buf[len++] = (char)(48 + (whole % 10));
 80057f0:	210a      	movs	r1, #10
 80057f2:	0038      	movs	r0, r7
 80057f4:	f001 ff42 	bl	800767c <__aeabi_idivmod>
 80057f8:	1c65      	adds	r5, r4, #1
 80057fa:	3130      	adds	r1, #48	; 0x30
 80057fc:	ab0a      	add	r3, sp, #40	; 0x28
 80057fe:	5519      	strb	r1, [r3, r4]
    if (!(whole /= 10)) {
 8005800:	210a      	movs	r1, #10
 8005802:	0038      	movs	r0, r7
 8005804:	f001 fe54 	bl	80074b0 <__divsi3>
 8005808:	1e07      	subs	r7, r0, #0
 800580a:	d001      	beq.n	8005810 <_ftoa+0x280>
    buf[len++] = (char)(48 + (whole % 10));
 800580c:	002c      	movs	r4, r5
 800580e:	e7ed      	b.n	80057ec <_ftoa+0x25c>
 8005810:	002c      	movs	r4, r5
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8005812:	2303      	movs	r3, #3
 8005814:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005816:	4013      	ands	r3, r2
 8005818:	2b01      	cmp	r3, #1
 800581a:	d016      	beq.n	800584a <_ftoa+0x2ba>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800581c:	2c1f      	cmp	r4, #31
 800581e:	d806      	bhi.n	800582e <_ftoa+0x29e>
    if (negative) {
 8005820:	464b      	mov	r3, r9
 8005822:	2b00      	cmp	r3, #0
 8005824:	d027      	beq.n	8005876 <_ftoa+0x2e6>
      buf[len++] = '-';
 8005826:	ab0a      	add	r3, sp, #40	; 0x28
 8005828:	222d      	movs	r2, #45	; 0x2d
 800582a:	551a      	strb	r2, [r3, r4]
 800582c:	3401      	adds	r4, #1
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800582e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005830:	9303      	str	r3, [sp, #12]
 8005832:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005834:	9302      	str	r3, [sp, #8]
 8005836:	9401      	str	r4, [sp, #4]
 8005838:	ab0a      	add	r3, sp, #40	; 0x28
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	465b      	mov	r3, fp
 800583e:	4652      	mov	r2, sl
 8005840:	9905      	ldr	r1, [sp, #20]
 8005842:	9804      	ldr	r0, [sp, #16]
 8005844:	f7ff fd67 	bl	8005316 <_out_rev>
 8005848:	e71e      	b.n	8005688 <_ftoa+0xf8>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800584a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800584c:	2b00      	cmp	r3, #0
 800584e:	d008      	beq.n	8005862 <_ftoa+0x2d2>
 8005850:	464b      	mov	r3, r9
 8005852:	2b00      	cmp	r3, #0
 8005854:	d102      	bne.n	800585c <_ftoa+0x2cc>
 8005856:	330c      	adds	r3, #12
 8005858:	4213      	tst	r3, r2
 800585a:	d002      	beq.n	8005862 <_ftoa+0x2d2>
      width--;
 800585c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800585e:	3b01      	subs	r3, #1
 8005860:	931f      	str	r3, [sp, #124]	; 0x7c
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8005862:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005864:	429c      	cmp	r4, r3
 8005866:	d2d9      	bcs.n	800581c <_ftoa+0x28c>
 8005868:	2c1f      	cmp	r4, #31
 800586a:	d8d7      	bhi.n	800581c <_ftoa+0x28c>
      buf[len++] = '0';
 800586c:	ab0a      	add	r3, sp, #40	; 0x28
 800586e:	2230      	movs	r2, #48	; 0x30
 8005870:	551a      	strb	r2, [r3, r4]
 8005872:	3401      	adds	r4, #1
 8005874:	e7f5      	b.n	8005862 <_ftoa+0x2d2>
    else if (flags & FLAGS_PLUS) {
 8005876:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005878:	075b      	lsls	r3, r3, #29
 800587a:	d504      	bpl.n	8005886 <_ftoa+0x2f6>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800587c:	ab0a      	add	r3, sp, #40	; 0x28
 800587e:	222b      	movs	r2, #43	; 0x2b
 8005880:	551a      	strb	r2, [r3, r4]
 8005882:	3401      	adds	r4, #1
 8005884:	e7d3      	b.n	800582e <_ftoa+0x29e>
    else if (flags & FLAGS_SPACE) {
 8005886:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005888:	071b      	lsls	r3, r3, #28
 800588a:	d5d0      	bpl.n	800582e <_ftoa+0x29e>
      buf[len++] = ' ';
 800588c:	ab0a      	add	r3, sp, #40	; 0x28
 800588e:	2220      	movs	r2, #32
 8005890:	551a      	strb	r2, [r3, r4]
 8005892:	3401      	adds	r4, #1
 8005894:	e7cb      	b.n	800582e <_ftoa+0x29e>
    return 0U;
 8005896:	2000      	movs	r0, #0
 8005898:	e6f6      	b.n	8005688 <_ftoa+0xf8>
 800589a:	2000      	movs	r0, #0
 800589c:	e6f4      	b.n	8005688 <_ftoa+0xf8>
 800589e:	46c0      	nop			; (mov r8, r8)
 80058a0:	ffefffff 	.word	0xffefffff
 80058a4:	7fefffff 	.word	0x7fefffff
 80058a8:	41cdcd65 	.word	0x41cdcd65
 80058ac:	c1cdcd65 	.word	0xc1cdcd65
 80058b0:	08009328 	.word	0x08009328
 80058b4:	0800932c 	.word	0x0800932c
 80058b8:	08009320 	.word	0x08009320
 80058bc:	0800931c 	.word	0x0800931c
 80058c0:	080094c8 	.word	0x080094c8
 80058c4:	3fe00000 	.word	0x3fe00000

080058c8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT



int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80058c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ca:	46de      	mov	lr, fp
 80058cc:	4657      	mov	r7, sl
 80058ce:	464e      	mov	r6, r9
 80058d0:	4645      	mov	r5, r8
 80058d2:	b5e0      	push	{r5, r6, r7, lr}
 80058d4:	b08b      	sub	sp, #44	; 0x2c
 80058d6:	0006      	movs	r6, r0
 80058d8:	468a      	mov	sl, r1
 80058da:	4691      	mov	r9, r2
 80058dc:	9309      	str	r3, [sp, #36]	; 0x24
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 80058de:	2900      	cmp	r1, #0
 80058e0:	d100      	bne.n	80058e4 <_vsnprintf+0x1c>
 80058e2:	e269      	b.n	8005db8 <_vsnprintf+0x4f0>
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        format++;
        break;
 80058e4:	2400      	movs	r4, #0
  while (*format)
 80058e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e8:	7818      	ldrb	r0, [r3, #0]
 80058ea:	2800      	cmp	r0, #0
 80058ec:	d100      	bne.n	80058f0 <_vsnprintf+0x28>
 80058ee:	e265      	b.n	8005dbc <_vsnprintf+0x4f4>
    if (*format != '%') {
 80058f0:	2825      	cmp	r0, #37	; 0x25
 80058f2:	d009      	beq.n	8005908 <_vsnprintf+0x40>
      out(*format, buffer, idx++, maxlen);
 80058f4:	1c65      	adds	r5, r4, #1
 80058f6:	464b      	mov	r3, r9
 80058f8:	0022      	movs	r2, r4
 80058fa:	4651      	mov	r1, sl
 80058fc:	47b0      	blx	r6
      format++;
 80058fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005900:	3301      	adds	r3, #1
 8005902:	9309      	str	r3, [sp, #36]	; 0x24
      out(*format, buffer, idx++, maxlen);
 8005904:	002c      	movs	r4, r5
      continue;
 8005906:	e7ee      	b.n	80058e6 <_vsnprintf+0x1e>
      format++;
 8005908:	3301      	adds	r3, #1
 800590a:	9309      	str	r3, [sp, #36]	; 0x24
    flags = 0U;
 800590c:	2500      	movs	r5, #0
 800590e:	e02d      	b.n	800596c <_vsnprintf+0xa4>
  return (ch >= '0') && (ch <= '9');
 8005910:	000b      	movs	r3, r1
 8005912:	3b30      	subs	r3, #48	; 0x30
 8005914:	b2db      	uxtb	r3, r3
    if (_is_digit(*format)) {
 8005916:	2b09      	cmp	r3, #9
 8005918:	d947      	bls.n	80059aa <_vsnprintf+0xe2>
    else if (*format == '*') {
 800591a:	292a      	cmp	r1, #42	; 0x2a
 800591c:	d04a      	beq.n	80059b4 <_vsnprintf+0xec>
    width = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	9306      	str	r3, [sp, #24]
    if (*format == '.') {
 8005922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005924:	781a      	ldrb	r2, [r3, #0]
 8005926:	2a2e      	cmp	r2, #46	; 0x2e
 8005928:	d054      	beq.n	80059d4 <_vsnprintf+0x10c>
    precision = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	469b      	mov	fp, r3
    switch (*format) {
 800592e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005930:	7813      	ldrb	r3, [r2, #0]
 8005932:	2b6c      	cmp	r3, #108	; 0x6c
 8005934:	d078      	beq.n	8005a28 <_vsnprintf+0x160>
 8005936:	d86f      	bhi.n	8005a18 <_vsnprintf+0x150>
 8005938:	2b68      	cmp	r3, #104	; 0x68
 800593a:	d100      	bne.n	800593e <_vsnprintf+0x76>
 800593c:	e084      	b.n	8005a48 <_vsnprintf+0x180>
 800593e:	2b6a      	cmp	r3, #106	; 0x6a
 8005940:	d104      	bne.n	800594c <_vsnprintf+0x84>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005942:	2380      	movs	r3, #128	; 0x80
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	431d      	orrs	r5, r3
        format++;
 8005948:	3201      	adds	r2, #1
 800594a:	9209      	str	r2, [sp, #36]	; 0x24
    switch (*format) {
 800594c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800594e:	7818      	ldrb	r0, [r3, #0]
 8005950:	0003      	movs	r3, r0
 8005952:	3b25      	subs	r3, #37	; 0x25
 8005954:	b2da      	uxtb	r2, r3
 8005956:	2a53      	cmp	r2, #83	; 0x53
 8005958:	d900      	bls.n	800595c <_vsnprintf+0x94>
 800595a:	e223      	b.n	8005da4 <_vsnprintf+0x4dc>
 800595c:	0093      	lsls	r3, r2, #2
 800595e:	4acb      	ldr	r2, [pc, #812]	; (8005c8c <_vsnprintf+0x3c4>)
 8005960:	58d3      	ldr	r3, [r2, r3]
 8005962:	469f      	mov	pc, r3
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8005964:	2301      	movs	r3, #1
 8005966:	431d      	orrs	r5, r3
 8005968:	3201      	adds	r2, #1
 800596a:	9209      	str	r2, [sp, #36]	; 0x24
      switch (*format) {
 800596c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800596e:	7811      	ldrb	r1, [r2, #0]
 8005970:	000b      	movs	r3, r1
 8005972:	3b20      	subs	r3, #32
 8005974:	b2d8      	uxtb	r0, r3
 8005976:	2810      	cmp	r0, #16
 8005978:	d8ca      	bhi.n	8005910 <_vsnprintf+0x48>
 800597a:	0083      	lsls	r3, r0, #2
 800597c:	48c4      	ldr	r0, [pc, #784]	; (8005c90 <_vsnprintf+0x3c8>)
 800597e:	58c3      	ldr	r3, [r0, r3]
 8005980:	469f      	mov	pc, r3
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8005982:	2302      	movs	r3, #2
 8005984:	431d      	orrs	r5, r3
 8005986:	3201      	adds	r2, #1
 8005988:	9209      	str	r2, [sp, #36]	; 0x24
    } while (n);
 800598a:	e7ef      	b.n	800596c <_vsnprintf+0xa4>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800598c:	2304      	movs	r3, #4
 800598e:	431d      	orrs	r5, r3
 8005990:	3201      	adds	r2, #1
 8005992:	9209      	str	r2, [sp, #36]	; 0x24
    } while (n);
 8005994:	e7ea      	b.n	800596c <_vsnprintf+0xa4>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8005996:	2308      	movs	r3, #8
 8005998:	431d      	orrs	r5, r3
 800599a:	3201      	adds	r2, #1
 800599c:	9209      	str	r2, [sp, #36]	; 0x24
    } while (n);
 800599e:	e7e5      	b.n	800596c <_vsnprintf+0xa4>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80059a0:	2310      	movs	r3, #16
 80059a2:	431d      	orrs	r5, r3
 80059a4:	3201      	adds	r2, #1
 80059a6:	9209      	str	r2, [sp, #36]	; 0x24
    } while (n);
 80059a8:	e7e0      	b.n	800596c <_vsnprintf+0xa4>
      width = _atoi(&format);
 80059aa:	a809      	add	r0, sp, #36	; 0x24
 80059ac:	f7ff fca1 	bl	80052f2 <_atoi>
 80059b0:	9006      	str	r0, [sp, #24]
 80059b2:	e7b6      	b.n	8005922 <_vsnprintf+0x5a>
      const int w = va_arg(va, int);
 80059b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80059b6:	1d1a      	adds	r2, r3, #4
 80059b8:	9214      	str	r2, [sp, #80]	; 0x50
 80059ba:	6818      	ldr	r0, [r3, #0]
      if (w < 0) {
 80059bc:	2800      	cmp	r0, #0
 80059be:	db04      	blt.n	80059ca <_vsnprintf+0x102>
        width = (unsigned int)w;
 80059c0:	9006      	str	r0, [sp, #24]
      format++;
 80059c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059c4:	3301      	adds	r3, #1
 80059c6:	9309      	str	r3, [sp, #36]	; 0x24
 80059c8:	e7ab      	b.n	8005922 <_vsnprintf+0x5a>
        flags |= FLAGS_LEFT;    // reverse padding
 80059ca:	2302      	movs	r3, #2
 80059cc:	431d      	orrs	r5, r3
        width = (unsigned int)-w;
 80059ce:	4243      	negs	r3, r0
 80059d0:	9306      	str	r3, [sp, #24]
 80059d2:	e7f6      	b.n	80059c2 <_vsnprintf+0xfa>
      flags |= FLAGS_PRECISION;
 80059d4:	2280      	movs	r2, #128	; 0x80
 80059d6:	00d2      	lsls	r2, r2, #3
 80059d8:	4315      	orrs	r5, r2
      format++;
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	9209      	str	r2, [sp, #36]	; 0x24
      if (_is_digit(*format)) {
 80059de:	785a      	ldrb	r2, [r3, #1]
  return (ch >= '0') && (ch <= '9');
 80059e0:	0013      	movs	r3, r2
 80059e2:	3b30      	subs	r3, #48	; 0x30
 80059e4:	b2db      	uxtb	r3, r3
      if (_is_digit(*format)) {
 80059e6:	2b09      	cmp	r3, #9
 80059e8:	d904      	bls.n	80059f4 <_vsnprintf+0x12c>
      else if (*format == '*') {
 80059ea:	2a2a      	cmp	r2, #42	; 0x2a
 80059ec:	d007      	beq.n	80059fe <_vsnprintf+0x136>
    precision = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	469b      	mov	fp, r3
 80059f2:	e79c      	b.n	800592e <_vsnprintf+0x66>
        precision = _atoi(&format);
 80059f4:	a809      	add	r0, sp, #36	; 0x24
 80059f6:	f7ff fc7c 	bl	80052f2 <_atoi>
 80059fa:	4683      	mov	fp, r0
 80059fc:	e797      	b.n	800592e <_vsnprintf+0x66>
        const int prec = (int)va_arg(va, int);
 80059fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a00:	1d1a      	adds	r2, r3, #4
 8005a02:	9214      	str	r2, [sp, #80]	; 0x50
 8005a04:	6818      	ldr	r0, [r3, #0]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8005a06:	2800      	cmp	r0, #0
 8005a08:	db04      	blt.n	8005a14 <_vsnprintf+0x14c>
 8005a0a:	4683      	mov	fp, r0
        format++;
 8005a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a0e:	3301      	adds	r3, #1
 8005a10:	9309      	str	r3, [sp, #36]	; 0x24
 8005a12:	e78c      	b.n	800592e <_vsnprintf+0x66>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8005a14:	2000      	movs	r0, #0
 8005a16:	e7f8      	b.n	8005a0a <_vsnprintf+0x142>
    switch (*format) {
 8005a18:	2b7a      	cmp	r3, #122	; 0x7a
 8005a1a:	d197      	bne.n	800594c <_vsnprintf+0x84>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005a1c:	2380      	movs	r3, #128	; 0x80
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	431d      	orrs	r5, r3
        format++;
 8005a22:	3201      	adds	r2, #1
 8005a24:	9209      	str	r2, [sp, #36]	; 0x24
        break;
 8005a26:	e791      	b.n	800594c <_vsnprintf+0x84>
        flags |= FLAGS_LONG;
 8005a28:	2380      	movs	r3, #128	; 0x80
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	432b      	orrs	r3, r5
        format++;
 8005a2e:	1c51      	adds	r1, r2, #1
 8005a30:	9109      	str	r1, [sp, #36]	; 0x24
        if (*format == 'l') {
 8005a32:	7852      	ldrb	r2, [r2, #1]
 8005a34:	2a6c      	cmp	r2, #108	; 0x6c
 8005a36:	d001      	beq.n	8005a3c <_vsnprintf+0x174>
        flags |= FLAGS_LONG;
 8005a38:	001d      	movs	r5, r3
 8005a3a:	e787      	b.n	800594c <_vsnprintf+0x84>
          flags |= FLAGS_LONG_LONG;
 8005a3c:	23c0      	movs	r3, #192	; 0xc0
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	431d      	orrs	r5, r3
          format++;
 8005a42:	3101      	adds	r1, #1
 8005a44:	9109      	str	r1, [sp, #36]	; 0x24
 8005a46:	e781      	b.n	800594c <_vsnprintf+0x84>
        flags |= FLAGS_SHORT;
 8005a48:	2380      	movs	r3, #128	; 0x80
 8005a4a:	432b      	orrs	r3, r5
        format++;
 8005a4c:	1c51      	adds	r1, r2, #1
 8005a4e:	9109      	str	r1, [sp, #36]	; 0x24
        if (*format == 'h') {
 8005a50:	7852      	ldrb	r2, [r2, #1]
 8005a52:	2a68      	cmp	r2, #104	; 0x68
 8005a54:	d001      	beq.n	8005a5a <_vsnprintf+0x192>
        flags |= FLAGS_SHORT;
 8005a56:	001d      	movs	r5, r3
 8005a58:	e778      	b.n	800594c <_vsnprintf+0x84>
          flags |= FLAGS_CHAR;
 8005a5a:	23c0      	movs	r3, #192	; 0xc0
 8005a5c:	431d      	orrs	r5, r3
          format++;
 8005a5e:	3101      	adds	r1, #1
 8005a60:	9109      	str	r1, [sp, #36]	; 0x24
 8005a62:	e773      	b.n	800594c <_vsnprintf+0x84>
        if (*format == 'x' || *format == 'X') {
 8005a64:	2878      	cmp	r0, #120	; 0x78
 8005a66:	d009      	beq.n	8005a7c <_vsnprintf+0x1b4>
 8005a68:	2858      	cmp	r0, #88	; 0x58
 8005a6a:	d035      	beq.n	8005ad8 <_vsnprintf+0x210>
        else if (*format == 'o') {
 8005a6c:	286f      	cmp	r0, #111	; 0x6f
 8005a6e:	d035      	beq.n	8005adc <_vsnprintf+0x214>
        else if (*format == 'b') {
 8005a70:	2862      	cmp	r0, #98	; 0x62
 8005a72:	d035      	beq.n	8005ae0 <_vsnprintf+0x218>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8005a74:	2310      	movs	r3, #16
 8005a76:	439d      	bics	r5, r3
          base = 10U;
 8005a78:	3b06      	subs	r3, #6
 8005a7a:	e000      	b.n	8005a7e <_vsnprintf+0x1b6>
          base = 16U;
 8005a7c:	2310      	movs	r3, #16
        if (*format == 'X') {
 8005a7e:	2858      	cmp	r0, #88	; 0x58
 8005a80:	d030      	beq.n	8005ae4 <_vsnprintf+0x21c>
        if ((*format != 'i') && (*format != 'd')) {
 8005a82:	2869      	cmp	r0, #105	; 0x69
 8005a84:	d003      	beq.n	8005a8e <_vsnprintf+0x1c6>
 8005a86:	2864      	cmp	r0, #100	; 0x64
 8005a88:	d001      	beq.n	8005a8e <_vsnprintf+0x1c6>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8005a8a:	220c      	movs	r2, #12
 8005a8c:	4395      	bics	r5, r2
        if (flags & FLAGS_PRECISION) {
 8005a8e:	056a      	lsls	r2, r5, #21
 8005a90:	d501      	bpl.n	8005a96 <_vsnprintf+0x1ce>
          flags &= ~FLAGS_ZEROPAD;
 8005a92:	2201      	movs	r2, #1
 8005a94:	4395      	bics	r5, r2
        if ((*format == 'i') || (*format == 'd')) {
 8005a96:	2869      	cmp	r0, #105	; 0x69
 8005a98:	d027      	beq.n	8005aea <_vsnprintf+0x222>
 8005a9a:	2864      	cmp	r0, #100	; 0x64
 8005a9c:	d025      	beq.n	8005aea <_vsnprintf+0x222>
          if (flags & FLAGS_LONG_LONG) {
 8005a9e:	05aa      	lsls	r2, r5, #22
 8005aa0:	d442      	bmi.n	8005b28 <_vsnprintf+0x260>
          else if (flags & FLAGS_LONG) {
 8005aa2:	05ea      	lsls	r2, r5, #23
 8005aa4:	d469      	bmi.n	8005b7a <_vsnprintf+0x2b2>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8005aa6:	066a      	lsls	r2, r5, #25
 8005aa8:	d57c      	bpl.n	8005ba4 <_vsnprintf+0x2dc>
 8005aaa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005aac:	1d11      	adds	r1, r2, #4
 8005aae:	9114      	str	r1, [sp, #80]	; 0x50
 8005ab0:	6811      	ldr	r1, [r2, #0]
 8005ab2:	22ff      	movs	r2, #255	; 0xff
 8005ab4:	400a      	ands	r2, r1
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8005ab6:	9505      	str	r5, [sp, #20]
 8005ab8:	9906      	ldr	r1, [sp, #24]
 8005aba:	9104      	str	r1, [sp, #16]
 8005abc:	4659      	mov	r1, fp
 8005abe:	9103      	str	r1, [sp, #12]
 8005ac0:	9302      	str	r3, [sp, #8]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	9200      	str	r2, [sp, #0]
 8005ac8:	464b      	mov	r3, r9
 8005aca:	0022      	movs	r2, r4
 8005acc:	4651      	mov	r1, sl
 8005ace:	0030      	movs	r0, r6
 8005ad0:	f7ff fd00 	bl	80054d4 <_ntoa_long>
 8005ad4:	0004      	movs	r4, r0
 8005ad6:	e027      	b.n	8005b28 <_vsnprintf+0x260>
          base = 16U;
 8005ad8:	2310      	movs	r3, #16
 8005ada:	e7d0      	b.n	8005a7e <_vsnprintf+0x1b6>
          base =  8U;
 8005adc:	2308      	movs	r3, #8
 8005ade:	e7ce      	b.n	8005a7e <_vsnprintf+0x1b6>
          base =  2U;
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e7cc      	b.n	8005a7e <_vsnprintf+0x1b6>
          flags |= FLAGS_UPPERCASE;
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	4315      	orrs	r5, r2
 8005ae8:	e7cb      	b.n	8005a82 <_vsnprintf+0x1ba>
          if (flags & FLAGS_LONG_LONG) {
 8005aea:	05aa      	lsls	r2, r5, #22
 8005aec:	d41c      	bmi.n	8005b28 <_vsnprintf+0x260>
          else if (flags & FLAGS_LONG) {
 8005aee:	05ea      	lsls	r2, r5, #23
 8005af0:	d41e      	bmi.n	8005b30 <_vsnprintf+0x268>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8005af2:	066a      	lsls	r2, r5, #25
 8005af4:	d534      	bpl.n	8005b60 <_vsnprintf+0x298>
 8005af6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005af8:	1d11      	adds	r1, r2, #4
 8005afa:	9114      	str	r1, [sp, #80]	; 0x50
 8005afc:	6811      	ldr	r1, [r2, #0]
 8005afe:	22ff      	movs	r2, #255	; 0xff
 8005b00:	400a      	ands	r2, r1
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005b02:	17d0      	asrs	r0, r2, #31
 8005b04:	1811      	adds	r1, r2, r0
 8005b06:	4041      	eors	r1, r0
 8005b08:	9505      	str	r5, [sp, #20]
 8005b0a:	9806      	ldr	r0, [sp, #24]
 8005b0c:	9004      	str	r0, [sp, #16]
 8005b0e:	4658      	mov	r0, fp
 8005b10:	9003      	str	r0, [sp, #12]
 8005b12:	9302      	str	r3, [sp, #8]
 8005b14:	0fd2      	lsrs	r2, r2, #31
 8005b16:	9201      	str	r2, [sp, #4]
 8005b18:	9100      	str	r1, [sp, #0]
 8005b1a:	464b      	mov	r3, r9
 8005b1c:	0022      	movs	r2, r4
 8005b1e:	4651      	mov	r1, sl
 8005b20:	0030      	movs	r0, r6
 8005b22:	f7ff fcd7 	bl	80054d4 <_ntoa_long>
 8005b26:	0004      	movs	r4, r0
        format++;
 8005b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8005b2e:	e6da      	b.n	80058e6 <_vsnprintf+0x1e>
            const long value = va_arg(va, long);
 8005b30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b32:	1d11      	adds	r1, r2, #4
 8005b34:	9114      	str	r1, [sp, #80]	; 0x50
 8005b36:	6812      	ldr	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005b38:	17d0      	asrs	r0, r2, #31
 8005b3a:	1811      	adds	r1, r2, r0
 8005b3c:	4041      	eors	r1, r0
 8005b3e:	9505      	str	r5, [sp, #20]
 8005b40:	9806      	ldr	r0, [sp, #24]
 8005b42:	9004      	str	r0, [sp, #16]
 8005b44:	4658      	mov	r0, fp
 8005b46:	9003      	str	r0, [sp, #12]
 8005b48:	9302      	str	r3, [sp, #8]
 8005b4a:	0fd2      	lsrs	r2, r2, #31
 8005b4c:	9201      	str	r2, [sp, #4]
 8005b4e:	9100      	str	r1, [sp, #0]
 8005b50:	464b      	mov	r3, r9
 8005b52:	0022      	movs	r2, r4
 8005b54:	4651      	mov	r1, sl
 8005b56:	0030      	movs	r0, r6
 8005b58:	f7ff fcbc 	bl	80054d4 <_ntoa_long>
 8005b5c:	0004      	movs	r4, r0
 8005b5e:	e7e3      	b.n	8005b28 <_vsnprintf+0x260>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8005b60:	062a      	lsls	r2, r5, #24
 8005b62:	d505      	bpl.n	8005b70 <_vsnprintf+0x2a8>
 8005b64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b66:	1d11      	adds	r1, r2, #4
 8005b68:	9114      	str	r1, [sp, #80]	; 0x50
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	5e52      	ldrsh	r2, [r2, r1]
 8005b6e:	e7c8      	b.n	8005b02 <_vsnprintf+0x23a>
 8005b70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b72:	1d11      	adds	r1, r2, #4
 8005b74:	9114      	str	r1, [sp, #80]	; 0x50
 8005b76:	6812      	ldr	r2, [r2, #0]
 8005b78:	e7c3      	b.n	8005b02 <_vsnprintf+0x23a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8005b7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b7c:	1d11      	adds	r1, r2, #4
 8005b7e:	9114      	str	r1, [sp, #80]	; 0x50
 8005b80:	9505      	str	r5, [sp, #20]
 8005b82:	9906      	ldr	r1, [sp, #24]
 8005b84:	9104      	str	r1, [sp, #16]
 8005b86:	4659      	mov	r1, fp
 8005b88:	9103      	str	r1, [sp, #12]
 8005b8a:	9302      	str	r3, [sp, #8]
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	6813      	ldr	r3, [r2, #0]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	464b      	mov	r3, r9
 8005b96:	0022      	movs	r2, r4
 8005b98:	4651      	mov	r1, sl
 8005b9a:	0030      	movs	r0, r6
 8005b9c:	f7ff fc9a 	bl	80054d4 <_ntoa_long>
 8005ba0:	0004      	movs	r4, r0
 8005ba2:	e7c1      	b.n	8005b28 <_vsnprintf+0x260>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8005ba4:	062a      	lsls	r2, r5, #24
 8005ba6:	d506      	bpl.n	8005bb6 <_vsnprintf+0x2ee>
 8005ba8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005baa:	1d11      	adds	r1, r2, #4
 8005bac:	9114      	str	r1, [sp, #80]	; 0x50
 8005bae:	6812      	ldr	r2, [r2, #0]
 8005bb0:	0412      	lsls	r2, r2, #16
 8005bb2:	0c12      	lsrs	r2, r2, #16
 8005bb4:	e77f      	b.n	8005ab6 <_vsnprintf+0x1ee>
 8005bb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005bb8:	1d11      	adds	r1, r2, #4
 8005bba:	9114      	str	r1, [sp, #80]	; 0x50
 8005bbc:	6812      	ldr	r2, [r2, #0]
 8005bbe:	e77a      	b.n	8005ab6 <_vsnprintf+0x1ee>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8005bc0:	2846      	cmp	r0, #70	; 0x46
 8005bc2:	d01a      	beq.n	8005bfa <_vsnprintf+0x332>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8005bc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005bc6:	3307      	adds	r3, #7
 8005bc8:	2207      	movs	r2, #7
 8005bca:	4393      	bics	r3, r2
 8005bcc:	001a      	movs	r2, r3
 8005bce:	3208      	adds	r2, #8
 8005bd0:	9214      	str	r2, [sp, #80]	; 0x50
 8005bd2:	9504      	str	r5, [sp, #16]
 8005bd4:	9a06      	ldr	r2, [sp, #24]
 8005bd6:	9203      	str	r2, [sp, #12]
 8005bd8:	465a      	mov	r2, fp
 8005bda:	9202      	str	r2, [sp, #8]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	9200      	str	r2, [sp, #0]
 8005be2:	9301      	str	r3, [sp, #4]
 8005be4:	464b      	mov	r3, r9
 8005be6:	0022      	movs	r2, r4
 8005be8:	4651      	mov	r1, sl
 8005bea:	0030      	movs	r0, r6
 8005bec:	f7ff fcd0 	bl	8005590 <_ftoa>
 8005bf0:	0004      	movs	r4, r0
        format++;
 8005bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8005bf8:	e675      	b.n	80058e6 <_vsnprintf+0x1e>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8005bfa:	2320      	movs	r3, #32
 8005bfc:	431d      	orrs	r5, r3
 8005bfe:	e7e1      	b.n	8005bc4 <_vsnprintf+0x2fc>
        if (!(flags & FLAGS_LEFT)) {
 8005c00:	2302      	movs	r3, #2
 8005c02:	001a      	movs	r2, r3
 8005c04:	402a      	ands	r2, r5
 8005c06:	4693      	mov	fp, r2
 8005c08:	422b      	tst	r3, r5
 8005c0a:	d01e      	beq.n	8005c4a <_vsnprintf+0x382>
        unsigned int l = 1U;
 8005c0c:	2501      	movs	r5, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8005c0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c10:	1d1a      	adds	r2, r3, #4
 8005c12:	9214      	str	r2, [sp, #80]	; 0x50
 8005c14:	1c62      	adds	r2, r4, #1
 8005c16:	4690      	mov	r8, r2
 8005c18:	7818      	ldrb	r0, [r3, #0]
 8005c1a:	464b      	mov	r3, r9
 8005c1c:	0022      	movs	r2, r4
 8005c1e:	4651      	mov	r1, sl
 8005c20:	47b0      	blx	r6
        if (flags & FLAGS_LEFT) {
 8005c22:	465b      	mov	r3, fp
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d114      	bne.n	8005c52 <_vsnprintf+0x38a>
        format++;
 8005c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8005c2e:	4644      	mov	r4, r8
 8005c30:	e659      	b.n	80058e6 <_vsnprintf+0x1e>
            out(' ', buffer, idx++, maxlen);
 8005c32:	1c57      	adds	r7, r2, #1
 8005c34:	464b      	mov	r3, r9
 8005c36:	4651      	mov	r1, sl
 8005c38:	2020      	movs	r0, #32
 8005c3a:	47b0      	blx	r6
          while (l++ < width) {
 8005c3c:	002b      	movs	r3, r5
            out(' ', buffer, idx++, maxlen);
 8005c3e:	003a      	movs	r2, r7
          while (l++ < width) {
 8005c40:	1c5d      	adds	r5, r3, #1
 8005c42:	429c      	cmp	r4, r3
 8005c44:	d8f5      	bhi.n	8005c32 <_vsnprintf+0x36a>
 8005c46:	0014      	movs	r4, r2
 8005c48:	e7e1      	b.n	8005c0e <_vsnprintf+0x346>
        unsigned int l = 1U;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	0022      	movs	r2, r4
 8005c4e:	9c06      	ldr	r4, [sp, #24]
 8005c50:	e7f6      	b.n	8005c40 <_vsnprintf+0x378>
 8005c52:	4642      	mov	r2, r8
 8005c54:	46b0      	mov	r8, r6
 8005c56:	9e06      	ldr	r6, [sp, #24]
 8005c58:	e006      	b.n	8005c68 <_vsnprintf+0x3a0>
            out(' ', buffer, idx++, maxlen);
 8005c5a:	1c57      	adds	r7, r2, #1
 8005c5c:	464b      	mov	r3, r9
 8005c5e:	4651      	mov	r1, sl
 8005c60:	2020      	movs	r0, #32
 8005c62:	47c0      	blx	r8
          while (l++ < width) {
 8005c64:	0025      	movs	r5, r4
            out(' ', buffer, idx++, maxlen);
 8005c66:	003a      	movs	r2, r7
          while (l++ < width) {
 8005c68:	1c6c      	adds	r4, r5, #1
 8005c6a:	42ae      	cmp	r6, r5
 8005c6c:	d8f5      	bhi.n	8005c5a <_vsnprintf+0x392>
 8005c6e:	4646      	mov	r6, r8
 8005c70:	4690      	mov	r8, r2
 8005c72:	e7d9      	b.n	8005c28 <_vsnprintf+0x360>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8005c74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c76:	1d1a      	adds	r2, r3, #4
 8005c78:	9214      	str	r2, [sp, #80]	; 0x50
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4698      	mov	r8, r3
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8005c7e:	465b      	mov	r3, fp
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d100      	bne.n	8005c86 <_vsnprintf+0x3be>
 8005c84:	3b01      	subs	r3, #1
 8005c86:	4647      	mov	r7, r8
 8005c88:	e006      	b.n	8005c98 <_vsnprintf+0x3d0>
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	08009334 	.word	0x08009334
 8005c90:	08009484 	.word	0x08009484
  for (s = str; *s && maxsize--; ++s);
 8005c94:	3701      	adds	r7, #1
 8005c96:	0013      	movs	r3, r2
 8005c98:	783a      	ldrb	r2, [r7, #0]
 8005c9a:	2a00      	cmp	r2, #0
 8005c9c:	d002      	beq.n	8005ca4 <_vsnprintf+0x3dc>
 8005c9e:	1e5a      	subs	r2, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1f7      	bne.n	8005c94 <_vsnprintf+0x3cc>
  return (unsigned int)(s - str);
 8005ca4:	4643      	mov	r3, r8
 8005ca6:	1afa      	subs	r2, r7, r3
 8005ca8:	9207      	str	r2, [sp, #28]
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8005caa:	2380      	movs	r3, #128	; 0x80
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	002f      	movs	r7, r5
 8005cb0:	401f      	ands	r7, r3
 8005cb2:	421d      	tst	r5, r3
 8005cb4:	d003      	beq.n	8005cbe <_vsnprintf+0x3f6>
          l = (l < precision ? l : precision);
 8005cb6:	455a      	cmp	r2, fp
 8005cb8:	d901      	bls.n	8005cbe <_vsnprintf+0x3f6>
 8005cba:	465b      	mov	r3, fp
 8005cbc:	9307      	str	r3, [sp, #28]
        }
        if (!(flags & FLAGS_LEFT)) {
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	001a      	movs	r2, r3
 8005cc2:	402a      	ands	r2, r5
 8005cc4:	9208      	str	r2, [sp, #32]
 8005cc6:	422b      	tst	r3, r5
 8005cc8:	d005      	beq.n	8005cd6 <_vsnprintf+0x40e>
 8005cca:	0022      	movs	r2, r4
 8005ccc:	465c      	mov	r4, fp
 8005cce:	4645      	mov	r5, r8
 8005cd0:	46b0      	mov	r8, r6
 8005cd2:	003e      	movs	r6, r7
 8005cd4:	e020      	b.n	8005d18 <_vsnprintf+0x450>
 8005cd6:	0022      	movs	r2, r4
 8005cd8:	9b07      	ldr	r3, [sp, #28]
 8005cda:	4651      	mov	r1, sl
 8005cdc:	46ba      	mov	sl, r7
 8005cde:	000f      	movs	r7, r1
 8005ce0:	e006      	b.n	8005cf0 <_vsnprintf+0x428>
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
 8005ce2:	1c54      	adds	r4, r2, #1
 8005ce4:	464b      	mov	r3, r9
 8005ce6:	0039      	movs	r1, r7
 8005ce8:	2020      	movs	r0, #32
 8005cea:	47b0      	blx	r6
          while (l++ < width) {
 8005cec:	002b      	movs	r3, r5
            out(' ', buffer, idx++, maxlen);
 8005cee:	0022      	movs	r2, r4
          while (l++ < width) {
 8005cf0:	1c5d      	adds	r5, r3, #1
 8005cf2:	9906      	ldr	r1, [sp, #24]
 8005cf4:	4299      	cmp	r1, r3
 8005cf6:	d8f4      	bhi.n	8005ce2 <_vsnprintf+0x41a>
 8005cf8:	003b      	movs	r3, r7
 8005cfa:	4657      	mov	r7, sl
 8005cfc:	469a      	mov	sl, r3
 8005cfe:	9507      	str	r5, [sp, #28]
 8005d00:	465c      	mov	r4, fp
 8005d02:	4645      	mov	r5, r8
 8005d04:	46b0      	mov	r8, r6
 8005d06:	003e      	movs	r6, r7
 8005d08:	e006      	b.n	8005d18 <_vsnprintf+0x450>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005d0a:	001c      	movs	r4, r3
          out(*(p++), buffer, idx++, maxlen);
 8005d0c:	3501      	adds	r5, #1
 8005d0e:	1c57      	adds	r7, r2, #1
 8005d10:	464b      	mov	r3, r9
 8005d12:	4651      	mov	r1, sl
 8005d14:	47c0      	blx	r8
 8005d16:	003a      	movs	r2, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005d18:	7828      	ldrb	r0, [r5, #0]
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	d004      	beq.n	8005d28 <_vsnprintf+0x460>
 8005d1e:	2e00      	cmp	r6, #0
 8005d20:	d0f4      	beq.n	8005d0c <_vsnprintf+0x444>
 8005d22:	1e63      	subs	r3, r4, #1
 8005d24:	2c00      	cmp	r4, #0
 8005d26:	d1f0      	bne.n	8005d0a <_vsnprintf+0x442>
 8005d28:	0014      	movs	r4, r2
 8005d2a:	4646      	mov	r6, r8
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8005d2c:	9b08      	ldr	r3, [sp, #32]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d103      	bne.n	8005d3a <_vsnprintf+0x472>
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        format++;
 8005d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d34:	3301      	adds	r3, #1
 8005d36:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8005d38:	e5d5      	b.n	80058e6 <_vsnprintf+0x1e>
 8005d3a:	9f06      	ldr	r7, [sp, #24]
 8005d3c:	9b07      	ldr	r3, [sp, #28]
 8005d3e:	e006      	b.n	8005d4e <_vsnprintf+0x486>
            out(' ', buffer, idx++, maxlen);
 8005d40:	1c55      	adds	r5, r2, #1
 8005d42:	464b      	mov	r3, r9
 8005d44:	4651      	mov	r1, sl
 8005d46:	2020      	movs	r0, #32
 8005d48:	47b0      	blx	r6
          while (l++ < width) {
 8005d4a:	0023      	movs	r3, r4
            out(' ', buffer, idx++, maxlen);
 8005d4c:	002a      	movs	r2, r5
          while (l++ < width) {
 8005d4e:	1c5c      	adds	r4, r3, #1
 8005d50:	429f      	cmp	r7, r3
 8005d52:	d8f5      	bhi.n	8005d40 <_vsnprintf+0x478>
 8005d54:	0014      	movs	r4, r2
 8005d56:	e7ec      	b.n	8005d32 <_vsnprintf+0x46a>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8005d58:	2321      	movs	r3, #33	; 0x21
 8005d5a:	431d      	orrs	r5, r3
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8005d5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d5e:	1d1a      	adds	r2, r3, #4
 8005d60:	9214      	str	r2, [sp, #80]	; 0x50
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	9505      	str	r5, [sp, #20]
 8005d68:	2308      	movs	r3, #8
 8005d6a:	9304      	str	r3, [sp, #16]
 8005d6c:	465b      	mov	r3, fp
 8005d6e:	9303      	str	r3, [sp, #12]
 8005d70:	2310      	movs	r3, #16
 8005d72:	9302      	str	r3, [sp, #8]
 8005d74:	2300      	movs	r3, #0
 8005d76:	9301      	str	r3, [sp, #4]
 8005d78:	464b      	mov	r3, r9
 8005d7a:	0022      	movs	r2, r4
 8005d7c:	4651      	mov	r1, sl
 8005d7e:	0030      	movs	r0, r6
 8005d80:	f7ff fba8 	bl	80054d4 <_ntoa_long>
 8005d84:	0004      	movs	r4, r0
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8005d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d88:	3301      	adds	r3, #1
 8005d8a:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8005d8c:	e5ab      	b.n	80058e6 <_vsnprintf+0x1e>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8005d8e:	1c65      	adds	r5, r4, #1
 8005d90:	464b      	mov	r3, r9
 8005d92:	0022      	movs	r2, r4
 8005d94:	4651      	mov	r1, sl
 8005d96:	2025      	movs	r0, #37	; 0x25
 8005d98:	47b0      	blx	r6
        format++;
 8005d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	9309      	str	r3, [sp, #36]	; 0x24
        out('%', buffer, idx++, maxlen);
 8005da0:	002c      	movs	r4, r5
        break;
 8005da2:	e5a0      	b.n	80058e6 <_vsnprintf+0x1e>

      default :
        out(*format, buffer, idx++, maxlen);
 8005da4:	1c65      	adds	r5, r4, #1
 8005da6:	464b      	mov	r3, r9
 8005da8:	0022      	movs	r2, r4
 8005daa:	4651      	mov	r1, sl
 8005dac:	47b0      	blx	r6
        format++;
 8005dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db0:	3301      	adds	r3, #1
 8005db2:	9309      	str	r3, [sp, #36]	; 0x24
        out(*format, buffer, idx++, maxlen);
 8005db4:	002c      	movs	r4, r5
        break;
 8005db6:	e596      	b.n	80058e6 <_vsnprintf+0x1e>
    out = _out_null;
 8005db8:	4e04      	ldr	r6, [pc, #16]	; (8005dcc <_vsnprintf+0x504>)
 8005dba:	e593      	b.n	80058e4 <_vsnprintf+0x1c>
  // termination
  // out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
}
 8005dbc:	0020      	movs	r0, r4
 8005dbe:	b00b      	add	sp, #44	; 0x2c
 8005dc0:	bcf0      	pop	{r4, r5, r6, r7}
 8005dc2:	46bb      	mov	fp, r7
 8005dc4:	46b2      	mov	sl, r6
 8005dc6:	46a9      	mov	r9, r5
 8005dc8:	46a0      	mov	r8, r4
 8005dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dcc:	080052f1 	.word	0x080052f1

08005dd0 <clock_setup>:
/** @brief Setup Clock
 * 
 * Initializes clock to be 2Mhz and sets baud divider to 8
 */
static void clock_setup(void)
{
 8005dd0:	b510      	push	{r4, lr}
	// Enable MSI Osc 2.097Mhz
	rcc_osc_on(RCC_MSI);
 8005dd2:	2004      	movs	r0, #4
 8005dd4:	f001 f800 	bl	8006dd8 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_MSI);
 8005dd8:	2004      	movs	r0, #4
 8005dda:	f001 f853 	bl	8006e84 <rcc_wait_for_osc_ready>

	// Set MSI to 2.097Mhz
	rcc_set_msi_range(5);
 8005dde:	2005      	movs	r0, #5
 8005de0:	f001 f87a 	bl	8006ed8 <rcc_set_msi_range>

	// Set prescalers for AHB, APB1, APB2
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);				// AHB -> 2.097Mhz
 8005de4:	2000      	movs	r0, #0
 8005de6:	f001 f86d 	bl	8006ec4 <rcc_set_hpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);			// APB1 -> 2.097Mhz
 8005dea:	2000      	movs	r0, #0
 8005dec:	f001 f852 	bl	8006e94 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);			// APB2 -> 2.097Mhz
 8005df0:	2000      	movs	r0, #0
 8005df2:	f001 f85b 	bl	8006eac <rcc_set_ppre2>

	// Set flash, 2.097Mhz -> 0 waitstates
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 8005df6:	2000      	movs	r0, #0
 8005df8:	f000 fee2 	bl	8006bc0 <flash_set_ws>

	// Set Peripheral Clock Frequencies used
	rcc_ahb_frequency = 2097000;
 8005dfc:	4b03      	ldr	r3, [pc, #12]	; (8005e0c <clock_setup+0x3c>)
 8005dfe:	4a04      	ldr	r2, [pc, #16]	; (8005e10 <clock_setup+0x40>)
 8005e00:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 2097000;
 8005e02:	4a04      	ldr	r2, [pc, #16]	; (8005e14 <clock_setup+0x44>)
 8005e04:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = 2097000;
 8005e06:	4a04      	ldr	r2, [pc, #16]	; (8005e18 <clock_setup+0x48>)
 8005e08:	6013      	str	r3, [r2, #0]
}
 8005e0a:	bd10      	pop	{r4, pc}
 8005e0c:	001fff68 	.word	0x001fff68
 8005e10:	20000094 	.word	0x20000094
 8005e14:	20000098 	.word	0x20000098
 8005e18:	2000009c 	.word	0x2000009c

08005e1c <spi_setup>:

static void spi_setup(void)
{
 8005e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e1e:	46c6      	mov	lr, r8
 8005e20:	b500      	push	{lr}
 8005e22:	b082      	sub	sp, #8
  // Set GPIO Mode
  gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_AF,     GPIO_PUPD_NONE,   RFM_SPI_MISO);
 8005e24:	2380      	movs	r3, #128	; 0x80
 8005e26:	01db      	lsls	r3, r3, #7
 8005e28:	4698      	mov	r8, r3
 8005e2a:	4c2e      	ldr	r4, [pc, #184]	; (8005ee4 <spi_setup+0xc8>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2102      	movs	r1, #2
 8005e30:	0020      	movs	r0, r4
 8005e32:	f000 ff20 	bl	8006c76 <gpio_mode_setup>

  gpio_mode_setup(RFM_SPI_SCK_PORT,   GPIO_MODE_AF,     GPIO_PUPD_NONE,   RFM_SPI_SCK);
 8005e36:	2680      	movs	r6, #128	; 0x80
 8005e38:	01b6      	lsls	r6, r6, #6
 8005e3a:	0033      	movs	r3, r6
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2102      	movs	r1, #2
 8005e40:	0020      	movs	r0, r4
 8005e42:	f000 ff18 	bl	8006c76 <gpio_mode_setup>
  gpio_mode_setup(RFM_SPI_MOSI_PORT,  GPIO_MODE_AF,     GPIO_PUPD_NONE,   RFM_SPI_MOSI);
 8005e46:	2580      	movs	r5, #128	; 0x80
 8005e48:	022d      	lsls	r5, r5, #8
 8005e4a:	002b      	movs	r3, r5
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2102      	movs	r1, #2
 8005e50:	0020      	movs	r0, r4
 8005e52:	f000 ff10 	bl	8006c76 <gpio_mode_setup>
  gpio_mode_setup(RFM_SPI_NSS_PORT,   GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, RFM_SPI_NSS);
 8005e56:	27a0      	movs	r7, #160	; 0xa0
 8005e58:	05ff      	lsls	r7, r7, #23
 8005e5a:	2340      	movs	r3, #64	; 0x40
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2101      	movs	r1, #1
 8005e60:	0038      	movs	r0, r7
 8005e62:	f000 ff08 	bl	8006c76 <gpio_mode_setup>

  // Push Pull for outputs
  gpio_set_output_options(RFM_SPI_SCK_PORT,   GPIO_OTYPE_PP, GPIO_OSPEED_25MHZ, RFM_SPI_SCK);
 8005e66:	0033      	movs	r3, r6
 8005e68:	2201      	movs	r2, #1
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	0020      	movs	r0, r4
 8005e6e:	f000 ff22 	bl	8006cb6 <gpio_set_output_options>
  gpio_set_output_options(RFM_SPI_MOSI_PORT,  GPIO_OTYPE_PP, GPIO_OSPEED_25MHZ, RFM_SPI_MOSI);
 8005e72:	002b      	movs	r3, r5
 8005e74:	2201      	movs	r2, #1
 8005e76:	2100      	movs	r1, #0
 8005e78:	0020      	movs	r0, r4
 8005e7a:	f000 ff1c 	bl	8006cb6 <gpio_set_output_options>
  gpio_set_output_options(RFM_SPI_NSS_PORT,   GPIO_OTYPE_PP, GPIO_OSPEED_25MHZ, RFM_SPI_NSS);
 8005e7e:	2340      	movs	r3, #64	; 0x40
 8005e80:	2201      	movs	r2, #1
 8005e82:	2100      	movs	r1, #0
 8005e84:	0038      	movs	r0, r7
 8005e86:	f000 ff16 	bl	8006cb6 <gpio_set_output_options>
  
  // Set NSS pin high
  gpio_set(RFM_SPI_NSS_PORT, RFM_SPI_NSS);
 8005e8a:	2140      	movs	r1, #64	; 0x40
 8005e8c:	0038      	movs	r0, r7
 8005e8e:	f000 feed 	bl	8006c6c <gpio_set>

  // Set alternate function
  gpio_set_af(RFM_SPI_MISO_PORT,  RFM_SPI_AF, RFM_SPI_MISO);
 8005e92:	4642      	mov	r2, r8
 8005e94:	2100      	movs	r1, #0
 8005e96:	0020      	movs	r0, r4
 8005e98:	f000 ff2b 	bl	8006cf2 <gpio_set_af>

  gpio_set_af(RFM_SPI_SCK_PORT,   RFM_SPI_AF, RFM_SPI_SCK);
 8005e9c:	0032      	movs	r2, r6
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	0020      	movs	r0, r4
 8005ea2:	f000 ff26 	bl	8006cf2 <gpio_set_af>
  gpio_set_af(RFM_SPI_MOSI_PORT,  RFM_SPI_AF, RFM_SPI_MOSI);
 8005ea6:	002a      	movs	r2, r5
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	0020      	movs	r0, r4
 8005eac:	f000 ff21 	bl	8006cf2 <gpio_set_af>
  
  // Init SPI
  rcc_periph_clock_enable(RFM_SPI_RCC);
 8005eb0:	480d      	ldr	r0, [pc, #52]	; (8005ee8 <spi_setup+0xcc>)
 8005eb2:	f001 f853 	bl	8006f5c <rcc_periph_clock_enable>
  rcc_periph_reset_pulse(RFM_SPI_RST); 
 8005eb6:	480d      	ldr	r0, [pc, #52]	; (8005eec <spi_setup+0xd0>)
 8005eb8:	f001 f86c 	bl	8006f94 <rcc_periph_reset_pulse>
  spi_disable(RFM_SPI);
 8005ebc:	4c0c      	ldr	r4, [pc, #48]	; (8005ef0 <spi_setup+0xd4>)
 8005ebe:	0020      	movs	r0, r4
 8005ec0:	f001 f895 	bl	8006fee <spi_disable>
  spi_init_master(RFM_SPI, SPI_CR1_BAUDRATE_FPCLK_DIV_8,
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2110      	movs	r1, #16
 8005ece:	0020      	movs	r0, r4
 8005ed0:	f001 f89a 	bl	8007008 <spi_init_master>
                    SPI_CR1_CPOL_CLK_TO_0_WHEN_IDLE, SPI_CR1_CPHA_CLK_TRANSITION_1,
                    SPI_CR1_DFF_8BIT, SPI_CR1_MSBFIRST);
  spi_enable(RFM_SPI);
 8005ed4:	0020      	movs	r0, r4
 8005ed6:	f001 f885 	bl	8006fe4 <spi_enable>
}
 8005eda:	b002      	add	sp, #8
 8005edc:	bc80      	pop	{r7}
 8005ede:	46b8      	mov	r8, r7
 8005ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	50000400 	.word	0x50000400
 8005ee8:	0000070e 	.word	0x0000070e
 8005eec:	0000050e 	.word	0x0000050e
 8005ef0:	40003800 	.word	0x40003800

08005ef4 <spi_read_single>:
 * 
 * @param reg Register to read
 * @retval Value read from register
 */
static uint8_t spi_read_single(uint8_t reg)
{
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	0004      	movs	r4, r0
  spi_chip_select();
 8005ef8:	25a0      	movs	r5, #160	; 0xa0
 8005efa:	05ed      	lsls	r5, r5, #23
 8005efc:	2140      	movs	r1, #64	; 0x40
 8005efe:	0028      	movs	r0, r5
 8005f00:	f000 feb6 	bl	8006c70 <gpio_clear>
  timers_delay_microseconds(1);
 8005f04:	2001      	movs	r0, #1
 8005f06:	f000 fbdb 	bl	80066c0 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, reg);                   
 8005f0a:	b2a1      	uxth	r1, r4
 8005f0c:	4c08      	ldr	r4, [pc, #32]	; (8005f30 <spi_read_single+0x3c>)
 8005f0e:	0020      	movs	r0, r4
 8005f10:	f001 f872 	bl	8006ff8 <spi_xfer>
  uint8_t in =  spi_xfer(RFM_SPI, 0x00);                   
 8005f14:	2100      	movs	r1, #0
 8005f16:	0020      	movs	r0, r4
 8005f18:	f001 f86e 	bl	8006ff8 <spi_xfer>
 8005f1c:	b2c4      	uxtb	r4, r0
    
  spi_chip_deselect(); 
 8005f1e:	2140      	movs	r1, #64	; 0x40
 8005f20:	0028      	movs	r0, r5
 8005f22:	f000 fea3 	bl	8006c6c <gpio_set>
  timers_delay_microseconds(1);
 8005f26:	2001      	movs	r0, #1
 8005f28:	f000 fbca 	bl	80066c0 <timers_delay_microseconds>

  return in;
}
 8005f2c:	0020      	movs	r0, r4
 8005f2e:	bd70      	pop	{r4, r5, r6, pc}
 8005f30:	40003800 	.word	0x40003800

08005f34 <print_registers>:
    spi_write_single(RFM_REG_20_PREAMBLE_MSB, num_sym >> 8);
    spi_write_single(RFM_REG_21_PREAMBLE_LSB, num_sym & 0xff);
}

static void print_registers(void)
{
 8005f34:	b530      	push	{r4, r5, lr}
 8005f36:	b08b      	sub	sp, #44	; 0x2c
  uint8_t registers[] = { 0x01, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x014, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x4b, 0x4d};
 8005f38:	4669      	mov	r1, sp
 8005f3a:	4b0e      	ldr	r3, [pc, #56]	; (8005f74 <print_registers+0x40>)
 8005f3c:	000a      	movs	r2, r1
 8005f3e:	cb13      	ldmia	r3!, {r0, r1, r4}
 8005f40:	c213      	stmia	r2!, {r0, r1, r4}
 8005f42:	cb13      	ldmia	r3!, {r0, r1, r4}
 8005f44:	c213      	stmia	r2!, {r0, r1, r4}
 8005f46:	cb13      	ldmia	r3!, {r0, r1, r4}
 8005f48:	c213      	stmia	r2!, {r0, r1, r4}
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	7013      	strb	r3, [r2, #0]

  uint8_t i;
  for (i = 0; i < sizeof(registers); i++)
 8005f4e:	2400      	movs	r4, #0
 8005f50:	2c24      	cmp	r4, #36	; 0x24
 8005f52:	d80d      	bhi.n	8005f70 <print_registers+0x3c>
  {
	  log_printf(MAIN, "%02x : %02x\n", registers[i], spi_read_single(registers[i]));
 8005f54:	466b      	mov	r3, sp
 8005f56:	5d1d      	ldrb	r5, [r3, r4]
 8005f58:	0028      	movs	r0, r5
 8005f5a:	f7ff ffcb 	bl	8005ef4 <spi_read_single>
 8005f5e:	0003      	movs	r3, r0
 8005f60:	002a      	movs	r2, r5
 8005f62:	4905      	ldr	r1, [pc, #20]	; (8005f78 <print_registers+0x44>)
 8005f64:	2000      	movs	r0, #0
 8005f66:	f7ff f925 	bl	80051b4 <log_printf>
  for (i = 0; i < sizeof(registers); i++)
 8005f6a:	3401      	adds	r4, #1
 8005f6c:	b2e4      	uxtb	r4, r4
 8005f6e:	e7ef      	b.n	8005f50 <print_registers+0x1c>
  }
}
 8005f70:	b00b      	add	sp, #44	; 0x2c
 8005f72:	bd30      	pop	{r4, r5, pc}
 8005f74:	08009528 	.word	0x08009528
 8005f78:	08009518 	.word	0x08009518

08005f7c <spi_read_burst>:
{
 8005f7c:	b570      	push	{r4, r5, r6, lr}
 8005f7e:	0004      	movs	r4, r0
 8005f80:	000e      	movs	r6, r1
 8005f82:	0015      	movs	r5, r2
  spi_chip_select();
 8005f84:	20a0      	movs	r0, #160	; 0xa0
 8005f86:	2140      	movs	r1, #64	; 0x40
 8005f88:	05c0      	lsls	r0, r0, #23
 8005f8a:	f000 fe71 	bl	8006c70 <gpio_clear>
  timers_delay_microseconds(1);
 8005f8e:	2001      	movs	r0, #1
 8005f90:	f000 fb96 	bl	80066c0 <timers_delay_microseconds>
  spi_xfer(RFM_SPI, reg);
 8005f94:	b2a1      	uxth	r1, r4
 8005f96:	480b      	ldr	r0, [pc, #44]	; (8005fc4 <spi_read_burst+0x48>)
 8005f98:	f001 f82e 	bl	8006ff8 <spi_xfer>
  for(int i = 0; i < len; i++)
 8005f9c:	2400      	movs	r4, #0
 8005f9e:	42a5      	cmp	r5, r4
 8005fa0:	dd06      	ble.n	8005fb0 <spi_read_burst+0x34>
    buf[i] =  spi_xfer(RFM_SPI, 0x00);  
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	4807      	ldr	r0, [pc, #28]	; (8005fc4 <spi_read_burst+0x48>)
 8005fa6:	f001 f827 	bl	8006ff8 <spi_xfer>
 8005faa:	5530      	strb	r0, [r6, r4]
  for(int i = 0; i < len; i++)
 8005fac:	3401      	adds	r4, #1
 8005fae:	e7f6      	b.n	8005f9e <spi_read_burst+0x22>
  spi_chip_deselect();     
 8005fb0:	20a0      	movs	r0, #160	; 0xa0
 8005fb2:	2140      	movs	r1, #64	; 0x40
 8005fb4:	05c0      	lsls	r0, r0, #23
 8005fb6:	f000 fe59 	bl	8006c6c <gpio_set>
  timers_delay_microseconds(1);
 8005fba:	2001      	movs	r0, #1
 8005fbc:	f000 fb80 	bl	80066c0 <timers_delay_microseconds>
}
 8005fc0:	bd70      	pop	{r4, r5, r6, pc}
 8005fc2:	46c0      	nop			; (mov r8, r8)
 8005fc4:	40003800 	.word	0x40003800

08005fc8 <spi_write_single>:
{
 8005fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fca:	0005      	movs	r5, r0
 8005fcc:	000e      	movs	r6, r1
  uint8_t cmd = 0x80 | reg;
 8005fce:	2480      	movs	r4, #128	; 0x80
 8005fd0:	4264      	negs	r4, r4
 8005fd2:	4304      	orrs	r4, r0
 8005fd4:	b2e4      	uxtb	r4, r4
  spi_chip_select();
 8005fd6:	27a0      	movs	r7, #160	; 0xa0
 8005fd8:	05ff      	lsls	r7, r7, #23
 8005fda:	2140      	movs	r1, #64	; 0x40
 8005fdc:	0038      	movs	r0, r7
 8005fde:	f000 fe47 	bl	8006c70 <gpio_clear>
  timers_delay_microseconds(1);
 8005fe2:	2001      	movs	r0, #1
 8005fe4:	f000 fb6c 	bl	80066c0 <timers_delay_microseconds>
  spi_xfer(RFM_SPI, cmd);                 
 8005fe8:	b2a1      	uxth	r1, r4
 8005fea:	4c15      	ldr	r4, [pc, #84]	; (8006040 <spi_write_single+0x78>)
 8005fec:	0020      	movs	r0, r4
 8005fee:	f001 f803 	bl	8006ff8 <spi_xfer>
  spi_xfer(RFM_SPI, data);             
 8005ff2:	b2b1      	uxth	r1, r6
 8005ff4:	0020      	movs	r0, r4
 8005ff6:	f000 ffff 	bl	8006ff8 <spi_xfer>
  spi_chip_deselect(); 
 8005ffa:	2140      	movs	r1, #64	; 0x40
 8005ffc:	0038      	movs	r0, r7
 8005ffe:	f000 fe35 	bl	8006c6c <gpio_set>
  timers_delay_microseconds(1);
 8006002:	2001      	movs	r0, #1
 8006004:	f000 fb5c 	bl	80066c0 <timers_delay_microseconds>
  uint8_t curr_data = spi_read_single(reg);
 8006008:	0028      	movs	r0, r5
 800600a:	f7ff ff73 	bl	8005ef4 <spi_read_single>
 800600e:	0004      	movs	r4, r0
  if(reg == RFM_REG_12_IRQ_FLAGS)    
 8006010:	2d12      	cmp	r5, #18
 8006012:	d013      	beq.n	800603c <spi_write_single+0x74>
  TIMEOUT(10000, "RFM SPI Write", ((reg << 16) | data), (curr_data == data), ;, timers_delay_microseconds(100); curr_data = spi_read_single(reg););
 8006014:	f000 fba6 	bl	8006764 <timeout_init>
 8006018:	042a      	lsls	r2, r5, #16
 800601a:	4332      	orrs	r2, r6
 800601c:	4909      	ldr	r1, [pc, #36]	; (8006044 <spi_write_single+0x7c>)
 800601e:	480a      	ldr	r0, [pc, #40]	; (8006048 <spi_write_single+0x80>)
 8006020:	f000 fbae 	bl	8006780 <timeout>
 8006024:	2800      	cmp	r0, #0
 8006026:	d109      	bne.n	800603c <spi_write_single+0x74>
 8006028:	42b4      	cmp	r4, r6
 800602a:	d007      	beq.n	800603c <spi_write_single+0x74>
 800602c:	2064      	movs	r0, #100	; 0x64
 800602e:	f000 fb47 	bl	80066c0 <timers_delay_microseconds>
 8006032:	0028      	movs	r0, r5
 8006034:	f7ff ff5e 	bl	8005ef4 <spi_read_single>
 8006038:	0004      	movs	r4, r0
 800603a:	e7ed      	b.n	8006018 <spi_write_single+0x50>
}
 800603c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	40003800 	.word	0x40003800
 8006044:	08009550 	.word	0x08009550
 8006048:	00002710 	.word	0x00002710

0800604c <set_frequency>:
{
 800604c:	b510      	push	{r4, lr}
    uint32_t frf = frequency_hz / RFM_FSTEP;
 800604e:	f002 fde1 	bl	8008c14 <__aeabi_ui2d>
 8006052:	2200      	movs	r2, #0
 8006054:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <set_frequency+0x34>)
 8006056:	f001 fb73 	bl	8007740 <__aeabi_ddiv>
 800605a:	f001 fb53 	bl	8007704 <__aeabi_d2uiz>
 800605e:	0004      	movs	r4, r0
    spi_write_single(RFM_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 8006060:	0c01      	lsrs	r1, r0, #16
 8006062:	b2c9      	uxtb	r1, r1
 8006064:	2006      	movs	r0, #6
 8006066:	f7ff ffaf 	bl	8005fc8 <spi_write_single>
    spi_write_single(RFM_REG_07_FRF_MID, (frf >> 8) & 0xff);
 800606a:	0a21      	lsrs	r1, r4, #8
 800606c:	b2c9      	uxtb	r1, r1
 800606e:	2007      	movs	r0, #7
 8006070:	f7ff ffaa 	bl	8005fc8 <spi_write_single>
    spi_write_single(RFM_REG_08_FRF_LSB, frf & 0xff);
 8006074:	b2e1      	uxtb	r1, r4
 8006076:	2008      	movs	r0, #8
 8006078:	f7ff ffa6 	bl	8005fc8 <spi_write_single>
}
 800607c:	bd10      	pop	{r4, pc}
 800607e:	46c0      	nop			; (mov r8, r8)
 8006080:	404e8480 	.word	0x404e8480

08006084 <set_preamble_length>:
{
 8006084:	b510      	push	{r4, lr}
 8006086:	0004      	movs	r4, r0
    spi_write_single(RFM_REG_20_PREAMBLE_MSB, num_sym >> 8);
 8006088:	0a01      	lsrs	r1, r0, #8
 800608a:	2020      	movs	r0, #32
 800608c:	f7ff ff9c 	bl	8005fc8 <spi_write_single>
    spi_write_single(RFM_REG_21_PREAMBLE_LSB, num_sym & 0xff);
 8006090:	b2e1      	uxtb	r1, r4
 8006092:	2021      	movs	r0, #33	; 0x21
 8006094:	f7ff ff98 	bl	8005fc8 <spi_write_single>
}
 8006098:	bd10      	pop	{r4, pc}

0800609a <clear_buffer>:

static void clear_buffer(void)
{
 800609a:	b510      	push	{r4, lr}
    spi_write_single(RFM_REG_0D_FIFO_ADDR_PTR, 0);
 800609c:	2100      	movs	r1, #0
 800609e:	200d      	movs	r0, #13
 80060a0:	f7ff ff92 	bl	8005fc8 <spi_write_single>
    spi_write_single(RFM_REG_0E_FIFO_TX_BASE_ADDR, 0);
 80060a4:	2100      	movs	r1, #0
 80060a6:	200e      	movs	r0, #14
 80060a8:	f7ff ff8e 	bl	8005fc8 <spi_write_single>
    spi_write_single(RFM_REG_0F_FIFO_RX_BASE_ADDR, 0);
 80060ac:	2100      	movs	r1, #0
 80060ae:	200f      	movs	r0, #15
 80060b0:	f7ff ff8a 	bl	8005fc8 <spi_write_single>
}
 80060b4:	bd10      	pop	{r4, pc}

080060b6 <set_dio_irq>:
{
 80060b6:	b510      	push	{r4, lr}
 80060b8:	000c      	movs	r4, r1
  spi_write_single(RFM_REG_40_DIO_MAPPING1, io0_3);
 80060ba:	0001      	movs	r1, r0
 80060bc:	2040      	movs	r0, #64	; 0x40
 80060be:	f7ff ff83 	bl	8005fc8 <spi_write_single>
  spi_write_single(RFM_REG_41_DIO_MAPPING2, io4_5);
 80060c2:	0021      	movs	r1, r4
 80060c4:	2041      	movs	r0, #65	; 0x41
 80060c6:	f7ff ff7f 	bl	8005fc8 <spi_write_single>
}
 80060ca:	bd10      	pop	{r4, pc}

080060cc <rfm_reset>:
{
 80060cc:	b510      	push	{r4, lr}
  gpio_clear(RFM_RESET_PORT, RFM_RESET);
 80060ce:	24a0      	movs	r4, #160	; 0xa0
 80060d0:	05e4      	lsls	r4, r4, #23
 80060d2:	2110      	movs	r1, #16
 80060d4:	0020      	movs	r0, r4
 80060d6:	f000 fdcb 	bl	8006c70 <gpio_clear>
  timers_delay_milliseconds(1);
 80060da:	2001      	movs	r0, #1
 80060dc:	f000 fb24 	bl	8006728 <timers_delay_milliseconds>
  gpio_set(RFM_RESET_PORT, RFM_RESET);
 80060e0:	2110      	movs	r1, #16
 80060e2:	0020      	movs	r0, r4
 80060e4:	f000 fdc2 	bl	8006c6c <gpio_set>
  timers_delay_milliseconds(1);
 80060e8:	2001      	movs	r0, #1
 80060ea:	f000 fb1d 	bl	8006728 <timers_delay_milliseconds>
  timers_delay_milliseconds(10);
 80060ee:	200a      	movs	r0, #10
 80060f0:	f000 fb1a 	bl	8006728 <timers_delay_milliseconds>
  print_registers();
 80060f4:	f7ff ff1e 	bl	8005f34 <print_registers>
  spi_write_single(RFM_REG_01_OP_MODE, (spi_read_single(RFM_REG_01_OP_MODE) & ~RFM_MODE) | RFM_MODE_STDBY);
}

static inline void set_sleep_mode(void)
{
  spi_write_single(RFM_REG_01_OP_MODE, (spi_read_single(RFM_REG_01_OP_MODE) & ~RFM_MODE) |  RFM_MODE_SLEEP);
 80060f8:	2001      	movs	r0, #1
 80060fa:	f7ff fefb 	bl	8005ef4 <spi_read_single>
 80060fe:	2307      	movs	r3, #7
 8006100:	4398      	bics	r0, r3
 8006102:	b2c1      	uxtb	r1, r0
 8006104:	2001      	movs	r0, #1
 8006106:	f7ff ff5f 	bl	8005fc8 <spi_write_single>
  log_printf(MAIN, "RFM Reset Done\n");
 800610a:	4902      	ldr	r1, [pc, #8]	; (8006114 <rfm_reset+0x48>)
 800610c:	2000      	movs	r0, #0
 800610e:	f7ff f851 	bl	80051b4 <log_printf>
}
 8006112:	bd10      	pop	{r4, pc}
 8006114:	08009560 	.word	0x08009560

08006118 <rfm_init>:
{ 
 8006118:	b570      	push	{r4, r5, r6, lr}
  rcc_periph_clock_enable(RCC_GPIOA);
 800611a:	20b0      	movs	r0, #176	; 0xb0
 800611c:	00c0      	lsls	r0, r0, #3
 800611e:	f000 ff1d 	bl	8006f5c <rcc_periph_clock_enable>
  rcc_periph_clock_enable(RCC_GPIOB);
 8006122:	482c      	ldr	r0, [pc, #176]	; (80061d4 <rfm_init+0xbc>)
 8006124:	f000 ff1a 	bl	8006f5c <rcc_periph_clock_enable>
  rcc_periph_clock_enable(RCC_SYSCFG);
 8006128:	20d0      	movs	r0, #208	; 0xd0
 800612a:	00c0      	lsls	r0, r0, #3
 800612c:	f000 ff16 	bl	8006f5c <rcc_periph_clock_enable>
  clock_setup();
 8006130:	f7ff fe4e 	bl	8005dd0 <clock_setup>
  spi_setup();  
 8006134:	f7ff fe72 	bl	8005e1c <spi_setup>
  gpio_mode_setup(RFM_IO_0_PORT, GPIO_MODE_INPUT, GPIO_PUPD_NONE, RFM_IO_0);
 8006138:	2380      	movs	r3, #128	; 0x80
 800613a:	4d27      	ldr	r5, [pc, #156]	; (80061d8 <rfm_init+0xc0>)
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	2200      	movs	r2, #0
 8006140:	2100      	movs	r1, #0
 8006142:	0028      	movs	r0, r5
 8006144:	f000 fd97 	bl	8006c76 <gpio_mode_setup>
  gpio_mode_setup(RFM_IO_1_PORT, GPIO_MODE_INPUT, GPIO_PUPD_NONE, RFM_IO_1);
 8006148:	2380      	movs	r3, #128	; 0x80
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	2200      	movs	r2, #0
 800614e:	2100      	movs	r1, #0
 8006150:	0028      	movs	r0, r5
 8006152:	f000 fd90 	bl	8006c76 <gpio_mode_setup>
  gpio_mode_setup(RFM_IO_2_PORT, GPIO_MODE_INPUT, GPIO_PUPD_NONE, RFM_IO_2);
 8006156:	2380      	movs	r3, #128	; 0x80
 8006158:	24a0      	movs	r4, #160	; 0xa0
 800615a:	05e4      	lsls	r4, r4, #23
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	2200      	movs	r2, #0
 8006160:	2100      	movs	r1, #0
 8006162:	0020      	movs	r0, r4
 8006164:	f000 fd87 	bl	8006c76 <gpio_mode_setup>
  gpio_mode_setup(RFM_IO_3_PORT, GPIO_MODE_INPUT, GPIO_PUPD_NONE, RFM_IO_3);
 8006168:	2302      	movs	r3, #2
 800616a:	2200      	movs	r2, #0
 800616c:	2100      	movs	r1, #0
 800616e:	0028      	movs	r0, r5
 8006170:	f000 fd81 	bl	8006c76 <gpio_mode_setup>
  gpio_mode_setup(RFM_IO_4_PORT, GPIO_MODE_INPUT, GPIO_PUPD_NONE, RFM_IO_4);
 8006174:	2304      	movs	r3, #4
 8006176:	2200      	movs	r2, #0
 8006178:	2100      	movs	r1, #0
 800617a:	0028      	movs	r0, r5
 800617c:	f000 fd7b 	bl	8006c76 <gpio_mode_setup>
  gpio_mode_setup(RFM_IO_5_PORT, GPIO_MODE_INPUT, GPIO_PUPD_NONE, RFM_IO_5);
 8006180:	2301      	movs	r3, #1
 8006182:	2200      	movs	r2, #0
 8006184:	2100      	movs	r1, #0
 8006186:	0028      	movs	r0, r5
 8006188:	f000 fd75 	bl	8006c76 <gpio_mode_setup>
  gpio_mode_setup(RFM_RESET_PORT,         GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, RFM_RESET);  
 800618c:	2310      	movs	r3, #16
 800618e:	2200      	movs	r2, #0
 8006190:	2101      	movs	r1, #1
 8006192:	0020      	movs	r0, r4
 8006194:	f000 fd6f 	bl	8006c76 <gpio_mode_setup>
  gpio_set_output_options(RFM_RESET_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, RFM_RESET);
 8006198:	2310      	movs	r3, #16
 800619a:	2200      	movs	r2, #0
 800619c:	2100      	movs	r1, #0
 800619e:	0020      	movs	r0, r4
 80061a0:	f000 fd89 	bl	8006cb6 <gpio_set_output_options>
  gpio_set(RFM_RESET_PORT, RFM_RESET);
 80061a4:	2110      	movs	r1, #16
 80061a6:	0020      	movs	r0, r4
 80061a8:	f000 fd60 	bl	8006c6c <gpio_set>
  spi_chip_deselect();
 80061ac:	2140      	movs	r1, #64	; 0x40
 80061ae:	0020      	movs	r0, r4
 80061b0:	f000 fd5c 	bl	8006c6c <gpio_set>
  spi_write_single(RFM_REG_01_OP_MODE, (spi_read_single(RFM_REG_01_OP_MODE) & ~RFM_MODE) |  RFM_MODE_SLEEP);
 80061b4:	2001      	movs	r0, #1
 80061b6:	f7ff fe9d 	bl	8005ef4 <spi_read_single>
 80061ba:	2307      	movs	r3, #7
 80061bc:	4398      	bics	r0, r3
 80061be:	b2c1      	uxtb	r1, r0
 80061c0:	2001      	movs	r0, #1
 80061c2:	f7ff ff01 	bl	8005fc8 <spi_write_single>
  rfm_reset();
 80061c6:	f7ff ff81 	bl	80060cc <rfm_reset>
  log_printf(MAIN, "RFM Init Done\n");
 80061ca:	4904      	ldr	r1, [pc, #16]	; (80061dc <rfm_init+0xc4>)
 80061cc:	2000      	movs	r0, #0
 80061ce:	f7fe fff1 	bl	80051b4 <log_printf>
}
 80061d2:	bd70      	pop	{r4, r5, r6, pc}
 80061d4:	00000581 	.word	0x00000581
 80061d8:	50000400 	.word	0x50000400
 80061dc:	08009570 	.word	0x08009570

080061e0 <rfm_set_power>:
{
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	0005      	movs	r5, r0
 80061e4:	000c      	movs	r4, r1
  if( power > 20 )
 80061e6:	2814      	cmp	r0, #20
 80061e8:	dd00      	ble.n	80061ec <rfm_set_power+0xc>
      power = 20;
 80061ea:	2514      	movs	r5, #20
  if(ramp_time > 0x0F)
 80061ec:	2c0f      	cmp	r4, #15
 80061ee:	d900      	bls.n	80061f2 <rfm_set_power+0x12>
    ramp_time = 0x0F;
 80061f0:	240f      	movs	r4, #15
  spi_write_single(RFM_REG_4D_PA_DAC, (spi_read_single(RFM_REG_4D_PA_DAC) & ~RFM_PA_DAC_MASK) | RFM_PA_DAC_DISABLE);
 80061f2:	204d      	movs	r0, #77	; 0x4d
 80061f4:	f7ff fe7e 	bl	8005ef4 <spi_read_single>
 80061f8:	b241      	sxtb	r1, r0
 80061fa:	2307      	movs	r3, #7
 80061fc:	4399      	bics	r1, r3
 80061fe:	2304      	movs	r3, #4
 8006200:	4319      	orrs	r1, r3
 8006202:	b2c9      	uxtb	r1, r1
 8006204:	204d      	movs	r0, #77	; 0x4d
 8006206:	f7ff fedf 	bl	8005fc8 <spi_write_single>
	spi_write_single(RFM_REG_09_PA_CONFIG, RFM_PA_SELECT | RFM_MAX_POWER | (power-2));
 800620a:	3d02      	subs	r5, #2
 800620c:	b269      	sxtb	r1, r5
 800620e:	2510      	movs	r5, #16
 8006210:	426d      	negs	r5, r5
 8006212:	4329      	orrs	r1, r5
 8006214:	b2c9      	uxtb	r1, r1
 8006216:	2009      	movs	r0, #9
 8006218:	f7ff fed6 	bl	8005fc8 <spi_write_single>
  spi_write_single(RFM_REG_0A_PA_RAMP, (spi_read_single(RFM_REG_0A_PA_RAMP) & ~RFM_PA_RAMP_MASK) | ramp_time);
 800621c:	200a      	movs	r0, #10
 800621e:	f7ff fe69 	bl	8005ef4 <spi_read_single>
 8006222:	b241      	sxtb	r1, r0
 8006224:	230f      	movs	r3, #15
 8006226:	4399      	bics	r1, r3
 8006228:	4321      	orrs	r1, r4
 800622a:	b2c9      	uxtb	r1, r1
 800622c:	200a      	movs	r0, #10
 800622e:	f7ff fecb 	bl	8005fc8 <spi_write_single>
}
 8006232:	bd70      	pop	{r4, r5, r6, pc}

08006234 <rfm_config_for_lora>:
{
 8006234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006236:	46ce      	mov	lr, r9
 8006238:	4647      	mov	r7, r8
 800623a:	b580      	push	{r7, lr}
 800623c:	0005      	movs	r5, r0
 800623e:	4688      	mov	r8, r1
 8006240:	0016      	movs	r6, r2
 8006242:	001c      	movs	r4, r3
 8006244:	ab08      	add	r3, sp, #32
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	b25b      	sxtb	r3, r3
 800624a:	4699      	mov	r9, r3
  spi_write_single(RFM_REG_01_OP_MODE, (spi_read_single(RFM_REG_01_OP_MODE) & ~RFM_MODE) |  RFM_MODE_SLEEP);
 800624c:	2001      	movs	r0, #1
 800624e:	f7ff fe51 	bl	8005ef4 <spi_read_single>
 8006252:	2707      	movs	r7, #7
 8006254:	43b8      	bics	r0, r7
 8006256:	b2c1      	uxtb	r1, r0
 8006258:	2001      	movs	r0, #1
 800625a:	f7ff feb5 	bl	8005fc8 <spi_write_single>
  spi_write_single(RFM_REG_01_OP_MODE, RFM_MODE_SLEEP | RFM_LONG_RANGE_MODE);
 800625e:	2180      	movs	r1, #128	; 0x80
 8006260:	2001      	movs	r0, #1
 8006262:	f7ff feb1 	bl	8005fc8 <spi_write_single>
  spi_write_single(RFM_REG_01_OP_MODE, (spi_read_single(RFM_REG_01_OP_MODE) & ~RFM_MODE) | RFM_MODE_STDBY);
 8006266:	2001      	movs	r0, #1
 8006268:	f7ff fe44 	bl	8005ef4 <spi_read_single>
 800626c:	b241      	sxtb	r1, r0
 800626e:	43b9      	bics	r1, r7
 8006270:	2701      	movs	r7, #1
 8006272:	4339      	orrs	r1, r7
 8006274:	b2c9      	uxtb	r1, r1
 8006276:	2001      	movs	r0, #1
 8006278:	f7ff fea6 	bl	8005fc8 <spi_write_single>
  set_frequency(868000000);
 800627c:	481f      	ldr	r0, [pc, #124]	; (80062fc <rfm_config_for_lora+0xc8>)
 800627e:	f7ff fee5 	bl	800604c <set_frequency>
  rfm_set_power(power, RFM_PA_RAMP_40US);
 8006282:	2109      	movs	r1, #9
 8006284:	4648      	mov	r0, r9
 8006286:	f7ff ffab 	bl	80061e0 <rfm_set_power>
  spi_write_single(RFM_REG_1F_SYMB_TIMEOUT_LSB, 0x64);
 800628a:	2164      	movs	r1, #100	; 0x64
 800628c:	201f      	movs	r0, #31
 800628e:	f7ff fe9b 	bl	8005fc8 <spi_write_single>
  set_preamble_length(6);
 8006292:	2006      	movs	r0, #6
 8006294:	f7ff fef6 	bl	8006084 <set_preamble_length>
  spi_write_single(RFM_REG_1D_MODEM_CONFIG1, BW | CR | 1);
 8006298:	4643      	mov	r3, r8
 800629a:	431d      	orrs	r5, r3
 800629c:	433d      	orrs	r5, r7
 800629e:	b2e9      	uxtb	r1, r5
 80062a0:	201d      	movs	r0, #29
 80062a2:	f7ff fe91 	bl	8005fc8 <spi_write_single>
  spi_write_single(RFM_REG_1E_MODEM_CONFIG2, SF | (crc_turn_on << 2));
 80062a6:	00a4      	lsls	r4, r4, #2
 80062a8:	4334      	orrs	r4, r6
 80062aa:	b2e1      	uxtb	r1, r4
 80062ac:	201e      	movs	r0, #30
 80062ae:	f7ff fe8b 	bl	8005fc8 <spi_write_single>
  if(SF == RFM_SPREADING_FACTOR_64CPS)
 80062b2:	2e60      	cmp	r6, #96	; 0x60
 80062b4:	d010      	beq.n	80062d8 <rfm_config_for_lora+0xa4>
  spi_write_single(RFM_REG_22_PAYLOAD_LENGTH, RFM_PACKET_LENGTH);
 80062b6:	2110      	movs	r1, #16
 80062b8:	2022      	movs	r0, #34	; 0x22
 80062ba:	f7ff fe85 	bl	8005fc8 <spi_write_single>
  spi_write_single(RFM_REG_01_OP_MODE, (spi_read_single(RFM_REG_01_OP_MODE) & ~RFM_MODE) |  RFM_MODE_SLEEP);
 80062be:	2001      	movs	r0, #1
 80062c0:	f7ff fe18 	bl	8005ef4 <spi_read_single>
 80062c4:	2307      	movs	r3, #7
 80062c6:	4398      	bics	r0, r3
 80062c8:	b2c1      	uxtb	r1, r0
 80062ca:	2001      	movs	r0, #1
 80062cc:	f7ff fe7c 	bl	8005fc8 <spi_write_single>
}
 80062d0:	bcc0      	pop	{r6, r7}
 80062d2:	46b9      	mov	r9, r7
 80062d4:	46b0      	mov	r8, r6
 80062d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    spi_write_single(0x31, (spi_read_single(0x31) & ~0xF8) | 0x05);
 80062d8:	2031      	movs	r0, #49	; 0x31
 80062da:	f7ff fe0b 	bl	8005ef4 <spi_read_single>
 80062de:	b240      	sxtb	r0, r0
 80062e0:	2102      	movs	r1, #2
 80062e2:	4001      	ands	r1, r0
 80062e4:	2005      	movs	r0, #5
 80062e6:	4301      	orrs	r1, r0
 80062e8:	b249      	sxtb	r1, r1
 80062ea:	b2c9      	uxtb	r1, r1
 80062ec:	2031      	movs	r0, #49	; 0x31
 80062ee:	f7ff fe6b 	bl	8005fc8 <spi_write_single>
    spi_write_single(0x37, 0x0C);
 80062f2:	210c      	movs	r1, #12
 80062f4:	2037      	movs	r0, #55	; 0x37
 80062f6:	f7ff fe67 	bl	8005fc8 <spi_write_single>
 80062fa:	e7dc      	b.n	80062b6 <rfm_config_for_lora+0x82>
 80062fc:	33bca100 	.word	0x33bca100

08006300 <rfm_start_listening>:
{
 8006300:	b570      	push	{r4, r5, r6, lr}
  spi_write_single(RFM_REG_01_OP_MODE, (spi_read_single(RFM_REG_01_OP_MODE) & ~RFM_MODE) | RFM_MODE_STDBY);
 8006302:	2001      	movs	r0, #1
 8006304:	f7ff fdf6 	bl	8005ef4 <spi_read_single>
 8006308:	b241      	sxtb	r1, r0
 800630a:	2507      	movs	r5, #7
 800630c:	43a9      	bics	r1, r5
 800630e:	2001      	movs	r0, #1
 8006310:	4301      	orrs	r1, r0
 8006312:	b2c9      	uxtb	r1, r1
 8006314:	2001      	movs	r0, #1
 8006316:	f7ff fe57 	bl	8005fc8 <spi_write_single>
  clear_buffer();
 800631a:	f7ff febe 	bl	800609a <clear_buffer>
  set_dio_irq(RFM_IO_0_IRQ_RX_DONE | RFM_IO_1_IRQ_RX_TIMEOUT | RFM_IO_2_IRQ_FHSS_CHANGE | RFM_IO_3_IRQ_CRC_ERROR, RFM_IO_4_IRQ_CAD_DETECTED | RFM_IO_5_IRQ_MODE_READY);
 800631e:	2100      	movs	r1, #0
 8006320:	2002      	movs	r0, #2
 8006322:	f7ff fec8 	bl	80060b6 <set_dio_irq>
  spi_write_single(RFM_REG_11_IRQ_FLAGS_MASK, spi_read_single(RFM_REG_11_IRQ_FLAGS_MASK) | irq); 
 8006326:	2011      	movs	r0, #17
 8006328:	f7ff fde4 	bl	8005ef4 <spi_read_single>
 800632c:	21ff      	movs	r1, #255	; 0xff
 800632e:	2011      	movs	r0, #17
 8006330:	f7ff fe4a 	bl	8005fc8 <spi_write_single>
  spi_write_single(RFM_REG_11_IRQ_FLAGS_MASK, spi_read_single(RFM_REG_11_IRQ_FLAGS_MASK) & ~irq); 
 8006334:	2011      	movs	r0, #17
 8006336:	f7ff fddd 	bl	8005ef4 <spi_read_single>
 800633a:	b240      	sxtb	r0, r0
 800633c:	210f      	movs	r1, #15
 800633e:	4001      	ands	r1, r0
 8006340:	2011      	movs	r0, #17
 8006342:	f7ff fe41 	bl	8005fc8 <spi_write_single>
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 8006346:	21ff      	movs	r1, #255	; 0xff
 8006348:	2012      	movs	r0, #18
 800634a:	f7ff fe3d 	bl	8005fc8 <spi_write_single>
  exti_reset_request(RFM_IO_0_EXTI);
 800634e:	2480      	movs	r4, #128	; 0x80
 8006350:	00e4      	lsls	r4, r4, #3
 8006352:	0020      	movs	r0, r4
 8006354:	f000 fbf4 	bl	8006b40 <exti_reset_request>
  exti_select_source(RFM_IO_0_EXTI, RFM_IO_0_PORT);
 8006358:	490e      	ldr	r1, [pc, #56]	; (8006394 <rfm_start_listening+0x94>)
 800635a:	0020      	movs	r0, r4
 800635c:	f000 fbf6 	bl	8006b4c <exti_select_source>
	exti_set_trigger(RFM_IO_0_EXTI, EXTI_TRIGGER_RISING);
 8006360:	2100      	movs	r1, #0
 8006362:	0020      	movs	r0, r4
 8006364:	f000 fbbe 	bl	8006ae4 <exti_set_trigger>
	exti_enable_request(RFM_IO_0_EXTI);
 8006368:	0020      	movs	r0, r4
 800636a:	f000 fbdb 	bl	8006b24 <exti_enable_request>
	nvic_enable_irq(RFM_IO_0_NVIC);
 800636e:	2007      	movs	r0, #7
 8006370:	f000 ff36 	bl	80071e0 <nvic_enable_irq>
  nvic_set_priority(RFM_IO_0_NVIC, 0);
 8006374:	2100      	movs	r1, #0
 8006376:	2007      	movs	r0, #7
 8006378:	f000 ff3e 	bl	80071f8 <nvic_set_priority>
  spi_write_single(RFM_REG_01_OP_MODE, (spi_read_single(RFM_REG_01_OP_MODE) & ~RFM_MODE) | RFM_MODE_RXCONTINUOUS);
 800637c:	2001      	movs	r0, #1
 800637e:	f7ff fdb9 	bl	8005ef4 <spi_read_single>
 8006382:	b241      	sxtb	r1, r0
 8006384:	43a9      	bics	r1, r5
 8006386:	2005      	movs	r0, #5
 8006388:	4301      	orrs	r1, r0
 800638a:	b2c9      	uxtb	r1, r1
 800638c:	2001      	movs	r0, #1
 800638e:	f7ff fe1b 	bl	8005fc8 <spi_write_single>
}
 8006392:	bd70      	pop	{r4, r5, r6, pc}
 8006394:	50000400 	.word	0x50000400

08006398 <rfm_organize_packet>:
      packet->data.device_number  = packet->data.buffer[RFM_PACKET_DEV_NUM_3] << 24 | packet->data.buffer[RFM_PACKET_DEV_NUM_2] << 16 | packet->data.buffer[RFM_PACKET_DEV_NUM_1] << 8 | packet->data.buffer[RFM_PACKET_DEV_NUM_0];
 8006398:	78c3      	ldrb	r3, [r0, #3]
 800639a:	061b      	lsls	r3, r3, #24
 800639c:	7882      	ldrb	r2, [r0, #2]
 800639e:	0412      	lsls	r2, r2, #16
 80063a0:	4313      	orrs	r3, r2
 80063a2:	7842      	ldrb	r2, [r0, #1]
 80063a4:	0212      	lsls	r2, r2, #8
 80063a6:	4313      	orrs	r3, r2
 80063a8:	7802      	ldrb	r2, [r0, #0]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	6003      	str	r3, [r0, #0]
      packet->data.msg_number     = packet->data.buffer[RFM_PACKET_MSG_NUM_3] << 24 | packet->data.buffer[RFM_PACKET_MSG_NUM_2] << 16 | packet->data.buffer[RFM_PACKET_MSG_NUM_1] << 8 | packet->data.buffer[RFM_PACKET_MSG_NUM_0];
 80063ae:	79c3      	ldrb	r3, [r0, #7]
 80063b0:	061b      	lsls	r3, r3, #24
 80063b2:	7982      	ldrb	r2, [r0, #6]
 80063b4:	0412      	lsls	r2, r2, #16
 80063b6:	4313      	orrs	r3, r2
 80063b8:	7942      	ldrb	r2, [r0, #5]
 80063ba:	0212      	lsls	r2, r2, #8
 80063bc:	4313      	orrs	r3, r2
 80063be:	7902      	ldrb	r2, [r0, #4]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	6043      	str	r3, [r0, #4]
      packet->data.battery        = packet->data.buffer[RFM_PACKET_BATTERY_1] << 8  | packet->data.buffer[RFM_PACKET_BATTERY_0];
 80063c4:	7a82      	ldrb	r2, [r0, #10]
 80063c6:	0212      	lsls	r2, r2, #8
 80063c8:	7a43      	ldrb	r3, [r0, #9]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	8143      	strh	r3, [r0, #10]
      packet->data.temperature    = packet->data.buffer[RFM_PACKET_TEMP_1]    << 8  | packet->data.buffer[RFM_PACKET_TEMP_0];
 80063ce:	7b02      	ldrb	r2, [r0, #12]
 80063d0:	0212      	lsls	r2, r2, #8
 80063d2:	0a1b      	lsrs	r3, r3, #8
 80063d4:	4313      	orrs	r3, r2
 80063d6:	8183      	strh	r3, [r0, #12]
}
 80063d8:	4770      	bx	lr
	...

080063dc <rfm_get_packets>:
{
 80063dc:	b510      	push	{r4, lr}
  if(packets_tail != packets_head)
 80063de:	4b1f      	ldr	r3, [pc, #124]	; (800645c <rfm_get_packets+0x80>)
 80063e0:	781a      	ldrb	r2, [r3, #0]
 80063e2:	4b1f      	ldr	r3, [pc, #124]	; (8006460 <rfm_get_packets+0x84>)
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d100      	bne.n	80063ec <rfm_get_packets+0x10>
}
 80063ea:	bd10      	pop	{r4, pc}
  spi_write_single(RFM_REG_01_OP_MODE, (spi_read_single(RFM_REG_01_OP_MODE) & ~RFM_MODE) | RFM_MODE_STDBY);
 80063ec:	2001      	movs	r0, #1
 80063ee:	f7ff fd81 	bl	8005ef4 <spi_read_single>
 80063f2:	b241      	sxtb	r1, r0
 80063f4:	2307      	movs	r3, #7
 80063f6:	4399      	bics	r1, r3
 80063f8:	2001      	movs	r0, #1
 80063fa:	4301      	orrs	r1, r0
 80063fc:	b2c9      	uxtb	r1, r1
 80063fe:	2001      	movs	r0, #1
 8006400:	f7ff fde2 	bl	8005fc8 <spi_write_single>
    clear_buffer();
 8006404:	f7ff fe49 	bl	800609a <clear_buffer>
    while(packets_tail != packets_head)
 8006408:	e013      	b.n	8006432 <rfm_get_packets+0x56>
      log_printf(MAIN, "Get %u %u\n", packets_head, packets_tail);
 800640a:	4916      	ldr	r1, [pc, #88]	; (8006464 <rfm_get_packets+0x88>)
 800640c:	2000      	movs	r0, #0
 800640e:	f7fe fed1 	bl	80051b4 <log_printf>
      spi_read_burst(RFM_REG_00_FIFO, packets_buf[packets_tail].data.buffer, RFM_PACKET_LENGTH);
 8006412:	4c12      	ldr	r4, [pc, #72]	; (800645c <rfm_get_packets+0x80>)
 8006414:	7823      	ldrb	r3, [r4, #0]
 8006416:	0059      	lsls	r1, r3, #1
 8006418:	18c9      	adds	r1, r1, r3
 800641a:	00c9      	lsls	r1, r1, #3
 800641c:	4b12      	ldr	r3, [pc, #72]	; (8006468 <rfm_get_packets+0x8c>)
 800641e:	18c9      	adds	r1, r1, r3
 8006420:	2210      	movs	r2, #16
 8006422:	2000      	movs	r0, #0
 8006424:	f7ff fdaa 	bl	8005f7c <spi_read_burst>
      packets_tail = (packets_tail + 1) % PACKETS_BUF_SIZE;
 8006428:	7822      	ldrb	r2, [r4, #0]
 800642a:	3201      	adds	r2, #1
 800642c:	230f      	movs	r3, #15
 800642e:	4013      	ands	r3, r2
 8006430:	7023      	strb	r3, [r4, #0]
    while(packets_tail != packets_head)
 8006432:	4b0a      	ldr	r3, [pc, #40]	; (800645c <rfm_get_packets+0x80>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	4a0a      	ldr	r2, [pc, #40]	; (8006460 <rfm_get_packets+0x84>)
 8006438:	7812      	ldrb	r2, [r2, #0]
 800643a:	4293      	cmp	r3, r2
 800643c:	d1e5      	bne.n	800640a <rfm_get_packets+0x2e>
    clear_buffer();
 800643e:	f7ff fe2c 	bl	800609a <clear_buffer>
  spi_write_single(RFM_REG_01_OP_MODE, (spi_read_single(RFM_REG_01_OP_MODE) & ~RFM_MODE) | RFM_MODE_RXCONTINUOUS);
 8006442:	2001      	movs	r0, #1
 8006444:	f7ff fd56 	bl	8005ef4 <spi_read_single>
 8006448:	b241      	sxtb	r1, r0
 800644a:	2307      	movs	r3, #7
 800644c:	4399      	bics	r1, r3
 800644e:	2005      	movs	r0, #5
 8006450:	4301      	orrs	r1, r0
 8006452:	b2c9      	uxtb	r1, r1
 8006454:	2001      	movs	r0, #1
 8006456:	f7ff fdb7 	bl	8005fc8 <spi_write_single>
}
 800645a:	e7c6      	b.n	80063ea <rfm_get_packets+0xe>
 800645c:	20000a02 	.word	0x20000a02
 8006460:	20000a00 	.word	0x20000a00
 8006464:	08009580 	.word	0x08009580
 8006468:	20000880 	.word	0x20000880

0800646c <rfm_get_next_packet>:
{
 800646c:	b510      	push	{r4, lr}
  rfm_get_packets();
 800646e:	f7ff ffb5 	bl	80063dc <rfm_get_packets>
  log_printf(MAIN, "Read %u\n", packets_read);
 8006472:	4c08      	ldr	r4, [pc, #32]	; (8006494 <rfm_get_next_packet+0x28>)
 8006474:	7822      	ldrb	r2, [r4, #0]
 8006476:	4908      	ldr	r1, [pc, #32]	; (8006498 <rfm_get_next_packet+0x2c>)
 8006478:	2000      	movs	r0, #0
 800647a:	f7fe fe9b 	bl	80051b4 <log_printf>
  rfm_packet_t *packet = &packets_buf[packets_read];
 800647e:	7823      	ldrb	r3, [r4, #0]
 8006480:	005a      	lsls	r2, r3, #1
 8006482:	18d2      	adds	r2, r2, r3
 8006484:	00d0      	lsls	r0, r2, #3
 8006486:	4a05      	ldr	r2, [pc, #20]	; (800649c <rfm_get_next_packet+0x30>)
 8006488:	1880      	adds	r0, r0, r2
  packets_read = (packets_read + 1) % PACKETS_BUF_SIZE;
 800648a:	3301      	adds	r3, #1
 800648c:	220f      	movs	r2, #15
 800648e:	4013      	ands	r3, r2
 8006490:	7023      	strb	r3, [r4, #0]
}
 8006492:	bd10      	pop	{r4, pc}
 8006494:	20000a01 	.word	0x20000a01
 8006498:	0800958c 	.word	0x0800958c
 800649c:	20000880 	.word	0x20000880

080064a0 <rfm_get_num_packets>:
  return ((uint16_t)(PACKETS_BUF_SIZE + packets_head - packets_read)) % PACKETS_BUF_SIZE;
 80064a0:	4b03      	ldr	r3, [pc, #12]	; (80064b0 <rfm_get_num_packets+0x10>)
 80064a2:	7818      	ldrb	r0, [r3, #0]
 80064a4:	4b03      	ldr	r3, [pc, #12]	; (80064b4 <rfm_get_num_packets+0x14>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	1ac3      	subs	r3, r0, r3
 80064aa:	200f      	movs	r0, #15
 80064ac:	4018      	ands	r0, r3
}
 80064ae:	4770      	bx	lr
 80064b0:	20000a00 	.word	0x20000a00
 80064b4:	20000a01 	.word	0x20000a01

080064b8 <exti4_15_isr>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void exti4_15_isr(void)
{
 80064b8:	b570      	push	{r4, r5, r6, lr}
  uint16_t timer = timers_micros();
 80064ba:	f000 f917 	bl	80066ec <timers_micros>
  
  exti_reset_request(RFM_IO_0_EXTI);
 80064be:	2480      	movs	r4, #128	; 0x80
 80064c0:	00e4      	lsls	r4, r4, #3
 80064c2:	0020      	movs	r0, r4
 80064c4:	f000 fb3c 	bl	8006b40 <exti_reset_request>
  exti_reset_request(RFM_IO_0_EXTI);
 80064c8:	0020      	movs	r0, r4
 80064ca:	f000 fb39 	bl	8006b40 <exti_reset_request>

  // Store IRQ Flags
  packets_buf[packets_head].flags = get_irq();
 80064ce:	4d1b      	ldr	r5, [pc, #108]	; (800653c <exti4_15_isr+0x84>)
 80064d0:	782e      	ldrb	r6, [r5, #0]
  return spi_read_single(RFM_REG_12_IRQ_FLAGS);
 80064d2:	2012      	movs	r0, #18
 80064d4:	f7ff fd0e 	bl	8005ef4 <spi_read_single>
  packets_buf[packets_head].flags = get_irq();
 80064d8:	4c19      	ldr	r4, [pc, #100]	; (8006540 <exti4_15_isr+0x88>)
 80064da:	0073      	lsls	r3, r6, #1
 80064dc:	199b      	adds	r3, r3, r6
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	18e3      	adds	r3, r4, r3
 80064e2:	7418      	strb	r0, [r3, #16]
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 80064e4:	21ff      	movs	r1, #255	; 0xff
 80064e6:	2012      	movs	r0, #18
 80064e8:	f7ff fd6e 	bl	8005fc8 <spi_write_single>
 80064ec:	21ff      	movs	r1, #255	; 0xff
 80064ee:	2012      	movs	r0, #18
 80064f0:	f7ff fd6a 	bl	8005fc8 <spi_write_single>
  clear_irq(RFM_IRQ_ALL);
  clear_irq(RFM_IRQ_ALL);

  // Get signal strength
  packets_buf[packets_head].rssi = spi_read_single(RFM_REG_1A_PKT_RSSI_VALUE);
 80064f4:	201a      	movs	r0, #26
 80064f6:	f7ff fcfd 	bl	8005ef4 <spi_read_single>
 80064fa:	782a      	ldrb	r2, [r5, #0]
 80064fc:	b200      	sxth	r0, r0
  packets_buf[packets_head].rssi -= 137;
 80064fe:	0053      	lsls	r3, r2, #1
 8006500:	189b      	adds	r3, r3, r2
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	18e3      	adds	r3, r4, r3
 8006506:	3889      	subs	r0, #137	; 0x89
 8006508:	8298      	strh	r0, [r3, #20]
  packets_buf[packets_head].snr = spi_read_single(RFM_REG_19_PKT_SNR_VALUE) / 4;
 800650a:	2019      	movs	r0, #25
 800650c:	f7ff fcf2 	bl	8005ef4 <spi_read_single>
 8006510:	782b      	ldrb	r3, [r5, #0]
 8006512:	005a      	lsls	r2, r3, #1
 8006514:	18d2      	adds	r2, r2, r3
 8006516:	00d2      	lsls	r2, r2, #3
 8006518:	18a4      	adds	r4, r4, r2
 800651a:	0880      	lsrs	r0, r0, #2
 800651c:	74a0      	strb	r0, [r4, #18]

  // Check for CRC error
  packets_buf[packets_head].crc_ok = !(packets_buf[packets_head].flags & RFM_IRQ_PAYLOAD_CRC_ERROR);
 800651e:	7c22      	ldrb	r2, [r4, #16]
 8006520:	0952      	lsrs	r2, r2, #5
 8006522:	2101      	movs	r1, #1
 8006524:	404a      	eors	r2, r1
 8006526:	2101      	movs	r1, #1
 8006528:	400a      	ands	r2, r1
 800652a:	7462      	strb	r2, [r4, #17]

  packets_head = (packets_head + 1) % PACKETS_BUF_SIZE;
 800652c:	3301      	adds	r3, #1
 800652e:	220f      	movs	r2, #15
 8006530:	4013      	ands	r3, r2
 8006532:	702b      	strb	r3, [r5, #0]

  uint16_t time = timers_micros() - timer;
 8006534:	f000 f8da 	bl	80066ec <timers_micros>
  // log_printf(MAIN, "ISR %u %u %u\n", time, packets_head, packets_tail);
}
 8006538:	bd70      	pop	{r4, r5, r6, pc}
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	20000a00 	.word	0x20000a00
 8006540:	20000880 	.word	0x20000880

08006544 <test_mem_write_read>:
/*////////////////////////////////////////////////////////////////////////////*/
// Memory tests
/*////////////////////////////////////////////////////////////////////////////*/

void test_mem_write_read(void)
{
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	b082      	sub	sp, #8
    uint32_t eeprom_address = EEPROM_END - EEPROM_PAGE_SIZE;
    uint32_t eeprom_word    = 0x12345678;

    uint32_t flash_address = FLASH_END - FLASH_PAGE_SIZE;
    uint32_t *flash_data   = (uint32_t*)malloc(64); 
 8006548:	2040      	movs	r0, #64	; 0x40
 800654a:	f000 fe73 	bl	8007234 <malloc>
 800654e:	0004      	movs	r4, r0
    flash_data[0] = 0x12345678;
 8006550:	4e22      	ldr	r6, [pc, #136]	; (80065dc <test_mem_write_read+0x98>)
 8006552:	6006      	str	r6, [r0, #0]
    flash_data[1] = 0x24681234;
 8006554:	4b22      	ldr	r3, [pc, #136]	; (80065e0 <test_mem_write_read+0x9c>)
 8006556:	6043      	str	r3, [r0, #4]

    log_printf(MAIN, "Test Mem Write Read\n\n");
 8006558:	4922      	ldr	r1, [pc, #136]	; (80065e4 <test_mem_write_read+0xa0>)
 800655a:	2000      	movs	r0, #0
 800655c:	f7fe fe2a 	bl	80051b4 <log_printf>

    log_printf(MAIN, "EEPROM Start: %08x : %08x\n", eeprom_address, MMIO32(eeprom_address));
 8006560:	4d21      	ldr	r5, [pc, #132]	; (80065e8 <test_mem_write_read+0xa4>)
 8006562:	682b      	ldr	r3, [r5, #0]
 8006564:	002a      	movs	r2, r5
 8006566:	4921      	ldr	r1, [pc, #132]	; (80065ec <test_mem_write_read+0xa8>)
 8006568:	2000      	movs	r0, #0
 800656a:	f7fe fe23 	bl	80051b4 <log_printf>
    log_printf(MAIN, "Programming: %08x\n", eeprom_word); mem_eeprom_write_word(eeprom_address, eeprom_word);
 800656e:	0032      	movs	r2, r6
 8006570:	491f      	ldr	r1, [pc, #124]	; (80065f0 <test_mem_write_read+0xac>)
 8006572:	2000      	movs	r0, #0
 8006574:	f7fe fe1e 	bl	80051b4 <log_printf>
 8006578:	0031      	movs	r1, r6
 800657a:	0028      	movs	r0, r5
 800657c:	f7fe fe3c 	bl	80051f8 <mem_eeprom_write_word>
    log_printf(MAIN, "EEPROM End: %08x : %08x\n\n", eeprom_address, MMIO32(eeprom_address));
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	002a      	movs	r2, r5
 8006584:	491b      	ldr	r1, [pc, #108]	; (80065f4 <test_mem_write_read+0xb0>)
 8006586:	2000      	movs	r0, #0
 8006588:	f7fe fe14 	bl	80051b4 <log_printf>

    log_printf(MAIN, "Flash Erase\n"); mem_flash_erase_page(flash_address);
 800658c:	491a      	ldr	r1, [pc, #104]	; (80065f8 <test_mem_write_read+0xb4>)
 800658e:	2000      	movs	r0, #0
 8006590:	f7fe fe10 	bl	80051b4 <log_printf>
 8006594:	4d19      	ldr	r5, [pc, #100]	; (80065fc <test_mem_write_read+0xb8>)
 8006596:	0028      	movs	r0, r5
 8006598:	f7fe fe82 	bl	80052a0 <mem_flash_erase_page>
    log_printf(MAIN, "Flash Start: %08x : %08x\n%08x : %08x\n", flash_address, MMIO32(flash_address), flash_address+4, MMIO32(flash_address+4));
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	4e18      	ldr	r6, [pc, #96]	; (8006600 <test_mem_write_read+0xbc>)
 80065a0:	6832      	ldr	r2, [r6, #0]
 80065a2:	9201      	str	r2, [sp, #4]
 80065a4:	9600      	str	r6, [sp, #0]
 80065a6:	002a      	movs	r2, r5
 80065a8:	4916      	ldr	r1, [pc, #88]	; (8006604 <test_mem_write_read+0xc0>)
 80065aa:	2000      	movs	r0, #0
 80065ac:	f7fe fe02 	bl	80051b4 <log_printf>
    log_printf(MAIN, "Programming %08x %08x\n", flash_data[0], flash_data[1]); mem_flash_write_half_page(flash_address, flash_data);
 80065b0:	6863      	ldr	r3, [r4, #4]
 80065b2:	6822      	ldr	r2, [r4, #0]
 80065b4:	4914      	ldr	r1, [pc, #80]	; (8006608 <test_mem_write_read+0xc4>)
 80065b6:	2000      	movs	r0, #0
 80065b8:	f7fe fdfc 	bl	80051b4 <log_printf>
 80065bc:	0021      	movs	r1, r4
 80065be:	0028      	movs	r0, r5
 80065c0:	f7fe fe7e 	bl	80052c0 <mem_flash_write_half_page>
    // log_printf(MAIN, "Programming %08x\n", flash_data[1]); mem_flash_write_word(flash_address, flash_data[1]);
    log_printf(MAIN, "Flash End: %08x : %08x\n%08x : %08x\n", flash_address, MMIO32(flash_address), flash_address+4, MMIO32(flash_address+4));
 80065c4:	682b      	ldr	r3, [r5, #0]
 80065c6:	6832      	ldr	r2, [r6, #0]
 80065c8:	9201      	str	r2, [sp, #4]
 80065ca:	9600      	str	r6, [sp, #0]
 80065cc:	002a      	movs	r2, r5
 80065ce:	490f      	ldr	r1, [pc, #60]	; (800660c <test_mem_write_read+0xc8>)
 80065d0:	2000      	movs	r0, #0
 80065d2:	f7fe fdef 	bl	80051b4 <log_printf>
}
 80065d6:	b002      	add	sp, #8
 80065d8:	bd70      	pop	{r4, r5, r6, pc}
 80065da:	46c0      	nop			; (mov r8, r8)
 80065dc:	12345678 	.word	0x12345678
 80065e0:	24681234 	.word	0x24681234
 80065e4:	08009598 	.word	0x08009598
 80065e8:	080807fc 	.word	0x080807fc
 80065ec:	080095b0 	.word	0x080095b0
 80065f0:	080095cc 	.word	0x080095cc
 80065f4:	080095e0 	.word	0x080095e0
 80065f8:	080095fc 	.word	0x080095fc
 80065fc:	0800ff80 	.word	0x0800ff80
 8006600:	0800ff84 	.word	0x0800ff84
 8006604:	0800960c 	.word	0x0800960c
 8006608:	08009634 	.word	0x08009634
 800660c:	0800964c 	.word	0x0800964c

08006610 <flash_led>:
{
    boot_jump_to_application(address);
}

void flash_led(uint16_t milliseconds, uint8_t num_flashes)
{
 8006610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006612:	46c6      	mov	lr, r8
 8006614:	b500      	push	{lr}
 8006616:	0005      	movs	r5, r0
 8006618:	4688      	mov	r8, r1
	gpio_mode_setup(LED_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, LED);
 800661a:	2680      	movs	r6, #128	; 0x80
 800661c:	0076      	lsls	r6, r6, #1
 800661e:	4c13      	ldr	r4, [pc, #76]	; (800666c <flash_led+0x5c>)
 8006620:	0033      	movs	r3, r6
 8006622:	2200      	movs	r2, #0
 8006624:	2101      	movs	r1, #1
 8006626:	0020      	movs	r0, r4
 8006628:	f000 fb25 	bl	8006c76 <gpio_mode_setup>
	gpio_clear(LED_PORT, LED);
 800662c:	0031      	movs	r1, r6
 800662e:	0020      	movs	r0, r4
 8006630:	f000 fb1e 	bl	8006c70 <gpio_clear>
	for(uint8_t i = 0; i < num_flashes; i++)
 8006634:	2400      	movs	r4, #0
 8006636:	4544      	cmp	r4, r8
 8006638:	d215      	bcs.n	8006666 <flash_led+0x56>
	{
		gpio_set(LED_PORT, LED);
 800663a:	2780      	movs	r7, #128	; 0x80
 800663c:	007f      	lsls	r7, r7, #1
 800663e:	4e0b      	ldr	r6, [pc, #44]	; (800666c <flash_led+0x5c>)
 8006640:	0039      	movs	r1, r7
 8006642:	0030      	movs	r0, r6
 8006644:	f000 fb12 	bl	8006c6c <gpio_set>
		timers_delay_milliseconds(milliseconds / 4);
 8006648:	08a8      	lsrs	r0, r5, #2
 800664a:	f000 f86d 	bl	8006728 <timers_delay_milliseconds>
		gpio_clear(LED_PORT, LED);
 800664e:	0039      	movs	r1, r7
 8006650:	0030      	movs	r0, r6
 8006652:	f000 fb0d 	bl	8006c70 <gpio_clear>
		timers_delay_milliseconds(3 * milliseconds / 4);
 8006656:	0068      	lsls	r0, r5, #1
 8006658:	1828      	adds	r0, r5, r0
 800665a:	1080      	asrs	r0, r0, #2
 800665c:	f000 f864 	bl	8006728 <timers_delay_milliseconds>
	for(uint8_t i = 0; i < num_flashes; i++)
 8006660:	3401      	adds	r4, #1
 8006662:	b2e4      	uxtb	r4, r4
 8006664:	e7e7      	b.n	8006636 <flash_led+0x26>
	}
}
 8006666:	bc80      	pop	{r7}
 8006668:	46b8      	mov	r8, r7
 800666a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800666c:	50000400 	.word	0x50000400

08006670 <timers_lptim_init>:
}


// Setup lptim1 as approx. microsecond counter
void timers_lptim_init(void)
{
 8006670:	b510      	push	{r4, lr}
    // Input clock is 2.097Mhz
    rcc_set_peripheral_clk_sel(LPTIM1, RCC_CCIPR_LPTIM1SEL_APB);
 8006672:	4c10      	ldr	r4, [pc, #64]	; (80066b4 <timers_lptim_init+0x44>)
 8006674:	2100      	movs	r1, #0
 8006676:	0020      	movs	r0, r4
 8006678:	f000 fc3a 	bl	8006ef0 <rcc_set_peripheral_clk_sel>
 
    rcc_periph_clock_enable(RCC_LPTIM1);
 800667c:	480e      	ldr	r0, [pc, #56]	; (80066b8 <timers_lptim_init+0x48>)
 800667e:	f000 fc6d 	bl	8006f5c <rcc_periph_clock_enable>
    
    lptimer_set_internal_clock_source(LPTIM1);
 8006682:	0020      	movs	r0, r4
 8006684:	f000 fb7e 	bl	8006d84 <lptimer_set_internal_clock_source>
    lptimer_enable_trigger(LPTIM1, LPTIM_CFGR_TRIGEN_SW);
 8006688:	2100      	movs	r1, #0
 800668a:	0020      	movs	r0, r4
 800668c:	f000 fb70 	bl	8006d70 <lptimer_enable_trigger>
    lptimer_set_prescaler(LPTIM1, LPTIM_CFGR_PRESC_2);
 8006690:	2180      	movs	r1, #128	; 0x80
 8006692:	0089      	lsls	r1, r1, #2
 8006694:	0020      	movs	r0, r4
 8006696:	f000 fb63 	bl	8006d60 <lptimer_set_prescaler>
    
    lptimer_enable(LPTIM1);
 800669a:	0020      	movs	r0, r4
 800669c:	f000 fb56 	bl	8006d4c <lptimer_enable>
    
    lptimer_set_period(LPTIM1, 0xffff);
 80066a0:	4906      	ldr	r1, [pc, #24]	; (80066bc <timers_lptim_init+0x4c>)
 80066a2:	0020      	movs	r0, r4
 80066a4:	f000 fb6c 	bl	8006d80 <lptimer_set_period>
    
    lptimer_start_counter(LPTIM1, LPTIM_CR_CNTSTRT);
 80066a8:	2104      	movs	r1, #4
 80066aa:	0020      	movs	r0, r4
 80066ac:	f000 fb53 	bl	8006d56 <lptimer_start_counter>
}
 80066b0:	bd10      	pop	{r4, pc}
 80066b2:	46c0      	nop			; (mov r8, r8)
 80066b4:	40007c00 	.word	0x40007c00
 80066b8:	0000071f 	.word	0x0000071f
 80066bc:	0000ffff 	.word	0x0000ffff

080066c0 <timers_delay_microseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_microseconds(uint32_t delay_microseconds)
{
 80066c0:	b570      	push	{r4, r5, r6, lr}
 80066c2:	0004      	movs	r4, r0
    uint32_t curr_time = lptimer_get_counter(LPTIM1);
 80066c4:	4807      	ldr	r0, [pc, #28]	; (80066e4 <timers_delay_microseconds+0x24>)
 80066c6:	f000 fb3e 	bl	8006d46 <lptimer_get_counter>
 80066ca:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_microseconds > 65000)
 80066cc:	4b06      	ldr	r3, [pc, #24]	; (80066e8 <timers_delay_microseconds+0x28>)
 80066ce:	429c      	cmp	r4, r3
 80066d0:	d900      	bls.n	80066d4 <timers_delay_microseconds+0x14>
        delay_microseconds = 65000;
 80066d2:	001c      	movs	r4, r3

    while (lptimer_get_counter(LPTIM1) - curr_time < delay_microseconds);
 80066d4:	4803      	ldr	r0, [pc, #12]	; (80066e4 <timers_delay_microseconds+0x24>)
 80066d6:	f000 fb36 	bl	8006d46 <lptimer_get_counter>
 80066da:	1b40      	subs	r0, r0, r5
 80066dc:	42a0      	cmp	r0, r4
 80066de:	d3f9      	bcc.n	80066d4 <timers_delay_microseconds+0x14>
}
 80066e0:	bd70      	pop	{r4, r5, r6, pc}
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	40007c00 	.word	0x40007c00
 80066e8:	0000fde8 	.word	0x0000fde8

080066ec <timers_micros>:
}
*/

// Returns value of microsecond counter
uint16_t timers_micros(void)
{
 80066ec:	b510      	push	{r4, lr}
    return (uint16_t)lptimer_get_counter(LPTIM1);
 80066ee:	4802      	ldr	r0, [pc, #8]	; (80066f8 <timers_micros+0xc>)
 80066f0:	f000 fb29 	bl	8006d46 <lptimer_get_counter>
}
 80066f4:	bd10      	pop	{r4, pc}
 80066f6:	46c0      	nop			; (mov r8, r8)
 80066f8:	40007c00 	.word	0x40007c00

080066fc <timers_tim6_init>:


// Setup TIM6 as millisecond counter. Clocked by APB1
void timers_tim6_init(void)
{
 80066fc:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_TIM6);
 80066fe:	4808      	ldr	r0, [pc, #32]	; (8006720 <timers_tim6_init+0x24>)
 8006700:	f000 fc2c 	bl	8006f5c <rcc_periph_clock_enable>
    timer_disable_counter(TIM6);
 8006704:	4c07      	ldr	r4, [pc, #28]	; (8006724 <timers_tim6_init+0x28>)
 8006706:	0020      	movs	r0, r4
 8006708:	f000 fc97 	bl	800703a <timer_disable_counter>
    timer_set_prescaler(TIM6, (2097 - 1));
 800670c:	2183      	movs	r1, #131	; 0x83
 800670e:	0109      	lsls	r1, r1, #4
 8006710:	0020      	movs	r0, r4
 8006712:	f000 fc97 	bl	8007044 <timer_set_prescaler>
    timer_enable_counter(TIM6);
 8006716:	0020      	movs	r0, r4
 8006718:	f000 fc8a 	bl	8007030 <timer_enable_counter>
}
 800671c:	bd10      	pop	{r4, pc}
 800671e:	46c0      	nop			; (mov r8, r8)
 8006720:	00000704 	.word	0x00000704
 8006724:	40001000 	.word	0x40001000

08006728 <timers_delay_milliseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_milliseconds(uint32_t delay_milliseconds)
{
 8006728:	b570      	push	{r4, r5, r6, lr}
 800672a:	0004      	movs	r4, r0
    uint32_t curr_time = timer_get_counter(TIM6);
 800672c:	4807      	ldr	r0, [pc, #28]	; (800674c <timers_delay_milliseconds+0x24>)
 800672e:	f000 fc8b 	bl	8007048 <timer_get_counter>
 8006732:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_milliseconds > 65000)
 8006734:	4b06      	ldr	r3, [pc, #24]	; (8006750 <timers_delay_milliseconds+0x28>)
 8006736:	429c      	cmp	r4, r3
 8006738:	d900      	bls.n	800673c <timers_delay_milliseconds+0x14>
        delay_milliseconds = 65000;
 800673a:	001c      	movs	r4, r3

    while (timer_get_counter(TIM6) - curr_time < delay_milliseconds);
 800673c:	4803      	ldr	r0, [pc, #12]	; (800674c <timers_delay_milliseconds+0x24>)
 800673e:	f000 fc83 	bl	8007048 <timer_get_counter>
 8006742:	1b40      	subs	r0, r0, r5
 8006744:	42a0      	cmp	r0, r4
 8006746:	d3f9      	bcc.n	800673c <timers_delay_milliseconds+0x14>
}
 8006748:	bd70      	pop	{r4, r5, r6, pc}
 800674a:	46c0      	nop			; (mov r8, r8)
 800674c:	40001000 	.word	0x40001000
 8006750:	0000fde8 	.word	0x0000fde8

08006754 <timers_millis>:

// Returns value of millisecond counter
uint16_t timers_millis(void)
{
 8006754:	b510      	push	{r4, lr}
    return timer_get_counter(TIM6);
 8006756:	4802      	ldr	r0, [pc, #8]	; (8006760 <timers_millis+0xc>)
 8006758:	f000 fc76 	bl	8007048 <timer_get_counter>
 800675c:	b280      	uxth	r0, r0
}
 800675e:	bd10      	pop	{r4, pc}
 8006760:	40001000 	.word	0x40001000

08006764 <timeout_init>:
}


// Timout functions
void timeout_init(void)
{
 8006764:	b510      	push	{r4, lr}
    timeout_counter     = 0; 
 8006766:	4b04      	ldr	r3, [pc, #16]	; (8006778 <timeout_init+0x14>)
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]
    // timeout_counter     = 2140483648; 
    timeout_timer       = timers_micros(); 
 800676c:	f7ff ffbe 	bl	80066ec <timers_micros>
 8006770:	4b02      	ldr	r3, [pc, #8]	; (800677c <timeout_init+0x18>)
 8006772:	8018      	strh	r0, [r3, #0]
}
 8006774:	bd10      	pop	{r4, pc}
 8006776:	46c0      	nop			; (mov r8, r8)
 8006778:	20000a04 	.word	0x20000a04
 800677c:	20000a08 	.word	0x20000a08

08006780 <timeout>:

bool timeout(uint32_t time_microseconds, char *msg, uint32_t data)
{
 8006780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006782:	b083      	sub	sp, #12
 8006784:	0006      	movs	r6, r0
 8006786:	9101      	str	r1, [sp, #4]
 8006788:	0015      	movs	r5, r2
    timeout_counter    += (uint16_t)(timers_micros() - timeout_timer);
 800678a:	f7ff ffaf 	bl	80066ec <timers_micros>
 800678e:	4c0d      	ldr	r4, [pc, #52]	; (80067c4 <timeout+0x44>)
 8006790:	8823      	ldrh	r3, [r4, #0]
 8006792:	1ac3      	subs	r3, r0, r3
 8006794:	b29b      	uxth	r3, r3
 8006796:	4f0c      	ldr	r7, [pc, #48]	; (80067c8 <timeout+0x48>)
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	4694      	mov	ip, r2
 800679c:	4463      	add	r3, ip
 800679e:	603b      	str	r3, [r7, #0]
    timeout_timer       = timers_micros();
 80067a0:	f7ff ffa4 	bl	80066ec <timers_micros>
 80067a4:	8020      	strh	r0, [r4, #0]

    // log_printf(MAIN, "%u\n", timeout_counter);

    if(timeout_counter > time_microseconds)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	42b3      	cmp	r3, r6
 80067aa:	d802      	bhi.n	80067b2 <timeout+0x32>
    {
        log_printf(MAIN, "Timeout %s %08X\n", msg, data);
        return true;
    }
    else    
        return false;
 80067ac:	2000      	movs	r0, #0
}
 80067ae:	b003      	add	sp, #12
 80067b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        log_printf(MAIN, "Timeout %s %08X\n", msg, data);
 80067b2:	002b      	movs	r3, r5
 80067b4:	9a01      	ldr	r2, [sp, #4]
 80067b6:	4905      	ldr	r1, [pc, #20]	; (80067cc <timeout+0x4c>)
 80067b8:	2000      	movs	r0, #0
 80067ba:	f7fe fcfb 	bl	80051b4 <log_printf>
        return true;
 80067be:	2001      	movs	r0, #1
 80067c0:	e7f5      	b.n	80067ae <timeout+0x2e>
 80067c2:	46c0      	nop			; (mov r8, r8)
 80067c4:	20000a08 	.word	0x20000a08
 80067c8:	20000a04 	.word	0x20000a04
 80067cc:	08009670 	.word	0x08009670

080067d0 <set_gpio_for_standby>:

void set_gpio_for_standby(void)
{   
 80067d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Common
    // LED
    gpio_mode_setup(LED_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, LED);
 80067d2:	2680      	movs	r6, #128	; 0x80
 80067d4:	0076      	lsls	r6, r6, #1
 80067d6:	4c36      	ldr	r4, [pc, #216]	; (80068b0 <set_gpio_for_standby+0xe0>)
 80067d8:	0033      	movs	r3, r6
 80067da:	2200      	movs	r2, #0
 80067dc:	2103      	movs	r1, #3
 80067de:	0020      	movs	r0, r4
 80067e0:	f000 fa49 	bl	8006c76 <gpio_mode_setup>
    gpio_set(LED_PORT, LED);
 80067e4:	0031      	movs	r1, r6
 80067e6:	0020      	movs	r0, r4
 80067e8:	f000 fa40 	bl	8006c6c <gpio_set>

    // Serial Print
    gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, SPF_USART_TX);
 80067ec:	2380      	movs	r3, #128	; 0x80
 80067ee:	25a0      	movs	r5, #160	; 0xa0
 80067f0:	05ed      	lsls	r5, r5, #23
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	2201      	movs	r2, #1
 80067f6:	2100      	movs	r1, #0
 80067f8:	0028      	movs	r0, r5
 80067fa:	f000 fa3c 	bl	8006c76 <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE,  SPF_USART_RX);
 80067fe:	2780      	movs	r7, #128	; 0x80
 8006800:	00ff      	lsls	r7, r7, #3
 8006802:	003b      	movs	r3, r7
 8006804:	2200      	movs	r2, #0
 8006806:	2101      	movs	r1, #1
 8006808:	0028      	movs	r0, r5
 800680a:	f000 fa34 	bl	8006c76 <gpio_mode_setup>
	gpio_set(SPF_USART_RX_PORT, SPF_USART_RX);
 800680e:	0039      	movs	r1, r7
 8006810:	0028      	movs	r0, r5
 8006812:	f000 fa2b 	bl	8006c6c <gpio_set>

    // Batt Sense
    gpio_mode_setup(BATT_SENS_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, BATT_SENS);
 8006816:	2301      	movs	r3, #1
 8006818:	2200      	movs	r2, #0
 800681a:	2103      	movs	r1, #3
 800681c:	0028      	movs	r0, r5
 800681e:	f000 fa2a 	bl	8006c76 <gpio_mode_setup>
    
    // RFM
    // SPI
    gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_ANALOG,   GPIO_PUPD_NONE,       RFM_SPI_MISO);
 8006822:	2380      	movs	r3, #128	; 0x80
 8006824:	01db      	lsls	r3, r3, #7
 8006826:	2200      	movs	r2, #0
 8006828:	2103      	movs	r1, #3
 800682a:	0020      	movs	r0, r4
 800682c:	f000 fa23 	bl	8006c76 <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_SCK_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_SCK);
 8006830:	2380      	movs	r3, #128	; 0x80
 8006832:	019b      	lsls	r3, r3, #6
 8006834:	2202      	movs	r2, #2
 8006836:	2100      	movs	r1, #0
 8006838:	0020      	movs	r0, r4
 800683a:	f000 fa1c 	bl	8006c76 <gpio_mode_setup>
    gpio_mode_setup(RFM_SPI_MOSI_PORT,  GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_MOSI);
 800683e:	2380      	movs	r3, #128	; 0x80
 8006840:	021b      	lsls	r3, r3, #8
 8006842:	2202      	movs	r2, #2
 8006844:	2100      	movs	r1, #0
 8006846:	0020      	movs	r0, r4
 8006848:	f000 fa15 	bl	8006c76 <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_NSS_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_SPI_NSS);
 800684c:	2340      	movs	r3, #64	; 0x40
 800684e:	2201      	movs	r2, #1
 8006850:	2100      	movs	r1, #0
 8006852:	0028      	movs	r0, r5
 8006854:	f000 fa0f 	bl	8006c76 <gpio_mode_setup>
    gpio_mode_setup(RFM_RESET_PORT,     GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_RESET);
 8006858:	2310      	movs	r3, #16
 800685a:	2201      	movs	r2, #1
 800685c:	2100      	movs	r1, #0
 800685e:	0028      	movs	r0, r5
 8006860:	f000 fa09 	bl	8006c76 <gpio_mode_setup>

    // DIO
    gpio_mode_setup(RFM_IO_0_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_0);
 8006864:	003b      	movs	r3, r7
 8006866:	2200      	movs	r2, #0
 8006868:	2103      	movs	r1, #3
 800686a:	0020      	movs	r0, r4
 800686c:	f000 fa03 	bl	8006c76 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_1_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_1);
 8006870:	2380      	movs	r3, #128	; 0x80
 8006872:	011b      	lsls	r3, r3, #4
 8006874:	2200      	movs	r2, #0
 8006876:	2103      	movs	r1, #3
 8006878:	0020      	movs	r0, r4
 800687a:	f000 f9fc 	bl	8006c76 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_2_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_2);
 800687e:	0033      	movs	r3, r6
 8006880:	2200      	movs	r2, #0
 8006882:	2103      	movs	r1, #3
 8006884:	0028      	movs	r0, r5
 8006886:	f000 f9f6 	bl	8006c76 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_3_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_3);
 800688a:	2302      	movs	r3, #2
 800688c:	2200      	movs	r2, #0
 800688e:	2103      	movs	r1, #3
 8006890:	0020      	movs	r0, r4
 8006892:	f000 f9f0 	bl	8006c76 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_4_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_4);
 8006896:	2304      	movs	r3, #4
 8006898:	2200      	movs	r2, #0
 800689a:	2103      	movs	r1, #3
 800689c:	0020      	movs	r0, r4
 800689e:	f000 f9ea 	bl	8006c76 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_5_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_5);
 80068a2:	2301      	movs	r3, #1
 80068a4:	2200      	movs	r2, #0
 80068a6:	2103      	movs	r1, #3
 80068a8:	0020      	movs	r0, r4
 80068aa:	f000 f9e4 	bl	8006c76 <gpio_mode_setup>
    gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
	gpio_mode_setup(TEMP_I2C_SDA_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SDA);

    #endif

}
 80068ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068b0:	50000400 	.word	0x50000400

080068b4 <rtc_isr>:

// Override default rtc interrupt handler
void rtc_isr(void)
{ 
 80068b4:	b510      	push	{r4, lr}
    exti_reset_request(EXTI20);
 80068b6:	2080      	movs	r0, #128	; 0x80
 80068b8:	0340      	lsls	r0, r0, #13
 80068ba:	f000 f941 	bl	8006b40 <exti_reset_request>

    // scb_reset_system();

    log_init();
 80068be:	f7fe fc6d 	bl	800519c <log_init>
    log_printf(MAIN, "RTC ISR\n");
 80068c2:	490d      	ldr	r1, [pc, #52]	; (80068f8 <rtc_isr+0x44>)
 80068c4:	2000      	movs	r0, #0
 80068c6:	f7fe fc75 	bl	80051b4 <log_printf>

    if(RTC_ISR & RTC_ISR_WUTF)
 80068ca:	4b0c      	ldr	r3, [pc, #48]	; (80068fc <rtc_isr+0x48>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	055b      	lsls	r3, r3, #21
 80068d0:	d400      	bmi.n	80068d4 <rtc_isr+0x20>
        pwr_clear_standby_flag();
        rtc_lock();
	    pwr_enable_backup_domain_write_protect();
        set_gpio_for_standby();
    }
}
 80068d2:	bd10      	pop	{r4, pc}
        pwr_disable_backup_domain_write_protect();
 80068d4:	f000 fa5c 	bl	8006d90 <pwr_disable_backup_domain_write_protect>
        rtc_unlock();
 80068d8:	f000 fb6c 	bl	8006fb4 <rtc_unlock>
	    rtc_clear_wakeup_flag();
 80068dc:	f000 fb78 	bl	8006fd0 <rtc_clear_wakeup_flag>
        pwr_clear_wakeup_flag();
 80068e0:	f000 fa72 	bl	8006dc8 <pwr_clear_wakeup_flag>
        pwr_clear_standby_flag();
 80068e4:	f000 fa68 	bl	8006db8 <pwr_clear_standby_flag>
        rtc_lock();
 80068e8:	f000 fb6c 	bl	8006fc4 <rtc_lock>
	    pwr_enable_backup_domain_write_protect();
 80068ec:	f000 fa5a 	bl	8006da4 <pwr_enable_backup_domain_write_protect>
        set_gpio_for_standby();
 80068f0:	f7ff ff6e 	bl	80067d0 <set_gpio_for_standby>
}
 80068f4:	e7ed      	b.n	80068d2 <rtc_isr+0x1e>
 80068f6:	46c0      	nop			; (mov r8, r8)
 80068f8:	08009684 	.word	0x08009684
 80068fc:	4000280c 	.word	0x4000280c

08006900 <adc_power_on_async>:
 * @sa adc_wait_power_on
 * @param adc ADC Block register address base @ref adc_reg_base
 */
void adc_power_on_async(uint32_t adc)
{
	ADC_CR(adc) |= ADC_CR_ADEN;
 8006900:	2301      	movs	r3, #1
 8006902:	6882      	ldr	r2, [r0, #8]
 8006904:	4313      	orrs	r3, r2
 8006906:	6083      	str	r3, [r0, #8]
}
 8006908:	4770      	bx	lr

0800690a <adc_power_on>:
 * Turn on the ADC
 * @sa adc_power_on_async
 * @param adc ADC Block register address base @ref adc_reg_base
 */
void adc_power_on(uint32_t adc)
{
 800690a:	b510      	push	{r4, lr}
 800690c:	0004      	movs	r4, r0
	adc_power_on_async(adc);
 800690e:	f7ff fff7 	bl	8006900 <adc_power_on_async>
	return ADC_ISR(adc) & ADC_ISR_ADRDY;
 8006912:	2301      	movs	r3, #1
 8006914:	6822      	ldr	r2, [r4, #0]
	while (!adc_is_power_on(adc));
 8006916:	421a      	tst	r2, r3
 8006918:	d0fc      	beq.n	8006914 <adc_power_on+0xa>
}
 800691a:	bd10      	pop	{r4, pc}

0800691c <adc_is_power_off>:
 * @sa adc_power_off_async
 * @param adc ADC Block register address base @ref adc_reg_base
 */
bool adc_is_power_off(uint32_t adc)
{
	return !(ADC_CR(adc) & ADC_CR_ADEN);
 800691c:	6883      	ldr	r3, [r0, #8]
 800691e:	2001      	movs	r0, #1
 8006920:	4398      	bics	r0, r3
}
 8006922:	4770      	bx	lr

08006924 <adc_power_off_async>:
{
 8006924:	b510      	push	{r4, lr}
 8006926:	0004      	movs	r4, r0
	if (adc_is_power_off(adc)) {
 8006928:	f7ff fff8 	bl	800691c <adc_is_power_off>
 800692c:	2800      	cmp	r0, #0
 800692e:	d110      	bne.n	8006952 <adc_power_off_async+0x2e>
	if (ADC_CR(adc) & checks) {
 8006930:	0021      	movs	r1, r4
 8006932:	2304      	movs	r3, #4
 8006934:	68a2      	ldr	r2, [r4, #8]
 8006936:	3108      	adds	r1, #8
 8006938:	421a      	tst	r2, r3
 800693a:	d006      	beq.n	800694a <adc_power_off_async+0x26>
		ADC_CR(adc) |= stops;
 800693c:	2210      	movs	r2, #16
 800693e:	68a0      	ldr	r0, [r4, #8]
 8006940:	4302      	orrs	r2, r0
 8006942:	60a2      	str	r2, [r4, #8]
		while (ADC_CR(adc) & checks);
 8006944:	680a      	ldr	r2, [r1, #0]
 8006946:	421a      	tst	r2, r3
 8006948:	d1fc      	bne.n	8006944 <adc_power_off_async+0x20>
	ADC_CR(adc) |= ADC_CR_ADDIS;
 800694a:	2302      	movs	r3, #2
 800694c:	68a2      	ldr	r2, [r4, #8]
 800694e:	4313      	orrs	r3, r2
 8006950:	60a3      	str	r3, [r4, #8]
}
 8006952:	bd10      	pop	{r4, pc}

08006954 <adc_power_off>:
 * conversion, as per ref man.
 * @sa adc_power_off_async
 * @param adc ADC Block register address base @ref adc_reg_base
 */
void adc_power_off(uint32_t adc)
{
 8006954:	b510      	push	{r4, lr}
 8006956:	0004      	movs	r4, r0
	adc_power_off_async(adc);
 8006958:	f7ff ffe4 	bl	8006924 <adc_power_off_async>
	while (!adc_is_power_off(adc));
 800695c:	0020      	movs	r0, r4
 800695e:	f7ff ffdd 	bl	800691c <adc_is_power_off>
 8006962:	2800      	cmp	r0, #0
 8006964:	d0fa      	beq.n	800695c <adc_power_off+0x8>
}
 8006966:	bd10      	pop	{r4, pc}

08006968 <adc_calibrate_async>:
 * @sa adc_is_calibrating
 * @param adc ADC Block register address base @ref adc_reg_base
 */
void adc_calibrate_async(uint32_t adc)
{
	ADC_CR(adc) |= ADC_CR_ADCAL;
 8006968:	2380      	movs	r3, #128	; 0x80
 800696a:	6882      	ldr	r2, [r0, #8]
 800696c:	061b      	lsls	r3, r3, #24
 800696e:	4313      	orrs	r3, r2
 8006970:	6083      	str	r3, [r0, #8]
}
 8006972:	4770      	bx	lr

08006974 <adc_calibrate>:
/**
 * Start ADC calibration and wait for it to finish
 * @param adc ADC Block register address base @ref adc_reg_base
 */
void adc_calibrate(uint32_t adc)
{
 8006974:	b510      	push	{r4, lr}
 8006976:	0004      	movs	r4, r0
	adc_calibrate_async(adc);
 8006978:	f7ff fff6 	bl	8006968 <adc_calibrate_async>
	return ADC_CR(adc) & ADC_CR_ADCAL;
 800697c:	68a3      	ldr	r3, [r4, #8]
	while (adc_is_calibrating(adc));
 800697e:	2b00      	cmp	r3, #0
 8006980:	dbfc      	blt.n	800697c <adc_calibrate+0x8>
}
 8006982:	bd10      	pop	{r4, pc}

08006984 <adc_set_single_conversion_mode>:
 *
 * @param[in] adc ADC block register address base @ref adc_reg_base
 */
void adc_set_single_conversion_mode(uint32_t adc)
{
	ADC_CFGR1(adc) &= ~ADC_CFGR1_CONT;
 8006984:	68c3      	ldr	r3, [r0, #12]
 8006986:	4a02      	ldr	r2, [pc, #8]	; (8006990 <adc_set_single_conversion_mode+0xc>)
 8006988:	4013      	ands	r3, r2
 800698a:	60c3      	str	r3, [r0, #12]
}
 800698c:	4770      	bx	lr
 800698e:	46c0      	nop			; (mov r8, r8)
 8006990:	ffffdfff 	.word	0xffffdfff

08006994 <adc_enable_dma>:
 *
 * @param[in] adc Unsigned int32. ADC base address (@ref adc_reg_base)
 */
void adc_enable_dma(uint32_t adc)
{
	ADC_CFGR1(adc) |= ADC_CFGR1_DMAEN;
 8006994:	2301      	movs	r3, #1
 8006996:	68c2      	ldr	r2, [r0, #12]
 8006998:	4313      	orrs	r3, r2
 800699a:	60c3      	str	r3, [r0, #12]
}
 800699c:	4770      	bx	lr
	...

080069a0 <adc_enable_vrefint>:
 * FIXME - on f3, you can actually have it on ADC34 as well!
 * @sa adc_disable_vrefint
 */
void adc_enable_vrefint(void)
{
	ADC_CCR(ADC1) |= ADC_CCR_VREFEN;
 80069a0:	2380      	movs	r3, #128	; 0x80
 80069a2:	4a03      	ldr	r2, [pc, #12]	; (80069b0 <adc_enable_vrefint+0x10>)
 80069a4:	03db      	lsls	r3, r3, #15
 80069a6:	6811      	ldr	r1, [r2, #0]
 80069a8:	430b      	orrs	r3, r1
 80069aa:	6013      	str	r3, [r2, #0]
}
 80069ac:	4770      	bx	lr
 80069ae:	46c0      	nop			; (mov r8, r8)
 80069b0:	40012708 	.word	0x40012708

080069b4 <adc_start_conversion_regular>:
 * @param[in] adc ADC block register address base @ref adc_reg_base
 */
void adc_start_conversion_regular(uint32_t adc)
{
	/* Start conversion on regular channels. */
	ADC_CR(adc) |= ADC_CR_ADSTART;
 80069b4:	2304      	movs	r3, #4
 80069b6:	6882      	ldr	r2, [r0, #8]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	6083      	str	r3, [r0, #8]
}
 80069bc:	4770      	bx	lr

080069be <dma_channel_reset>:
*/

void dma_channel_reset(uint32_t dma, uint8_t channel)
{
	/* Disable channel and reset config bits. */
	DMA_CCR(dma, channel) = 0;
 80069be:	2314      	movs	r3, #20
 80069c0:	2200      	movs	r2, #0
 80069c2:	3901      	subs	r1, #1
 80069c4:	434b      	muls	r3, r1
 80069c6:	181b      	adds	r3, r3, r0
 80069c8:	609a      	str	r2, [r3, #8]
	/* Reset data transfer number. */
	DMA_CNDTR(dma, channel) = 0;
 80069ca:	60da      	str	r2, [r3, #12]
	/* Reset peripheral address. */
	DMA_CPAR(dma, channel) = 0;
 80069cc:	611a      	str	r2, [r3, #16]
	/* Reset memory address. */
	DMA_CMAR(dma, channel) = 0;
 80069ce:	615a      	str	r2, [r3, #20]
	/* Reset interrupt flags. */
	DMA_IFCR(dma) |= DMA_IFCR_CIF(channel);
 80069d0:	230f      	movs	r3, #15
 80069d2:	0089      	lsls	r1, r1, #2
 80069d4:	408b      	lsls	r3, r1
 80069d6:	6842      	ldr	r2, [r0, #4]
 80069d8:	4313      	orrs	r3, r2
 80069da:	6043      	str	r3, [r0, #4]
}
 80069dc:	4770      	bx	lr
	...

080069e0 <dma_set_priority>:
@param[in] prio unsigned int32. Priority level @ref dma_ch_pri.
*/

void dma_set_priority(uint32_t dma, uint8_t channel, uint32_t prio)
{
	DMA_CCR(dma, channel) &= ~(DMA_CCR_PL_MASK);
 80069e0:	1e4b      	subs	r3, r1, #1
 80069e2:	2114      	movs	r1, #20
 80069e4:	4359      	muls	r1, r3
 80069e6:	3008      	adds	r0, #8
 80069e8:	1808      	adds	r0, r1, r0
 80069ea:	6801      	ldr	r1, [r0, #0]
 80069ec:	4b03      	ldr	r3, [pc, #12]	; (80069fc <dma_set_priority+0x1c>)
 80069ee:	4019      	ands	r1, r3
 80069f0:	6001      	str	r1, [r0, #0]
	DMA_CCR(dma, channel) |= prio;
 80069f2:	6803      	ldr	r3, [r0, #0]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	6003      	str	r3, [r0, #0]
}
 80069f8:	4770      	bx	lr
 80069fa:	46c0      	nop			; (mov r8, r8)
 80069fc:	ffffcfff 	.word	0xffffcfff

08006a00 <dma_set_memory_size>:
*/

void dma_set_memory_size(uint32_t dma, uint8_t channel, uint32_t mem_size)
{

	DMA_CCR(dma, channel) &= ~(DMA_CCR_MSIZE_MASK);
 8006a00:	1e4b      	subs	r3, r1, #1
 8006a02:	2114      	movs	r1, #20
 8006a04:	4359      	muls	r1, r3
 8006a06:	3008      	adds	r0, #8
 8006a08:	1808      	adds	r0, r1, r0
 8006a0a:	6801      	ldr	r1, [r0, #0]
 8006a0c:	4b03      	ldr	r3, [pc, #12]	; (8006a1c <dma_set_memory_size+0x1c>)
 8006a0e:	4019      	ands	r1, r3
 8006a10:	6001      	str	r1, [r0, #0]
	DMA_CCR(dma, channel) |= mem_size;
 8006a12:	6803      	ldr	r3, [r0, #0]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	6003      	str	r3, [r0, #0]
}
 8006a18:	4770      	bx	lr
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	fffff3ff 	.word	0xfffff3ff

08006a20 <dma_set_peripheral_size>:
*/

void dma_set_peripheral_size(uint32_t dma, uint8_t channel,
			     uint32_t peripheral_size)
{
	DMA_CCR(dma, channel) &= ~(DMA_CCR_PSIZE_MASK);
 8006a20:	1e4b      	subs	r3, r1, #1
 8006a22:	2114      	movs	r1, #20
 8006a24:	4359      	muls	r1, r3
 8006a26:	3008      	adds	r0, #8
 8006a28:	1808      	adds	r0, r1, r0
 8006a2a:	6801      	ldr	r1, [r0, #0]
 8006a2c:	4b03      	ldr	r3, [pc, #12]	; (8006a3c <dma_set_peripheral_size+0x1c>)
 8006a2e:	4019      	ands	r1, r3
 8006a30:	6001      	str	r1, [r0, #0]
	DMA_CCR(dma, channel) |= peripheral_size;
 8006a32:	6803      	ldr	r3, [r0, #0]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	6003      	str	r3, [r0, #0]
}
 8006a38:	4770      	bx	lr
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	fffffcff 	.word	0xfffffcff

08006a40 <dma_enable_memory_increment_mode>:
@param[in] channel unsigned int8. Channel number: 1-7 for DMA1 or 1-5 for DMA2
*/

void dma_enable_memory_increment_mode(uint32_t dma, uint8_t channel)
{
	DMA_CCR(dma, channel) |= DMA_CCR_MINC;
 8006a40:	1e4b      	subs	r3, r1, #1
 8006a42:	2114      	movs	r1, #20
 8006a44:	4359      	muls	r1, r3
 8006a46:	2380      	movs	r3, #128	; 0x80
 8006a48:	3008      	adds	r0, #8
 8006a4a:	1808      	adds	r0, r1, r0
 8006a4c:	6802      	ldr	r2, [r0, #0]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	6003      	str	r3, [r0, #0]
}
 8006a52:	4770      	bx	lr

08006a54 <dma_disable_peripheral_increment_mode>:
@param[in] channel unsigned int8. Channel number: 1-7 for DMA1 or 1-5 for DMA2
*/

void dma_disable_peripheral_increment_mode(uint32_t dma, uint8_t channel)
{
	DMA_CCR(dma, channel) &= ~DMA_CCR_PINC;
 8006a54:	1e4b      	subs	r3, r1, #1
 8006a56:	2114      	movs	r1, #20
 8006a58:	2240      	movs	r2, #64	; 0x40
 8006a5a:	4359      	muls	r1, r3
 8006a5c:	3008      	adds	r0, #8
 8006a5e:	1808      	adds	r0, r1, r0
 8006a60:	6803      	ldr	r3, [r0, #0]
 8006a62:	4393      	bics	r3, r2
 8006a64:	6003      	str	r3, [r0, #0]
}
 8006a66:	4770      	bx	lr

08006a68 <dma_enable_circular_mode>:
@param[in] channel unsigned int8. Channel number: 1-7 for DMA1 or 1-5 for DMA2
*/

void dma_enable_circular_mode(uint32_t dma, uint8_t channel)
{
	DMA_CCR(dma, channel) |= DMA_CCR_CIRC;
 8006a68:	1e4b      	subs	r3, r1, #1
 8006a6a:	2114      	movs	r1, #20
 8006a6c:	4359      	muls	r1, r3
 8006a6e:	2320      	movs	r3, #32
 8006a70:	3008      	adds	r0, #8
 8006a72:	1808      	adds	r0, r1, r0
 8006a74:	6802      	ldr	r2, [r0, #0]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	6003      	str	r3, [r0, #0]
	DMA_CCR(dma, channel) &= ~DMA_CCR_MEM2MEM;
 8006a7a:	6803      	ldr	r3, [r0, #0]
 8006a7c:	4a01      	ldr	r2, [pc, #4]	; (8006a84 <dma_enable_circular_mode+0x1c>)
 8006a7e:	4013      	ands	r3, r2
 8006a80:	6003      	str	r3, [r0, #0]
}
 8006a82:	4770      	bx	lr
 8006a84:	ffffbfff 	.word	0xffffbfff

08006a88 <dma_set_read_from_peripheral>:
@param[in] channel unsigned int8. Channel number: 1-7 for DMA1 or 1-5 for DMA2
*/

void dma_set_read_from_peripheral(uint32_t dma, uint8_t channel)
{
	DMA_CCR(dma, channel) &= ~DMA_CCR_DIR;
 8006a88:	1e4b      	subs	r3, r1, #1
 8006a8a:	2114      	movs	r1, #20
 8006a8c:	2210      	movs	r2, #16
 8006a8e:	4359      	muls	r1, r3
 8006a90:	3008      	adds	r0, #8
 8006a92:	1808      	adds	r0, r1, r0
 8006a94:	6803      	ldr	r3, [r0, #0]
 8006a96:	4393      	bics	r3, r2
 8006a98:	6003      	str	r3, [r0, #0]
}
 8006a9a:	4770      	bx	lr

08006a9c <dma_enable_channel>:
@param[in] channel unsigned int8. Channel number: 1-7 for DMA1 or 1-5 for DMA2
*/

void dma_enable_channel(uint32_t dma, uint8_t channel)
{
	DMA_CCR(dma, channel) |= DMA_CCR_EN;
 8006a9c:	1e4b      	subs	r3, r1, #1
 8006a9e:	2114      	movs	r1, #20
 8006aa0:	4359      	muls	r1, r3
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	3008      	adds	r0, #8
 8006aa6:	1808      	adds	r0, r1, r0
 8006aa8:	6802      	ldr	r2, [r0, #0]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	6003      	str	r3, [r0, #0]
}
 8006aae:	4770      	bx	lr

08006ab0 <dma_set_peripheral_address>:
@param[in] address unsigned int32. Peripheral Address.
*/

void dma_set_peripheral_address(uint32_t dma, uint8_t channel, uint32_t address)
{
	if (!(DMA_CCR(dma, channel) & DMA_CCR_EN)) {
 8006ab0:	1e4b      	subs	r3, r1, #1
 8006ab2:	2114      	movs	r1, #20
 8006ab4:	4359      	muls	r1, r3
 8006ab6:	1808      	adds	r0, r1, r0
 8006ab8:	6883      	ldr	r3, [r0, #8]
 8006aba:	07db      	lsls	r3, r3, #31
 8006abc:	d400      	bmi.n	8006ac0 <dma_set_peripheral_address+0x10>
		DMA_CPAR(dma, channel) = (uint32_t) address;
 8006abe:	6102      	str	r2, [r0, #16]
	}
}
 8006ac0:	4770      	bx	lr

08006ac2 <dma_set_memory_address>:
@param[in] address unsigned int32. Memory Initial Address.
*/

void dma_set_memory_address(uint32_t dma, uint8_t channel, uint32_t address)
{
	if (!(DMA_CCR(dma, channel) & DMA_CCR_EN)) {
 8006ac2:	1e4b      	subs	r3, r1, #1
 8006ac4:	2114      	movs	r1, #20
 8006ac6:	4359      	muls	r1, r3
 8006ac8:	1808      	adds	r0, r1, r0
 8006aca:	6883      	ldr	r3, [r0, #8]
 8006acc:	07db      	lsls	r3, r3, #31
 8006ace:	d400      	bmi.n	8006ad2 <dma_set_memory_address+0x10>
		DMA_CMAR(dma, channel) = (uint32_t) address;
 8006ad0:	6142      	str	r2, [r0, #20]
	}
}
 8006ad2:	4770      	bx	lr

08006ad4 <dma_set_number_of_data>:
maximum).
*/

void dma_set_number_of_data(uint32_t dma, uint8_t channel, uint16_t number)
{
	DMA_CNDTR(dma, channel) = number;
 8006ad4:	1e4b      	subs	r3, r1, #1
 8006ad6:	2114      	movs	r1, #20
 8006ad8:	4359      	muls	r1, r3
 8006ada:	300c      	adds	r0, #12
 8006adc:	1809      	adds	r1, r1, r0
 8006ade:	600a      	str	r2, [r1, #0]
}
 8006ae0:	4770      	bx	lr
	...

08006ae4 <exti_set_trigger>:
	#define EXTICR_SELECTION_REG(x)	SYSCFG_EXTICR(x)
#endif

void exti_set_trigger(uint32_t extis, enum exti_trigger_type trig)
{
	switch (trig) {
 8006ae4:	2901      	cmp	r1, #1
 8006ae6:	d00c      	beq.n	8006b02 <exti_set_trigger+0x1e>
 8006ae8:	2902      	cmp	r1, #2
 8006aea:	d013      	beq.n	8006b14 <exti_set_trigger+0x30>
 8006aec:	2900      	cmp	r1, #0
 8006aee:	d107      	bne.n	8006b00 <exti_set_trigger+0x1c>
	case EXTI_TRIGGER_RISING:
		EXTI_RTSR |= extis;
 8006af0:	4a0a      	ldr	r2, [pc, #40]	; (8006b1c <exti_set_trigger+0x38>)
 8006af2:	6813      	ldr	r3, [r2, #0]
 8006af4:	4303      	orrs	r3, r0
 8006af6:	6013      	str	r3, [r2, #0]
		EXTI_FTSR &= ~extis;
 8006af8:	4a09      	ldr	r2, [pc, #36]	; (8006b20 <exti_set_trigger+0x3c>)
 8006afa:	6813      	ldr	r3, [r2, #0]
 8006afc:	4383      	bics	r3, r0
 8006afe:	6013      	str	r3, [r2, #0]
	case EXTI_TRIGGER_BOTH:
		EXTI_RTSR |= extis;
		EXTI_FTSR |= extis;
		break;
	}
}
 8006b00:	4770      	bx	lr
		EXTI_RTSR &= ~extis;
 8006b02:	4a06      	ldr	r2, [pc, #24]	; (8006b1c <exti_set_trigger+0x38>)
 8006b04:	6813      	ldr	r3, [r2, #0]
 8006b06:	4383      	bics	r3, r0
		EXTI_RTSR |= extis;
 8006b08:	6013      	str	r3, [r2, #0]
		EXTI_FTSR |= extis;
 8006b0a:	4a05      	ldr	r2, [pc, #20]	; (8006b20 <exti_set_trigger+0x3c>)
 8006b0c:	6813      	ldr	r3, [r2, #0]
 8006b0e:	4318      	orrs	r0, r3
 8006b10:	6010      	str	r0, [r2, #0]
}
 8006b12:	e7f5      	b.n	8006b00 <exti_set_trigger+0x1c>
		EXTI_RTSR |= extis;
 8006b14:	4a01      	ldr	r2, [pc, #4]	; (8006b1c <exti_set_trigger+0x38>)
 8006b16:	6813      	ldr	r3, [r2, #0]
 8006b18:	4303      	orrs	r3, r0
 8006b1a:	e7f5      	b.n	8006b08 <exti_set_trigger+0x24>
 8006b1c:	40010408 	.word	0x40010408
 8006b20:	4001040c 	.word	0x4001040c

08006b24 <exti_enable_request>:

void exti_enable_request(uint32_t extis)
{
	/* Enable interrupts. */
	EXTI_IMR |= extis;
 8006b24:	4a04      	ldr	r2, [pc, #16]	; (8006b38 <exti_enable_request+0x14>)
 8006b26:	6813      	ldr	r3, [r2, #0]
 8006b28:	4303      	orrs	r3, r0
 8006b2a:	6013      	str	r3, [r2, #0]

	/* Enable events. */
	EXTI_EMR |= extis;
 8006b2c:	4a03      	ldr	r2, [pc, #12]	; (8006b3c <exti_enable_request+0x18>)
 8006b2e:	6813      	ldr	r3, [r2, #0]
 8006b30:	4318      	orrs	r0, r3
 8006b32:	6010      	str	r0, [r2, #0]
}
 8006b34:	4770      	bx	lr
 8006b36:	46c0      	nop			; (mov r8, r8)
 8006b38:	40010400 	.word	0x40010400
 8006b3c:	40010404 	.word	0x40010404

08006b40 <exti_reset_request>:
{
#if defined(EXTI_RPR1) && defined(EXTI_FPR1)
	EXTI_RPR1 = extis;
	EXTI_FPR1 = extis;
#else
	EXTI_PR = extis;
 8006b40:	4b01      	ldr	r3, [pc, #4]	; (8006b48 <exti_reset_request+0x8>)
 8006b42:	6018      	str	r0, [r3, #0]
#endif
}
 8006b44:	4770      	bx	lr
 8006b46:	46c0      	nop			; (mov r8, r8)
 8006b48:	40010414 	.word	0x40010414

08006b4c <exti_select_source>:
			break;
		case GPIOB:
			bits = 1;
			break;
		case GPIOC:
			bits = 2;
 8006b4c:	4b17      	ldr	r3, [pc, #92]	; (8006bac <exti_select_source+0x60>)
{
 8006b4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
			bits = 2;
 8006b50:	18ce      	adds	r6, r1, r3
 8006b52:	4273      	negs	r3, r6
 8006b54:	415e      	adcs	r6, r3
	for (line = 0; line < 16; line++) {
 8006b56:	2200      	movs	r2, #0
{
 8006b58:	9001      	str	r0, [sp, #4]
			bits = 2;
 8006b5a:	0076      	lsls	r6, r6, #1
		if (!(exti & (1 << line))) {
 8006b5c:	2401      	movs	r4, #1
 8006b5e:	0023      	movs	r3, r4
 8006b60:	4093      	lsls	r3, r2
 8006b62:	9801      	ldr	r0, [sp, #4]
 8006b64:	4218      	tst	r0, r3
 8006b66:	d017      	beq.n	8006b98 <exti_select_source+0x4c>
		switch (gpioport) {
 8006b68:	4d11      	ldr	r5, [pc, #68]	; (8006bb0 <exti_select_source+0x64>)
			break;
		case GPIOD:
			bits = 3;
 8006b6a:	2303      	movs	r3, #3
		switch (gpioport) {
 8006b6c:	42a9      	cmp	r1, r5
 8006b6e:	d005      	beq.n	8006b7c <exti_select_source+0x30>
 8006b70:	d816      	bhi.n	8006ba0 <exti_select_source+0x54>
 8006b72:	4d10      	ldr	r5, [pc, #64]	; (8006bb4 <exti_select_source+0x68>)
 8006b74:	0023      	movs	r3, r4
 8006b76:	42a9      	cmp	r1, r5
 8006b78:	d000      	beq.n	8006b7c <exti_select_source+0x30>
			bits = 2;
 8006b7a:	0033      	movs	r3, r6

		uint8_t shift = (uint8_t)(EXTICR_SELECTION_FIELDSIZE * (line % 4));
		uint32_t mask = ((1 << EXTICR_SELECTION_FIELDSIZE) - 1) << shift;
		uint32_t reg = line / 4;

		EXTICR_SELECTION_REG(reg) = (EXTICR_SELECTION_REG(reg) & ~mask) | (bits << shift);
 8006b7c:	480e      	ldr	r0, [pc, #56]	; (8006bb8 <exti_select_source+0x6c>)
		uint8_t shift = (uint8_t)(EXTICR_SELECTION_FIELDSIZE * (line % 4));
 8006b7e:	2503      	movs	r5, #3
		uint32_t reg = line / 4;
 8006b80:	0894      	lsrs	r4, r2, #2
		EXTICR_SELECTION_REG(reg) = (EXTICR_SELECTION_REG(reg) & ~mask) | (bits << shift);
 8006b82:	1824      	adds	r4, r4, r0
		uint32_t mask = ((1 << EXTICR_SELECTION_FIELDSIZE) - 1) << shift;
 8006b84:	200f      	movs	r0, #15
		uint8_t shift = (uint8_t)(EXTICR_SELECTION_FIELDSIZE * (line % 4));
 8006b86:	4015      	ands	r5, r2
		uint32_t mask = ((1 << EXTICR_SELECTION_FIELDSIZE) - 1) << shift;
 8006b88:	00ad      	lsls	r5, r5, #2
 8006b8a:	40a8      	lsls	r0, r5
		EXTICR_SELECTION_REG(reg) = (EXTICR_SELECTION_REG(reg) & ~mask) | (bits << shift);
 8006b8c:	40ab      	lsls	r3, r5
 8006b8e:	00a4      	lsls	r4, r4, #2
 8006b90:	6827      	ldr	r7, [r4, #0]
 8006b92:	4387      	bics	r7, r0
 8006b94:	433b      	orrs	r3, r7
 8006b96:	6023      	str	r3, [r4, #0]
	for (line = 0; line < 16; line++) {
 8006b98:	3201      	adds	r2, #1
 8006b9a:	2a10      	cmp	r2, #16
 8006b9c:	d1de      	bne.n	8006b5c <exti_select_source+0x10>
	};
}
 8006b9e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		switch (gpioport) {
 8006ba0:	4c06      	ldr	r4, [pc, #24]	; (8006bbc <exti_select_source+0x70>)
		uint32_t bits = 0;
 8006ba2:	2300      	movs	r3, #0
		switch (gpioport) {
 8006ba4:	42a1      	cmp	r1, r4
 8006ba6:	d1e9      	bne.n	8006b7c <exti_select_source+0x30>
			bits = 7;
 8006ba8:	3307      	adds	r3, #7
 8006baa:	e7e7      	b.n	8006b7c <exti_select_source+0x30>
 8006bac:	affff800 	.word	0xaffff800
 8006bb0:	50000c00 	.word	0x50000c00
 8006bb4:	50000400 	.word	0x50000400
 8006bb8:	10004002 	.word	0x10004002
 8006bbc:	50001c00 	.word	0x50001c00

08006bc0 <flash_set_ws>:
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8006bc0:	2101      	movs	r1, #1
	reg32 = FLASH_ACR;
 8006bc2:	4a03      	ldr	r2, [pc, #12]	; (8006bd0 <flash_set_ws+0x10>)
 8006bc4:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8006bc6:	438b      	bics	r3, r1
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 8006bc8:	4303      	orrs	r3, r0
	FLASH_ACR = reg32;
 8006bca:	6013      	str	r3, [r2, #0]
}
 8006bcc:	4770      	bx	lr
 8006bce:	46c0      	nop			; (mov r8, r8)
 8006bd0:	40022000 	.word	0x40022000

08006bd4 <flash_unlock_option_bytes>:

void flash_unlock_option_bytes(void)
{
	FLASH_OPTKEYR = FLASH_OPTKEYR_KEY1;
 8006bd4:	4b02      	ldr	r3, [pc, #8]	; (8006be0 <flash_unlock_option_bytes+0xc>)
 8006bd6:	4a03      	ldr	r2, [pc, #12]	; (8006be4 <flash_unlock_option_bytes+0x10>)
 8006bd8:	601a      	str	r2, [r3, #0]
	FLASH_OPTKEYR = FLASH_OPTKEYR_KEY2;
 8006bda:	4a03      	ldr	r2, [pc, #12]	; (8006be8 <flash_unlock_option_bytes+0x14>)
 8006bdc:	601a      	str	r2, [r3, #0]
}
 8006bde:	4770      	bx	lr
 8006be0:	40022014 	.word	0x40022014
 8006be4:	fbead9c8 	.word	0xfbead9c8
 8006be8:	24252627 	.word	0x24252627

08006bec <flash_unlock_pecr>:
 * yourself.
 * @sa flash_unlock
 */
void flash_unlock_pecr(void)
{
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY1;
 8006bec:	4b02      	ldr	r3, [pc, #8]	; (8006bf8 <flash_unlock_pecr+0xc>)
 8006bee:	4a03      	ldr	r2, [pc, #12]	; (8006bfc <flash_unlock_pecr+0x10>)
 8006bf0:	601a      	str	r2, [r3, #0]
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY2;
 8006bf2:	4a03      	ldr	r2, [pc, #12]	; (8006c00 <flash_unlock_pecr+0x14>)
 8006bf4:	601a      	str	r2, [r3, #0]
}
 8006bf6:	4770      	bx	lr
 8006bf8:	4002200c 	.word	0x4002200c
 8006bfc:	89abcdef 	.word	0x89abcdef
 8006c00:	02030405 	.word	0x02030405

08006c04 <flash_lock_pecr>:

void flash_lock_pecr(void)
{
	FLASH_PECR |= FLASH_PECR_PELOCK;
 8006c04:	2301      	movs	r3, #1
 8006c06:	4a02      	ldr	r2, [pc, #8]	; (8006c10 <flash_lock_pecr+0xc>)
 8006c08:	6811      	ldr	r1, [r2, #0]
 8006c0a:	430b      	orrs	r3, r1
 8006c0c:	6013      	str	r3, [r2, #0]
}
 8006c0e:	4770      	bx	lr
 8006c10:	40022004 	.word	0x40022004

08006c14 <flash_unlock_progmem>:
 * you must have already unlocked access to this register!
 * @sa flash_unlock_pecr
 */
void flash_unlock_progmem(void)
{
	FLASH_PRGKEYR = FLASH_PRGKEYR_PRGKEY1;
 8006c14:	4b02      	ldr	r3, [pc, #8]	; (8006c20 <flash_unlock_progmem+0xc>)
 8006c16:	4a03      	ldr	r2, [pc, #12]	; (8006c24 <flash_unlock_progmem+0x10>)
 8006c18:	601a      	str	r2, [r3, #0]
	FLASH_PRGKEYR = FLASH_PRGKEYR_PRGKEY2;
 8006c1a:	4a03      	ldr	r2, [pc, #12]	; (8006c28 <flash_unlock_progmem+0x14>)
 8006c1c:	601a      	str	r2, [r3, #0]
}
 8006c1e:	4770      	bx	lr
 8006c20:	40022010 	.word	0x40022010
 8006c24:	8c9daebf 	.word	0x8c9daebf
 8006c28:	13141516 	.word	0x13141516

08006c2c <flash_lock_progmem>:

void flash_lock_progmem(void)
{
	FLASH_PECR |= FLASH_PECR_PRGLOCK;
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	4a02      	ldr	r2, [pc, #8]	; (8006c38 <flash_lock_progmem+0xc>)
 8006c30:	6811      	ldr	r1, [r2, #0]
 8006c32:	430b      	orrs	r3, r1
 8006c34:	6013      	str	r3, [r2, #0]
}
 8006c36:	4770      	bx	lr
 8006c38:	40022004 	.word	0x40022004

08006c3c <flash_lock_option_bytes>:

void flash_lock_option_bytes(void)
{
	FLASH_PECR |= FLASH_PECR_OPTLOCK;
 8006c3c:	2304      	movs	r3, #4
 8006c3e:	4a02      	ldr	r2, [pc, #8]	; (8006c48 <flash_lock_option_bytes+0xc>)
 8006c40:	6811      	ldr	r1, [r2, #0]
 8006c42:	430b      	orrs	r3, r1
 8006c44:	6013      	str	r3, [r2, #0]
}
 8006c46:	4770      	bx	lr
 8006c48:	40022004 	.word	0x40022004

08006c4c <flash_unlock>:

/** @brief Unlock all segments of flash
 *
 */
void flash_unlock(void)
{
 8006c4c:	b510      	push	{r4, lr}
	flash_unlock_pecr();
 8006c4e:	f7ff ffcd 	bl	8006bec <flash_unlock_pecr>
	flash_unlock_progmem();
 8006c52:	f7ff ffdf 	bl	8006c14 <flash_unlock_progmem>
	flash_unlock_option_bytes();
 8006c56:	f7ff ffbd 	bl	8006bd4 <flash_unlock_option_bytes>
}
 8006c5a:	bd10      	pop	{r4, pc}

08006c5c <flash_lock>:

/** @brief Lock all segments of flash
 *
 */
void flash_lock(void)
{
 8006c5c:	b510      	push	{r4, lr}
	flash_lock_option_bytes();
 8006c5e:	f7ff ffed 	bl	8006c3c <flash_lock_option_bytes>
	flash_lock_progmem();
 8006c62:	f7ff ffe3 	bl	8006c2c <flash_lock_progmem>
	flash_lock_pecr();
 8006c66:	f7ff ffcd 	bl	8006c04 <flash_lock_pecr>
}
 8006c6a:	bd10      	pop	{r4, pc}

08006c6c <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8006c6c:	6181      	str	r1, [r0, #24]
}
 8006c6e:	4770      	bx	lr

08006c70 <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8006c70:	0409      	lsls	r1, r1, #16
 8006c72:	6181      	str	r1, [r0, #24]
}
 8006c74:	4770      	bx	lr

08006c76 <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 8006c76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c78:	b085      	sub	sp, #20
 8006c7a:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8006c7c:	2703      	movs	r7, #3
	pupd = GPIO_PUPDR(gpioport);
 8006c7e:	2100      	movs	r1, #0
{
 8006c80:	9202      	str	r2, [sp, #8]
 8006c82:	9303      	str	r3, [sp, #12]
	moder = GPIO_MODER(gpioport);
 8006c84:	6802      	ldr	r2, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 8006c86:	68c3      	ldr	r3, [r0, #12]
		if (!((1 << i) & gpios)) {
 8006c88:	9c03      	ldr	r4, [sp, #12]
 8006c8a:	2501      	movs	r5, #1
 8006c8c:	410c      	asrs	r4, r1
 8006c8e:	422c      	tst	r4, r5
 8006c90:	d00a      	beq.n	8006ca8 <gpio_mode_setup+0x32>
		moder &= ~GPIO_MODE_MASK(i);
 8006c92:	003d      	movs	r5, r7
 8006c94:	004c      	lsls	r4, r1, #1
 8006c96:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8006c98:	9e01      	ldr	r6, [sp, #4]
		moder &= ~GPIO_MODE_MASK(i);
 8006c9a:	43aa      	bics	r2, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 8006c9c:	43ab      	bics	r3, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 8006c9e:	9d02      	ldr	r5, [sp, #8]
		moder |= GPIO_MODE(i, mode);
 8006ca0:	40a6      	lsls	r6, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 8006ca2:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8006ca4:	4332      	orrs	r2, r6
		pupd |= GPIO_PUPD(i, pull_up_down);
 8006ca6:	432b      	orrs	r3, r5
	for (i = 0; i < 16; i++) {
 8006ca8:	3101      	adds	r1, #1
 8006caa:	2910      	cmp	r1, #16
 8006cac:	d1ec      	bne.n	8006c88 <gpio_mode_setup+0x12>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 8006cae:	6002      	str	r2, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 8006cb0:	60c3      	str	r3, [r0, #12]
}
 8006cb2:	b005      	add	sp, #20
 8006cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cb6 <gpio_set_output_options>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_output_options(uint32_t gpioport, uint8_t otype, uint8_t speed,
			     uint16_t gpios)
{
 8006cb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cb8:	9201      	str	r2, [sp, #4]
	uint16_t i;
	uint32_t ospeedr;

	if (otype == 0x1) {
 8006cba:	2901      	cmp	r1, #1
 8006cbc:	d116      	bne.n	8006cec <gpio_set_output_options+0x36>
		GPIO_OTYPER(gpioport) |= gpios;
 8006cbe:	6841      	ldr	r1, [r0, #4]
 8006cc0:	4319      	orrs	r1, r3
	} else {
		GPIO_OTYPER(gpioport) &= ~gpios;
	}

	ospeedr = GPIO_OSPEEDR(gpioport);
 8006cc2:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8006cc4:	2601      	movs	r6, #1
			continue;
		}
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8006cc6:	2703      	movs	r7, #3
		GPIO_OTYPER(gpioport) &= ~gpios;
 8006cc8:	6041      	str	r1, [r0, #4]
	ospeedr = GPIO_OSPEEDR(gpioport);
 8006cca:	6881      	ldr	r1, [r0, #8]
		if (!((1 << i) & gpios)) {
 8006ccc:	001d      	movs	r5, r3
 8006cce:	4125      	asrs	r5, r4
 8006cd0:	4235      	tst	r5, r6
 8006cd2:	d006      	beq.n	8006ce2 <gpio_set_output_options+0x2c>
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8006cd4:	003a      	movs	r2, r7
 8006cd6:	0065      	lsls	r5, r4, #1
 8006cd8:	40aa      	lsls	r2, r5
 8006cda:	4391      	bics	r1, r2
		ospeedr |= GPIO_OSPEED(i, speed);
 8006cdc:	9a01      	ldr	r2, [sp, #4]
 8006cde:	40aa      	lsls	r2, r5
 8006ce0:	4311      	orrs	r1, r2
	for (i = 0; i < 16; i++) {
 8006ce2:	3401      	adds	r4, #1
 8006ce4:	2c10      	cmp	r4, #16
 8006ce6:	d1f1      	bne.n	8006ccc <gpio_set_output_options+0x16>
	}

	GPIO_OSPEEDR(gpioport) = ospeedr;
 8006ce8:	6081      	str	r1, [r0, #8]
}
 8006cea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		GPIO_OTYPER(gpioport) &= ~gpios;
 8006cec:	6841      	ldr	r1, [r0, #4]
 8006cee:	4399      	bics	r1, r3
 8006cf0:	e7e7      	b.n	8006cc2 <gpio_set_output_options+0xc>

08006cf2 <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 8006cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);
 8006cf4:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 8006cf6:	2601      	movs	r6, #1
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 8006cf8:	270f      	movs	r7, #15
	afrl = GPIO_AFRL(gpioport);
 8006cfa:	6a04      	ldr	r4, [r0, #32]
{
 8006cfc:	9100      	str	r1, [sp, #0]
	afrh = GPIO_AFRH(gpioport);
 8006cfe:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8006d00:	9201      	str	r2, [sp, #4]
		if (!((1 << i) & gpios)) {
 8006d02:	9d01      	ldr	r5, [sp, #4]
 8006d04:	411d      	asrs	r5, r3
 8006d06:	4235      	tst	r5, r6
 8006d08:	d006      	beq.n	8006d18 <gpio_set_af+0x26>
		afrl &= ~GPIO_AFR_MASK(i);
 8006d0a:	003a      	movs	r2, r7
 8006d0c:	009d      	lsls	r5, r3, #2
 8006d0e:	40aa      	lsls	r2, r5
 8006d10:	4394      	bics	r4, r2
		afrl |= GPIO_AFR(i, alt_func_num);
 8006d12:	9a00      	ldr	r2, [sp, #0]
 8006d14:	40aa      	lsls	r2, r5
 8006d16:	4314      	orrs	r4, r2
	for (i = 0; i < 8; i++) {
 8006d18:	3301      	adds	r3, #1
 8006d1a:	2b08      	cmp	r3, #8
 8006d1c:	d1f1      	bne.n	8006d02 <gpio_set_af+0x10>
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8006d1e:	2601      	movs	r6, #1
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8006d20:	270f      	movs	r7, #15
		if (!((1 << i) & gpios)) {
 8006d22:	9a01      	ldr	r2, [sp, #4]
 8006d24:	411a      	asrs	r2, r3
 8006d26:	4232      	tst	r2, r6
 8006d28:	d007      	beq.n	8006d3a <gpio_set_af+0x48>
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8006d2a:	003a      	movs	r2, r7
 8006d2c:	009d      	lsls	r5, r3, #2
 8006d2e:	3d20      	subs	r5, #32
 8006d30:	40aa      	lsls	r2, r5
 8006d32:	4391      	bics	r1, r2
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 8006d34:	9a00      	ldr	r2, [sp, #0]
 8006d36:	40aa      	lsls	r2, r5
 8006d38:	4311      	orrs	r1, r2
	for (i = 8; i < 16; i++) {
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	2b10      	cmp	r3, #16
 8006d3e:	d1f0      	bne.n	8006d22 <gpio_set_af+0x30>
	}

	GPIO_AFRL(gpioport) = afrl;
 8006d40:	6204      	str	r4, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 8006d42:	6241      	str	r1, [r0, #36]	; 0x24
}
 8006d44:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08006d46 <lptimer_get_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @returns Counter value.
 */
uint16_t lptimer_get_counter(uint32_t lptimer_peripheral)
{
	return LPTIM_CNT(lptimer_peripheral);
 8006d46:	69c0      	ldr	r0, [r0, #28]
 8006d48:	b280      	uxth	r0, r0
}
 8006d4a:	4770      	bx	lr

08006d4c <lptimer_enable>:
 *
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 */
void lptimer_enable(uint32_t lptimer_peripheral)
{
	LPTIM_CR(lptimer_peripheral) |= LPTIM_CR_ENABLE;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	6902      	ldr	r2, [r0, #16]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	6103      	str	r3, [r0, #16]
}
 8006d54:	4770      	bx	lr

08006d56 <lptimer_start_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] mode lptimer start mode (@ref LPTIM_CR_SNGSTRT or @ref LPTIM_CR_CNTSTRT)
 */
void lptimer_start_counter(uint32_t lptimer_peripheral, uint32_t mode)
{
	LPTIM_CR(lptimer_peripheral) |= mode;
 8006d56:	6903      	ldr	r3, [r0, #16]
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	6103      	str	r3, [r0, #16]
}
 8006d5c:	4770      	bx	lr
	...

08006d60 <lptimer_set_prescaler>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] prescaler Clock prescaler (@ref lptim_cfgr_presc)
 */
void lptimer_set_prescaler(uint32_t lptimer_peripheral, uint32_t prescaler)
{
	uint32_t reg32 = LPTIM_CFGR(lptimer_peripheral);
 8006d60:	68c3      	ldr	r3, [r0, #12]
	reg32 &= ~(LPTIM_CFGR_PRESC_MASK << LPTIM_CFGR_PRESC_SHIFT);
 8006d62:	4a02      	ldr	r2, [pc, #8]	; (8006d6c <lptimer_set_prescaler+0xc>)
 8006d64:	4013      	ands	r3, r2
	LPTIM_CFGR(lptimer_peripheral) = reg32 | prescaler;
 8006d66:	430b      	orrs	r3, r1
 8006d68:	60c3      	str	r3, [r0, #12]
}
 8006d6a:	4770      	bx	lr
 8006d6c:	fffff1ff 	.word	0xfffff1ff

08006d70 <lptimer_enable_trigger>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] trigen Enable Trigger
 */
void lptimer_enable_trigger(uint32_t lptimer_peripheral, uint32_t trigen)
{
	uint32_t reg32 = LPTIM_CFGR(lptimer_peripheral);
 8006d70:	68c3      	ldr	r3, [r0, #12]
	reg32 &= ~(LPTIM_CFGR_TRIGEN_MASK << LPTIM_CFGR_TRIGEN_SHIFT);
 8006d72:	4a02      	ldr	r2, [pc, #8]	; (8006d7c <lptimer_enable_trigger+0xc>)
 8006d74:	4013      	ands	r3, r2
	LPTIM_CFGR(lptimer_peripheral) = reg32 | trigen;
 8006d76:	430b      	orrs	r3, r1
 8006d78:	60c3      	str	r3, [r0, #12]
}
 8006d7a:	4770      	bx	lr
 8006d7c:	fff1ffff 	.word	0xfff1ffff

08006d80 <lptimer_set_period>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] period_value Autoreload value. Must be greater that CMP value.
 */
void lptimer_set_period(uint32_t lptimer_peripheral, uint16_t period_value)
{
	LPTIM_ARR(lptimer_peripheral) = period_value;
 8006d80:	6181      	str	r1, [r0, #24]
}
 8006d82:	4770      	bx	lr

08006d84 <lptimer_set_internal_clock_source>:
 *
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 */
void lptimer_set_internal_clock_source(uint32_t lptimer_peripheral)
{
	LPTIM_CFGR(lptimer_peripheral) &= ~LPTIM_CFGR_CKSEL;
 8006d84:	2201      	movs	r2, #1
 8006d86:	68c3      	ldr	r3, [r0, #12]
 8006d88:	4393      	bics	r3, r2
 8006d8a:	60c3      	str	r3, [r0, #12]
}
 8006d8c:	4770      	bx	lr
	...

08006d90 <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 8006d90:	2380      	movs	r3, #128	; 0x80
 8006d92:	4a03      	ldr	r2, [pc, #12]	; (8006da0 <pwr_disable_backup_domain_write_protect+0x10>)
 8006d94:	005b      	lsls	r3, r3, #1
 8006d96:	6811      	ldr	r1, [r2, #0]
 8006d98:	430b      	orrs	r3, r1
 8006d9a:	6013      	str	r3, [r2, #0]
}
 8006d9c:	4770      	bx	lr
 8006d9e:	46c0      	nop			; (mov r8, r8)
 8006da0:	40007000 	.word	0x40007000

08006da4 <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 8006da4:	4a02      	ldr	r2, [pc, #8]	; (8006db0 <pwr_enable_backup_domain_write_protect+0xc>)
 8006da6:	4903      	ldr	r1, [pc, #12]	; (8006db4 <pwr_enable_backup_domain_write_protect+0x10>)
 8006da8:	6813      	ldr	r3, [r2, #0]
 8006daa:	400b      	ands	r3, r1
 8006dac:	6013      	str	r3, [r2, #0]
}
 8006dae:	4770      	bx	lr
 8006db0:	40007000 	.word	0x40007000
 8006db4:	fffffeff 	.word	0xfffffeff

08006db8 <pwr_clear_standby_flag>:
This is set when the processor returns from a standby mode.
*/

void pwr_clear_standby_flag(void)
{
	PWR_CR |= PWR_CR_CSBF;
 8006db8:	2308      	movs	r3, #8
 8006dba:	4a02      	ldr	r2, [pc, #8]	; (8006dc4 <pwr_clear_standby_flag+0xc>)
 8006dbc:	6811      	ldr	r1, [r2, #0]
 8006dbe:	430b      	orrs	r3, r1
 8006dc0:	6013      	str	r3, [r2, #0]
}
 8006dc2:	4770      	bx	lr
 8006dc4:	40007000 	.word	0x40007000

08006dc8 <pwr_clear_wakeup_flag>:
This is set when the processor receives a wakeup signal.
*/

void pwr_clear_wakeup_flag(void)
{
	PWR_CR |= PWR_CR_CWUF;
 8006dc8:	2304      	movs	r3, #4
 8006dca:	4a02      	ldr	r2, [pc, #8]	; (8006dd4 <pwr_clear_wakeup_flag+0xc>)
 8006dcc:	6811      	ldr	r1, [r2, #0]
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	6013      	str	r3, [r2, #0]
}
 8006dd2:	4770      	bx	lr
 8006dd4:	40007000 	.word	0x40007000

08006dd8 <rcc_osc_on>:
uint32_t rcc_ahb_frequency = 2097000;
uint32_t rcc_apb1_frequency = 2097000;
uint32_t rcc_apb2_frequency = 2097000;

void rcc_osc_on(enum rcc_osc osc)
{
 8006dd8:	b500      	push	{lr}
 8006dda:	2806      	cmp	r0, #6
 8006ddc:	d80b      	bhi.n	8006df6 <rcc_osc_on+0x1e>
 8006dde:	f000 fad3 	bl	8007388 <__gnu_thumb1_case_uqi>
 8006de2:	1004      	.short	0x1004
 8006de4:	1b0b1915 	.word	0x1b0b1915
 8006de8:	1d          	.byte	0x1d
 8006de9:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 8006dea:	2380      	movs	r3, #128	; 0x80
 8006dec:	4a0c      	ldr	r2, [pc, #48]	; (8006e20 <rcc_osc_on+0x48>)
 8006dee:	045b      	lsls	r3, r3, #17
 8006df0:	6811      	ldr	r1, [r2, #0]
		break;
	case RCC_LSE:
		RCC_CSR |= RCC_CSR_LSEON;
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
 8006df2:	430b      	orrs	r3, r1
 8006df4:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8006df6:	bd00      	pop	{pc}
		RCC_CR |= RCC_CR_MSION;
 8006df8:	4a09      	ldr	r2, [pc, #36]	; (8006e20 <rcc_osc_on+0x48>)
		RCC_CSR |= RCC_CSR_LSEON;
 8006dfa:	2380      	movs	r3, #128	; 0x80
 8006dfc:	6811      	ldr	r1, [r2, #0]
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	e7f7      	b.n	8006df2 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSEON;
 8006e02:	2380      	movs	r3, #128	; 0x80
 8006e04:	4a06      	ldr	r2, [pc, #24]	; (8006e20 <rcc_osc_on+0x48>)
 8006e06:	025b      	lsls	r3, r3, #9
 8006e08:	6811      	ldr	r1, [r2, #0]
 8006e0a:	e7f2      	b.n	8006df2 <rcc_osc_on+0x1a>
		RCC_CRRCR |= RCC_CRRCR_HSI48ON;
 8006e0c:	4a05      	ldr	r2, [pc, #20]	; (8006e24 <rcc_osc_on+0x4c>)
		RCC_CSR |= RCC_CSR_LSION;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	6811      	ldr	r1, [r2, #0]
 8006e12:	e7ee      	b.n	8006df2 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSI16ON;
 8006e14:	4a02      	ldr	r2, [pc, #8]	; (8006e20 <rcc_osc_on+0x48>)
 8006e16:	e7fa      	b.n	8006e0e <rcc_osc_on+0x36>
		RCC_CSR |= RCC_CSR_LSEON;
 8006e18:	4a03      	ldr	r2, [pc, #12]	; (8006e28 <rcc_osc_on+0x50>)
 8006e1a:	e7ee      	b.n	8006dfa <rcc_osc_on+0x22>
		RCC_CSR |= RCC_CSR_LSION;
 8006e1c:	4a02      	ldr	r2, [pc, #8]	; (8006e28 <rcc_osc_on+0x50>)
 8006e1e:	e7f6      	b.n	8006e0e <rcc_osc_on+0x36>
 8006e20:	40021000 	.word	0x40021000
 8006e24:	40021008 	.word	0x40021008
 8006e28:	40021050 	.word	0x40021050

08006e2c <rcc_is_osc_ready>:
	cm3_assert_not_reached();
}


bool rcc_is_osc_ready(enum rcc_osc osc)
{
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	b500      	push	{lr}
 8006e30:	2806      	cmp	r0, #6
 8006e32:	d80a      	bhi.n	8006e4a <rcc_is_osc_ready+0x1e>
 8006e34:	3301      	adds	r3, #1
 8006e36:	f000 faa7 	bl	8007388 <__gnu_thumb1_case_uqi>
 8006e3a:	0a04      	.short	0x0a04
 8006e3c:	1a160e12 	.word	0x1a160e12
 8006e40:	1c          	.byte	0x1c
 8006e41:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 8006e42:	4a0d      	ldr	r2, [pc, #52]	; (8006e78 <rcc_is_osc_ready+0x4c>)
 8006e44:	6810      	ldr	r0, [r2, #0]
 8006e46:	0e40      	lsrs	r0, r0, #25
	case RCC_MSI:
		return RCC_CR & RCC_CR_MSIRDY;
	case RCC_LSE:
		return RCC_CSR & RCC_CSR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 8006e48:	4003      	ands	r3, r0
	}
	return false;
}
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	bd00      	pop	{pc}
		return RCC_CR & RCC_CR_HSERDY;
 8006e4e:	4a0a      	ldr	r2, [pc, #40]	; (8006e78 <rcc_is_osc_ready+0x4c>)
 8006e50:	6810      	ldr	r0, [r2, #0]
 8006e52:	0c40      	lsrs	r0, r0, #17
 8006e54:	e7f8      	b.n	8006e48 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_HSI16RDY;
 8006e56:	4a08      	ldr	r2, [pc, #32]	; (8006e78 <rcc_is_osc_ready+0x4c>)
 8006e58:	6810      	ldr	r0, [r2, #0]
 8006e5a:	0880      	lsrs	r0, r0, #2
 8006e5c:	e7f4      	b.n	8006e48 <rcc_is_osc_ready+0x1c>
		return RCC_CRRCR & RCC_CRRCR_HSI48RDY;
 8006e5e:	4a07      	ldr	r2, [pc, #28]	; (8006e7c <rcc_is_osc_ready+0x50>)
		return RCC_CSR & RCC_CSR_LSIRDY;
 8006e60:	6810      	ldr	r0, [r2, #0]
 8006e62:	0840      	lsrs	r0, r0, #1
 8006e64:	e7f0      	b.n	8006e48 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_MSIRDY;
 8006e66:	4a04      	ldr	r2, [pc, #16]	; (8006e78 <rcc_is_osc_ready+0x4c>)
		return RCC_CSR & RCC_CSR_LSERDY;
 8006e68:	6810      	ldr	r0, [r2, #0]
 8006e6a:	0a40      	lsrs	r0, r0, #9
 8006e6c:	e7ec      	b.n	8006e48 <rcc_is_osc_ready+0x1c>
 8006e6e:	4a04      	ldr	r2, [pc, #16]	; (8006e80 <rcc_is_osc_ready+0x54>)
 8006e70:	e7fa      	b.n	8006e68 <rcc_is_osc_ready+0x3c>
		return RCC_CSR & RCC_CSR_LSIRDY;
 8006e72:	4a03      	ldr	r2, [pc, #12]	; (8006e80 <rcc_is_osc_ready+0x54>)
 8006e74:	e7f4      	b.n	8006e60 <rcc_is_osc_ready+0x34>
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	40021008 	.word	0x40021008
 8006e80:	40021050 	.word	0x40021050

08006e84 <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 8006e84:	b510      	push	{r4, lr}
 8006e86:	0004      	movs	r4, r0
	while (!rcc_is_osc_ready(osc));
 8006e88:	0020      	movs	r0, r4
 8006e8a:	f7ff ffcf 	bl	8006e2c <rcc_is_osc_ready>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	d0fa      	beq.n	8006e88 <rcc_wait_for_osc_ready+0x4>
}
 8006e92:	bd10      	pop	{r4, pc}

08006e94 <rcc_set_ppre1>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb1pre
 */

void rcc_set_ppre1(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8006e94:	4a03      	ldr	r2, [pc, #12]	; (8006ea4 <rcc_set_ppre1+0x10>)
 8006e96:	4904      	ldr	r1, [pc, #16]	; (8006ea8 <rcc_set_ppre1+0x14>)
 8006e98:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE1_MASK << RCC_CFGR_PPRE1_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8006e9a:	0200      	lsls	r0, r0, #8
	uint32_t reg = RCC_CFGR
 8006e9c:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8006e9e:	4318      	orrs	r0, r3
 8006ea0:	6010      	str	r0, [r2, #0]
}
 8006ea2:	4770      	bx	lr
 8006ea4:	4002100c 	.word	0x4002100c
 8006ea8:	fffff8ff 	.word	0xfffff8ff

08006eac <rcc_set_ppre2>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb2pre
 */

void rcc_set_ppre2(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8006eac:	4a03      	ldr	r2, [pc, #12]	; (8006ebc <rcc_set_ppre2+0x10>)
 8006eae:	4904      	ldr	r1, [pc, #16]	; (8006ec0 <rcc_set_ppre2+0x14>)
 8006eb0:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE2_MASK << RCC_CFGR_PPRE2_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8006eb2:	02c0      	lsls	r0, r0, #11
	uint32_t reg = RCC_CFGR
 8006eb4:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8006eb6:	4318      	orrs	r0, r3
 8006eb8:	6010      	str	r0, [r2, #0]
}
 8006eba:	4770      	bx	lr
 8006ebc:	4002100c 	.word	0x4002100c
 8006ec0:	ffffc7ff 	.word	0xffffc7ff

08006ec4 <rcc_set_hpre>:
 * @param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
 */

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8006ec4:	21f0      	movs	r1, #240	; 0xf0
 8006ec6:	4a03      	ldr	r2, [pc, #12]	; (8006ed4 <rcc_set_hpre+0x10>)
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8006ec8:	0100      	lsls	r0, r0, #4
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8006eca:	6813      	ldr	r3, [r2, #0]
 8006ecc:	438b      	bics	r3, r1
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8006ece:	4318      	orrs	r0, r3
 8006ed0:	6010      	str	r0, [r2, #0]
}
 8006ed2:	4770      	bx	lr
 8006ed4:	4002100c 	.word	0x4002100c

08006ed8 <rcc_set_msi_range>:
*
 * @param msi_range desired range @ref rcc_icscr_msirange
 */
void rcc_set_msi_range(uint32_t msi_range)
{
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8006ed8:	4a03      	ldr	r2, [pc, #12]	; (8006ee8 <rcc_set_msi_range+0x10>)
 8006eda:	4904      	ldr	r1, [pc, #16]	; (8006eec <rcc_set_msi_range+0x14>)
 8006edc:	6813      	ldr	r3, [r2, #0]
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8006ede:	0340      	lsls	r0, r0, #13
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8006ee0:	400b      	ands	r3, r1
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8006ee2:	4318      	orrs	r0, r3
 8006ee4:	6010      	str	r0, [r2, #0]
}
 8006ee6:	4770      	bx	lr
 8006ee8:	40021004 	.word	0x40021004
 8006eec:	ffff1fff 	.word	0xffff1fff

08006ef0 <rcc_set_peripheral_clk_sel>:
void rcc_set_peripheral_clk_sel(uint32_t periph, uint32_t sel)
{
	uint8_t shift;
	uint32_t mask;

	switch (periph) {
 8006ef0:	4b13      	ldr	r3, [pc, #76]	; (8006f40 <rcc_set_peripheral_clk_sel+0x50>)
{
 8006ef2:	000a      	movs	r2, r1
 8006ef4:	b510      	push	{r4, lr}
	switch (periph) {
 8006ef6:	4298      	cmp	r0, r3
 8006ef8:	d01c      	beq.n	8006f34 <rcc_set_peripheral_clk_sel+0x44>
 8006efa:	d80b      	bhi.n	8006f14 <rcc_set_peripheral_clk_sel+0x24>
 8006efc:	4b11      	ldr	r3, [pc, #68]	; (8006f44 <rcc_set_peripheral_clk_sel+0x54>)
 8006efe:	4298      	cmp	r0, r3
 8006f00:	d01a      	beq.n	8006f38 <rcc_set_peripheral_clk_sel+0x48>
 8006f02:	4911      	ldr	r1, [pc, #68]	; (8006f48 <rcc_set_peripheral_clk_sel+0x58>)
			shift = RCC_CCIPR_I2C3SEL_SHIFT;
			mask = RCC_CCIPR_I2C3SEL_MASK;
			break;

		case I2C1_BASE:
			shift = RCC_CCIPR_I2C1SEL_SHIFT;
 8006f04:	230c      	movs	r3, #12
	switch (periph) {
 8006f06:	4288      	cmp	r0, r1
 8006f08:	d00b      	beq.n	8006f22 <rcc_set_peripheral_clk_sel+0x32>
 8006f0a:	4910      	ldr	r1, [pc, #64]	; (8006f4c <rcc_set_peripheral_clk_sel+0x5c>)
			shift = RCC_CCIPR_LPUART1SEL_SHIFT;
			mask = RCC_CCIPR_LPUART1SEL_MASK;
			break;

		case USART2_BASE:
			shift = RCC_CCIPR_USART2SEL_SHIFT;
 8006f0c:	3b0a      	subs	r3, #10
	switch (periph) {
 8006f0e:	4288      	cmp	r0, r1
 8006f10:	d007      	beq.n	8006f22 <rcc_set_peripheral_clk_sel+0x32>
			return;
	}

	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
	RCC_CCIPR = reg32 | (sel << shift);
}
 8006f12:	bd10      	pop	{r4, pc}
	switch (periph) {
 8006f14:	4b0e      	ldr	r3, [pc, #56]	; (8006f50 <rcc_set_peripheral_clk_sel+0x60>)
 8006f16:	4298      	cmp	r0, r3
 8006f18:	d010      	beq.n	8006f3c <rcc_set_peripheral_clk_sel+0x4c>
 8006f1a:	4b0e      	ldr	r3, [pc, #56]	; (8006f54 <rcc_set_peripheral_clk_sel+0x64>)
 8006f1c:	4298      	cmp	r0, r3
 8006f1e:	d1f8      	bne.n	8006f12 <rcc_set_peripheral_clk_sel+0x22>
			shift = RCC_CCIPR_USART1SEL_SHIFT;
 8006f20:	2300      	movs	r3, #0
	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
 8006f22:	2003      	movs	r0, #3
 8006f24:	4098      	lsls	r0, r3
	RCC_CCIPR = reg32 | (sel << shift);
 8006f26:	409a      	lsls	r2, r3
	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
 8006f28:	4c0b      	ldr	r4, [pc, #44]	; (8006f58 <rcc_set_peripheral_clk_sel+0x68>)
 8006f2a:	6821      	ldr	r1, [r4, #0]
 8006f2c:	4381      	bics	r1, r0
	RCC_CCIPR = reg32 | (sel << shift);
 8006f2e:	4311      	orrs	r1, r2
 8006f30:	6021      	str	r1, [r4, #0]
 8006f32:	e7ee      	b.n	8006f12 <rcc_set_peripheral_clk_sel+0x22>
	switch (periph) {
 8006f34:	2310      	movs	r3, #16
 8006f36:	e7f4      	b.n	8006f22 <rcc_set_peripheral_clk_sel+0x32>
			shift = RCC_CCIPR_LPUART1SEL_SHIFT;
 8006f38:	230a      	movs	r3, #10
 8006f3a:	e7f2      	b.n	8006f22 <rcc_set_peripheral_clk_sel+0x32>
			shift = RCC_CCIPR_LPTIM1SEL_SHIFT;
 8006f3c:	2312      	movs	r3, #18
 8006f3e:	e7f0      	b.n	8006f22 <rcc_set_peripheral_clk_sel+0x32>
 8006f40:	40007800 	.word	0x40007800
 8006f44:	40004800 	.word	0x40004800
 8006f48:	40005400 	.word	0x40005400
 8006f4c:	40004400 	.word	0x40004400
 8006f50:	40007c00 	.word	0x40007c00
 8006f54:	40013800 	.word	0x40013800
 8006f58:	4002104c 	.word	0x4002104c

08006f5c <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8006f5c:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <rcc_periph_clock_enable+0x18>)
 8006f5e:	0942      	lsrs	r2, r0, #5
 8006f60:	18d2      	adds	r2, r2, r3
 8006f62:	231f      	movs	r3, #31
 8006f64:	4018      	ands	r0, r3
 8006f66:	3b1e      	subs	r3, #30
 8006f68:	4083      	lsls	r3, r0
 8006f6a:	6811      	ldr	r1, [r2, #0]
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	6013      	str	r3, [r2, #0]
}
 8006f70:	4770      	bx	lr
 8006f72:	46c0      	nop			; (mov r8, r8)
 8006f74:	40021000 	.word	0x40021000

08006f78 <rcc_periph_clock_disable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_disable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) &= ~_RCC_BIT(clken);
 8006f78:	211f      	movs	r1, #31
 8006f7a:	0943      	lsrs	r3, r0, #5
 8006f7c:	4008      	ands	r0, r1
 8006f7e:	391e      	subs	r1, #30
 8006f80:	4081      	lsls	r1, r0
 8006f82:	4a03      	ldr	r2, [pc, #12]	; (8006f90 <rcc_periph_clock_disable+0x18>)
 8006f84:	189b      	adds	r3, r3, r2
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	438a      	bics	r2, r1
 8006f8a:	601a      	str	r2, [r3, #0]
}
 8006f8c:	4770      	bx	lr
 8006f8e:	46c0      	nop			; (mov r8, r8)
 8006f90:	40021000 	.word	0x40021000

08006f94 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8006f94:	4a06      	ldr	r2, [pc, #24]	; (8006fb0 <rcc_periph_reset_pulse+0x1c>)
 8006f96:	0943      	lsrs	r3, r0, #5
 8006f98:	189b      	adds	r3, r3, r2
 8006f9a:	221f      	movs	r2, #31
 8006f9c:	4010      	ands	r0, r2
 8006f9e:	3a1e      	subs	r2, #30
 8006fa0:	4082      	lsls	r2, r0
 8006fa2:	6819      	ldr	r1, [r3, #0]
 8006fa4:	4311      	orrs	r1, r2
 8006fa6:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 8006fa8:	6819      	ldr	r1, [r3, #0]
 8006faa:	4391      	bics	r1, r2
 8006fac:	6019      	str	r1, [r3, #0]
}
 8006fae:	4770      	bx	lr
 8006fb0:	40021000 	.word	0x40021000

08006fb4 <rtc_unlock>:
/** @brief Unlock write access to the RTC registers

*/
void rtc_unlock(void)
{
	RTC_WPR = 0xca;
 8006fb4:	22ca      	movs	r2, #202	; 0xca
 8006fb6:	4b02      	ldr	r3, [pc, #8]	; (8006fc0 <rtc_unlock+0xc>)
 8006fb8:	601a      	str	r2, [r3, #0]
	RTC_WPR = 0x53;
 8006fba:	3a77      	subs	r2, #119	; 0x77
 8006fbc:	601a      	str	r2, [r3, #0]
}
 8006fbe:	4770      	bx	lr
 8006fc0:	40002824 	.word	0x40002824

08006fc4 <rtc_lock>:
/** @brief Lock write access to the RTC registers

*/
void rtc_lock(void)
{
	RTC_WPR = 0xff;
 8006fc4:	22ff      	movs	r2, #255	; 0xff
 8006fc6:	4b01      	ldr	r3, [pc, #4]	; (8006fcc <rtc_lock+0x8>)
 8006fc8:	601a      	str	r2, [r3, #0]
}
 8006fca:	4770      	bx	lr
 8006fcc:	40002824 	.word	0x40002824

08006fd0 <rtc_clear_wakeup_flag>:

@details This function should be called first in the rtc_wkup_isr()
*/
void rtc_clear_wakeup_flag(void)
{
	RTC_ISR &= ~RTC_ISR_WUTF;
 8006fd0:	4a02      	ldr	r2, [pc, #8]	; (8006fdc <rtc_clear_wakeup_flag+0xc>)
 8006fd2:	4903      	ldr	r1, [pc, #12]	; (8006fe0 <rtc_clear_wakeup_flag+0x10>)
 8006fd4:	6813      	ldr	r3, [r2, #0]
 8006fd6:	400b      	ands	r3, r1
 8006fd8:	6013      	str	r3, [r2, #0]
}
 8006fda:	4770      	bx	lr
 8006fdc:	4000280c 	.word	0x4000280c
 8006fe0:	fffffbff 	.word	0xfffffbff

08006fe4 <spi_enable>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_enable(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_SPE; /* Enable SPI. */
 8006fe4:	2340      	movs	r3, #64	; 0x40
 8006fe6:	6802      	ldr	r2, [r0, #0]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	6003      	str	r3, [r0, #0]
}
 8006fec:	4770      	bx	lr

08006fee <spi_disable>:
void spi_disable(uint32_t spi)
{
	uint32_t reg32;

	reg32 = SPI_CR1(spi);
	reg32 &= ~(SPI_CR1_SPE); /* Disable SPI. */
 8006fee:	2240      	movs	r2, #64	; 0x40
	reg32 = SPI_CR1(spi);
 8006ff0:	6803      	ldr	r3, [r0, #0]
	reg32 &= ~(SPI_CR1_SPE); /* Disable SPI. */
 8006ff2:	4393      	bics	r3, r2
	SPI_CR1(spi) = reg32;
 8006ff4:	6003      	str	r3, [r0, #0]
}
 8006ff6:	4770      	bx	lr

08006ff8 <spi_xfer>:
uint16_t spi_xfer(uint32_t spi, uint16_t data)
{
	spi_write(spi, data);

	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8006ff8:	2301      	movs	r3, #1
	SPI_DR(spi) = data;
 8006ffa:	60c1      	str	r1, [r0, #12]
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8006ffc:	6882      	ldr	r2, [r0, #8]
 8006ffe:	421a      	tst	r2, r3
 8007000:	d0fc      	beq.n	8006ffc <spi_xfer+0x4>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 8007002:	68c0      	ldr	r0, [r0, #12]
 8007004:	b280      	uxth	r0, r0
}
 8007006:	4770      	bx	lr

08007008 <spi_init_master>:
@returns int. Error code.
*/

int spi_init_master(uint32_t spi, uint32_t br, uint32_t cpol, uint32_t cpha,
		    uint32_t dff, uint32_t lsbfirst)
{
 8007008:	b530      	push	{r4, r5, lr}
	uint32_t reg32 = SPI_CR1(spi);

	/* Reset all bits omitting SPE, CRCEN and CRCNEXT bits. */
	reg32 &= SPI_CR1_SPE | SPI_CR1_CRCEN | SPI_CR1_CRCNEXT;
 800700a:	25c1      	movs	r5, #193	; 0xc1
	uint32_t reg32 = SPI_CR1(spi);
 800700c:	6804      	ldr	r4, [r0, #0]
	reg32 &= SPI_CR1_SPE | SPI_CR1_CRCEN | SPI_CR1_CRCNEXT;
 800700e:	01ad      	lsls	r5, r5, #6
 8007010:	402c      	ands	r4, r5
 8007012:	9d04      	ldr	r5, [sp, #16]

	SPI_CR2(spi) |= SPI_CR2_SSOE; /* common case */
	SPI_CR1(spi) = reg32;

	return 0;
}
 8007014:	432c      	orrs	r4, r5
 8007016:	9d03      	ldr	r5, [sp, #12]
 8007018:	432c      	orrs	r4, r5
 800701a:	431c      	orrs	r4, r3
	reg32 |= lsbfirst;	/* Set frame format (LSB- or MSB-first). */
 800701c:	2304      	movs	r3, #4
 800701e:	4314      	orrs	r4, r2
	SPI_CR2(spi) |= SPI_CR2_SSOE; /* common case */
 8007020:	6842      	ldr	r2, [r0, #4]
 8007022:	430c      	orrs	r4, r1
	reg32 |= lsbfirst;	/* Set frame format (LSB- or MSB-first). */
 8007024:	431c      	orrs	r4, r3
	SPI_CR2(spi) |= SPI_CR2_SSOE; /* common case */
 8007026:	4313      	orrs	r3, r2
 8007028:	6043      	str	r3, [r0, #4]
	SPI_CR1(spi) = reg32;
 800702a:	6004      	str	r4, [r0, #0]
}
 800702c:	2000      	movs	r0, #0
 800702e:	bd30      	pop	{r4, r5, pc}

08007030 <timer_enable_counter>:
tim_reg_base
*/

void timer_enable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_CEN;
 8007030:	2301      	movs	r3, #1
 8007032:	6802      	ldr	r2, [r0, #0]
 8007034:	4313      	orrs	r3, r2
 8007036:	6003      	str	r3, [r0, #0]
}
 8007038:	4770      	bx	lr

0800703a <timer_disable_counter>:
tim_reg_base
*/

void timer_disable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_CEN;
 800703a:	2201      	movs	r2, #1
 800703c:	6803      	ldr	r3, [r0, #0]
 800703e:	4393      	bics	r3, r2
 8007040:	6003      	str	r3, [r0, #0]
}
 8007042:	4770      	bx	lr

08007044 <timer_set_prescaler>:
@param[in] value Unsigned int32. Prescaler values 0...0xFFFF.
*/

void timer_set_prescaler(uint32_t timer_peripheral, uint32_t value)
{
	TIM_PSC(timer_peripheral) = value;
 8007044:	6281      	str	r1, [r0, #40]	; 0x28
}
 8007046:	4770      	bx	lr

08007048 <timer_get_counter>:
@returns Unsigned int32. Counter value.
*/

uint32_t timer_get_counter(uint32_t timer_peripheral)
{
	return TIM_CNT(timer_peripheral);
 8007048:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 800704a:	4770      	bx	lr

0800704c <usart_set_baudrate>:
void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;

#if defined USART1
	if ((usart == USART1)
 800704c:	4b10      	ldr	r3, [pc, #64]	; (8007090 <usart_set_baudrate+0x44>)
{
 800704e:	b570      	push	{r4, r5, r6, lr}
 8007050:	0005      	movs	r5, r0
 8007052:	000c      	movs	r4, r1
 8007054:	084e      	lsrs	r6, r1, #1
	if ((usart == USART1)
 8007056:	4298      	cmp	r0, r3
 8007058:	d107      	bne.n	800706a <usart_set_baudrate+0x1e>
#if defined USART6
		|| (usart == USART6)
#endif
		) {
		clock = rcc_apb2_frequency;
 800705a:	4b0e      	ldr	r3, [pc, #56]	; (8007094 <usart_set_baudrate+0x48>)
 800705c:	6818      	ldr	r0, [r3, #0]
			+ ((clock % baud) * 256 + baud / 2) / baud;
		return;
	}
#endif

	USART_BRR(usart) = (clock + baud / 2) / baud;
 800705e:	0021      	movs	r1, r4
 8007060:	1830      	adds	r0, r6, r0
 8007062:	f000 f99b 	bl	800739c <__udivsi3>
 8007066:	60e8      	str	r0, [r5, #12]
 8007068:	e010      	b.n	800708c <usart_set_baudrate+0x40>
	uint32_t clock = rcc_apb1_frequency;
 800706a:	4b0b      	ldr	r3, [pc, #44]	; (8007098 <usart_set_baudrate+0x4c>)
 800706c:	6818      	ldr	r0, [r3, #0]
	if (usart == LPUART1) {
 800706e:	4b0b      	ldr	r3, [pc, #44]	; (800709c <usart_set_baudrate+0x50>)
 8007070:	429d      	cmp	r5, r3
 8007072:	d1f4      	bne.n	800705e <usart_set_baudrate+0x12>
		USART_BRR(usart) = (clock / baud) * 256
 8007074:	f000 fa18 	bl	80074a8 <__aeabi_uidivmod>
 8007078:	0005      	movs	r5, r0
			+ ((clock % baud) * 256 + baud / 2) / baud;
 800707a:	0208      	lsls	r0, r1, #8
 800707c:	1980      	adds	r0, r0, r6
 800707e:	0021      	movs	r1, r4
 8007080:	f000 f98c 	bl	800739c <__udivsi3>
		USART_BRR(usart) = (clock / baud) * 256
 8007084:	022d      	lsls	r5, r5, #8
 8007086:	4b06      	ldr	r3, [pc, #24]	; (80070a0 <usart_set_baudrate+0x54>)
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8007088:	1940      	adds	r0, r0, r5
		USART_BRR(usart) = (clock / baud) * 256
 800708a:	6018      	str	r0, [r3, #0]
}
 800708c:	bd70      	pop	{r4, r5, r6, pc}
 800708e:	46c0      	nop			; (mov r8, r8)
 8007090:	40013800 	.word	0x40013800
 8007094:	2000009c 	.word	0x2000009c
 8007098:	20000098 	.word	0x20000098
 800709c:	40004800 	.word	0x40004800
 80070a0:	4000480c 	.word	0x4000480c

080070a4 <usart_set_databits>:
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
 80070a4:	2908      	cmp	r1, #8
 80070a6:	d104      	bne.n	80070b2 <usart_set_databits+0xe>
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 80070a8:	6803      	ldr	r3, [r0, #0]
 80070aa:	4a04      	ldr	r2, [pc, #16]	; (80070bc <usart_set_databits+0x18>)
 80070ac:	4013      	ands	r3, r2
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 80070ae:	6003      	str	r3, [r0, #0]
	}
}
 80070b0:	4770      	bx	lr
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 80070b2:	2380      	movs	r3, #128	; 0x80
 80070b4:	6802      	ldr	r2, [r0, #0]
 80070b6:	015b      	lsls	r3, r3, #5
 80070b8:	4313      	orrs	r3, r2
 80070ba:	e7f8      	b.n	80070ae <usart_set_databits+0xa>
 80070bc:	ffffefff 	.word	0xffffefff

080070c0 <usart_set_stopbits>:

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 80070c0:	6843      	ldr	r3, [r0, #4]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 80070c2:	4a02      	ldr	r2, [pc, #8]	; (80070cc <usart_set_stopbits+0xc>)
 80070c4:	4013      	ands	r3, r2
 80070c6:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 80070c8:	6043      	str	r3, [r0, #4]
}
 80070ca:	4770      	bx	lr
 80070cc:	ffffcfff 	.word	0xffffcfff

080070d0 <usart_set_parity>:

void usart_set_parity(uint32_t usart, uint32_t parity)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 80070d0:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 80070d2:	4a02      	ldr	r2, [pc, #8]	; (80070dc <usart_set_parity+0xc>)
 80070d4:	4013      	ands	r3, r2
 80070d6:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 80070d8:	6003      	str	r3, [r0, #0]
}
 80070da:	4770      	bx	lr
 80070dc:	fffff9ff 	.word	0xfffff9ff

080070e0 <usart_set_mode>:
void usart_set_mode(uint32_t usart, uint32_t mode)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 80070e0:	220c      	movs	r2, #12
	reg32 = USART_CR1(usart);
 80070e2:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 80070e4:	4393      	bics	r3, r2
 80070e6:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 80070e8:	6003      	str	r3, [r0, #0]
}
 80070ea:	4770      	bx	lr

080070ec <usart_set_flow_control>:

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 80070ec:	6883      	ldr	r3, [r0, #8]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 80070ee:	4a02      	ldr	r2, [pc, #8]	; (80070f8 <usart_set_flow_control+0xc>)
 80070f0:	4013      	ands	r3, r2
 80070f2:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 80070f4:	6083      	str	r3, [r0, #8]
}
 80070f6:	4770      	bx	lr
 80070f8:	fffffcff 	.word	0xfffffcff

080070fc <usart_enable>:
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 80070fc:	2301      	movs	r3, #1
 80070fe:	6802      	ldr	r2, [r0, #0]
 8007100:	4313      	orrs	r3, r2
 8007102:	6003      	str	r3, [r0, #0]
}
 8007104:	4770      	bx	lr

08007106 <usart_disable>:
usart_reg_base
*/

void usart_disable(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_UE;
 8007106:	2201      	movs	r2, #1
 8007108:	6803      	ldr	r3, [r0, #0]
 800710a:	4393      	bics	r3, r2
 800710c:	6003      	str	r3, [r0, #0]
}
 800710e:	4770      	bx	lr

08007110 <usart_send_blocking>:
usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(uint32_t usart, uint16_t data)
{
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	000d      	movs	r5, r1
 8007114:	0004      	movs	r4, r0
	usart_wait_send_ready(usart);
 8007116:	f000 f812 	bl	800713e <usart_wait_send_ready>
	usart_send(usart, data);
 800711a:	0029      	movs	r1, r5
 800711c:	0020      	movs	r0, r4
 800711e:	f000 f806 	bl	800712e <usart_send>
}
 8007122:	bd70      	pop	{r4, r5, r6, pc}

08007124 <usart_enable_rx_interrupt>:
usart_reg_base
*/

void usart_enable_rx_interrupt(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_RXNEIE;
 8007124:	2320      	movs	r3, #32
 8007126:	6802      	ldr	r2, [r0, #0]
 8007128:	4313      	orrs	r3, r2
 800712a:	6003      	str	r3, [r0, #0]
}
 800712c:	4770      	bx	lr

0800712e <usart_send>:
 */

void usart_send(uint32_t usart, uint16_t data)
{
	/* Send data. */
	USART_TDR(usart) = (data & USART_TDR_MASK);
 800712e:	05c9      	lsls	r1, r1, #23
 8007130:	0dc9      	lsrs	r1, r1, #23
 8007132:	6281      	str	r1, [r0, #40]	; 0x28
}
 8007134:	4770      	bx	lr

08007136 <usart_recv>:
 */

uint16_t usart_recv(uint32_t usart)
{
	/* Receive data. */
	return USART_RDR(usart) & USART_RDR_MASK;
 8007136:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007138:	05c0      	lsls	r0, r0, #23
 800713a:	0dc0      	lsrs	r0, r0, #23
}
 800713c:	4770      	bx	lr

0800713e <usart_wait_send_ready>:
 */

void usart_wait_send_ready(uint32_t usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_ISR(usart) & USART_ISR_TXE) == 0);
 800713e:	2380      	movs	r3, #128	; 0x80
 8007140:	69c2      	ldr	r2, [r0, #28]
 8007142:	421a      	tst	r2, r3
 8007144:	d0fc      	beq.n	8007140 <usart_wait_send_ready+0x2>
}
 8007146:	4770      	bx	lr

08007148 <usart_get_flag>:
 * @returns boolean: flag set.
 */

bool usart_get_flag(uint32_t usart, uint32_t flag)
{
	return ((USART_ISR(usart) & flag) != 0);
 8007148:	69c0      	ldr	r0, [r0, #28]
 800714a:	4008      	ands	r0, r1
 800714c:	1e41      	subs	r1, r0, #1
 800714e:	4188      	sbcs	r0, r1
 8007150:	b2c0      	uxtb	r0, r0
}
 8007152:	4770      	bx	lr

08007154 <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 8007154:	e7fe      	b.n	8007154 <blocking_handler>

08007156 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 8007156:	4770      	bx	lr

08007158 <reset_handler>:
{
 8007158:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 800715a:	4b16      	ldr	r3, [pc, #88]	; (80071b4 <reset_handler+0x5c>)
 800715c:	4a16      	ldr	r2, [pc, #88]	; (80071b8 <reset_handler+0x60>)
 800715e:	4917      	ldr	r1, [pc, #92]	; (80071bc <reset_handler+0x64>)
 8007160:	428b      	cmp	r3, r1
 8007162:	d318      	bcc.n	8007196 <reset_handler+0x3e>
		*dest++ = 0;
 8007164:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 8007166:	4a16      	ldr	r2, [pc, #88]	; (80071c0 <reset_handler+0x68>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d317      	bcc.n	800719c <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 800716c:	2380      	movs	r3, #128	; 0x80
 800716e:	4a15      	ldr	r2, [pc, #84]	; (80071c4 <reset_handler+0x6c>)
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8007174:	4c14      	ldr	r4, [pc, #80]	; (80071c8 <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 8007176:	430b      	orrs	r3, r1
 8007178:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 800717a:	4b14      	ldr	r3, [pc, #80]	; (80071cc <reset_handler+0x74>)
 800717c:	429c      	cmp	r4, r3
 800717e:	d30f      	bcc.n	80071a0 <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8007180:	4c13      	ldr	r4, [pc, #76]	; (80071d0 <reset_handler+0x78>)
 8007182:	4b14      	ldr	r3, [pc, #80]	; (80071d4 <reset_handler+0x7c>)
 8007184:	429c      	cmp	r4, r3
 8007186:	d30e      	bcc.n	80071a6 <reset_handler+0x4e>
	(void)main();
 8007188:	f7fd f974 	bl	8004474 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 800718c:	4c12      	ldr	r4, [pc, #72]	; (80071d8 <reset_handler+0x80>)
 800718e:	4b13      	ldr	r3, [pc, #76]	; (80071dc <reset_handler+0x84>)
 8007190:	429c      	cmp	r4, r3
 8007192:	d30b      	bcc.n	80071ac <reset_handler+0x54>
}
 8007194:	bd10      	pop	{r4, pc}
		*dest = *src;
 8007196:	ca01      	ldmia	r2!, {r0}
 8007198:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 800719a:	e7e1      	b.n	8007160 <reset_handler+0x8>
		*dest++ = 0;
 800719c:	c302      	stmia	r3!, {r1}
 800719e:	e7e3      	b.n	8007168 <reset_handler+0x10>
		(*fp)();
 80071a0:	cc08      	ldmia	r4!, {r3}
 80071a2:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 80071a4:	e7e9      	b.n	800717a <reset_handler+0x22>
		(*fp)();
 80071a6:	cc08      	ldmia	r4!, {r3}
 80071a8:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 80071aa:	e7ea      	b.n	8007182 <reset_handler+0x2a>
		(*fp)();
 80071ac:	cc08      	ldmia	r4!, {r3}
 80071ae:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 80071b0:	e7ed      	b.n	800718e <reset_handler+0x36>
 80071b2:	46c0      	nop			; (mov r8, r8)
 80071b4:	20000000 	.word	0x20000000
 80071b8:	08009710 	.word	0x08009710
 80071bc:	20000104 	.word	0x20000104
 80071c0:	20000a28 	.word	0x20000a28
 80071c4:	e000ed14 	.word	0xe000ed14
 80071c8:	08009710 	.word	0x08009710
 80071cc:	08009710 	.word	0x08009710
 80071d0:	08009710 	.word	0x08009710
 80071d4:	08009710 	.word	0x08009710
 80071d8:	08009710 	.word	0x08009710
 80071dc:	08009710 	.word	0x08009710

080071e0 <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref CM3_nvic_defines_irqs
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 80071e0:	4a04      	ldr	r2, [pc, #16]	; (80071f4 <nvic_enable_irq+0x14>)
 80071e2:	0943      	lsrs	r3, r0, #5
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	189b      	adds	r3, r3, r2
 80071e8:	221f      	movs	r2, #31
 80071ea:	4010      	ands	r0, r2
 80071ec:	3a1e      	subs	r2, #30
 80071ee:	4082      	lsls	r2, r0
 80071f0:	601a      	str	r2, [r3, #0]
}
 80071f2:	4770      	bx	lr
 80071f4:	e000e100 	.word	0xe000e100

080071f8 <nvic_set_priority>:
 * @param[in] irqn Interrupt number @ref CM3_nvic_defines_irqs
 * @param[in] priority Interrupt priority (0 ... 255 in steps of 16)
 */
#endif
void nvic_set_priority(uint8_t irqn, uint8_t priority)
{
 80071f8:	b510      	push	{r4, lr}
	/* code from lpc43xx/nvic.c -- this is quite a hack and alludes to the
	 * negative interrupt numbers assigned to the system interrupts. better
	 * handling would mean signed integers. */
	if (irqn >= NVIC_IRQ_COUNT) {
 80071fa:	281f      	cmp	r0, #31
 80071fc:	d912      	bls.n	8007224 <nvic_set_priority+0x2c>
		/* Cortex-M  system interrupts */
#if defined(__ARM_ARCH_6M__)
		/* ARM6M supports only 32bit word access to SHPR registers */
		irqn = (irqn & 0xF) - 4;
 80071fe:	230f      	movs	r3, #15
 8007200:	4018      	ands	r0, r3
 8007202:	3804      	subs	r0, #4
 8007204:	b2c0      	uxtb	r0, r0
		uint8_t shift = (irqn & 0x3) << 3;
		uint8_t reg = irqn >> 2;
		SCB_SHPR32(reg) = ((SCB_SHPR32(reg) & ~(0xFFUL << shift)) |
 8007206:	0883      	lsrs	r3, r0, #2
 8007208:	4a08      	ldr	r2, [pc, #32]	; (800722c <nvic_set_priority+0x34>)
 800720a:	009b      	lsls	r3, r3, #2
		/* Device specific interrupts */
#if defined(__ARM_ARCH_6M__)
		/* ARM6M supports only 32bit word access to IPR registers */
		uint8_t shift = (irqn & 0x3) << 3;
		uint8_t reg = irqn >> 2;
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 800720c:	2418      	movs	r4, #24
		uint8_t shift = (irqn & 0x3) << 3;
 800720e:	00c0      	lsls	r0, r0, #3
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 8007210:	4020      	ands	r0, r4
 8007212:	34e7      	adds	r4, #231	; 0xe7
 8007214:	4084      	lsls	r4, r0
				((uint32_t) priority) << shift);
 8007216:	4081      	lsls	r1, r0
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 8007218:	189b      	adds	r3, r3, r2
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	43a2      	bics	r2, r4
 800721e:	4311      	orrs	r1, r2
 8007220:	6019      	str	r1, [r3, #0]
#else
		NVIC_IPR(irqn) = priority;
#endif
	}
}
 8007222:	bd10      	pop	{r4, pc}
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 8007224:	0883      	lsrs	r3, r0, #2
 8007226:	4a02      	ldr	r2, [pc, #8]	; (8007230 <nvic_set_priority+0x38>)
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	e7ef      	b.n	800720c <nvic_set_priority+0x14>
 800722c:	e000ed18 	.word	0xe000ed18
 8007230:	e000e400 	.word	0xe000e400

08007234 <malloc>:
 8007234:	b510      	push	{r4, lr}
 8007236:	4b03      	ldr	r3, [pc, #12]	; (8007244 <malloc+0x10>)
 8007238:	0001      	movs	r1, r0
 800723a:	6818      	ldr	r0, [r3, #0]
 800723c:	f000 f80c 	bl	8007258 <_malloc_r>
 8007240:	bd10      	pop	{r4, pc}
 8007242:	46c0      	nop			; (mov r8, r8)
 8007244:	200000a0 	.word	0x200000a0

08007248 <memset>:
 8007248:	0003      	movs	r3, r0
 800724a:	1882      	adds	r2, r0, r2
 800724c:	4293      	cmp	r3, r2
 800724e:	d100      	bne.n	8007252 <memset+0xa>
 8007250:	4770      	bx	lr
 8007252:	7019      	strb	r1, [r3, #0]
 8007254:	3301      	adds	r3, #1
 8007256:	e7f9      	b.n	800724c <memset+0x4>

08007258 <_malloc_r>:
 8007258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725a:	2303      	movs	r3, #3
 800725c:	1ccd      	adds	r5, r1, #3
 800725e:	439d      	bics	r5, r3
 8007260:	3508      	adds	r5, #8
 8007262:	0006      	movs	r6, r0
 8007264:	2d0c      	cmp	r5, #12
 8007266:	d21f      	bcs.n	80072a8 <_malloc_r+0x50>
 8007268:	250c      	movs	r5, #12
 800726a:	42a9      	cmp	r1, r5
 800726c:	d81e      	bhi.n	80072ac <_malloc_r+0x54>
 800726e:	0030      	movs	r0, r6
 8007270:	f000 f878 	bl	8007364 <__malloc_lock>
 8007274:	4925      	ldr	r1, [pc, #148]	; (800730c <_malloc_r+0xb4>)
 8007276:	680a      	ldr	r2, [r1, #0]
 8007278:	0014      	movs	r4, r2
 800727a:	2c00      	cmp	r4, #0
 800727c:	d11a      	bne.n	80072b4 <_malloc_r+0x5c>
 800727e:	4f24      	ldr	r7, [pc, #144]	; (8007310 <_malloc_r+0xb8>)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d104      	bne.n	8007290 <_malloc_r+0x38>
 8007286:	0021      	movs	r1, r4
 8007288:	0030      	movs	r0, r6
 800728a:	f000 f843 	bl	8007314 <_sbrk_r>
 800728e:	6038      	str	r0, [r7, #0]
 8007290:	0029      	movs	r1, r5
 8007292:	0030      	movs	r0, r6
 8007294:	f000 f83e 	bl	8007314 <_sbrk_r>
 8007298:	1c43      	adds	r3, r0, #1
 800729a:	d12b      	bne.n	80072f4 <_malloc_r+0x9c>
 800729c:	230c      	movs	r3, #12
 800729e:	0030      	movs	r0, r6
 80072a0:	6033      	str	r3, [r6, #0]
 80072a2:	f000 f867 	bl	8007374 <__malloc_unlock>
 80072a6:	e003      	b.n	80072b0 <_malloc_r+0x58>
 80072a8:	2d00      	cmp	r5, #0
 80072aa:	dade      	bge.n	800726a <_malloc_r+0x12>
 80072ac:	230c      	movs	r3, #12
 80072ae:	6033      	str	r3, [r6, #0]
 80072b0:	2000      	movs	r0, #0
 80072b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	1b5b      	subs	r3, r3, r5
 80072b8:	d419      	bmi.n	80072ee <_malloc_r+0x96>
 80072ba:	2b0b      	cmp	r3, #11
 80072bc:	d903      	bls.n	80072c6 <_malloc_r+0x6e>
 80072be:	6023      	str	r3, [r4, #0]
 80072c0:	18e4      	adds	r4, r4, r3
 80072c2:	6025      	str	r5, [r4, #0]
 80072c4:	e003      	b.n	80072ce <_malloc_r+0x76>
 80072c6:	6863      	ldr	r3, [r4, #4]
 80072c8:	42a2      	cmp	r2, r4
 80072ca:	d10e      	bne.n	80072ea <_malloc_r+0x92>
 80072cc:	600b      	str	r3, [r1, #0]
 80072ce:	0030      	movs	r0, r6
 80072d0:	f000 f850 	bl	8007374 <__malloc_unlock>
 80072d4:	0020      	movs	r0, r4
 80072d6:	2207      	movs	r2, #7
 80072d8:	300b      	adds	r0, #11
 80072da:	1d23      	adds	r3, r4, #4
 80072dc:	4390      	bics	r0, r2
 80072de:	1ac2      	subs	r2, r0, r3
 80072e0:	4298      	cmp	r0, r3
 80072e2:	d0e6      	beq.n	80072b2 <_malloc_r+0x5a>
 80072e4:	1a1b      	subs	r3, r3, r0
 80072e6:	50a3      	str	r3, [r4, r2]
 80072e8:	e7e3      	b.n	80072b2 <_malloc_r+0x5a>
 80072ea:	6053      	str	r3, [r2, #4]
 80072ec:	e7ef      	b.n	80072ce <_malloc_r+0x76>
 80072ee:	0022      	movs	r2, r4
 80072f0:	6864      	ldr	r4, [r4, #4]
 80072f2:	e7c2      	b.n	800727a <_malloc_r+0x22>
 80072f4:	2303      	movs	r3, #3
 80072f6:	1cc4      	adds	r4, r0, #3
 80072f8:	439c      	bics	r4, r3
 80072fa:	42a0      	cmp	r0, r4
 80072fc:	d0e1      	beq.n	80072c2 <_malloc_r+0x6a>
 80072fe:	1a21      	subs	r1, r4, r0
 8007300:	0030      	movs	r0, r6
 8007302:	f000 f807 	bl	8007314 <_sbrk_r>
 8007306:	1c43      	adds	r3, r0, #1
 8007308:	d1db      	bne.n	80072c2 <_malloc_r+0x6a>
 800730a:	e7c7      	b.n	800729c <_malloc_r+0x44>
 800730c:	20000a0c 	.word	0x20000a0c
 8007310:	20000a10 	.word	0x20000a10

08007314 <_sbrk_r>:
 8007314:	2300      	movs	r3, #0
 8007316:	b570      	push	{r4, r5, r6, lr}
 8007318:	4d06      	ldr	r5, [pc, #24]	; (8007334 <_sbrk_r+0x20>)
 800731a:	0004      	movs	r4, r0
 800731c:	0008      	movs	r0, r1
 800731e:	602b      	str	r3, [r5, #0]
 8007320:	f001 fcbc 	bl	8008c9c <_sbrk>
 8007324:	1c43      	adds	r3, r0, #1
 8007326:	d103      	bne.n	8007330 <_sbrk_r+0x1c>
 8007328:	682b      	ldr	r3, [r5, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d000      	beq.n	8007330 <_sbrk_r+0x1c>
 800732e:	6023      	str	r3, [r4, #0]
 8007330:	bd70      	pop	{r4, r5, r6, pc}
 8007332:	46c0      	nop			; (mov r8, r8)
 8007334:	20000a18 	.word	0x20000a18

08007338 <strstr>:
 8007338:	780a      	ldrb	r2, [r1, #0]
 800733a:	b530      	push	{r4, r5, lr}
 800733c:	2a00      	cmp	r2, #0
 800733e:	d10c      	bne.n	800735a <strstr+0x22>
 8007340:	bd30      	pop	{r4, r5, pc}
 8007342:	429a      	cmp	r2, r3
 8007344:	d108      	bne.n	8007358 <strstr+0x20>
 8007346:	2301      	movs	r3, #1
 8007348:	5ccc      	ldrb	r4, [r1, r3]
 800734a:	2c00      	cmp	r4, #0
 800734c:	d0f8      	beq.n	8007340 <strstr+0x8>
 800734e:	5cc5      	ldrb	r5, [r0, r3]
 8007350:	42a5      	cmp	r5, r4
 8007352:	d101      	bne.n	8007358 <strstr+0x20>
 8007354:	3301      	adds	r3, #1
 8007356:	e7f7      	b.n	8007348 <strstr+0x10>
 8007358:	3001      	adds	r0, #1
 800735a:	7803      	ldrb	r3, [r0, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1f0      	bne.n	8007342 <strstr+0xa>
 8007360:	0018      	movs	r0, r3
 8007362:	e7ed      	b.n	8007340 <strstr+0x8>

08007364 <__malloc_lock>:
 8007364:	b510      	push	{r4, lr}
 8007366:	4802      	ldr	r0, [pc, #8]	; (8007370 <__malloc_lock+0xc>)
 8007368:	f000 f80c 	bl	8007384 <__retarget_lock_acquire_recursive>
 800736c:	bd10      	pop	{r4, pc}
 800736e:	46c0      	nop			; (mov r8, r8)
 8007370:	20000a20 	.word	0x20000a20

08007374 <__malloc_unlock>:
 8007374:	b510      	push	{r4, lr}
 8007376:	4802      	ldr	r0, [pc, #8]	; (8007380 <__malloc_unlock+0xc>)
 8007378:	f000 f805 	bl	8007386 <__retarget_lock_release_recursive>
 800737c:	bd10      	pop	{r4, pc}
 800737e:	46c0      	nop			; (mov r8, r8)
 8007380:	20000a20 	.word	0x20000a20

08007384 <__retarget_lock_acquire_recursive>:
 8007384:	4770      	bx	lr

08007386 <__retarget_lock_release_recursive>:
 8007386:	4770      	bx	lr

08007388 <__gnu_thumb1_case_uqi>:
 8007388:	b402      	push	{r1}
 800738a:	4671      	mov	r1, lr
 800738c:	0849      	lsrs	r1, r1, #1
 800738e:	0049      	lsls	r1, r1, #1
 8007390:	5c09      	ldrb	r1, [r1, r0]
 8007392:	0049      	lsls	r1, r1, #1
 8007394:	448e      	add	lr, r1
 8007396:	bc02      	pop	{r1}
 8007398:	4770      	bx	lr
 800739a:	46c0      	nop			; (mov r8, r8)

0800739c <__udivsi3>:
 800739c:	2200      	movs	r2, #0
 800739e:	0843      	lsrs	r3, r0, #1
 80073a0:	428b      	cmp	r3, r1
 80073a2:	d374      	bcc.n	800748e <__udivsi3+0xf2>
 80073a4:	0903      	lsrs	r3, r0, #4
 80073a6:	428b      	cmp	r3, r1
 80073a8:	d35f      	bcc.n	800746a <__udivsi3+0xce>
 80073aa:	0a03      	lsrs	r3, r0, #8
 80073ac:	428b      	cmp	r3, r1
 80073ae:	d344      	bcc.n	800743a <__udivsi3+0x9e>
 80073b0:	0b03      	lsrs	r3, r0, #12
 80073b2:	428b      	cmp	r3, r1
 80073b4:	d328      	bcc.n	8007408 <__udivsi3+0x6c>
 80073b6:	0c03      	lsrs	r3, r0, #16
 80073b8:	428b      	cmp	r3, r1
 80073ba:	d30d      	bcc.n	80073d8 <__udivsi3+0x3c>
 80073bc:	22ff      	movs	r2, #255	; 0xff
 80073be:	0209      	lsls	r1, r1, #8
 80073c0:	ba12      	rev	r2, r2
 80073c2:	0c03      	lsrs	r3, r0, #16
 80073c4:	428b      	cmp	r3, r1
 80073c6:	d302      	bcc.n	80073ce <__udivsi3+0x32>
 80073c8:	1212      	asrs	r2, r2, #8
 80073ca:	0209      	lsls	r1, r1, #8
 80073cc:	d065      	beq.n	800749a <__udivsi3+0xfe>
 80073ce:	0b03      	lsrs	r3, r0, #12
 80073d0:	428b      	cmp	r3, r1
 80073d2:	d319      	bcc.n	8007408 <__udivsi3+0x6c>
 80073d4:	e000      	b.n	80073d8 <__udivsi3+0x3c>
 80073d6:	0a09      	lsrs	r1, r1, #8
 80073d8:	0bc3      	lsrs	r3, r0, #15
 80073da:	428b      	cmp	r3, r1
 80073dc:	d301      	bcc.n	80073e2 <__udivsi3+0x46>
 80073de:	03cb      	lsls	r3, r1, #15
 80073e0:	1ac0      	subs	r0, r0, r3
 80073e2:	4152      	adcs	r2, r2
 80073e4:	0b83      	lsrs	r3, r0, #14
 80073e6:	428b      	cmp	r3, r1
 80073e8:	d301      	bcc.n	80073ee <__udivsi3+0x52>
 80073ea:	038b      	lsls	r3, r1, #14
 80073ec:	1ac0      	subs	r0, r0, r3
 80073ee:	4152      	adcs	r2, r2
 80073f0:	0b43      	lsrs	r3, r0, #13
 80073f2:	428b      	cmp	r3, r1
 80073f4:	d301      	bcc.n	80073fa <__udivsi3+0x5e>
 80073f6:	034b      	lsls	r3, r1, #13
 80073f8:	1ac0      	subs	r0, r0, r3
 80073fa:	4152      	adcs	r2, r2
 80073fc:	0b03      	lsrs	r3, r0, #12
 80073fe:	428b      	cmp	r3, r1
 8007400:	d301      	bcc.n	8007406 <__udivsi3+0x6a>
 8007402:	030b      	lsls	r3, r1, #12
 8007404:	1ac0      	subs	r0, r0, r3
 8007406:	4152      	adcs	r2, r2
 8007408:	0ac3      	lsrs	r3, r0, #11
 800740a:	428b      	cmp	r3, r1
 800740c:	d301      	bcc.n	8007412 <__udivsi3+0x76>
 800740e:	02cb      	lsls	r3, r1, #11
 8007410:	1ac0      	subs	r0, r0, r3
 8007412:	4152      	adcs	r2, r2
 8007414:	0a83      	lsrs	r3, r0, #10
 8007416:	428b      	cmp	r3, r1
 8007418:	d301      	bcc.n	800741e <__udivsi3+0x82>
 800741a:	028b      	lsls	r3, r1, #10
 800741c:	1ac0      	subs	r0, r0, r3
 800741e:	4152      	adcs	r2, r2
 8007420:	0a43      	lsrs	r3, r0, #9
 8007422:	428b      	cmp	r3, r1
 8007424:	d301      	bcc.n	800742a <__udivsi3+0x8e>
 8007426:	024b      	lsls	r3, r1, #9
 8007428:	1ac0      	subs	r0, r0, r3
 800742a:	4152      	adcs	r2, r2
 800742c:	0a03      	lsrs	r3, r0, #8
 800742e:	428b      	cmp	r3, r1
 8007430:	d301      	bcc.n	8007436 <__udivsi3+0x9a>
 8007432:	020b      	lsls	r3, r1, #8
 8007434:	1ac0      	subs	r0, r0, r3
 8007436:	4152      	adcs	r2, r2
 8007438:	d2cd      	bcs.n	80073d6 <__udivsi3+0x3a>
 800743a:	09c3      	lsrs	r3, r0, #7
 800743c:	428b      	cmp	r3, r1
 800743e:	d301      	bcc.n	8007444 <__udivsi3+0xa8>
 8007440:	01cb      	lsls	r3, r1, #7
 8007442:	1ac0      	subs	r0, r0, r3
 8007444:	4152      	adcs	r2, r2
 8007446:	0983      	lsrs	r3, r0, #6
 8007448:	428b      	cmp	r3, r1
 800744a:	d301      	bcc.n	8007450 <__udivsi3+0xb4>
 800744c:	018b      	lsls	r3, r1, #6
 800744e:	1ac0      	subs	r0, r0, r3
 8007450:	4152      	adcs	r2, r2
 8007452:	0943      	lsrs	r3, r0, #5
 8007454:	428b      	cmp	r3, r1
 8007456:	d301      	bcc.n	800745c <__udivsi3+0xc0>
 8007458:	014b      	lsls	r3, r1, #5
 800745a:	1ac0      	subs	r0, r0, r3
 800745c:	4152      	adcs	r2, r2
 800745e:	0903      	lsrs	r3, r0, #4
 8007460:	428b      	cmp	r3, r1
 8007462:	d301      	bcc.n	8007468 <__udivsi3+0xcc>
 8007464:	010b      	lsls	r3, r1, #4
 8007466:	1ac0      	subs	r0, r0, r3
 8007468:	4152      	adcs	r2, r2
 800746a:	08c3      	lsrs	r3, r0, #3
 800746c:	428b      	cmp	r3, r1
 800746e:	d301      	bcc.n	8007474 <__udivsi3+0xd8>
 8007470:	00cb      	lsls	r3, r1, #3
 8007472:	1ac0      	subs	r0, r0, r3
 8007474:	4152      	adcs	r2, r2
 8007476:	0883      	lsrs	r3, r0, #2
 8007478:	428b      	cmp	r3, r1
 800747a:	d301      	bcc.n	8007480 <__udivsi3+0xe4>
 800747c:	008b      	lsls	r3, r1, #2
 800747e:	1ac0      	subs	r0, r0, r3
 8007480:	4152      	adcs	r2, r2
 8007482:	0843      	lsrs	r3, r0, #1
 8007484:	428b      	cmp	r3, r1
 8007486:	d301      	bcc.n	800748c <__udivsi3+0xf0>
 8007488:	004b      	lsls	r3, r1, #1
 800748a:	1ac0      	subs	r0, r0, r3
 800748c:	4152      	adcs	r2, r2
 800748e:	1a41      	subs	r1, r0, r1
 8007490:	d200      	bcs.n	8007494 <__udivsi3+0xf8>
 8007492:	4601      	mov	r1, r0
 8007494:	4152      	adcs	r2, r2
 8007496:	4610      	mov	r0, r2
 8007498:	4770      	bx	lr
 800749a:	e7ff      	b.n	800749c <__udivsi3+0x100>
 800749c:	b501      	push	{r0, lr}
 800749e:	2000      	movs	r0, #0
 80074a0:	f000 f8f0 	bl	8007684 <__aeabi_idiv0>
 80074a4:	bd02      	pop	{r1, pc}
 80074a6:	46c0      	nop			; (mov r8, r8)

080074a8 <__aeabi_uidivmod>:
 80074a8:	2900      	cmp	r1, #0
 80074aa:	d0f7      	beq.n	800749c <__udivsi3+0x100>
 80074ac:	e776      	b.n	800739c <__udivsi3>
 80074ae:	4770      	bx	lr

080074b0 <__divsi3>:
 80074b0:	4603      	mov	r3, r0
 80074b2:	430b      	orrs	r3, r1
 80074b4:	d47f      	bmi.n	80075b6 <__divsi3+0x106>
 80074b6:	2200      	movs	r2, #0
 80074b8:	0843      	lsrs	r3, r0, #1
 80074ba:	428b      	cmp	r3, r1
 80074bc:	d374      	bcc.n	80075a8 <__divsi3+0xf8>
 80074be:	0903      	lsrs	r3, r0, #4
 80074c0:	428b      	cmp	r3, r1
 80074c2:	d35f      	bcc.n	8007584 <__divsi3+0xd4>
 80074c4:	0a03      	lsrs	r3, r0, #8
 80074c6:	428b      	cmp	r3, r1
 80074c8:	d344      	bcc.n	8007554 <__divsi3+0xa4>
 80074ca:	0b03      	lsrs	r3, r0, #12
 80074cc:	428b      	cmp	r3, r1
 80074ce:	d328      	bcc.n	8007522 <__divsi3+0x72>
 80074d0:	0c03      	lsrs	r3, r0, #16
 80074d2:	428b      	cmp	r3, r1
 80074d4:	d30d      	bcc.n	80074f2 <__divsi3+0x42>
 80074d6:	22ff      	movs	r2, #255	; 0xff
 80074d8:	0209      	lsls	r1, r1, #8
 80074da:	ba12      	rev	r2, r2
 80074dc:	0c03      	lsrs	r3, r0, #16
 80074de:	428b      	cmp	r3, r1
 80074e0:	d302      	bcc.n	80074e8 <__divsi3+0x38>
 80074e2:	1212      	asrs	r2, r2, #8
 80074e4:	0209      	lsls	r1, r1, #8
 80074e6:	d065      	beq.n	80075b4 <__divsi3+0x104>
 80074e8:	0b03      	lsrs	r3, r0, #12
 80074ea:	428b      	cmp	r3, r1
 80074ec:	d319      	bcc.n	8007522 <__divsi3+0x72>
 80074ee:	e000      	b.n	80074f2 <__divsi3+0x42>
 80074f0:	0a09      	lsrs	r1, r1, #8
 80074f2:	0bc3      	lsrs	r3, r0, #15
 80074f4:	428b      	cmp	r3, r1
 80074f6:	d301      	bcc.n	80074fc <__divsi3+0x4c>
 80074f8:	03cb      	lsls	r3, r1, #15
 80074fa:	1ac0      	subs	r0, r0, r3
 80074fc:	4152      	adcs	r2, r2
 80074fe:	0b83      	lsrs	r3, r0, #14
 8007500:	428b      	cmp	r3, r1
 8007502:	d301      	bcc.n	8007508 <__divsi3+0x58>
 8007504:	038b      	lsls	r3, r1, #14
 8007506:	1ac0      	subs	r0, r0, r3
 8007508:	4152      	adcs	r2, r2
 800750a:	0b43      	lsrs	r3, r0, #13
 800750c:	428b      	cmp	r3, r1
 800750e:	d301      	bcc.n	8007514 <__divsi3+0x64>
 8007510:	034b      	lsls	r3, r1, #13
 8007512:	1ac0      	subs	r0, r0, r3
 8007514:	4152      	adcs	r2, r2
 8007516:	0b03      	lsrs	r3, r0, #12
 8007518:	428b      	cmp	r3, r1
 800751a:	d301      	bcc.n	8007520 <__divsi3+0x70>
 800751c:	030b      	lsls	r3, r1, #12
 800751e:	1ac0      	subs	r0, r0, r3
 8007520:	4152      	adcs	r2, r2
 8007522:	0ac3      	lsrs	r3, r0, #11
 8007524:	428b      	cmp	r3, r1
 8007526:	d301      	bcc.n	800752c <__divsi3+0x7c>
 8007528:	02cb      	lsls	r3, r1, #11
 800752a:	1ac0      	subs	r0, r0, r3
 800752c:	4152      	adcs	r2, r2
 800752e:	0a83      	lsrs	r3, r0, #10
 8007530:	428b      	cmp	r3, r1
 8007532:	d301      	bcc.n	8007538 <__divsi3+0x88>
 8007534:	028b      	lsls	r3, r1, #10
 8007536:	1ac0      	subs	r0, r0, r3
 8007538:	4152      	adcs	r2, r2
 800753a:	0a43      	lsrs	r3, r0, #9
 800753c:	428b      	cmp	r3, r1
 800753e:	d301      	bcc.n	8007544 <__divsi3+0x94>
 8007540:	024b      	lsls	r3, r1, #9
 8007542:	1ac0      	subs	r0, r0, r3
 8007544:	4152      	adcs	r2, r2
 8007546:	0a03      	lsrs	r3, r0, #8
 8007548:	428b      	cmp	r3, r1
 800754a:	d301      	bcc.n	8007550 <__divsi3+0xa0>
 800754c:	020b      	lsls	r3, r1, #8
 800754e:	1ac0      	subs	r0, r0, r3
 8007550:	4152      	adcs	r2, r2
 8007552:	d2cd      	bcs.n	80074f0 <__divsi3+0x40>
 8007554:	09c3      	lsrs	r3, r0, #7
 8007556:	428b      	cmp	r3, r1
 8007558:	d301      	bcc.n	800755e <__divsi3+0xae>
 800755a:	01cb      	lsls	r3, r1, #7
 800755c:	1ac0      	subs	r0, r0, r3
 800755e:	4152      	adcs	r2, r2
 8007560:	0983      	lsrs	r3, r0, #6
 8007562:	428b      	cmp	r3, r1
 8007564:	d301      	bcc.n	800756a <__divsi3+0xba>
 8007566:	018b      	lsls	r3, r1, #6
 8007568:	1ac0      	subs	r0, r0, r3
 800756a:	4152      	adcs	r2, r2
 800756c:	0943      	lsrs	r3, r0, #5
 800756e:	428b      	cmp	r3, r1
 8007570:	d301      	bcc.n	8007576 <__divsi3+0xc6>
 8007572:	014b      	lsls	r3, r1, #5
 8007574:	1ac0      	subs	r0, r0, r3
 8007576:	4152      	adcs	r2, r2
 8007578:	0903      	lsrs	r3, r0, #4
 800757a:	428b      	cmp	r3, r1
 800757c:	d301      	bcc.n	8007582 <__divsi3+0xd2>
 800757e:	010b      	lsls	r3, r1, #4
 8007580:	1ac0      	subs	r0, r0, r3
 8007582:	4152      	adcs	r2, r2
 8007584:	08c3      	lsrs	r3, r0, #3
 8007586:	428b      	cmp	r3, r1
 8007588:	d301      	bcc.n	800758e <__divsi3+0xde>
 800758a:	00cb      	lsls	r3, r1, #3
 800758c:	1ac0      	subs	r0, r0, r3
 800758e:	4152      	adcs	r2, r2
 8007590:	0883      	lsrs	r3, r0, #2
 8007592:	428b      	cmp	r3, r1
 8007594:	d301      	bcc.n	800759a <__divsi3+0xea>
 8007596:	008b      	lsls	r3, r1, #2
 8007598:	1ac0      	subs	r0, r0, r3
 800759a:	4152      	adcs	r2, r2
 800759c:	0843      	lsrs	r3, r0, #1
 800759e:	428b      	cmp	r3, r1
 80075a0:	d301      	bcc.n	80075a6 <__divsi3+0xf6>
 80075a2:	004b      	lsls	r3, r1, #1
 80075a4:	1ac0      	subs	r0, r0, r3
 80075a6:	4152      	adcs	r2, r2
 80075a8:	1a41      	subs	r1, r0, r1
 80075aa:	d200      	bcs.n	80075ae <__divsi3+0xfe>
 80075ac:	4601      	mov	r1, r0
 80075ae:	4152      	adcs	r2, r2
 80075b0:	4610      	mov	r0, r2
 80075b2:	4770      	bx	lr
 80075b4:	e05d      	b.n	8007672 <__divsi3+0x1c2>
 80075b6:	0fca      	lsrs	r2, r1, #31
 80075b8:	d000      	beq.n	80075bc <__divsi3+0x10c>
 80075ba:	4249      	negs	r1, r1
 80075bc:	1003      	asrs	r3, r0, #32
 80075be:	d300      	bcc.n	80075c2 <__divsi3+0x112>
 80075c0:	4240      	negs	r0, r0
 80075c2:	4053      	eors	r3, r2
 80075c4:	2200      	movs	r2, #0
 80075c6:	469c      	mov	ip, r3
 80075c8:	0903      	lsrs	r3, r0, #4
 80075ca:	428b      	cmp	r3, r1
 80075cc:	d32d      	bcc.n	800762a <__divsi3+0x17a>
 80075ce:	0a03      	lsrs	r3, r0, #8
 80075d0:	428b      	cmp	r3, r1
 80075d2:	d312      	bcc.n	80075fa <__divsi3+0x14a>
 80075d4:	22fc      	movs	r2, #252	; 0xfc
 80075d6:	0189      	lsls	r1, r1, #6
 80075d8:	ba12      	rev	r2, r2
 80075da:	0a03      	lsrs	r3, r0, #8
 80075dc:	428b      	cmp	r3, r1
 80075de:	d30c      	bcc.n	80075fa <__divsi3+0x14a>
 80075e0:	0189      	lsls	r1, r1, #6
 80075e2:	1192      	asrs	r2, r2, #6
 80075e4:	428b      	cmp	r3, r1
 80075e6:	d308      	bcc.n	80075fa <__divsi3+0x14a>
 80075e8:	0189      	lsls	r1, r1, #6
 80075ea:	1192      	asrs	r2, r2, #6
 80075ec:	428b      	cmp	r3, r1
 80075ee:	d304      	bcc.n	80075fa <__divsi3+0x14a>
 80075f0:	0189      	lsls	r1, r1, #6
 80075f2:	d03a      	beq.n	800766a <__divsi3+0x1ba>
 80075f4:	1192      	asrs	r2, r2, #6
 80075f6:	e000      	b.n	80075fa <__divsi3+0x14a>
 80075f8:	0989      	lsrs	r1, r1, #6
 80075fa:	09c3      	lsrs	r3, r0, #7
 80075fc:	428b      	cmp	r3, r1
 80075fe:	d301      	bcc.n	8007604 <__divsi3+0x154>
 8007600:	01cb      	lsls	r3, r1, #7
 8007602:	1ac0      	subs	r0, r0, r3
 8007604:	4152      	adcs	r2, r2
 8007606:	0983      	lsrs	r3, r0, #6
 8007608:	428b      	cmp	r3, r1
 800760a:	d301      	bcc.n	8007610 <__divsi3+0x160>
 800760c:	018b      	lsls	r3, r1, #6
 800760e:	1ac0      	subs	r0, r0, r3
 8007610:	4152      	adcs	r2, r2
 8007612:	0943      	lsrs	r3, r0, #5
 8007614:	428b      	cmp	r3, r1
 8007616:	d301      	bcc.n	800761c <__divsi3+0x16c>
 8007618:	014b      	lsls	r3, r1, #5
 800761a:	1ac0      	subs	r0, r0, r3
 800761c:	4152      	adcs	r2, r2
 800761e:	0903      	lsrs	r3, r0, #4
 8007620:	428b      	cmp	r3, r1
 8007622:	d301      	bcc.n	8007628 <__divsi3+0x178>
 8007624:	010b      	lsls	r3, r1, #4
 8007626:	1ac0      	subs	r0, r0, r3
 8007628:	4152      	adcs	r2, r2
 800762a:	08c3      	lsrs	r3, r0, #3
 800762c:	428b      	cmp	r3, r1
 800762e:	d301      	bcc.n	8007634 <__divsi3+0x184>
 8007630:	00cb      	lsls	r3, r1, #3
 8007632:	1ac0      	subs	r0, r0, r3
 8007634:	4152      	adcs	r2, r2
 8007636:	0883      	lsrs	r3, r0, #2
 8007638:	428b      	cmp	r3, r1
 800763a:	d301      	bcc.n	8007640 <__divsi3+0x190>
 800763c:	008b      	lsls	r3, r1, #2
 800763e:	1ac0      	subs	r0, r0, r3
 8007640:	4152      	adcs	r2, r2
 8007642:	d2d9      	bcs.n	80075f8 <__divsi3+0x148>
 8007644:	0843      	lsrs	r3, r0, #1
 8007646:	428b      	cmp	r3, r1
 8007648:	d301      	bcc.n	800764e <__divsi3+0x19e>
 800764a:	004b      	lsls	r3, r1, #1
 800764c:	1ac0      	subs	r0, r0, r3
 800764e:	4152      	adcs	r2, r2
 8007650:	1a41      	subs	r1, r0, r1
 8007652:	d200      	bcs.n	8007656 <__divsi3+0x1a6>
 8007654:	4601      	mov	r1, r0
 8007656:	4663      	mov	r3, ip
 8007658:	4152      	adcs	r2, r2
 800765a:	105b      	asrs	r3, r3, #1
 800765c:	4610      	mov	r0, r2
 800765e:	d301      	bcc.n	8007664 <__divsi3+0x1b4>
 8007660:	4240      	negs	r0, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d500      	bpl.n	8007668 <__divsi3+0x1b8>
 8007666:	4249      	negs	r1, r1
 8007668:	4770      	bx	lr
 800766a:	4663      	mov	r3, ip
 800766c:	105b      	asrs	r3, r3, #1
 800766e:	d300      	bcc.n	8007672 <__divsi3+0x1c2>
 8007670:	4240      	negs	r0, r0
 8007672:	b501      	push	{r0, lr}
 8007674:	2000      	movs	r0, #0
 8007676:	f000 f805 	bl	8007684 <__aeabi_idiv0>
 800767a:	bd02      	pop	{r1, pc}

0800767c <__aeabi_idivmod>:
 800767c:	2900      	cmp	r1, #0
 800767e:	d0f8      	beq.n	8007672 <__divsi3+0x1c2>
 8007680:	e716      	b.n	80074b0 <__divsi3>
 8007682:	4770      	bx	lr

08007684 <__aeabi_idiv0>:
 8007684:	4770      	bx	lr
 8007686:	46c0      	nop			; (mov r8, r8)

08007688 <__aeabi_cdrcmple>:
 8007688:	4684      	mov	ip, r0
 800768a:	1c10      	adds	r0, r2, #0
 800768c:	4662      	mov	r2, ip
 800768e:	468c      	mov	ip, r1
 8007690:	1c19      	adds	r1, r3, #0
 8007692:	4663      	mov	r3, ip
 8007694:	e000      	b.n	8007698 <__aeabi_cdcmpeq>
 8007696:	46c0      	nop			; (mov r8, r8)

08007698 <__aeabi_cdcmpeq>:
 8007698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800769a:	f000 fbe7 	bl	8007e6c <__ledf2>
 800769e:	2800      	cmp	r0, #0
 80076a0:	d401      	bmi.n	80076a6 <__aeabi_cdcmpeq+0xe>
 80076a2:	2100      	movs	r1, #0
 80076a4:	42c8      	cmn	r0, r1
 80076a6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080076a8 <__aeabi_dcmpeq>:
 80076a8:	b510      	push	{r4, lr}
 80076aa:	f000 fb31 	bl	8007d10 <__eqdf2>
 80076ae:	4240      	negs	r0, r0
 80076b0:	3001      	adds	r0, #1
 80076b2:	bd10      	pop	{r4, pc}

080076b4 <__aeabi_dcmplt>:
 80076b4:	b510      	push	{r4, lr}
 80076b6:	f000 fbd9 	bl	8007e6c <__ledf2>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	db01      	blt.n	80076c2 <__aeabi_dcmplt+0xe>
 80076be:	2000      	movs	r0, #0
 80076c0:	bd10      	pop	{r4, pc}
 80076c2:	2001      	movs	r0, #1
 80076c4:	bd10      	pop	{r4, pc}
 80076c6:	46c0      	nop			; (mov r8, r8)

080076c8 <__aeabi_dcmple>:
 80076c8:	b510      	push	{r4, lr}
 80076ca:	f000 fbcf 	bl	8007e6c <__ledf2>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	dd01      	ble.n	80076d6 <__aeabi_dcmple+0xe>
 80076d2:	2000      	movs	r0, #0
 80076d4:	bd10      	pop	{r4, pc}
 80076d6:	2001      	movs	r0, #1
 80076d8:	bd10      	pop	{r4, pc}
 80076da:	46c0      	nop			; (mov r8, r8)

080076dc <__aeabi_dcmpgt>:
 80076dc:	b510      	push	{r4, lr}
 80076de:	f000 fb53 	bl	8007d88 <__gedf2>
 80076e2:	2800      	cmp	r0, #0
 80076e4:	dc01      	bgt.n	80076ea <__aeabi_dcmpgt+0xe>
 80076e6:	2000      	movs	r0, #0
 80076e8:	bd10      	pop	{r4, pc}
 80076ea:	2001      	movs	r0, #1
 80076ec:	bd10      	pop	{r4, pc}
 80076ee:	46c0      	nop			; (mov r8, r8)

080076f0 <__aeabi_dcmpge>:
 80076f0:	b510      	push	{r4, lr}
 80076f2:	f000 fb49 	bl	8007d88 <__gedf2>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	da01      	bge.n	80076fe <__aeabi_dcmpge+0xe>
 80076fa:	2000      	movs	r0, #0
 80076fc:	bd10      	pop	{r4, pc}
 80076fe:	2001      	movs	r0, #1
 8007700:	bd10      	pop	{r4, pc}
 8007702:	46c0      	nop			; (mov r8, r8)

08007704 <__aeabi_d2uiz>:
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	2200      	movs	r2, #0
 8007708:	4b0c      	ldr	r3, [pc, #48]	; (800773c <__aeabi_d2uiz+0x38>)
 800770a:	0004      	movs	r4, r0
 800770c:	000d      	movs	r5, r1
 800770e:	f7ff ffef 	bl	80076f0 <__aeabi_dcmpge>
 8007712:	2800      	cmp	r0, #0
 8007714:	d104      	bne.n	8007720 <__aeabi_d2uiz+0x1c>
 8007716:	0020      	movs	r0, r4
 8007718:	0029      	movs	r1, r5
 800771a:	f001 fa15 	bl	8008b48 <__aeabi_d2iz>
 800771e:	bd70      	pop	{r4, r5, r6, pc}
 8007720:	4b06      	ldr	r3, [pc, #24]	; (800773c <__aeabi_d2uiz+0x38>)
 8007722:	2200      	movs	r2, #0
 8007724:	0020      	movs	r0, r4
 8007726:	0029      	movs	r1, r5
 8007728:	f000 fe7c 	bl	8008424 <__aeabi_dsub>
 800772c:	f001 fa0c 	bl	8008b48 <__aeabi_d2iz>
 8007730:	2380      	movs	r3, #128	; 0x80
 8007732:	061b      	lsls	r3, r3, #24
 8007734:	469c      	mov	ip, r3
 8007736:	4460      	add	r0, ip
 8007738:	e7f1      	b.n	800771e <__aeabi_d2uiz+0x1a>
 800773a:	46c0      	nop			; (mov r8, r8)
 800773c:	41e00000 	.word	0x41e00000

08007740 <__aeabi_ddiv>:
 8007740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007742:	4657      	mov	r7, sl
 8007744:	464e      	mov	r6, r9
 8007746:	4645      	mov	r5, r8
 8007748:	46de      	mov	lr, fp
 800774a:	b5e0      	push	{r5, r6, r7, lr}
 800774c:	4681      	mov	r9, r0
 800774e:	0005      	movs	r5, r0
 8007750:	030c      	lsls	r4, r1, #12
 8007752:	0048      	lsls	r0, r1, #1
 8007754:	4692      	mov	sl, r2
 8007756:	001f      	movs	r7, r3
 8007758:	b085      	sub	sp, #20
 800775a:	0b24      	lsrs	r4, r4, #12
 800775c:	0d40      	lsrs	r0, r0, #21
 800775e:	0fce      	lsrs	r6, r1, #31
 8007760:	2800      	cmp	r0, #0
 8007762:	d059      	beq.n	8007818 <__aeabi_ddiv+0xd8>
 8007764:	4b87      	ldr	r3, [pc, #540]	; (8007984 <__aeabi_ddiv+0x244>)
 8007766:	4298      	cmp	r0, r3
 8007768:	d100      	bne.n	800776c <__aeabi_ddiv+0x2c>
 800776a:	e098      	b.n	800789e <__aeabi_ddiv+0x15e>
 800776c:	0f6b      	lsrs	r3, r5, #29
 800776e:	00e4      	lsls	r4, r4, #3
 8007770:	431c      	orrs	r4, r3
 8007772:	2380      	movs	r3, #128	; 0x80
 8007774:	041b      	lsls	r3, r3, #16
 8007776:	4323      	orrs	r3, r4
 8007778:	4698      	mov	r8, r3
 800777a:	4b83      	ldr	r3, [pc, #524]	; (8007988 <__aeabi_ddiv+0x248>)
 800777c:	00ed      	lsls	r5, r5, #3
 800777e:	469b      	mov	fp, r3
 8007780:	2300      	movs	r3, #0
 8007782:	4699      	mov	r9, r3
 8007784:	4483      	add	fp, r0
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	033c      	lsls	r4, r7, #12
 800778a:	007b      	lsls	r3, r7, #1
 800778c:	4650      	mov	r0, sl
 800778e:	0b24      	lsrs	r4, r4, #12
 8007790:	0d5b      	lsrs	r3, r3, #21
 8007792:	0fff      	lsrs	r7, r7, #31
 8007794:	2b00      	cmp	r3, #0
 8007796:	d067      	beq.n	8007868 <__aeabi_ddiv+0x128>
 8007798:	4a7a      	ldr	r2, [pc, #488]	; (8007984 <__aeabi_ddiv+0x244>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d018      	beq.n	80077d0 <__aeabi_ddiv+0x90>
 800779e:	497a      	ldr	r1, [pc, #488]	; (8007988 <__aeabi_ddiv+0x248>)
 80077a0:	0f42      	lsrs	r2, r0, #29
 80077a2:	468c      	mov	ip, r1
 80077a4:	00e4      	lsls	r4, r4, #3
 80077a6:	4659      	mov	r1, fp
 80077a8:	4314      	orrs	r4, r2
 80077aa:	2280      	movs	r2, #128	; 0x80
 80077ac:	4463      	add	r3, ip
 80077ae:	0412      	lsls	r2, r2, #16
 80077b0:	1acb      	subs	r3, r1, r3
 80077b2:	4314      	orrs	r4, r2
 80077b4:	469b      	mov	fp, r3
 80077b6:	00c2      	lsls	r2, r0, #3
 80077b8:	2000      	movs	r0, #0
 80077ba:	0033      	movs	r3, r6
 80077bc:	407b      	eors	r3, r7
 80077be:	469a      	mov	sl, r3
 80077c0:	464b      	mov	r3, r9
 80077c2:	2b0f      	cmp	r3, #15
 80077c4:	d900      	bls.n	80077c8 <__aeabi_ddiv+0x88>
 80077c6:	e0ef      	b.n	80079a8 <__aeabi_ddiv+0x268>
 80077c8:	4970      	ldr	r1, [pc, #448]	; (800798c <__aeabi_ddiv+0x24c>)
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	58cb      	ldr	r3, [r1, r3]
 80077ce:	469f      	mov	pc, r3
 80077d0:	4b6f      	ldr	r3, [pc, #444]	; (8007990 <__aeabi_ddiv+0x250>)
 80077d2:	4652      	mov	r2, sl
 80077d4:	469c      	mov	ip, r3
 80077d6:	4322      	orrs	r2, r4
 80077d8:	44e3      	add	fp, ip
 80077da:	2a00      	cmp	r2, #0
 80077dc:	d000      	beq.n	80077e0 <__aeabi_ddiv+0xa0>
 80077de:	e095      	b.n	800790c <__aeabi_ddiv+0x1cc>
 80077e0:	4649      	mov	r1, r9
 80077e2:	2302      	movs	r3, #2
 80077e4:	4319      	orrs	r1, r3
 80077e6:	4689      	mov	r9, r1
 80077e8:	2400      	movs	r4, #0
 80077ea:	2002      	movs	r0, #2
 80077ec:	e7e5      	b.n	80077ba <__aeabi_ddiv+0x7a>
 80077ee:	2300      	movs	r3, #0
 80077f0:	2400      	movs	r4, #0
 80077f2:	2500      	movs	r5, #0
 80077f4:	4652      	mov	r2, sl
 80077f6:	051b      	lsls	r3, r3, #20
 80077f8:	4323      	orrs	r3, r4
 80077fa:	07d2      	lsls	r2, r2, #31
 80077fc:	4313      	orrs	r3, r2
 80077fe:	0028      	movs	r0, r5
 8007800:	0019      	movs	r1, r3
 8007802:	b005      	add	sp, #20
 8007804:	bcf0      	pop	{r4, r5, r6, r7}
 8007806:	46bb      	mov	fp, r7
 8007808:	46b2      	mov	sl, r6
 800780a:	46a9      	mov	r9, r5
 800780c:	46a0      	mov	r8, r4
 800780e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007810:	2400      	movs	r4, #0
 8007812:	2500      	movs	r5, #0
 8007814:	4b5b      	ldr	r3, [pc, #364]	; (8007984 <__aeabi_ddiv+0x244>)
 8007816:	e7ed      	b.n	80077f4 <__aeabi_ddiv+0xb4>
 8007818:	464b      	mov	r3, r9
 800781a:	4323      	orrs	r3, r4
 800781c:	4698      	mov	r8, r3
 800781e:	d100      	bne.n	8007822 <__aeabi_ddiv+0xe2>
 8007820:	e089      	b.n	8007936 <__aeabi_ddiv+0x1f6>
 8007822:	2c00      	cmp	r4, #0
 8007824:	d100      	bne.n	8007828 <__aeabi_ddiv+0xe8>
 8007826:	e1e0      	b.n	8007bea <__aeabi_ddiv+0x4aa>
 8007828:	0020      	movs	r0, r4
 800782a:	f001 fa19 	bl	8008c60 <__clzsi2>
 800782e:	0001      	movs	r1, r0
 8007830:	0002      	movs	r2, r0
 8007832:	390b      	subs	r1, #11
 8007834:	231d      	movs	r3, #29
 8007836:	1a5b      	subs	r3, r3, r1
 8007838:	4649      	mov	r1, r9
 800783a:	0010      	movs	r0, r2
 800783c:	40d9      	lsrs	r1, r3
 800783e:	3808      	subs	r0, #8
 8007840:	4084      	lsls	r4, r0
 8007842:	000b      	movs	r3, r1
 8007844:	464d      	mov	r5, r9
 8007846:	4323      	orrs	r3, r4
 8007848:	4698      	mov	r8, r3
 800784a:	4085      	lsls	r5, r0
 800784c:	4851      	ldr	r0, [pc, #324]	; (8007994 <__aeabi_ddiv+0x254>)
 800784e:	033c      	lsls	r4, r7, #12
 8007850:	1a83      	subs	r3, r0, r2
 8007852:	469b      	mov	fp, r3
 8007854:	2300      	movs	r3, #0
 8007856:	4699      	mov	r9, r3
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	007b      	lsls	r3, r7, #1
 800785c:	4650      	mov	r0, sl
 800785e:	0b24      	lsrs	r4, r4, #12
 8007860:	0d5b      	lsrs	r3, r3, #21
 8007862:	0fff      	lsrs	r7, r7, #31
 8007864:	2b00      	cmp	r3, #0
 8007866:	d197      	bne.n	8007798 <__aeabi_ddiv+0x58>
 8007868:	4652      	mov	r2, sl
 800786a:	4322      	orrs	r2, r4
 800786c:	d055      	beq.n	800791a <__aeabi_ddiv+0x1da>
 800786e:	2c00      	cmp	r4, #0
 8007870:	d100      	bne.n	8007874 <__aeabi_ddiv+0x134>
 8007872:	e1ca      	b.n	8007c0a <__aeabi_ddiv+0x4ca>
 8007874:	0020      	movs	r0, r4
 8007876:	f001 f9f3 	bl	8008c60 <__clzsi2>
 800787a:	0002      	movs	r2, r0
 800787c:	3a0b      	subs	r2, #11
 800787e:	231d      	movs	r3, #29
 8007880:	0001      	movs	r1, r0
 8007882:	1a9b      	subs	r3, r3, r2
 8007884:	4652      	mov	r2, sl
 8007886:	3908      	subs	r1, #8
 8007888:	40da      	lsrs	r2, r3
 800788a:	408c      	lsls	r4, r1
 800788c:	4314      	orrs	r4, r2
 800788e:	4652      	mov	r2, sl
 8007890:	408a      	lsls	r2, r1
 8007892:	4b41      	ldr	r3, [pc, #260]	; (8007998 <__aeabi_ddiv+0x258>)
 8007894:	4458      	add	r0, fp
 8007896:	469b      	mov	fp, r3
 8007898:	4483      	add	fp, r0
 800789a:	2000      	movs	r0, #0
 800789c:	e78d      	b.n	80077ba <__aeabi_ddiv+0x7a>
 800789e:	464b      	mov	r3, r9
 80078a0:	4323      	orrs	r3, r4
 80078a2:	4698      	mov	r8, r3
 80078a4:	d140      	bne.n	8007928 <__aeabi_ddiv+0x1e8>
 80078a6:	2308      	movs	r3, #8
 80078a8:	4699      	mov	r9, r3
 80078aa:	3b06      	subs	r3, #6
 80078ac:	2500      	movs	r5, #0
 80078ae:	4683      	mov	fp, r0
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	e769      	b.n	8007788 <__aeabi_ddiv+0x48>
 80078b4:	46b2      	mov	sl, r6
 80078b6:	9b00      	ldr	r3, [sp, #0]
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d0a9      	beq.n	8007810 <__aeabi_ddiv+0xd0>
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d100      	bne.n	80078c2 <__aeabi_ddiv+0x182>
 80078c0:	e211      	b.n	8007ce6 <__aeabi_ddiv+0x5a6>
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d093      	beq.n	80077ee <__aeabi_ddiv+0xae>
 80078c6:	4a35      	ldr	r2, [pc, #212]	; (800799c <__aeabi_ddiv+0x25c>)
 80078c8:	445a      	add	r2, fp
 80078ca:	2a00      	cmp	r2, #0
 80078cc:	dc00      	bgt.n	80078d0 <__aeabi_ddiv+0x190>
 80078ce:	e13c      	b.n	8007b4a <__aeabi_ddiv+0x40a>
 80078d0:	076b      	lsls	r3, r5, #29
 80078d2:	d000      	beq.n	80078d6 <__aeabi_ddiv+0x196>
 80078d4:	e1a7      	b.n	8007c26 <__aeabi_ddiv+0x4e6>
 80078d6:	08ed      	lsrs	r5, r5, #3
 80078d8:	4643      	mov	r3, r8
 80078da:	01db      	lsls	r3, r3, #7
 80078dc:	d506      	bpl.n	80078ec <__aeabi_ddiv+0x1ac>
 80078de:	4642      	mov	r2, r8
 80078e0:	4b2f      	ldr	r3, [pc, #188]	; (80079a0 <__aeabi_ddiv+0x260>)
 80078e2:	401a      	ands	r2, r3
 80078e4:	4690      	mov	r8, r2
 80078e6:	2280      	movs	r2, #128	; 0x80
 80078e8:	00d2      	lsls	r2, r2, #3
 80078ea:	445a      	add	r2, fp
 80078ec:	4b2d      	ldr	r3, [pc, #180]	; (80079a4 <__aeabi_ddiv+0x264>)
 80078ee:	429a      	cmp	r2, r3
 80078f0:	dc8e      	bgt.n	8007810 <__aeabi_ddiv+0xd0>
 80078f2:	4643      	mov	r3, r8
 80078f4:	0552      	lsls	r2, r2, #21
 80078f6:	0758      	lsls	r0, r3, #29
 80078f8:	025c      	lsls	r4, r3, #9
 80078fa:	4305      	orrs	r5, r0
 80078fc:	0b24      	lsrs	r4, r4, #12
 80078fe:	0d53      	lsrs	r3, r2, #21
 8007900:	e778      	b.n	80077f4 <__aeabi_ddiv+0xb4>
 8007902:	46ba      	mov	sl, r7
 8007904:	46a0      	mov	r8, r4
 8007906:	0015      	movs	r5, r2
 8007908:	9000      	str	r0, [sp, #0]
 800790a:	e7d4      	b.n	80078b6 <__aeabi_ddiv+0x176>
 800790c:	464a      	mov	r2, r9
 800790e:	2303      	movs	r3, #3
 8007910:	431a      	orrs	r2, r3
 8007912:	4691      	mov	r9, r2
 8007914:	2003      	movs	r0, #3
 8007916:	4652      	mov	r2, sl
 8007918:	e74f      	b.n	80077ba <__aeabi_ddiv+0x7a>
 800791a:	4649      	mov	r1, r9
 800791c:	2301      	movs	r3, #1
 800791e:	4319      	orrs	r1, r3
 8007920:	4689      	mov	r9, r1
 8007922:	2400      	movs	r4, #0
 8007924:	2001      	movs	r0, #1
 8007926:	e748      	b.n	80077ba <__aeabi_ddiv+0x7a>
 8007928:	230c      	movs	r3, #12
 800792a:	4699      	mov	r9, r3
 800792c:	3b09      	subs	r3, #9
 800792e:	46a0      	mov	r8, r4
 8007930:	4683      	mov	fp, r0
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	e728      	b.n	8007788 <__aeabi_ddiv+0x48>
 8007936:	2304      	movs	r3, #4
 8007938:	4699      	mov	r9, r3
 800793a:	2300      	movs	r3, #0
 800793c:	469b      	mov	fp, r3
 800793e:	3301      	adds	r3, #1
 8007940:	2500      	movs	r5, #0
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	e720      	b.n	8007788 <__aeabi_ddiv+0x48>
 8007946:	2300      	movs	r3, #0
 8007948:	2480      	movs	r4, #128	; 0x80
 800794a:	469a      	mov	sl, r3
 800794c:	2500      	movs	r5, #0
 800794e:	4b0d      	ldr	r3, [pc, #52]	; (8007984 <__aeabi_ddiv+0x244>)
 8007950:	0324      	lsls	r4, r4, #12
 8007952:	e74f      	b.n	80077f4 <__aeabi_ddiv+0xb4>
 8007954:	2380      	movs	r3, #128	; 0x80
 8007956:	4641      	mov	r1, r8
 8007958:	031b      	lsls	r3, r3, #12
 800795a:	4219      	tst	r1, r3
 800795c:	d008      	beq.n	8007970 <__aeabi_ddiv+0x230>
 800795e:	421c      	tst	r4, r3
 8007960:	d106      	bne.n	8007970 <__aeabi_ddiv+0x230>
 8007962:	431c      	orrs	r4, r3
 8007964:	0324      	lsls	r4, r4, #12
 8007966:	46ba      	mov	sl, r7
 8007968:	0015      	movs	r5, r2
 800796a:	4b06      	ldr	r3, [pc, #24]	; (8007984 <__aeabi_ddiv+0x244>)
 800796c:	0b24      	lsrs	r4, r4, #12
 800796e:	e741      	b.n	80077f4 <__aeabi_ddiv+0xb4>
 8007970:	2480      	movs	r4, #128	; 0x80
 8007972:	4643      	mov	r3, r8
 8007974:	0324      	lsls	r4, r4, #12
 8007976:	431c      	orrs	r4, r3
 8007978:	0324      	lsls	r4, r4, #12
 800797a:	46b2      	mov	sl, r6
 800797c:	4b01      	ldr	r3, [pc, #4]	; (8007984 <__aeabi_ddiv+0x244>)
 800797e:	0b24      	lsrs	r4, r4, #12
 8007980:	e738      	b.n	80077f4 <__aeabi_ddiv+0xb4>
 8007982:	46c0      	nop			; (mov r8, r8)
 8007984:	000007ff 	.word	0x000007ff
 8007988:	fffffc01 	.word	0xfffffc01
 800798c:	08009690 	.word	0x08009690
 8007990:	fffff801 	.word	0xfffff801
 8007994:	fffffc0d 	.word	0xfffffc0d
 8007998:	000003f3 	.word	0x000003f3
 800799c:	000003ff 	.word	0x000003ff
 80079a0:	feffffff 	.word	0xfeffffff
 80079a4:	000007fe 	.word	0x000007fe
 80079a8:	4544      	cmp	r4, r8
 80079aa:	d200      	bcs.n	80079ae <__aeabi_ddiv+0x26e>
 80079ac:	e116      	b.n	8007bdc <__aeabi_ddiv+0x49c>
 80079ae:	d100      	bne.n	80079b2 <__aeabi_ddiv+0x272>
 80079b0:	e111      	b.n	8007bd6 <__aeabi_ddiv+0x496>
 80079b2:	2301      	movs	r3, #1
 80079b4:	425b      	negs	r3, r3
 80079b6:	469c      	mov	ip, r3
 80079b8:	002e      	movs	r6, r5
 80079ba:	4640      	mov	r0, r8
 80079bc:	2500      	movs	r5, #0
 80079be:	44e3      	add	fp, ip
 80079c0:	0223      	lsls	r3, r4, #8
 80079c2:	0e14      	lsrs	r4, r2, #24
 80079c4:	431c      	orrs	r4, r3
 80079c6:	0c1b      	lsrs	r3, r3, #16
 80079c8:	4699      	mov	r9, r3
 80079ca:	0423      	lsls	r3, r4, #16
 80079cc:	0c1f      	lsrs	r7, r3, #16
 80079ce:	0212      	lsls	r2, r2, #8
 80079d0:	4649      	mov	r1, r9
 80079d2:	9200      	str	r2, [sp, #0]
 80079d4:	9701      	str	r7, [sp, #4]
 80079d6:	f7ff fd67 	bl	80074a8 <__aeabi_uidivmod>
 80079da:	0002      	movs	r2, r0
 80079dc:	437a      	muls	r2, r7
 80079de:	040b      	lsls	r3, r1, #16
 80079e0:	0c31      	lsrs	r1, r6, #16
 80079e2:	4680      	mov	r8, r0
 80079e4:	4319      	orrs	r1, r3
 80079e6:	428a      	cmp	r2, r1
 80079e8:	d90b      	bls.n	8007a02 <__aeabi_ddiv+0x2c2>
 80079ea:	2301      	movs	r3, #1
 80079ec:	425b      	negs	r3, r3
 80079ee:	469c      	mov	ip, r3
 80079f0:	1909      	adds	r1, r1, r4
 80079f2:	44e0      	add	r8, ip
 80079f4:	428c      	cmp	r4, r1
 80079f6:	d804      	bhi.n	8007a02 <__aeabi_ddiv+0x2c2>
 80079f8:	428a      	cmp	r2, r1
 80079fa:	d902      	bls.n	8007a02 <__aeabi_ddiv+0x2c2>
 80079fc:	1e83      	subs	r3, r0, #2
 80079fe:	4698      	mov	r8, r3
 8007a00:	1909      	adds	r1, r1, r4
 8007a02:	1a88      	subs	r0, r1, r2
 8007a04:	4649      	mov	r1, r9
 8007a06:	f7ff fd4f 	bl	80074a8 <__aeabi_uidivmod>
 8007a0a:	0409      	lsls	r1, r1, #16
 8007a0c:	468c      	mov	ip, r1
 8007a0e:	0431      	lsls	r1, r6, #16
 8007a10:	4666      	mov	r6, ip
 8007a12:	9a01      	ldr	r2, [sp, #4]
 8007a14:	0c09      	lsrs	r1, r1, #16
 8007a16:	4342      	muls	r2, r0
 8007a18:	0003      	movs	r3, r0
 8007a1a:	4331      	orrs	r1, r6
 8007a1c:	428a      	cmp	r2, r1
 8007a1e:	d904      	bls.n	8007a2a <__aeabi_ddiv+0x2ea>
 8007a20:	1909      	adds	r1, r1, r4
 8007a22:	3b01      	subs	r3, #1
 8007a24:	428c      	cmp	r4, r1
 8007a26:	d800      	bhi.n	8007a2a <__aeabi_ddiv+0x2ea>
 8007a28:	e111      	b.n	8007c4e <__aeabi_ddiv+0x50e>
 8007a2a:	1a89      	subs	r1, r1, r2
 8007a2c:	4642      	mov	r2, r8
 8007a2e:	9e00      	ldr	r6, [sp, #0]
 8007a30:	0412      	lsls	r2, r2, #16
 8007a32:	431a      	orrs	r2, r3
 8007a34:	0c33      	lsrs	r3, r6, #16
 8007a36:	001f      	movs	r7, r3
 8007a38:	0c10      	lsrs	r0, r2, #16
 8007a3a:	4690      	mov	r8, r2
 8007a3c:	9302      	str	r3, [sp, #8]
 8007a3e:	0413      	lsls	r3, r2, #16
 8007a40:	0432      	lsls	r2, r6, #16
 8007a42:	0c16      	lsrs	r6, r2, #16
 8007a44:	0032      	movs	r2, r6
 8007a46:	0c1b      	lsrs	r3, r3, #16
 8007a48:	435a      	muls	r2, r3
 8007a4a:	9603      	str	r6, [sp, #12]
 8007a4c:	437b      	muls	r3, r7
 8007a4e:	4346      	muls	r6, r0
 8007a50:	4378      	muls	r0, r7
 8007a52:	0c17      	lsrs	r7, r2, #16
 8007a54:	46bc      	mov	ip, r7
 8007a56:	199b      	adds	r3, r3, r6
 8007a58:	4463      	add	r3, ip
 8007a5a:	429e      	cmp	r6, r3
 8007a5c:	d903      	bls.n	8007a66 <__aeabi_ddiv+0x326>
 8007a5e:	2680      	movs	r6, #128	; 0x80
 8007a60:	0276      	lsls	r6, r6, #9
 8007a62:	46b4      	mov	ip, r6
 8007a64:	4460      	add	r0, ip
 8007a66:	0c1e      	lsrs	r6, r3, #16
 8007a68:	1830      	adds	r0, r6, r0
 8007a6a:	0416      	lsls	r6, r2, #16
 8007a6c:	041b      	lsls	r3, r3, #16
 8007a6e:	0c36      	lsrs	r6, r6, #16
 8007a70:	199e      	adds	r6, r3, r6
 8007a72:	4281      	cmp	r1, r0
 8007a74:	d200      	bcs.n	8007a78 <__aeabi_ddiv+0x338>
 8007a76:	e09c      	b.n	8007bb2 <__aeabi_ddiv+0x472>
 8007a78:	d100      	bne.n	8007a7c <__aeabi_ddiv+0x33c>
 8007a7a:	e097      	b.n	8007bac <__aeabi_ddiv+0x46c>
 8007a7c:	1bae      	subs	r6, r5, r6
 8007a7e:	1a09      	subs	r1, r1, r0
 8007a80:	42b5      	cmp	r5, r6
 8007a82:	4180      	sbcs	r0, r0
 8007a84:	4240      	negs	r0, r0
 8007a86:	1a08      	subs	r0, r1, r0
 8007a88:	4284      	cmp	r4, r0
 8007a8a:	d100      	bne.n	8007a8e <__aeabi_ddiv+0x34e>
 8007a8c:	e111      	b.n	8007cb2 <__aeabi_ddiv+0x572>
 8007a8e:	4649      	mov	r1, r9
 8007a90:	f7ff fd0a 	bl	80074a8 <__aeabi_uidivmod>
 8007a94:	9a01      	ldr	r2, [sp, #4]
 8007a96:	040b      	lsls	r3, r1, #16
 8007a98:	4342      	muls	r2, r0
 8007a9a:	0c31      	lsrs	r1, r6, #16
 8007a9c:	0005      	movs	r5, r0
 8007a9e:	4319      	orrs	r1, r3
 8007aa0:	428a      	cmp	r2, r1
 8007aa2:	d907      	bls.n	8007ab4 <__aeabi_ddiv+0x374>
 8007aa4:	1909      	adds	r1, r1, r4
 8007aa6:	3d01      	subs	r5, #1
 8007aa8:	428c      	cmp	r4, r1
 8007aaa:	d803      	bhi.n	8007ab4 <__aeabi_ddiv+0x374>
 8007aac:	428a      	cmp	r2, r1
 8007aae:	d901      	bls.n	8007ab4 <__aeabi_ddiv+0x374>
 8007ab0:	1e85      	subs	r5, r0, #2
 8007ab2:	1909      	adds	r1, r1, r4
 8007ab4:	1a88      	subs	r0, r1, r2
 8007ab6:	4649      	mov	r1, r9
 8007ab8:	f7ff fcf6 	bl	80074a8 <__aeabi_uidivmod>
 8007abc:	0409      	lsls	r1, r1, #16
 8007abe:	468c      	mov	ip, r1
 8007ac0:	0431      	lsls	r1, r6, #16
 8007ac2:	4666      	mov	r6, ip
 8007ac4:	9a01      	ldr	r2, [sp, #4]
 8007ac6:	0c09      	lsrs	r1, r1, #16
 8007ac8:	4342      	muls	r2, r0
 8007aca:	0003      	movs	r3, r0
 8007acc:	4331      	orrs	r1, r6
 8007ace:	428a      	cmp	r2, r1
 8007ad0:	d907      	bls.n	8007ae2 <__aeabi_ddiv+0x3a2>
 8007ad2:	1909      	adds	r1, r1, r4
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	428c      	cmp	r4, r1
 8007ad8:	d803      	bhi.n	8007ae2 <__aeabi_ddiv+0x3a2>
 8007ada:	428a      	cmp	r2, r1
 8007adc:	d901      	bls.n	8007ae2 <__aeabi_ddiv+0x3a2>
 8007ade:	1e83      	subs	r3, r0, #2
 8007ae0:	1909      	adds	r1, r1, r4
 8007ae2:	9e03      	ldr	r6, [sp, #12]
 8007ae4:	1a89      	subs	r1, r1, r2
 8007ae6:	0032      	movs	r2, r6
 8007ae8:	042d      	lsls	r5, r5, #16
 8007aea:	431d      	orrs	r5, r3
 8007aec:	9f02      	ldr	r7, [sp, #8]
 8007aee:	042b      	lsls	r3, r5, #16
 8007af0:	0c1b      	lsrs	r3, r3, #16
 8007af2:	435a      	muls	r2, r3
 8007af4:	437b      	muls	r3, r7
 8007af6:	469c      	mov	ip, r3
 8007af8:	0c28      	lsrs	r0, r5, #16
 8007afa:	4346      	muls	r6, r0
 8007afc:	0c13      	lsrs	r3, r2, #16
 8007afe:	44b4      	add	ip, r6
 8007b00:	4463      	add	r3, ip
 8007b02:	4378      	muls	r0, r7
 8007b04:	429e      	cmp	r6, r3
 8007b06:	d903      	bls.n	8007b10 <__aeabi_ddiv+0x3d0>
 8007b08:	2680      	movs	r6, #128	; 0x80
 8007b0a:	0276      	lsls	r6, r6, #9
 8007b0c:	46b4      	mov	ip, r6
 8007b0e:	4460      	add	r0, ip
 8007b10:	0c1e      	lsrs	r6, r3, #16
 8007b12:	0412      	lsls	r2, r2, #16
 8007b14:	041b      	lsls	r3, r3, #16
 8007b16:	0c12      	lsrs	r2, r2, #16
 8007b18:	1830      	adds	r0, r6, r0
 8007b1a:	189b      	adds	r3, r3, r2
 8007b1c:	4281      	cmp	r1, r0
 8007b1e:	d306      	bcc.n	8007b2e <__aeabi_ddiv+0x3ee>
 8007b20:	d002      	beq.n	8007b28 <__aeabi_ddiv+0x3e8>
 8007b22:	2301      	movs	r3, #1
 8007b24:	431d      	orrs	r5, r3
 8007b26:	e6ce      	b.n	80078c6 <__aeabi_ddiv+0x186>
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d100      	bne.n	8007b2e <__aeabi_ddiv+0x3ee>
 8007b2c:	e6cb      	b.n	80078c6 <__aeabi_ddiv+0x186>
 8007b2e:	1861      	adds	r1, r4, r1
 8007b30:	1e6e      	subs	r6, r5, #1
 8007b32:	42a1      	cmp	r1, r4
 8007b34:	d200      	bcs.n	8007b38 <__aeabi_ddiv+0x3f8>
 8007b36:	e0a4      	b.n	8007c82 <__aeabi_ddiv+0x542>
 8007b38:	4281      	cmp	r1, r0
 8007b3a:	d200      	bcs.n	8007b3e <__aeabi_ddiv+0x3fe>
 8007b3c:	e0c9      	b.n	8007cd2 <__aeabi_ddiv+0x592>
 8007b3e:	d100      	bne.n	8007b42 <__aeabi_ddiv+0x402>
 8007b40:	e0d9      	b.n	8007cf6 <__aeabi_ddiv+0x5b6>
 8007b42:	0035      	movs	r5, r6
 8007b44:	e7ed      	b.n	8007b22 <__aeabi_ddiv+0x3e2>
 8007b46:	2501      	movs	r5, #1
 8007b48:	426d      	negs	r5, r5
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	1a89      	subs	r1, r1, r2
 8007b4e:	2938      	cmp	r1, #56	; 0x38
 8007b50:	dd00      	ble.n	8007b54 <__aeabi_ddiv+0x414>
 8007b52:	e64c      	b.n	80077ee <__aeabi_ddiv+0xae>
 8007b54:	291f      	cmp	r1, #31
 8007b56:	dc00      	bgt.n	8007b5a <__aeabi_ddiv+0x41a>
 8007b58:	e07f      	b.n	8007c5a <__aeabi_ddiv+0x51a>
 8007b5a:	231f      	movs	r3, #31
 8007b5c:	425b      	negs	r3, r3
 8007b5e:	1a9a      	subs	r2, r3, r2
 8007b60:	4643      	mov	r3, r8
 8007b62:	40d3      	lsrs	r3, r2
 8007b64:	2920      	cmp	r1, #32
 8007b66:	d004      	beq.n	8007b72 <__aeabi_ddiv+0x432>
 8007b68:	4644      	mov	r4, r8
 8007b6a:	4a65      	ldr	r2, [pc, #404]	; (8007d00 <__aeabi_ddiv+0x5c0>)
 8007b6c:	445a      	add	r2, fp
 8007b6e:	4094      	lsls	r4, r2
 8007b70:	4325      	orrs	r5, r4
 8007b72:	1e6a      	subs	r2, r5, #1
 8007b74:	4195      	sbcs	r5, r2
 8007b76:	2207      	movs	r2, #7
 8007b78:	432b      	orrs	r3, r5
 8007b7a:	0015      	movs	r5, r2
 8007b7c:	2400      	movs	r4, #0
 8007b7e:	401d      	ands	r5, r3
 8007b80:	421a      	tst	r2, r3
 8007b82:	d100      	bne.n	8007b86 <__aeabi_ddiv+0x446>
 8007b84:	e0a1      	b.n	8007cca <__aeabi_ddiv+0x58a>
 8007b86:	220f      	movs	r2, #15
 8007b88:	2400      	movs	r4, #0
 8007b8a:	401a      	ands	r2, r3
 8007b8c:	2a04      	cmp	r2, #4
 8007b8e:	d100      	bne.n	8007b92 <__aeabi_ddiv+0x452>
 8007b90:	e098      	b.n	8007cc4 <__aeabi_ddiv+0x584>
 8007b92:	1d1a      	adds	r2, r3, #4
 8007b94:	429a      	cmp	r2, r3
 8007b96:	419b      	sbcs	r3, r3
 8007b98:	425b      	negs	r3, r3
 8007b9a:	18e4      	adds	r4, r4, r3
 8007b9c:	0013      	movs	r3, r2
 8007b9e:	0222      	lsls	r2, r4, #8
 8007ba0:	d400      	bmi.n	8007ba4 <__aeabi_ddiv+0x464>
 8007ba2:	e08f      	b.n	8007cc4 <__aeabi_ddiv+0x584>
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	2400      	movs	r4, #0
 8007ba8:	2500      	movs	r5, #0
 8007baa:	e623      	b.n	80077f4 <__aeabi_ddiv+0xb4>
 8007bac:	42b5      	cmp	r5, r6
 8007bae:	d300      	bcc.n	8007bb2 <__aeabi_ddiv+0x472>
 8007bb0:	e764      	b.n	8007a7c <__aeabi_ddiv+0x33c>
 8007bb2:	4643      	mov	r3, r8
 8007bb4:	1e5a      	subs	r2, r3, #1
 8007bb6:	9b00      	ldr	r3, [sp, #0]
 8007bb8:	469c      	mov	ip, r3
 8007bba:	4465      	add	r5, ip
 8007bbc:	001f      	movs	r7, r3
 8007bbe:	429d      	cmp	r5, r3
 8007bc0:	419b      	sbcs	r3, r3
 8007bc2:	425b      	negs	r3, r3
 8007bc4:	191b      	adds	r3, r3, r4
 8007bc6:	18c9      	adds	r1, r1, r3
 8007bc8:	428c      	cmp	r4, r1
 8007bca:	d23a      	bcs.n	8007c42 <__aeabi_ddiv+0x502>
 8007bcc:	4288      	cmp	r0, r1
 8007bce:	d863      	bhi.n	8007c98 <__aeabi_ddiv+0x558>
 8007bd0:	d060      	beq.n	8007c94 <__aeabi_ddiv+0x554>
 8007bd2:	4690      	mov	r8, r2
 8007bd4:	e752      	b.n	8007a7c <__aeabi_ddiv+0x33c>
 8007bd6:	42aa      	cmp	r2, r5
 8007bd8:	d900      	bls.n	8007bdc <__aeabi_ddiv+0x49c>
 8007bda:	e6ea      	b.n	80079b2 <__aeabi_ddiv+0x272>
 8007bdc:	4643      	mov	r3, r8
 8007bde:	07de      	lsls	r6, r3, #31
 8007be0:	0858      	lsrs	r0, r3, #1
 8007be2:	086b      	lsrs	r3, r5, #1
 8007be4:	431e      	orrs	r6, r3
 8007be6:	07ed      	lsls	r5, r5, #31
 8007be8:	e6ea      	b.n	80079c0 <__aeabi_ddiv+0x280>
 8007bea:	4648      	mov	r0, r9
 8007bec:	f001 f838 	bl	8008c60 <__clzsi2>
 8007bf0:	0001      	movs	r1, r0
 8007bf2:	0002      	movs	r2, r0
 8007bf4:	3115      	adds	r1, #21
 8007bf6:	3220      	adds	r2, #32
 8007bf8:	291c      	cmp	r1, #28
 8007bfa:	dc00      	bgt.n	8007bfe <__aeabi_ddiv+0x4be>
 8007bfc:	e61a      	b.n	8007834 <__aeabi_ddiv+0xf4>
 8007bfe:	464b      	mov	r3, r9
 8007c00:	3808      	subs	r0, #8
 8007c02:	4083      	lsls	r3, r0
 8007c04:	2500      	movs	r5, #0
 8007c06:	4698      	mov	r8, r3
 8007c08:	e620      	b.n	800784c <__aeabi_ddiv+0x10c>
 8007c0a:	f001 f829 	bl	8008c60 <__clzsi2>
 8007c0e:	0003      	movs	r3, r0
 8007c10:	001a      	movs	r2, r3
 8007c12:	3215      	adds	r2, #21
 8007c14:	3020      	adds	r0, #32
 8007c16:	2a1c      	cmp	r2, #28
 8007c18:	dc00      	bgt.n	8007c1c <__aeabi_ddiv+0x4dc>
 8007c1a:	e630      	b.n	800787e <__aeabi_ddiv+0x13e>
 8007c1c:	4654      	mov	r4, sl
 8007c1e:	3b08      	subs	r3, #8
 8007c20:	2200      	movs	r2, #0
 8007c22:	409c      	lsls	r4, r3
 8007c24:	e635      	b.n	8007892 <__aeabi_ddiv+0x152>
 8007c26:	230f      	movs	r3, #15
 8007c28:	402b      	ands	r3, r5
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	d100      	bne.n	8007c30 <__aeabi_ddiv+0x4f0>
 8007c2e:	e652      	b.n	80078d6 <__aeabi_ddiv+0x196>
 8007c30:	2305      	movs	r3, #5
 8007c32:	425b      	negs	r3, r3
 8007c34:	42ab      	cmp	r3, r5
 8007c36:	419b      	sbcs	r3, r3
 8007c38:	3504      	adds	r5, #4
 8007c3a:	425b      	negs	r3, r3
 8007c3c:	08ed      	lsrs	r5, r5, #3
 8007c3e:	4498      	add	r8, r3
 8007c40:	e64a      	b.n	80078d8 <__aeabi_ddiv+0x198>
 8007c42:	428c      	cmp	r4, r1
 8007c44:	d1c5      	bne.n	8007bd2 <__aeabi_ddiv+0x492>
 8007c46:	42af      	cmp	r7, r5
 8007c48:	d9c0      	bls.n	8007bcc <__aeabi_ddiv+0x48c>
 8007c4a:	4690      	mov	r8, r2
 8007c4c:	e716      	b.n	8007a7c <__aeabi_ddiv+0x33c>
 8007c4e:	428a      	cmp	r2, r1
 8007c50:	d800      	bhi.n	8007c54 <__aeabi_ddiv+0x514>
 8007c52:	e6ea      	b.n	8007a2a <__aeabi_ddiv+0x2ea>
 8007c54:	1e83      	subs	r3, r0, #2
 8007c56:	1909      	adds	r1, r1, r4
 8007c58:	e6e7      	b.n	8007a2a <__aeabi_ddiv+0x2ea>
 8007c5a:	4a2a      	ldr	r2, [pc, #168]	; (8007d04 <__aeabi_ddiv+0x5c4>)
 8007c5c:	0028      	movs	r0, r5
 8007c5e:	445a      	add	r2, fp
 8007c60:	4643      	mov	r3, r8
 8007c62:	4095      	lsls	r5, r2
 8007c64:	4093      	lsls	r3, r2
 8007c66:	40c8      	lsrs	r0, r1
 8007c68:	1e6a      	subs	r2, r5, #1
 8007c6a:	4195      	sbcs	r5, r2
 8007c6c:	4644      	mov	r4, r8
 8007c6e:	4303      	orrs	r3, r0
 8007c70:	432b      	orrs	r3, r5
 8007c72:	40cc      	lsrs	r4, r1
 8007c74:	075a      	lsls	r2, r3, #29
 8007c76:	d092      	beq.n	8007b9e <__aeabi_ddiv+0x45e>
 8007c78:	220f      	movs	r2, #15
 8007c7a:	401a      	ands	r2, r3
 8007c7c:	2a04      	cmp	r2, #4
 8007c7e:	d188      	bne.n	8007b92 <__aeabi_ddiv+0x452>
 8007c80:	e78d      	b.n	8007b9e <__aeabi_ddiv+0x45e>
 8007c82:	0035      	movs	r5, r6
 8007c84:	4281      	cmp	r1, r0
 8007c86:	d000      	beq.n	8007c8a <__aeabi_ddiv+0x54a>
 8007c88:	e74b      	b.n	8007b22 <__aeabi_ddiv+0x3e2>
 8007c8a:	9a00      	ldr	r2, [sp, #0]
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d000      	beq.n	8007c92 <__aeabi_ddiv+0x552>
 8007c90:	e747      	b.n	8007b22 <__aeabi_ddiv+0x3e2>
 8007c92:	e618      	b.n	80078c6 <__aeabi_ddiv+0x186>
 8007c94:	42ae      	cmp	r6, r5
 8007c96:	d99c      	bls.n	8007bd2 <__aeabi_ddiv+0x492>
 8007c98:	2302      	movs	r3, #2
 8007c9a:	425b      	negs	r3, r3
 8007c9c:	469c      	mov	ip, r3
 8007c9e:	9b00      	ldr	r3, [sp, #0]
 8007ca0:	44e0      	add	r8, ip
 8007ca2:	469c      	mov	ip, r3
 8007ca4:	4465      	add	r5, ip
 8007ca6:	429d      	cmp	r5, r3
 8007ca8:	419b      	sbcs	r3, r3
 8007caa:	425b      	negs	r3, r3
 8007cac:	191b      	adds	r3, r3, r4
 8007cae:	18c9      	adds	r1, r1, r3
 8007cb0:	e6e4      	b.n	8007a7c <__aeabi_ddiv+0x33c>
 8007cb2:	4a15      	ldr	r2, [pc, #84]	; (8007d08 <__aeabi_ddiv+0x5c8>)
 8007cb4:	445a      	add	r2, fp
 8007cb6:	2a00      	cmp	r2, #0
 8007cb8:	dc00      	bgt.n	8007cbc <__aeabi_ddiv+0x57c>
 8007cba:	e744      	b.n	8007b46 <__aeabi_ddiv+0x406>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	2500      	movs	r5, #0
 8007cc0:	4498      	add	r8, r3
 8007cc2:	e609      	b.n	80078d8 <__aeabi_ddiv+0x198>
 8007cc4:	0765      	lsls	r5, r4, #29
 8007cc6:	0264      	lsls	r4, r4, #9
 8007cc8:	0b24      	lsrs	r4, r4, #12
 8007cca:	08db      	lsrs	r3, r3, #3
 8007ccc:	431d      	orrs	r5, r3
 8007cce:	2300      	movs	r3, #0
 8007cd0:	e590      	b.n	80077f4 <__aeabi_ddiv+0xb4>
 8007cd2:	9e00      	ldr	r6, [sp, #0]
 8007cd4:	3d02      	subs	r5, #2
 8007cd6:	0072      	lsls	r2, r6, #1
 8007cd8:	42b2      	cmp	r2, r6
 8007cda:	41bf      	sbcs	r7, r7
 8007cdc:	427f      	negs	r7, r7
 8007cde:	193c      	adds	r4, r7, r4
 8007ce0:	1909      	adds	r1, r1, r4
 8007ce2:	9200      	str	r2, [sp, #0]
 8007ce4:	e7ce      	b.n	8007c84 <__aeabi_ddiv+0x544>
 8007ce6:	2480      	movs	r4, #128	; 0x80
 8007ce8:	4643      	mov	r3, r8
 8007cea:	0324      	lsls	r4, r4, #12
 8007cec:	431c      	orrs	r4, r3
 8007cee:	0324      	lsls	r4, r4, #12
 8007cf0:	4b06      	ldr	r3, [pc, #24]	; (8007d0c <__aeabi_ddiv+0x5cc>)
 8007cf2:	0b24      	lsrs	r4, r4, #12
 8007cf4:	e57e      	b.n	80077f4 <__aeabi_ddiv+0xb4>
 8007cf6:	9a00      	ldr	r2, [sp, #0]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d3ea      	bcc.n	8007cd2 <__aeabi_ddiv+0x592>
 8007cfc:	0035      	movs	r5, r6
 8007cfe:	e7c4      	b.n	8007c8a <__aeabi_ddiv+0x54a>
 8007d00:	0000043e 	.word	0x0000043e
 8007d04:	0000041e 	.word	0x0000041e
 8007d08:	000003ff 	.word	0x000003ff
 8007d0c:	000007ff 	.word	0x000007ff

08007d10 <__eqdf2>:
 8007d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d12:	464f      	mov	r7, r9
 8007d14:	4646      	mov	r6, r8
 8007d16:	46d6      	mov	lr, sl
 8007d18:	4694      	mov	ip, r2
 8007d1a:	4691      	mov	r9, r2
 8007d1c:	031a      	lsls	r2, r3, #12
 8007d1e:	0b12      	lsrs	r2, r2, #12
 8007d20:	4d18      	ldr	r5, [pc, #96]	; (8007d84 <__eqdf2+0x74>)
 8007d22:	b5c0      	push	{r6, r7, lr}
 8007d24:	004c      	lsls	r4, r1, #1
 8007d26:	030f      	lsls	r7, r1, #12
 8007d28:	4692      	mov	sl, r2
 8007d2a:	005a      	lsls	r2, r3, #1
 8007d2c:	0006      	movs	r6, r0
 8007d2e:	4680      	mov	r8, r0
 8007d30:	0b3f      	lsrs	r7, r7, #12
 8007d32:	2001      	movs	r0, #1
 8007d34:	0d64      	lsrs	r4, r4, #21
 8007d36:	0fc9      	lsrs	r1, r1, #31
 8007d38:	0d52      	lsrs	r2, r2, #21
 8007d3a:	0fdb      	lsrs	r3, r3, #31
 8007d3c:	42ac      	cmp	r4, r5
 8007d3e:	d00a      	beq.n	8007d56 <__eqdf2+0x46>
 8007d40:	42aa      	cmp	r2, r5
 8007d42:	d003      	beq.n	8007d4c <__eqdf2+0x3c>
 8007d44:	4294      	cmp	r4, r2
 8007d46:	d101      	bne.n	8007d4c <__eqdf2+0x3c>
 8007d48:	4557      	cmp	r7, sl
 8007d4a:	d00d      	beq.n	8007d68 <__eqdf2+0x58>
 8007d4c:	bce0      	pop	{r5, r6, r7}
 8007d4e:	46ba      	mov	sl, r7
 8007d50:	46b1      	mov	r9, r6
 8007d52:	46a8      	mov	r8, r5
 8007d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d56:	003d      	movs	r5, r7
 8007d58:	4335      	orrs	r5, r6
 8007d5a:	d1f7      	bne.n	8007d4c <__eqdf2+0x3c>
 8007d5c:	42a2      	cmp	r2, r4
 8007d5e:	d1f5      	bne.n	8007d4c <__eqdf2+0x3c>
 8007d60:	4652      	mov	r2, sl
 8007d62:	4665      	mov	r5, ip
 8007d64:	432a      	orrs	r2, r5
 8007d66:	d1f1      	bne.n	8007d4c <__eqdf2+0x3c>
 8007d68:	2001      	movs	r0, #1
 8007d6a:	45c8      	cmp	r8, r9
 8007d6c:	d1ee      	bne.n	8007d4c <__eqdf2+0x3c>
 8007d6e:	4299      	cmp	r1, r3
 8007d70:	d006      	beq.n	8007d80 <__eqdf2+0x70>
 8007d72:	2c00      	cmp	r4, #0
 8007d74:	d1ea      	bne.n	8007d4c <__eqdf2+0x3c>
 8007d76:	433e      	orrs	r6, r7
 8007d78:	0030      	movs	r0, r6
 8007d7a:	1e46      	subs	r6, r0, #1
 8007d7c:	41b0      	sbcs	r0, r6
 8007d7e:	e7e5      	b.n	8007d4c <__eqdf2+0x3c>
 8007d80:	2000      	movs	r0, #0
 8007d82:	e7e3      	b.n	8007d4c <__eqdf2+0x3c>
 8007d84:	000007ff 	.word	0x000007ff

08007d88 <__gedf2>:
 8007d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d8a:	464e      	mov	r6, r9
 8007d8c:	4645      	mov	r5, r8
 8007d8e:	4657      	mov	r7, sl
 8007d90:	46de      	mov	lr, fp
 8007d92:	0004      	movs	r4, r0
 8007d94:	0018      	movs	r0, r3
 8007d96:	b5e0      	push	{r5, r6, r7, lr}
 8007d98:	0016      	movs	r6, r2
 8007d9a:	031b      	lsls	r3, r3, #12
 8007d9c:	0b1b      	lsrs	r3, r3, #12
 8007d9e:	4d32      	ldr	r5, [pc, #200]	; (8007e68 <__gedf2+0xe0>)
 8007da0:	030f      	lsls	r7, r1, #12
 8007da2:	004a      	lsls	r2, r1, #1
 8007da4:	4699      	mov	r9, r3
 8007da6:	0043      	lsls	r3, r0, #1
 8007da8:	46a4      	mov	ip, r4
 8007daa:	46b0      	mov	r8, r6
 8007dac:	0b3f      	lsrs	r7, r7, #12
 8007dae:	0d52      	lsrs	r2, r2, #21
 8007db0:	0fc9      	lsrs	r1, r1, #31
 8007db2:	0d5b      	lsrs	r3, r3, #21
 8007db4:	0fc0      	lsrs	r0, r0, #31
 8007db6:	42aa      	cmp	r2, r5
 8007db8:	d029      	beq.n	8007e0e <__gedf2+0x86>
 8007dba:	42ab      	cmp	r3, r5
 8007dbc:	d018      	beq.n	8007df0 <__gedf2+0x68>
 8007dbe:	2a00      	cmp	r2, #0
 8007dc0:	d12a      	bne.n	8007e18 <__gedf2+0x90>
 8007dc2:	433c      	orrs	r4, r7
 8007dc4:	46a3      	mov	fp, r4
 8007dc6:	4265      	negs	r5, r4
 8007dc8:	4165      	adcs	r5, r4
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d102      	bne.n	8007dd4 <__gedf2+0x4c>
 8007dce:	464c      	mov	r4, r9
 8007dd0:	4326      	orrs	r6, r4
 8007dd2:	d027      	beq.n	8007e24 <__gedf2+0x9c>
 8007dd4:	2d00      	cmp	r5, #0
 8007dd6:	d115      	bne.n	8007e04 <__gedf2+0x7c>
 8007dd8:	4281      	cmp	r1, r0
 8007dda:	d028      	beq.n	8007e2e <__gedf2+0xa6>
 8007ddc:	2002      	movs	r0, #2
 8007dde:	3901      	subs	r1, #1
 8007de0:	4008      	ands	r0, r1
 8007de2:	3801      	subs	r0, #1
 8007de4:	bcf0      	pop	{r4, r5, r6, r7}
 8007de6:	46bb      	mov	fp, r7
 8007de8:	46b2      	mov	sl, r6
 8007dea:	46a9      	mov	r9, r5
 8007dec:	46a0      	mov	r8, r4
 8007dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007df0:	464d      	mov	r5, r9
 8007df2:	432e      	orrs	r6, r5
 8007df4:	d12f      	bne.n	8007e56 <__gedf2+0xce>
 8007df6:	2a00      	cmp	r2, #0
 8007df8:	d1ee      	bne.n	8007dd8 <__gedf2+0x50>
 8007dfa:	433c      	orrs	r4, r7
 8007dfc:	4265      	negs	r5, r4
 8007dfe:	4165      	adcs	r5, r4
 8007e00:	2d00      	cmp	r5, #0
 8007e02:	d0e9      	beq.n	8007dd8 <__gedf2+0x50>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d1ed      	bne.n	8007de4 <__gedf2+0x5c>
 8007e08:	2001      	movs	r0, #1
 8007e0a:	4240      	negs	r0, r0
 8007e0c:	e7ea      	b.n	8007de4 <__gedf2+0x5c>
 8007e0e:	003d      	movs	r5, r7
 8007e10:	4325      	orrs	r5, r4
 8007e12:	d120      	bne.n	8007e56 <__gedf2+0xce>
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d0eb      	beq.n	8007df0 <__gedf2+0x68>
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1dd      	bne.n	8007dd8 <__gedf2+0x50>
 8007e1c:	464c      	mov	r4, r9
 8007e1e:	4326      	orrs	r6, r4
 8007e20:	d1da      	bne.n	8007dd8 <__gedf2+0x50>
 8007e22:	e7db      	b.n	8007ddc <__gedf2+0x54>
 8007e24:	465b      	mov	r3, fp
 8007e26:	2000      	movs	r0, #0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0db      	beq.n	8007de4 <__gedf2+0x5c>
 8007e2c:	e7d6      	b.n	8007ddc <__gedf2+0x54>
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	dc0a      	bgt.n	8007e48 <__gedf2+0xc0>
 8007e32:	dbe7      	blt.n	8007e04 <__gedf2+0x7c>
 8007e34:	454f      	cmp	r7, r9
 8007e36:	d8d1      	bhi.n	8007ddc <__gedf2+0x54>
 8007e38:	d010      	beq.n	8007e5c <__gedf2+0xd4>
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	454f      	cmp	r7, r9
 8007e3e:	d2d1      	bcs.n	8007de4 <__gedf2+0x5c>
 8007e40:	2900      	cmp	r1, #0
 8007e42:	d0e1      	beq.n	8007e08 <__gedf2+0x80>
 8007e44:	0008      	movs	r0, r1
 8007e46:	e7cd      	b.n	8007de4 <__gedf2+0x5c>
 8007e48:	4243      	negs	r3, r0
 8007e4a:	4158      	adcs	r0, r3
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	4240      	negs	r0, r0
 8007e50:	4018      	ands	r0, r3
 8007e52:	3801      	subs	r0, #1
 8007e54:	e7c6      	b.n	8007de4 <__gedf2+0x5c>
 8007e56:	2002      	movs	r0, #2
 8007e58:	4240      	negs	r0, r0
 8007e5a:	e7c3      	b.n	8007de4 <__gedf2+0x5c>
 8007e5c:	45c4      	cmp	ip, r8
 8007e5e:	d8bd      	bhi.n	8007ddc <__gedf2+0x54>
 8007e60:	2000      	movs	r0, #0
 8007e62:	45c4      	cmp	ip, r8
 8007e64:	d2be      	bcs.n	8007de4 <__gedf2+0x5c>
 8007e66:	e7eb      	b.n	8007e40 <__gedf2+0xb8>
 8007e68:	000007ff 	.word	0x000007ff

08007e6c <__ledf2>:
 8007e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e6e:	464e      	mov	r6, r9
 8007e70:	4645      	mov	r5, r8
 8007e72:	4657      	mov	r7, sl
 8007e74:	46de      	mov	lr, fp
 8007e76:	0004      	movs	r4, r0
 8007e78:	0018      	movs	r0, r3
 8007e7a:	b5e0      	push	{r5, r6, r7, lr}
 8007e7c:	0016      	movs	r6, r2
 8007e7e:	031b      	lsls	r3, r3, #12
 8007e80:	0b1b      	lsrs	r3, r3, #12
 8007e82:	4d31      	ldr	r5, [pc, #196]	; (8007f48 <__ledf2+0xdc>)
 8007e84:	030f      	lsls	r7, r1, #12
 8007e86:	004a      	lsls	r2, r1, #1
 8007e88:	4699      	mov	r9, r3
 8007e8a:	0043      	lsls	r3, r0, #1
 8007e8c:	46a4      	mov	ip, r4
 8007e8e:	46b0      	mov	r8, r6
 8007e90:	0b3f      	lsrs	r7, r7, #12
 8007e92:	0d52      	lsrs	r2, r2, #21
 8007e94:	0fc9      	lsrs	r1, r1, #31
 8007e96:	0d5b      	lsrs	r3, r3, #21
 8007e98:	0fc0      	lsrs	r0, r0, #31
 8007e9a:	42aa      	cmp	r2, r5
 8007e9c:	d011      	beq.n	8007ec2 <__ledf2+0x56>
 8007e9e:	42ab      	cmp	r3, r5
 8007ea0:	d014      	beq.n	8007ecc <__ledf2+0x60>
 8007ea2:	2a00      	cmp	r2, #0
 8007ea4:	d12f      	bne.n	8007f06 <__ledf2+0x9a>
 8007ea6:	433c      	orrs	r4, r7
 8007ea8:	46a3      	mov	fp, r4
 8007eaa:	4265      	negs	r5, r4
 8007eac:	4165      	adcs	r5, r4
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d114      	bne.n	8007edc <__ledf2+0x70>
 8007eb2:	464c      	mov	r4, r9
 8007eb4:	4326      	orrs	r6, r4
 8007eb6:	d111      	bne.n	8007edc <__ledf2+0x70>
 8007eb8:	465b      	mov	r3, fp
 8007eba:	2000      	movs	r0, #0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d017      	beq.n	8007ef0 <__ledf2+0x84>
 8007ec0:	e010      	b.n	8007ee4 <__ledf2+0x78>
 8007ec2:	003d      	movs	r5, r7
 8007ec4:	4325      	orrs	r5, r4
 8007ec6:	d112      	bne.n	8007eee <__ledf2+0x82>
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d11c      	bne.n	8007f06 <__ledf2+0x9a>
 8007ecc:	464d      	mov	r5, r9
 8007ece:	432e      	orrs	r6, r5
 8007ed0:	d10d      	bne.n	8007eee <__ledf2+0x82>
 8007ed2:	2a00      	cmp	r2, #0
 8007ed4:	d104      	bne.n	8007ee0 <__ledf2+0x74>
 8007ed6:	433c      	orrs	r4, r7
 8007ed8:	4265      	negs	r5, r4
 8007eda:	4165      	adcs	r5, r4
 8007edc:	2d00      	cmp	r5, #0
 8007ede:	d10d      	bne.n	8007efc <__ledf2+0x90>
 8007ee0:	4281      	cmp	r1, r0
 8007ee2:	d016      	beq.n	8007f12 <__ledf2+0xa6>
 8007ee4:	2002      	movs	r0, #2
 8007ee6:	3901      	subs	r1, #1
 8007ee8:	4008      	ands	r0, r1
 8007eea:	3801      	subs	r0, #1
 8007eec:	e000      	b.n	8007ef0 <__ledf2+0x84>
 8007eee:	2002      	movs	r0, #2
 8007ef0:	bcf0      	pop	{r4, r5, r6, r7}
 8007ef2:	46bb      	mov	fp, r7
 8007ef4:	46b2      	mov	sl, r6
 8007ef6:	46a9      	mov	r9, r5
 8007ef8:	46a0      	mov	r8, r4
 8007efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d1f7      	bne.n	8007ef0 <__ledf2+0x84>
 8007f00:	2001      	movs	r0, #1
 8007f02:	4240      	negs	r0, r0
 8007f04:	e7f4      	b.n	8007ef0 <__ledf2+0x84>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1ea      	bne.n	8007ee0 <__ledf2+0x74>
 8007f0a:	464c      	mov	r4, r9
 8007f0c:	4326      	orrs	r6, r4
 8007f0e:	d1e7      	bne.n	8007ee0 <__ledf2+0x74>
 8007f10:	e7e8      	b.n	8007ee4 <__ledf2+0x78>
 8007f12:	429a      	cmp	r2, r3
 8007f14:	dd06      	ble.n	8007f24 <__ledf2+0xb8>
 8007f16:	4243      	negs	r3, r0
 8007f18:	4158      	adcs	r0, r3
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	4240      	negs	r0, r0
 8007f1e:	4018      	ands	r0, r3
 8007f20:	3801      	subs	r0, #1
 8007f22:	e7e5      	b.n	8007ef0 <__ledf2+0x84>
 8007f24:	429a      	cmp	r2, r3
 8007f26:	dbe9      	blt.n	8007efc <__ledf2+0x90>
 8007f28:	454f      	cmp	r7, r9
 8007f2a:	d8db      	bhi.n	8007ee4 <__ledf2+0x78>
 8007f2c:	d006      	beq.n	8007f3c <__ledf2+0xd0>
 8007f2e:	2000      	movs	r0, #0
 8007f30:	454f      	cmp	r7, r9
 8007f32:	d2dd      	bcs.n	8007ef0 <__ledf2+0x84>
 8007f34:	2900      	cmp	r1, #0
 8007f36:	d0e3      	beq.n	8007f00 <__ledf2+0x94>
 8007f38:	0008      	movs	r0, r1
 8007f3a:	e7d9      	b.n	8007ef0 <__ledf2+0x84>
 8007f3c:	45c4      	cmp	ip, r8
 8007f3e:	d8d1      	bhi.n	8007ee4 <__ledf2+0x78>
 8007f40:	2000      	movs	r0, #0
 8007f42:	45c4      	cmp	ip, r8
 8007f44:	d2d4      	bcs.n	8007ef0 <__ledf2+0x84>
 8007f46:	e7f5      	b.n	8007f34 <__ledf2+0xc8>
 8007f48:	000007ff 	.word	0x000007ff

08007f4c <__aeabi_dmul>:
 8007f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f4e:	4657      	mov	r7, sl
 8007f50:	464e      	mov	r6, r9
 8007f52:	4645      	mov	r5, r8
 8007f54:	46de      	mov	lr, fp
 8007f56:	b5e0      	push	{r5, r6, r7, lr}
 8007f58:	4698      	mov	r8, r3
 8007f5a:	030c      	lsls	r4, r1, #12
 8007f5c:	004b      	lsls	r3, r1, #1
 8007f5e:	0006      	movs	r6, r0
 8007f60:	4692      	mov	sl, r2
 8007f62:	b087      	sub	sp, #28
 8007f64:	0b24      	lsrs	r4, r4, #12
 8007f66:	0d5b      	lsrs	r3, r3, #21
 8007f68:	0fcf      	lsrs	r7, r1, #31
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d06c      	beq.n	8008048 <__aeabi_dmul+0xfc>
 8007f6e:	4add      	ldr	r2, [pc, #884]	; (80082e4 <__aeabi_dmul+0x398>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d100      	bne.n	8007f76 <__aeabi_dmul+0x2a>
 8007f74:	e086      	b.n	8008084 <__aeabi_dmul+0x138>
 8007f76:	0f42      	lsrs	r2, r0, #29
 8007f78:	00e4      	lsls	r4, r4, #3
 8007f7a:	4314      	orrs	r4, r2
 8007f7c:	2280      	movs	r2, #128	; 0x80
 8007f7e:	0412      	lsls	r2, r2, #16
 8007f80:	4314      	orrs	r4, r2
 8007f82:	4ad9      	ldr	r2, [pc, #868]	; (80082e8 <__aeabi_dmul+0x39c>)
 8007f84:	00c5      	lsls	r5, r0, #3
 8007f86:	4694      	mov	ip, r2
 8007f88:	4463      	add	r3, ip
 8007f8a:	9300      	str	r3, [sp, #0]
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	4699      	mov	r9, r3
 8007f90:	469b      	mov	fp, r3
 8007f92:	4643      	mov	r3, r8
 8007f94:	4642      	mov	r2, r8
 8007f96:	031e      	lsls	r6, r3, #12
 8007f98:	0fd2      	lsrs	r2, r2, #31
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	4650      	mov	r0, sl
 8007f9e:	4690      	mov	r8, r2
 8007fa0:	0b36      	lsrs	r6, r6, #12
 8007fa2:	0d5b      	lsrs	r3, r3, #21
 8007fa4:	d100      	bne.n	8007fa8 <__aeabi_dmul+0x5c>
 8007fa6:	e078      	b.n	800809a <__aeabi_dmul+0x14e>
 8007fa8:	4ace      	ldr	r2, [pc, #824]	; (80082e4 <__aeabi_dmul+0x398>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d01d      	beq.n	8007fea <__aeabi_dmul+0x9e>
 8007fae:	49ce      	ldr	r1, [pc, #824]	; (80082e8 <__aeabi_dmul+0x39c>)
 8007fb0:	0f42      	lsrs	r2, r0, #29
 8007fb2:	468c      	mov	ip, r1
 8007fb4:	9900      	ldr	r1, [sp, #0]
 8007fb6:	4463      	add	r3, ip
 8007fb8:	00f6      	lsls	r6, r6, #3
 8007fba:	468c      	mov	ip, r1
 8007fbc:	4316      	orrs	r6, r2
 8007fbe:	2280      	movs	r2, #128	; 0x80
 8007fc0:	449c      	add	ip, r3
 8007fc2:	0412      	lsls	r2, r2, #16
 8007fc4:	4663      	mov	r3, ip
 8007fc6:	4316      	orrs	r6, r2
 8007fc8:	00c2      	lsls	r2, r0, #3
 8007fca:	2000      	movs	r0, #0
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	9900      	ldr	r1, [sp, #0]
 8007fd0:	4643      	mov	r3, r8
 8007fd2:	3101      	adds	r1, #1
 8007fd4:	468c      	mov	ip, r1
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	407b      	eors	r3, r7
 8007fda:	9301      	str	r3, [sp, #4]
 8007fdc:	290f      	cmp	r1, #15
 8007fde:	d900      	bls.n	8007fe2 <__aeabi_dmul+0x96>
 8007fe0:	e07e      	b.n	80080e0 <__aeabi_dmul+0x194>
 8007fe2:	4bc2      	ldr	r3, [pc, #776]	; (80082ec <__aeabi_dmul+0x3a0>)
 8007fe4:	0089      	lsls	r1, r1, #2
 8007fe6:	5859      	ldr	r1, [r3, r1]
 8007fe8:	468f      	mov	pc, r1
 8007fea:	4652      	mov	r2, sl
 8007fec:	9b00      	ldr	r3, [sp, #0]
 8007fee:	4332      	orrs	r2, r6
 8007ff0:	d000      	beq.n	8007ff4 <__aeabi_dmul+0xa8>
 8007ff2:	e156      	b.n	80082a2 <__aeabi_dmul+0x356>
 8007ff4:	49bb      	ldr	r1, [pc, #748]	; (80082e4 <__aeabi_dmul+0x398>)
 8007ff6:	2600      	movs	r6, #0
 8007ff8:	468c      	mov	ip, r1
 8007ffa:	4463      	add	r3, ip
 8007ffc:	4649      	mov	r1, r9
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	2302      	movs	r3, #2
 8008002:	4319      	orrs	r1, r3
 8008004:	4689      	mov	r9, r1
 8008006:	2002      	movs	r0, #2
 8008008:	e7e1      	b.n	8007fce <__aeabi_dmul+0x82>
 800800a:	4643      	mov	r3, r8
 800800c:	9301      	str	r3, [sp, #4]
 800800e:	0034      	movs	r4, r6
 8008010:	0015      	movs	r5, r2
 8008012:	4683      	mov	fp, r0
 8008014:	465b      	mov	r3, fp
 8008016:	2b02      	cmp	r3, #2
 8008018:	d05e      	beq.n	80080d8 <__aeabi_dmul+0x18c>
 800801a:	2b03      	cmp	r3, #3
 800801c:	d100      	bne.n	8008020 <__aeabi_dmul+0xd4>
 800801e:	e1f3      	b.n	8008408 <__aeabi_dmul+0x4bc>
 8008020:	2b01      	cmp	r3, #1
 8008022:	d000      	beq.n	8008026 <__aeabi_dmul+0xda>
 8008024:	e118      	b.n	8008258 <__aeabi_dmul+0x30c>
 8008026:	2200      	movs	r2, #0
 8008028:	2400      	movs	r4, #0
 800802a:	2500      	movs	r5, #0
 800802c:	9b01      	ldr	r3, [sp, #4]
 800802e:	0512      	lsls	r2, r2, #20
 8008030:	4322      	orrs	r2, r4
 8008032:	07db      	lsls	r3, r3, #31
 8008034:	431a      	orrs	r2, r3
 8008036:	0028      	movs	r0, r5
 8008038:	0011      	movs	r1, r2
 800803a:	b007      	add	sp, #28
 800803c:	bcf0      	pop	{r4, r5, r6, r7}
 800803e:	46bb      	mov	fp, r7
 8008040:	46b2      	mov	sl, r6
 8008042:	46a9      	mov	r9, r5
 8008044:	46a0      	mov	r8, r4
 8008046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008048:	0025      	movs	r5, r4
 800804a:	4305      	orrs	r5, r0
 800804c:	d100      	bne.n	8008050 <__aeabi_dmul+0x104>
 800804e:	e141      	b.n	80082d4 <__aeabi_dmul+0x388>
 8008050:	2c00      	cmp	r4, #0
 8008052:	d100      	bne.n	8008056 <__aeabi_dmul+0x10a>
 8008054:	e1ad      	b.n	80083b2 <__aeabi_dmul+0x466>
 8008056:	0020      	movs	r0, r4
 8008058:	f000 fe02 	bl	8008c60 <__clzsi2>
 800805c:	0001      	movs	r1, r0
 800805e:	0002      	movs	r2, r0
 8008060:	390b      	subs	r1, #11
 8008062:	231d      	movs	r3, #29
 8008064:	0010      	movs	r0, r2
 8008066:	1a5b      	subs	r3, r3, r1
 8008068:	0031      	movs	r1, r6
 800806a:	0035      	movs	r5, r6
 800806c:	3808      	subs	r0, #8
 800806e:	4084      	lsls	r4, r0
 8008070:	40d9      	lsrs	r1, r3
 8008072:	4085      	lsls	r5, r0
 8008074:	430c      	orrs	r4, r1
 8008076:	489e      	ldr	r0, [pc, #632]	; (80082f0 <__aeabi_dmul+0x3a4>)
 8008078:	1a83      	subs	r3, r0, r2
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	2300      	movs	r3, #0
 800807e:	4699      	mov	r9, r3
 8008080:	469b      	mov	fp, r3
 8008082:	e786      	b.n	8007f92 <__aeabi_dmul+0x46>
 8008084:	0005      	movs	r5, r0
 8008086:	4325      	orrs	r5, r4
 8008088:	d000      	beq.n	800808c <__aeabi_dmul+0x140>
 800808a:	e11c      	b.n	80082c6 <__aeabi_dmul+0x37a>
 800808c:	2208      	movs	r2, #8
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	2302      	movs	r3, #2
 8008092:	2400      	movs	r4, #0
 8008094:	4691      	mov	r9, r2
 8008096:	469b      	mov	fp, r3
 8008098:	e77b      	b.n	8007f92 <__aeabi_dmul+0x46>
 800809a:	4652      	mov	r2, sl
 800809c:	4332      	orrs	r2, r6
 800809e:	d100      	bne.n	80080a2 <__aeabi_dmul+0x156>
 80080a0:	e10a      	b.n	80082b8 <__aeabi_dmul+0x36c>
 80080a2:	2e00      	cmp	r6, #0
 80080a4:	d100      	bne.n	80080a8 <__aeabi_dmul+0x15c>
 80080a6:	e176      	b.n	8008396 <__aeabi_dmul+0x44a>
 80080a8:	0030      	movs	r0, r6
 80080aa:	f000 fdd9 	bl	8008c60 <__clzsi2>
 80080ae:	0002      	movs	r2, r0
 80080b0:	3a0b      	subs	r2, #11
 80080b2:	231d      	movs	r3, #29
 80080b4:	0001      	movs	r1, r0
 80080b6:	1a9b      	subs	r3, r3, r2
 80080b8:	4652      	mov	r2, sl
 80080ba:	3908      	subs	r1, #8
 80080bc:	40da      	lsrs	r2, r3
 80080be:	408e      	lsls	r6, r1
 80080c0:	4316      	orrs	r6, r2
 80080c2:	4652      	mov	r2, sl
 80080c4:	408a      	lsls	r2, r1
 80080c6:	9b00      	ldr	r3, [sp, #0]
 80080c8:	4989      	ldr	r1, [pc, #548]	; (80082f0 <__aeabi_dmul+0x3a4>)
 80080ca:	1a18      	subs	r0, r3, r0
 80080cc:	0003      	movs	r3, r0
 80080ce:	468c      	mov	ip, r1
 80080d0:	4463      	add	r3, ip
 80080d2:	2000      	movs	r0, #0
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	e77a      	b.n	8007fce <__aeabi_dmul+0x82>
 80080d8:	2400      	movs	r4, #0
 80080da:	2500      	movs	r5, #0
 80080dc:	4a81      	ldr	r2, [pc, #516]	; (80082e4 <__aeabi_dmul+0x398>)
 80080de:	e7a5      	b.n	800802c <__aeabi_dmul+0xe0>
 80080e0:	0c2f      	lsrs	r7, r5, #16
 80080e2:	042d      	lsls	r5, r5, #16
 80080e4:	0c2d      	lsrs	r5, r5, #16
 80080e6:	002b      	movs	r3, r5
 80080e8:	0c11      	lsrs	r1, r2, #16
 80080ea:	0412      	lsls	r2, r2, #16
 80080ec:	0c12      	lsrs	r2, r2, #16
 80080ee:	4353      	muls	r3, r2
 80080f0:	4698      	mov	r8, r3
 80080f2:	0013      	movs	r3, r2
 80080f4:	0028      	movs	r0, r5
 80080f6:	437b      	muls	r3, r7
 80080f8:	4699      	mov	r9, r3
 80080fa:	4348      	muls	r0, r1
 80080fc:	4448      	add	r0, r9
 80080fe:	4683      	mov	fp, r0
 8008100:	4640      	mov	r0, r8
 8008102:	000b      	movs	r3, r1
 8008104:	0c00      	lsrs	r0, r0, #16
 8008106:	4682      	mov	sl, r0
 8008108:	4658      	mov	r0, fp
 800810a:	437b      	muls	r3, r7
 800810c:	4450      	add	r0, sl
 800810e:	9302      	str	r3, [sp, #8]
 8008110:	4581      	cmp	r9, r0
 8008112:	d906      	bls.n	8008122 <__aeabi_dmul+0x1d6>
 8008114:	469a      	mov	sl, r3
 8008116:	2380      	movs	r3, #128	; 0x80
 8008118:	025b      	lsls	r3, r3, #9
 800811a:	4699      	mov	r9, r3
 800811c:	44ca      	add	sl, r9
 800811e:	4653      	mov	r3, sl
 8008120:	9302      	str	r3, [sp, #8]
 8008122:	0c03      	lsrs	r3, r0, #16
 8008124:	469b      	mov	fp, r3
 8008126:	4643      	mov	r3, r8
 8008128:	041b      	lsls	r3, r3, #16
 800812a:	0400      	lsls	r0, r0, #16
 800812c:	0c1b      	lsrs	r3, r3, #16
 800812e:	4698      	mov	r8, r3
 8008130:	0003      	movs	r3, r0
 8008132:	4443      	add	r3, r8
 8008134:	9304      	str	r3, [sp, #16]
 8008136:	0c33      	lsrs	r3, r6, #16
 8008138:	4699      	mov	r9, r3
 800813a:	002b      	movs	r3, r5
 800813c:	0436      	lsls	r6, r6, #16
 800813e:	0c36      	lsrs	r6, r6, #16
 8008140:	4373      	muls	r3, r6
 8008142:	4698      	mov	r8, r3
 8008144:	0033      	movs	r3, r6
 8008146:	437b      	muls	r3, r7
 8008148:	469a      	mov	sl, r3
 800814a:	464b      	mov	r3, r9
 800814c:	435d      	muls	r5, r3
 800814e:	435f      	muls	r7, r3
 8008150:	4643      	mov	r3, r8
 8008152:	4455      	add	r5, sl
 8008154:	0c18      	lsrs	r0, r3, #16
 8008156:	1940      	adds	r0, r0, r5
 8008158:	4582      	cmp	sl, r0
 800815a:	d903      	bls.n	8008164 <__aeabi_dmul+0x218>
 800815c:	2380      	movs	r3, #128	; 0x80
 800815e:	025b      	lsls	r3, r3, #9
 8008160:	469a      	mov	sl, r3
 8008162:	4457      	add	r7, sl
 8008164:	0c05      	lsrs	r5, r0, #16
 8008166:	19eb      	adds	r3, r5, r7
 8008168:	9305      	str	r3, [sp, #20]
 800816a:	4643      	mov	r3, r8
 800816c:	041d      	lsls	r5, r3, #16
 800816e:	0c2d      	lsrs	r5, r5, #16
 8008170:	0400      	lsls	r0, r0, #16
 8008172:	1940      	adds	r0, r0, r5
 8008174:	0c25      	lsrs	r5, r4, #16
 8008176:	0424      	lsls	r4, r4, #16
 8008178:	0c24      	lsrs	r4, r4, #16
 800817a:	0027      	movs	r7, r4
 800817c:	4357      	muls	r7, r2
 800817e:	436a      	muls	r2, r5
 8008180:	4690      	mov	r8, r2
 8008182:	002a      	movs	r2, r5
 8008184:	0c3b      	lsrs	r3, r7, #16
 8008186:	469a      	mov	sl, r3
 8008188:	434a      	muls	r2, r1
 800818a:	4361      	muls	r1, r4
 800818c:	4441      	add	r1, r8
 800818e:	4451      	add	r1, sl
 8008190:	4483      	add	fp, r0
 8008192:	4588      	cmp	r8, r1
 8008194:	d903      	bls.n	800819e <__aeabi_dmul+0x252>
 8008196:	2380      	movs	r3, #128	; 0x80
 8008198:	025b      	lsls	r3, r3, #9
 800819a:	4698      	mov	r8, r3
 800819c:	4442      	add	r2, r8
 800819e:	043f      	lsls	r7, r7, #16
 80081a0:	0c0b      	lsrs	r3, r1, #16
 80081a2:	0c3f      	lsrs	r7, r7, #16
 80081a4:	0409      	lsls	r1, r1, #16
 80081a6:	19c9      	adds	r1, r1, r7
 80081a8:	0027      	movs	r7, r4
 80081aa:	4698      	mov	r8, r3
 80081ac:	464b      	mov	r3, r9
 80081ae:	4377      	muls	r7, r6
 80081b0:	435c      	muls	r4, r3
 80081b2:	436e      	muls	r6, r5
 80081b4:	435d      	muls	r5, r3
 80081b6:	0c3b      	lsrs	r3, r7, #16
 80081b8:	4699      	mov	r9, r3
 80081ba:	19a4      	adds	r4, r4, r6
 80081bc:	444c      	add	r4, r9
 80081be:	4442      	add	r2, r8
 80081c0:	9503      	str	r5, [sp, #12]
 80081c2:	42a6      	cmp	r6, r4
 80081c4:	d904      	bls.n	80081d0 <__aeabi_dmul+0x284>
 80081c6:	2380      	movs	r3, #128	; 0x80
 80081c8:	025b      	lsls	r3, r3, #9
 80081ca:	4698      	mov	r8, r3
 80081cc:	4445      	add	r5, r8
 80081ce:	9503      	str	r5, [sp, #12]
 80081d0:	9b02      	ldr	r3, [sp, #8]
 80081d2:	043f      	lsls	r7, r7, #16
 80081d4:	445b      	add	r3, fp
 80081d6:	001e      	movs	r6, r3
 80081d8:	4283      	cmp	r3, r0
 80081da:	4180      	sbcs	r0, r0
 80081dc:	0423      	lsls	r3, r4, #16
 80081de:	4698      	mov	r8, r3
 80081e0:	9b05      	ldr	r3, [sp, #20]
 80081e2:	0c3f      	lsrs	r7, r7, #16
 80081e4:	4447      	add	r7, r8
 80081e6:	4698      	mov	r8, r3
 80081e8:	1876      	adds	r6, r6, r1
 80081ea:	428e      	cmp	r6, r1
 80081ec:	4189      	sbcs	r1, r1
 80081ee:	4447      	add	r7, r8
 80081f0:	4240      	negs	r0, r0
 80081f2:	183d      	adds	r5, r7, r0
 80081f4:	46a8      	mov	r8, r5
 80081f6:	4693      	mov	fp, r2
 80081f8:	4249      	negs	r1, r1
 80081fa:	468a      	mov	sl, r1
 80081fc:	44c3      	add	fp, r8
 80081fe:	429f      	cmp	r7, r3
 8008200:	41bf      	sbcs	r7, r7
 8008202:	4580      	cmp	r8, r0
 8008204:	4180      	sbcs	r0, r0
 8008206:	9b03      	ldr	r3, [sp, #12]
 8008208:	44da      	add	sl, fp
 800820a:	4698      	mov	r8, r3
 800820c:	4653      	mov	r3, sl
 800820e:	4240      	negs	r0, r0
 8008210:	427f      	negs	r7, r7
 8008212:	4307      	orrs	r7, r0
 8008214:	0c24      	lsrs	r4, r4, #16
 8008216:	4593      	cmp	fp, r2
 8008218:	4192      	sbcs	r2, r2
 800821a:	458a      	cmp	sl, r1
 800821c:	4189      	sbcs	r1, r1
 800821e:	193f      	adds	r7, r7, r4
 8008220:	0ddc      	lsrs	r4, r3, #23
 8008222:	9b04      	ldr	r3, [sp, #16]
 8008224:	0275      	lsls	r5, r6, #9
 8008226:	431d      	orrs	r5, r3
 8008228:	1e68      	subs	r0, r5, #1
 800822a:	4185      	sbcs	r5, r0
 800822c:	4653      	mov	r3, sl
 800822e:	4252      	negs	r2, r2
 8008230:	4249      	negs	r1, r1
 8008232:	430a      	orrs	r2, r1
 8008234:	18bf      	adds	r7, r7, r2
 8008236:	4447      	add	r7, r8
 8008238:	0df6      	lsrs	r6, r6, #23
 800823a:	027f      	lsls	r7, r7, #9
 800823c:	4335      	orrs	r5, r6
 800823e:	025a      	lsls	r2, r3, #9
 8008240:	433c      	orrs	r4, r7
 8008242:	4315      	orrs	r5, r2
 8008244:	01fb      	lsls	r3, r7, #7
 8008246:	d400      	bmi.n	800824a <__aeabi_dmul+0x2fe>
 8008248:	e0c1      	b.n	80083ce <__aeabi_dmul+0x482>
 800824a:	2101      	movs	r1, #1
 800824c:	086a      	lsrs	r2, r5, #1
 800824e:	400d      	ands	r5, r1
 8008250:	4315      	orrs	r5, r2
 8008252:	07e2      	lsls	r2, r4, #31
 8008254:	4315      	orrs	r5, r2
 8008256:	0864      	lsrs	r4, r4, #1
 8008258:	4926      	ldr	r1, [pc, #152]	; (80082f4 <__aeabi_dmul+0x3a8>)
 800825a:	4461      	add	r1, ip
 800825c:	2900      	cmp	r1, #0
 800825e:	dd56      	ble.n	800830e <__aeabi_dmul+0x3c2>
 8008260:	076b      	lsls	r3, r5, #29
 8008262:	d009      	beq.n	8008278 <__aeabi_dmul+0x32c>
 8008264:	220f      	movs	r2, #15
 8008266:	402a      	ands	r2, r5
 8008268:	2a04      	cmp	r2, #4
 800826a:	d005      	beq.n	8008278 <__aeabi_dmul+0x32c>
 800826c:	1d2a      	adds	r2, r5, #4
 800826e:	42aa      	cmp	r2, r5
 8008270:	41ad      	sbcs	r5, r5
 8008272:	426d      	negs	r5, r5
 8008274:	1964      	adds	r4, r4, r5
 8008276:	0015      	movs	r5, r2
 8008278:	01e3      	lsls	r3, r4, #7
 800827a:	d504      	bpl.n	8008286 <__aeabi_dmul+0x33a>
 800827c:	2180      	movs	r1, #128	; 0x80
 800827e:	4a1e      	ldr	r2, [pc, #120]	; (80082f8 <__aeabi_dmul+0x3ac>)
 8008280:	00c9      	lsls	r1, r1, #3
 8008282:	4014      	ands	r4, r2
 8008284:	4461      	add	r1, ip
 8008286:	4a1d      	ldr	r2, [pc, #116]	; (80082fc <__aeabi_dmul+0x3b0>)
 8008288:	4291      	cmp	r1, r2
 800828a:	dd00      	ble.n	800828e <__aeabi_dmul+0x342>
 800828c:	e724      	b.n	80080d8 <__aeabi_dmul+0x18c>
 800828e:	0762      	lsls	r2, r4, #29
 8008290:	08ed      	lsrs	r5, r5, #3
 8008292:	0264      	lsls	r4, r4, #9
 8008294:	0549      	lsls	r1, r1, #21
 8008296:	4315      	orrs	r5, r2
 8008298:	0b24      	lsrs	r4, r4, #12
 800829a:	0d4a      	lsrs	r2, r1, #21
 800829c:	e6c6      	b.n	800802c <__aeabi_dmul+0xe0>
 800829e:	9701      	str	r7, [sp, #4]
 80082a0:	e6b8      	b.n	8008014 <__aeabi_dmul+0xc8>
 80082a2:	4a10      	ldr	r2, [pc, #64]	; (80082e4 <__aeabi_dmul+0x398>)
 80082a4:	2003      	movs	r0, #3
 80082a6:	4694      	mov	ip, r2
 80082a8:	4463      	add	r3, ip
 80082aa:	464a      	mov	r2, r9
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	2303      	movs	r3, #3
 80082b0:	431a      	orrs	r2, r3
 80082b2:	4691      	mov	r9, r2
 80082b4:	4652      	mov	r2, sl
 80082b6:	e68a      	b.n	8007fce <__aeabi_dmul+0x82>
 80082b8:	4649      	mov	r1, r9
 80082ba:	2301      	movs	r3, #1
 80082bc:	4319      	orrs	r1, r3
 80082be:	4689      	mov	r9, r1
 80082c0:	2600      	movs	r6, #0
 80082c2:	2001      	movs	r0, #1
 80082c4:	e683      	b.n	8007fce <__aeabi_dmul+0x82>
 80082c6:	220c      	movs	r2, #12
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	2303      	movs	r3, #3
 80082cc:	0005      	movs	r5, r0
 80082ce:	4691      	mov	r9, r2
 80082d0:	469b      	mov	fp, r3
 80082d2:	e65e      	b.n	8007f92 <__aeabi_dmul+0x46>
 80082d4:	2304      	movs	r3, #4
 80082d6:	4699      	mov	r9, r3
 80082d8:	2300      	movs	r3, #0
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	3301      	adds	r3, #1
 80082de:	2400      	movs	r4, #0
 80082e0:	469b      	mov	fp, r3
 80082e2:	e656      	b.n	8007f92 <__aeabi_dmul+0x46>
 80082e4:	000007ff 	.word	0x000007ff
 80082e8:	fffffc01 	.word	0xfffffc01
 80082ec:	080096d0 	.word	0x080096d0
 80082f0:	fffffc0d 	.word	0xfffffc0d
 80082f4:	000003ff 	.word	0x000003ff
 80082f8:	feffffff 	.word	0xfeffffff
 80082fc:	000007fe 	.word	0x000007fe
 8008300:	2300      	movs	r3, #0
 8008302:	2480      	movs	r4, #128	; 0x80
 8008304:	2500      	movs	r5, #0
 8008306:	4a44      	ldr	r2, [pc, #272]	; (8008418 <__aeabi_dmul+0x4cc>)
 8008308:	9301      	str	r3, [sp, #4]
 800830a:	0324      	lsls	r4, r4, #12
 800830c:	e68e      	b.n	800802c <__aeabi_dmul+0xe0>
 800830e:	2001      	movs	r0, #1
 8008310:	1a40      	subs	r0, r0, r1
 8008312:	2838      	cmp	r0, #56	; 0x38
 8008314:	dd00      	ble.n	8008318 <__aeabi_dmul+0x3cc>
 8008316:	e686      	b.n	8008026 <__aeabi_dmul+0xda>
 8008318:	281f      	cmp	r0, #31
 800831a:	dd5b      	ble.n	80083d4 <__aeabi_dmul+0x488>
 800831c:	221f      	movs	r2, #31
 800831e:	0023      	movs	r3, r4
 8008320:	4252      	negs	r2, r2
 8008322:	1a51      	subs	r1, r2, r1
 8008324:	40cb      	lsrs	r3, r1
 8008326:	0019      	movs	r1, r3
 8008328:	2820      	cmp	r0, #32
 800832a:	d003      	beq.n	8008334 <__aeabi_dmul+0x3e8>
 800832c:	4a3b      	ldr	r2, [pc, #236]	; (800841c <__aeabi_dmul+0x4d0>)
 800832e:	4462      	add	r2, ip
 8008330:	4094      	lsls	r4, r2
 8008332:	4325      	orrs	r5, r4
 8008334:	1e6a      	subs	r2, r5, #1
 8008336:	4195      	sbcs	r5, r2
 8008338:	002a      	movs	r2, r5
 800833a:	430a      	orrs	r2, r1
 800833c:	2107      	movs	r1, #7
 800833e:	000d      	movs	r5, r1
 8008340:	2400      	movs	r4, #0
 8008342:	4015      	ands	r5, r2
 8008344:	4211      	tst	r1, r2
 8008346:	d05b      	beq.n	8008400 <__aeabi_dmul+0x4b4>
 8008348:	210f      	movs	r1, #15
 800834a:	2400      	movs	r4, #0
 800834c:	4011      	ands	r1, r2
 800834e:	2904      	cmp	r1, #4
 8008350:	d053      	beq.n	80083fa <__aeabi_dmul+0x4ae>
 8008352:	1d11      	adds	r1, r2, #4
 8008354:	4291      	cmp	r1, r2
 8008356:	4192      	sbcs	r2, r2
 8008358:	4252      	negs	r2, r2
 800835a:	18a4      	adds	r4, r4, r2
 800835c:	000a      	movs	r2, r1
 800835e:	0223      	lsls	r3, r4, #8
 8008360:	d54b      	bpl.n	80083fa <__aeabi_dmul+0x4ae>
 8008362:	2201      	movs	r2, #1
 8008364:	2400      	movs	r4, #0
 8008366:	2500      	movs	r5, #0
 8008368:	e660      	b.n	800802c <__aeabi_dmul+0xe0>
 800836a:	2380      	movs	r3, #128	; 0x80
 800836c:	031b      	lsls	r3, r3, #12
 800836e:	421c      	tst	r4, r3
 8008370:	d009      	beq.n	8008386 <__aeabi_dmul+0x43a>
 8008372:	421e      	tst	r6, r3
 8008374:	d107      	bne.n	8008386 <__aeabi_dmul+0x43a>
 8008376:	4333      	orrs	r3, r6
 8008378:	031c      	lsls	r4, r3, #12
 800837a:	4643      	mov	r3, r8
 800837c:	0015      	movs	r5, r2
 800837e:	0b24      	lsrs	r4, r4, #12
 8008380:	4a25      	ldr	r2, [pc, #148]	; (8008418 <__aeabi_dmul+0x4cc>)
 8008382:	9301      	str	r3, [sp, #4]
 8008384:	e652      	b.n	800802c <__aeabi_dmul+0xe0>
 8008386:	2280      	movs	r2, #128	; 0x80
 8008388:	0312      	lsls	r2, r2, #12
 800838a:	4314      	orrs	r4, r2
 800838c:	0324      	lsls	r4, r4, #12
 800838e:	4a22      	ldr	r2, [pc, #136]	; (8008418 <__aeabi_dmul+0x4cc>)
 8008390:	0b24      	lsrs	r4, r4, #12
 8008392:	9701      	str	r7, [sp, #4]
 8008394:	e64a      	b.n	800802c <__aeabi_dmul+0xe0>
 8008396:	f000 fc63 	bl	8008c60 <__clzsi2>
 800839a:	0003      	movs	r3, r0
 800839c:	001a      	movs	r2, r3
 800839e:	3215      	adds	r2, #21
 80083a0:	3020      	adds	r0, #32
 80083a2:	2a1c      	cmp	r2, #28
 80083a4:	dc00      	bgt.n	80083a8 <__aeabi_dmul+0x45c>
 80083a6:	e684      	b.n	80080b2 <__aeabi_dmul+0x166>
 80083a8:	4656      	mov	r6, sl
 80083aa:	3b08      	subs	r3, #8
 80083ac:	2200      	movs	r2, #0
 80083ae:	409e      	lsls	r6, r3
 80083b0:	e689      	b.n	80080c6 <__aeabi_dmul+0x17a>
 80083b2:	f000 fc55 	bl	8008c60 <__clzsi2>
 80083b6:	0001      	movs	r1, r0
 80083b8:	0002      	movs	r2, r0
 80083ba:	3115      	adds	r1, #21
 80083bc:	3220      	adds	r2, #32
 80083be:	291c      	cmp	r1, #28
 80083c0:	dc00      	bgt.n	80083c4 <__aeabi_dmul+0x478>
 80083c2:	e64e      	b.n	8008062 <__aeabi_dmul+0x116>
 80083c4:	0034      	movs	r4, r6
 80083c6:	3808      	subs	r0, #8
 80083c8:	2500      	movs	r5, #0
 80083ca:	4084      	lsls	r4, r0
 80083cc:	e653      	b.n	8008076 <__aeabi_dmul+0x12a>
 80083ce:	9b00      	ldr	r3, [sp, #0]
 80083d0:	469c      	mov	ip, r3
 80083d2:	e741      	b.n	8008258 <__aeabi_dmul+0x30c>
 80083d4:	4912      	ldr	r1, [pc, #72]	; (8008420 <__aeabi_dmul+0x4d4>)
 80083d6:	0022      	movs	r2, r4
 80083d8:	4461      	add	r1, ip
 80083da:	002e      	movs	r6, r5
 80083dc:	408d      	lsls	r5, r1
 80083de:	408a      	lsls	r2, r1
 80083e0:	40c6      	lsrs	r6, r0
 80083e2:	1e69      	subs	r1, r5, #1
 80083e4:	418d      	sbcs	r5, r1
 80083e6:	4332      	orrs	r2, r6
 80083e8:	432a      	orrs	r2, r5
 80083ea:	40c4      	lsrs	r4, r0
 80083ec:	0753      	lsls	r3, r2, #29
 80083ee:	d0b6      	beq.n	800835e <__aeabi_dmul+0x412>
 80083f0:	210f      	movs	r1, #15
 80083f2:	4011      	ands	r1, r2
 80083f4:	2904      	cmp	r1, #4
 80083f6:	d1ac      	bne.n	8008352 <__aeabi_dmul+0x406>
 80083f8:	e7b1      	b.n	800835e <__aeabi_dmul+0x412>
 80083fa:	0765      	lsls	r5, r4, #29
 80083fc:	0264      	lsls	r4, r4, #9
 80083fe:	0b24      	lsrs	r4, r4, #12
 8008400:	08d2      	lsrs	r2, r2, #3
 8008402:	4315      	orrs	r5, r2
 8008404:	2200      	movs	r2, #0
 8008406:	e611      	b.n	800802c <__aeabi_dmul+0xe0>
 8008408:	2280      	movs	r2, #128	; 0x80
 800840a:	0312      	lsls	r2, r2, #12
 800840c:	4314      	orrs	r4, r2
 800840e:	0324      	lsls	r4, r4, #12
 8008410:	4a01      	ldr	r2, [pc, #4]	; (8008418 <__aeabi_dmul+0x4cc>)
 8008412:	0b24      	lsrs	r4, r4, #12
 8008414:	e60a      	b.n	800802c <__aeabi_dmul+0xe0>
 8008416:	46c0      	nop			; (mov r8, r8)
 8008418:	000007ff 	.word	0x000007ff
 800841c:	0000043e 	.word	0x0000043e
 8008420:	0000041e 	.word	0x0000041e

08008424 <__aeabi_dsub>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	4657      	mov	r7, sl
 8008428:	464e      	mov	r6, r9
 800842a:	4645      	mov	r5, r8
 800842c:	46de      	mov	lr, fp
 800842e:	0004      	movs	r4, r0
 8008430:	b5e0      	push	{r5, r6, r7, lr}
 8008432:	001f      	movs	r7, r3
 8008434:	0010      	movs	r0, r2
 8008436:	030b      	lsls	r3, r1, #12
 8008438:	0f62      	lsrs	r2, r4, #29
 800843a:	004e      	lsls	r6, r1, #1
 800843c:	0fcd      	lsrs	r5, r1, #31
 800843e:	0a5b      	lsrs	r3, r3, #9
 8008440:	0339      	lsls	r1, r7, #12
 8008442:	4313      	orrs	r3, r2
 8008444:	0a49      	lsrs	r1, r1, #9
 8008446:	00e2      	lsls	r2, r4, #3
 8008448:	0f44      	lsrs	r4, r0, #29
 800844a:	4321      	orrs	r1, r4
 800844c:	4cc2      	ldr	r4, [pc, #776]	; (8008758 <__aeabi_dsub+0x334>)
 800844e:	4691      	mov	r9, r2
 8008450:	4692      	mov	sl, r2
 8008452:	00c0      	lsls	r0, r0, #3
 8008454:	007a      	lsls	r2, r7, #1
 8008456:	4680      	mov	r8, r0
 8008458:	0d76      	lsrs	r6, r6, #21
 800845a:	0d52      	lsrs	r2, r2, #21
 800845c:	0fff      	lsrs	r7, r7, #31
 800845e:	42a2      	cmp	r2, r4
 8008460:	d100      	bne.n	8008464 <__aeabi_dsub+0x40>
 8008462:	e0b4      	b.n	80085ce <__aeabi_dsub+0x1aa>
 8008464:	2401      	movs	r4, #1
 8008466:	4067      	eors	r7, r4
 8008468:	46bb      	mov	fp, r7
 800846a:	42bd      	cmp	r5, r7
 800846c:	d100      	bne.n	8008470 <__aeabi_dsub+0x4c>
 800846e:	e088      	b.n	8008582 <__aeabi_dsub+0x15e>
 8008470:	1ab4      	subs	r4, r6, r2
 8008472:	46a4      	mov	ip, r4
 8008474:	2c00      	cmp	r4, #0
 8008476:	dc00      	bgt.n	800847a <__aeabi_dsub+0x56>
 8008478:	e0b2      	b.n	80085e0 <__aeabi_dsub+0x1bc>
 800847a:	2a00      	cmp	r2, #0
 800847c:	d100      	bne.n	8008480 <__aeabi_dsub+0x5c>
 800847e:	e0c5      	b.n	800860c <__aeabi_dsub+0x1e8>
 8008480:	4ab5      	ldr	r2, [pc, #724]	; (8008758 <__aeabi_dsub+0x334>)
 8008482:	4296      	cmp	r6, r2
 8008484:	d100      	bne.n	8008488 <__aeabi_dsub+0x64>
 8008486:	e28b      	b.n	80089a0 <__aeabi_dsub+0x57c>
 8008488:	2280      	movs	r2, #128	; 0x80
 800848a:	0412      	lsls	r2, r2, #16
 800848c:	4311      	orrs	r1, r2
 800848e:	4662      	mov	r2, ip
 8008490:	2a38      	cmp	r2, #56	; 0x38
 8008492:	dd00      	ble.n	8008496 <__aeabi_dsub+0x72>
 8008494:	e1a1      	b.n	80087da <__aeabi_dsub+0x3b6>
 8008496:	2a1f      	cmp	r2, #31
 8008498:	dd00      	ble.n	800849c <__aeabi_dsub+0x78>
 800849a:	e216      	b.n	80088ca <__aeabi_dsub+0x4a6>
 800849c:	2720      	movs	r7, #32
 800849e:	000c      	movs	r4, r1
 80084a0:	1abf      	subs	r7, r7, r2
 80084a2:	40bc      	lsls	r4, r7
 80084a4:	0002      	movs	r2, r0
 80084a6:	46a0      	mov	r8, r4
 80084a8:	4664      	mov	r4, ip
 80084aa:	40b8      	lsls	r0, r7
 80084ac:	40e2      	lsrs	r2, r4
 80084ae:	4644      	mov	r4, r8
 80084b0:	4314      	orrs	r4, r2
 80084b2:	0002      	movs	r2, r0
 80084b4:	1e50      	subs	r0, r2, #1
 80084b6:	4182      	sbcs	r2, r0
 80084b8:	4660      	mov	r0, ip
 80084ba:	40c1      	lsrs	r1, r0
 80084bc:	4322      	orrs	r2, r4
 80084be:	1a5b      	subs	r3, r3, r1
 80084c0:	4649      	mov	r1, r9
 80084c2:	1a8c      	subs	r4, r1, r2
 80084c4:	45a1      	cmp	r9, r4
 80084c6:	4192      	sbcs	r2, r2
 80084c8:	4252      	negs	r2, r2
 80084ca:	1a9b      	subs	r3, r3, r2
 80084cc:	4698      	mov	r8, r3
 80084ce:	4643      	mov	r3, r8
 80084d0:	021b      	lsls	r3, r3, #8
 80084d2:	d400      	bmi.n	80084d6 <__aeabi_dsub+0xb2>
 80084d4:	e117      	b.n	8008706 <__aeabi_dsub+0x2e2>
 80084d6:	4643      	mov	r3, r8
 80084d8:	025b      	lsls	r3, r3, #9
 80084da:	0a5b      	lsrs	r3, r3, #9
 80084dc:	4698      	mov	r8, r3
 80084de:	4643      	mov	r3, r8
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d100      	bne.n	80084e6 <__aeabi_dsub+0xc2>
 80084e4:	e16c      	b.n	80087c0 <__aeabi_dsub+0x39c>
 80084e6:	4640      	mov	r0, r8
 80084e8:	f000 fbba 	bl	8008c60 <__clzsi2>
 80084ec:	0002      	movs	r2, r0
 80084ee:	3a08      	subs	r2, #8
 80084f0:	2120      	movs	r1, #32
 80084f2:	0020      	movs	r0, r4
 80084f4:	4643      	mov	r3, r8
 80084f6:	1a89      	subs	r1, r1, r2
 80084f8:	4093      	lsls	r3, r2
 80084fa:	40c8      	lsrs	r0, r1
 80084fc:	4094      	lsls	r4, r2
 80084fe:	4303      	orrs	r3, r0
 8008500:	4296      	cmp	r6, r2
 8008502:	dd00      	ble.n	8008506 <__aeabi_dsub+0xe2>
 8008504:	e157      	b.n	80087b6 <__aeabi_dsub+0x392>
 8008506:	1b96      	subs	r6, r2, r6
 8008508:	1c71      	adds	r1, r6, #1
 800850a:	291f      	cmp	r1, #31
 800850c:	dd00      	ble.n	8008510 <__aeabi_dsub+0xec>
 800850e:	e1cb      	b.n	80088a8 <__aeabi_dsub+0x484>
 8008510:	2220      	movs	r2, #32
 8008512:	0018      	movs	r0, r3
 8008514:	0026      	movs	r6, r4
 8008516:	1a52      	subs	r2, r2, r1
 8008518:	4094      	lsls	r4, r2
 800851a:	4090      	lsls	r0, r2
 800851c:	40ce      	lsrs	r6, r1
 800851e:	40cb      	lsrs	r3, r1
 8008520:	1e62      	subs	r2, r4, #1
 8008522:	4194      	sbcs	r4, r2
 8008524:	4330      	orrs	r0, r6
 8008526:	4698      	mov	r8, r3
 8008528:	2600      	movs	r6, #0
 800852a:	4304      	orrs	r4, r0
 800852c:	0763      	lsls	r3, r4, #29
 800852e:	d009      	beq.n	8008544 <__aeabi_dsub+0x120>
 8008530:	230f      	movs	r3, #15
 8008532:	4023      	ands	r3, r4
 8008534:	2b04      	cmp	r3, #4
 8008536:	d005      	beq.n	8008544 <__aeabi_dsub+0x120>
 8008538:	1d23      	adds	r3, r4, #4
 800853a:	42a3      	cmp	r3, r4
 800853c:	41a4      	sbcs	r4, r4
 800853e:	4264      	negs	r4, r4
 8008540:	44a0      	add	r8, r4
 8008542:	001c      	movs	r4, r3
 8008544:	4643      	mov	r3, r8
 8008546:	021b      	lsls	r3, r3, #8
 8008548:	d400      	bmi.n	800854c <__aeabi_dsub+0x128>
 800854a:	e0df      	b.n	800870c <__aeabi_dsub+0x2e8>
 800854c:	4b82      	ldr	r3, [pc, #520]	; (8008758 <__aeabi_dsub+0x334>)
 800854e:	3601      	adds	r6, #1
 8008550:	429e      	cmp	r6, r3
 8008552:	d100      	bne.n	8008556 <__aeabi_dsub+0x132>
 8008554:	e0fb      	b.n	800874e <__aeabi_dsub+0x32a>
 8008556:	4642      	mov	r2, r8
 8008558:	4b80      	ldr	r3, [pc, #512]	; (800875c <__aeabi_dsub+0x338>)
 800855a:	08e4      	lsrs	r4, r4, #3
 800855c:	401a      	ands	r2, r3
 800855e:	0013      	movs	r3, r2
 8008560:	0571      	lsls	r1, r6, #21
 8008562:	0752      	lsls	r2, r2, #29
 8008564:	025b      	lsls	r3, r3, #9
 8008566:	4322      	orrs	r2, r4
 8008568:	0b1b      	lsrs	r3, r3, #12
 800856a:	0d49      	lsrs	r1, r1, #21
 800856c:	0509      	lsls	r1, r1, #20
 800856e:	07ed      	lsls	r5, r5, #31
 8008570:	4319      	orrs	r1, r3
 8008572:	4329      	orrs	r1, r5
 8008574:	0010      	movs	r0, r2
 8008576:	bcf0      	pop	{r4, r5, r6, r7}
 8008578:	46bb      	mov	fp, r7
 800857a:	46b2      	mov	sl, r6
 800857c:	46a9      	mov	r9, r5
 800857e:	46a0      	mov	r8, r4
 8008580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008582:	1ab4      	subs	r4, r6, r2
 8008584:	46a4      	mov	ip, r4
 8008586:	2c00      	cmp	r4, #0
 8008588:	dd58      	ble.n	800863c <__aeabi_dsub+0x218>
 800858a:	2a00      	cmp	r2, #0
 800858c:	d100      	bne.n	8008590 <__aeabi_dsub+0x16c>
 800858e:	e09e      	b.n	80086ce <__aeabi_dsub+0x2aa>
 8008590:	4a71      	ldr	r2, [pc, #452]	; (8008758 <__aeabi_dsub+0x334>)
 8008592:	4296      	cmp	r6, r2
 8008594:	d100      	bne.n	8008598 <__aeabi_dsub+0x174>
 8008596:	e13b      	b.n	8008810 <__aeabi_dsub+0x3ec>
 8008598:	2280      	movs	r2, #128	; 0x80
 800859a:	0412      	lsls	r2, r2, #16
 800859c:	4311      	orrs	r1, r2
 800859e:	4662      	mov	r2, ip
 80085a0:	2a38      	cmp	r2, #56	; 0x38
 80085a2:	dd00      	ble.n	80085a6 <__aeabi_dsub+0x182>
 80085a4:	e0c1      	b.n	800872a <__aeabi_dsub+0x306>
 80085a6:	2a1f      	cmp	r2, #31
 80085a8:	dc00      	bgt.n	80085ac <__aeabi_dsub+0x188>
 80085aa:	e1bb      	b.n	8008924 <__aeabi_dsub+0x500>
 80085ac:	000c      	movs	r4, r1
 80085ae:	3a20      	subs	r2, #32
 80085b0:	40d4      	lsrs	r4, r2
 80085b2:	0022      	movs	r2, r4
 80085b4:	4664      	mov	r4, ip
 80085b6:	2c20      	cmp	r4, #32
 80085b8:	d004      	beq.n	80085c4 <__aeabi_dsub+0x1a0>
 80085ba:	2740      	movs	r7, #64	; 0x40
 80085bc:	1b3f      	subs	r7, r7, r4
 80085be:	40b9      	lsls	r1, r7
 80085c0:	4308      	orrs	r0, r1
 80085c2:	4680      	mov	r8, r0
 80085c4:	4644      	mov	r4, r8
 80085c6:	1e61      	subs	r1, r4, #1
 80085c8:	418c      	sbcs	r4, r1
 80085ca:	4314      	orrs	r4, r2
 80085cc:	e0b1      	b.n	8008732 <__aeabi_dsub+0x30e>
 80085ce:	000c      	movs	r4, r1
 80085d0:	4304      	orrs	r4, r0
 80085d2:	d02a      	beq.n	800862a <__aeabi_dsub+0x206>
 80085d4:	46bb      	mov	fp, r7
 80085d6:	42bd      	cmp	r5, r7
 80085d8:	d02d      	beq.n	8008636 <__aeabi_dsub+0x212>
 80085da:	4c61      	ldr	r4, [pc, #388]	; (8008760 <__aeabi_dsub+0x33c>)
 80085dc:	46a4      	mov	ip, r4
 80085de:	44b4      	add	ip, r6
 80085e0:	4664      	mov	r4, ip
 80085e2:	2c00      	cmp	r4, #0
 80085e4:	d05c      	beq.n	80086a0 <__aeabi_dsub+0x27c>
 80085e6:	1b94      	subs	r4, r2, r6
 80085e8:	46a4      	mov	ip, r4
 80085ea:	2e00      	cmp	r6, #0
 80085ec:	d000      	beq.n	80085f0 <__aeabi_dsub+0x1cc>
 80085ee:	e115      	b.n	800881c <__aeabi_dsub+0x3f8>
 80085f0:	464d      	mov	r5, r9
 80085f2:	431d      	orrs	r5, r3
 80085f4:	d100      	bne.n	80085f8 <__aeabi_dsub+0x1d4>
 80085f6:	e1c3      	b.n	8008980 <__aeabi_dsub+0x55c>
 80085f8:	1e65      	subs	r5, r4, #1
 80085fa:	2c01      	cmp	r4, #1
 80085fc:	d100      	bne.n	8008600 <__aeabi_dsub+0x1dc>
 80085fe:	e20c      	b.n	8008a1a <__aeabi_dsub+0x5f6>
 8008600:	4e55      	ldr	r6, [pc, #340]	; (8008758 <__aeabi_dsub+0x334>)
 8008602:	42b4      	cmp	r4, r6
 8008604:	d100      	bne.n	8008608 <__aeabi_dsub+0x1e4>
 8008606:	e1f8      	b.n	80089fa <__aeabi_dsub+0x5d6>
 8008608:	46ac      	mov	ip, r5
 800860a:	e10e      	b.n	800882a <__aeabi_dsub+0x406>
 800860c:	000a      	movs	r2, r1
 800860e:	4302      	orrs	r2, r0
 8008610:	d100      	bne.n	8008614 <__aeabi_dsub+0x1f0>
 8008612:	e136      	b.n	8008882 <__aeabi_dsub+0x45e>
 8008614:	0022      	movs	r2, r4
 8008616:	3a01      	subs	r2, #1
 8008618:	2c01      	cmp	r4, #1
 800861a:	d100      	bne.n	800861e <__aeabi_dsub+0x1fa>
 800861c:	e1c6      	b.n	80089ac <__aeabi_dsub+0x588>
 800861e:	4c4e      	ldr	r4, [pc, #312]	; (8008758 <__aeabi_dsub+0x334>)
 8008620:	45a4      	cmp	ip, r4
 8008622:	d100      	bne.n	8008626 <__aeabi_dsub+0x202>
 8008624:	e0f4      	b.n	8008810 <__aeabi_dsub+0x3ec>
 8008626:	4694      	mov	ip, r2
 8008628:	e731      	b.n	800848e <__aeabi_dsub+0x6a>
 800862a:	2401      	movs	r4, #1
 800862c:	4067      	eors	r7, r4
 800862e:	46bb      	mov	fp, r7
 8008630:	42bd      	cmp	r5, r7
 8008632:	d000      	beq.n	8008636 <__aeabi_dsub+0x212>
 8008634:	e71c      	b.n	8008470 <__aeabi_dsub+0x4c>
 8008636:	4c4a      	ldr	r4, [pc, #296]	; (8008760 <__aeabi_dsub+0x33c>)
 8008638:	46a4      	mov	ip, r4
 800863a:	44b4      	add	ip, r6
 800863c:	4664      	mov	r4, ip
 800863e:	2c00      	cmp	r4, #0
 8008640:	d100      	bne.n	8008644 <__aeabi_dsub+0x220>
 8008642:	e0cf      	b.n	80087e4 <__aeabi_dsub+0x3c0>
 8008644:	1b94      	subs	r4, r2, r6
 8008646:	46a4      	mov	ip, r4
 8008648:	2e00      	cmp	r6, #0
 800864a:	d100      	bne.n	800864e <__aeabi_dsub+0x22a>
 800864c:	e15c      	b.n	8008908 <__aeabi_dsub+0x4e4>
 800864e:	4e42      	ldr	r6, [pc, #264]	; (8008758 <__aeabi_dsub+0x334>)
 8008650:	42b2      	cmp	r2, r6
 8008652:	d100      	bne.n	8008656 <__aeabi_dsub+0x232>
 8008654:	e1ec      	b.n	8008a30 <__aeabi_dsub+0x60c>
 8008656:	2680      	movs	r6, #128	; 0x80
 8008658:	0436      	lsls	r6, r6, #16
 800865a:	4333      	orrs	r3, r6
 800865c:	4664      	mov	r4, ip
 800865e:	2c38      	cmp	r4, #56	; 0x38
 8008660:	dd00      	ble.n	8008664 <__aeabi_dsub+0x240>
 8008662:	e1b3      	b.n	80089cc <__aeabi_dsub+0x5a8>
 8008664:	2c1f      	cmp	r4, #31
 8008666:	dd00      	ble.n	800866a <__aeabi_dsub+0x246>
 8008668:	e238      	b.n	8008adc <__aeabi_dsub+0x6b8>
 800866a:	2620      	movs	r6, #32
 800866c:	1b36      	subs	r6, r6, r4
 800866e:	001c      	movs	r4, r3
 8008670:	40b4      	lsls	r4, r6
 8008672:	464f      	mov	r7, r9
 8008674:	46a0      	mov	r8, r4
 8008676:	4664      	mov	r4, ip
 8008678:	40e7      	lsrs	r7, r4
 800867a:	4644      	mov	r4, r8
 800867c:	433c      	orrs	r4, r7
 800867e:	464f      	mov	r7, r9
 8008680:	40b7      	lsls	r7, r6
 8008682:	003e      	movs	r6, r7
 8008684:	1e77      	subs	r7, r6, #1
 8008686:	41be      	sbcs	r6, r7
 8008688:	4334      	orrs	r4, r6
 800868a:	4666      	mov	r6, ip
 800868c:	40f3      	lsrs	r3, r6
 800868e:	18c9      	adds	r1, r1, r3
 8008690:	1824      	adds	r4, r4, r0
 8008692:	4284      	cmp	r4, r0
 8008694:	419b      	sbcs	r3, r3
 8008696:	425b      	negs	r3, r3
 8008698:	4698      	mov	r8, r3
 800869a:	0016      	movs	r6, r2
 800869c:	4488      	add	r8, r1
 800869e:	e04e      	b.n	800873e <__aeabi_dsub+0x31a>
 80086a0:	4a30      	ldr	r2, [pc, #192]	; (8008764 <__aeabi_dsub+0x340>)
 80086a2:	1c74      	adds	r4, r6, #1
 80086a4:	4214      	tst	r4, r2
 80086a6:	d000      	beq.n	80086aa <__aeabi_dsub+0x286>
 80086a8:	e0d6      	b.n	8008858 <__aeabi_dsub+0x434>
 80086aa:	464a      	mov	r2, r9
 80086ac:	431a      	orrs	r2, r3
 80086ae:	2e00      	cmp	r6, #0
 80086b0:	d000      	beq.n	80086b4 <__aeabi_dsub+0x290>
 80086b2:	e15b      	b.n	800896c <__aeabi_dsub+0x548>
 80086b4:	2a00      	cmp	r2, #0
 80086b6:	d100      	bne.n	80086ba <__aeabi_dsub+0x296>
 80086b8:	e1a5      	b.n	8008a06 <__aeabi_dsub+0x5e2>
 80086ba:	000a      	movs	r2, r1
 80086bc:	4302      	orrs	r2, r0
 80086be:	d000      	beq.n	80086c2 <__aeabi_dsub+0x29e>
 80086c0:	e1bb      	b.n	8008a3a <__aeabi_dsub+0x616>
 80086c2:	464a      	mov	r2, r9
 80086c4:	0759      	lsls	r1, r3, #29
 80086c6:	08d2      	lsrs	r2, r2, #3
 80086c8:	430a      	orrs	r2, r1
 80086ca:	08db      	lsrs	r3, r3, #3
 80086cc:	e027      	b.n	800871e <__aeabi_dsub+0x2fa>
 80086ce:	000a      	movs	r2, r1
 80086d0:	4302      	orrs	r2, r0
 80086d2:	d100      	bne.n	80086d6 <__aeabi_dsub+0x2b2>
 80086d4:	e174      	b.n	80089c0 <__aeabi_dsub+0x59c>
 80086d6:	0022      	movs	r2, r4
 80086d8:	3a01      	subs	r2, #1
 80086da:	2c01      	cmp	r4, #1
 80086dc:	d005      	beq.n	80086ea <__aeabi_dsub+0x2c6>
 80086de:	4c1e      	ldr	r4, [pc, #120]	; (8008758 <__aeabi_dsub+0x334>)
 80086e0:	45a4      	cmp	ip, r4
 80086e2:	d100      	bne.n	80086e6 <__aeabi_dsub+0x2c2>
 80086e4:	e094      	b.n	8008810 <__aeabi_dsub+0x3ec>
 80086e6:	4694      	mov	ip, r2
 80086e8:	e759      	b.n	800859e <__aeabi_dsub+0x17a>
 80086ea:	4448      	add	r0, r9
 80086ec:	4548      	cmp	r0, r9
 80086ee:	4192      	sbcs	r2, r2
 80086f0:	185b      	adds	r3, r3, r1
 80086f2:	4698      	mov	r8, r3
 80086f4:	0004      	movs	r4, r0
 80086f6:	4252      	negs	r2, r2
 80086f8:	4490      	add	r8, r2
 80086fa:	4643      	mov	r3, r8
 80086fc:	2602      	movs	r6, #2
 80086fe:	021b      	lsls	r3, r3, #8
 8008700:	d500      	bpl.n	8008704 <__aeabi_dsub+0x2e0>
 8008702:	e0c4      	b.n	800888e <__aeabi_dsub+0x46a>
 8008704:	3e01      	subs	r6, #1
 8008706:	0763      	lsls	r3, r4, #29
 8008708:	d000      	beq.n	800870c <__aeabi_dsub+0x2e8>
 800870a:	e711      	b.n	8008530 <__aeabi_dsub+0x10c>
 800870c:	4643      	mov	r3, r8
 800870e:	46b4      	mov	ip, r6
 8008710:	0759      	lsls	r1, r3, #29
 8008712:	08e2      	lsrs	r2, r4, #3
 8008714:	430a      	orrs	r2, r1
 8008716:	08db      	lsrs	r3, r3, #3
 8008718:	490f      	ldr	r1, [pc, #60]	; (8008758 <__aeabi_dsub+0x334>)
 800871a:	458c      	cmp	ip, r1
 800871c:	d040      	beq.n	80087a0 <__aeabi_dsub+0x37c>
 800871e:	4661      	mov	r1, ip
 8008720:	031b      	lsls	r3, r3, #12
 8008722:	0549      	lsls	r1, r1, #21
 8008724:	0b1b      	lsrs	r3, r3, #12
 8008726:	0d49      	lsrs	r1, r1, #21
 8008728:	e720      	b.n	800856c <__aeabi_dsub+0x148>
 800872a:	4301      	orrs	r1, r0
 800872c:	000c      	movs	r4, r1
 800872e:	1e61      	subs	r1, r4, #1
 8008730:	418c      	sbcs	r4, r1
 8008732:	444c      	add	r4, r9
 8008734:	454c      	cmp	r4, r9
 8008736:	4192      	sbcs	r2, r2
 8008738:	4252      	negs	r2, r2
 800873a:	4690      	mov	r8, r2
 800873c:	4498      	add	r8, r3
 800873e:	4643      	mov	r3, r8
 8008740:	021b      	lsls	r3, r3, #8
 8008742:	d5e0      	bpl.n	8008706 <__aeabi_dsub+0x2e2>
 8008744:	4b04      	ldr	r3, [pc, #16]	; (8008758 <__aeabi_dsub+0x334>)
 8008746:	3601      	adds	r6, #1
 8008748:	429e      	cmp	r6, r3
 800874a:	d000      	beq.n	800874e <__aeabi_dsub+0x32a>
 800874c:	e09f      	b.n	800888e <__aeabi_dsub+0x46a>
 800874e:	0031      	movs	r1, r6
 8008750:	2300      	movs	r3, #0
 8008752:	2200      	movs	r2, #0
 8008754:	e70a      	b.n	800856c <__aeabi_dsub+0x148>
 8008756:	46c0      	nop			; (mov r8, r8)
 8008758:	000007ff 	.word	0x000007ff
 800875c:	ff7fffff 	.word	0xff7fffff
 8008760:	fffff801 	.word	0xfffff801
 8008764:	000007fe 	.word	0x000007fe
 8008768:	2a00      	cmp	r2, #0
 800876a:	d100      	bne.n	800876e <__aeabi_dsub+0x34a>
 800876c:	e160      	b.n	8008a30 <__aeabi_dsub+0x60c>
 800876e:	000a      	movs	r2, r1
 8008770:	4302      	orrs	r2, r0
 8008772:	d04d      	beq.n	8008810 <__aeabi_dsub+0x3ec>
 8008774:	464a      	mov	r2, r9
 8008776:	075c      	lsls	r4, r3, #29
 8008778:	08d2      	lsrs	r2, r2, #3
 800877a:	4322      	orrs	r2, r4
 800877c:	2480      	movs	r4, #128	; 0x80
 800877e:	08db      	lsrs	r3, r3, #3
 8008780:	0324      	lsls	r4, r4, #12
 8008782:	4223      	tst	r3, r4
 8008784:	d007      	beq.n	8008796 <__aeabi_dsub+0x372>
 8008786:	08ce      	lsrs	r6, r1, #3
 8008788:	4226      	tst	r6, r4
 800878a:	d104      	bne.n	8008796 <__aeabi_dsub+0x372>
 800878c:	465d      	mov	r5, fp
 800878e:	0033      	movs	r3, r6
 8008790:	08c2      	lsrs	r2, r0, #3
 8008792:	0749      	lsls	r1, r1, #29
 8008794:	430a      	orrs	r2, r1
 8008796:	0f51      	lsrs	r1, r2, #29
 8008798:	00d2      	lsls	r2, r2, #3
 800879a:	08d2      	lsrs	r2, r2, #3
 800879c:	0749      	lsls	r1, r1, #29
 800879e:	430a      	orrs	r2, r1
 80087a0:	0011      	movs	r1, r2
 80087a2:	4319      	orrs	r1, r3
 80087a4:	d100      	bne.n	80087a8 <__aeabi_dsub+0x384>
 80087a6:	e1c8      	b.n	8008b3a <__aeabi_dsub+0x716>
 80087a8:	2180      	movs	r1, #128	; 0x80
 80087aa:	0309      	lsls	r1, r1, #12
 80087ac:	430b      	orrs	r3, r1
 80087ae:	031b      	lsls	r3, r3, #12
 80087b0:	49d5      	ldr	r1, [pc, #852]	; (8008b08 <__aeabi_dsub+0x6e4>)
 80087b2:	0b1b      	lsrs	r3, r3, #12
 80087b4:	e6da      	b.n	800856c <__aeabi_dsub+0x148>
 80087b6:	49d5      	ldr	r1, [pc, #852]	; (8008b0c <__aeabi_dsub+0x6e8>)
 80087b8:	1ab6      	subs	r6, r6, r2
 80087ba:	400b      	ands	r3, r1
 80087bc:	4698      	mov	r8, r3
 80087be:	e6b5      	b.n	800852c <__aeabi_dsub+0x108>
 80087c0:	0020      	movs	r0, r4
 80087c2:	f000 fa4d 	bl	8008c60 <__clzsi2>
 80087c6:	0002      	movs	r2, r0
 80087c8:	3218      	adds	r2, #24
 80087ca:	2a1f      	cmp	r2, #31
 80087cc:	dc00      	bgt.n	80087d0 <__aeabi_dsub+0x3ac>
 80087ce:	e68f      	b.n	80084f0 <__aeabi_dsub+0xcc>
 80087d0:	0023      	movs	r3, r4
 80087d2:	3808      	subs	r0, #8
 80087d4:	4083      	lsls	r3, r0
 80087d6:	2400      	movs	r4, #0
 80087d8:	e692      	b.n	8008500 <__aeabi_dsub+0xdc>
 80087da:	4308      	orrs	r0, r1
 80087dc:	0002      	movs	r2, r0
 80087de:	1e50      	subs	r0, r2, #1
 80087e0:	4182      	sbcs	r2, r0
 80087e2:	e66d      	b.n	80084c0 <__aeabi_dsub+0x9c>
 80087e4:	4cca      	ldr	r4, [pc, #808]	; (8008b10 <__aeabi_dsub+0x6ec>)
 80087e6:	1c72      	adds	r2, r6, #1
 80087e8:	4222      	tst	r2, r4
 80087ea:	d000      	beq.n	80087ee <__aeabi_dsub+0x3ca>
 80087ec:	e0ad      	b.n	800894a <__aeabi_dsub+0x526>
 80087ee:	464a      	mov	r2, r9
 80087f0:	431a      	orrs	r2, r3
 80087f2:	2e00      	cmp	r6, #0
 80087f4:	d1b8      	bne.n	8008768 <__aeabi_dsub+0x344>
 80087f6:	2a00      	cmp	r2, #0
 80087f8:	d100      	bne.n	80087fc <__aeabi_dsub+0x3d8>
 80087fa:	e158      	b.n	8008aae <__aeabi_dsub+0x68a>
 80087fc:	000a      	movs	r2, r1
 80087fe:	4302      	orrs	r2, r0
 8008800:	d000      	beq.n	8008804 <__aeabi_dsub+0x3e0>
 8008802:	e159      	b.n	8008ab8 <__aeabi_dsub+0x694>
 8008804:	464a      	mov	r2, r9
 8008806:	0759      	lsls	r1, r3, #29
 8008808:	08d2      	lsrs	r2, r2, #3
 800880a:	430a      	orrs	r2, r1
 800880c:	08db      	lsrs	r3, r3, #3
 800880e:	e786      	b.n	800871e <__aeabi_dsub+0x2fa>
 8008810:	464a      	mov	r2, r9
 8008812:	0759      	lsls	r1, r3, #29
 8008814:	08d2      	lsrs	r2, r2, #3
 8008816:	430a      	orrs	r2, r1
 8008818:	08db      	lsrs	r3, r3, #3
 800881a:	e7c1      	b.n	80087a0 <__aeabi_dsub+0x37c>
 800881c:	4dba      	ldr	r5, [pc, #744]	; (8008b08 <__aeabi_dsub+0x6e4>)
 800881e:	42aa      	cmp	r2, r5
 8008820:	d100      	bne.n	8008824 <__aeabi_dsub+0x400>
 8008822:	e11e      	b.n	8008a62 <__aeabi_dsub+0x63e>
 8008824:	2580      	movs	r5, #128	; 0x80
 8008826:	042d      	lsls	r5, r5, #16
 8008828:	432b      	orrs	r3, r5
 800882a:	4664      	mov	r4, ip
 800882c:	2c38      	cmp	r4, #56	; 0x38
 800882e:	dc5d      	bgt.n	80088ec <__aeabi_dsub+0x4c8>
 8008830:	2c1f      	cmp	r4, #31
 8008832:	dd00      	ble.n	8008836 <__aeabi_dsub+0x412>
 8008834:	e0d0      	b.n	80089d8 <__aeabi_dsub+0x5b4>
 8008836:	2520      	movs	r5, #32
 8008838:	4667      	mov	r7, ip
 800883a:	1b2d      	subs	r5, r5, r4
 800883c:	464e      	mov	r6, r9
 800883e:	001c      	movs	r4, r3
 8008840:	40fe      	lsrs	r6, r7
 8008842:	40ac      	lsls	r4, r5
 8008844:	4334      	orrs	r4, r6
 8008846:	464e      	mov	r6, r9
 8008848:	40ae      	lsls	r6, r5
 800884a:	0035      	movs	r5, r6
 800884c:	40fb      	lsrs	r3, r7
 800884e:	1e6e      	subs	r6, r5, #1
 8008850:	41b5      	sbcs	r5, r6
 8008852:	1ac9      	subs	r1, r1, r3
 8008854:	432c      	orrs	r4, r5
 8008856:	e04e      	b.n	80088f6 <__aeabi_dsub+0x4d2>
 8008858:	464a      	mov	r2, r9
 800885a:	1a14      	subs	r4, r2, r0
 800885c:	45a1      	cmp	r9, r4
 800885e:	4192      	sbcs	r2, r2
 8008860:	4252      	negs	r2, r2
 8008862:	4690      	mov	r8, r2
 8008864:	1a5f      	subs	r7, r3, r1
 8008866:	003a      	movs	r2, r7
 8008868:	4647      	mov	r7, r8
 800886a:	1bd2      	subs	r2, r2, r7
 800886c:	4690      	mov	r8, r2
 800886e:	0212      	lsls	r2, r2, #8
 8008870:	d500      	bpl.n	8008874 <__aeabi_dsub+0x450>
 8008872:	e08b      	b.n	800898c <__aeabi_dsub+0x568>
 8008874:	4642      	mov	r2, r8
 8008876:	4322      	orrs	r2, r4
 8008878:	d000      	beq.n	800887c <__aeabi_dsub+0x458>
 800887a:	e630      	b.n	80084de <__aeabi_dsub+0xba>
 800887c:	2300      	movs	r3, #0
 800887e:	2500      	movs	r5, #0
 8008880:	e74d      	b.n	800871e <__aeabi_dsub+0x2fa>
 8008882:	464a      	mov	r2, r9
 8008884:	0759      	lsls	r1, r3, #29
 8008886:	08d2      	lsrs	r2, r2, #3
 8008888:	430a      	orrs	r2, r1
 800888a:	08db      	lsrs	r3, r3, #3
 800888c:	e744      	b.n	8008718 <__aeabi_dsub+0x2f4>
 800888e:	4642      	mov	r2, r8
 8008890:	4b9e      	ldr	r3, [pc, #632]	; (8008b0c <__aeabi_dsub+0x6e8>)
 8008892:	0861      	lsrs	r1, r4, #1
 8008894:	401a      	ands	r2, r3
 8008896:	0013      	movs	r3, r2
 8008898:	2201      	movs	r2, #1
 800889a:	4014      	ands	r4, r2
 800889c:	430c      	orrs	r4, r1
 800889e:	07da      	lsls	r2, r3, #31
 80088a0:	085b      	lsrs	r3, r3, #1
 80088a2:	4698      	mov	r8, r3
 80088a4:	4314      	orrs	r4, r2
 80088a6:	e641      	b.n	800852c <__aeabi_dsub+0x108>
 80088a8:	001a      	movs	r2, r3
 80088aa:	3e1f      	subs	r6, #31
 80088ac:	40f2      	lsrs	r2, r6
 80088ae:	0016      	movs	r6, r2
 80088b0:	2920      	cmp	r1, #32
 80088b2:	d003      	beq.n	80088bc <__aeabi_dsub+0x498>
 80088b4:	2240      	movs	r2, #64	; 0x40
 80088b6:	1a51      	subs	r1, r2, r1
 80088b8:	408b      	lsls	r3, r1
 80088ba:	431c      	orrs	r4, r3
 80088bc:	1e62      	subs	r2, r4, #1
 80088be:	4194      	sbcs	r4, r2
 80088c0:	2300      	movs	r3, #0
 80088c2:	4334      	orrs	r4, r6
 80088c4:	4698      	mov	r8, r3
 80088c6:	2600      	movs	r6, #0
 80088c8:	e71d      	b.n	8008706 <__aeabi_dsub+0x2e2>
 80088ca:	000c      	movs	r4, r1
 80088cc:	3a20      	subs	r2, #32
 80088ce:	40d4      	lsrs	r4, r2
 80088d0:	0022      	movs	r2, r4
 80088d2:	4664      	mov	r4, ip
 80088d4:	2c20      	cmp	r4, #32
 80088d6:	d004      	beq.n	80088e2 <__aeabi_dsub+0x4be>
 80088d8:	2740      	movs	r7, #64	; 0x40
 80088da:	1b3f      	subs	r7, r7, r4
 80088dc:	40b9      	lsls	r1, r7
 80088de:	4308      	orrs	r0, r1
 80088e0:	4680      	mov	r8, r0
 80088e2:	4644      	mov	r4, r8
 80088e4:	1e61      	subs	r1, r4, #1
 80088e6:	418c      	sbcs	r4, r1
 80088e8:	4322      	orrs	r2, r4
 80088ea:	e5e9      	b.n	80084c0 <__aeabi_dsub+0x9c>
 80088ec:	464c      	mov	r4, r9
 80088ee:	4323      	orrs	r3, r4
 80088f0:	001c      	movs	r4, r3
 80088f2:	1e63      	subs	r3, r4, #1
 80088f4:	419c      	sbcs	r4, r3
 80088f6:	1b04      	subs	r4, r0, r4
 80088f8:	42a0      	cmp	r0, r4
 80088fa:	419b      	sbcs	r3, r3
 80088fc:	425b      	negs	r3, r3
 80088fe:	1acb      	subs	r3, r1, r3
 8008900:	4698      	mov	r8, r3
 8008902:	465d      	mov	r5, fp
 8008904:	0016      	movs	r6, r2
 8008906:	e5e2      	b.n	80084ce <__aeabi_dsub+0xaa>
 8008908:	464e      	mov	r6, r9
 800890a:	431e      	orrs	r6, r3
 800890c:	d100      	bne.n	8008910 <__aeabi_dsub+0x4ec>
 800890e:	e0ae      	b.n	8008a6e <__aeabi_dsub+0x64a>
 8008910:	1e66      	subs	r6, r4, #1
 8008912:	2c01      	cmp	r4, #1
 8008914:	d100      	bne.n	8008918 <__aeabi_dsub+0x4f4>
 8008916:	e0fd      	b.n	8008b14 <__aeabi_dsub+0x6f0>
 8008918:	4f7b      	ldr	r7, [pc, #492]	; (8008b08 <__aeabi_dsub+0x6e4>)
 800891a:	42bc      	cmp	r4, r7
 800891c:	d100      	bne.n	8008920 <__aeabi_dsub+0x4fc>
 800891e:	e107      	b.n	8008b30 <__aeabi_dsub+0x70c>
 8008920:	46b4      	mov	ip, r6
 8008922:	e69b      	b.n	800865c <__aeabi_dsub+0x238>
 8008924:	4664      	mov	r4, ip
 8008926:	2220      	movs	r2, #32
 8008928:	1b12      	subs	r2, r2, r4
 800892a:	000c      	movs	r4, r1
 800892c:	4094      	lsls	r4, r2
 800892e:	0007      	movs	r7, r0
 8008930:	4090      	lsls	r0, r2
 8008932:	46a0      	mov	r8, r4
 8008934:	4664      	mov	r4, ip
 8008936:	1e42      	subs	r2, r0, #1
 8008938:	4190      	sbcs	r0, r2
 800893a:	4662      	mov	r2, ip
 800893c:	40e7      	lsrs	r7, r4
 800893e:	4644      	mov	r4, r8
 8008940:	40d1      	lsrs	r1, r2
 8008942:	433c      	orrs	r4, r7
 8008944:	4304      	orrs	r4, r0
 8008946:	185b      	adds	r3, r3, r1
 8008948:	e6f3      	b.n	8008732 <__aeabi_dsub+0x30e>
 800894a:	4c6f      	ldr	r4, [pc, #444]	; (8008b08 <__aeabi_dsub+0x6e4>)
 800894c:	42a2      	cmp	r2, r4
 800894e:	d100      	bne.n	8008952 <__aeabi_dsub+0x52e>
 8008950:	e0d5      	b.n	8008afe <__aeabi_dsub+0x6da>
 8008952:	4448      	add	r0, r9
 8008954:	185b      	adds	r3, r3, r1
 8008956:	4548      	cmp	r0, r9
 8008958:	4189      	sbcs	r1, r1
 800895a:	4249      	negs	r1, r1
 800895c:	185b      	adds	r3, r3, r1
 800895e:	07dc      	lsls	r4, r3, #31
 8008960:	0840      	lsrs	r0, r0, #1
 8008962:	085b      	lsrs	r3, r3, #1
 8008964:	4698      	mov	r8, r3
 8008966:	0016      	movs	r6, r2
 8008968:	4304      	orrs	r4, r0
 800896a:	e6cc      	b.n	8008706 <__aeabi_dsub+0x2e2>
 800896c:	2a00      	cmp	r2, #0
 800896e:	d000      	beq.n	8008972 <__aeabi_dsub+0x54e>
 8008970:	e082      	b.n	8008a78 <__aeabi_dsub+0x654>
 8008972:	000a      	movs	r2, r1
 8008974:	4302      	orrs	r2, r0
 8008976:	d140      	bne.n	80089fa <__aeabi_dsub+0x5d6>
 8008978:	2380      	movs	r3, #128	; 0x80
 800897a:	2500      	movs	r5, #0
 800897c:	031b      	lsls	r3, r3, #12
 800897e:	e713      	b.n	80087a8 <__aeabi_dsub+0x384>
 8008980:	074b      	lsls	r3, r1, #29
 8008982:	08c2      	lsrs	r2, r0, #3
 8008984:	431a      	orrs	r2, r3
 8008986:	465d      	mov	r5, fp
 8008988:	08cb      	lsrs	r3, r1, #3
 800898a:	e6c5      	b.n	8008718 <__aeabi_dsub+0x2f4>
 800898c:	464a      	mov	r2, r9
 800898e:	1a84      	subs	r4, r0, r2
 8008990:	42a0      	cmp	r0, r4
 8008992:	4192      	sbcs	r2, r2
 8008994:	1acb      	subs	r3, r1, r3
 8008996:	4252      	negs	r2, r2
 8008998:	1a9b      	subs	r3, r3, r2
 800899a:	4698      	mov	r8, r3
 800899c:	465d      	mov	r5, fp
 800899e:	e59e      	b.n	80084de <__aeabi_dsub+0xba>
 80089a0:	464a      	mov	r2, r9
 80089a2:	0759      	lsls	r1, r3, #29
 80089a4:	08d2      	lsrs	r2, r2, #3
 80089a6:	430a      	orrs	r2, r1
 80089a8:	08db      	lsrs	r3, r3, #3
 80089aa:	e6f9      	b.n	80087a0 <__aeabi_dsub+0x37c>
 80089ac:	464a      	mov	r2, r9
 80089ae:	1a14      	subs	r4, r2, r0
 80089b0:	45a1      	cmp	r9, r4
 80089b2:	4192      	sbcs	r2, r2
 80089b4:	1a5b      	subs	r3, r3, r1
 80089b6:	4252      	negs	r2, r2
 80089b8:	1a9b      	subs	r3, r3, r2
 80089ba:	4698      	mov	r8, r3
 80089bc:	2601      	movs	r6, #1
 80089be:	e586      	b.n	80084ce <__aeabi_dsub+0xaa>
 80089c0:	464a      	mov	r2, r9
 80089c2:	0759      	lsls	r1, r3, #29
 80089c4:	08d2      	lsrs	r2, r2, #3
 80089c6:	430a      	orrs	r2, r1
 80089c8:	08db      	lsrs	r3, r3, #3
 80089ca:	e6a5      	b.n	8008718 <__aeabi_dsub+0x2f4>
 80089cc:	464c      	mov	r4, r9
 80089ce:	4323      	orrs	r3, r4
 80089d0:	001c      	movs	r4, r3
 80089d2:	1e63      	subs	r3, r4, #1
 80089d4:	419c      	sbcs	r4, r3
 80089d6:	e65b      	b.n	8008690 <__aeabi_dsub+0x26c>
 80089d8:	4665      	mov	r5, ip
 80089da:	001e      	movs	r6, r3
 80089dc:	3d20      	subs	r5, #32
 80089de:	40ee      	lsrs	r6, r5
 80089e0:	2c20      	cmp	r4, #32
 80089e2:	d005      	beq.n	80089f0 <__aeabi_dsub+0x5cc>
 80089e4:	2540      	movs	r5, #64	; 0x40
 80089e6:	1b2d      	subs	r5, r5, r4
 80089e8:	40ab      	lsls	r3, r5
 80089ea:	464c      	mov	r4, r9
 80089ec:	431c      	orrs	r4, r3
 80089ee:	46a2      	mov	sl, r4
 80089f0:	4654      	mov	r4, sl
 80089f2:	1e63      	subs	r3, r4, #1
 80089f4:	419c      	sbcs	r4, r3
 80089f6:	4334      	orrs	r4, r6
 80089f8:	e77d      	b.n	80088f6 <__aeabi_dsub+0x4d2>
 80089fa:	074b      	lsls	r3, r1, #29
 80089fc:	08c2      	lsrs	r2, r0, #3
 80089fe:	431a      	orrs	r2, r3
 8008a00:	465d      	mov	r5, fp
 8008a02:	08cb      	lsrs	r3, r1, #3
 8008a04:	e6cc      	b.n	80087a0 <__aeabi_dsub+0x37c>
 8008a06:	000a      	movs	r2, r1
 8008a08:	4302      	orrs	r2, r0
 8008a0a:	d100      	bne.n	8008a0e <__aeabi_dsub+0x5ea>
 8008a0c:	e736      	b.n	800887c <__aeabi_dsub+0x458>
 8008a0e:	074b      	lsls	r3, r1, #29
 8008a10:	08c2      	lsrs	r2, r0, #3
 8008a12:	431a      	orrs	r2, r3
 8008a14:	465d      	mov	r5, fp
 8008a16:	08cb      	lsrs	r3, r1, #3
 8008a18:	e681      	b.n	800871e <__aeabi_dsub+0x2fa>
 8008a1a:	464a      	mov	r2, r9
 8008a1c:	1a84      	subs	r4, r0, r2
 8008a1e:	42a0      	cmp	r0, r4
 8008a20:	4192      	sbcs	r2, r2
 8008a22:	1acb      	subs	r3, r1, r3
 8008a24:	4252      	negs	r2, r2
 8008a26:	1a9b      	subs	r3, r3, r2
 8008a28:	4698      	mov	r8, r3
 8008a2a:	465d      	mov	r5, fp
 8008a2c:	2601      	movs	r6, #1
 8008a2e:	e54e      	b.n	80084ce <__aeabi_dsub+0xaa>
 8008a30:	074b      	lsls	r3, r1, #29
 8008a32:	08c2      	lsrs	r2, r0, #3
 8008a34:	431a      	orrs	r2, r3
 8008a36:	08cb      	lsrs	r3, r1, #3
 8008a38:	e6b2      	b.n	80087a0 <__aeabi_dsub+0x37c>
 8008a3a:	464a      	mov	r2, r9
 8008a3c:	1a14      	subs	r4, r2, r0
 8008a3e:	45a1      	cmp	r9, r4
 8008a40:	4192      	sbcs	r2, r2
 8008a42:	1a5f      	subs	r7, r3, r1
 8008a44:	4252      	negs	r2, r2
 8008a46:	1aba      	subs	r2, r7, r2
 8008a48:	4690      	mov	r8, r2
 8008a4a:	0212      	lsls	r2, r2, #8
 8008a4c:	d56b      	bpl.n	8008b26 <__aeabi_dsub+0x702>
 8008a4e:	464a      	mov	r2, r9
 8008a50:	1a84      	subs	r4, r0, r2
 8008a52:	42a0      	cmp	r0, r4
 8008a54:	4192      	sbcs	r2, r2
 8008a56:	1acb      	subs	r3, r1, r3
 8008a58:	4252      	negs	r2, r2
 8008a5a:	1a9b      	subs	r3, r3, r2
 8008a5c:	4698      	mov	r8, r3
 8008a5e:	465d      	mov	r5, fp
 8008a60:	e564      	b.n	800852c <__aeabi_dsub+0x108>
 8008a62:	074b      	lsls	r3, r1, #29
 8008a64:	08c2      	lsrs	r2, r0, #3
 8008a66:	431a      	orrs	r2, r3
 8008a68:	465d      	mov	r5, fp
 8008a6a:	08cb      	lsrs	r3, r1, #3
 8008a6c:	e698      	b.n	80087a0 <__aeabi_dsub+0x37c>
 8008a6e:	074b      	lsls	r3, r1, #29
 8008a70:	08c2      	lsrs	r2, r0, #3
 8008a72:	431a      	orrs	r2, r3
 8008a74:	08cb      	lsrs	r3, r1, #3
 8008a76:	e64f      	b.n	8008718 <__aeabi_dsub+0x2f4>
 8008a78:	000a      	movs	r2, r1
 8008a7a:	4302      	orrs	r2, r0
 8008a7c:	d090      	beq.n	80089a0 <__aeabi_dsub+0x57c>
 8008a7e:	464a      	mov	r2, r9
 8008a80:	075c      	lsls	r4, r3, #29
 8008a82:	08d2      	lsrs	r2, r2, #3
 8008a84:	4314      	orrs	r4, r2
 8008a86:	2280      	movs	r2, #128	; 0x80
 8008a88:	08db      	lsrs	r3, r3, #3
 8008a8a:	0312      	lsls	r2, r2, #12
 8008a8c:	4213      	tst	r3, r2
 8008a8e:	d008      	beq.n	8008aa2 <__aeabi_dsub+0x67e>
 8008a90:	08ce      	lsrs	r6, r1, #3
 8008a92:	4216      	tst	r6, r2
 8008a94:	d105      	bne.n	8008aa2 <__aeabi_dsub+0x67e>
 8008a96:	08c0      	lsrs	r0, r0, #3
 8008a98:	0749      	lsls	r1, r1, #29
 8008a9a:	4308      	orrs	r0, r1
 8008a9c:	0004      	movs	r4, r0
 8008a9e:	465d      	mov	r5, fp
 8008aa0:	0033      	movs	r3, r6
 8008aa2:	0f61      	lsrs	r1, r4, #29
 8008aa4:	00e2      	lsls	r2, r4, #3
 8008aa6:	0749      	lsls	r1, r1, #29
 8008aa8:	08d2      	lsrs	r2, r2, #3
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	e678      	b.n	80087a0 <__aeabi_dsub+0x37c>
 8008aae:	074b      	lsls	r3, r1, #29
 8008ab0:	08c2      	lsrs	r2, r0, #3
 8008ab2:	431a      	orrs	r2, r3
 8008ab4:	08cb      	lsrs	r3, r1, #3
 8008ab6:	e632      	b.n	800871e <__aeabi_dsub+0x2fa>
 8008ab8:	4448      	add	r0, r9
 8008aba:	185b      	adds	r3, r3, r1
 8008abc:	4548      	cmp	r0, r9
 8008abe:	4192      	sbcs	r2, r2
 8008ac0:	4698      	mov	r8, r3
 8008ac2:	4252      	negs	r2, r2
 8008ac4:	4490      	add	r8, r2
 8008ac6:	4643      	mov	r3, r8
 8008ac8:	0004      	movs	r4, r0
 8008aca:	021b      	lsls	r3, r3, #8
 8008acc:	d400      	bmi.n	8008ad0 <__aeabi_dsub+0x6ac>
 8008ace:	e61a      	b.n	8008706 <__aeabi_dsub+0x2e2>
 8008ad0:	4642      	mov	r2, r8
 8008ad2:	4b0e      	ldr	r3, [pc, #56]	; (8008b0c <__aeabi_dsub+0x6e8>)
 8008ad4:	2601      	movs	r6, #1
 8008ad6:	401a      	ands	r2, r3
 8008ad8:	4690      	mov	r8, r2
 8008ada:	e614      	b.n	8008706 <__aeabi_dsub+0x2e2>
 8008adc:	4666      	mov	r6, ip
 8008ade:	001f      	movs	r7, r3
 8008ae0:	3e20      	subs	r6, #32
 8008ae2:	40f7      	lsrs	r7, r6
 8008ae4:	2c20      	cmp	r4, #32
 8008ae6:	d005      	beq.n	8008af4 <__aeabi_dsub+0x6d0>
 8008ae8:	2640      	movs	r6, #64	; 0x40
 8008aea:	1b36      	subs	r6, r6, r4
 8008aec:	40b3      	lsls	r3, r6
 8008aee:	464c      	mov	r4, r9
 8008af0:	431c      	orrs	r4, r3
 8008af2:	46a2      	mov	sl, r4
 8008af4:	4654      	mov	r4, sl
 8008af6:	1e63      	subs	r3, r4, #1
 8008af8:	419c      	sbcs	r4, r3
 8008afa:	433c      	orrs	r4, r7
 8008afc:	e5c8      	b.n	8008690 <__aeabi_dsub+0x26c>
 8008afe:	0011      	movs	r1, r2
 8008b00:	2300      	movs	r3, #0
 8008b02:	2200      	movs	r2, #0
 8008b04:	e532      	b.n	800856c <__aeabi_dsub+0x148>
 8008b06:	46c0      	nop			; (mov r8, r8)
 8008b08:	000007ff 	.word	0x000007ff
 8008b0c:	ff7fffff 	.word	0xff7fffff
 8008b10:	000007fe 	.word	0x000007fe
 8008b14:	464a      	mov	r2, r9
 8008b16:	1814      	adds	r4, r2, r0
 8008b18:	4284      	cmp	r4, r0
 8008b1a:	4192      	sbcs	r2, r2
 8008b1c:	185b      	adds	r3, r3, r1
 8008b1e:	4698      	mov	r8, r3
 8008b20:	4252      	negs	r2, r2
 8008b22:	4490      	add	r8, r2
 8008b24:	e5e9      	b.n	80086fa <__aeabi_dsub+0x2d6>
 8008b26:	4642      	mov	r2, r8
 8008b28:	4322      	orrs	r2, r4
 8008b2a:	d100      	bne.n	8008b2e <__aeabi_dsub+0x70a>
 8008b2c:	e6a6      	b.n	800887c <__aeabi_dsub+0x458>
 8008b2e:	e5ea      	b.n	8008706 <__aeabi_dsub+0x2e2>
 8008b30:	074b      	lsls	r3, r1, #29
 8008b32:	08c2      	lsrs	r2, r0, #3
 8008b34:	431a      	orrs	r2, r3
 8008b36:	08cb      	lsrs	r3, r1, #3
 8008b38:	e632      	b.n	80087a0 <__aeabi_dsub+0x37c>
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	4901      	ldr	r1, [pc, #4]	; (8008b44 <__aeabi_dsub+0x720>)
 8008b3e:	0013      	movs	r3, r2
 8008b40:	e514      	b.n	800856c <__aeabi_dsub+0x148>
 8008b42:	46c0      	nop			; (mov r8, r8)
 8008b44:	000007ff 	.word	0x000007ff

08008b48 <__aeabi_d2iz>:
 8008b48:	000a      	movs	r2, r1
 8008b4a:	b530      	push	{r4, r5, lr}
 8008b4c:	4c13      	ldr	r4, [pc, #76]	; (8008b9c <__aeabi_d2iz+0x54>)
 8008b4e:	0053      	lsls	r3, r2, #1
 8008b50:	0309      	lsls	r1, r1, #12
 8008b52:	0005      	movs	r5, r0
 8008b54:	0b09      	lsrs	r1, r1, #12
 8008b56:	2000      	movs	r0, #0
 8008b58:	0d5b      	lsrs	r3, r3, #21
 8008b5a:	0fd2      	lsrs	r2, r2, #31
 8008b5c:	42a3      	cmp	r3, r4
 8008b5e:	dd04      	ble.n	8008b6a <__aeabi_d2iz+0x22>
 8008b60:	480f      	ldr	r0, [pc, #60]	; (8008ba0 <__aeabi_d2iz+0x58>)
 8008b62:	4283      	cmp	r3, r0
 8008b64:	dd02      	ble.n	8008b6c <__aeabi_d2iz+0x24>
 8008b66:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <__aeabi_d2iz+0x5c>)
 8008b68:	18d0      	adds	r0, r2, r3
 8008b6a:	bd30      	pop	{r4, r5, pc}
 8008b6c:	2080      	movs	r0, #128	; 0x80
 8008b6e:	0340      	lsls	r0, r0, #13
 8008b70:	4301      	orrs	r1, r0
 8008b72:	480d      	ldr	r0, [pc, #52]	; (8008ba8 <__aeabi_d2iz+0x60>)
 8008b74:	1ac0      	subs	r0, r0, r3
 8008b76:	281f      	cmp	r0, #31
 8008b78:	dd08      	ble.n	8008b8c <__aeabi_d2iz+0x44>
 8008b7a:	480c      	ldr	r0, [pc, #48]	; (8008bac <__aeabi_d2iz+0x64>)
 8008b7c:	1ac3      	subs	r3, r0, r3
 8008b7e:	40d9      	lsrs	r1, r3
 8008b80:	000b      	movs	r3, r1
 8008b82:	4258      	negs	r0, r3
 8008b84:	2a00      	cmp	r2, #0
 8008b86:	d1f0      	bne.n	8008b6a <__aeabi_d2iz+0x22>
 8008b88:	0018      	movs	r0, r3
 8008b8a:	e7ee      	b.n	8008b6a <__aeabi_d2iz+0x22>
 8008b8c:	4c08      	ldr	r4, [pc, #32]	; (8008bb0 <__aeabi_d2iz+0x68>)
 8008b8e:	40c5      	lsrs	r5, r0
 8008b90:	46a4      	mov	ip, r4
 8008b92:	4463      	add	r3, ip
 8008b94:	4099      	lsls	r1, r3
 8008b96:	000b      	movs	r3, r1
 8008b98:	432b      	orrs	r3, r5
 8008b9a:	e7f2      	b.n	8008b82 <__aeabi_d2iz+0x3a>
 8008b9c:	000003fe 	.word	0x000003fe
 8008ba0:	0000041d 	.word	0x0000041d
 8008ba4:	7fffffff 	.word	0x7fffffff
 8008ba8:	00000433 	.word	0x00000433
 8008bac:	00000413 	.word	0x00000413
 8008bb0:	fffffbed 	.word	0xfffffbed

08008bb4 <__aeabi_i2d>:
 8008bb4:	b570      	push	{r4, r5, r6, lr}
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d016      	beq.n	8008be8 <__aeabi_i2d+0x34>
 8008bba:	17c3      	asrs	r3, r0, #31
 8008bbc:	18c5      	adds	r5, r0, r3
 8008bbe:	405d      	eors	r5, r3
 8008bc0:	0fc4      	lsrs	r4, r0, #31
 8008bc2:	0028      	movs	r0, r5
 8008bc4:	f000 f84c 	bl	8008c60 <__clzsi2>
 8008bc8:	4a11      	ldr	r2, [pc, #68]	; (8008c10 <__aeabi_i2d+0x5c>)
 8008bca:	1a12      	subs	r2, r2, r0
 8008bcc:	280a      	cmp	r0, #10
 8008bce:	dc16      	bgt.n	8008bfe <__aeabi_i2d+0x4a>
 8008bd0:	0003      	movs	r3, r0
 8008bd2:	002e      	movs	r6, r5
 8008bd4:	3315      	adds	r3, #21
 8008bd6:	409e      	lsls	r6, r3
 8008bd8:	230b      	movs	r3, #11
 8008bda:	1a18      	subs	r0, r3, r0
 8008bdc:	40c5      	lsrs	r5, r0
 8008bde:	0553      	lsls	r3, r2, #21
 8008be0:	032d      	lsls	r5, r5, #12
 8008be2:	0b2d      	lsrs	r5, r5, #12
 8008be4:	0d5b      	lsrs	r3, r3, #21
 8008be6:	e003      	b.n	8008bf0 <__aeabi_i2d+0x3c>
 8008be8:	2400      	movs	r4, #0
 8008bea:	2300      	movs	r3, #0
 8008bec:	2500      	movs	r5, #0
 8008bee:	2600      	movs	r6, #0
 8008bf0:	051b      	lsls	r3, r3, #20
 8008bf2:	432b      	orrs	r3, r5
 8008bf4:	07e4      	lsls	r4, r4, #31
 8008bf6:	4323      	orrs	r3, r4
 8008bf8:	0030      	movs	r0, r6
 8008bfa:	0019      	movs	r1, r3
 8008bfc:	bd70      	pop	{r4, r5, r6, pc}
 8008bfe:	380b      	subs	r0, #11
 8008c00:	4085      	lsls	r5, r0
 8008c02:	0553      	lsls	r3, r2, #21
 8008c04:	032d      	lsls	r5, r5, #12
 8008c06:	2600      	movs	r6, #0
 8008c08:	0b2d      	lsrs	r5, r5, #12
 8008c0a:	0d5b      	lsrs	r3, r3, #21
 8008c0c:	e7f0      	b.n	8008bf0 <__aeabi_i2d+0x3c>
 8008c0e:	46c0      	nop			; (mov r8, r8)
 8008c10:	0000041e 	.word	0x0000041e

08008c14 <__aeabi_ui2d>:
 8008c14:	b510      	push	{r4, lr}
 8008c16:	1e04      	subs	r4, r0, #0
 8008c18:	d010      	beq.n	8008c3c <__aeabi_ui2d+0x28>
 8008c1a:	f000 f821 	bl	8008c60 <__clzsi2>
 8008c1e:	4b0f      	ldr	r3, [pc, #60]	; (8008c5c <__aeabi_ui2d+0x48>)
 8008c20:	1a1b      	subs	r3, r3, r0
 8008c22:	280a      	cmp	r0, #10
 8008c24:	dc11      	bgt.n	8008c4a <__aeabi_ui2d+0x36>
 8008c26:	220b      	movs	r2, #11
 8008c28:	0021      	movs	r1, r4
 8008c2a:	1a12      	subs	r2, r2, r0
 8008c2c:	40d1      	lsrs	r1, r2
 8008c2e:	3015      	adds	r0, #21
 8008c30:	030a      	lsls	r2, r1, #12
 8008c32:	055b      	lsls	r3, r3, #21
 8008c34:	4084      	lsls	r4, r0
 8008c36:	0b12      	lsrs	r2, r2, #12
 8008c38:	0d5b      	lsrs	r3, r3, #21
 8008c3a:	e001      	b.n	8008c40 <__aeabi_ui2d+0x2c>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	2200      	movs	r2, #0
 8008c40:	051b      	lsls	r3, r3, #20
 8008c42:	4313      	orrs	r3, r2
 8008c44:	0020      	movs	r0, r4
 8008c46:	0019      	movs	r1, r3
 8008c48:	bd10      	pop	{r4, pc}
 8008c4a:	0022      	movs	r2, r4
 8008c4c:	380b      	subs	r0, #11
 8008c4e:	4082      	lsls	r2, r0
 8008c50:	055b      	lsls	r3, r3, #21
 8008c52:	0312      	lsls	r2, r2, #12
 8008c54:	2400      	movs	r4, #0
 8008c56:	0b12      	lsrs	r2, r2, #12
 8008c58:	0d5b      	lsrs	r3, r3, #21
 8008c5a:	e7f1      	b.n	8008c40 <__aeabi_ui2d+0x2c>
 8008c5c:	0000041e 	.word	0x0000041e

08008c60 <__clzsi2>:
 8008c60:	211c      	movs	r1, #28
 8008c62:	2301      	movs	r3, #1
 8008c64:	041b      	lsls	r3, r3, #16
 8008c66:	4298      	cmp	r0, r3
 8008c68:	d301      	bcc.n	8008c6e <__clzsi2+0xe>
 8008c6a:	0c00      	lsrs	r0, r0, #16
 8008c6c:	3910      	subs	r1, #16
 8008c6e:	0a1b      	lsrs	r3, r3, #8
 8008c70:	4298      	cmp	r0, r3
 8008c72:	d301      	bcc.n	8008c78 <__clzsi2+0x18>
 8008c74:	0a00      	lsrs	r0, r0, #8
 8008c76:	3908      	subs	r1, #8
 8008c78:	091b      	lsrs	r3, r3, #4
 8008c7a:	4298      	cmp	r0, r3
 8008c7c:	d301      	bcc.n	8008c82 <__clzsi2+0x22>
 8008c7e:	0900      	lsrs	r0, r0, #4
 8008c80:	3904      	subs	r1, #4
 8008c82:	a202      	add	r2, pc, #8	; (adr r2, 8008c8c <__clzsi2+0x2c>)
 8008c84:	5c10      	ldrb	r0, [r2, r0]
 8008c86:	1840      	adds	r0, r0, r1
 8008c88:	4770      	bx	lr
 8008c8a:	46c0      	nop			; (mov r8, r8)
 8008c8c:	02020304 	.word	0x02020304
 8008c90:	01010101 	.word	0x01010101
	...

08008c9c <_sbrk>:
 8008c9c:	4a04      	ldr	r2, [pc, #16]	; (8008cb0 <_sbrk+0x14>)
 8008c9e:	0003      	movs	r3, r0
 8008ca0:	6810      	ldr	r0, [r2, #0]
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	d002      	beq.n	8008cac <_sbrk+0x10>
 8008ca6:	18c3      	adds	r3, r0, r3
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	4770      	bx	lr
 8008cac:	4801      	ldr	r0, [pc, #4]	; (8008cb4 <_sbrk+0x18>)
 8008cae:	e7fa      	b.n	8008ca6 <_sbrk+0xa>
 8008cb0:	20000a14 	.word	0x20000a14
 8008cb4:	20000a28 	.word	0x20000a28

08008cb8 <__mem_flash_do_page_erase_veneer>:
 8008cb8:	b401      	push	{r0}
 8008cba:	4802      	ldr	r0, [pc, #8]	; (8008cc4 <__mem_flash_do_page_erase_veneer+0xc>)
 8008cbc:	4684      	mov	ip, r0
 8008cbe:	bc01      	pop	{r0}
 8008cc0:	4760      	bx	ip
 8008cc2:	bf00      	nop
 8008cc4:	20000005 	.word	0x20000005

08008cc8 <__mem_flash_do_write_half_page_veneer>:
 8008cc8:	b401      	push	{r0}
 8008cca:	4802      	ldr	r0, [pc, #8]	; (8008cd4 <__mem_flash_do_write_half_page_veneer+0xc>)
 8008ccc:	4684      	mov	ip, r0
 8008cce:	bc01      	pop	{r0}
 8008cd0:	4760      	bx	ip
 8008cd2:	bf00      	nop
 8008cd4:	20000045 	.word	0x20000045
 8008cd8:	20627548 	.word	0x20627548
 8008cdc:	6f646552 	.word	0x6f646552
 8008ce0:	6f6c6e77 	.word	0x6f6c6e77
 8008ce4:	49206461 	.word	0x49206461
 8008ce8:	0a6f666e 	.word	0x0a6f666e
 8008cec:	00000000 	.word	0x00000000
 8008cf0:	74736554 	.word	0x74736554
 8008cf4:	20676e69 	.word	0x20676e69
 8008cf8:	20627548 	.word	0x20627548
 8008cfc:	00000a32 	.word	0x00000a32
 8008d00:	64616552 	.word	0x64616552
 8008d04:	00000a79 	.word	0x00000a79
 8008d08:	50746547 	.word	0x50746547
 8008d0c:	2073746b 	.word	0x2073746b
 8008d10:	000a7525 	.word	0x000a7525
 8008d14:	20435243 	.word	0x20435243
 8008d18:	6c696146 	.word	0x6c696146
 8008d1c:	0000000a 	.word	0x0000000a
 8008d20:	63724321 	.word	0x63724321
 8008d24:	0000000a 	.word	0x0000000a
 8008d28:	20435243 	.word	0x20435243
 8008d2c:	000a4b4f 	.word	0x000a4b4f
 8008d30:	4f637243 	.word	0x4f637243
 8008d34:	00000a6b 	.word	0x00000a6b
 8008d38:	6e6f7257 	.word	0x6e6f7257
 8008d3c:	65442067 	.word	0x65442067
 8008d40:	754e2076 	.word	0x754e2076
 8008d44:	25203a6d 	.word	0x25203a6d
 8008d48:	0a583830 	.word	0x0a583830
 8008d4c:	00000000 	.word	0x00000000
 8008d50:	254e4457 	.word	0x254e4457
 8008d54:	0a583830 	.word	0x0a583830
 8008d58:	00000000 	.word	0x00000000
 8008d5c:	4f746b50 	.word	0x4f746b50
 8008d60:	00000a6b 	.word	0x00000a6b
 8008d64:	73726946 	.word	0x73726946
 8008d68:	656d2074 	.word	0x656d2074
 8008d6c:	67617373 	.word	0x67617373
 8008d70:	72662065 	.word	0x72662065
 8008d74:	25206d6f 	.word	0x25206d6f
 8008d78:	754e0a75 	.word	0x754e0a75
 8008d7c:	7265626d 	.word	0x7265626d
 8008d80:	6925203a 	.word	0x6925203a
 8008d84:	0000000a 	.word	0x0000000a
 8008d88:	7373694d 	.word	0x7373694d
 8008d8c:	4d206465 	.word	0x4d206465
 8008d90:	61737365 	.word	0x61737365
 8008d94:	25206567 	.word	0x25206567
 8008d98:	00000a69 	.word	0x00000a69
 8008d9c:	69766544 	.word	0x69766544
 8008da0:	49206563 	.word	0x49206563
 8008da4:	25203a44 	.word	0x25203a44
 8008da8:	0a783830 	.word	0x0a783830
 8008dac:	00000000 	.word	0x00000000
 8008db0:	6b636150 	.word	0x6b636150
 8008db4:	52207465 	.word	0x52207465
 8008db8:	3a495353 	.word	0x3a495353
 8008dbc:	20692520 	.word	0x20692520
 8008dc0:	0a6d6264 	.word	0x0a6d6264
 8008dc4:	00000000 	.word	0x00000000
 8008dc8:	6b636150 	.word	0x6b636150
 8008dcc:	53207465 	.word	0x53207465
 8008dd0:	203a524e 	.word	0x203a524e
 8008dd4:	64206925 	.word	0x64206925
 8008dd8:	00000a42 	.word	0x00000a42
 8008ddc:	65776f50 	.word	0x65776f50
 8008de0:	25203a72 	.word	0x25203a72
 8008de4:	00000a69 	.word	0x00000a69
 8008de8:	74746142 	.word	0x74746142
 8008dec:	3a797265 	.word	0x3a797265
 8008df0:	56752520 	.word	0x56752520
 8008df4:	0000000a 	.word	0x0000000a
 8008df8:	706d6554 	.word	0x706d6554
 8008dfc:	74617265 	.word	0x74617265
 8008e00:	3a657275 	.word	0x3a657275
 8008e04:	0a692520 	.word	0x0a692520
 8008e08:	00000000 	.word	0x00000000
 8008e0c:	7373654d 	.word	0x7373654d
 8008e10:	20656761 	.word	0x20656761
 8008e14:	626d754e 	.word	0x626d754e
 8008e18:	203a7265 	.word	0x203a7265
 8008e1c:	000a6925 	.word	0x000a6925
 8008e20:	75636341 	.word	0x75636341
 8008e24:	79636172 	.word	0x79636172
 8008e28:	6925203a 	.word	0x6925203a
 8008e2c:	25202f20 	.word	0x25202f20
 8008e30:	61702069 	.word	0x61702069
 8008e34:	74656b63 	.word	0x74656b63
 8008e38:	000a0a73 	.word	0x000a0a73
 8008e3c:	6f6c7055 	.word	0x6f6c7055
 8008e40:	6e696461 	.word	0x6e696461
 8008e44:	00000a67 	.word	0x00000a67
 8008e48:	556d6953 	.word	0x556d6953
 8008e4c:	00000a70 	.word	0x00000a70
 8008e50:	496d6953 	.word	0x496d6953
 8008e54:	0a74696e 	.word	0x0a74696e
 8008e58:	00000000 	.word	0x00000000
 8008e5c:	436d6953 	.word	0x436d6953
 8008e60:	000a746e 	.word	0x000a746e
 8008e64:	446d6953 	.word	0x446d6953
 8008e68:	0a656e6f 	.word	0x0a656e6f
 8008e6c:	0000000a 	.word	0x0000000a
 8008e70:	74746142 	.word	0x74746142
 8008e74:	0a747352 	.word	0x0a747352
 8008e78:	00000000 	.word	0x00000000
 8008e7c:	20627548 	.word	0x20627548
 8008e80:	72617453 	.word	0x72617453
 8008e84:	00000a74 	.word	0x00000a74
 8008e88:	0a696d6e 	.word	0x0a696d6e
 8008e8c:	00000000 	.word	0x00000000
 8008e90:	64726168 	.word	0x64726168
 8008e94:	75616620 	.word	0x75616620
 8008e98:	000a746c 	.word	0x000a746c
 8008e9c:	206d6953 	.word	0x206d6953
 8008ea0:	74696e49 	.word	0x74696e49
 8008ea4:	0000000a 	.word	0x0000000a
 8008ea8:	30657461 	.word	0x30657461
 8008eac:	00000a0d 	.word	0x00000a0d
 8008eb0:	00004b4f 	.word	0x00004b4f
 8008eb4:	3a4d4953 	.word	0x3a4d4953
 8008eb8:	65746120 	.word	0x65746120
 8008ebc:	00000030 	.word	0x00000030
 8008ec0:	206d6953 	.word	0x206d6953
 8008ec4:	74696e49 	.word	0x74696e49
 8008ec8:	6e6f4420 	.word	0x6e6f4420
 8008ecc:	00000a65 	.word	0x00000a65
 8008ed0:	632b7461 	.word	0x632b7461
 8008ed4:	3d6e7566 	.word	0x3d6e7566
 8008ed8:	000a0d34 	.word	0x000a0d34
 8008edc:	3a4d4953 	.word	0x3a4d4953
 8008ee0:	2b746120 	.word	0x2b746120
 8008ee4:	6e756663 	.word	0x6e756663
 8008ee8:	0000343d 	.word	0x0000343d
 8008eec:	632b7461 	.word	0x632b7461
 8008ef0:	6b6c6373 	.word	0x6b6c6373
 8008ef4:	0a0d313d 	.word	0x0a0d313d
 8008ef8:	00000000 	.word	0x00000000
 8008efc:	3a4d4953 	.word	0x3a4d4953
 8008f00:	2b746120 	.word	0x2b746120
 8008f04:	6c637363 	.word	0x6c637363
 8008f08:	00313d6b 	.word	0x00313d6b
 8008f0c:	206d6953 	.word	0x206d6953
 8008f10:	20646e45 	.word	0x20646e45
 8008f14:	656e6f44 	.word	0x656e6f44
 8008f18:	0000000a 	.word	0x0000000a
 8008f1c:	0a0d7461 	.word	0x0a0d7461
 8008f20:	00000000 	.word	0x00000000
 8008f24:	3a4d4953 	.word	0x3a4d4953
 8008f28:	00746120 	.word	0x00746120
 8008f2c:	632b7461 	.word	0x632b7461
 8008f30:	3d6e7566 	.word	0x3d6e7566
 8008f34:	000a0d31 	.word	0x000a0d31
 8008f38:	3a4d4953 	.word	0x3a4d4953
 8008f3c:	2b746120 	.word	0x2b746120
 8008f40:	6e756663 	.word	0x6e756663
 8008f44:	0000313d 	.word	0x0000313d
 8008f48:	20534d53 	.word	0x20534d53
 8008f4c:	64616552 	.word	0x64616552
 8008f50:	00000079 	.word	0x00000079
 8008f54:	3a4d4953 	.word	0x3a4d4953
 8008f58:	534d5320 	.word	0x534d5320
 8008f5c:	61655220 	.word	0x61655220
 8008f60:	00007964 	.word	0x00007964
 8008f64:	632b7461 	.word	0x632b7461
 8008f68:	3d676572 	.word	0x3d676572
 8008f6c:	000a0d31 	.word	0x000a0d31
 8008f70:	4552432b 	.word	0x4552432b
 8008f74:	35203a47 	.word	0x35203a47
 8008f78:	00000000 	.word	0x00000000
 8008f7c:	3a4d4953 	.word	0x3a4d4953
 8008f80:	2b746120 	.word	0x2b746120
 8008f84:	67657263 	.word	0x67657263
 8008f88:	0000313d 	.word	0x0000313d
 8008f8c:	632b7461 	.word	0x632b7461
 8008f90:	3d676572 	.word	0x3d676572
 8008f94:	000a0d30 	.word	0x000a0d30
 8008f98:	3a4d4953 	.word	0x3a4d4953
 8008f9c:	2b746120 	.word	0x2b746120
 8008fa0:	67657263 	.word	0x67657263
 8008fa4:	0000303d 	.word	0x0000303d
 8008fa8:	732b7461 	.word	0x732b7461
 8008fac:	72627061 	.word	0x72627061
 8008fb0:	312c333d 	.word	0x312c333d
 8008fb4:	4e50412c 	.word	0x4e50412c
 8008fb8:	7461642c 	.word	0x7461642c
 8008fbc:	65722e61 	.word	0x65722e61
 8008fc0:	6f636977 	.word	0x6f636977
 8008fc4:	656e2e6d 	.word	0x656e2e6d
 8008fc8:	000a0d74 	.word	0x000a0d74
 8008fcc:	3a4d4953 	.word	0x3a4d4953
 8008fd0:	2b746120 	.word	0x2b746120
 8008fd4:	62706173 	.word	0x62706173
 8008fd8:	2c333d72 	.word	0x2c333d72
 8008fdc:	50412c31 	.word	0x50412c31
 8008fe0:	61642c4e 	.word	0x61642c4e
 8008fe4:	722e6174 	.word	0x722e6174
 8008fe8:	63697765 	.word	0x63697765
 8008fec:	6e2e6d6f 	.word	0x6e2e6d6f
 8008ff0:	00007465 	.word	0x00007465
 8008ff4:	682b7461 	.word	0x682b7461
 8008ff8:	69707474 	.word	0x69707474
 8008ffc:	0d74696e 	.word	0x0d74696e
 8009000:	0000000a 	.word	0x0000000a
 8009004:	3a4d4953 	.word	0x3a4d4953
 8009008:	2b746120 	.word	0x2b746120
 800900c:	70747468 	.word	0x70747468
 8009010:	74696e69 	.word	0x74696e69
 8009014:	00000000 	.word	0x00000000
 8009018:	682b7461 	.word	0x682b7461
 800901c:	70707474 	.word	0x70707474
 8009020:	3d617261 	.word	0x3d617261
 8009024:	2c646963 	.word	0x2c646963
 8009028:	000a0d31 	.word	0x000a0d31
 800902c:	3a4d4953 	.word	0x3a4d4953
 8009030:	2b746120 	.word	0x2b746120
 8009034:	70747468 	.word	0x70747468
 8009038:	61726170 	.word	0x61726170
 800903c:	6469633d 	.word	0x6469633d
 8009040:	0000312c 	.word	0x0000312c
 8009044:	682b7461 	.word	0x682b7461
 8009048:	70707474 	.word	0x70707474
 800904c:	3d617261 	.word	0x3d617261
 8009050:	2c6c7275 	.word	0x2c6c7275
 8009054:	2e777777 	.word	0x2e777777
 8009058:	63726963 	.word	0x63726963
 800905c:	62746975 	.word	0x62746975
 8009060:	6472616f 	.word	0x6472616f
 8009064:	756d6173 	.word	0x756d6173
 8009068:	2e696172 	.word	0x2e696172
 800906c:	3a6d6f63 	.word	0x3a6d6f63
 8009070:	35383038 	.word	0x35383038
 8009074:	6265772f 	.word	0x6265772f
 8009078:	65746973 	.word	0x65746973
 800907c:	6c70752f 	.word	0x6c70752f
 8009080:	5f64616f 	.word	0x5f64616f
 8009084:	65766173 	.word	0x65766173
 8009088:	6c6c615f 	.word	0x6c6c615f
 800908c:	7068702e 	.word	0x7068702e
 8009090:	003d733f 	.word	0x003d733f
 8009094:	58323025 	.word	0x58323025
 8009098:	00000000 	.word	0x00000000
 800909c:	000a0d4e 	.word	0x000a0d4e
 80090a0:	3a4d4953 	.word	0x3a4d4953
 80090a4:	2b746120 	.word	0x2b746120
 80090a8:	70747468 	.word	0x70747468
 80090ac:	61726170 	.word	0x61726170
 80090b0:	6c72753d 	.word	0x6c72753d
 80090b4:	7777772c 	.word	0x7777772c
 80090b8:	7269632e 	.word	0x7269632e
 80090bc:	74697563 	.word	0x74697563
 80090c0:	72616f62 	.word	0x72616f62
 80090c4:	6d617364 	.word	0x6d617364
 80090c8:	69617275 	.word	0x69617275
 80090cc:	6d6f632e 	.word	0x6d6f632e
 80090d0:	3830383a 	.word	0x3830383a
 80090d4:	65772f35 	.word	0x65772f35
 80090d8:	74697362 	.word	0x74697362
 80090dc:	70752f65 	.word	0x70752f65
 80090e0:	64616f6c 	.word	0x64616f6c
 80090e4:	7661735f 	.word	0x7661735f
 80090e8:	6c615f65 	.word	0x6c615f65
 80090ec:	68702e6c 	.word	0x68702e6c
 80090f0:	3d733f70 	.word	0x3d733f70
 80090f4:	00000000 	.word	0x00000000
 80090f8:	732b7461 	.word	0x732b7461
 80090fc:	72627061 	.word	0x72627061
 8009100:	312c313d 	.word	0x312c313d
 8009104:	00000a0d 	.word	0x00000a0d
 8009108:	3a4d4953 	.word	0x3a4d4953
 800910c:	2b746120 	.word	0x2b746120
 8009110:	62706173 	.word	0x62706173
 8009114:	2c313d72 	.word	0x2c313d72
 8009118:	00000031 	.word	0x00000031
 800911c:	682b7461 	.word	0x682b7461
 8009120:	61707474 	.word	0x61707474
 8009124:	6f697463 	.word	0x6f697463
 8009128:	0d303d6e 	.word	0x0d303d6e
 800912c:	0000000a 	.word	0x0000000a
 8009130:	3a4d4953 	.word	0x3a4d4953
 8009134:	2b746120 	.word	0x2b746120
 8009138:	70747468 	.word	0x70747468
 800913c:	69746361 	.word	0x69746361
 8009140:	303d6e6f 	.word	0x303d6e6f
 8009144:	00000000 	.word	0x00000000
 8009148:	5454482b 	.word	0x5454482b
 800914c:	54434150 	.word	0x54434150
 8009150:	004e4f49 	.word	0x004e4f49
 8009154:	682b7461 	.word	0x682b7461
 8009158:	72707474 	.word	0x72707474
 800915c:	0d646165 	.word	0x0d646165
 8009160:	0000000a 	.word	0x0000000a
 8009164:	3a4d4953 	.word	0x3a4d4953
 8009168:	2b746120 	.word	0x2b746120
 800916c:	70747468 	.word	0x70747468
 8009170:	64616572 	.word	0x64616572
 8009174:	00000000 	.word	0x00000000
 8009178:	682b7461 	.word	0x682b7461
 800917c:	74707474 	.word	0x74707474
 8009180:	0d6d7265 	.word	0x0d6d7265
 8009184:	0000000a 	.word	0x0000000a
 8009188:	3a4d4953 	.word	0x3a4d4953
 800918c:	2b746120 	.word	0x2b746120
 8009190:	70747468 	.word	0x70747468
 8009194:	6d726574 	.word	0x6d726574
 8009198:	00000000 	.word	0x00000000
 800919c:	732b7461 	.word	0x732b7461
 80091a0:	72627061 	.word	0x72627061
 80091a4:	312c303d 	.word	0x312c303d
 80091a8:	00000a0d 	.word	0x00000a0d
 80091ac:	3a4d4953 	.word	0x3a4d4953
 80091b0:	2b746120 	.word	0x2b746120
 80091b4:	62706173 	.word	0x62706173
 80091b8:	2c303d72 	.word	0x2c303d72
 80091bc:	00000031 	.word	0x00000031

080091c0 <rsbox>:
 80091c0:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
 80091d0:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
 80091e0:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
 80091f0:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
 8009200:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
 8009210:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
 8009220:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
 8009230:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
 8009240:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
 8009250:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
 8009260:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
 8009270:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
 8009280:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
 8009290:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
 80092a0:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
 80092b0:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}
 80092c0:	67756c50 20646567 0a74754f 00000000     Plugged Out.....
 80092d0:	67756c50 20646567 000a6e49 65736552     Plugged In..Rese
 80092e0:	65532074 6e657571 000a6563 6f727245     t Sequence..Erro
 80092f0:	44412072 53492043 65442052 74756166     r ADC ISR Defaut
 8009300:	73614320 00000a65 08004f52 08004f6c      Case...RO..lO..
 8009310:	08004f98 08004fd2 08004ff4 00696e66     .O...O...O..fni.
 8009320:	2b696e66 00000000 006e616e 2d696e66     fni+....nan.fni-
 8009330:	00000000 08005d8e 08005da4 08005da4     .....]...]...]..
 8009340:	08005da4 08005da4 08005da4 08005da4     .]...]...]...]..
 8009350:	08005da4 08005da4 08005da4 08005da4     .]...]...]...]..
 8009360:	08005da4 08005da4 08005da4 08005da4     .]...]...]...]..
 8009370:	08005da4 08005da4 08005da4 08005da4     .]...]...]...]..
 8009380:	08005da4 08005da4 08005da4 08005da4     .]...]...]...]..
 8009390:	08005da4 08005da4 08005da4 08005da4     .]...]...]...]..
 80093a0:	08005da4 08005da4 08005da4 08005da4     .]...]...]...]..
 80093b0:	08005da4 08005da4 08005bc0 08005da4     .]...]...[...]..
 80093c0:	08005da4 08005da4 08005da4 08005da4     .]...]...]...]..
 80093d0:	08005da4 08005da4 08005da4 08005da4     .]...]...]...]..
 80093e0:	08005da4 08005da4 08005da4 08005da4     .]...]...]...]..
 80093f0:	08005da4 08005da4 08005da4 08005da4     .]...]...]...]..
 8009400:	08005a64 08005da4 08005da4 08005da4     dZ...]...]...]..
 8009410:	08005da4 08005da4 08005da4 08005da4     .]...]...]...]..
 8009420:	08005da4 08005da4 08005a64 08005c00     .]...]..dZ...\..
 8009430:	08005a64 08005da4 08005bc0 08005da4     dZ...]...[...]..
 8009440:	08005da4 08005a64 08005da4 08005da4     .]..dZ...]...]..
 8009450:	08005da4 08005da4 08005da4 08005a64     .]...]...]..dZ..
 8009460:	08005d58 08005da4 08005da4 08005c74     X]...]...]..t\..
 8009470:	08005da4 08005a64 08005da4 08005da4     .]..dZ...]...]..
 8009480:	08005a64 08005996 08005910 08005910     dZ...Y...Y...Y..
 8009490:	080059a0 08005910 08005910 08005910     .Y...Y...Y...Y..
 80094a0:	08005910 08005910 08005910 08005910     .Y...Y...Y...Y..
 80094b0:	0800598c 08005910 08005982 08005910     .Y...Y...Y...Y..
 80094c0:	08005910 08005964                       .Y..dY..

080094c8 <pow10.4126>:
 80094c8:	00000000 3ff00000 00000000 40240000     .......?......$@
 80094d8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 80094e8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 80094f8:	00000000 412e8480 00000000 416312d0     .......A......cA
 8009508:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8009518:	78323025 25203a20 0a783230 00000000     %02x : %02x.....
 8009528:	08070601 0c0b0a09 100f0e0d 14131211     ................
 8009538:	18171615 1c1b1a19 201f1e1d 24232221     ........... !"#$
 8009548:	4b272625 0000004d 204d4652 20495053     %&'KM...RFM SPI 
 8009558:	74697257 00000065 204d4652 65736552     Write...RFM Rese
 8009568:	6f442074 000a656e 204d4652 74696e49     t Done..RFM Init
 8009578:	6e6f4420 00000a65 20746547 25207525      Done...Get %u %
 8009588:	00000a75 64616552 0a752520 00000000     u...Read %u.....
 8009598:	74736554 6d654d20 69725720 52206574     Test Mem Write R
 80095a8:	0a646165 0000000a 52504545 53204d4f     ead.....EEPROM S
 80095b8:	74726174 3025203a 3a207838 38302520     tart: %08x : %08
 80095c8:	00000a78 676f7250 6d6d6172 3a676e69     x...Programming:
 80095d8:	38302520 00000a78 52504545 45204d4f      %08x...EEPROM E
 80095e8:	203a646e 78383025 25203a20 0a783830     nd: %08x : %08x.
 80095f8:	0000000a 73616c46 72452068 0a657361     ....Flash Erase.
 8009608:	00000000 73616c46 74532068 3a747261     ....Flash Start:
 8009618:	38302520 203a2078 78383025 3830250a      %08x : %08x.%08
 8009628:	203a2078 78383025 0000000a 676f7250     x : %08x....Prog
 8009638:	6d6d6172 20676e69 78383025 38302520     ramming %08x %08
 8009648:	00000a78 73616c46 6e452068 25203a64     x...Flash End: %
 8009658:	20783830 3025203a 250a7838 20783830     08x : %08x.%08x 
 8009668:	3025203a 000a7838 656d6954 2074756f     : %08x..Timeout 
 8009678:	25207325 0a583830 00000000 20435452     %s %08X.....RTC 
 8009688:	0a525349 00000000 080079a8 08007810     ISR......y...x..
 8009698:	080077ee 08007902 080077ee 08007946     .w...y...w..Fy..
 80096a8:	080077ee 08007902 08007810 08007810     .w...y...x...x..
 80096b8:	08007946 08007902 080078b4 080078b4     Fy...y...x...x..
 80096c8:	080078b4 08007954 080080e0 0800800e     .x..Ty..........
 80096d8:	0800800e 0800800a 08008014 08008014     ................
 80096e8:	08008300 0800800a 08008014 08008300     ................
 80096f8:	08008014 0800800a 0800829e 0800829e     ................
 8009708:	0800829e 0800836a                       ....j...

Disassembly of section .data:

20000000 <curr_address>:
20000000:	08080400                                ....

20000004 <mem_flash_do_page_erase>:
 * address: Page-aligned address to erase
 */
static _RAM bool mem_flash_do_page_erase(uint32_t address)
{
    //erase operation
    FLASH_PECR |= FLASH_PECR_ERASE | FLASH_PECR_PROG;
20000004:	4a0c      	ldr	r2, [pc, #48]	; (20000038 <mem_flash_do_page_erase+0x34>)
20000006:	6811      	ldr	r1, [r2, #0]
20000008:	2382      	movs	r3, #130	; 0x82
2000000a:	009b      	lsls	r3, r3, #2
2000000c:	430b      	orrs	r3, r1
2000000e:	6013      	str	r3, [r2, #0]
    MMIO32(address) = (uint32_t)0;
20000010:	2300      	movs	r3, #0
20000012:	6003      	str	r3, [r0, #0]
    //wait for completion
    while (FLASH_SR & FLASH_SR_BSY) { }
20000014:	4b09      	ldr	r3, [pc, #36]	; (2000003c <mem_flash_do_page_erase+0x38>)
20000016:	681b      	ldr	r3, [r3, #0]
20000018:	07db      	lsls	r3, r3, #31
2000001a:	d4fb      	bmi.n	20000014 <mem_flash_do_page_erase+0x10>
    if (FLASH_SR & FLASH_SR_EOP)
2000001c:	4b07      	ldr	r3, [pc, #28]	; (2000003c <mem_flash_do_page_erase+0x38>)
2000001e:	681b      	ldr	r3, [r3, #0]
20000020:	079b      	lsls	r3, r3, #30
20000022:	d504      	bpl.n	2000002e <mem_flash_do_page_erase+0x2a>
    {
        //completed without incident
        FLASH_SR = FLASH_SR_EOP;
20000024:	4b05      	ldr	r3, [pc, #20]	; (2000003c <mem_flash_do_page_erase+0x38>)
20000026:	2202      	movs	r2, #2
20000028:	601a      	str	r2, [r3, #0]
        return true;
2000002a:	2001      	movs	r0, #1
    {
        //there was an error
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
        return false;
    }
}
2000002c:	4770      	bx	lr
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
2000002e:	4b03      	ldr	r3, [pc, #12]	; (2000003c <mem_flash_do_page_erase+0x38>)
20000030:	4a03      	ldr	r2, [pc, #12]	; (20000040 <mem_flash_do_page_erase+0x3c>)
20000032:	601a      	str	r2, [r3, #0]
        return false;
20000034:	2000      	movs	r0, #0
20000036:	e7f9      	b.n	2000002c <mem_flash_do_page_erase+0x28>
20000038:	40022004 	.word	0x40022004
2000003c:	40022018 	.word	0x40022018
20000040:	00020300 	.word	0x00020300

20000044 <mem_flash_do_write_half_page>:
 *
 * address: Half-page aligned address to write
 * data: Array to 16 32-bit words to write
 */
static _RAM bool mem_flash_do_write_half_page(uint32_t address, uint32_t *data)
{
20000044:	b510      	push	{r4, lr}
    uint8_t i;

    //half-page program operation
    FLASH_PECR |= FLASH_PECR_PROG | FLASH_PECR_FPRG;
20000046:	4a10      	ldr	r2, [pc, #64]	; (20000088 <mem_flash_do_write_half_page+0x44>)
20000048:	6814      	ldr	r4, [r2, #0]
2000004a:	2381      	movs	r3, #129	; 0x81
2000004c:	00db      	lsls	r3, r3, #3
2000004e:	4323      	orrs	r3, r4
20000050:	6013      	str	r3, [r2, #0]
    for (i = 0; i < 16; i++)
20000052:	2300      	movs	r3, #0
20000054:	2b0f      	cmp	r3, #15
20000056:	d805      	bhi.n	20000064 <mem_flash_do_write_half_page+0x20>
    {
        MMIO32(address) = data[i]; //the actual address written is unimportant as these words will be queued
20000058:	009a      	lsls	r2, r3, #2
2000005a:	5852      	ldr	r2, [r2, r1]
2000005c:	6002      	str	r2, [r0, #0]
    for (i = 0; i < 16; i++)
2000005e:	3301      	adds	r3, #1
20000060:	b2db      	uxtb	r3, r3
20000062:	e7f7      	b.n	20000054 <mem_flash_do_write_half_page+0x10>
    }
    //wait for completion
    while (FLASH_SR & FLASH_SR_BSY) { }
20000064:	4b09      	ldr	r3, [pc, #36]	; (2000008c <mem_flash_do_write_half_page+0x48>)
20000066:	681b      	ldr	r3, [r3, #0]
20000068:	07db      	lsls	r3, r3, #31
2000006a:	d4fb      	bmi.n	20000064 <mem_flash_do_write_half_page+0x20>
    if (FLASH_SR & FLASH_SR_EOP)
2000006c:	4b07      	ldr	r3, [pc, #28]	; (2000008c <mem_flash_do_write_half_page+0x48>)
2000006e:	681b      	ldr	r3, [r3, #0]
20000070:	079b      	lsls	r3, r3, #30
20000072:	d504      	bpl.n	2000007e <mem_flash_do_write_half_page+0x3a>
    {
        //completed without incident
        FLASH_SR = FLASH_SR_EOP;
20000074:	4b05      	ldr	r3, [pc, #20]	; (2000008c <mem_flash_do_write_half_page+0x48>)
20000076:	2202      	movs	r2, #2
20000078:	601a      	str	r2, [r3, #0]
        return true;
2000007a:	2001      	movs	r0, #1
        //there was an error
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_NOTZEROERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
        return false;

    }
}
2000007c:	bd10      	pop	{r4, pc}
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_NOTZEROERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
2000007e:	4b03      	ldr	r3, [pc, #12]	; (2000008c <mem_flash_do_write_half_page+0x48>)
20000080:	4a03      	ldr	r2, [pc, #12]	; (20000090 <mem_flash_do_write_half_page+0x4c>)
20000082:	601a      	str	r2, [r3, #0]
        return false;
20000084:	2000      	movs	r0, #0
20000086:	e7f9      	b.n	2000007c <mem_flash_do_write_half_page+0x38>
20000088:	40022004 	.word	0x40022004
2000008c:	40022018 	.word	0x40022018
20000090:	00030300 	.word	0x00030300

20000094 <rcc_ahb_frequency>:
20000094:	001fff68                                h...

20000098 <rcc_apb1_frequency>:
20000098:	001fff68                                h...

2000009c <rcc_apb2_frequency>:
2000009c:	001fff68                                h...

200000a0 <_impure_ptr>:
200000a0:	200000a4                                ... 

200000a4 <impure_data>:
	...
