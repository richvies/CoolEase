
hub/bin/hub_bootloader.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 20 00 20 31 11 00 08 2d 11 00 08 2b 11 00 08     . . 1...-...+...
	...
 800002c:	2d 11 00 08 00 00 00 00 00 00 00 00 2d 11 00 08     -...........-...
 800003c:	2d 11 00 08 2b 11 00 08 2b 11 00 08 b9 0b 00 08     -...+...+.......
 800004c:	2b 11 00 08 2b 11 00 08 2b 11 00 08 2b 11 00 08     +...+...+...+...
 800005c:	f9 07 00 08 2b 11 00 08 2b 11 00 08 2b 11 00 08     ....+...+...+...
 800006c:	2b 11 00 08 3d 01 00 08 2b 11 00 08 2b 11 00 08     +...=...+...+...
 800007c:	2b 11 00 08 2b 11 00 08 2b 11 00 08 2b 11 00 08     +...+...+...+...
 800008c:	2b 11 00 08 2b 11 00 08 2b 11 00 08 2b 11 00 08     +...+...+...+...
 800009c:	2b 11 00 08 2b 11 00 08 2b 11 00 08 2b 11 00 08     +...+...+...+...
 80000ac:	2b 11 00 08 05 01 00 08 2b 11 00 08 2b 11 00 08     +.......+...+...
 80000bc:	2b 11 00 08                                         +...

080000c0 <main>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

int main(void)
{
 80000c0:	b510      	push	{r4, lr}
    log_init();
 80000c2:	f000 f99f 	bl	8000404 <log_init>
	timers_lptim_init();
 80000c6:	f000 fc57 	bl	8000978 <timers_lptim_init>
	timers_tim6_init();
 80000ca:	f000 fc9b 	bl	8000a04 <timers_tim6_init>

	#ifdef DEBUG
	for(int i = 0; i < 100000; i++){__asm__("nop");};
 80000ce:	2300      	movs	r3, #0
 80000d0:	e001      	b.n	80000d6 <main+0x16>
 80000d2:	46c0      	nop			; (mov r8, r8)
 80000d4:	3301      	adds	r3, #1
 80000d6:	4a08      	ldr	r2, [pc, #32]	; (80000f8 <main+0x38>)
 80000d8:	4293      	cmp	r3, r2
 80000da:	ddfa      	ble.n	80000d2 <main+0x12>
	#endif 
	
    log_printf("Hub Bl Start\n");
 80000dc:	4807      	ldr	r0, [pc, #28]	; (80000fc <main+0x3c>)
 80000de:	f000 f9a7 	bl	8000430 <log_printf>

	// test_boot_verify_checksum();
	test_boot_crc();
 80000e2:	f000 fbcf 	bl	8000884 <test_boot_crc>

    // boot_jump_to_application(APP_ADDRESS);

    for (;;)
	{
		log_printf("Hub Bootloader Loop\n\n");
 80000e6:	4806      	ldr	r0, [pc, #24]	; (8000100 <main+0x40>)
 80000e8:	f000 f9a2 	bl	8000430 <log_printf>
		timers_delay_milliseconds(1000);
 80000ec:	20fa      	movs	r0, #250	; 0xfa
 80000ee:	0080      	lsls	r0, r0, #2
 80000f0:	f000 fc9e 	bl	8000a30 <timers_delay_milliseconds>
    for (;;)
 80000f4:	e7f7      	b.n	80000e6 <main+0x26>
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	0001869f 	.word	0x0001869f
 80000fc:	080012e4 	.word	0x080012e4
 8000100:	080012f4 	.word	0x080012f4

08000104 <usart2_isr>:
}


// Interrupt routines
void usart2_isr(void)
{
 8000104:	b510      	push	{r4, lr}
	usart_send(SPF_USART, usart_recv(SIM_USART));
 8000106:	4c09      	ldr	r4, [pc, #36]	; (800012c <usart2_isr+0x28>)
 8000108:	0020      	movs	r0, r4
 800010a:	f000 ffff 	bl	800110c <usart_recv>
 800010e:	0001      	movs	r1, r0
 8000110:	4807      	ldr	r0, [pc, #28]	; (8000130 <usart2_isr+0x2c>)
 8000112:	f000 fff7 	bl	8001104 <usart_send>

	sim_rx_buf[sim_rx_head++] = usart_recv(SIM_USART);
 8000116:	0020      	movs	r0, r4
 8000118:	f000 fff8 	bl	800110c <usart_recv>
 800011c:	4a05      	ldr	r2, [pc, #20]	; (8000134 <usart2_isr+0x30>)
 800011e:	7813      	ldrb	r3, [r2, #0]
 8000120:	1c59      	adds	r1, r3, #1
 8000122:	7011      	strb	r1, [r2, #0]
 8000124:	4a04      	ldr	r2, [pc, #16]	; (8000138 <usart2_isr+0x34>)
 8000126:	54d0      	strb	r0, [r2, r3]
}
 8000128:	bd10      	pop	{r4, pc}
 800012a:	46c0      	nop			; (mov r8, r8)
 800012c:	40004400 	.word	0x40004400
 8000130:	40013800 	.word	0x40013800
 8000134:	20000110 	.word	0x20000110
 8000138:	20000010 	.word	0x20000010

0800013c <adc_comp_isr>:

// ISRs
#ifdef _HUB
// For use with ADC1
void adc_comp_isr(void)
{
 800013c:	b570      	push	{r4, r5, r6, lr}
    // Takes about 150us to run

    // log_printf("ADC ISR %08X\n", ADC_ISR(ADC1));

    // Calculate batt_voltages
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 800013e:	2400      	movs	r4, #0
 8000140:	e014      	b.n	800016c <adc_comp_isr+0x30>
        batt_voltages[i] = ( (uint32_t)300 * ST_VREFINT_CAL * adc_vals[i + 1] ) / ( adc_vals[0] * 4095 ); }
 8000142:	4b4f      	ldr	r3, [pc, #316]	; (8000280 <adc_comp_isr+0x144>)
 8000144:	881b      	ldrh	r3, [r3, #0]
 8000146:	1c65      	adds	r5, r4, #1
 8000148:	4a4e      	ldr	r2, [pc, #312]	; (8000284 <adc_comp_isr+0x148>)
 800014a:	0069      	lsls	r1, r5, #1
 800014c:	5a88      	ldrh	r0, [r1, r2]
 800014e:	4343      	muls	r3, r0
 8000150:	0098      	lsls	r0, r3, #2
 8000152:	18c3      	adds	r3, r0, r3
 8000154:	0118      	lsls	r0, r3, #4
 8000156:	1ac0      	subs	r0, r0, r3
 8000158:	0080      	lsls	r0, r0, #2
 800015a:	8813      	ldrh	r3, [r2, #0]
 800015c:	0319      	lsls	r1, r3, #12
 800015e:	1ac9      	subs	r1, r1, r3
 8000160:	f001 f834 	bl	80011cc <__udivsi3>
 8000164:	0064      	lsls	r4, r4, #1
 8000166:	4b48      	ldr	r3, [pc, #288]	; (8000288 <adc_comp_isr+0x14c>)
 8000168:	5318      	strh	r0, [r3, r4]
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 800016a:	b2ec      	uxtb	r4, r5
 800016c:	2c01      	cmp	r4, #1
 800016e:	d9e8      	bls.n	8000142 <adc_comp_isr+0x6>

    // For Hub : Measured voltage is half of actual
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8000170:	2300      	movs	r3, #0
 8000172:	e006      	b.n	8000182 <adc_comp_isr+0x46>
        batt_voltages[i] = batt_voltages[i] * 2; }
 8000174:	4944      	ldr	r1, [pc, #272]	; (8000288 <adc_comp_isr+0x14c>)
 8000176:	0058      	lsls	r0, r3, #1
 8000178:	5a42      	ldrh	r2, [r0, r1]
 800017a:	0052      	lsls	r2, r2, #1
 800017c:	5242      	strh	r2, [r0, r1]
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 800017e:	3301      	adds	r3, #1
 8000180:	b2db      	uxtb	r3, r3
 8000182:	2b01      	cmp	r3, #1
 8000184:	d9f6      	bls.n	8000174 <adc_comp_isr+0x38>

    static uint16_t timer = 0;
    static uint8_t state = 0;
    switch(state)
 8000186:	4b41      	ldr	r3, [pc, #260]	; (800028c <adc_comp_isr+0x150>)
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	2b04      	cmp	r3, #4
 800018c:	d86e      	bhi.n	800026c <adc_comp_isr+0x130>
 800018e:	009b      	lsls	r3, r3, #2
 8000190:	4a3f      	ldr	r2, [pc, #252]	; (8000290 <adc_comp_isr+0x154>)
 8000192:	58d3      	ldr	r3, [r2, r3]
 8000194:	469f      	mov	pc, r3
    {
        case 0:
            plugged_in = true;
            timer = timers_millis();
 8000196:	f000 fc61 	bl	8000a5c <timers_millis>
 800019a:	4b3e      	ldr	r3, [pc, #248]	; (8000294 <adc_comp_isr+0x158>)
 800019c:	8018      	strh	r0, [r3, #0]
            if(batt_voltages[PWR_VOLTAGE] < batt_voltages[BATT_VOLTAGE])
 800019e:	4b3a      	ldr	r3, [pc, #232]	; (8000288 <adc_comp_isr+0x14c>)
 80001a0:	881a      	ldrh	r2, [r3, #0]
 80001a2:	885b      	ldrh	r3, [r3, #2]
 80001a4:	429a      	cmp	r2, r3
 80001a6:	d264      	bcs.n	8000272 <adc_comp_isr+0x136>
                state = 1;
 80001a8:	4b38      	ldr	r3, [pc, #224]	; (800028c <adc_comp_isr+0x150>)
 80001aa:	2201      	movs	r2, #1
 80001ac:	701a      	strb	r2, [r3, #0]
 80001ae:	e060      	b.n	8000272 <adc_comp_isr+0x136>
            break;

        case 1:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE])
 80001b0:	4b35      	ldr	r3, [pc, #212]	; (8000288 <adc_comp_isr+0x14c>)
 80001b2:	881a      	ldrh	r2, [r3, #0]
 80001b4:	885b      	ldrh	r3, [r3, #2]
 80001b6:	429a      	cmp	r2, r3
 80001b8:	d903      	bls.n	80001c2 <adc_comp_isr+0x86>
                state = 0;
 80001ba:	4b34      	ldr	r3, [pc, #208]	; (800028c <adc_comp_isr+0x150>)
 80001bc:	2200      	movs	r2, #0
 80001be:	701a      	strb	r2, [r3, #0]
 80001c0:	e057      	b.n	8000272 <adc_comp_isr+0x136>
            else if(timers_millis() - timer > 1000)
 80001c2:	f000 fc4b 	bl	8000a5c <timers_millis>
 80001c6:	4b33      	ldr	r3, [pc, #204]	; (8000294 <adc_comp_isr+0x158>)
 80001c8:	881b      	ldrh	r3, [r3, #0]
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	23fa      	movs	r3, #250	; 0xfa
 80001ce:	009b      	lsls	r3, r3, #2
 80001d0:	4298      	cmp	r0, r3
 80001d2:	dd4e      	ble.n	8000272 <adc_comp_isr+0x136>
                state = 2;
 80001d4:	4b2d      	ldr	r3, [pc, #180]	; (800028c <adc_comp_isr+0x150>)
 80001d6:	2202      	movs	r2, #2
 80001d8:	701a      	strb	r2, [r3, #0]
 80001da:	e04a      	b.n	8000272 <adc_comp_isr+0x136>
            break;
        
        case 2:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE]){
 80001dc:	4b2a      	ldr	r3, [pc, #168]	; (8000288 <adc_comp_isr+0x14c>)
 80001de:	881a      	ldrh	r2, [r3, #0]
 80001e0:	885b      	ldrh	r3, [r3, #2]
 80001e2:	429a      	cmp	r2, r3
 80001e4:	d907      	bls.n	80001f6 <adc_comp_isr+0xba>
                timer = timers_millis(); 
 80001e6:	f000 fc39 	bl	8000a5c <timers_millis>
 80001ea:	4b2a      	ldr	r3, [pc, #168]	; (8000294 <adc_comp_isr+0x158>)
 80001ec:	8018      	strh	r0, [r3, #0]
                state = 4;}
 80001ee:	4b27      	ldr	r3, [pc, #156]	; (800028c <adc_comp_isr+0x150>)
 80001f0:	2204      	movs	r2, #4
 80001f2:	701a      	strb	r2, [r3, #0]
 80001f4:	e03d      	b.n	8000272 <adc_comp_isr+0x136>
            else if(timers_millis() - timer > 10000){
 80001f6:	f000 fc31 	bl	8000a5c <timers_millis>
 80001fa:	4b26      	ldr	r3, [pc, #152]	; (8000294 <adc_comp_isr+0x158>)
 80001fc:	881b      	ldrh	r3, [r3, #0]
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4b25      	ldr	r3, [pc, #148]	; (8000298 <adc_comp_isr+0x15c>)
 8000202:	4298      	cmp	r0, r3
 8000204:	dd35      	ble.n	8000272 <adc_comp_isr+0x136>
                state = 3;
 8000206:	4b21      	ldr	r3, [pc, #132]	; (800028c <adc_comp_isr+0x150>)
 8000208:	2203      	movs	r2, #3
 800020a:	701a      	strb	r2, [r3, #0]
                plugged_in = false;
                log_printf("Plugged Out\n");}
 800020c:	4823      	ldr	r0, [pc, #140]	; (800029c <adc_comp_isr+0x160>)
 800020e:	f000 f90f 	bl	8000430 <log_printf>
 8000212:	e02e      	b.n	8000272 <adc_comp_isr+0x136>
            break;
        
        case 3:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE]){
 8000214:	4b1c      	ldr	r3, [pc, #112]	; (8000288 <adc_comp_isr+0x14c>)
 8000216:	881a      	ldrh	r2, [r3, #0]
 8000218:	885b      	ldrh	r3, [r3, #2]
 800021a:	429a      	cmp	r2, r3
 800021c:	d929      	bls.n	8000272 <adc_comp_isr+0x136>
                timer = timers_millis();
 800021e:	f000 fc1d 	bl	8000a5c <timers_millis>
 8000222:	4b1c      	ldr	r3, [pc, #112]	; (8000294 <adc_comp_isr+0x158>)
 8000224:	8018      	strh	r0, [r3, #0]
                state = 0;
 8000226:	4b19      	ldr	r3, [pc, #100]	; (800028c <adc_comp_isr+0x150>)
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
                log_printf("Plugged In\n");}
 800022c:	481c      	ldr	r0, [pc, #112]	; (80002a0 <adc_comp_isr+0x164>)
 800022e:	f000 f8ff 	bl	8000430 <log_printf>
 8000232:	e01e      	b.n	8000272 <adc_comp_isr+0x136>
            break;

        case 4:
            if(batt_voltages[PWR_VOLTAGE] < batt_voltages[BATT_VOLTAGE]){
 8000234:	4b14      	ldr	r3, [pc, #80]	; (8000288 <adc_comp_isr+0x14c>)
 8000236:	881a      	ldrh	r2, [r3, #0]
 8000238:	885b      	ldrh	r3, [r3, #2]
 800023a:	429a      	cmp	r2, r3
 800023c:	d203      	bcs.n	8000246 <adc_comp_isr+0x10a>
                state = 2; }
 800023e:	4b13      	ldr	r3, [pc, #76]	; (800028c <adc_comp_isr+0x150>)
 8000240:	2202      	movs	r2, #2
 8000242:	701a      	strb	r2, [r3, #0]
 8000244:	e015      	b.n	8000272 <adc_comp_isr+0x136>
            else if(timers_millis() - timer > 1000){
 8000246:	f000 fc09 	bl	8000a5c <timers_millis>
 800024a:	4b12      	ldr	r3, [pc, #72]	; (8000294 <adc_comp_isr+0x158>)
 800024c:	881b      	ldrh	r3, [r3, #0]
 800024e:	1ac0      	subs	r0, r0, r3
 8000250:	23fa      	movs	r3, #250	; 0xfa
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	4298      	cmp	r0, r3
 8000256:	dd0c      	ble.n	8000272 <adc_comp_isr+0x136>
                state = 0;
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <adc_comp_isr+0x150>)
 800025a:	2200      	movs	r2, #0
 800025c:	701a      	strb	r2, [r3, #0]
                batt_rst_seq = true; 
 800025e:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <adc_comp_isr+0x168>)
 8000260:	3201      	adds	r2, #1
 8000262:	701a      	strb	r2, [r3, #0]
                log_printf("Reset Sequence\n"); }
 8000264:	4810      	ldr	r0, [pc, #64]	; (80002a8 <adc_comp_isr+0x16c>)
 8000266:	f000 f8e3 	bl	8000430 <log_printf>
 800026a:	e002      	b.n	8000272 <adc_comp_isr+0x136>
            break;

        default:
            log_printf("Error ADC ISR Defaut Case\n");
 800026c:	480f      	ldr	r0, [pc, #60]	; (80002ac <adc_comp_isr+0x170>)
 800026e:	f000 f8df 	bl	8000430 <log_printf>
            break;
    }

    // log_printf("ADC ISR %u %u %u V\n",state, batt_voltages[0], batt_voltages[1]);

    ADC_ISR(ADC1) = 0xFFFFFFFF;
 8000272:	480f      	ldr	r0, [pc, #60]	; (80002b0 <adc_comp_isr+0x174>)
 8000274:	2301      	movs	r3, #1
 8000276:	425b      	negs	r3, r3
 8000278:	6003      	str	r3, [r0, #0]
    adc_start_conversion_regular(ADC1);
 800027a:	f000 fcc1 	bl	8000c00 <adc_start_conversion_regular>
}
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	1ff80078 	.word	0x1ff80078
 8000284:	20000114 	.word	0x20000114
 8000288:	2000011c 	.word	0x2000011c
 800028c:	20000120 	.word	0x20000120
 8000290:	08001354 	.word	0x08001354
 8000294:	20000122 	.word	0x20000122
 8000298:	00002710 	.word	0x00002710
 800029c:	0800130c 	.word	0x0800130c
 80002a0:	0800131c 	.word	0x0800131c
 80002a4:	2000011a 	.word	0x2000011a
 80002a8:	08001328 	.word	0x08001328
 80002ac:	08001338 	.word	0x08001338
 80002b0:	40012400 	.word	0x40012400

080002b4 <clock_setup>:
// Static Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

//  Static Function Definitions
static void clock_setup(void) 
{
 80002b4:	b510      	push	{r4, lr}
	// Enable MSI Osc 2.097Mhz
	rcc_osc_on(RCC_MSI);
 80002b6:	2004      	movs	r0, #4
 80002b8:	f000 fd9c 	bl	8000df4 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_MSI);
 80002bc:	2004      	movs	r0, #4
 80002be:	f000 fdef 	bl	8000ea0 <rcc_wait_for_osc_ready>

	// Set MSI to 2.097Mhz
	rcc_set_msi_range(5);
 80002c2:	2005      	movs	r0, #5
 80002c4:	f000 fe16 	bl	8000ef4 <rcc_set_msi_range>

	// Set prescalers for AHB, APB1, APB2
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);				// AHB -> 2.097Mhz
 80002c8:	2000      	movs	r0, #0
 80002ca:	f000 fe09 	bl	8000ee0 <rcc_set_hpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);			// APB1 -> 2.097Mhz
 80002ce:	2000      	movs	r0, #0
 80002d0:	f000 fdee 	bl	8000eb0 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);			// APB2 -> 2.097Mhz
 80002d4:	2000      	movs	r0, #0
 80002d6:	f000 fdf7 	bl	8000ec8 <rcc_set_ppre2>

	// Set flash, 2.097Mhz -> 0 waitstates
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 80002da:	2000      	movs	r0, #0
 80002dc:	f000 fcb6 	bl	8000c4c <flash_set_ws>

	// Set Peripheral Clock Frequencies used
	rcc_ahb_frequency = 2097000;
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <clock_setup+0x3c>)
 80002e2:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <clock_setup+0x40>)
 80002e4:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 2097000;
 80002e6:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <clock_setup+0x44>)
 80002e8:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = 2097000;
 80002ea:	4a04      	ldr	r2, [pc, #16]	; (80002fc <clock_setup+0x48>)
 80002ec:	6013      	str	r3, [r2, #0]
}
 80002ee:	bd10      	pop	{r4, pc}
 80002f0:	001fff68 	.word	0x001fff68
 80002f4:	20000004 	.word	0x20000004
 80002f8:	20000008 	.word	0x20000008
 80002fc:	2000000c 	.word	0x2000000c

08000300 <usart_setup>:

static void usart_setup(void) 
{
 8000300:	b570      	push	{r4, r5, r6, lr}
    rcc_periph_clock_enable(RCC_GPIOA);
 8000302:	20b0      	movs	r0, #176	; 0xb0
 8000304:	00c0      	lsls	r0, r0, #3
 8000306:	f000 fe37 	bl	8000f78 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOB);
 800030a:	4826      	ldr	r0, [pc, #152]	; (80003a4 <usart_setup+0xa4>)
 800030c:	f000 fe34 	bl	8000f78 <rcc_periph_clock_enable>

	gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_TX);
 8000310:	2580      	movs	r5, #128	; 0x80
 8000312:	00ad      	lsls	r5, r5, #2
 8000314:	24a0      	movs	r4, #160	; 0xa0
 8000316:	05e4      	lsls	r4, r4, #23
 8000318:	002b      	movs	r3, r5
 800031a:	2200      	movs	r2, #0
 800031c:	2102      	movs	r1, #2
 800031e:	0020      	movs	r0, r4
 8000320:	f000 fcb7 	bl	8000c92 <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_RX);
 8000324:	2680      	movs	r6, #128	; 0x80
 8000326:	00f6      	lsls	r6, r6, #3
 8000328:	0033      	movs	r3, r6
 800032a:	2200      	movs	r2, #0
 800032c:	2102      	movs	r1, #2
 800032e:	0020      	movs	r0, r4
 8000330:	f000 fcaf 	bl	8000c92 <gpio_mode_setup>
    
    gpio_set_output_options(SPF_USART_TX_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, SPF_USART_TX);
 8000334:	002b      	movs	r3, r5
 8000336:	2200      	movs	r2, #0
 8000338:	2100      	movs	r1, #0
 800033a:	0020      	movs	r0, r4
 800033c:	f000 fcc9 	bl	8000cd2 <gpio_set_output_options>

    gpio_set_af(SPF_USART_TX_PORT, SPF_USART_AF, SPF_USART_TX);
 8000340:	002a      	movs	r2, r5
 8000342:	2104      	movs	r1, #4
 8000344:	0020      	movs	r0, r4
 8000346:	f000 fce2 	bl	8000d0e <gpio_set_af>
    gpio_set_af(SPF_USART_RX_PORT, SPF_USART_AF, SPF_USART_RX);
 800034a:	0032      	movs	r2, r6
 800034c:	2104      	movs	r1, #4
 800034e:	0020      	movs	r0, r4
 8000350:	f000 fcdd 	bl	8000d0e <gpio_set_af>
    
	rcc_periph_clock_enable(SPF_USART_RCC);
 8000354:	4814      	ldr	r0, [pc, #80]	; (80003a8 <usart_setup+0xa8>)
 8000356:	f000 fe0f 	bl	8000f78 <rcc_periph_clock_enable>
    rcc_periph_reset_pulse(SPF_USART_RCC_RST);
 800035a:	4814      	ldr	r0, [pc, #80]	; (80003ac <usart_setup+0xac>)
 800035c:	f000 fe28 	bl	8000fb0 <rcc_periph_reset_pulse>
	usart_disable(SPF_USART);
 8000360:	4c13      	ldr	r4, [pc, #76]	; (80003b0 <usart_setup+0xb0>)
 8000362:	0020      	movs	r0, r4
 8000364:	f000 febf 	bl	80010e6 <usart_disable>
	usart_set_baudrate(SPF_USART, SPF_USART_BAUD);
 8000368:	21e1      	movs	r1, #225	; 0xe1
 800036a:	0249      	lsls	r1, r1, #9
 800036c:	0020      	movs	r0, r4
 800036e:	f000 fe5d 	bl	800102c <usart_set_baudrate>
	usart_set_databits(SPF_USART, 8);
 8000372:	2108      	movs	r1, #8
 8000374:	0020      	movs	r0, r4
 8000376:	f000 fe85 	bl	8001084 <usart_set_databits>
	usart_set_stopbits(SPF_USART,USART_STOPBITS_1);
 800037a:	2100      	movs	r1, #0
 800037c:	0020      	movs	r0, r4
 800037e:	f000 fe8f 	bl	80010a0 <usart_set_stopbits>
	usart_set_mode(SPF_USART, USART_MODE_TX_RX);
 8000382:	210c      	movs	r1, #12
 8000384:	0020      	movs	r0, r4
 8000386:	f000 fe9b 	bl	80010c0 <usart_set_mode>
	usart_set_parity(SPF_USART, USART_PARITY_NONE);
 800038a:	2100      	movs	r1, #0
 800038c:	0020      	movs	r0, r4
 800038e:	f000 fe8f 	bl	80010b0 <usart_set_parity>
	usart_set_flow_control(SPF_USART, USART_FLOWCONTROL_NONE);
 8000392:	2100      	movs	r1, #0
 8000394:	0020      	movs	r0, r4
 8000396:	f000 fe99 	bl	80010cc <usart_set_flow_control>
	usart_enable(SPF_USART);
 800039a:	0020      	movs	r0, r4
 800039c:	f000 fe9e 	bl	80010dc <usart_enable>
}
 80003a0:	bd70      	pop	{r4, r5, r6, pc}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	00000581 	.word	0x00000581
 80003a8:	0000068e 	.word	0x0000068e
 80003ac:	0000048e 	.word	0x0000048e
 80003b0:	40013800 	.word	0x40013800

080003b4 <_putchar_mem>:
{
	usart_send_blocking(SPF_USART, character);		
}

static void _putchar_mem(char character)
{
 80003b4:	b510      	push	{r4, lr}
 80003b6:	0001      	movs	r1, r0
	mem_eeprom_write_byte(curr_address++, character);
 80003b8:	4c07      	ldr	r4, [pc, #28]	; (80003d8 <_putchar_mem+0x24>)
 80003ba:	6820      	ldr	r0, [r4, #0]
 80003bc:	1c43      	adds	r3, r0, #1
 80003be:	6023      	str	r3, [r4, #0]
 80003c0:	f000 f86c 	bl	800049c <mem_eeprom_write_byte>
	
	if(curr_address == LOG_START + LOG_SIZE)
 80003c4:	6822      	ldr	r2, [r4, #0]
 80003c6:	4b05      	ldr	r3, [pc, #20]	; (80003dc <_putchar_mem+0x28>)
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d000      	beq.n	80003ce <_putchar_mem+0x1a>
	{
		curr_address = LOG_START;
	}
}
 80003cc:	bd10      	pop	{r4, pc}
		curr_address = LOG_START;
 80003ce:	4b02      	ldr	r3, [pc, #8]	; (80003d8 <_putchar_mem+0x24>)
 80003d0:	4a03      	ldr	r2, [pc, #12]	; (80003e0 <_putchar_mem+0x2c>)
 80003d2:	601a      	str	r2, [r3, #0]
}
 80003d4:	e7fa      	b.n	80003cc <_putchar_mem+0x18>
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	20000000 	.word	0x20000000
 80003dc:	08080800 	.word	0x08080800
 80003e0:	08080400 	.word	0x08080400

080003e4 <_putchar_spf>:
{
 80003e4:	b510      	push	{r4, lr}
	usart_send_blocking(SPF_USART, character);		
 80003e6:	0001      	movs	r1, r0
 80003e8:	4801      	ldr	r0, [pc, #4]	; (80003f0 <_putchar_spf+0xc>)
 80003ea:	f000 fe81 	bl	80010f0 <usart_send_blocking>
}
 80003ee:	bd10      	pop	{r4, pc}
 80003f0:	40013800 	.word	0x40013800

080003f4 <_putchar_main>:
{
 80003f4:	b510      	push	{r4, lr}
 80003f6:	0004      	movs	r4, r0
	_putchar_mem(character);
 80003f8:	f7ff ffdc 	bl	80003b4 <_putchar_mem>
	_putchar_spf(character);
 80003fc:	0020      	movs	r0, r4
 80003fe:	f7ff fff1 	bl	80003e4 <_putchar_spf>
}
 8000402:	bd10      	pop	{r4, pc}

08000404 <log_init>:
{
 8000404:	b510      	push	{r4, lr}
	mem_init();
 8000406:	f000 f843 	bl	8000490 <mem_init>
    curr_address = 0;
 800040a:	4b07      	ldr	r3, [pc, #28]	; (8000428 <log_init+0x24>)
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
    clock_setup();
 8000410:	f7ff ff50 	bl	80002b4 <clock_setup>
    usart_setup();
 8000414:	f7ff ff74 	bl	8000300 <usart_setup>
	for(int i = 0; i < 100000; i++){__asm__("nop");};
 8000418:	2300      	movs	r3, #0
 800041a:	4a04      	ldr	r2, [pc, #16]	; (800042c <log_init+0x28>)
 800041c:	4293      	cmp	r3, r2
 800041e:	dc02      	bgt.n	8000426 <log_init+0x22>
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	3301      	adds	r3, #1
 8000424:	e7f9      	b.n	800041a <log_init+0x16>
}
 8000426:	bd10      	pop	{r4, pc}
 8000428:	20000000 	.word	0x20000000
 800042c:	0001869f 	.word	0x0001869f

08000430 <log_printf>:
{
 8000430:	b40f      	push	{r0, r1, r2, r3}
 8000432:	b500      	push	{lr}
 8000434:	b083      	sub	sp, #12
 8000436:	aa04      	add	r2, sp, #16
 8000438:	ca02      	ldmia	r2!, {r1}
	va_start(va, format);
 800043a:	9201      	str	r2, [sp, #4]
	fnprintf(_putchar_main, format, va);
 800043c:	4806      	ldr	r0, [pc, #24]	; (8000458 <log_printf+0x28>)
 800043e:	f000 f8d9 	bl	80005f4 <fnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {}
 8000442:	2140      	movs	r1, #64	; 0x40
 8000444:	4805      	ldr	r0, [pc, #20]	; (800045c <log_printf+0x2c>)
 8000446:	f000 fe6a 	bl	800111e <usart_get_flag>
 800044a:	2800      	cmp	r0, #0
 800044c:	d0f9      	beq.n	8000442 <log_printf+0x12>
}
 800044e:	b003      	add	sp, #12
 8000450:	bc08      	pop	{r3}
 8000452:	b004      	add	sp, #16
 8000454:	4718      	bx	r3
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	080003f5 	.word	0x080003f5
 800045c:	40013800 	.word	0x40013800

08000460 <serial_printf>:
{
 8000460:	b40f      	push	{r0, r1, r2, r3}
 8000462:	b500      	push	{lr}
 8000464:	b083      	sub	sp, #12
 8000466:	aa04      	add	r2, sp, #16
 8000468:	ca02      	ldmia	r2!, {r1}
	va_start(va, format);
 800046a:	9201      	str	r2, [sp, #4]
	fnprintf(_putchar_spf, format, va);
 800046c:	4806      	ldr	r0, [pc, #24]	; (8000488 <serial_printf+0x28>)
 800046e:	f000 f8c1 	bl	80005f4 <fnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {}
 8000472:	2140      	movs	r1, #64	; 0x40
 8000474:	4805      	ldr	r0, [pc, #20]	; (800048c <serial_printf+0x2c>)
 8000476:	f000 fe52 	bl	800111e <usart_get_flag>
 800047a:	2800      	cmp	r0, #0
 800047c:	d0f9      	beq.n	8000472 <serial_printf+0x12>
}
 800047e:	b003      	add	sp, #12
 8000480:	bc08      	pop	{r3}
 8000482:	b004      	add	sp, #16
 8000484:	4718      	bx	r3
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	080003e5 	.word	0x080003e5
 800048c:	40013800 	.word	0x40013800

08000490 <mem_init>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

void mem_init(void)
{
 8000490:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_MIF);
 8000492:	20c1      	movs	r0, #193	; 0xc1
 8000494:	00c0      	lsls	r0, r0, #3
 8000496:	f000 fd6f 	bl	8000f78 <rcc_periph_clock_enable>
    // {
    //     // log_printf("%08x : %08x\n", next_reading_add, MMIO32(next_reading_add));
    //     msg_num++;
    //     next_reading_add += 4;
    // }
}
 800049a:	bd10      	pop	{r4, pc}

0800049c <mem_eeprom_write_byte>:

    return true;
}

bool mem_eeprom_write_byte(uint32_t address, uint8_t data)
{
 800049c:	b570      	push	{r4, r5, r6, lr}
 800049e:	0004      	movs	r4, r0
 80004a0:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <mem_eeprom_write_byte+0x44>)
 80004a4:	18c2      	adds	r2, r0, r3
 80004a6:	2380      	movs	r3, #128	; 0x80
 80004a8:	011b      	lsls	r3, r3, #4
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d301      	bcc.n	80004b2 <mem_eeprom_write_byte+0x16>
        return false;
 80004ae:	2000      	movs	r0, #0
        FLASH_SR = FLASH_SR_EOP;

    flash_lock_pecr();

    return true;
}
 80004b0:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock_pecr();
 80004b2:	f000 fbd5 	bl	8000c60 <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 80004b6:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <mem_eeprom_write_byte+0x48>)
 80004b8:	6813      	ldr	r3, [r2, #0]
 80004ba:	490b      	ldr	r1, [pc, #44]	; (80004e8 <mem_eeprom_write_byte+0x4c>)
 80004bc:	400b      	ands	r3, r1
 80004be:	6013      	str	r3, [r2, #0]
    MMIO8(address) = data;
 80004c0:	7025      	strb	r5, [r4, #0]
    while (FLASH_SR & FLASH_SR_BSY);
 80004c2:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <mem_eeprom_write_byte+0x50>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	07db      	lsls	r3, r3, #31
 80004c8:	d4fb      	bmi.n	80004c2 <mem_eeprom_write_byte+0x26>
    if (FLASH_SR & FLASH_SR_EOP)
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <mem_eeprom_write_byte+0x50>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	079b      	lsls	r3, r3, #30
 80004d0:	d502      	bpl.n	80004d8 <mem_eeprom_write_byte+0x3c>
        FLASH_SR = FLASH_SR_EOP;
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <mem_eeprom_write_byte+0x50>)
 80004d4:	2202      	movs	r2, #2
 80004d6:	601a      	str	r2, [r3, #0]
    flash_lock_pecr();
 80004d8:	f000 fbce 	bl	8000c78 <flash_lock_pecr>
    return true;
 80004dc:	2001      	movs	r0, #1
 80004de:	e7e7      	b.n	80004b0 <mem_eeprom_write_byte+0x14>
 80004e0:	f7f80000 	.word	0xf7f80000
 80004e4:	40022004 	.word	0x40022004
 80004e8:	fffffeff 	.word	0xfffffeff
 80004ec:	40022018 	.word	0x40022018

080004f0 <_atoi>:
    return (ch >= '0') && (ch <= '9');
}

// internal ASCII string to uint32_t conversion
static uint32_t _atoi(const char **str)
{
 80004f0:	0001      	movs	r1, r0
    uint32_t i = 0U;
 80004f2:	2000      	movs	r0, #0
    while (_is_digit(**str))
 80004f4:	680a      	ldr	r2, [r1, #0]
 80004f6:	7813      	ldrb	r3, [r2, #0]
    return (ch >= '0') && (ch <= '9');
 80004f8:	3b30      	subs	r3, #48	; 0x30
 80004fa:	b2db      	uxtb	r3, r3
    while (_is_digit(**str))
 80004fc:	2b09      	cmp	r3, #9
 80004fe:	d808      	bhi.n	8000512 <_atoi+0x22>
    {
        i = i * 10U + (uint32_t)(*((*str)++) - '0');
 8000500:	0083      	lsls	r3, r0, #2
 8000502:	181b      	adds	r3, r3, r0
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	1c50      	adds	r0, r2, #1
 8000508:	6008      	str	r0, [r1, #0]
 800050a:	7810      	ldrb	r0, [r2, #0]
 800050c:	18c0      	adds	r0, r0, r3
 800050e:	3830      	subs	r0, #48	; 0x30
 8000510:	e7f0      	b.n	80004f4 <_atoi+0x4>
    }
    return i;
}
 8000512:	4770      	bx	lr

08000514 <_ntoa_format>:

// internal itoa format
static uint32_t _ntoa_format(out_fct_type out, int32_t value, uint32_t base, uint32_t width, bool sign)
{
 8000514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000516:	46d6      	mov	lr, sl
 8000518:	464f      	mov	r7, r9
 800051a:	4646      	mov	r6, r8
 800051c:	b5c0      	push	{r6, r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	4680      	mov	r8, r0
 8000522:	0008      	movs	r0, r1
 8000524:	0015      	movs	r5, r2
 8000526:	469a      	mov	sl, r3
 8000528:	ab10      	add	r3, sp, #64	; 0x40
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4699      	mov	r9, r3
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    uint32_t len = 0;
    bool negative = false;

    // write if precision != 0 and value is != 0
    if (value)
 800052e:	2900      	cmp	r1, #0
 8000530:	d057      	beq.n	80005e2 <_ntoa_format+0xce>
    {
        // Negative sign
        if(sign && value < 0)
 8000532:	2b00      	cmp	r3, #0
 8000534:	d003      	beq.n	800053e <_ntoa_format+0x2a>
 8000536:	2900      	cmp	r1, #0
 8000538:	db03      	blt.n	8000542 <_ntoa_format+0x2e>
            negative = true;
            value = 0 - value; 
        } 
        else
        {
            negative = false;
 800053a:	2300      	movs	r3, #0
 800053c:	4699      	mov	r9, r3
 800053e:	2400      	movs	r4, #0
 8000540:	e00f      	b.n	8000562 <_ntoa_format+0x4e>
            value = 0 - value; 
 8000542:	4248      	negs	r0, r1
 8000544:	e7fb      	b.n	800053e <_ntoa_format+0x2a>

        // Digits to char
        do
        {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 8000546:	3130      	adds	r1, #48	; 0x30
 8000548:	b2c9      	uxtb	r1, r1
 800054a:	1c67      	adds	r7, r4, #1
 800054c:	466b      	mov	r3, sp
 800054e:	5519      	strb	r1, [r3, r4]
            value /= base;
 8000550:	0029      	movs	r1, r5
 8000552:	0030      	movs	r0, r6
 8000554:	f000 fe3a 	bl	80011cc <__udivsi3>
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8000558:	2800      	cmp	r0, #0
 800055a:	d010      	beq.n	800057e <_ntoa_format+0x6a>
 800055c:	2f1f      	cmp	r7, #31
 800055e:	d80e      	bhi.n	800057e <_ntoa_format+0x6a>
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 8000560:	003c      	movs	r4, r7
            const char digit = (char)(value % base);
 8000562:	0006      	movs	r6, r0
 8000564:	0029      	movs	r1, r5
 8000566:	f000 feb7 	bl	80012d8 <__aeabi_uidivmod>
 800056a:	b2c9      	uxtb	r1, r1
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 800056c:	2909      	cmp	r1, #9
 800056e:	d9ea      	bls.n	8000546 <_ntoa_format+0x32>
 8000570:	3137      	adds	r1, #55	; 0x37
 8000572:	b2c9      	uxtb	r1, r1
 8000574:	e7e9      	b.n	800054a <_ntoa_format+0x36>

        // pad leading zeros
        while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
        {
            buf[len++] = '0';
 8000576:	2330      	movs	r3, #48	; 0x30
 8000578:	466a      	mov	r2, sp
 800057a:	55d3      	strb	r3, [r2, r7]
 800057c:	3701      	adds	r7, #1
        while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
 800057e:	4557      	cmp	r7, sl
 8000580:	d201      	bcs.n	8000586 <_ntoa_format+0x72>
 8000582:	2f1f      	cmp	r7, #31
 8000584:	d9f7      	bls.n	8000576 <_ntoa_format+0x62>
        }

        // Base specifier
        if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8000586:	2d10      	cmp	r5, #16
 8000588:	d016      	beq.n	80005b8 <_ntoa_format+0xa4>
        {
            buf[len++] = 'X';
        }
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 800058a:	2d02      	cmp	r5, #2
 800058c:	d01b      	beq.n	80005c6 <_ntoa_format+0xb2>
        {
            buf[len++] = 'b';
        }
        if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 800058e:	2d10      	cmp	r5, #16
 8000590:	d020      	beq.n	80005d4 <_ntoa_format+0xc0>
 8000592:	2d02      	cmp	r5, #2
 8000594:	d01e      	beq.n	80005d4 <_ntoa_format+0xc0>
        {
            buf[len++] = '0';
        }

        if ( negative && (len < PRINTF_NTOA_BUFFER_SIZE) )
 8000596:	464b      	mov	r3, r9
 8000598:	2b00      	cmp	r3, #0
 800059a:	d005      	beq.n	80005a8 <_ntoa_format+0x94>
 800059c:	2f1f      	cmp	r7, #31
 800059e:	d803      	bhi.n	80005a8 <_ntoa_format+0x94>
        {
            buf[len++] = '-';
 80005a0:	232d      	movs	r3, #45	; 0x2d
 80005a2:	466a      	mov	r2, sp
 80005a4:	55d3      	strb	r3, [r2, r7]
 80005a6:	3701      	adds	r7, #1
        }

        // reverse string and write out
        uint32_t i = len;
 80005a8:	003c      	movs	r4, r7
        while (i)
 80005aa:	2c00      	cmp	r4, #0
 80005ac:	d01a      	beq.n	80005e4 <_ntoa_format+0xd0>
        {
            out(buf[--i]);
 80005ae:	3c01      	subs	r4, #1
 80005b0:	466b      	mov	r3, sp
 80005b2:	5d18      	ldrb	r0, [r3, r4]
 80005b4:	47c0      	blx	r8
 80005b6:	e7f8      	b.n	80005aa <_ntoa_format+0x96>
        if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80005b8:	2f1f      	cmp	r7, #31
 80005ba:	d8e6      	bhi.n	800058a <_ntoa_format+0x76>
            buf[len++] = 'X';
 80005bc:	2358      	movs	r3, #88	; 0x58
 80005be:	466a      	mov	r2, sp
 80005c0:	55d3      	strb	r3, [r2, r7]
 80005c2:	3701      	adds	r7, #1
 80005c4:	e7e3      	b.n	800058e <_ntoa_format+0x7a>
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80005c6:	2f1f      	cmp	r7, #31
 80005c8:	d8e1      	bhi.n	800058e <_ntoa_format+0x7a>
            buf[len++] = 'b';
 80005ca:	2362      	movs	r3, #98	; 0x62
 80005cc:	466a      	mov	r2, sp
 80005ce:	55d3      	strb	r3, [r2, r7]
 80005d0:	3701      	adds	r7, #1
 80005d2:	e7dc      	b.n	800058e <_ntoa_format+0x7a>
        if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80005d4:	2f1f      	cmp	r7, #31
 80005d6:	d8de      	bhi.n	8000596 <_ntoa_format+0x82>
            buf[len++] = '0';
 80005d8:	2330      	movs	r3, #48	; 0x30
 80005da:	466a      	mov	r2, sp
 80005dc:	55d3      	strb	r3, [r2, r7]
 80005de:	3701      	adds	r7, #1
 80005e0:	e7d9      	b.n	8000596 <_ntoa_format+0x82>
    uint32_t len = 0;
 80005e2:	2700      	movs	r7, #0
        }
    }
    return len;
}
 80005e4:	0038      	movs	r0, r7
 80005e6:	b008      	add	sp, #32
 80005e8:	bce0      	pop	{r5, r6, r7}
 80005ea:	46ba      	mov	sl, r7
 80005ec:	46b1      	mov	r9, r6
 80005ee:	46a8      	mov	r8, r5
 80005f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080005f4 <fnprintf>:

uint32_t fnprintf(out_fct_type out, const char *format, va_list va)
{
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	0005      	movs	r5, r0
 80005fa:	9103      	str	r1, [sp, #12]
 80005fc:	9202      	str	r2, [sp, #8]
    uint32_t width;
    uint32_t idx = 0U;
 80005fe:	2400      	movs	r4, #0

    while (*format)
 8000600:	e004      	b.n	800060c <fnprintf+0x18>
            format++;
        }
        else
        {
            // Just print char
            out(*format);
 8000602:	47a8      	blx	r5
            idx++;
 8000604:	3401      	adds	r4, #1
            format++;
 8000606:	9b03      	ldr	r3, [sp, #12]
 8000608:	3301      	adds	r3, #1
 800060a:	9303      	str	r3, [sp, #12]
    while (*format)
 800060c:	9b03      	ldr	r3, [sp, #12]
 800060e:	7818      	ldrb	r0, [r3, #0]
 8000610:	2800      	cmp	r0, #0
 8000612:	d100      	bne.n	8000616 <fnprintf+0x22>
 8000614:	e089      	b.n	800072a <fnprintf+0x136>
        if (*format == '%')
 8000616:	2825      	cmp	r0, #37	; 0x25
 8000618:	d1f3      	bne.n	8000602 <fnprintf+0xe>
            format++;
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	9203      	str	r2, [sp, #12]
            continue;
        }

        // evaluate width field
        width = 0U;
        if (_is_digit(*format))
 800061e:	785b      	ldrb	r3, [r3, #1]
    return (ch >= '0') && (ch <= '9');
 8000620:	3b30      	subs	r3, #48	; 0x30
 8000622:	b2db      	uxtb	r3, r3
        if (_is_digit(*format))
 8000624:	2b09      	cmp	r3, #9
 8000626:	d90b      	bls.n	8000640 <fnprintf+0x4c>
        width = 0U;
 8000628:	2300      	movs	r3, #0
        {
            width = _atoi(&format);
        }

        // evaluate specifier
        switch (*format)
 800062a:	9a03      	ldr	r2, [sp, #12]
 800062c:	7810      	ldrb	r0, [r2, #0]
 800062e:	0002      	movs	r2, r0
 8000630:	3a25      	subs	r2, #37	; 0x25
 8000632:	b2d1      	uxtb	r1, r2
 8000634:	2953      	cmp	r1, #83	; 0x53
 8000636:	d872      	bhi.n	800071e <fnprintf+0x12a>
 8000638:	008a      	lsls	r2, r1, #2
 800063a:	493d      	ldr	r1, [pc, #244]	; (8000730 <fnprintf+0x13c>)
 800063c:	588a      	ldr	r2, [r1, r2]
 800063e:	4697      	mov	pc, r2
            width = _atoi(&format);
 8000640:	a803      	add	r0, sp, #12
 8000642:	f7ff ff55 	bl	80004f0 <_atoi>
 8000646:	0003      	movs	r3, r0
 8000648:	e7ef      	b.n	800062a <fnprintf+0x36>
        case 'o':
        case 'b':
        {
            // set the base
            uint32_t base;
            if (*format == 'x' || *format == 'X')
 800064a:	2878      	cmp	r0, #120	; 0x78
 800064c:	d009      	beq.n	8000662 <fnprintf+0x6e>
 800064e:	2858      	cmp	r0, #88	; 0x58
 8000650:	d01a      	beq.n	8000688 <fnprintf+0x94>
            {
                base = 16U;
            }
            else if (*format == 'o')
 8000652:	286f      	cmp	r0, #111	; 0x6f
 8000654:	d01a      	beq.n	800068c <fnprintf+0x98>
            {
                base = 8U;
            }
            else if (*format == 'b')
 8000656:	2862      	cmp	r0, #98	; 0x62
 8000658:	d001      	beq.n	800065e <fnprintf+0x6a>
            {
                base = 2U;
            }
            else
            {
                base = 10U;
 800065a:	220a      	movs	r2, #10
 800065c:	e002      	b.n	8000664 <fnprintf+0x70>
                base = 2U;
 800065e:	2202      	movs	r2, #2
 8000660:	e000      	b.n	8000664 <fnprintf+0x70>
                base = 16U;
 8000662:	2210      	movs	r2, #16
            }

            // convert integer
            if ((*format == 'i') || (*format == 'd'))
 8000664:	2869      	cmp	r0, #105	; 0x69
 8000666:	d001      	beq.n	800066c <fnprintf+0x78>
 8000668:	2864      	cmp	r0, #100	; 0x64
 800066a:	d111      	bne.n	8000690 <fnprintf+0x9c>
            {
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, true);
 800066c:	9902      	ldr	r1, [sp, #8]
 800066e:	1d08      	adds	r0, r1, #4
 8000670:	9002      	str	r0, [sp, #8]
 8000672:	6809      	ldr	r1, [r1, #0]
 8000674:	2001      	movs	r0, #1
 8000676:	9000      	str	r0, [sp, #0]
 8000678:	0028      	movs	r0, r5
 800067a:	f7ff ff4b 	bl	8000514 <_ntoa_format>
 800067e:	1824      	adds	r4, r4, r0
            }
            else
            {
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, false);
            }
            format++;
 8000680:	9b03      	ldr	r3, [sp, #12]
 8000682:	3301      	adds	r3, #1
 8000684:	9303      	str	r3, [sp, #12]
            break;
 8000686:	e7c1      	b.n	800060c <fnprintf+0x18>
                base = 16U;
 8000688:	2210      	movs	r2, #16
 800068a:	e7eb      	b.n	8000664 <fnprintf+0x70>
                base = 8U;
 800068c:	2208      	movs	r2, #8
 800068e:	e7e9      	b.n	8000664 <fnprintf+0x70>
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, false);
 8000690:	9902      	ldr	r1, [sp, #8]
 8000692:	1d08      	adds	r0, r1, #4
 8000694:	9002      	str	r0, [sp, #8]
 8000696:	6809      	ldr	r1, [r1, #0]
 8000698:	2000      	movs	r0, #0
 800069a:	9000      	str	r0, [sp, #0]
 800069c:	0028      	movs	r0, r5
 800069e:	f7ff ff39 	bl	8000514 <_ntoa_format>
 80006a2:	1824      	adds	r4, r4, r0
 80006a4:	e7ec      	b.n	8000680 <fnprintf+0x8c>
        }

        case 'c':
        {
            out((char)va_arg(va, int));
 80006a6:	9b02      	ldr	r3, [sp, #8]
 80006a8:	1d1a      	adds	r2, r3, #4
 80006aa:	9202      	str	r2, [sp, #8]
 80006ac:	7818      	ldrb	r0, [r3, #0]
 80006ae:	47a8      	blx	r5
            idx++;
 80006b0:	3401      	adds	r4, #1
            format++;
 80006b2:	9b03      	ldr	r3, [sp, #12]
 80006b4:	3301      	adds	r3, #1
 80006b6:	9303      	str	r3, [sp, #12]
            break;
 80006b8:	e7a8      	b.n	800060c <fnprintf+0x18>
        }

        case 's':
        {
            const char *p = va_arg(va, char *);
 80006ba:	9b02      	ldr	r3, [sp, #8]
 80006bc:	1d1a      	adds	r2, r3, #4
 80006be:	9202      	str	r2, [sp, #8]
 80006c0:	681e      	ldr	r6, [r3, #0]
    for (s = str; *s && maxsize--; ++s)
 80006c2:	0033      	movs	r3, r6
 80006c4:	2280      	movs	r2, #128	; 0x80
 80006c6:	00d2      	lsls	r2, r2, #3
 80006c8:	e001      	b.n	80006ce <fnprintf+0xda>
 80006ca:	3301      	adds	r3, #1
 80006cc:	000a      	movs	r2, r1
 80006ce:	7819      	ldrb	r1, [r3, #0]
 80006d0:	2900      	cmp	r1, #0
 80006d2:	d002      	beq.n	80006da <fnprintf+0xe6>
 80006d4:	1e51      	subs	r1, r2, #1
 80006d6:	2a00      	cmp	r2, #0
 80006d8:	d1f7      	bne.n	80006ca <fnprintf+0xd6>
            uint32_t l = _strnlen_s(p, PRINTF_MAX_STR_LEN);

            // string output
            while (*p != 0)
 80006da:	7830      	ldrb	r0, [r6, #0]
 80006dc:	2800      	cmp	r0, #0
 80006de:	d003      	beq.n	80006e8 <fnprintf+0xf4>
            {
                out(*(p++));
 80006e0:	3601      	adds	r6, #1
 80006e2:	47a8      	blx	r5
                idx++;
 80006e4:	3401      	adds	r4, #1
 80006e6:	e7f8      	b.n	80006da <fnprintf+0xe6>
            }
            format++;
 80006e8:	9b03      	ldr	r3, [sp, #12]
 80006ea:	3301      	adds	r3, #1
 80006ec:	9303      	str	r3, [sp, #12]
            break;
 80006ee:	e78d      	b.n	800060c <fnprintf+0x18>
        }

        case 'p':
        {
            width = sizeof(void *) * 2U;
            idx += _ntoa_format(out, (int32_t)((uintptr_t)va_arg(va, void *)), 16U, width, false);
 80006f0:	9b02      	ldr	r3, [sp, #8]
 80006f2:	1d1a      	adds	r2, r3, #4
 80006f4:	9202      	str	r2, [sp, #8]
 80006f6:	6819      	ldr	r1, [r3, #0]
 80006f8:	2300      	movs	r3, #0
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	3308      	adds	r3, #8
 80006fe:	2210      	movs	r2, #16
 8000700:	0028      	movs	r0, r5
 8000702:	f7ff ff07 	bl	8000514 <_ntoa_format>
 8000706:	1824      	adds	r4, r4, r0
            format++;
 8000708:	9b03      	ldr	r3, [sp, #12]
 800070a:	3301      	adds	r3, #1
 800070c:	9303      	str	r3, [sp, #12]
            break;
 800070e:	e77d      	b.n	800060c <fnprintf+0x18>
        }

        case '%':
        {
            out('%');
 8000710:	2025      	movs	r0, #37	; 0x25
 8000712:	47a8      	blx	r5
            idx++;
 8000714:	3401      	adds	r4, #1
            format++;
 8000716:	9b03      	ldr	r3, [sp, #12]
 8000718:	3301      	adds	r3, #1
 800071a:	9303      	str	r3, [sp, #12]
            break;
 800071c:	e776      	b.n	800060c <fnprintf+0x18>
        }

        default:
        {
            out(*format);
 800071e:	47a8      	blx	r5
            idx++;
 8000720:	3401      	adds	r4, #1
            format++;
 8000722:	9b03      	ldr	r3, [sp, #12]
 8000724:	3301      	adds	r3, #1
 8000726:	9303      	str	r3, [sp, #12]
            break;
 8000728:	e770      	b.n	800060c <fnprintf+0x18>
        }
        }
    }
    // return written chars without terminating \0
    return idx;
}
 800072a:	0020      	movs	r0, r4
 800072c:	b004      	add	sp, #16
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	08001368 	.word	0x08001368

08000734 <spi_read_single>:
 * 
 * @param reg Register to read
 * @retval Value read from register
 */
static uint8_t spi_read_single(uint8_t reg)
{
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	0004      	movs	r4, r0
  spi_chip_select();
 8000738:	25a0      	movs	r5, #160	; 0xa0
 800073a:	05ed      	lsls	r5, r5, #23
 800073c:	2140      	movs	r1, #64	; 0x40
 800073e:	0028      	movs	r0, r5
 8000740:	f000 faa4 	bl	8000c8c <gpio_clear>
  timers_delay_microseconds(1);
 8000744:	2001      	movs	r0, #1
 8000746:	f000 f93f 	bl	80009c8 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, reg);                   
 800074a:	b2a1      	uxth	r1, r4
 800074c:	4c08      	ldr	r4, [pc, #32]	; (8000770 <spi_read_single+0x3c>)
 800074e:	0020      	movs	r0, r4
 8000750:	f000 fc56 	bl	8001000 <spi_xfer>
  uint8_t in =  spi_xfer(RFM_SPI, 0x00);                   
 8000754:	2100      	movs	r1, #0
 8000756:	0020      	movs	r0, r4
 8000758:	f000 fc52 	bl	8001000 <spi_xfer>
 800075c:	b2c4      	uxtb	r4, r0
    
  spi_chip_deselect(); 
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	0028      	movs	r0, r5
 8000762:	f000 fa91 	bl	8000c88 <gpio_set>
  timers_delay_microseconds(1);
 8000766:	2001      	movs	r0, #1
 8000768:	f000 f92e 	bl	80009c8 <timers_delay_microseconds>

  return in;
}
 800076c:	0020      	movs	r0, r4
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	40003800 	.word	0x40003800

08000774 <spi_write_single>:
  spi_chip_deselect();     
  timers_delay_microseconds(1);
}

static void spi_write_single(uint8_t reg, uint8_t data)
{
 8000774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000776:	0005      	movs	r5, r0
 8000778:	000e      	movs	r6, r1
  // Set MSB for write operation
  uint8_t cmd = 0x80 | reg;
 800077a:	2480      	movs	r4, #128	; 0x80
 800077c:	4264      	negs	r4, r4
 800077e:	4304      	orrs	r4, r0
 8000780:	b2e4      	uxtb	r4, r4

  spi_chip_select();
 8000782:	27a0      	movs	r7, #160	; 0xa0
 8000784:	05ff      	lsls	r7, r7, #23
 8000786:	2140      	movs	r1, #64	; 0x40
 8000788:	0038      	movs	r0, r7
 800078a:	f000 fa7f 	bl	8000c8c <gpio_clear>
  timers_delay_microseconds(1);
 800078e:	2001      	movs	r0, #1
 8000790:	f000 f91a 	bl	80009c8 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, cmd);                 
 8000794:	b2a1      	uxth	r1, r4
 8000796:	4c15      	ldr	r4, [pc, #84]	; (80007ec <spi_write_single+0x78>)
 8000798:	0020      	movs	r0, r4
 800079a:	f000 fc31 	bl	8001000 <spi_xfer>
  spi_xfer(RFM_SPI, data);             
 800079e:	b2b1      	uxth	r1, r6
 80007a0:	0020      	movs	r0, r4
 80007a2:	f000 fc2d 	bl	8001000 <spi_xfer>

  spi_chip_deselect(); 
 80007a6:	2140      	movs	r1, #64	; 0x40
 80007a8:	0038      	movs	r0, r7
 80007aa:	f000 fa6d 	bl	8000c88 <gpio_set>
  timers_delay_microseconds(1);
 80007ae:	2001      	movs	r0, #1
 80007b0:	f000 f90a 	bl	80009c8 <timers_delay_microseconds>

  uint8_t curr_data = spi_read_single(reg);
 80007b4:	0028      	movs	r0, r5
 80007b6:	f7ff ffbd 	bl	8000734 <spi_read_single>
 80007ba:	0004      	movs	r4, r0

  // log_printf("%02x : %02x\n", reg, data);

  if(reg == RFM_REG_12_IRQ_FLAGS)    
 80007bc:	2d12      	cmp	r5, #18
 80007be:	d013      	beq.n	80007e8 <spi_write_single+0x74>
    return;

  TIMEOUT(10000, "RFM SPI Write", ((reg << 16) | data), (curr_data == data), ;, timers_delay_microseconds(100); curr_data = spi_read_single(reg););
 80007c0:	f000 f954 	bl	8000a6c <timeout_init>
 80007c4:	042a      	lsls	r2, r5, #16
 80007c6:	4332      	orrs	r2, r6
 80007c8:	4909      	ldr	r1, [pc, #36]	; (80007f0 <spi_write_single+0x7c>)
 80007ca:	480a      	ldr	r0, [pc, #40]	; (80007f4 <spi_write_single+0x80>)
 80007cc:	f000 f95c 	bl	8000a88 <timeout>
 80007d0:	2800      	cmp	r0, #0
 80007d2:	d109      	bne.n	80007e8 <spi_write_single+0x74>
 80007d4:	42b4      	cmp	r4, r6
 80007d6:	d007      	beq.n	80007e8 <spi_write_single+0x74>
 80007d8:	2064      	movs	r0, #100	; 0x64
 80007da:	f000 f8f5 	bl	80009c8 <timers_delay_microseconds>
 80007de:	0028      	movs	r0, r5
 80007e0:	f7ff ffa8 	bl	8000734 <spi_read_single>
 80007e4:	0004      	movs	r4, r0
 80007e6:	e7ed      	b.n	80007c4 <spi_write_single+0x50>

  // log_printf("%02x : %02x : %02x\n", reg, data, curr_data);
}
 80007e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	40003800 	.word	0x40003800
 80007f0:	080014b8 	.word	0x080014b8
 80007f4:	00002710 	.word	0x00002710

080007f8 <exti4_15_isr>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void exti4_15_isr(void)
{
 80007f8:	b570      	push	{r4, r5, r6, lr}
  uint16_t timer = timers_micros();
 80007fa:	f000 f8fb 	bl	80009f4 <timers_micros>
  
  exti_reset_request(RFM_IO_0_EXTI);
 80007fe:	2480      	movs	r4, #128	; 0x80
 8000800:	00e4      	lsls	r4, r4, #3
 8000802:	0020      	movs	r0, r4
 8000804:	f000 fa1c 	bl	8000c40 <exti_reset_request>
  exti_reset_request(RFM_IO_0_EXTI);
 8000808:	0020      	movs	r0, r4
 800080a:	f000 fa19 	bl	8000c40 <exti_reset_request>

  // Store IRQ Flags
  packets_buf[packets_head].flags = get_irq();
 800080e:	4d1b      	ldr	r5, [pc, #108]	; (800087c <exti4_15_isr+0x84>)
 8000810:	782e      	ldrb	r6, [r5, #0]
  return spi_read_single(RFM_REG_12_IRQ_FLAGS);
 8000812:	2012      	movs	r0, #18
 8000814:	f7ff ff8e 	bl	8000734 <spi_read_single>
  packets_buf[packets_head].flags = get_irq();
 8000818:	4c19      	ldr	r4, [pc, #100]	; (8000880 <exti4_15_isr+0x88>)
 800081a:	0073      	lsls	r3, r6, #1
 800081c:	199b      	adds	r3, r3, r6
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	18e3      	adds	r3, r4, r3
 8000822:	7418      	strb	r0, [r3, #16]
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 8000824:	21ff      	movs	r1, #255	; 0xff
 8000826:	2012      	movs	r0, #18
 8000828:	f7ff ffa4 	bl	8000774 <spi_write_single>
 800082c:	21ff      	movs	r1, #255	; 0xff
 800082e:	2012      	movs	r0, #18
 8000830:	f7ff ffa0 	bl	8000774 <spi_write_single>
  clear_irq(RFM_IRQ_ALL);
  clear_irq(RFM_IRQ_ALL);

  // Get signal strength
  packets_buf[packets_head].rssi = spi_read_single(RFM_REG_1A_PKT_RSSI_VALUE);
 8000834:	201a      	movs	r0, #26
 8000836:	f7ff ff7d 	bl	8000734 <spi_read_single>
 800083a:	782a      	ldrb	r2, [r5, #0]
 800083c:	b200      	sxth	r0, r0
  packets_buf[packets_head].rssi -= 137;
 800083e:	0053      	lsls	r3, r2, #1
 8000840:	189b      	adds	r3, r3, r2
 8000842:	00db      	lsls	r3, r3, #3
 8000844:	18e3      	adds	r3, r4, r3
 8000846:	3889      	subs	r0, #137	; 0x89
 8000848:	8298      	strh	r0, [r3, #20]
  packets_buf[packets_head].snr = spi_read_single(RFM_REG_19_PKT_SNR_VALUE) / 4;
 800084a:	2019      	movs	r0, #25
 800084c:	f7ff ff72 	bl	8000734 <spi_read_single>
 8000850:	782b      	ldrb	r3, [r5, #0]
 8000852:	005a      	lsls	r2, r3, #1
 8000854:	18d2      	adds	r2, r2, r3
 8000856:	00d2      	lsls	r2, r2, #3
 8000858:	18a4      	adds	r4, r4, r2
 800085a:	0880      	lsrs	r0, r0, #2
 800085c:	74a0      	strb	r0, [r4, #18]

  // Check for CRC error
  packets_buf[packets_head].crc_ok = !(packets_buf[packets_head].flags & RFM_IRQ_PAYLOAD_CRC_ERROR);
 800085e:	7c22      	ldrb	r2, [r4, #16]
 8000860:	0952      	lsrs	r2, r2, #5
 8000862:	2101      	movs	r1, #1
 8000864:	404a      	eors	r2, r1
 8000866:	2101      	movs	r1, #1
 8000868:	400a      	ands	r2, r1
 800086a:	7462      	strb	r2, [r4, #17]

  packets_head = (packets_head + 1) % PACKETS_BUF_SIZE;
 800086c:	3301      	adds	r3, #1
 800086e:	220f      	movs	r2, #15
 8000870:	4013      	ands	r3, r2
 8000872:	702b      	strb	r3, [r5, #0]

  uint16_t time = timers_micros() - timer;
 8000874:	f000 f8be 	bl	80009f4 <timers_micros>
  // log_printf("ISR %u %u %u\n", time, packets_head, packets_tail);
}
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	200002a4 	.word	0x200002a4
 8000880:	20000124 	.word	0x20000124

08000884 <test_boot_crc>:
		log_printf("Checksum Bad\n");
	}
}

void test_boot_crc(void)
{
 8000884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000886:	b085      	sub	sp, #20
	// Initialize CRC Peripheral
    rcc_periph_clock_enable(RCC_CRC);
 8000888:	482e      	ldr	r0, [pc, #184]	; (8000944 <test_boot_crc+0xc0>)
 800088a:	f000 fb75 	bl	8000f78 <rcc_periph_clock_enable>
    crc_reset();
 800088e:	f000 f9bd 	bl	8000c0c <crc_reset>
	CRC_INIT = 0xFFFFFFFF;
 8000892:	4c2d      	ldr	r4, [pc, #180]	; (8000948 <test_boot_crc+0xc4>)
 8000894:	2301      	movs	r3, #1
 8000896:	425b      	negs	r3, r3
 8000898:	6023      	str	r3, [r4, #0]

    crc_reverse_output_enable();
 800089a:	f000 f9bf 	bl	8000c1c <crc_reverse_output_enable>
    crc_set_reverse_input(CRC_CR_REV_IN_WORD);
 800089e:	2060      	movs	r0, #96	; 0x60
 80008a0:	f000 f9c4 	bl	8000c2c <crc_set_reverse_input>


	serial_printf("Checksum initial: %8x\n", CRC_DR);
 80008a4:	4b29      	ldr	r3, [pc, #164]	; (800094c <test_boot_crc+0xc8>)
 80008a6:	6819      	ldr	r1, [r3, #0]
 80008a8:	4829      	ldr	r0, [pc, #164]	; (8000950 <test_boot_crc+0xcc>)
 80008aa:	f7ff fdd9 	bl	8000460 <serial_printf>
	serial_printf("CR: %8x\n", CRC_CR);
 80008ae:	4b29      	ldr	r3, [pc, #164]	; (8000954 <test_boot_crc+0xd0>)
 80008b0:	6819      	ldr	r1, [r3, #0]
 80008b2:	4829      	ldr	r0, [pc, #164]	; (8000958 <test_boot_crc+0xd4>)
 80008b4:	f7ff fdd4 	bl	8000460 <serial_printf>
	serial_printf("INT: %8x\n", CRC_INIT);
 80008b8:	6821      	ldr	r1, [r4, #0]
 80008ba:	4828      	ldr	r0, [pc, #160]	; (800095c <test_boot_crc+0xd8>)
 80008bc:	f7ff fdd0 	bl	8000460 <serial_printf>
	serial_printf("POL: %8x\n", CRC_POL);
 80008c0:	4b27      	ldr	r3, [pc, #156]	; (8000960 <test_boot_crc+0xdc>)
 80008c2:	6819      	ldr	r1, [r3, #0]
 80008c4:	4827      	ldr	r0, [pc, #156]	; (8000964 <test_boot_crc+0xe0>)
 80008c6:	f7ff fdcb 	bl	8000460 <serial_printf>

	// uint8_t data[4] = {'h', 'e', 'l', 'l'};
	uint32_t data[1] = {'T'};
 80008ca:	2354      	movs	r3, #84	; 0x54
 80008cc:	9303      	str	r3, [sp, #12]

    // Calc CRC32
    int i;
  
    for (i = 0; i < 1; i++) 
 80008ce:	2300      	movs	r3, #0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	dd2c      	ble.n	800092e <test_boot_crc+0xaa>
    }

    uint32_t crc = 0xf0;
	uint32_t not_crc = (crc ^ 0xFFFFFFFF);

	serial_printf("%i\n", crc); serial_printf("%8x\n", crc); serial_printf("%32b\n", crc);
 80008d4:	4f24      	ldr	r7, [pc, #144]	; (8000968 <test_boot_crc+0xe4>)
 80008d6:	21f0      	movs	r1, #240	; 0xf0
 80008d8:	0038      	movs	r0, r7
 80008da:	f7ff fdc1 	bl	8000460 <serial_printf>
 80008de:	4e23      	ldr	r6, [pc, #140]	; (800096c <test_boot_crc+0xe8>)
 80008e0:	21f0      	movs	r1, #240	; 0xf0
 80008e2:	0030      	movs	r0, r6
 80008e4:	f7ff fdbc 	bl	8000460 <serial_printf>
 80008e8:	4d21      	ldr	r5, [pc, #132]	; (8000970 <test_boot_crc+0xec>)
 80008ea:	21f0      	movs	r1, #240	; 0xf0
 80008ec:	0028      	movs	r0, r5
 80008ee:	f7ff fdb7 	bl	8000460 <serial_printf>
	serial_printf("%i\n", not_crc); 
 80008f2:	24f1      	movs	r4, #241	; 0xf1
 80008f4:	4264      	negs	r4, r4
 80008f6:	0021      	movs	r1, r4
 80008f8:	0038      	movs	r0, r7
 80008fa:	f7ff fdb1 	bl	8000460 <serial_printf>
	serial_printf("%8x\n", not_crc); serial_printf("%32b\n", not_crc);
 80008fe:	0021      	movs	r1, r4
 8000900:	0030      	movs	r0, r6
 8000902:	f7ff fdad 	bl	8000460 <serial_printf>
 8000906:	0021      	movs	r1, r4
 8000908:	0028      	movs	r0, r5
 800090a:	f7ff fda9 	bl	8000460 <serial_printf>

    // Deinit
    crc_reset();
 800090e:	f000 f97d 	bl	8000c0c <crc_reset>
    rcc_periph_clock_disable(RCC_CRC);
 8000912:	480c      	ldr	r0, [pc, #48]	; (8000944 <test_boot_crc+0xc0>)
 8000914:	f000 fb3e 	bl	8000f94 <rcc_periph_clock_disable>

    serial_printf("Checksum value: %8x %8x %8x %8x\n", crc, not_crc, 0x01, ~0x01);
 8000918:	2302      	movs	r3, #2
 800091a:	425b      	negs	r3, r3
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	3303      	adds	r3, #3
 8000920:	0022      	movs	r2, r4
 8000922:	21f0      	movs	r1, #240	; 0xf0
 8000924:	4813      	ldr	r0, [pc, #76]	; (8000974 <test_boot_crc+0xf0>)
 8000926:	f7ff fd9b 	bl	8000460 <serial_printf>
}
 800092a:	b005      	add	sp, #20
 800092c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	CRC_DR = data[i];
 800092e:	009a      	lsls	r2, r3, #2
 8000930:	a904      	add	r1, sp, #16
 8000932:	468c      	mov	ip, r1
 8000934:	4462      	add	r2, ip
 8000936:	3a04      	subs	r2, #4
 8000938:	6811      	ldr	r1, [r2, #0]
 800093a:	4a04      	ldr	r2, [pc, #16]	; (800094c <test_boot_crc+0xc8>)
 800093c:	6011      	str	r1, [r2, #0]
    for (i = 0; i < 1; i++) 
 800093e:	3301      	adds	r3, #1
 8000940:	e7c6      	b.n	80008d0 <test_boot_crc+0x4c>
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	0000060c 	.word	0x0000060c
 8000948:	40023010 	.word	0x40023010
 800094c:	40023000 	.word	0x40023000
 8000950:	080014c8 	.word	0x080014c8
 8000954:	40023008 	.word	0x40023008
 8000958:	080014e0 	.word	0x080014e0
 800095c:	080014ec 	.word	0x080014ec
 8000960:	40023014 	.word	0x40023014
 8000964:	080014f8 	.word	0x080014f8
 8000968:	08001504 	.word	0x08001504
 800096c:	080014e4 	.word	0x080014e4
 8000970:	08001508 	.word	0x08001508
 8000974:	08001510 	.word	0x08001510

08000978 <timers_lptim_init>:
}


// Setup lptim1 as approx. microsecond counter
void timers_lptim_init(void)
{
 8000978:	b510      	push	{r4, lr}
    // Input clock is 2.097Mhz
    rcc_set_peripheral_clk_sel(LPTIM1, RCC_CCIPR_LPTIM1SEL_APB);
 800097a:	4c10      	ldr	r4, [pc, #64]	; (80009bc <timers_lptim_init+0x44>)
 800097c:	2100      	movs	r1, #0
 800097e:	0020      	movs	r0, r4
 8000980:	f000 fac4 	bl	8000f0c <rcc_set_peripheral_clk_sel>
 
    rcc_periph_clock_enable(RCC_LPTIM1);
 8000984:	480e      	ldr	r0, [pc, #56]	; (80009c0 <timers_lptim_init+0x48>)
 8000986:	f000 faf7 	bl	8000f78 <rcc_periph_clock_enable>
    
    lptimer_set_internal_clock_source(LPTIM1);
 800098a:	0020      	movs	r0, r4
 800098c:	f000 fa08 	bl	8000da0 <lptimer_set_internal_clock_source>
    lptimer_enable_trigger(LPTIM1, LPTIM_CFGR_TRIGEN_SW);
 8000990:	2100      	movs	r1, #0
 8000992:	0020      	movs	r0, r4
 8000994:	f000 f9fa 	bl	8000d8c <lptimer_enable_trigger>
    lptimer_set_prescaler(LPTIM1, LPTIM_CFGR_PRESC_2);
 8000998:	2180      	movs	r1, #128	; 0x80
 800099a:	0089      	lsls	r1, r1, #2
 800099c:	0020      	movs	r0, r4
 800099e:	f000 f9ed 	bl	8000d7c <lptimer_set_prescaler>
    
    lptimer_enable(LPTIM1);
 80009a2:	0020      	movs	r0, r4
 80009a4:	f000 f9e0 	bl	8000d68 <lptimer_enable>
    
    lptimer_set_period(LPTIM1, 0xffff);
 80009a8:	4906      	ldr	r1, [pc, #24]	; (80009c4 <timers_lptim_init+0x4c>)
 80009aa:	0020      	movs	r0, r4
 80009ac:	f000 f9f6 	bl	8000d9c <lptimer_set_period>
    
    lptimer_start_counter(LPTIM1, LPTIM_CR_CNTSTRT);
 80009b0:	2104      	movs	r1, #4
 80009b2:	0020      	movs	r0, r4
 80009b4:	f000 f9dd 	bl	8000d72 <lptimer_start_counter>
}
 80009b8:	bd10      	pop	{r4, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	40007c00 	.word	0x40007c00
 80009c0:	0000071f 	.word	0x0000071f
 80009c4:	0000ffff 	.word	0x0000ffff

080009c8 <timers_delay_microseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_microseconds(uint32_t delay_microseconds)
{
 80009c8:	b570      	push	{r4, r5, r6, lr}
 80009ca:	0004      	movs	r4, r0
    uint32_t curr_time = lptimer_get_counter(LPTIM1);
 80009cc:	4807      	ldr	r0, [pc, #28]	; (80009ec <timers_delay_microseconds+0x24>)
 80009ce:	f000 f9c8 	bl	8000d62 <lptimer_get_counter>
 80009d2:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_microseconds > 65000)
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <timers_delay_microseconds+0x28>)
 80009d6:	429c      	cmp	r4, r3
 80009d8:	d900      	bls.n	80009dc <timers_delay_microseconds+0x14>
        delay_microseconds = 65000;
 80009da:	001c      	movs	r4, r3

    while (lptimer_get_counter(LPTIM1) - curr_time < delay_microseconds);
 80009dc:	4803      	ldr	r0, [pc, #12]	; (80009ec <timers_delay_microseconds+0x24>)
 80009de:	f000 f9c0 	bl	8000d62 <lptimer_get_counter>
 80009e2:	1b40      	subs	r0, r0, r5
 80009e4:	42a0      	cmp	r0, r4
 80009e6:	d3f9      	bcc.n	80009dc <timers_delay_microseconds+0x14>
}
 80009e8:	bd70      	pop	{r4, r5, r6, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	40007c00 	.word	0x40007c00
 80009f0:	0000fde8 	.word	0x0000fde8

080009f4 <timers_micros>:
}
*/

// Returns value of microsecond counter
uint16_t timers_micros(void)
{
 80009f4:	b510      	push	{r4, lr}
    return (uint16_t)lptimer_get_counter(LPTIM1);
 80009f6:	4802      	ldr	r0, [pc, #8]	; (8000a00 <timers_micros+0xc>)
 80009f8:	f000 f9b3 	bl	8000d62 <lptimer_get_counter>
}
 80009fc:	bd10      	pop	{r4, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	40007c00 	.word	0x40007c00

08000a04 <timers_tim6_init>:


// Setup TIM6 as millisecond counter. Clocked by APB1
void timers_tim6_init(void)
{
 8000a04:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_TIM6);
 8000a06:	4808      	ldr	r0, [pc, #32]	; (8000a28 <timers_tim6_init+0x24>)
 8000a08:	f000 fab6 	bl	8000f78 <rcc_periph_clock_enable>
    timer_disable_counter(TIM6);
 8000a0c:	4c07      	ldr	r4, [pc, #28]	; (8000a2c <timers_tim6_init+0x28>)
 8000a0e:	0020      	movs	r0, r4
 8000a10:	f000 fb03 	bl	800101a <timer_disable_counter>
    timer_set_prescaler(TIM6, (2097 - 1));
 8000a14:	2183      	movs	r1, #131	; 0x83
 8000a16:	0109      	lsls	r1, r1, #4
 8000a18:	0020      	movs	r0, r4
 8000a1a:	f000 fb03 	bl	8001024 <timer_set_prescaler>
    timer_enable_counter(TIM6);
 8000a1e:	0020      	movs	r0, r4
 8000a20:	f000 faf6 	bl	8001010 <timer_enable_counter>
}
 8000a24:	bd10      	pop	{r4, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	00000704 	.word	0x00000704
 8000a2c:	40001000 	.word	0x40001000

08000a30 <timers_delay_milliseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_milliseconds(uint32_t delay_milliseconds)
{
 8000a30:	b570      	push	{r4, r5, r6, lr}
 8000a32:	0004      	movs	r4, r0
    uint32_t curr_time = timer_get_counter(TIM6);
 8000a34:	4807      	ldr	r0, [pc, #28]	; (8000a54 <timers_delay_milliseconds+0x24>)
 8000a36:	f000 faf7 	bl	8001028 <timer_get_counter>
 8000a3a:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_milliseconds > 65000)
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <timers_delay_milliseconds+0x28>)
 8000a3e:	429c      	cmp	r4, r3
 8000a40:	d900      	bls.n	8000a44 <timers_delay_milliseconds+0x14>
        delay_milliseconds = 65000;
 8000a42:	001c      	movs	r4, r3

    while (timer_get_counter(TIM6) - curr_time < delay_milliseconds);
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <timers_delay_milliseconds+0x24>)
 8000a46:	f000 faef 	bl	8001028 <timer_get_counter>
 8000a4a:	1b40      	subs	r0, r0, r5
 8000a4c:	42a0      	cmp	r0, r4
 8000a4e:	d3f9      	bcc.n	8000a44 <timers_delay_milliseconds+0x14>
}
 8000a50:	bd70      	pop	{r4, r5, r6, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	40001000 	.word	0x40001000
 8000a58:	0000fde8 	.word	0x0000fde8

08000a5c <timers_millis>:

// Returns value of millisecond counter
uint16_t timers_millis(void)
{
 8000a5c:	b510      	push	{r4, lr}
    return timer_get_counter(TIM6);
 8000a5e:	4802      	ldr	r0, [pc, #8]	; (8000a68 <timers_millis+0xc>)
 8000a60:	f000 fae2 	bl	8001028 <timer_get_counter>
 8000a64:	b280      	uxth	r0, r0
}
 8000a66:	bd10      	pop	{r4, pc}
 8000a68:	40001000 	.word	0x40001000

08000a6c <timeout_init>:
}


// Timout functions
void timeout_init(void)
{
 8000a6c:	b510      	push	{r4, lr}
    timeout_counter     = 0; 
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <timeout_init+0x14>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
    // timeout_counter     = 2140483648; 
    timeout_timer       = timers_micros(); 
 8000a74:	f7ff ffbe 	bl	80009f4 <timers_micros>
 8000a78:	4b02      	ldr	r3, [pc, #8]	; (8000a84 <timeout_init+0x18>)
 8000a7a:	8018      	strh	r0, [r3, #0]
}
 8000a7c:	bd10      	pop	{r4, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	200002a8 	.word	0x200002a8
 8000a84:	200002ac 	.word	0x200002ac

08000a88 <timeout>:

bool timeout(uint32_t time_microseconds, char *msg, uint32_t data)
{
 8000a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	0006      	movs	r6, r0
 8000a8e:	9101      	str	r1, [sp, #4]
 8000a90:	0015      	movs	r5, r2
    timeout_counter    += (uint16_t)(timers_micros() - timeout_timer);
 8000a92:	f7ff ffaf 	bl	80009f4 <timers_micros>
 8000a96:	4c0c      	ldr	r4, [pc, #48]	; (8000ac8 <timeout+0x40>)
 8000a98:	8823      	ldrh	r3, [r4, #0]
 8000a9a:	1ac3      	subs	r3, r0, r3
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	4f0b      	ldr	r7, [pc, #44]	; (8000acc <timeout+0x44>)
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	4694      	mov	ip, r2
 8000aa4:	4463      	add	r3, ip
 8000aa6:	603b      	str	r3, [r7, #0]
    timeout_timer       = timers_micros();
 8000aa8:	f7ff ffa4 	bl	80009f4 <timers_micros>
 8000aac:	8020      	strh	r0, [r4, #0]

    // log_printf("%u\n", timeout_counter);

    if(timeout_counter > time_microseconds)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	42b3      	cmp	r3, r6
 8000ab2:	d802      	bhi.n	8000aba <timeout+0x32>
    {
        log_printf("Timeout %s %08X\n", msg, data);
        return true;
    }
    else    
        return false;
 8000ab4:	2000      	movs	r0, #0
}
 8000ab6:	b003      	add	sp, #12
 8000ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        log_printf("Timeout %s %08X\n", msg, data);
 8000aba:	002a      	movs	r2, r5
 8000abc:	9901      	ldr	r1, [sp, #4]
 8000abe:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <timeout+0x48>)
 8000ac0:	f7ff fcb6 	bl	8000430 <log_printf>
        return true;
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	e7f6      	b.n	8000ab6 <timeout+0x2e>
 8000ac8:	200002ac 	.word	0x200002ac
 8000acc:	200002a8 	.word	0x200002a8
 8000ad0:	08001534 	.word	0x08001534

08000ad4 <set_gpio_for_standby>:

void set_gpio_for_standby(void)
{   
 8000ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Common
    // LED
    gpio_mode_setup(LED_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, LED);
 8000ad6:	2680      	movs	r6, #128	; 0x80
 8000ad8:	0076      	lsls	r6, r6, #1
 8000ada:	4c36      	ldr	r4, [pc, #216]	; (8000bb4 <set_gpio_for_standby+0xe0>)
 8000adc:	0033      	movs	r3, r6
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2103      	movs	r1, #3
 8000ae2:	0020      	movs	r0, r4
 8000ae4:	f000 f8d5 	bl	8000c92 <gpio_mode_setup>
    gpio_set(LED_PORT, LED);
 8000ae8:	0031      	movs	r1, r6
 8000aea:	0020      	movs	r0, r4
 8000aec:	f000 f8cc 	bl	8000c88 <gpio_set>

    // Serial Print
    gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, SPF_USART_TX);
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	25a0      	movs	r5, #160	; 0xa0
 8000af4:	05ed      	lsls	r5, r5, #23
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	2201      	movs	r2, #1
 8000afa:	2100      	movs	r1, #0
 8000afc:	0028      	movs	r0, r5
 8000afe:	f000 f8c8 	bl	8000c92 <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE,  SPF_USART_RX);
 8000b02:	2780      	movs	r7, #128	; 0x80
 8000b04:	00ff      	lsls	r7, r7, #3
 8000b06:	003b      	movs	r3, r7
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	0028      	movs	r0, r5
 8000b0e:	f000 f8c0 	bl	8000c92 <gpio_mode_setup>
	gpio_set(SPF_USART_RX_PORT, SPF_USART_RX);
 8000b12:	0039      	movs	r1, r7
 8000b14:	0028      	movs	r0, r5
 8000b16:	f000 f8b7 	bl	8000c88 <gpio_set>

    // Batt Sense
    gpio_mode_setup(BATT_SENS_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, BATT_SENS);
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2103      	movs	r1, #3
 8000b20:	0028      	movs	r0, r5
 8000b22:	f000 f8b6 	bl	8000c92 <gpio_mode_setup>
    
    // RFM
    // SPI
    gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_ANALOG,   GPIO_PUPD_NONE,       RFM_SPI_MISO);
 8000b26:	2380      	movs	r3, #128	; 0x80
 8000b28:	01db      	lsls	r3, r3, #7
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2103      	movs	r1, #3
 8000b2e:	0020      	movs	r0, r4
 8000b30:	f000 f8af 	bl	8000c92 <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_SCK_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_SCK);
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	019b      	lsls	r3, r3, #6
 8000b38:	2202      	movs	r2, #2
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	0020      	movs	r0, r4
 8000b3e:	f000 f8a8 	bl	8000c92 <gpio_mode_setup>
    gpio_mode_setup(RFM_SPI_MOSI_PORT,  GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_MOSI);
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	021b      	lsls	r3, r3, #8
 8000b46:	2202      	movs	r2, #2
 8000b48:	2100      	movs	r1, #0
 8000b4a:	0020      	movs	r0, r4
 8000b4c:	f000 f8a1 	bl	8000c92 <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_NSS_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_SPI_NSS);
 8000b50:	2340      	movs	r3, #64	; 0x40
 8000b52:	2201      	movs	r2, #1
 8000b54:	2100      	movs	r1, #0
 8000b56:	0028      	movs	r0, r5
 8000b58:	f000 f89b 	bl	8000c92 <gpio_mode_setup>
    gpio_mode_setup(RFM_RESET_PORT,     GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_RESET);
 8000b5c:	2310      	movs	r3, #16
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2100      	movs	r1, #0
 8000b62:	0028      	movs	r0, r5
 8000b64:	f000 f895 	bl	8000c92 <gpio_mode_setup>

    // DIO
    gpio_mode_setup(RFM_IO_0_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_0);
 8000b68:	003b      	movs	r3, r7
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2103      	movs	r1, #3
 8000b6e:	0020      	movs	r0, r4
 8000b70:	f000 f88f 	bl	8000c92 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_1_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_1);
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	011b      	lsls	r3, r3, #4
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2103      	movs	r1, #3
 8000b7c:	0020      	movs	r0, r4
 8000b7e:	f000 f888 	bl	8000c92 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_2_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_2);
 8000b82:	0033      	movs	r3, r6
 8000b84:	2200      	movs	r2, #0
 8000b86:	2103      	movs	r1, #3
 8000b88:	0028      	movs	r0, r5
 8000b8a:	f000 f882 	bl	8000c92 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_3_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_3);
 8000b8e:	2302      	movs	r3, #2
 8000b90:	2200      	movs	r2, #0
 8000b92:	2103      	movs	r1, #3
 8000b94:	0020      	movs	r0, r4
 8000b96:	f000 f87c 	bl	8000c92 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_4_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_4);
 8000b9a:	2304      	movs	r3, #4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2103      	movs	r1, #3
 8000ba0:	0020      	movs	r0, r4
 8000ba2:	f000 f876 	bl	8000c92 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_5_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_5);
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2103      	movs	r1, #3
 8000bac:	0020      	movs	r0, r4
 8000bae:	f000 f870 	bl	8000c92 <gpio_mode_setup>
    gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
	gpio_mode_setup(TEMP_I2C_SDA_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SDA);

    #endif

}
 8000bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bb4:	50000400 	.word	0x50000400

08000bb8 <rtc_isr>:

// Override default rtc interrupt handler
void rtc_isr(void)
{ 
 8000bb8:	b510      	push	{r4, lr}
    exti_reset_request(EXTI20);
 8000bba:	2080      	movs	r0, #128	; 0x80
 8000bbc:	0340      	lsls	r0, r0, #13
 8000bbe:	f000 f83f 	bl	8000c40 <exti_reset_request>

    // scb_reset_system();

    log_init();
 8000bc2:	f7ff fc1f 	bl	8000404 <log_init>
    log_printf("RTC ISR\n");
 8000bc6:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <rtc_isr+0x40>)
 8000bc8:	f7ff fc32 	bl	8000430 <log_printf>

    if(RTC_ISR & RTC_ISR_WUTF)
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <rtc_isr+0x44>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	055b      	lsls	r3, r3, #21
 8000bd2:	d400      	bmi.n	8000bd6 <rtc_isr+0x1e>
        pwr_clear_standby_flag();
        rtc_lock();
	    pwr_enable_backup_domain_write_protect();
        set_gpio_for_standby();
    }
}
 8000bd4:	bd10      	pop	{r4, pc}
        pwr_disable_backup_domain_write_protect();
 8000bd6:	f000 f8e9 	bl	8000dac <pwr_disable_backup_domain_write_protect>
        rtc_unlock();
 8000bda:	f000 f9f9 	bl	8000fd0 <rtc_unlock>
	    rtc_clear_wakeup_flag();
 8000bde:	f000 fa05 	bl	8000fec <rtc_clear_wakeup_flag>
        pwr_clear_wakeup_flag();
 8000be2:	f000 f8ff 	bl	8000de4 <pwr_clear_wakeup_flag>
        pwr_clear_standby_flag();
 8000be6:	f000 f8f5 	bl	8000dd4 <pwr_clear_standby_flag>
        rtc_lock();
 8000bea:	f000 f9f9 	bl	8000fe0 <rtc_lock>
	    pwr_enable_backup_domain_write_protect();
 8000bee:	f000 f8e7 	bl	8000dc0 <pwr_enable_backup_domain_write_protect>
        set_gpio_for_standby();
 8000bf2:	f7ff ff6f 	bl	8000ad4 <set_gpio_for_standby>
}
 8000bf6:	e7ed      	b.n	8000bd4 <rtc_isr+0x1c>
 8000bf8:	08001548 	.word	0x08001548
 8000bfc:	4000280c 	.word	0x4000280c

08000c00 <adc_start_conversion_regular>:
 * @param[in] adc ADC block register address base @ref adc_reg_base
 */
void adc_start_conversion_regular(uint32_t adc)
{
	/* Start conversion on regular channels. */
	ADC_CR(adc) |= ADC_CR_ADSTART;
 8000c00:	2304      	movs	r3, #4
 8000c02:	6882      	ldr	r2, [r0, #8]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	6083      	str	r3, [r0, #8]
}
 8000c08:	4770      	bx	lr
	...

08000c0c <crc_reset>:

/**@{*/

void crc_reset(void)
{
	CRC_CR |= CRC_CR_RESET;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	4a02      	ldr	r2, [pc, #8]	; (8000c18 <crc_reset+0xc>)
 8000c10:	6811      	ldr	r1, [r2, #0]
 8000c12:	430b      	orrs	r3, r1
 8000c14:	6013      	str	r3, [r2, #0]
}
 8000c16:	4770      	bx	lr
 8000c18:	40023008 	.word	0x40023008

08000c1c <crc_reverse_output_enable>:
 Enables the reversal of the bit order of the output data.

 */
void crc_reverse_output_enable()
{
	CRC_CR |= CRC_CR_REV_OUT;
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	4a02      	ldr	r2, [pc, #8]	; (8000c28 <crc_reverse_output_enable+0xc>)
 8000c20:	6811      	ldr	r1, [r2, #0]
 8000c22:	430b      	orrs	r3, r1
 8000c24:	6013      	str	r3, [r2, #0]
}
 8000c26:	4770      	bx	lr
 8000c28:	40023008 	.word	0x40023008

08000c2c <crc_set_reverse_input>:
 @param[in] reverse_in Unsigned int32. Reversal bit order @ref crc_rev_in.
 */
void crc_set_reverse_input(uint32_t reverse_in)
{
	uint32_t reg32 = CRC_CR;
	reg32 = (reg32 & ~CRC_CR_REV_IN) | reverse_in;
 8000c2c:	2160      	movs	r1, #96	; 0x60
	uint32_t reg32 = CRC_CR;
 8000c2e:	4a03      	ldr	r2, [pc, #12]	; (8000c3c <crc_set_reverse_input+0x10>)
 8000c30:	6813      	ldr	r3, [r2, #0]
	reg32 = (reg32 & ~CRC_CR_REV_IN) | reverse_in;
 8000c32:	438b      	bics	r3, r1
 8000c34:	4303      	orrs	r3, r0
	CRC_CR = reg32;
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	4770      	bx	lr
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	40023008 	.word	0x40023008

08000c40 <exti_reset_request>:
{
#if defined(EXTI_RPR1) && defined(EXTI_FPR1)
	EXTI_RPR1 = extis;
	EXTI_FPR1 = extis;
#else
	EXTI_PR = extis;
 8000c40:	4b01      	ldr	r3, [pc, #4]	; (8000c48 <exti_reset_request+0x8>)
 8000c42:	6018      	str	r0, [r3, #0]
#endif
}
 8000c44:	4770      	bx	lr
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	40010414 	.word	0x40010414

08000c4c <flash_set_ws>:
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8000c4c:	2101      	movs	r1, #1
	reg32 = FLASH_ACR;
 8000c4e:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <flash_set_ws+0x10>)
 8000c50:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8000c52:	438b      	bics	r3, r1
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 8000c54:	4303      	orrs	r3, r0
	FLASH_ACR = reg32;
 8000c56:	6013      	str	r3, [r2, #0]
}
 8000c58:	4770      	bx	lr
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	40022000 	.word	0x40022000

08000c60 <flash_unlock_pecr>:
 * yourself.
 * @sa flash_unlock
 */
void flash_unlock_pecr(void)
{
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY1;
 8000c60:	4b02      	ldr	r3, [pc, #8]	; (8000c6c <flash_unlock_pecr+0xc>)
 8000c62:	4a03      	ldr	r2, [pc, #12]	; (8000c70 <flash_unlock_pecr+0x10>)
 8000c64:	601a      	str	r2, [r3, #0]
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY2;
 8000c66:	4a03      	ldr	r2, [pc, #12]	; (8000c74 <flash_unlock_pecr+0x14>)
 8000c68:	601a      	str	r2, [r3, #0]
}
 8000c6a:	4770      	bx	lr
 8000c6c:	4002200c 	.word	0x4002200c
 8000c70:	89abcdef 	.word	0x89abcdef
 8000c74:	02030405 	.word	0x02030405

08000c78 <flash_lock_pecr>:

void flash_lock_pecr(void)
{
	FLASH_PECR |= FLASH_PECR_PELOCK;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	4a02      	ldr	r2, [pc, #8]	; (8000c84 <flash_lock_pecr+0xc>)
 8000c7c:	6811      	ldr	r1, [r2, #0]
 8000c7e:	430b      	orrs	r3, r1
 8000c80:	6013      	str	r3, [r2, #0]
}
 8000c82:	4770      	bx	lr
 8000c84:	40022004 	.word	0x40022004

08000c88 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8000c88:	6181      	str	r1, [r0, #24]
}
 8000c8a:	4770      	bx	lr

08000c8c <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8000c8c:	0409      	lsls	r1, r1, #16
 8000c8e:	6181      	str	r1, [r0, #24]
}
 8000c90:	4770      	bx	lr

08000c92 <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 8000c92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c94:	b085      	sub	sp, #20
 8000c96:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8000c98:	2703      	movs	r7, #3
	pupd = GPIO_PUPDR(gpioport);
 8000c9a:	2100      	movs	r1, #0
{
 8000c9c:	9202      	str	r2, [sp, #8]
 8000c9e:	9303      	str	r3, [sp, #12]
	moder = GPIO_MODER(gpioport);
 8000ca0:	6802      	ldr	r2, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 8000ca2:	68c3      	ldr	r3, [r0, #12]
		if (!((1 << i) & gpios)) {
 8000ca4:	9c03      	ldr	r4, [sp, #12]
 8000ca6:	2501      	movs	r5, #1
 8000ca8:	410c      	asrs	r4, r1
 8000caa:	422c      	tst	r4, r5
 8000cac:	d00a      	beq.n	8000cc4 <gpio_mode_setup+0x32>
		moder &= ~GPIO_MODE_MASK(i);
 8000cae:	003d      	movs	r5, r7
 8000cb0:	004c      	lsls	r4, r1, #1
 8000cb2:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8000cb4:	9e01      	ldr	r6, [sp, #4]
		moder &= ~GPIO_MODE_MASK(i);
 8000cb6:	43aa      	bics	r2, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 8000cb8:	43ab      	bics	r3, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000cba:	9d02      	ldr	r5, [sp, #8]
		moder |= GPIO_MODE(i, mode);
 8000cbc:	40a6      	lsls	r6, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000cbe:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8000cc0:	4332      	orrs	r2, r6
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000cc2:	432b      	orrs	r3, r5
	for (i = 0; i < 16; i++) {
 8000cc4:	3101      	adds	r1, #1
 8000cc6:	2910      	cmp	r1, #16
 8000cc8:	d1ec      	bne.n	8000ca4 <gpio_mode_setup+0x12>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 8000cca:	6002      	str	r2, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 8000ccc:	60c3      	str	r3, [r0, #12]
}
 8000cce:	b005      	add	sp, #20
 8000cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cd2 <gpio_set_output_options>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_output_options(uint32_t gpioport, uint8_t otype, uint8_t speed,
			     uint16_t gpios)
{
 8000cd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000cd4:	9201      	str	r2, [sp, #4]
	uint16_t i;
	uint32_t ospeedr;

	if (otype == 0x1) {
 8000cd6:	2901      	cmp	r1, #1
 8000cd8:	d116      	bne.n	8000d08 <gpio_set_output_options+0x36>
		GPIO_OTYPER(gpioport) |= gpios;
 8000cda:	6841      	ldr	r1, [r0, #4]
 8000cdc:	4319      	orrs	r1, r3
	} else {
		GPIO_OTYPER(gpioport) &= ~gpios;
	}

	ospeedr = GPIO_OSPEEDR(gpioport);
 8000cde:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8000ce0:	2601      	movs	r6, #1
			continue;
		}
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8000ce2:	2703      	movs	r7, #3
		GPIO_OTYPER(gpioport) &= ~gpios;
 8000ce4:	6041      	str	r1, [r0, #4]
	ospeedr = GPIO_OSPEEDR(gpioport);
 8000ce6:	6881      	ldr	r1, [r0, #8]
		if (!((1 << i) & gpios)) {
 8000ce8:	001d      	movs	r5, r3
 8000cea:	4125      	asrs	r5, r4
 8000cec:	4235      	tst	r5, r6
 8000cee:	d006      	beq.n	8000cfe <gpio_set_output_options+0x2c>
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8000cf0:	003a      	movs	r2, r7
 8000cf2:	0065      	lsls	r5, r4, #1
 8000cf4:	40aa      	lsls	r2, r5
 8000cf6:	4391      	bics	r1, r2
		ospeedr |= GPIO_OSPEED(i, speed);
 8000cf8:	9a01      	ldr	r2, [sp, #4]
 8000cfa:	40aa      	lsls	r2, r5
 8000cfc:	4311      	orrs	r1, r2
	for (i = 0; i < 16; i++) {
 8000cfe:	3401      	adds	r4, #1
 8000d00:	2c10      	cmp	r4, #16
 8000d02:	d1f1      	bne.n	8000ce8 <gpio_set_output_options+0x16>
	}

	GPIO_OSPEEDR(gpioport) = ospeedr;
 8000d04:	6081      	str	r1, [r0, #8]
}
 8000d06:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		GPIO_OTYPER(gpioport) &= ~gpios;
 8000d08:	6841      	ldr	r1, [r0, #4]
 8000d0a:	4399      	bics	r1, r3
 8000d0c:	e7e7      	b.n	8000cde <gpio_set_output_options+0xc>

08000d0e <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 8000d0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);
 8000d10:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 8000d12:	2601      	movs	r6, #1
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 8000d14:	270f      	movs	r7, #15
	afrl = GPIO_AFRL(gpioport);
 8000d16:	6a04      	ldr	r4, [r0, #32]
{
 8000d18:	9100      	str	r1, [sp, #0]
	afrh = GPIO_AFRH(gpioport);
 8000d1a:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8000d1c:	9201      	str	r2, [sp, #4]
		if (!((1 << i) & gpios)) {
 8000d1e:	9d01      	ldr	r5, [sp, #4]
 8000d20:	411d      	asrs	r5, r3
 8000d22:	4235      	tst	r5, r6
 8000d24:	d006      	beq.n	8000d34 <gpio_set_af+0x26>
		afrl &= ~GPIO_AFR_MASK(i);
 8000d26:	003a      	movs	r2, r7
 8000d28:	009d      	lsls	r5, r3, #2
 8000d2a:	40aa      	lsls	r2, r5
 8000d2c:	4394      	bics	r4, r2
		afrl |= GPIO_AFR(i, alt_func_num);
 8000d2e:	9a00      	ldr	r2, [sp, #0]
 8000d30:	40aa      	lsls	r2, r5
 8000d32:	4314      	orrs	r4, r2
	for (i = 0; i < 8; i++) {
 8000d34:	3301      	adds	r3, #1
 8000d36:	2b08      	cmp	r3, #8
 8000d38:	d1f1      	bne.n	8000d1e <gpio_set_af+0x10>
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8000d3a:	2601      	movs	r6, #1
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8000d3c:	270f      	movs	r7, #15
		if (!((1 << i) & gpios)) {
 8000d3e:	9a01      	ldr	r2, [sp, #4]
 8000d40:	411a      	asrs	r2, r3
 8000d42:	4232      	tst	r2, r6
 8000d44:	d007      	beq.n	8000d56 <gpio_set_af+0x48>
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8000d46:	003a      	movs	r2, r7
 8000d48:	009d      	lsls	r5, r3, #2
 8000d4a:	3d20      	subs	r5, #32
 8000d4c:	40aa      	lsls	r2, r5
 8000d4e:	4391      	bics	r1, r2
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 8000d50:	9a00      	ldr	r2, [sp, #0]
 8000d52:	40aa      	lsls	r2, r5
 8000d54:	4311      	orrs	r1, r2
	for (i = 8; i < 16; i++) {
 8000d56:	3301      	adds	r3, #1
 8000d58:	2b10      	cmp	r3, #16
 8000d5a:	d1f0      	bne.n	8000d3e <gpio_set_af+0x30>
	}

	GPIO_AFRL(gpioport) = afrl;
 8000d5c:	6204      	str	r4, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 8000d5e:	6241      	str	r1, [r0, #36]	; 0x24
}
 8000d60:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08000d62 <lptimer_get_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @returns Counter value.
 */
uint16_t lptimer_get_counter(uint32_t lptimer_peripheral)
{
	return LPTIM_CNT(lptimer_peripheral);
 8000d62:	69c0      	ldr	r0, [r0, #28]
 8000d64:	b280      	uxth	r0, r0
}
 8000d66:	4770      	bx	lr

08000d68 <lptimer_enable>:
 *
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 */
void lptimer_enable(uint32_t lptimer_peripheral)
{
	LPTIM_CR(lptimer_peripheral) |= LPTIM_CR_ENABLE;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	6902      	ldr	r2, [r0, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	6103      	str	r3, [r0, #16]
}
 8000d70:	4770      	bx	lr

08000d72 <lptimer_start_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] mode lptimer start mode (@ref LPTIM_CR_SNGSTRT or @ref LPTIM_CR_CNTSTRT)
 */
void lptimer_start_counter(uint32_t lptimer_peripheral, uint32_t mode)
{
	LPTIM_CR(lptimer_peripheral) |= mode;
 8000d72:	6903      	ldr	r3, [r0, #16]
 8000d74:	430b      	orrs	r3, r1
 8000d76:	6103      	str	r3, [r0, #16]
}
 8000d78:	4770      	bx	lr
	...

08000d7c <lptimer_set_prescaler>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] prescaler Clock prescaler (@ref lptim_cfgr_presc)
 */
void lptimer_set_prescaler(uint32_t lptimer_peripheral, uint32_t prescaler)
{
	uint32_t reg32 = LPTIM_CFGR(lptimer_peripheral);
 8000d7c:	68c3      	ldr	r3, [r0, #12]
	reg32 &= ~(LPTIM_CFGR_PRESC_MASK << LPTIM_CFGR_PRESC_SHIFT);
 8000d7e:	4a02      	ldr	r2, [pc, #8]	; (8000d88 <lptimer_set_prescaler+0xc>)
 8000d80:	4013      	ands	r3, r2
	LPTIM_CFGR(lptimer_peripheral) = reg32 | prescaler;
 8000d82:	430b      	orrs	r3, r1
 8000d84:	60c3      	str	r3, [r0, #12]
}
 8000d86:	4770      	bx	lr
 8000d88:	fffff1ff 	.word	0xfffff1ff

08000d8c <lptimer_enable_trigger>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] trigen Enable Trigger
 */
void lptimer_enable_trigger(uint32_t lptimer_peripheral, uint32_t trigen)
{
	uint32_t reg32 = LPTIM_CFGR(lptimer_peripheral);
 8000d8c:	68c3      	ldr	r3, [r0, #12]
	reg32 &= ~(LPTIM_CFGR_TRIGEN_MASK << LPTIM_CFGR_TRIGEN_SHIFT);
 8000d8e:	4a02      	ldr	r2, [pc, #8]	; (8000d98 <lptimer_enable_trigger+0xc>)
 8000d90:	4013      	ands	r3, r2
	LPTIM_CFGR(lptimer_peripheral) = reg32 | trigen;
 8000d92:	430b      	orrs	r3, r1
 8000d94:	60c3      	str	r3, [r0, #12]
}
 8000d96:	4770      	bx	lr
 8000d98:	fff1ffff 	.word	0xfff1ffff

08000d9c <lptimer_set_period>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] period_value Autoreload value. Must be greater that CMP value.
 */
void lptimer_set_period(uint32_t lptimer_peripheral, uint16_t period_value)
{
	LPTIM_ARR(lptimer_peripheral) = period_value;
 8000d9c:	6181      	str	r1, [r0, #24]
}
 8000d9e:	4770      	bx	lr

08000da0 <lptimer_set_internal_clock_source>:
 *
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 */
void lptimer_set_internal_clock_source(uint32_t lptimer_peripheral)
{
	LPTIM_CFGR(lptimer_peripheral) &= ~LPTIM_CFGR_CKSEL;
 8000da0:	2201      	movs	r2, #1
 8000da2:	68c3      	ldr	r3, [r0, #12]
 8000da4:	4393      	bics	r3, r2
 8000da6:	60c3      	str	r3, [r0, #12]
}
 8000da8:	4770      	bx	lr
	...

08000dac <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	4a03      	ldr	r2, [pc, #12]	; (8000dbc <pwr_disable_backup_domain_write_protect+0x10>)
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	6811      	ldr	r1, [r2, #0]
 8000db4:	430b      	orrs	r3, r1
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	4770      	bx	lr
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	40007000 	.word	0x40007000

08000dc0 <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 8000dc0:	4a02      	ldr	r2, [pc, #8]	; (8000dcc <pwr_enable_backup_domain_write_protect+0xc>)
 8000dc2:	4903      	ldr	r1, [pc, #12]	; (8000dd0 <pwr_enable_backup_domain_write_protect+0x10>)
 8000dc4:	6813      	ldr	r3, [r2, #0]
 8000dc6:	400b      	ands	r3, r1
 8000dc8:	6013      	str	r3, [r2, #0]
}
 8000dca:	4770      	bx	lr
 8000dcc:	40007000 	.word	0x40007000
 8000dd0:	fffffeff 	.word	0xfffffeff

08000dd4 <pwr_clear_standby_flag>:
This is set when the processor returns from a standby mode.
*/

void pwr_clear_standby_flag(void)
{
	PWR_CR |= PWR_CR_CSBF;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	4a02      	ldr	r2, [pc, #8]	; (8000de0 <pwr_clear_standby_flag+0xc>)
 8000dd8:	6811      	ldr	r1, [r2, #0]
 8000dda:	430b      	orrs	r3, r1
 8000ddc:	6013      	str	r3, [r2, #0]
}
 8000dde:	4770      	bx	lr
 8000de0:	40007000 	.word	0x40007000

08000de4 <pwr_clear_wakeup_flag>:
This is set when the processor receives a wakeup signal.
*/

void pwr_clear_wakeup_flag(void)
{
	PWR_CR |= PWR_CR_CWUF;
 8000de4:	2304      	movs	r3, #4
 8000de6:	4a02      	ldr	r2, [pc, #8]	; (8000df0 <pwr_clear_wakeup_flag+0xc>)
 8000de8:	6811      	ldr	r1, [r2, #0]
 8000dea:	430b      	orrs	r3, r1
 8000dec:	6013      	str	r3, [r2, #0]
}
 8000dee:	4770      	bx	lr
 8000df0:	40007000 	.word	0x40007000

08000df4 <rcc_osc_on>:
uint32_t rcc_ahb_frequency = 2097000;
uint32_t rcc_apb1_frequency = 2097000;
uint32_t rcc_apb2_frequency = 2097000;

void rcc_osc_on(enum rcc_osc osc)
{
 8000df4:	b500      	push	{lr}
 8000df6:	2806      	cmp	r0, #6
 8000df8:	d80b      	bhi.n	8000e12 <rcc_osc_on+0x1e>
 8000dfa:	f000 f9dd 	bl	80011b8 <__gnu_thumb1_case_uqi>
 8000dfe:	1004      	.short	0x1004
 8000e00:	1b0b1915 	.word	0x1b0b1915
 8000e04:	1d          	.byte	0x1d
 8000e05:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 8000e06:	2380      	movs	r3, #128	; 0x80
 8000e08:	4a0c      	ldr	r2, [pc, #48]	; (8000e3c <rcc_osc_on+0x48>)
 8000e0a:	045b      	lsls	r3, r3, #17
 8000e0c:	6811      	ldr	r1, [r2, #0]
		break;
	case RCC_LSE:
		RCC_CSR |= RCC_CSR_LSEON;
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
 8000e0e:	430b      	orrs	r3, r1
 8000e10:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8000e12:	bd00      	pop	{pc}
		RCC_CR |= RCC_CR_MSION;
 8000e14:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <rcc_osc_on+0x48>)
		RCC_CSR |= RCC_CSR_LSEON;
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	6811      	ldr	r1, [r2, #0]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	e7f7      	b.n	8000e0e <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSEON;
 8000e1e:	2380      	movs	r3, #128	; 0x80
 8000e20:	4a06      	ldr	r2, [pc, #24]	; (8000e3c <rcc_osc_on+0x48>)
 8000e22:	025b      	lsls	r3, r3, #9
 8000e24:	6811      	ldr	r1, [r2, #0]
 8000e26:	e7f2      	b.n	8000e0e <rcc_osc_on+0x1a>
		RCC_CRRCR |= RCC_CRRCR_HSI48ON;
 8000e28:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <rcc_osc_on+0x4c>)
		RCC_CSR |= RCC_CSR_LSION;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	6811      	ldr	r1, [r2, #0]
 8000e2e:	e7ee      	b.n	8000e0e <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSI16ON;
 8000e30:	4a02      	ldr	r2, [pc, #8]	; (8000e3c <rcc_osc_on+0x48>)
 8000e32:	e7fa      	b.n	8000e2a <rcc_osc_on+0x36>
		RCC_CSR |= RCC_CSR_LSEON;
 8000e34:	4a03      	ldr	r2, [pc, #12]	; (8000e44 <rcc_osc_on+0x50>)
 8000e36:	e7ee      	b.n	8000e16 <rcc_osc_on+0x22>
		RCC_CSR |= RCC_CSR_LSION;
 8000e38:	4a02      	ldr	r2, [pc, #8]	; (8000e44 <rcc_osc_on+0x50>)
 8000e3a:	e7f6      	b.n	8000e2a <rcc_osc_on+0x36>
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40021008 	.word	0x40021008
 8000e44:	40021050 	.word	0x40021050

08000e48 <rcc_is_osc_ready>:
	cm3_assert_not_reached();
}


bool rcc_is_osc_ready(enum rcc_osc osc)
{
 8000e48:	2300      	movs	r3, #0
 8000e4a:	b500      	push	{lr}
 8000e4c:	2806      	cmp	r0, #6
 8000e4e:	d80a      	bhi.n	8000e66 <rcc_is_osc_ready+0x1e>
 8000e50:	3301      	adds	r3, #1
 8000e52:	f000 f9b1 	bl	80011b8 <__gnu_thumb1_case_uqi>
 8000e56:	0a04      	.short	0x0a04
 8000e58:	1a160e12 	.word	0x1a160e12
 8000e5c:	1c          	.byte	0x1c
 8000e5d:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 8000e5e:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <rcc_is_osc_ready+0x4c>)
 8000e60:	6810      	ldr	r0, [r2, #0]
 8000e62:	0e40      	lsrs	r0, r0, #25
	case RCC_MSI:
		return RCC_CR & RCC_CR_MSIRDY;
	case RCC_LSE:
		return RCC_CSR & RCC_CSR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 8000e64:	4003      	ands	r3, r0
	}
	return false;
}
 8000e66:	0018      	movs	r0, r3
 8000e68:	bd00      	pop	{pc}
		return RCC_CR & RCC_CR_HSERDY;
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <rcc_is_osc_ready+0x4c>)
 8000e6c:	6810      	ldr	r0, [r2, #0]
 8000e6e:	0c40      	lsrs	r0, r0, #17
 8000e70:	e7f8      	b.n	8000e64 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_HSI16RDY;
 8000e72:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <rcc_is_osc_ready+0x4c>)
 8000e74:	6810      	ldr	r0, [r2, #0]
 8000e76:	0880      	lsrs	r0, r0, #2
 8000e78:	e7f4      	b.n	8000e64 <rcc_is_osc_ready+0x1c>
		return RCC_CRRCR & RCC_CRRCR_HSI48RDY;
 8000e7a:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <rcc_is_osc_ready+0x50>)
		return RCC_CSR & RCC_CSR_LSIRDY;
 8000e7c:	6810      	ldr	r0, [r2, #0]
 8000e7e:	0840      	lsrs	r0, r0, #1
 8000e80:	e7f0      	b.n	8000e64 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_MSIRDY;
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <rcc_is_osc_ready+0x4c>)
		return RCC_CSR & RCC_CSR_LSERDY;
 8000e84:	6810      	ldr	r0, [r2, #0]
 8000e86:	0a40      	lsrs	r0, r0, #9
 8000e88:	e7ec      	b.n	8000e64 <rcc_is_osc_ready+0x1c>
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <rcc_is_osc_ready+0x54>)
 8000e8c:	e7fa      	b.n	8000e84 <rcc_is_osc_ready+0x3c>
		return RCC_CSR & RCC_CSR_LSIRDY;
 8000e8e:	4a03      	ldr	r2, [pc, #12]	; (8000e9c <rcc_is_osc_ready+0x54>)
 8000e90:	e7f4      	b.n	8000e7c <rcc_is_osc_ready+0x34>
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40021008 	.word	0x40021008
 8000e9c:	40021050 	.word	0x40021050

08000ea0 <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 8000ea0:	b510      	push	{r4, lr}
 8000ea2:	0004      	movs	r4, r0
	while (!rcc_is_osc_ready(osc));
 8000ea4:	0020      	movs	r0, r4
 8000ea6:	f7ff ffcf 	bl	8000e48 <rcc_is_osc_ready>
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d0fa      	beq.n	8000ea4 <rcc_wait_for_osc_ready+0x4>
}
 8000eae:	bd10      	pop	{r4, pc}

08000eb0 <rcc_set_ppre1>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb1pre
 */

void rcc_set_ppre1(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8000eb0:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <rcc_set_ppre1+0x10>)
 8000eb2:	4904      	ldr	r1, [pc, #16]	; (8000ec4 <rcc_set_ppre1+0x14>)
 8000eb4:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE1_MASK << RCC_CFGR_PPRE1_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8000eb6:	0200      	lsls	r0, r0, #8
	uint32_t reg = RCC_CFGR
 8000eb8:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8000eba:	4318      	orrs	r0, r3
 8000ebc:	6010      	str	r0, [r2, #0]
}
 8000ebe:	4770      	bx	lr
 8000ec0:	4002100c 	.word	0x4002100c
 8000ec4:	fffff8ff 	.word	0xfffff8ff

08000ec8 <rcc_set_ppre2>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb2pre
 */

void rcc_set_ppre2(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8000ec8:	4a03      	ldr	r2, [pc, #12]	; (8000ed8 <rcc_set_ppre2+0x10>)
 8000eca:	4904      	ldr	r1, [pc, #16]	; (8000edc <rcc_set_ppre2+0x14>)
 8000ecc:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE2_MASK << RCC_CFGR_PPRE2_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8000ece:	02c0      	lsls	r0, r0, #11
	uint32_t reg = RCC_CFGR
 8000ed0:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8000ed2:	4318      	orrs	r0, r3
 8000ed4:	6010      	str	r0, [r2, #0]
}
 8000ed6:	4770      	bx	lr
 8000ed8:	4002100c 	.word	0x4002100c
 8000edc:	ffffc7ff 	.word	0xffffc7ff

08000ee0 <rcc_set_hpre>:
 * @param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
 */

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8000ee0:	21f0      	movs	r1, #240	; 0xf0
 8000ee2:	4a03      	ldr	r2, [pc, #12]	; (8000ef0 <rcc_set_hpre+0x10>)
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8000ee4:	0100      	lsls	r0, r0, #4
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8000ee6:	6813      	ldr	r3, [r2, #0]
 8000ee8:	438b      	bics	r3, r1
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8000eea:	4318      	orrs	r0, r3
 8000eec:	6010      	str	r0, [r2, #0]
}
 8000eee:	4770      	bx	lr
 8000ef0:	4002100c 	.word	0x4002100c

08000ef4 <rcc_set_msi_range>:
*
 * @param msi_range desired range @ref rcc_icscr_msirange
 */
void rcc_set_msi_range(uint32_t msi_range)
{
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8000ef4:	4a03      	ldr	r2, [pc, #12]	; (8000f04 <rcc_set_msi_range+0x10>)
 8000ef6:	4904      	ldr	r1, [pc, #16]	; (8000f08 <rcc_set_msi_range+0x14>)
 8000ef8:	6813      	ldr	r3, [r2, #0]
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8000efa:	0340      	lsls	r0, r0, #13
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8000efc:	400b      	ands	r3, r1
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8000efe:	4318      	orrs	r0, r3
 8000f00:	6010      	str	r0, [r2, #0]
}
 8000f02:	4770      	bx	lr
 8000f04:	40021004 	.word	0x40021004
 8000f08:	ffff1fff 	.word	0xffff1fff

08000f0c <rcc_set_peripheral_clk_sel>:
void rcc_set_peripheral_clk_sel(uint32_t periph, uint32_t sel)
{
	uint8_t shift;
	uint32_t mask;

	switch (periph) {
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <rcc_set_peripheral_clk_sel+0x50>)
{
 8000f0e:	000a      	movs	r2, r1
 8000f10:	b510      	push	{r4, lr}
	switch (periph) {
 8000f12:	4298      	cmp	r0, r3
 8000f14:	d01c      	beq.n	8000f50 <rcc_set_peripheral_clk_sel+0x44>
 8000f16:	d80b      	bhi.n	8000f30 <rcc_set_peripheral_clk_sel+0x24>
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <rcc_set_peripheral_clk_sel+0x54>)
 8000f1a:	4298      	cmp	r0, r3
 8000f1c:	d01a      	beq.n	8000f54 <rcc_set_peripheral_clk_sel+0x48>
 8000f1e:	4911      	ldr	r1, [pc, #68]	; (8000f64 <rcc_set_peripheral_clk_sel+0x58>)
			shift = RCC_CCIPR_I2C3SEL_SHIFT;
			mask = RCC_CCIPR_I2C3SEL_MASK;
			break;

		case I2C1_BASE:
			shift = RCC_CCIPR_I2C1SEL_SHIFT;
 8000f20:	230c      	movs	r3, #12
	switch (periph) {
 8000f22:	4288      	cmp	r0, r1
 8000f24:	d00b      	beq.n	8000f3e <rcc_set_peripheral_clk_sel+0x32>
 8000f26:	4910      	ldr	r1, [pc, #64]	; (8000f68 <rcc_set_peripheral_clk_sel+0x5c>)
			shift = RCC_CCIPR_LPUART1SEL_SHIFT;
			mask = RCC_CCIPR_LPUART1SEL_MASK;
			break;

		case USART2_BASE:
			shift = RCC_CCIPR_USART2SEL_SHIFT;
 8000f28:	3b0a      	subs	r3, #10
	switch (periph) {
 8000f2a:	4288      	cmp	r0, r1
 8000f2c:	d007      	beq.n	8000f3e <rcc_set_peripheral_clk_sel+0x32>
			return;
	}

	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
	RCC_CCIPR = reg32 | (sel << shift);
}
 8000f2e:	bd10      	pop	{r4, pc}
	switch (periph) {
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <rcc_set_peripheral_clk_sel+0x60>)
 8000f32:	4298      	cmp	r0, r3
 8000f34:	d010      	beq.n	8000f58 <rcc_set_peripheral_clk_sel+0x4c>
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <rcc_set_peripheral_clk_sel+0x64>)
 8000f38:	4298      	cmp	r0, r3
 8000f3a:	d1f8      	bne.n	8000f2e <rcc_set_peripheral_clk_sel+0x22>
			shift = RCC_CCIPR_USART1SEL_SHIFT;
 8000f3c:	2300      	movs	r3, #0
	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
 8000f3e:	2003      	movs	r0, #3
 8000f40:	4098      	lsls	r0, r3
	RCC_CCIPR = reg32 | (sel << shift);
 8000f42:	409a      	lsls	r2, r3
	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
 8000f44:	4c0b      	ldr	r4, [pc, #44]	; (8000f74 <rcc_set_peripheral_clk_sel+0x68>)
 8000f46:	6821      	ldr	r1, [r4, #0]
 8000f48:	4381      	bics	r1, r0
	RCC_CCIPR = reg32 | (sel << shift);
 8000f4a:	4311      	orrs	r1, r2
 8000f4c:	6021      	str	r1, [r4, #0]
 8000f4e:	e7ee      	b.n	8000f2e <rcc_set_peripheral_clk_sel+0x22>
	switch (periph) {
 8000f50:	2310      	movs	r3, #16
 8000f52:	e7f4      	b.n	8000f3e <rcc_set_peripheral_clk_sel+0x32>
			shift = RCC_CCIPR_LPUART1SEL_SHIFT;
 8000f54:	230a      	movs	r3, #10
 8000f56:	e7f2      	b.n	8000f3e <rcc_set_peripheral_clk_sel+0x32>
			shift = RCC_CCIPR_LPTIM1SEL_SHIFT;
 8000f58:	2312      	movs	r3, #18
 8000f5a:	e7f0      	b.n	8000f3e <rcc_set_peripheral_clk_sel+0x32>
 8000f5c:	40007800 	.word	0x40007800
 8000f60:	40004800 	.word	0x40004800
 8000f64:	40005400 	.word	0x40005400
 8000f68:	40004400 	.word	0x40004400
 8000f6c:	40007c00 	.word	0x40007c00
 8000f70:	40013800 	.word	0x40013800
 8000f74:	4002104c 	.word	0x4002104c

08000f78 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <rcc_periph_clock_enable+0x18>)
 8000f7a:	0942      	lsrs	r2, r0, #5
 8000f7c:	18d2      	adds	r2, r2, r3
 8000f7e:	231f      	movs	r3, #31
 8000f80:	4018      	ands	r0, r3
 8000f82:	3b1e      	subs	r3, #30
 8000f84:	4083      	lsls	r3, r0
 8000f86:	6811      	ldr	r1, [r2, #0]
 8000f88:	430b      	orrs	r3, r1
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	4770      	bx	lr
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	40021000 	.word	0x40021000

08000f94 <rcc_periph_clock_disable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_disable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) &= ~_RCC_BIT(clken);
 8000f94:	211f      	movs	r1, #31
 8000f96:	0943      	lsrs	r3, r0, #5
 8000f98:	4008      	ands	r0, r1
 8000f9a:	391e      	subs	r1, #30
 8000f9c:	4081      	lsls	r1, r0
 8000f9e:	4a03      	ldr	r2, [pc, #12]	; (8000fac <rcc_periph_clock_disable+0x18>)
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	438a      	bics	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	4770      	bx	lr
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	40021000 	.word	0x40021000

08000fb0 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <rcc_periph_reset_pulse+0x1c>)
 8000fb2:	0943      	lsrs	r3, r0, #5
 8000fb4:	189b      	adds	r3, r3, r2
 8000fb6:	221f      	movs	r2, #31
 8000fb8:	4010      	ands	r0, r2
 8000fba:	3a1e      	subs	r2, #30
 8000fbc:	4082      	lsls	r2, r0
 8000fbe:	6819      	ldr	r1, [r3, #0]
 8000fc0:	4311      	orrs	r1, r2
 8000fc2:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 8000fc4:	6819      	ldr	r1, [r3, #0]
 8000fc6:	4391      	bics	r1, r2
 8000fc8:	6019      	str	r1, [r3, #0]
}
 8000fca:	4770      	bx	lr
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <rtc_unlock>:
/** @brief Unlock write access to the RTC registers

*/
void rtc_unlock(void)
{
	RTC_WPR = 0xca;
 8000fd0:	22ca      	movs	r2, #202	; 0xca
 8000fd2:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <rtc_unlock+0xc>)
 8000fd4:	601a      	str	r2, [r3, #0]
	RTC_WPR = 0x53;
 8000fd6:	3a77      	subs	r2, #119	; 0x77
 8000fd8:	601a      	str	r2, [r3, #0]
}
 8000fda:	4770      	bx	lr
 8000fdc:	40002824 	.word	0x40002824

08000fe0 <rtc_lock>:
/** @brief Lock write access to the RTC registers

*/
void rtc_lock(void)
{
	RTC_WPR = 0xff;
 8000fe0:	22ff      	movs	r2, #255	; 0xff
 8000fe2:	4b01      	ldr	r3, [pc, #4]	; (8000fe8 <rtc_lock+0x8>)
 8000fe4:	601a      	str	r2, [r3, #0]
}
 8000fe6:	4770      	bx	lr
 8000fe8:	40002824 	.word	0x40002824

08000fec <rtc_clear_wakeup_flag>:

@details This function should be called first in the rtc_wkup_isr()
*/
void rtc_clear_wakeup_flag(void)
{
	RTC_ISR &= ~RTC_ISR_WUTF;
 8000fec:	4a02      	ldr	r2, [pc, #8]	; (8000ff8 <rtc_clear_wakeup_flag+0xc>)
 8000fee:	4903      	ldr	r1, [pc, #12]	; (8000ffc <rtc_clear_wakeup_flag+0x10>)
 8000ff0:	6813      	ldr	r3, [r2, #0]
 8000ff2:	400b      	ands	r3, r1
 8000ff4:	6013      	str	r3, [r2, #0]
}
 8000ff6:	4770      	bx	lr
 8000ff8:	4000280c 	.word	0x4000280c
 8000ffc:	fffffbff 	.word	0xfffffbff

08001000 <spi_xfer>:
uint16_t spi_xfer(uint32_t spi, uint16_t data)
{
	spi_write(spi, data);

	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8001000:	2301      	movs	r3, #1
	SPI_DR(spi) = data;
 8001002:	60c1      	str	r1, [r0, #12]
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8001004:	6882      	ldr	r2, [r0, #8]
 8001006:	421a      	tst	r2, r3
 8001008:	d0fc      	beq.n	8001004 <spi_xfer+0x4>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 800100a:	68c0      	ldr	r0, [r0, #12]
 800100c:	b280      	uxth	r0, r0
}
 800100e:	4770      	bx	lr

08001010 <timer_enable_counter>:
tim_reg_base
*/

void timer_enable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_CEN;
 8001010:	2301      	movs	r3, #1
 8001012:	6802      	ldr	r2, [r0, #0]
 8001014:	4313      	orrs	r3, r2
 8001016:	6003      	str	r3, [r0, #0]
}
 8001018:	4770      	bx	lr

0800101a <timer_disable_counter>:
tim_reg_base
*/

void timer_disable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_CEN;
 800101a:	2201      	movs	r2, #1
 800101c:	6803      	ldr	r3, [r0, #0]
 800101e:	4393      	bics	r3, r2
 8001020:	6003      	str	r3, [r0, #0]
}
 8001022:	4770      	bx	lr

08001024 <timer_set_prescaler>:
@param[in] value Unsigned int32. Prescaler values 0...0xFFFF.
*/

void timer_set_prescaler(uint32_t timer_peripheral, uint32_t value)
{
	TIM_PSC(timer_peripheral) = value;
 8001024:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001026:	4770      	bx	lr

08001028 <timer_get_counter>:
@returns Unsigned int32. Counter value.
*/

uint32_t timer_get_counter(uint32_t timer_peripheral)
{
	return TIM_CNT(timer_peripheral);
 8001028:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 800102a:	4770      	bx	lr

0800102c <usart_set_baudrate>:
void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;

#if defined USART1
	if ((usart == USART1)
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <usart_set_baudrate+0x44>)
{
 800102e:	b570      	push	{r4, r5, r6, lr}
 8001030:	0005      	movs	r5, r0
 8001032:	000c      	movs	r4, r1
 8001034:	084e      	lsrs	r6, r1, #1
	if ((usart == USART1)
 8001036:	4298      	cmp	r0, r3
 8001038:	d107      	bne.n	800104a <usart_set_baudrate+0x1e>
#if defined USART6
		|| (usart == USART6)
#endif
		) {
		clock = rcc_apb2_frequency;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <usart_set_baudrate+0x48>)
 800103c:	6818      	ldr	r0, [r3, #0]
			+ ((clock % baud) * 256 + baud / 2) / baud;
		return;
	}
#endif

	USART_BRR(usart) = (clock + baud / 2) / baud;
 800103e:	0021      	movs	r1, r4
 8001040:	1830      	adds	r0, r6, r0
 8001042:	f000 f8c3 	bl	80011cc <__udivsi3>
 8001046:	60e8      	str	r0, [r5, #12]
 8001048:	e010      	b.n	800106c <usart_set_baudrate+0x40>
	uint32_t clock = rcc_apb1_frequency;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <usart_set_baudrate+0x4c>)
 800104c:	6818      	ldr	r0, [r3, #0]
	if (usart == LPUART1) {
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <usart_set_baudrate+0x50>)
 8001050:	429d      	cmp	r5, r3
 8001052:	d1f4      	bne.n	800103e <usart_set_baudrate+0x12>
		USART_BRR(usart) = (clock / baud) * 256
 8001054:	f000 f940 	bl	80012d8 <__aeabi_uidivmod>
 8001058:	0005      	movs	r5, r0
			+ ((clock % baud) * 256 + baud / 2) / baud;
 800105a:	0208      	lsls	r0, r1, #8
 800105c:	1980      	adds	r0, r0, r6
 800105e:	0021      	movs	r1, r4
 8001060:	f000 f8b4 	bl	80011cc <__udivsi3>
		USART_BRR(usart) = (clock / baud) * 256
 8001064:	022d      	lsls	r5, r5, #8
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <usart_set_baudrate+0x54>)
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8001068:	1940      	adds	r0, r0, r5
		USART_BRR(usart) = (clock / baud) * 256
 800106a:	6018      	str	r0, [r3, #0]
}
 800106c:	bd70      	pop	{r4, r5, r6, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	40013800 	.word	0x40013800
 8001074:	2000000c 	.word	0x2000000c
 8001078:	20000008 	.word	0x20000008
 800107c:	40004800 	.word	0x40004800
 8001080:	4000480c 	.word	0x4000480c

08001084 <usart_set_databits>:
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
 8001084:	2908      	cmp	r1, #8
 8001086:	d104      	bne.n	8001092 <usart_set_databits+0xe>
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 8001088:	6803      	ldr	r3, [r0, #0]
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <usart_set_databits+0x18>)
 800108c:	4013      	ands	r3, r2
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 800108e:	6003      	str	r3, [r0, #0]
	}
}
 8001090:	4770      	bx	lr
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	6802      	ldr	r2, [r0, #0]
 8001096:	015b      	lsls	r3, r3, #5
 8001098:	4313      	orrs	r3, r2
 800109a:	e7f8      	b.n	800108e <usart_set_databits+0xa>
 800109c:	ffffefff 	.word	0xffffefff

080010a0 <usart_set_stopbits>:

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 80010a0:	6843      	ldr	r3, [r0, #4]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 80010a2:	4a02      	ldr	r2, [pc, #8]	; (80010ac <usart_set_stopbits+0xc>)
 80010a4:	4013      	ands	r3, r2
 80010a6:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 80010a8:	6043      	str	r3, [r0, #4]
}
 80010aa:	4770      	bx	lr
 80010ac:	ffffcfff 	.word	0xffffcfff

080010b0 <usart_set_parity>:

void usart_set_parity(uint32_t usart, uint32_t parity)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 80010b0:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 80010b2:	4a02      	ldr	r2, [pc, #8]	; (80010bc <usart_set_parity+0xc>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 80010b8:	6003      	str	r3, [r0, #0]
}
 80010ba:	4770      	bx	lr
 80010bc:	fffff9ff 	.word	0xfffff9ff

080010c0 <usart_set_mode>:
void usart_set_mode(uint32_t usart, uint32_t mode)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 80010c0:	220c      	movs	r2, #12
	reg32 = USART_CR1(usart);
 80010c2:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 80010c4:	4393      	bics	r3, r2
 80010c6:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 80010c8:	6003      	str	r3, [r0, #0]
}
 80010ca:	4770      	bx	lr

080010cc <usart_set_flow_control>:

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 80010cc:	6883      	ldr	r3, [r0, #8]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 80010ce:	4a02      	ldr	r2, [pc, #8]	; (80010d8 <usart_set_flow_control+0xc>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 80010d4:	6083      	str	r3, [r0, #8]
}
 80010d6:	4770      	bx	lr
 80010d8:	fffffcff 	.word	0xfffffcff

080010dc <usart_enable>:
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 80010dc:	2301      	movs	r3, #1
 80010de:	6802      	ldr	r2, [r0, #0]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	6003      	str	r3, [r0, #0]
}
 80010e4:	4770      	bx	lr

080010e6 <usart_disable>:
usart_reg_base
*/

void usart_disable(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_UE;
 80010e6:	2201      	movs	r2, #1
 80010e8:	6803      	ldr	r3, [r0, #0]
 80010ea:	4393      	bics	r3, r2
 80010ec:	6003      	str	r3, [r0, #0]
}
 80010ee:	4770      	bx	lr

080010f0 <usart_send_blocking>:
usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(uint32_t usart, uint16_t data)
{
 80010f0:	b570      	push	{r4, r5, r6, lr}
 80010f2:	000d      	movs	r5, r1
 80010f4:	0004      	movs	r4, r0
	usart_wait_send_ready(usart);
 80010f6:	f000 f80d 	bl	8001114 <usart_wait_send_ready>
	usart_send(usart, data);
 80010fa:	0029      	movs	r1, r5
 80010fc:	0020      	movs	r0, r4
 80010fe:	f000 f801 	bl	8001104 <usart_send>
}
 8001102:	bd70      	pop	{r4, r5, r6, pc}

08001104 <usart_send>:
 */

void usart_send(uint32_t usart, uint16_t data)
{
	/* Send data. */
	USART_TDR(usart) = (data & USART_TDR_MASK);
 8001104:	05c9      	lsls	r1, r1, #23
 8001106:	0dc9      	lsrs	r1, r1, #23
 8001108:	6281      	str	r1, [r0, #40]	; 0x28
}
 800110a:	4770      	bx	lr

0800110c <usart_recv>:
 */

uint16_t usart_recv(uint32_t usart)
{
	/* Receive data. */
	return USART_RDR(usart) & USART_RDR_MASK;
 800110c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800110e:	05c0      	lsls	r0, r0, #23
 8001110:	0dc0      	lsrs	r0, r0, #23
}
 8001112:	4770      	bx	lr

08001114 <usart_wait_send_ready>:
 */

void usart_wait_send_ready(uint32_t usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_ISR(usart) & USART_ISR_TXE) == 0);
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	69c2      	ldr	r2, [r0, #28]
 8001118:	421a      	tst	r2, r3
 800111a:	d0fc      	beq.n	8001116 <usart_wait_send_ready+0x2>
}
 800111c:	4770      	bx	lr

0800111e <usart_get_flag>:
 * @returns boolean: flag set.
 */

bool usart_get_flag(uint32_t usart, uint32_t flag)
{
	return ((USART_ISR(usart) & flag) != 0);
 800111e:	69c0      	ldr	r0, [r0, #28]
 8001120:	4008      	ands	r0, r1
 8001122:	1e41      	subs	r1, r0, #1
 8001124:	4188      	sbcs	r0, r1
 8001126:	b2c0      	uxtb	r0, r0
}
 8001128:	4770      	bx	lr

0800112a <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 800112a:	e7fe      	b.n	800112a <blocking_handler>

0800112c <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 800112c:	4770      	bx	lr
	...

08001130 <reset_handler>:
{
 8001130:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <reset_handler+0x5c>)
 8001134:	4a16      	ldr	r2, [pc, #88]	; (8001190 <reset_handler+0x60>)
 8001136:	4917      	ldr	r1, [pc, #92]	; (8001194 <reset_handler+0x64>)
 8001138:	428b      	cmp	r3, r1
 800113a:	d318      	bcc.n	800116e <reset_handler+0x3e>
		*dest++ = 0;
 800113c:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 800113e:	4a16      	ldr	r2, [pc, #88]	; (8001198 <reset_handler+0x68>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d317      	bcc.n	8001174 <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	4a15      	ldr	r2, [pc, #84]	; (800119c <reset_handler+0x6c>)
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 800114c:	4c14      	ldr	r4, [pc, #80]	; (80011a0 <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 800114e:	430b      	orrs	r3, r1
 8001150:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <reset_handler+0x74>)
 8001154:	429c      	cmp	r4, r3
 8001156:	d30f      	bcc.n	8001178 <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8001158:	4c13      	ldr	r4, [pc, #76]	; (80011a8 <reset_handler+0x78>)
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <reset_handler+0x7c>)
 800115c:	429c      	cmp	r4, r3
 800115e:	d30e      	bcc.n	800117e <reset_handler+0x4e>
	(void)main();
 8001160:	f7fe ffae 	bl	80000c0 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001164:	4c12      	ldr	r4, [pc, #72]	; (80011b0 <reset_handler+0x80>)
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <reset_handler+0x84>)
 8001168:	429c      	cmp	r4, r3
 800116a:	d30b      	bcc.n	8001184 <reset_handler+0x54>
}
 800116c:	bd10      	pop	{r4, pc}
		*dest = *src;
 800116e:	ca01      	ldmia	r2!, {r0}
 8001170:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 8001172:	e7e1      	b.n	8001138 <reset_handler+0x8>
		*dest++ = 0;
 8001174:	c302      	stmia	r3!, {r1}
 8001176:	e7e3      	b.n	8001140 <reset_handler+0x10>
		(*fp)();
 8001178:	cc08      	ldmia	r4!, {r3}
 800117a:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 800117c:	e7e9      	b.n	8001152 <reset_handler+0x22>
		(*fp)();
 800117e:	cc08      	ldmia	r4!, {r3}
 8001180:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8001182:	e7ea      	b.n	800115a <reset_handler+0x2a>
		(*fp)();
 8001184:	cc08      	ldmia	r4!, {r3}
 8001186:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001188:	e7ed      	b.n	8001166 <reset_handler+0x36>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	20000000 	.word	0x20000000
 8001190:	08001554 	.word	0x08001554
 8001194:	20000010 	.word	0x20000010
 8001198:	200002b0 	.word	0x200002b0
 800119c:	e000ed14 	.word	0xe000ed14
 80011a0:	08001554 	.word	0x08001554
 80011a4:	08001554 	.word	0x08001554
 80011a8:	08001554 	.word	0x08001554
 80011ac:	08001554 	.word	0x08001554
 80011b0:	08001554 	.word	0x08001554
 80011b4:	08001554 	.word	0x08001554

080011b8 <__gnu_thumb1_case_uqi>:
 80011b8:	b402      	push	{r1}
 80011ba:	4671      	mov	r1, lr
 80011bc:	0849      	lsrs	r1, r1, #1
 80011be:	0049      	lsls	r1, r1, #1
 80011c0:	5c09      	ldrb	r1, [r1, r0]
 80011c2:	0049      	lsls	r1, r1, #1
 80011c4:	448e      	add	lr, r1
 80011c6:	bc02      	pop	{r1}
 80011c8:	4770      	bx	lr
 80011ca:	46c0      	nop			; (mov r8, r8)

080011cc <__udivsi3>:
 80011cc:	2200      	movs	r2, #0
 80011ce:	0843      	lsrs	r3, r0, #1
 80011d0:	428b      	cmp	r3, r1
 80011d2:	d374      	bcc.n	80012be <__udivsi3+0xf2>
 80011d4:	0903      	lsrs	r3, r0, #4
 80011d6:	428b      	cmp	r3, r1
 80011d8:	d35f      	bcc.n	800129a <__udivsi3+0xce>
 80011da:	0a03      	lsrs	r3, r0, #8
 80011dc:	428b      	cmp	r3, r1
 80011de:	d344      	bcc.n	800126a <__udivsi3+0x9e>
 80011e0:	0b03      	lsrs	r3, r0, #12
 80011e2:	428b      	cmp	r3, r1
 80011e4:	d328      	bcc.n	8001238 <__udivsi3+0x6c>
 80011e6:	0c03      	lsrs	r3, r0, #16
 80011e8:	428b      	cmp	r3, r1
 80011ea:	d30d      	bcc.n	8001208 <__udivsi3+0x3c>
 80011ec:	22ff      	movs	r2, #255	; 0xff
 80011ee:	0209      	lsls	r1, r1, #8
 80011f0:	ba12      	rev	r2, r2
 80011f2:	0c03      	lsrs	r3, r0, #16
 80011f4:	428b      	cmp	r3, r1
 80011f6:	d302      	bcc.n	80011fe <__udivsi3+0x32>
 80011f8:	1212      	asrs	r2, r2, #8
 80011fa:	0209      	lsls	r1, r1, #8
 80011fc:	d065      	beq.n	80012ca <__udivsi3+0xfe>
 80011fe:	0b03      	lsrs	r3, r0, #12
 8001200:	428b      	cmp	r3, r1
 8001202:	d319      	bcc.n	8001238 <__udivsi3+0x6c>
 8001204:	e000      	b.n	8001208 <__udivsi3+0x3c>
 8001206:	0a09      	lsrs	r1, r1, #8
 8001208:	0bc3      	lsrs	r3, r0, #15
 800120a:	428b      	cmp	r3, r1
 800120c:	d301      	bcc.n	8001212 <__udivsi3+0x46>
 800120e:	03cb      	lsls	r3, r1, #15
 8001210:	1ac0      	subs	r0, r0, r3
 8001212:	4152      	adcs	r2, r2
 8001214:	0b83      	lsrs	r3, r0, #14
 8001216:	428b      	cmp	r3, r1
 8001218:	d301      	bcc.n	800121e <__udivsi3+0x52>
 800121a:	038b      	lsls	r3, r1, #14
 800121c:	1ac0      	subs	r0, r0, r3
 800121e:	4152      	adcs	r2, r2
 8001220:	0b43      	lsrs	r3, r0, #13
 8001222:	428b      	cmp	r3, r1
 8001224:	d301      	bcc.n	800122a <__udivsi3+0x5e>
 8001226:	034b      	lsls	r3, r1, #13
 8001228:	1ac0      	subs	r0, r0, r3
 800122a:	4152      	adcs	r2, r2
 800122c:	0b03      	lsrs	r3, r0, #12
 800122e:	428b      	cmp	r3, r1
 8001230:	d301      	bcc.n	8001236 <__udivsi3+0x6a>
 8001232:	030b      	lsls	r3, r1, #12
 8001234:	1ac0      	subs	r0, r0, r3
 8001236:	4152      	adcs	r2, r2
 8001238:	0ac3      	lsrs	r3, r0, #11
 800123a:	428b      	cmp	r3, r1
 800123c:	d301      	bcc.n	8001242 <__udivsi3+0x76>
 800123e:	02cb      	lsls	r3, r1, #11
 8001240:	1ac0      	subs	r0, r0, r3
 8001242:	4152      	adcs	r2, r2
 8001244:	0a83      	lsrs	r3, r0, #10
 8001246:	428b      	cmp	r3, r1
 8001248:	d301      	bcc.n	800124e <__udivsi3+0x82>
 800124a:	028b      	lsls	r3, r1, #10
 800124c:	1ac0      	subs	r0, r0, r3
 800124e:	4152      	adcs	r2, r2
 8001250:	0a43      	lsrs	r3, r0, #9
 8001252:	428b      	cmp	r3, r1
 8001254:	d301      	bcc.n	800125a <__udivsi3+0x8e>
 8001256:	024b      	lsls	r3, r1, #9
 8001258:	1ac0      	subs	r0, r0, r3
 800125a:	4152      	adcs	r2, r2
 800125c:	0a03      	lsrs	r3, r0, #8
 800125e:	428b      	cmp	r3, r1
 8001260:	d301      	bcc.n	8001266 <__udivsi3+0x9a>
 8001262:	020b      	lsls	r3, r1, #8
 8001264:	1ac0      	subs	r0, r0, r3
 8001266:	4152      	adcs	r2, r2
 8001268:	d2cd      	bcs.n	8001206 <__udivsi3+0x3a>
 800126a:	09c3      	lsrs	r3, r0, #7
 800126c:	428b      	cmp	r3, r1
 800126e:	d301      	bcc.n	8001274 <__udivsi3+0xa8>
 8001270:	01cb      	lsls	r3, r1, #7
 8001272:	1ac0      	subs	r0, r0, r3
 8001274:	4152      	adcs	r2, r2
 8001276:	0983      	lsrs	r3, r0, #6
 8001278:	428b      	cmp	r3, r1
 800127a:	d301      	bcc.n	8001280 <__udivsi3+0xb4>
 800127c:	018b      	lsls	r3, r1, #6
 800127e:	1ac0      	subs	r0, r0, r3
 8001280:	4152      	adcs	r2, r2
 8001282:	0943      	lsrs	r3, r0, #5
 8001284:	428b      	cmp	r3, r1
 8001286:	d301      	bcc.n	800128c <__udivsi3+0xc0>
 8001288:	014b      	lsls	r3, r1, #5
 800128a:	1ac0      	subs	r0, r0, r3
 800128c:	4152      	adcs	r2, r2
 800128e:	0903      	lsrs	r3, r0, #4
 8001290:	428b      	cmp	r3, r1
 8001292:	d301      	bcc.n	8001298 <__udivsi3+0xcc>
 8001294:	010b      	lsls	r3, r1, #4
 8001296:	1ac0      	subs	r0, r0, r3
 8001298:	4152      	adcs	r2, r2
 800129a:	08c3      	lsrs	r3, r0, #3
 800129c:	428b      	cmp	r3, r1
 800129e:	d301      	bcc.n	80012a4 <__udivsi3+0xd8>
 80012a0:	00cb      	lsls	r3, r1, #3
 80012a2:	1ac0      	subs	r0, r0, r3
 80012a4:	4152      	adcs	r2, r2
 80012a6:	0883      	lsrs	r3, r0, #2
 80012a8:	428b      	cmp	r3, r1
 80012aa:	d301      	bcc.n	80012b0 <__udivsi3+0xe4>
 80012ac:	008b      	lsls	r3, r1, #2
 80012ae:	1ac0      	subs	r0, r0, r3
 80012b0:	4152      	adcs	r2, r2
 80012b2:	0843      	lsrs	r3, r0, #1
 80012b4:	428b      	cmp	r3, r1
 80012b6:	d301      	bcc.n	80012bc <__udivsi3+0xf0>
 80012b8:	004b      	lsls	r3, r1, #1
 80012ba:	1ac0      	subs	r0, r0, r3
 80012bc:	4152      	adcs	r2, r2
 80012be:	1a41      	subs	r1, r0, r1
 80012c0:	d200      	bcs.n	80012c4 <__udivsi3+0xf8>
 80012c2:	4601      	mov	r1, r0
 80012c4:	4152      	adcs	r2, r2
 80012c6:	4610      	mov	r0, r2
 80012c8:	4770      	bx	lr
 80012ca:	e7ff      	b.n	80012cc <__udivsi3+0x100>
 80012cc:	b501      	push	{r0, lr}
 80012ce:	2000      	movs	r0, #0
 80012d0:	f000 f806 	bl	80012e0 <__aeabi_idiv0>
 80012d4:	bd02      	pop	{r1, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)

080012d8 <__aeabi_uidivmod>:
 80012d8:	2900      	cmp	r1, #0
 80012da:	d0f7      	beq.n	80012cc <__udivsi3+0x100>
 80012dc:	e776      	b.n	80011cc <__udivsi3>
 80012de:	4770      	bx	lr

080012e0 <__aeabi_idiv0>:
 80012e0:	4770      	bx	lr
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	20627548 	.word	0x20627548
 80012e8:	53206c42 	.word	0x53206c42
 80012ec:	74726174 	.word	0x74726174
 80012f0:	0000000a 	.word	0x0000000a
 80012f4:	20627548 	.word	0x20627548
 80012f8:	746f6f42 	.word	0x746f6f42
 80012fc:	64616f6c 	.word	0x64616f6c
 8001300:	4c207265 	.word	0x4c207265
 8001304:	0a706f6f 	.word	0x0a706f6f
 8001308:	0000000a 	.word	0x0000000a
 800130c:	67756c50 	.word	0x67756c50
 8001310:	20646567 	.word	0x20646567
 8001314:	0a74754f 	.word	0x0a74754f
 8001318:	00000000 	.word	0x00000000
 800131c:	67756c50 	.word	0x67756c50
 8001320:	20646567 	.word	0x20646567
 8001324:	000a6e49 	.word	0x000a6e49
 8001328:	65736552 	.word	0x65736552
 800132c:	65532074 	.word	0x65532074
 8001330:	6e657571 	.word	0x6e657571
 8001334:	000a6563 	.word	0x000a6563
 8001338:	6f727245 	.word	0x6f727245
 800133c:	44412072 	.word	0x44412072
 8001340:	53492043 	.word	0x53492043
 8001344:	65442052 	.word	0x65442052
 8001348:	74756166 	.word	0x74756166
 800134c:	73614320 	.word	0x73614320
 8001350:	00000a65 	.word	0x00000a65
 8001354:	08000196 	.word	0x08000196
 8001358:	080001b0 	.word	0x080001b0
 800135c:	080001dc 	.word	0x080001dc
 8001360:	08000214 	.word	0x08000214
 8001364:	08000234 	.word	0x08000234
 8001368:	08000710 	.word	0x08000710
 800136c:	0800071e 	.word	0x0800071e
 8001370:	0800071e 	.word	0x0800071e
 8001374:	0800071e 	.word	0x0800071e
 8001378:	0800071e 	.word	0x0800071e
 800137c:	0800071e 	.word	0x0800071e
 8001380:	0800071e 	.word	0x0800071e
 8001384:	0800071e 	.word	0x0800071e
 8001388:	0800071e 	.word	0x0800071e
 800138c:	0800071e 	.word	0x0800071e
 8001390:	0800071e 	.word	0x0800071e
 8001394:	0800071e 	.word	0x0800071e
 8001398:	0800071e 	.word	0x0800071e
 800139c:	0800071e 	.word	0x0800071e
 80013a0:	0800071e 	.word	0x0800071e
 80013a4:	0800071e 	.word	0x0800071e
 80013a8:	0800071e 	.word	0x0800071e
 80013ac:	0800071e 	.word	0x0800071e
 80013b0:	0800071e 	.word	0x0800071e
 80013b4:	0800071e 	.word	0x0800071e
 80013b8:	0800071e 	.word	0x0800071e
 80013bc:	0800071e 	.word	0x0800071e
 80013c0:	0800071e 	.word	0x0800071e
 80013c4:	0800071e 	.word	0x0800071e
 80013c8:	0800071e 	.word	0x0800071e
 80013cc:	0800071e 	.word	0x0800071e
 80013d0:	0800071e 	.word	0x0800071e
 80013d4:	0800071e 	.word	0x0800071e
 80013d8:	0800071e 	.word	0x0800071e
 80013dc:	0800071e 	.word	0x0800071e
 80013e0:	0800071e 	.word	0x0800071e
 80013e4:	0800071e 	.word	0x0800071e
 80013e8:	0800071e 	.word	0x0800071e
 80013ec:	0800071e 	.word	0x0800071e
 80013f0:	0800071e 	.word	0x0800071e
 80013f4:	0800071e 	.word	0x0800071e
 80013f8:	0800071e 	.word	0x0800071e
 80013fc:	0800071e 	.word	0x0800071e
 8001400:	0800071e 	.word	0x0800071e
 8001404:	0800071e 	.word	0x0800071e
 8001408:	0800071e 	.word	0x0800071e
 800140c:	0800071e 	.word	0x0800071e
 8001410:	0800071e 	.word	0x0800071e
 8001414:	0800071e 	.word	0x0800071e
 8001418:	0800071e 	.word	0x0800071e
 800141c:	0800071e 	.word	0x0800071e
 8001420:	0800071e 	.word	0x0800071e
 8001424:	0800071e 	.word	0x0800071e
 8001428:	0800071e 	.word	0x0800071e
 800142c:	0800071e 	.word	0x0800071e
 8001430:	0800071e 	.word	0x0800071e
 8001434:	0800064a 	.word	0x0800064a
 8001438:	0800071e 	.word	0x0800071e
 800143c:	0800071e 	.word	0x0800071e
 8001440:	0800071e 	.word	0x0800071e
 8001444:	0800071e 	.word	0x0800071e
 8001448:	0800071e 	.word	0x0800071e
 800144c:	0800071e 	.word	0x0800071e
 8001450:	0800071e 	.word	0x0800071e
 8001454:	0800071e 	.word	0x0800071e
 8001458:	0800071e 	.word	0x0800071e
 800145c:	0800064a 	.word	0x0800064a
 8001460:	080006a6 	.word	0x080006a6
 8001464:	0800064a 	.word	0x0800064a
 8001468:	0800071e 	.word	0x0800071e
 800146c:	0800071e 	.word	0x0800071e
 8001470:	0800071e 	.word	0x0800071e
 8001474:	0800071e 	.word	0x0800071e
 8001478:	0800064a 	.word	0x0800064a
 800147c:	0800071e 	.word	0x0800071e
 8001480:	0800071e 	.word	0x0800071e
 8001484:	0800071e 	.word	0x0800071e
 8001488:	0800071e 	.word	0x0800071e
 800148c:	0800071e 	.word	0x0800071e
 8001490:	0800064a 	.word	0x0800064a
 8001494:	080006f0 	.word	0x080006f0
 8001498:	0800071e 	.word	0x0800071e
 800149c:	0800071e 	.word	0x0800071e
 80014a0:	080006ba 	.word	0x080006ba
 80014a4:	0800071e 	.word	0x0800071e
 80014a8:	0800064a 	.word	0x0800064a
 80014ac:	0800071e 	.word	0x0800071e
 80014b0:	0800071e 	.word	0x0800071e
 80014b4:	0800064a 	.word	0x0800064a
 80014b8:	204d4652 	.word	0x204d4652
 80014bc:	20495053 	.word	0x20495053
 80014c0:	74697257 	.word	0x74697257
 80014c4:	00000065 	.word	0x00000065
 80014c8:	63656843 	.word	0x63656843
 80014cc:	6d75736b 	.word	0x6d75736b
 80014d0:	696e6920 	.word	0x696e6920
 80014d4:	6c616974 	.word	0x6c616974
 80014d8:	3825203a 	.word	0x3825203a
 80014dc:	00000a78 	.word	0x00000a78
 80014e0:	203a5243 	.word	0x203a5243
 80014e4:	0a783825 	.word	0x0a783825
 80014e8:	00000000 	.word	0x00000000
 80014ec:	3a544e49 	.word	0x3a544e49
 80014f0:	78382520 	.word	0x78382520
 80014f4:	0000000a 	.word	0x0000000a
 80014f8:	3a4c4f50 	.word	0x3a4c4f50
 80014fc:	78382520 	.word	0x78382520
 8001500:	0000000a 	.word	0x0000000a
 8001504:	000a6925 	.word	0x000a6925
 8001508:	62323325 	.word	0x62323325
 800150c:	0000000a 	.word	0x0000000a
 8001510:	63656843 	.word	0x63656843
 8001514:	6d75736b 	.word	0x6d75736b
 8001518:	6c617620 	.word	0x6c617620
 800151c:	203a6575 	.word	0x203a6575
 8001520:	20783825 	.word	0x20783825
 8001524:	20783825 	.word	0x20783825
 8001528:	20783825 	.word	0x20783825
 800152c:	0a783825 	.word	0x0a783825
 8001530:	00000000 	.word	0x00000000
 8001534:	656d6954 	.word	0x656d6954
 8001538:	2074756f 	.word	0x2074756f
 800153c:	25207325 	.word	0x25207325
 8001540:	0a583830 	.word	0x0a583830
 8001544:	00000000 	.word	0x00000000
 8001548:	20435452 	.word	0x20435452
 800154c:	0a525349 	.word	0x0a525349
 8001550:	00000000 	.word	0x00000000
