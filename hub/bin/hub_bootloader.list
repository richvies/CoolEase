
hub/bin/hub_bootloader.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 20 00 20 79 18 00 08 75 18 00 08 73 18 00 08     . . y...u...s...
	...
 800002c:	75 18 00 08 00 00 00 00 00 00 00 00 75 18 00 08     u...........u...
 800003c:	75 18 00 08 73 18 00 08 73 18 00 08 4d 13 00 08     u...s...s...M...
 800004c:	73 18 00 08 73 18 00 08 73 18 00 08 73 18 00 08     s...s...s...s...
 800005c:	7d 10 00 08 73 18 00 08 73 18 00 08 73 18 00 08     }...s...s...s...
 800006c:	73 18 00 08 35 01 00 08 73 18 00 08 73 18 00 08     s...5...s...s...
 800007c:	73 18 00 08 73 18 00 08 73 18 00 08 73 18 00 08     s...s...s...s...
 800008c:	73 18 00 08 73 18 00 08 73 18 00 08 73 18 00 08     s...s...s...s...
 800009c:	73 18 00 08 73 18 00 08 73 18 00 08 73 18 00 08     s...s...s...s...
 80000ac:	73 18 00 08 fd 00 00 08 73 18 00 08 73 18 00 08     s.......s...s...
 80000bc:	73 18 00 08                                         s...

080000c0 <main>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

int main(void)
{
 80000c0:	b510      	push	{r4, lr}
    log_init();
 80000c2:	f000 f9b1 	bl	8000428 <log_init>
	timers_lptim_init();
 80000c6:	f001 f81f 	bl	8001108 <timers_lptim_init>
	timers_tim6_init();
 80000ca:	f001 f863 	bl	8001194 <timers_tim6_init>
    log_printf(MAIN, "Hub Bootloader Start\n");
 80000ce:	4908      	ldr	r1, [pc, #32]	; (80000f0 <main+0x30>)
 80000d0:	2000      	movs	r0, #0
 80000d2:	f000 f9b5 	bl	8000440 <log_printf>

    boot_jump_to_application(APP_ADDRESS);
 80000d6:	4807      	ldr	r0, [pc, #28]	; (80000f4 <main+0x34>)
 80000d8:	f000 f904 	bl	80002e4 <boot_jump_to_application>

    for (;;)
	{
		log_printf(MAIN, "Hub Bootloader Loop\n\n");
 80000dc:	4906      	ldr	r1, [pc, #24]	; (80000f8 <main+0x38>)
 80000de:	2000      	movs	r0, #0
 80000e0:	f000 f9ae 	bl	8000440 <log_printf>
		timers_delay_milliseconds(1000);
 80000e4:	20fa      	movs	r0, #250	; 0xfa
 80000e6:	0080      	lsls	r0, r0, #2
 80000e8:	f001 f86a 	bl	80011c0 <timers_delay_milliseconds>
    for (;;)
 80000ec:	e7f6      	b.n	80000dc <main+0x1c>
 80000ee:	46c0      	nop			; (mov r8, r8)
 80000f0:	08002c44 	.word	0x08002c44
 80000f4:	08004000 	.word	0x08004000
 80000f8:	08002c5c 	.word	0x08002c5c

080000fc <usart2_isr>:
}


// Interrupt routines
void usart2_isr(void)
{
 80000fc:	b510      	push	{r4, lr}
	usart_send(SPF_USART, usart_recv(SIM_USART));
 80000fe:	4c09      	ldr	r4, [pc, #36]	; (8000124 <usart2_isr+0x28>)
 8000100:	0020      	movs	r0, r4
 8000102:	f001 fba7 	bl	8001854 <usart_recv>
 8000106:	0001      	movs	r1, r0
 8000108:	4807      	ldr	r0, [pc, #28]	; (8000128 <usart2_isr+0x2c>)
 800010a:	f001 fb9f 	bl	800184c <usart_send>

	sim_rx_buf[sim_rx_head++] = usart_recv(SIM_USART);
 800010e:	0020      	movs	r0, r4
 8000110:	f001 fba0 	bl	8001854 <usart_recv>
 8000114:	4a05      	ldr	r2, [pc, #20]	; (800012c <usart2_isr+0x30>)
 8000116:	7813      	ldrb	r3, [r2, #0]
 8000118:	1c59      	adds	r1, r3, #1
 800011a:	7011      	strb	r1, [r2, #0]
 800011c:	4a04      	ldr	r2, [pc, #16]	; (8000130 <usart2_isr+0x34>)
 800011e:	54d0      	strb	r0, [r2, r3]
}
 8000120:	bd10      	pop	{r4, pc}
 8000122:	46c0      	nop			; (mov r8, r8)
 8000124:	40004400 	.word	0x40004400
 8000128:	40013800 	.word	0x40013800
 800012c:	20000110 	.word	0x20000110
 8000130:	20000010 	.word	0x20000010

08000134 <adc_comp_isr>:

// ISRs
#ifdef _HUB
// For use with ADC1
void adc_comp_isr(void)
{
 8000134:	b570      	push	{r4, r5, r6, lr}
    // Takes about 150us to run

    // log_printf(MAIN, "ADC ISR %08X\n", ADC_ISR(ADC1));

    // Calculate batt_voltages
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8000136:	2400      	movs	r4, #0
 8000138:	e014      	b.n	8000164 <adc_comp_isr+0x30>
        batt_voltages[i] = ( (uint32_t)300 * ST_VREFINT_CAL * adc_vals[i + 1] ) / ( adc_vals[0] * 4095 ); }
 800013a:	4b51      	ldr	r3, [pc, #324]	; (8000280 <adc_comp_isr+0x14c>)
 800013c:	881b      	ldrh	r3, [r3, #0]
 800013e:	1c65      	adds	r5, r4, #1
 8000140:	4a50      	ldr	r2, [pc, #320]	; (8000284 <adc_comp_isr+0x150>)
 8000142:	0069      	lsls	r1, r5, #1
 8000144:	5a88      	ldrh	r0, [r1, r2]
 8000146:	4343      	muls	r3, r0
 8000148:	0098      	lsls	r0, r3, #2
 800014a:	18c3      	adds	r3, r0, r3
 800014c:	0118      	lsls	r0, r3, #4
 800014e:	1ac0      	subs	r0, r0, r3
 8000150:	0080      	lsls	r0, r0, #2
 8000152:	8813      	ldrh	r3, [r2, #0]
 8000154:	0319      	lsls	r1, r3, #12
 8000156:	1ac9      	subs	r1, r1, r3
 8000158:	f001 fbdc 	bl	8001914 <__udivsi3>
 800015c:	0064      	lsls	r4, r4, #1
 800015e:	4b4a      	ldr	r3, [pc, #296]	; (8000288 <adc_comp_isr+0x154>)
 8000160:	5318      	strh	r0, [r3, r4]
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8000162:	b2ec      	uxtb	r4, r5
 8000164:	2c01      	cmp	r4, #1
 8000166:	d9e8      	bls.n	800013a <adc_comp_isr+0x6>

    // For Hub : Measured voltage is half of actual
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8000168:	2300      	movs	r3, #0
 800016a:	e006      	b.n	800017a <adc_comp_isr+0x46>
        batt_voltages[i] = batt_voltages[i] * 2; }
 800016c:	4946      	ldr	r1, [pc, #280]	; (8000288 <adc_comp_isr+0x154>)
 800016e:	0058      	lsls	r0, r3, #1
 8000170:	5a42      	ldrh	r2, [r0, r1]
 8000172:	0052      	lsls	r2, r2, #1
 8000174:	5242      	strh	r2, [r0, r1]
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8000176:	3301      	adds	r3, #1
 8000178:	b2db      	uxtb	r3, r3
 800017a:	2b01      	cmp	r3, #1
 800017c:	d9f6      	bls.n	800016c <adc_comp_isr+0x38>

    static uint16_t timer = 0;
    static uint8_t state = 0;
    switch(state)
 800017e:	4b43      	ldr	r3, [pc, #268]	; (800028c <adc_comp_isr+0x158>)
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	2b04      	cmp	r3, #4
 8000184:	d871      	bhi.n	800026a <adc_comp_isr+0x136>
 8000186:	009b      	lsls	r3, r3, #2
 8000188:	4a41      	ldr	r2, [pc, #260]	; (8000290 <adc_comp_isr+0x15c>)
 800018a:	58d3      	ldr	r3, [r2, r3]
 800018c:	469f      	mov	pc, r3
    {
        case 0:
            plugged_in = true;
            timer = timers_millis();
 800018e:	f001 f82d 	bl	80011ec <timers_millis>
 8000192:	4b40      	ldr	r3, [pc, #256]	; (8000294 <adc_comp_isr+0x160>)
 8000194:	8018      	strh	r0, [r3, #0]
            if(batt_voltages[PWR_VOLTAGE] < batt_voltages[BATT_VOLTAGE])
 8000196:	4b3c      	ldr	r3, [pc, #240]	; (8000288 <adc_comp_isr+0x154>)
 8000198:	881a      	ldrh	r2, [r3, #0]
 800019a:	885b      	ldrh	r3, [r3, #2]
 800019c:	429a      	cmp	r2, r3
 800019e:	d268      	bcs.n	8000272 <adc_comp_isr+0x13e>
                state = 1;
 80001a0:	4b3a      	ldr	r3, [pc, #232]	; (800028c <adc_comp_isr+0x158>)
 80001a2:	2201      	movs	r2, #1
 80001a4:	701a      	strb	r2, [r3, #0]
 80001a6:	e064      	b.n	8000272 <adc_comp_isr+0x13e>
            break;

        case 1:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE])
 80001a8:	4b37      	ldr	r3, [pc, #220]	; (8000288 <adc_comp_isr+0x154>)
 80001aa:	881a      	ldrh	r2, [r3, #0]
 80001ac:	885b      	ldrh	r3, [r3, #2]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d903      	bls.n	80001ba <adc_comp_isr+0x86>
                state = 0;
 80001b2:	4b36      	ldr	r3, [pc, #216]	; (800028c <adc_comp_isr+0x158>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	701a      	strb	r2, [r3, #0]
 80001b8:	e05b      	b.n	8000272 <adc_comp_isr+0x13e>
            else if(timers_millis() - timer > 1000)
 80001ba:	f001 f817 	bl	80011ec <timers_millis>
 80001be:	4b35      	ldr	r3, [pc, #212]	; (8000294 <adc_comp_isr+0x160>)
 80001c0:	881b      	ldrh	r3, [r3, #0]
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	23fa      	movs	r3, #250	; 0xfa
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	4298      	cmp	r0, r3
 80001ca:	dd52      	ble.n	8000272 <adc_comp_isr+0x13e>
                state = 2;
 80001cc:	4b2f      	ldr	r3, [pc, #188]	; (800028c <adc_comp_isr+0x158>)
 80001ce:	2202      	movs	r2, #2
 80001d0:	701a      	strb	r2, [r3, #0]
 80001d2:	e04e      	b.n	8000272 <adc_comp_isr+0x13e>
            break;
        
        case 2:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE]){
 80001d4:	4b2c      	ldr	r3, [pc, #176]	; (8000288 <adc_comp_isr+0x154>)
 80001d6:	881a      	ldrh	r2, [r3, #0]
 80001d8:	885b      	ldrh	r3, [r3, #2]
 80001da:	429a      	cmp	r2, r3
 80001dc:	d907      	bls.n	80001ee <adc_comp_isr+0xba>
                timer = timers_millis(); 
 80001de:	f001 f805 	bl	80011ec <timers_millis>
 80001e2:	4b2c      	ldr	r3, [pc, #176]	; (8000294 <adc_comp_isr+0x160>)
 80001e4:	8018      	strh	r0, [r3, #0]
                state = 4;}
 80001e6:	4b29      	ldr	r3, [pc, #164]	; (800028c <adc_comp_isr+0x158>)
 80001e8:	2204      	movs	r2, #4
 80001ea:	701a      	strb	r2, [r3, #0]
 80001ec:	e041      	b.n	8000272 <adc_comp_isr+0x13e>
            else if(timers_millis() - timer > 10000){
 80001ee:	f000 fffd 	bl	80011ec <timers_millis>
 80001f2:	4b28      	ldr	r3, [pc, #160]	; (8000294 <adc_comp_isr+0x160>)
 80001f4:	881b      	ldrh	r3, [r3, #0]
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4b27      	ldr	r3, [pc, #156]	; (8000298 <adc_comp_isr+0x164>)
 80001fa:	4298      	cmp	r0, r3
 80001fc:	dd39      	ble.n	8000272 <adc_comp_isr+0x13e>
                state = 3;
 80001fe:	4b23      	ldr	r3, [pc, #140]	; (800028c <adc_comp_isr+0x158>)
 8000200:	2203      	movs	r2, #3
 8000202:	701a      	strb	r2, [r3, #0]
                plugged_in = false;
                log_printf(MAIN, "Plugged Out\n");}
 8000204:	4925      	ldr	r1, [pc, #148]	; (800029c <adc_comp_isr+0x168>)
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f91a 	bl	8000440 <log_printf>
 800020c:	e031      	b.n	8000272 <adc_comp_isr+0x13e>
            break;
        
        case 3:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE]){
 800020e:	4b1e      	ldr	r3, [pc, #120]	; (8000288 <adc_comp_isr+0x154>)
 8000210:	881a      	ldrh	r2, [r3, #0]
 8000212:	885b      	ldrh	r3, [r3, #2]
 8000214:	429a      	cmp	r2, r3
 8000216:	d92c      	bls.n	8000272 <adc_comp_isr+0x13e>
                timer = timers_millis();
 8000218:	f000 ffe8 	bl	80011ec <timers_millis>
 800021c:	4b1d      	ldr	r3, [pc, #116]	; (8000294 <adc_comp_isr+0x160>)
 800021e:	8018      	strh	r0, [r3, #0]
                state = 0;
 8000220:	4b1a      	ldr	r3, [pc, #104]	; (800028c <adc_comp_isr+0x158>)
 8000222:	2200      	movs	r2, #0
 8000224:	701a      	strb	r2, [r3, #0]
                log_printf(MAIN, "Plugged In\n");}
 8000226:	491e      	ldr	r1, [pc, #120]	; (80002a0 <adc_comp_isr+0x16c>)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f909 	bl	8000440 <log_printf>
 800022e:	e020      	b.n	8000272 <adc_comp_isr+0x13e>
            break;

        case 4:
            if(batt_voltages[PWR_VOLTAGE] < batt_voltages[BATT_VOLTAGE]){
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <adc_comp_isr+0x154>)
 8000232:	881a      	ldrh	r2, [r3, #0]
 8000234:	885b      	ldrh	r3, [r3, #2]
 8000236:	429a      	cmp	r2, r3
 8000238:	d203      	bcs.n	8000242 <adc_comp_isr+0x10e>
                state = 2; }
 800023a:	4b14      	ldr	r3, [pc, #80]	; (800028c <adc_comp_isr+0x158>)
 800023c:	2202      	movs	r2, #2
 800023e:	701a      	strb	r2, [r3, #0]
 8000240:	e017      	b.n	8000272 <adc_comp_isr+0x13e>
            else if(timers_millis() - timer > 1000){
 8000242:	f000 ffd3 	bl	80011ec <timers_millis>
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <adc_comp_isr+0x160>)
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	23fa      	movs	r3, #250	; 0xfa
 800024e:	009b      	lsls	r3, r3, #2
 8000250:	4298      	cmp	r0, r3
 8000252:	dd0e      	ble.n	8000272 <adc_comp_isr+0x13e>
                state = 0;
 8000254:	4b0d      	ldr	r3, [pc, #52]	; (800028c <adc_comp_isr+0x158>)
 8000256:	2200      	movs	r2, #0
 8000258:	701a      	strb	r2, [r3, #0]
                batt_rst_seq = true; 
 800025a:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <adc_comp_isr+0x170>)
 800025c:	3201      	adds	r2, #1
 800025e:	701a      	strb	r2, [r3, #0]
                log_printf(MAIN, "Reset Sequence\n"); }
 8000260:	4911      	ldr	r1, [pc, #68]	; (80002a8 <adc_comp_isr+0x174>)
 8000262:	2000      	movs	r0, #0
 8000264:	f000 f8ec 	bl	8000440 <log_printf>
 8000268:	e003      	b.n	8000272 <adc_comp_isr+0x13e>
            break;

        default:
            log_printf(MAIN, "Error ADC ISR Defaut Case\n");
 800026a:	4910      	ldr	r1, [pc, #64]	; (80002ac <adc_comp_isr+0x178>)
 800026c:	2000      	movs	r0, #0
 800026e:	f000 f8e7 	bl	8000440 <log_printf>
            break;
    }

    // log_printf(MAIN, "ADC ISR %u %u %u V\n",state, batt_voltages[0], batt_voltages[1]);

    ADC_ISR(ADC1) = 0xFFFFFFFF;
 8000272:	480f      	ldr	r0, [pc, #60]	; (80002b0 <adc_comp_isr+0x17c>)
 8000274:	2301      	movs	r3, #1
 8000276:	425b      	negs	r3, r3
 8000278:	6003      	str	r3, [r0, #0]
    adc_start_conversion_regular(ADC1);
 800027a:	f001 f88d 	bl	8001398 <adc_start_conversion_regular>
}
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	1ff80078 	.word	0x1ff80078
 8000284:	20000114 	.word	0x20000114
 8000288:	2000011c 	.word	0x2000011c
 800028c:	20000120 	.word	0x20000120
 8000290:	08002cbc 	.word	0x08002cbc
 8000294:	20000122 	.word	0x20000122
 8000298:	00002710 	.word	0x00002710
 800029c:	08002c74 	.word	0x08002c74
 80002a0:	08002c84 	.word	0x08002c84
 80002a4:	2000011a 	.word	0x2000011a
 80002a8:	08002c90 	.word	0x08002c90
 80002ac:	08002ca0 	.word	0x08002ca0
 80002b0:	40012400 	.word	0x40012400

080002b4 <boot_deinit>:
}

void boot_deinit(void)
{
    // Reset all peripherals
    RCC_AHBRSTR = 0xFFFFFFFF;
 80002b4:	4907      	ldr	r1, [pc, #28]	; (80002d4 <boot_deinit+0x20>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	4252      	negs	r2, r2
 80002ba:	600a      	str	r2, [r1, #0]
    RCC_AHBRSTR = 0x00000000;
 80002bc:	2300      	movs	r3, #0
 80002be:	600b      	str	r3, [r1, #0]
    RCC_APB2RSTR = 0xFFFFFFFF;
 80002c0:	4905      	ldr	r1, [pc, #20]	; (80002d8 <boot_deinit+0x24>)
 80002c2:	600a      	str	r2, [r1, #0]
    RCC_APB2RSTR = 0x00000000;
 80002c4:	600b      	str	r3, [r1, #0]
    RCC_APB1RSTR = 0xFFFFFFFF;
 80002c6:	4905      	ldr	r1, [pc, #20]	; (80002dc <boot_deinit+0x28>)
 80002c8:	600a      	str	r2, [r1, #0]
    RCC_APB1RSTR = 0x00000000;
 80002ca:	600b      	str	r3, [r1, #0]
    RCC_IOPRSTR = 0xFFFFFFFF;
 80002cc:	4904      	ldr	r1, [pc, #16]	; (80002e0 <boot_deinit+0x2c>)
 80002ce:	600a      	str	r2, [r1, #0]
    RCC_IOPRSTR = 0x00000000;
 80002d0:	600b      	str	r3, [r1, #0]
}
 80002d2:	4770      	bx	lr
 80002d4:	40021020 	.word	0x40021020
 80002d8:	40021024 	.word	0x40021024
 80002dc:	40021028 	.word	0x40021028
 80002e0:	4002101c 	.word	0x4002101c

080002e4 <boot_jump_to_application>:

void boot_jump_to_application(uint32_t address)
{
 80002e4:	b510      	push	{r4, lr}
    // Disable Interrupts
    __asm__ volatile("CPSID I\n");
 80002e6:	b672      	cpsid	i

    // Update vector table offset
    SCB_VTOR = address;
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <boot_jump_to_application+0x1c>)
 80002ea:	6018      	str	r0, [r3, #0]

    // Update main stack pointer
    __asm__("msr msp, %0"
            :
            : "r"(MMIO32(address)));
 80002ec:	6803      	ldr	r3, [r0, #0]
    __asm__("msr msp, %0"
 80002ee:	f383 8808 	msr	MSP, r3

    // Get start address of program
    void (*start)(void) = (void *)MMIO32(address + 4);
 80002f2:	6844      	ldr	r4, [r0, #4]

    // Deinitialize all used peripherals
    boot_deinit();
 80002f4:	f7ff ffde 	bl	80002b4 <boot_deinit>

    // Enable interruptsf
    __asm__ volatile("CPSIE I\n");
 80002f8:	b662      	cpsie	i

    start();
 80002fa:	47a0      	blx	r4

    while (1)
 80002fc:	e7fe      	b.n	80002fc <boot_jump_to_application+0x18>
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	e000ed08 	.word	0xe000ed08

08000304 <clock_setup>:
// Static Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

//  Static Function Definitions
static void clock_setup(void) 
{
 8000304:	b510      	push	{r4, lr}
	// Enable MSI Osc 2.097Mhz
	rcc_osc_on(RCC_MSI);
 8000306:	2004      	movs	r0, #4
 8000308:	f001 f926 	bl	8001558 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_MSI);
 800030c:	2004      	movs	r0, #4
 800030e:	f001 f979 	bl	8001604 <rcc_wait_for_osc_ready>

	// Set MSI to 2.097Mhz
	rcc_set_msi_range(5);
 8000312:	2005      	movs	r0, #5
 8000314:	f001 f9a0 	bl	8001658 <rcc_set_msi_range>

	// Set prescalers for AHB, APB1, APB2
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);				// AHB -> 2.097Mhz
 8000318:	2000      	movs	r0, #0
 800031a:	f001 f993 	bl	8001644 <rcc_set_hpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);			// APB1 -> 2.097Mhz
 800031e:	2000      	movs	r0, #0
 8000320:	f001 f978 	bl	8001614 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);			// APB2 -> 2.097Mhz
 8000324:	2000      	movs	r0, #0
 8000326:	f001 f981 	bl	800162c <rcc_set_ppre2>

	// Set flash, 2.097Mhz -> 0 waitstates
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 800032a:	2000      	movs	r0, #0
 800032c:	f001 f840 	bl	80013b0 <flash_set_ws>

	// Set Peripheral Clock Frequencies used
	rcc_ahb_frequency = 2097000;
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <clock_setup+0x3c>)
 8000332:	4a04      	ldr	r2, [pc, #16]	; (8000344 <clock_setup+0x40>)
 8000334:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 2097000;
 8000336:	4a04      	ldr	r2, [pc, #16]	; (8000348 <clock_setup+0x44>)
 8000338:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = 2097000;
 800033a:	4a04      	ldr	r2, [pc, #16]	; (800034c <clock_setup+0x48>)
 800033c:	6013      	str	r3, [r2, #0]
}
 800033e:	bd10      	pop	{r4, pc}
 8000340:	001fff68 	.word	0x001fff68
 8000344:	20000004 	.word	0x20000004
 8000348:	20000008 	.word	0x20000008
 800034c:	2000000c 	.word	0x2000000c

08000350 <usart_setup>:

static void usart_setup(void) 
{
 8000350:	b570      	push	{r4, r5, r6, lr}
    rcc_periph_clock_enable(RCC_GPIOA);
 8000352:	20b0      	movs	r0, #176	; 0xb0
 8000354:	00c0      	lsls	r0, r0, #3
 8000356:	f001 f9c1 	bl	80016dc <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOB);
 800035a:	4826      	ldr	r0, [pc, #152]	; (80003f4 <usart_setup+0xa4>)
 800035c:	f001 f9be 	bl	80016dc <rcc_periph_clock_enable>

	gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_TX);
 8000360:	2580      	movs	r5, #128	; 0x80
 8000362:	00ad      	lsls	r5, r5, #2
 8000364:	24a0      	movs	r4, #160	; 0xa0
 8000366:	05e4      	lsls	r4, r4, #23
 8000368:	002b      	movs	r3, r5
 800036a:	2200      	movs	r2, #0
 800036c:	2102      	movs	r1, #2
 800036e:	0020      	movs	r0, r4
 8000370:	f001 f841 	bl	80013f6 <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_RX);
 8000374:	2680      	movs	r6, #128	; 0x80
 8000376:	00f6      	lsls	r6, r6, #3
 8000378:	0033      	movs	r3, r6
 800037a:	2200      	movs	r2, #0
 800037c:	2102      	movs	r1, #2
 800037e:	0020      	movs	r0, r4
 8000380:	f001 f839 	bl	80013f6 <gpio_mode_setup>
    
    gpio_set_output_options(SPF_USART_TX_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, SPF_USART_TX);
 8000384:	002b      	movs	r3, r5
 8000386:	2200      	movs	r2, #0
 8000388:	2100      	movs	r1, #0
 800038a:	0020      	movs	r0, r4
 800038c:	f001 f853 	bl	8001436 <gpio_set_output_options>

    gpio_set_af(SPF_USART_TX_PORT, SPF_USART_AF, SPF_USART_TX);
 8000390:	002a      	movs	r2, r5
 8000392:	2104      	movs	r1, #4
 8000394:	0020      	movs	r0, r4
 8000396:	f001 f86c 	bl	8001472 <gpio_set_af>
    gpio_set_af(SPF_USART_RX_PORT, SPF_USART_AF, SPF_USART_RX);
 800039a:	0032      	movs	r2, r6
 800039c:	2104      	movs	r1, #4
 800039e:	0020      	movs	r0, r4
 80003a0:	f001 f867 	bl	8001472 <gpio_set_af>
    
	rcc_periph_clock_enable(SPF_USART_RCC);
 80003a4:	4814      	ldr	r0, [pc, #80]	; (80003f8 <usart_setup+0xa8>)
 80003a6:	f001 f999 	bl	80016dc <rcc_periph_clock_enable>
    rcc_periph_reset_pulse(SPF_USART_RCC_RST);
 80003aa:	4814      	ldr	r0, [pc, #80]	; (80003fc <usart_setup+0xac>)
 80003ac:	f001 f9a4 	bl	80016f8 <rcc_periph_reset_pulse>
	usart_disable(SPF_USART);
 80003b0:	4c13      	ldr	r4, [pc, #76]	; (8000400 <usart_setup+0xb0>)
 80003b2:	0020      	movs	r0, r4
 80003b4:	f001 fa3b 	bl	800182e <usart_disable>
	usart_set_baudrate(SPF_USART, SPF_USART_BAUD);
 80003b8:	21e1      	movs	r1, #225	; 0xe1
 80003ba:	0249      	lsls	r1, r1, #9
 80003bc:	0020      	movs	r0, r4
 80003be:	f001 f9d9 	bl	8001774 <usart_set_baudrate>
	usart_set_databits(SPF_USART, 8);
 80003c2:	2108      	movs	r1, #8
 80003c4:	0020      	movs	r0, r4
 80003c6:	f001 fa01 	bl	80017cc <usart_set_databits>
	usart_set_stopbits(SPF_USART,USART_STOPBITS_1);
 80003ca:	2100      	movs	r1, #0
 80003cc:	0020      	movs	r0, r4
 80003ce:	f001 fa0b 	bl	80017e8 <usart_set_stopbits>
	usart_set_mode(SPF_USART, USART_MODE_TX_RX);
 80003d2:	210c      	movs	r1, #12
 80003d4:	0020      	movs	r0, r4
 80003d6:	f001 fa17 	bl	8001808 <usart_set_mode>
	usart_set_parity(SPF_USART, USART_PARITY_NONE);
 80003da:	2100      	movs	r1, #0
 80003dc:	0020      	movs	r0, r4
 80003de:	f001 fa0b 	bl	80017f8 <usart_set_parity>
	usart_set_flow_control(SPF_USART, USART_FLOWCONTROL_NONE);
 80003e2:	2100      	movs	r1, #0
 80003e4:	0020      	movs	r0, r4
 80003e6:	f001 fa15 	bl	8001814 <usart_set_flow_control>
	usart_enable(SPF_USART);
 80003ea:	0020      	movs	r0, r4
 80003ec:	f001 fa1a 	bl	8001824 <usart_enable>
}
 80003f0:	bd70      	pop	{r4, r5, r6, pc}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	00000581 	.word	0x00000581
 80003f8:	0000068e 	.word	0x0000068e
 80003fc:	0000048e 	.word	0x0000048e
 8000400:	40013800 	.word	0x40013800

08000404 <_putchar>:

static void _putchar(char character, void* buffer, size_t idx, size_t maxlen)
{
 8000404:	b510      	push	{r4, lr}
 8000406:	0004      	movs	r4, r0
	(void)buffer; (void)idx; (void)maxlen;

    mem_eeprom_write_byte(curr_address++, character);
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <_putchar+0x1c>)
 800040a:	6818      	ldr	r0, [r3, #0]
 800040c:	1c42      	adds	r2, r0, #1
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	0021      	movs	r1, r4
 8000412:	f000 f837 	bl	8000484 <mem_eeprom_write_byte>

    #ifdef DEBUG
	usart_send_blocking(SPF_USART, character);	
 8000416:	b2a1      	uxth	r1, r4
 8000418:	4802      	ldr	r0, [pc, #8]	; (8000424 <_putchar+0x20>)
 800041a:	f001 fa0d 	bl	8001838 <usart_send_blocking>
    #endif		
}
 800041e:	bd10      	pop	{r4, pc}
 8000420:	20000000 	.word	0x20000000
 8000424:	40013800 	.word	0x40013800

08000428 <log_init>:
{
 8000428:	b510      	push	{r4, lr}
    curr_address = 0;
 800042a:	4b04      	ldr	r3, [pc, #16]	; (800043c <log_init+0x14>)
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
    clock_setup();
 8000430:	f7ff ff68 	bl	8000304 <clock_setup>
    usart_setup();
 8000434:	f7ff ff8c 	bl	8000350 <usart_setup>
}
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	20000000 	.word	0x20000000

08000440 <log_printf>:
{
 8000440:	b40e      	push	{r1, r2, r3}
 8000442:	b500      	push	{lr}
 8000444:	b084      	sub	sp, #16
 8000446:	aa05      	add	r2, sp, #20
 8000448:	ca08      	ldmia	r2!, {r3}
	va_start(va, format);
 800044a:	9202      	str	r2, [sp, #8]
    switch (type)
 800044c:	2800      	cmp	r0, #0
 800044e:	d007      	beq.n	8000460 <log_printf+0x20>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {__asm__("nop");}
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	480a      	ldr	r0, [pc, #40]	; (800047c <log_printf+0x3c>)
 8000454:	f001 fa07 	bl	8001866 <usart_get_flag>
 8000458:	2800      	cmp	r0, #0
 800045a:	d10a      	bne.n	8000472 <log_printf+0x32>
 800045c:	46c0      	nop			; (mov r8, r8)
 800045e:	e7f7      	b.n	8000450 <log_printf+0x10>
        _vsnprintf(_putchar, buffer, (size_t)-1, format, va);
 8000460:	2201      	movs	r2, #1
 8000462:	9902      	ldr	r1, [sp, #8]
 8000464:	9100      	str	r1, [sp, #0]
 8000466:	4252      	negs	r2, r2
 8000468:	a903      	add	r1, sp, #12
 800046a:	4805      	ldr	r0, [pc, #20]	; (8000480 <log_printf+0x40>)
 800046c:	f000 fb20 	bl	8000ab0 <_vsnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {__asm__("nop");}
 8000470:	e7ee      	b.n	8000450 <log_printf+0x10>
}
 8000472:	b004      	add	sp, #16
 8000474:	bc08      	pop	{r3}
 8000476:	b003      	add	sp, #12
 8000478:	4718      	bx	r3
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	40013800 	.word	0x40013800
 8000480:	08000405 	.word	0x08000405

08000484 <mem_eeprom_write_byte>:

    return true;
}

bool mem_eeprom_write_byte(uint32_t address, uint8_t data)
{
 8000484:	b570      	push	{r4, r5, r6, lr}
 8000486:	0004      	movs	r4, r0
 8000488:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <mem_eeprom_write_byte+0x44>)
 800048c:	18c2      	adds	r2, r0, r3
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	011b      	lsls	r3, r3, #4
 8000492:	429a      	cmp	r2, r3
 8000494:	d301      	bcc.n	800049a <mem_eeprom_write_byte+0x16>
        return false;
 8000496:	2000      	movs	r0, #0
        FLASH_SR = FLASH_SR_EOP;

    flash_lock_pecr();

    return true;
}
 8000498:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock_pecr();
 800049a:	f000 ff93 	bl	80013c4 <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 800049e:	4a0b      	ldr	r2, [pc, #44]	; (80004cc <mem_eeprom_write_byte+0x48>)
 80004a0:	6813      	ldr	r3, [r2, #0]
 80004a2:	490b      	ldr	r1, [pc, #44]	; (80004d0 <mem_eeprom_write_byte+0x4c>)
 80004a4:	400b      	ands	r3, r1
 80004a6:	6013      	str	r3, [r2, #0]
    MMIO8(address) = data;
 80004a8:	7025      	strb	r5, [r4, #0]
    while (FLASH_SR & FLASH_SR_BSY);
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <mem_eeprom_write_byte+0x50>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	07db      	lsls	r3, r3, #31
 80004b0:	d4fb      	bmi.n	80004aa <mem_eeprom_write_byte+0x26>
    if (FLASH_SR & FLASH_SR_EOP)
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <mem_eeprom_write_byte+0x50>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	079b      	lsls	r3, r3, #30
 80004b8:	d502      	bpl.n	80004c0 <mem_eeprom_write_byte+0x3c>
        FLASH_SR = FLASH_SR_EOP;
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <mem_eeprom_write_byte+0x50>)
 80004bc:	2202      	movs	r2, #2
 80004be:	601a      	str	r2, [r3, #0]
    flash_lock_pecr();
 80004c0:	f000 ff8c 	bl	80013dc <flash_lock_pecr>
    return true;
 80004c4:	2001      	movs	r0, #1
 80004c6:	e7e7      	b.n	8000498 <mem_eeprom_write_byte+0x14>
 80004c8:	f7f80000 	.word	0xf7f80000
 80004cc:	40022004 	.word	0x40022004
 80004d0:	fffffeff 	.word	0xfffffeff
 80004d4:	40022018 	.word	0x40022018

080004d8 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80004d8:	4770      	bx	lr

080004da <_atoi>:
}


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80004da:	0001      	movs	r1, r0
  unsigned int i = 0U;
 80004dc:	2000      	movs	r0, #0
  while (_is_digit(**str)) {
 80004de:	680a      	ldr	r2, [r1, #0]
 80004e0:	7813      	ldrb	r3, [r2, #0]
  return (ch >= '0') && (ch <= '9');
 80004e2:	3b30      	subs	r3, #48	; 0x30
 80004e4:	b2db      	uxtb	r3, r3
  while (_is_digit(**str)) {
 80004e6:	2b09      	cmp	r3, #9
 80004e8:	d808      	bhi.n	80004fc <_atoi+0x22>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80004ea:	0083      	lsls	r3, r0, #2
 80004ec:	181b      	adds	r3, r3, r0
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	1c50      	adds	r0, r2, #1
 80004f2:	6008      	str	r0, [r1, #0]
 80004f4:	7810      	ldrb	r0, [r2, #0]
 80004f6:	18c0      	adds	r0, r0, r3
 80004f8:	3830      	subs	r0, #48	; 0x30
 80004fa:	e7f0      	b.n	80004de <_atoi+0x4>
  }
  return i;
}
 80004fc:	4770      	bx	lr

080004fe <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80004fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000500:	46de      	mov	lr, fp
 8000502:	4657      	mov	r7, sl
 8000504:	464e      	mov	r6, r9
 8000506:	4645      	mov	r5, r8
 8000508:	b5e0      	push	{r5, r6, r7, lr}
 800050a:	b083      	sub	sp, #12
 800050c:	4693      	mov	fp, r2
 800050e:	001f      	movs	r7, r3
 8000510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000512:	469a      	mov	sl, r3
 8000514:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8000516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000518:	4699      	mov	r9, r3
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800051a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800051c:	079b      	lsls	r3, r3, #30
 800051e:	d003      	beq.n	8000528 <_out_rev+0x2a>
 8000520:	46b8      	mov	r8, r7
 8000522:	000f      	movs	r7, r1
 8000524:	0006      	movs	r6, r0
 8000526:	e022      	b.n	800056e <_out_rev+0x70>
 8000528:	9201      	str	r2, [sp, #4]
 800052a:	46a3      	mov	fp, r4
 800052c:	4688      	mov	r8, r1
 800052e:	464e      	mov	r6, r9
 8000530:	46b9      	mov	r9, r7
 8000532:	0007      	movs	r7, r0
    for (size_t i = len; i < width; i++) {
 8000534:	42b4      	cmp	r4, r6
 8000536:	d207      	bcs.n	8000548 <_out_rev+0x4a>
      out(' ', buffer, idx++, maxlen);
 8000538:	1c55      	adds	r5, r2, #1
 800053a:	464b      	mov	r3, r9
 800053c:	4641      	mov	r1, r8
 800053e:	2020      	movs	r0, #32
 8000540:	47b8      	blx	r7
    for (size_t i = len; i < width; i++) {
 8000542:	3401      	adds	r4, #1
      out(' ', buffer, idx++, maxlen);
 8000544:	002a      	movs	r2, r5
 8000546:	e7f5      	b.n	8000534 <_out_rev+0x36>
 8000548:	003d      	movs	r5, r7
 800054a:	464f      	mov	r7, r9
 800054c:	465c      	mov	r4, fp
 800054e:	9b01      	ldr	r3, [sp, #4]
 8000550:	469b      	mov	fp, r3
 8000552:	46b1      	mov	r9, r6
 8000554:	4646      	mov	r6, r8
 8000556:	46b8      	mov	r8, r7
 8000558:	0037      	movs	r7, r6
 800055a:	002e      	movs	r6, r5
 800055c:	e007      	b.n	800056e <_out_rev+0x70>
    }
  }

  // reverse string
  while (len) {
    out(buf[--len], buffer, idx++, maxlen);
 800055e:	3c01      	subs	r4, #1
 8000560:	1c55      	adds	r5, r2, #1
 8000562:	4653      	mov	r3, sl
 8000564:	5d18      	ldrb	r0, [r3, r4]
 8000566:	4643      	mov	r3, r8
 8000568:	0039      	movs	r1, r7
 800056a:	47b0      	blx	r6
 800056c:	002a      	movs	r2, r5
  while (len) {
 800056e:	2c00      	cmp	r4, #0
 8000570:	d1f5      	bne.n	800055e <_out_rev+0x60>
 8000572:	0035      	movs	r5, r6
 8000574:	003e      	movs	r6, r7
 8000576:	4647      	mov	r7, r8
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8000578:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800057a:	079b      	lsls	r3, r3, #30
 800057c:	d407      	bmi.n	800058e <_out_rev+0x90>
      out(' ', buffer, idx++, maxlen);
    }
  }

  return idx;
}
 800057e:	0010      	movs	r0, r2
 8000580:	b003      	add	sp, #12
 8000582:	bcf0      	pop	{r4, r5, r6, r7}
 8000584:	46bb      	mov	fp, r7
 8000586:	46b2      	mov	sl, r6
 8000588:	46a9      	mov	r9, r5
 800058a:	46a0      	mov	r8, r4
 800058c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058e:	46b0      	mov	r8, r6
 8000590:	464e      	mov	r6, r9
 8000592:	46b9      	mov	r9, r7
 8000594:	002f      	movs	r7, r5
 8000596:	465d      	mov	r5, fp
    while (idx - start_idx < width) {
 8000598:	1b53      	subs	r3, r2, r5
 800059a:	42b3      	cmp	r3, r6
 800059c:	d2ef      	bcs.n	800057e <_out_rev+0x80>
      out(' ', buffer, idx++, maxlen);
 800059e:	1c54      	adds	r4, r2, #1
 80005a0:	464b      	mov	r3, r9
 80005a2:	4641      	mov	r1, r8
 80005a4:	2020      	movs	r0, #32
 80005a6:	47b8      	blx	r7
 80005a8:	0022      	movs	r2, r4
 80005aa:	e7f5      	b.n	8000598 <_out_rev+0x9a>

080005ac <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80005ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ae:	46ce      	mov	lr, r9
 80005b0:	4647      	mov	r7, r8
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b085      	sub	sp, #20
 80005b6:	4694      	mov	ip, r2
 80005b8:	4698      	mov	r8, r3
 80005ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80005bc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80005be:	ab0e      	add	r3, sp, #56	; 0x38
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	4699      	mov	r9, r3
 80005c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80005c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80005c8:	9e12      	ldr	r6, [sp, #72]	; 0x48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80005ca:	07b7      	lsls	r7, r6, #30
 80005cc:	d41b      	bmi.n	8000606 <_ntoa_format+0x5a>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d008      	beq.n	80005e4 <_ntoa_format+0x38>
 80005d2:	07f7      	lsls	r7, r6, #31
 80005d4:	d506      	bpl.n	80005e4 <_ntoa_format+0x38>
 80005d6:	464f      	mov	r7, r9
 80005d8:	2f00      	cmp	r7, #0
 80005da:	d102      	bne.n	80005e2 <_ntoa_format+0x36>
 80005dc:	370c      	adds	r7, #12
 80005de:	4237      	tst	r7, r6
 80005e0:	d000      	beq.n	80005e4 <_ntoa_format+0x38>
      width--;
 80005e2:	3b01      	subs	r3, #1
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80005e4:	4294      	cmp	r4, r2
 80005e6:	d208      	bcs.n	80005fa <_ntoa_format+0x4e>
 80005e8:	2c1f      	cmp	r4, #31
 80005ea:	d806      	bhi.n	80005fa <_ntoa_format+0x4e>
      buf[len++] = '0';
 80005ec:	2730      	movs	r7, #48	; 0x30
 80005ee:	552f      	strb	r7, [r5, r4]
 80005f0:	3401      	adds	r4, #1
 80005f2:	e7f7      	b.n	80005e4 <_ntoa_format+0x38>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 80005f4:	2730      	movs	r7, #48	; 0x30
 80005f6:	552f      	strb	r7, [r5, r4]
 80005f8:	3401      	adds	r4, #1
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80005fa:	07f7      	lsls	r7, r6, #31
 80005fc:	d503      	bpl.n	8000606 <_ntoa_format+0x5a>
 80005fe:	429c      	cmp	r4, r3
 8000600:	d201      	bcs.n	8000606 <_ntoa_format+0x5a>
 8000602:	2c1f      	cmp	r4, #31
 8000604:	d9f6      	bls.n	80005f4 <_ntoa_format+0x48>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8000606:	06f7      	lsls	r7, r6, #27
 8000608:	d515      	bpl.n	8000636 <_ntoa_format+0x8a>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800060a:	0577      	lsls	r7, r6, #21
 800060c:	d405      	bmi.n	800061a <_ntoa_format+0x6e>
 800060e:	2c00      	cmp	r4, #0
 8000610:	d003      	beq.n	800061a <_ntoa_format+0x6e>
 8000612:	4294      	cmp	r4, r2
 8000614:	d024      	beq.n	8000660 <_ntoa_format+0xb4>
 8000616:	429c      	cmp	r4, r3
 8000618:	d022      	beq.n	8000660 <_ntoa_format+0xb4>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800061a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800061c:	2a10      	cmp	r2, #16
 800061e:	d02b      	beq.n	8000678 <_ntoa_format+0xcc>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8000620:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000622:	2a10      	cmp	r2, #16
 8000624:	d030      	beq.n	8000688 <_ntoa_format+0xdc>
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8000626:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000628:	2a02      	cmp	r2, #2
 800062a:	d035      	beq.n	8000698 <_ntoa_format+0xec>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800062c:	2c1f      	cmp	r4, #31
 800062e:	d802      	bhi.n	8000636 <_ntoa_format+0x8a>
      buf[len++] = '0';
 8000630:	2230      	movs	r2, #48	; 0x30
 8000632:	552a      	strb	r2, [r5, r4]
 8000634:	3401      	adds	r4, #1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8000636:	2c1f      	cmp	r4, #31
 8000638:	d805      	bhi.n	8000646 <_ntoa_format+0x9a>
    if (negative) {
 800063a:	464a      	mov	r2, r9
 800063c:	2a00      	cmp	r2, #0
 800063e:	d031      	beq.n	80006a4 <_ntoa_format+0xf8>
      buf[len++] = '-';
 8000640:	222d      	movs	r2, #45	; 0x2d
 8000642:	552a      	strb	r2, [r5, r4]
 8000644:	3401      	adds	r4, #1
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8000646:	9603      	str	r6, [sp, #12]
 8000648:	9302      	str	r3, [sp, #8]
 800064a:	9401      	str	r4, [sp, #4]
 800064c:	9500      	str	r5, [sp, #0]
 800064e:	4643      	mov	r3, r8
 8000650:	4662      	mov	r2, ip
 8000652:	f7ff ff54 	bl	80004fe <_out_rev>
}
 8000656:	b005      	add	sp, #20
 8000658:	bcc0      	pop	{r6, r7}
 800065a:	46b9      	mov	r9, r7
 800065c:	46b0      	mov	r8, r6
 800065e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      len--;
 8000660:	1e62      	subs	r2, r4, #1
      if (len && (base == 16U)) {
 8000662:	2c01      	cmp	r4, #1
 8000664:	d006      	beq.n	8000674 <_ntoa_format+0xc8>
 8000666:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8000668:	2f10      	cmp	r7, #16
 800066a:	d001      	beq.n	8000670 <_ntoa_format+0xc4>
      len--;
 800066c:	0014      	movs	r4, r2
 800066e:	e7d4      	b.n	800061a <_ntoa_format+0x6e>
        len--;
 8000670:	3c02      	subs	r4, #2
 8000672:	e7d2      	b.n	800061a <_ntoa_format+0x6e>
      len--;
 8000674:	0014      	movs	r4, r2
 8000676:	e7d0      	b.n	800061a <_ntoa_format+0x6e>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8000678:	06b2      	lsls	r2, r6, #26
 800067a:	d4d1      	bmi.n	8000620 <_ntoa_format+0x74>
 800067c:	2c1f      	cmp	r4, #31
 800067e:	d8cf      	bhi.n	8000620 <_ntoa_format+0x74>
      buf[len++] = 'x';
 8000680:	2278      	movs	r2, #120	; 0x78
 8000682:	552a      	strb	r2, [r5, r4]
 8000684:	3401      	adds	r4, #1
 8000686:	e7d1      	b.n	800062c <_ntoa_format+0x80>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8000688:	06b2      	lsls	r2, r6, #26
 800068a:	d5cc      	bpl.n	8000626 <_ntoa_format+0x7a>
 800068c:	2c1f      	cmp	r4, #31
 800068e:	d8ca      	bhi.n	8000626 <_ntoa_format+0x7a>
      buf[len++] = 'X';
 8000690:	2258      	movs	r2, #88	; 0x58
 8000692:	552a      	strb	r2, [r5, r4]
 8000694:	3401      	adds	r4, #1
 8000696:	e7c9      	b.n	800062c <_ntoa_format+0x80>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8000698:	2c1f      	cmp	r4, #31
 800069a:	d8c7      	bhi.n	800062c <_ntoa_format+0x80>
      buf[len++] = 'b';
 800069c:	3260      	adds	r2, #96	; 0x60
 800069e:	552a      	strb	r2, [r5, r4]
 80006a0:	3401      	adds	r4, #1
 80006a2:	e7c3      	b.n	800062c <_ntoa_format+0x80>
    else if (flags & FLAGS_PLUS) {
 80006a4:	0772      	lsls	r2, r6, #29
 80006a6:	d503      	bpl.n	80006b0 <_ntoa_format+0x104>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80006a8:	222b      	movs	r2, #43	; 0x2b
 80006aa:	552a      	strb	r2, [r5, r4]
 80006ac:	3401      	adds	r4, #1
 80006ae:	e7ca      	b.n	8000646 <_ntoa_format+0x9a>
    else if (flags & FLAGS_SPACE) {
 80006b0:	0732      	lsls	r2, r6, #28
 80006b2:	d5c8      	bpl.n	8000646 <_ntoa_format+0x9a>
      buf[len++] = ' ';
 80006b4:	2220      	movs	r2, #32
 80006b6:	552a      	strb	r2, [r5, r4]
 80006b8:	3401      	adds	r4, #1
 80006ba:	e7c4      	b.n	8000646 <_ntoa_format+0x9a>

080006bc <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80006bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006be:	46de      	mov	lr, fp
 80006c0:	4657      	mov	r7, sl
 80006c2:	464e      	mov	r6, r9
 80006c4:	4645      	mov	r5, r8
 80006c6:	b5e0      	push	{r5, r6, r7, lr}
 80006c8:	b093      	sub	sp, #76	; 0x4c
 80006ca:	4681      	mov	r9, r0
 80006cc:	468a      	mov	sl, r1
 80006ce:	9208      	str	r2, [sp, #32]
 80006d0:	9309      	str	r3, [sp, #36]	; 0x24
 80006d2:	ab1c      	add	r3, sp, #112	; 0x70
 80006d4:	cb10      	ldmia	r3!, {r4}
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	469b      	mov	fp, r3
 80006da:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80006dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80006de:	4698      	mov	r8, r3
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 80006e0:	2c00      	cmp	r4, #0
 80006e2:	d103      	bne.n	80006ec <_ntoa_long+0x30>
    flags &= ~FLAGS_HASH;
 80006e4:	2310      	movs	r3, #16
 80006e6:	4642      	mov	r2, r8
 80006e8:	439a      	bics	r2, r3
 80006ea:	4690      	mov	r8, r2
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	4646      	mov	r6, r8
 80006f2:	401e      	ands	r6, r3
 80006f4:	4642      	mov	r2, r8
 80006f6:	421a      	tst	r2, r3
 80006f8:	d012      	beq.n	8000720 <_ntoa_long+0x64>
 80006fa:	2c00      	cmp	r4, #0
 80006fc:	d022      	beq.n	8000744 <_ntoa_long+0x88>
 80006fe:	2600      	movs	r6, #0
 8000700:	e00e      	b.n	8000720 <_ntoa_long+0x64>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8000702:	3330      	adds	r3, #48	; 0x30
 8000704:	b2d9      	uxtb	r1, r3
 8000706:	1c77      	adds	r7, r6, #1
 8000708:	ab0a      	add	r3, sp, #40	; 0x28
 800070a:	5599      	strb	r1, [r3, r6]
      value /= base;
 800070c:	0029      	movs	r1, r5
 800070e:	0020      	movs	r0, r4
 8000710:	f001 f900 	bl	8001914 <__udivsi3>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8000714:	42ac      	cmp	r4, r5
 8000716:	d316      	bcc.n	8000746 <_ntoa_long+0x8a>
 8000718:	2f1f      	cmp	r7, #31
 800071a:	d814      	bhi.n	8000746 <_ntoa_long+0x8a>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800071c:	003e      	movs	r6, r7
      value /= base;
 800071e:	0004      	movs	r4, r0
      const char digit = (char)(value % base);
 8000720:	0029      	movs	r1, r5
 8000722:	0020      	movs	r0, r4
 8000724:	f001 f97c 	bl	8001a20 <__aeabi_uidivmod>
 8000728:	b2cb      	uxtb	r3, r1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800072a:	2b09      	cmp	r3, #9
 800072c:	d9e9      	bls.n	8000702 <_ntoa_long+0x46>
 800072e:	4642      	mov	r2, r8
 8000730:	0692      	lsls	r2, r2, #26
 8000732:	d505      	bpl.n	8000740 <_ntoa_long+0x84>
 8000734:	2141      	movs	r1, #65	; 0x41
 8000736:	18c9      	adds	r1, r1, r3
 8000738:	b2c9      	uxtb	r1, r1
 800073a:	390a      	subs	r1, #10
 800073c:	b2c9      	uxtb	r1, r1
 800073e:	e7e2      	b.n	8000706 <_ntoa_long+0x4a>
 8000740:	2161      	movs	r1, #97	; 0x61
 8000742:	e7f8      	b.n	8000736 <_ntoa_long+0x7a>
  size_t len = 0U;
 8000744:	0027      	movs	r7, r4
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8000746:	4643      	mov	r3, r8
 8000748:	9306      	str	r3, [sp, #24]
 800074a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800074c:	9305      	str	r3, [sp, #20]
 800074e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000750:	9304      	str	r3, [sp, #16]
 8000752:	9503      	str	r5, [sp, #12]
 8000754:	465b      	mov	r3, fp
 8000756:	9302      	str	r3, [sp, #8]
 8000758:	9701      	str	r7, [sp, #4]
 800075a:	ab0a      	add	r3, sp, #40	; 0x28
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000760:	9a08      	ldr	r2, [sp, #32]
 8000762:	4651      	mov	r1, sl
 8000764:	4648      	mov	r0, r9
 8000766:	f7ff ff21 	bl	80005ac <_ntoa_format>
}
 800076a:	b013      	add	sp, #76	; 0x4c
 800076c:	bcf0      	pop	{r4, r5, r6, r7}
 800076e:	46bb      	mov	fp, r7
 8000770:	46b2      	mov	sl, r6
 8000772:	46a9      	mov	r9, r5
 8000774:	46a0      	mov	r8, r4
 8000776:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000778 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8000778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800077a:	46de      	mov	lr, fp
 800077c:	4657      	mov	r7, sl
 800077e:	464e      	mov	r6, r9
 8000780:	4645      	mov	r5, r8
 8000782:	b5e0      	push	{r5, r6, r7, lr}
 8000784:	b093      	sub	sp, #76	; 0x4c
 8000786:	9004      	str	r0, [sp, #16]
 8000788:	9105      	str	r1, [sp, #20]
 800078a:	4692      	mov	sl, r2
 800078c:	469b      	mov	fp, r3
 800078e:	9d1e      	ldr	r5, [sp, #120]	; 0x78

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8000790:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8000792:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8000794:	0010      	movs	r0, r2
 8000796:	0019      	movs	r1, r3
 8000798:	f001 fa42 	bl	8001c20 <__aeabi_dcmpeq>
 800079c:	2800      	cmp	r0, #0
 800079e:	d033      	beq.n	8000808 <_ftoa+0x90>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
  if (value < -DBL_MAX)
 80007a0:	2201      	movs	r2, #1
 80007a2:	4252      	negs	r2, r2
 80007a4:	4bb8      	ldr	r3, [pc, #736]	; (8000a88 <_ftoa+0x310>)
 80007a6:	981c      	ldr	r0, [sp, #112]	; 0x70
 80007a8:	991d      	ldr	r1, [sp, #116]	; 0x74
 80007aa:	f001 fa3f 	bl	8001c2c <__aeabi_dcmplt>
 80007ae:	2800      	cmp	r0, #0
 80007b0:	d139      	bne.n	8000826 <_ftoa+0xae>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
  if (value > DBL_MAX)
 80007b2:	2201      	movs	r2, #1
 80007b4:	4252      	negs	r2, r2
 80007b6:	4bb5      	ldr	r3, [pc, #724]	; (8000a8c <_ftoa+0x314>)
 80007b8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80007ba:	991d      	ldr	r1, [sp, #116]	; 0x74
 80007bc:	f001 fa4a 	bl	8001c54 <__aeabi_dcmpgt>
 80007c0:	2800      	cmp	r0, #0
 80007c2:	d13f      	bne.n	8000844 <_ftoa+0xcc>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 80007c4:	2200      	movs	r2, #0
 80007c6:	4bb2      	ldr	r3, [pc, #712]	; (8000a90 <_ftoa+0x318>)
 80007c8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80007ca:	991d      	ldr	r1, [sp, #116]	; 0x74
 80007cc:	f001 fa42 	bl	8001c54 <__aeabi_dcmpgt>
 80007d0:	2800      	cmp	r0, #0
 80007d2:	d000      	beq.n	80007d6 <_ftoa+0x5e>
 80007d4:	e153      	b.n	8000a7e <_ftoa+0x306>
 80007d6:	2200      	movs	r2, #0
 80007d8:	4bae      	ldr	r3, [pc, #696]	; (8000a94 <_ftoa+0x31c>)
 80007da:	981c      	ldr	r0, [sp, #112]	; 0x70
 80007dc:	991d      	ldr	r1, [sp, #116]	; 0x74
 80007de:	f001 fa25 	bl	8001c2c <__aeabi_dcmplt>
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d000      	beq.n	80007e8 <_ftoa+0x70>
 80007e6:	e14c      	b.n	8000a82 <_ftoa+0x30a>
#endif
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
 80007e8:	2200      	movs	r2, #0
 80007ea:	2300      	movs	r3, #0
 80007ec:	981c      	ldr	r0, [sp, #112]	; 0x70
 80007ee:	991d      	ldr	r1, [sp, #116]	; 0x74
 80007f0:	f001 fa1c 	bl	8001c2c <__aeabi_dcmplt>
 80007f4:	2800      	cmp	r0, #0
 80007f6:	d146      	bne.n	8000886 <_ftoa+0x10e>
  bool negative = false;
 80007f8:	2300      	movs	r3, #0
 80007fa:	4699      	mov	r9, r3
    negative = true;
    value = 0 - value;
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80007fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80007fe:	055b      	lsls	r3, r3, #21
 8000800:	d400      	bmi.n	8000804 <_ftoa+0x8c>
 8000802:	e0ac      	b.n	800095e <_ftoa+0x1e6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8000804:	2400      	movs	r4, #0
 8000806:	e04e      	b.n	80008a6 <_ftoa+0x12e>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8000808:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800080a:	9303      	str	r3, [sp, #12]
 800080c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800080e:	9302      	str	r3, [sp, #8]
 8000810:	2303      	movs	r3, #3
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	4ba0      	ldr	r3, [pc, #640]	; (8000a98 <_ftoa+0x320>)
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	465b      	mov	r3, fp
 800081a:	4652      	mov	r2, sl
 800081c:	9905      	ldr	r1, [sp, #20]
 800081e:	9804      	ldr	r0, [sp, #16]
 8000820:	f7ff fe6d 	bl	80004fe <_out_rev>
 8000824:	e024      	b.n	8000870 <_ftoa+0xf8>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8000826:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8000828:	9303      	str	r3, [sp, #12]
 800082a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800082c:	9302      	str	r3, [sp, #8]
 800082e:	2304      	movs	r3, #4
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	4b9a      	ldr	r3, [pc, #616]	; (8000a9c <_ftoa+0x324>)
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	465b      	mov	r3, fp
 8000838:	4652      	mov	r2, sl
 800083a:	9905      	ldr	r1, [sp, #20]
 800083c:	9804      	ldr	r0, [sp, #16]
 800083e:	f7ff fe5e 	bl	80004fe <_out_rev>
 8000842:	e015      	b.n	8000870 <_ftoa+0xf8>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8000844:	2304      	movs	r3, #4
 8000846:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8000848:	401a      	ands	r2, r3
 800084a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800084c:	420b      	tst	r3, r1
 800084e:	d016      	beq.n	800087e <_ftoa+0x106>
 8000850:	4b93      	ldr	r3, [pc, #588]	; (8000aa0 <_ftoa+0x328>)
 8000852:	2a00      	cmp	r2, #0
 8000854:	d015      	beq.n	8000882 <_ftoa+0x10a>
 8000856:	2204      	movs	r2, #4
 8000858:	9920      	ldr	r1, [sp, #128]	; 0x80
 800085a:	9103      	str	r1, [sp, #12]
 800085c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800085e:	9102      	str	r1, [sp, #8]
 8000860:	9201      	str	r2, [sp, #4]
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	465b      	mov	r3, fp
 8000866:	4652      	mov	r2, sl
 8000868:	9905      	ldr	r1, [sp, #20]
 800086a:	9804      	ldr	r0, [sp, #16]
 800086c:	f7ff fe47 	bl	80004fe <_out_rev>
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 8000870:	b013      	add	sp, #76	; 0x4c
 8000872:	bcf0      	pop	{r4, r5, r6, r7}
 8000874:	46bb      	mov	fp, r7
 8000876:	46b2      	mov	sl, r6
 8000878:	46a9      	mov	r9, r5
 800087a:	46a0      	mov	r8, r4
 800087c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800087e:	4b89      	ldr	r3, [pc, #548]	; (8000aa4 <_ftoa+0x32c>)
 8000880:	e7e7      	b.n	8000852 <_ftoa+0xda>
 8000882:	2203      	movs	r2, #3
 8000884:	e7e8      	b.n	8000858 <_ftoa+0xe0>
    value = 0 - value;
 8000886:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8000888:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800088a:	2000      	movs	r0, #0
 800088c:	2100      	movs	r1, #0
 800088e:	f001 fd9d 	bl	80023cc <__aeabi_dsub>
 8000892:	901c      	str	r0, [sp, #112]	; 0x70
 8000894:	911d      	str	r1, [sp, #116]	; 0x74
    negative = true;
 8000896:	2301      	movs	r3, #1
 8000898:	4699      	mov	r9, r3
 800089a:	e7af      	b.n	80007fc <_ftoa+0x84>
    buf[len++] = '0';
 800089c:	ab0a      	add	r3, sp, #40	; 0x28
 800089e:	2230      	movs	r2, #48	; 0x30
 80008a0:	551a      	strb	r2, [r3, r4]
    prec--;
 80008a2:	3d01      	subs	r5, #1
    buf[len++] = '0';
 80008a4:	3401      	adds	r4, #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80008a6:	2c1f      	cmp	r4, #31
 80008a8:	d801      	bhi.n	80008ae <_ftoa+0x136>
 80008aa:	2d09      	cmp	r5, #9
 80008ac:	d8f6      	bhi.n	800089c <_ftoa+0x124>
  int whole = (int)value;
 80008ae:	981c      	ldr	r0, [sp, #112]	; 0x70
 80008b0:	991d      	ldr	r1, [sp, #116]	; 0x74
 80008b2:	f002 f91d 	bl	8002af0 <__aeabi_d2iz>
 80008b6:	0007      	movs	r7, r0
  double tmp = (value - whole) * pow10[prec];
 80008b8:	f002 f950 	bl	8002b5c <__aeabi_i2d>
 80008bc:	0002      	movs	r2, r0
 80008be:	000b      	movs	r3, r1
 80008c0:	981c      	ldr	r0, [sp, #112]	; 0x70
 80008c2:	991d      	ldr	r1, [sp, #116]	; 0x74
 80008c4:	f001 fd82 	bl	80023cc <__aeabi_dsub>
 80008c8:	00ea      	lsls	r2, r5, #3
 80008ca:	4b77      	ldr	r3, [pc, #476]	; (8000aa8 <_ftoa+0x330>)
 80008cc:	189b      	adds	r3, r3, r2
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	9208      	str	r2, [sp, #32]
 80008d4:	9309      	str	r3, [sp, #36]	; 0x24
 80008d6:	f001 fb0d 	bl	8001ef4 <__aeabi_dmul>
  unsigned long frac = (unsigned long)tmp;
 80008da:	9006      	str	r0, [sp, #24]
 80008dc:	9107      	str	r1, [sp, #28]
 80008de:	f001 f9cd 	bl	8001c7c <__aeabi_d2uiz>
 80008e2:	0006      	movs	r6, r0
  diff = tmp - frac;
 80008e4:	f002 f96a 	bl	8002bbc <__aeabi_ui2d>
 80008e8:	0002      	movs	r2, r0
 80008ea:	000b      	movs	r3, r1
 80008ec:	9806      	ldr	r0, [sp, #24]
 80008ee:	9907      	ldr	r1, [sp, #28]
 80008f0:	f001 fd6c 	bl	80023cc <__aeabi_dsub>
 80008f4:	9006      	str	r0, [sp, #24]
 80008f6:	9107      	str	r1, [sp, #28]
  if (diff > 0.5) {
 80008f8:	2200      	movs	r2, #0
 80008fa:	4b6c      	ldr	r3, [pc, #432]	; (8000aac <_ftoa+0x334>)
 80008fc:	f001 f9aa 	bl	8001c54 <__aeabi_dcmpgt>
 8000900:	2800      	cmp	r0, #0
 8000902:	d02e      	beq.n	8000962 <_ftoa+0x1ea>
    ++frac;
 8000904:	3601      	adds	r6, #1
    if (frac >= pow10[prec]) {
 8000906:	0030      	movs	r0, r6
 8000908:	f002 f958 	bl	8002bbc <__aeabi_ui2d>
 800090c:	0002      	movs	r2, r0
 800090e:	000b      	movs	r3, r1
 8000910:	9808      	ldr	r0, [sp, #32]
 8000912:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000914:	f001 f994 	bl	8001c40 <__aeabi_dcmple>
 8000918:	2800      	cmp	r0, #0
 800091a:	d001      	beq.n	8000920 <_ftoa+0x1a8>
      ++whole;
 800091c:	3701      	adds	r7, #1
      frac = 0;
 800091e:	2600      	movs	r6, #0
  if (prec == 0U) {
 8000920:	2d00      	cmp	r5, #0
 8000922:	d12c      	bne.n	800097e <_ftoa+0x206>
    diff = value - (double)whole;
 8000924:	0038      	movs	r0, r7
 8000926:	f002 f919 	bl	8002b5c <__aeabi_i2d>
 800092a:	0002      	movs	r2, r0
 800092c:	000b      	movs	r3, r1
 800092e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8000930:	991d      	ldr	r1, [sp, #116]	; 0x74
 8000932:	f001 fd4b 	bl	80023cc <__aeabi_dsub>
 8000936:	0005      	movs	r5, r0
 8000938:	000e      	movs	r6, r1
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800093a:	2200      	movs	r2, #0
 800093c:	4b5b      	ldr	r3, [pc, #364]	; (8000aac <_ftoa+0x334>)
 800093e:	f001 f975 	bl	8001c2c <__aeabi_dcmplt>
 8000942:	2800      	cmp	r0, #0
 8000944:	d007      	beq.n	8000956 <_ftoa+0x1de>
 8000946:	2200      	movs	r2, #0
 8000948:	4b58      	ldr	r3, [pc, #352]	; (8000aac <_ftoa+0x334>)
 800094a:	0028      	movs	r0, r5
 800094c:	0031      	movs	r1, r6
 800094e:	f001 f981 	bl	8001c54 <__aeabi_dcmpgt>
 8000952:	2800      	cmp	r0, #0
 8000954:	d03e      	beq.n	80009d4 <_ftoa+0x25c>
 8000956:	07fb      	lsls	r3, r7, #31
 8000958:	d53c      	bpl.n	80009d4 <_ftoa+0x25c>
      ++whole;
 800095a:	3701      	adds	r7, #1
 800095c:	e03a      	b.n	80009d4 <_ftoa+0x25c>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800095e:	2506      	movs	r5, #6
 8000960:	e750      	b.n	8000804 <_ftoa+0x8c>
  else if (diff < 0.5) {
 8000962:	2200      	movs	r2, #0
 8000964:	4b51      	ldr	r3, [pc, #324]	; (8000aac <_ftoa+0x334>)
 8000966:	9806      	ldr	r0, [sp, #24]
 8000968:	9907      	ldr	r1, [sp, #28]
 800096a:	f001 f95f 	bl	8001c2c <__aeabi_dcmplt>
 800096e:	2800      	cmp	r0, #0
 8000970:	d1d6      	bne.n	8000920 <_ftoa+0x1a8>
  else if ((frac == 0U) || (frac & 1U)) {
 8000972:	2e00      	cmp	r6, #0
 8000974:	d001      	beq.n	800097a <_ftoa+0x202>
 8000976:	07f3      	lsls	r3, r6, #31
 8000978:	d5d2      	bpl.n	8000920 <_ftoa+0x1a8>
    ++frac;
 800097a:	3601      	adds	r6, #1
 800097c:	e7d0      	b.n	8000920 <_ftoa+0x1a8>
 800097e:	46b8      	mov	r8, r7
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8000980:	2c1f      	cmp	r4, #31
 8000982:	d811      	bhi.n	80009a8 <_ftoa+0x230>
      --count;
 8000984:	3d01      	subs	r5, #1
      buf[len++] = (char)(48U + (frac % 10U));
 8000986:	210a      	movs	r1, #10
 8000988:	0030      	movs	r0, r6
 800098a:	f001 f849 	bl	8001a20 <__aeabi_uidivmod>
 800098e:	1c67      	adds	r7, r4, #1
 8000990:	3130      	adds	r1, #48	; 0x30
 8000992:	ab0a      	add	r3, sp, #40	; 0x28
 8000994:	5519      	strb	r1, [r3, r4]
      if (!(frac /= 10U)) {
 8000996:	210a      	movs	r1, #10
 8000998:	0030      	movs	r0, r6
 800099a:	f000 ffbb 	bl	8001914 <__udivsi3>
 800099e:	2e09      	cmp	r6, #9
 80009a0:	d90e      	bls.n	80009c0 <_ftoa+0x248>
 80009a2:	0006      	movs	r6, r0
      buf[len++] = (char)(48U + (frac % 10U));
 80009a4:	003c      	movs	r4, r7
 80009a6:	e7eb      	b.n	8000980 <_ftoa+0x208>
 80009a8:	4647      	mov	r7, r8
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80009aa:	2c1f      	cmp	r4, #31
 80009ac:	d80c      	bhi.n	80009c8 <_ftoa+0x250>
 80009ae:	1e6b      	subs	r3, r5, #1
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d009      	beq.n	80009c8 <_ftoa+0x250>
      buf[len++] = '0';
 80009b4:	aa0a      	add	r2, sp, #40	; 0x28
 80009b6:	2130      	movs	r1, #48	; 0x30
 80009b8:	5511      	strb	r1, [r2, r4]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80009ba:	001d      	movs	r5, r3
      buf[len++] = '0';
 80009bc:	3401      	adds	r4, #1
 80009be:	e7f4      	b.n	80009aa <_ftoa+0x232>
 80009c0:	003b      	movs	r3, r7
 80009c2:	4647      	mov	r7, r8
      buf[len++] = (char)(48U + (frac % 10U));
 80009c4:	001c      	movs	r4, r3
 80009c6:	e7f0      	b.n	80009aa <_ftoa+0x232>
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80009c8:	2c1f      	cmp	r4, #31
 80009ca:	d803      	bhi.n	80009d4 <_ftoa+0x25c>
      buf[len++] = '.';
 80009cc:	ab0a      	add	r3, sp, #40	; 0x28
 80009ce:	222e      	movs	r2, #46	; 0x2e
 80009d0:	551a      	strb	r2, [r3, r4]
 80009d2:	3401      	adds	r4, #1
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80009d4:	2c1f      	cmp	r4, #31
 80009d6:	d810      	bhi.n	80009fa <_ftoa+0x282>
    buf[len++] = (char)(48 + (whole % 10));
 80009d8:	210a      	movs	r1, #10
 80009da:	0038      	movs	r0, r7
 80009dc:	f001 f90a 	bl	8001bf4 <__aeabi_idivmod>
 80009e0:	1c65      	adds	r5, r4, #1
 80009e2:	3130      	adds	r1, #48	; 0x30
 80009e4:	ab0a      	add	r3, sp, #40	; 0x28
 80009e6:	5519      	strb	r1, [r3, r4]
    if (!(whole /= 10)) {
 80009e8:	210a      	movs	r1, #10
 80009ea:	0038      	movs	r0, r7
 80009ec:	f001 f81c 	bl	8001a28 <__divsi3>
 80009f0:	1e07      	subs	r7, r0, #0
 80009f2:	d001      	beq.n	80009f8 <_ftoa+0x280>
    buf[len++] = (char)(48 + (whole % 10));
 80009f4:	002c      	movs	r4, r5
 80009f6:	e7ed      	b.n	80009d4 <_ftoa+0x25c>
 80009f8:	002c      	movs	r4, r5
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80009fa:	2303      	movs	r3, #3
 80009fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80009fe:	4013      	ands	r3, r2
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d016      	beq.n	8000a32 <_ftoa+0x2ba>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8000a04:	2c1f      	cmp	r4, #31
 8000a06:	d806      	bhi.n	8000a16 <_ftoa+0x29e>
    if (negative) {
 8000a08:	464b      	mov	r3, r9
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d027      	beq.n	8000a5e <_ftoa+0x2e6>
      buf[len++] = '-';
 8000a0e:	ab0a      	add	r3, sp, #40	; 0x28
 8000a10:	222d      	movs	r2, #45	; 0x2d
 8000a12:	551a      	strb	r2, [r3, r4]
 8000a14:	3401      	adds	r4, #1
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8000a16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8000a18:	9303      	str	r3, [sp, #12]
 8000a1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000a1c:	9302      	str	r3, [sp, #8]
 8000a1e:	9401      	str	r4, [sp, #4]
 8000a20:	ab0a      	add	r3, sp, #40	; 0x28
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	465b      	mov	r3, fp
 8000a26:	4652      	mov	r2, sl
 8000a28:	9905      	ldr	r1, [sp, #20]
 8000a2a:	9804      	ldr	r0, [sp, #16]
 8000a2c:	f7ff fd67 	bl	80004fe <_out_rev>
 8000a30:	e71e      	b.n	8000870 <_ftoa+0xf8>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8000a32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d008      	beq.n	8000a4a <_ftoa+0x2d2>
 8000a38:	464b      	mov	r3, r9
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d102      	bne.n	8000a44 <_ftoa+0x2cc>
 8000a3e:	330c      	adds	r3, #12
 8000a40:	4213      	tst	r3, r2
 8000a42:	d002      	beq.n	8000a4a <_ftoa+0x2d2>
      width--;
 8000a44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000a46:	3b01      	subs	r3, #1
 8000a48:	931f      	str	r3, [sp, #124]	; 0x7c
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8000a4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000a4c:	429c      	cmp	r4, r3
 8000a4e:	d2d9      	bcs.n	8000a04 <_ftoa+0x28c>
 8000a50:	2c1f      	cmp	r4, #31
 8000a52:	d8d7      	bhi.n	8000a04 <_ftoa+0x28c>
      buf[len++] = '0';
 8000a54:	ab0a      	add	r3, sp, #40	; 0x28
 8000a56:	2230      	movs	r2, #48	; 0x30
 8000a58:	551a      	strb	r2, [r3, r4]
 8000a5a:	3401      	adds	r4, #1
 8000a5c:	e7f5      	b.n	8000a4a <_ftoa+0x2d2>
    else if (flags & FLAGS_PLUS) {
 8000a5e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8000a60:	075b      	lsls	r3, r3, #29
 8000a62:	d504      	bpl.n	8000a6e <_ftoa+0x2f6>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8000a64:	ab0a      	add	r3, sp, #40	; 0x28
 8000a66:	222b      	movs	r2, #43	; 0x2b
 8000a68:	551a      	strb	r2, [r3, r4]
 8000a6a:	3401      	adds	r4, #1
 8000a6c:	e7d3      	b.n	8000a16 <_ftoa+0x29e>
    else if (flags & FLAGS_SPACE) {
 8000a6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8000a70:	071b      	lsls	r3, r3, #28
 8000a72:	d5d0      	bpl.n	8000a16 <_ftoa+0x29e>
      buf[len++] = ' ';
 8000a74:	ab0a      	add	r3, sp, #40	; 0x28
 8000a76:	2220      	movs	r2, #32
 8000a78:	551a      	strb	r2, [r3, r4]
 8000a7a:	3401      	adds	r4, #1
 8000a7c:	e7cb      	b.n	8000a16 <_ftoa+0x29e>
    return 0U;
 8000a7e:	2000      	movs	r0, #0
 8000a80:	e6f6      	b.n	8000870 <_ftoa+0xf8>
 8000a82:	2000      	movs	r0, #0
 8000a84:	e6f4      	b.n	8000870 <_ftoa+0xf8>
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	ffefffff 	.word	0xffefffff
 8000a8c:	7fefffff 	.word	0x7fefffff
 8000a90:	41cdcd65 	.word	0x41cdcd65
 8000a94:	c1cdcd65 	.word	0xc1cdcd65
 8000a98:	08002cdc 	.word	0x08002cdc
 8000a9c:	08002ce0 	.word	0x08002ce0
 8000aa0:	08002cd4 	.word	0x08002cd4
 8000aa4:	08002cd0 	.word	0x08002cd0
 8000aa8:	08002e80 	.word	0x08002e80
 8000aac:	3fe00000 	.word	0x3fe00000

08000ab0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT



int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8000ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ab2:	46de      	mov	lr, fp
 8000ab4:	4657      	mov	r7, sl
 8000ab6:	464e      	mov	r6, r9
 8000ab8:	4645      	mov	r5, r8
 8000aba:	b5e0      	push	{r5, r6, r7, lr}
 8000abc:	b08b      	sub	sp, #44	; 0x2c
 8000abe:	0006      	movs	r6, r0
 8000ac0:	468a      	mov	sl, r1
 8000ac2:	4691      	mov	r9, r2
 8000ac4:	9309      	str	r3, [sp, #36]	; 0x24
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 8000ac6:	2900      	cmp	r1, #0
 8000ac8:	d100      	bne.n	8000acc <_vsnprintf+0x1c>
 8000aca:	e269      	b.n	8000fa0 <_vsnprintf+0x4f0>
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        format++;
        break;
 8000acc:	2400      	movs	r4, #0
  while (*format)
 8000ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ad0:	7818      	ldrb	r0, [r3, #0]
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	d100      	bne.n	8000ad8 <_vsnprintf+0x28>
 8000ad6:	e265      	b.n	8000fa4 <_vsnprintf+0x4f4>
    if (*format != '%') {
 8000ad8:	2825      	cmp	r0, #37	; 0x25
 8000ada:	d009      	beq.n	8000af0 <_vsnprintf+0x40>
      out(*format, buffer, idx++, maxlen);
 8000adc:	1c65      	adds	r5, r4, #1
 8000ade:	464b      	mov	r3, r9
 8000ae0:	0022      	movs	r2, r4
 8000ae2:	4651      	mov	r1, sl
 8000ae4:	47b0      	blx	r6
      format++;
 8000ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ae8:	3301      	adds	r3, #1
 8000aea:	9309      	str	r3, [sp, #36]	; 0x24
      out(*format, buffer, idx++, maxlen);
 8000aec:	002c      	movs	r4, r5
      continue;
 8000aee:	e7ee      	b.n	8000ace <_vsnprintf+0x1e>
      format++;
 8000af0:	3301      	adds	r3, #1
 8000af2:	9309      	str	r3, [sp, #36]	; 0x24
    flags = 0U;
 8000af4:	2500      	movs	r5, #0
 8000af6:	e02d      	b.n	8000b54 <_vsnprintf+0xa4>
  return (ch >= '0') && (ch <= '9');
 8000af8:	000b      	movs	r3, r1
 8000afa:	3b30      	subs	r3, #48	; 0x30
 8000afc:	b2db      	uxtb	r3, r3
    if (_is_digit(*format)) {
 8000afe:	2b09      	cmp	r3, #9
 8000b00:	d947      	bls.n	8000b92 <_vsnprintf+0xe2>
    else if (*format == '*') {
 8000b02:	292a      	cmp	r1, #42	; 0x2a
 8000b04:	d04a      	beq.n	8000b9c <_vsnprintf+0xec>
    width = 0U;
 8000b06:	2300      	movs	r3, #0
 8000b08:	9306      	str	r3, [sp, #24]
    if (*format == '.') {
 8000b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b0c:	781a      	ldrb	r2, [r3, #0]
 8000b0e:	2a2e      	cmp	r2, #46	; 0x2e
 8000b10:	d054      	beq.n	8000bbc <_vsnprintf+0x10c>
    precision = 0U;
 8000b12:	2300      	movs	r3, #0
 8000b14:	469b      	mov	fp, r3
    switch (*format) {
 8000b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b18:	7813      	ldrb	r3, [r2, #0]
 8000b1a:	2b6c      	cmp	r3, #108	; 0x6c
 8000b1c:	d078      	beq.n	8000c10 <_vsnprintf+0x160>
 8000b1e:	d86f      	bhi.n	8000c00 <_vsnprintf+0x150>
 8000b20:	2b68      	cmp	r3, #104	; 0x68
 8000b22:	d100      	bne.n	8000b26 <_vsnprintf+0x76>
 8000b24:	e084      	b.n	8000c30 <_vsnprintf+0x180>
 8000b26:	2b6a      	cmp	r3, #106	; 0x6a
 8000b28:	d104      	bne.n	8000b34 <_vsnprintf+0x84>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	431d      	orrs	r5, r3
        format++;
 8000b30:	3201      	adds	r2, #1
 8000b32:	9209      	str	r2, [sp, #36]	; 0x24
    switch (*format) {
 8000b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b36:	7818      	ldrb	r0, [r3, #0]
 8000b38:	0003      	movs	r3, r0
 8000b3a:	3b25      	subs	r3, #37	; 0x25
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	2a53      	cmp	r2, #83	; 0x53
 8000b40:	d900      	bls.n	8000b44 <_vsnprintf+0x94>
 8000b42:	e223      	b.n	8000f8c <_vsnprintf+0x4dc>
 8000b44:	0093      	lsls	r3, r2, #2
 8000b46:	4acb      	ldr	r2, [pc, #812]	; (8000e74 <_vsnprintf+0x3c4>)
 8000b48:	58d3      	ldr	r3, [r2, r3]
 8000b4a:	469f      	mov	pc, r3
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	431d      	orrs	r5, r3
 8000b50:	3201      	adds	r2, #1
 8000b52:	9209      	str	r2, [sp, #36]	; 0x24
      switch (*format) {
 8000b54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b56:	7811      	ldrb	r1, [r2, #0]
 8000b58:	000b      	movs	r3, r1
 8000b5a:	3b20      	subs	r3, #32
 8000b5c:	b2d8      	uxtb	r0, r3
 8000b5e:	2810      	cmp	r0, #16
 8000b60:	d8ca      	bhi.n	8000af8 <_vsnprintf+0x48>
 8000b62:	0083      	lsls	r3, r0, #2
 8000b64:	48c4      	ldr	r0, [pc, #784]	; (8000e78 <_vsnprintf+0x3c8>)
 8000b66:	58c3      	ldr	r3, [r0, r3]
 8000b68:	469f      	mov	pc, r3
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	431d      	orrs	r5, r3
 8000b6e:	3201      	adds	r2, #1
 8000b70:	9209      	str	r2, [sp, #36]	; 0x24
    } while (n);
 8000b72:	e7ef      	b.n	8000b54 <_vsnprintf+0xa4>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8000b74:	2304      	movs	r3, #4
 8000b76:	431d      	orrs	r5, r3
 8000b78:	3201      	adds	r2, #1
 8000b7a:	9209      	str	r2, [sp, #36]	; 0x24
    } while (n);
 8000b7c:	e7ea      	b.n	8000b54 <_vsnprintf+0xa4>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8000b7e:	2308      	movs	r3, #8
 8000b80:	431d      	orrs	r5, r3
 8000b82:	3201      	adds	r2, #1
 8000b84:	9209      	str	r2, [sp, #36]	; 0x24
    } while (n);
 8000b86:	e7e5      	b.n	8000b54 <_vsnprintf+0xa4>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	431d      	orrs	r5, r3
 8000b8c:	3201      	adds	r2, #1
 8000b8e:	9209      	str	r2, [sp, #36]	; 0x24
    } while (n);
 8000b90:	e7e0      	b.n	8000b54 <_vsnprintf+0xa4>
      width = _atoi(&format);
 8000b92:	a809      	add	r0, sp, #36	; 0x24
 8000b94:	f7ff fca1 	bl	80004da <_atoi>
 8000b98:	9006      	str	r0, [sp, #24]
 8000b9a:	e7b6      	b.n	8000b0a <_vsnprintf+0x5a>
      const int w = va_arg(va, int);
 8000b9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000b9e:	1d1a      	adds	r2, r3, #4
 8000ba0:	9214      	str	r2, [sp, #80]	; 0x50
 8000ba2:	6818      	ldr	r0, [r3, #0]
      if (w < 0) {
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	db04      	blt.n	8000bb2 <_vsnprintf+0x102>
        width = (unsigned int)w;
 8000ba8:	9006      	str	r0, [sp, #24]
      format++;
 8000baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000bac:	3301      	adds	r3, #1
 8000bae:	9309      	str	r3, [sp, #36]	; 0x24
 8000bb0:	e7ab      	b.n	8000b0a <_vsnprintf+0x5a>
        flags |= FLAGS_LEFT;    // reverse padding
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	431d      	orrs	r5, r3
        width = (unsigned int)-w;
 8000bb6:	4243      	negs	r3, r0
 8000bb8:	9306      	str	r3, [sp, #24]
 8000bba:	e7f6      	b.n	8000baa <_vsnprintf+0xfa>
      flags |= FLAGS_PRECISION;
 8000bbc:	2280      	movs	r2, #128	; 0x80
 8000bbe:	00d2      	lsls	r2, r2, #3
 8000bc0:	4315      	orrs	r5, r2
      format++;
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	9209      	str	r2, [sp, #36]	; 0x24
      if (_is_digit(*format)) {
 8000bc6:	785a      	ldrb	r2, [r3, #1]
  return (ch >= '0') && (ch <= '9');
 8000bc8:	0013      	movs	r3, r2
 8000bca:	3b30      	subs	r3, #48	; 0x30
 8000bcc:	b2db      	uxtb	r3, r3
      if (_is_digit(*format)) {
 8000bce:	2b09      	cmp	r3, #9
 8000bd0:	d904      	bls.n	8000bdc <_vsnprintf+0x12c>
      else if (*format == '*') {
 8000bd2:	2a2a      	cmp	r2, #42	; 0x2a
 8000bd4:	d007      	beq.n	8000be6 <_vsnprintf+0x136>
    precision = 0U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	469b      	mov	fp, r3
 8000bda:	e79c      	b.n	8000b16 <_vsnprintf+0x66>
        precision = _atoi(&format);
 8000bdc:	a809      	add	r0, sp, #36	; 0x24
 8000bde:	f7ff fc7c 	bl	80004da <_atoi>
 8000be2:	4683      	mov	fp, r0
 8000be4:	e797      	b.n	8000b16 <_vsnprintf+0x66>
        const int prec = (int)va_arg(va, int);
 8000be6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000be8:	1d1a      	adds	r2, r3, #4
 8000bea:	9214      	str	r2, [sp, #80]	; 0x50
 8000bec:	6818      	ldr	r0, [r3, #0]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8000bee:	2800      	cmp	r0, #0
 8000bf0:	db04      	blt.n	8000bfc <_vsnprintf+0x14c>
 8000bf2:	4683      	mov	fp, r0
        format++;
 8000bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8000bfa:	e78c      	b.n	8000b16 <_vsnprintf+0x66>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	e7f8      	b.n	8000bf2 <_vsnprintf+0x142>
    switch (*format) {
 8000c00:	2b7a      	cmp	r3, #122	; 0x7a
 8000c02:	d197      	bne.n	8000b34 <_vsnprintf+0x84>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	431d      	orrs	r5, r3
        format++;
 8000c0a:	3201      	adds	r2, #1
 8000c0c:	9209      	str	r2, [sp, #36]	; 0x24
        break;
 8000c0e:	e791      	b.n	8000b34 <_vsnprintf+0x84>
        flags |= FLAGS_LONG;
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	432b      	orrs	r3, r5
        format++;
 8000c16:	1c51      	adds	r1, r2, #1
 8000c18:	9109      	str	r1, [sp, #36]	; 0x24
        if (*format == 'l') {
 8000c1a:	7852      	ldrb	r2, [r2, #1]
 8000c1c:	2a6c      	cmp	r2, #108	; 0x6c
 8000c1e:	d001      	beq.n	8000c24 <_vsnprintf+0x174>
        flags |= FLAGS_LONG;
 8000c20:	001d      	movs	r5, r3
 8000c22:	e787      	b.n	8000b34 <_vsnprintf+0x84>
          flags |= FLAGS_LONG_LONG;
 8000c24:	23c0      	movs	r3, #192	; 0xc0
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	431d      	orrs	r5, r3
          format++;
 8000c2a:	3101      	adds	r1, #1
 8000c2c:	9109      	str	r1, [sp, #36]	; 0x24
 8000c2e:	e781      	b.n	8000b34 <_vsnprintf+0x84>
        flags |= FLAGS_SHORT;
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	432b      	orrs	r3, r5
        format++;
 8000c34:	1c51      	adds	r1, r2, #1
 8000c36:	9109      	str	r1, [sp, #36]	; 0x24
        if (*format == 'h') {
 8000c38:	7852      	ldrb	r2, [r2, #1]
 8000c3a:	2a68      	cmp	r2, #104	; 0x68
 8000c3c:	d001      	beq.n	8000c42 <_vsnprintf+0x192>
        flags |= FLAGS_SHORT;
 8000c3e:	001d      	movs	r5, r3
 8000c40:	e778      	b.n	8000b34 <_vsnprintf+0x84>
          flags |= FLAGS_CHAR;
 8000c42:	23c0      	movs	r3, #192	; 0xc0
 8000c44:	431d      	orrs	r5, r3
          format++;
 8000c46:	3101      	adds	r1, #1
 8000c48:	9109      	str	r1, [sp, #36]	; 0x24
 8000c4a:	e773      	b.n	8000b34 <_vsnprintf+0x84>
        if (*format == 'x' || *format == 'X') {
 8000c4c:	2878      	cmp	r0, #120	; 0x78
 8000c4e:	d009      	beq.n	8000c64 <_vsnprintf+0x1b4>
 8000c50:	2858      	cmp	r0, #88	; 0x58
 8000c52:	d035      	beq.n	8000cc0 <_vsnprintf+0x210>
        else if (*format == 'o') {
 8000c54:	286f      	cmp	r0, #111	; 0x6f
 8000c56:	d035      	beq.n	8000cc4 <_vsnprintf+0x214>
        else if (*format == 'b') {
 8000c58:	2862      	cmp	r0, #98	; 0x62
 8000c5a:	d035      	beq.n	8000cc8 <_vsnprintf+0x218>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8000c5c:	2310      	movs	r3, #16
 8000c5e:	439d      	bics	r5, r3
          base = 10U;
 8000c60:	3b06      	subs	r3, #6
 8000c62:	e000      	b.n	8000c66 <_vsnprintf+0x1b6>
          base = 16U;
 8000c64:	2310      	movs	r3, #16
        if (*format == 'X') {
 8000c66:	2858      	cmp	r0, #88	; 0x58
 8000c68:	d030      	beq.n	8000ccc <_vsnprintf+0x21c>
        if ((*format != 'i') && (*format != 'd')) {
 8000c6a:	2869      	cmp	r0, #105	; 0x69
 8000c6c:	d003      	beq.n	8000c76 <_vsnprintf+0x1c6>
 8000c6e:	2864      	cmp	r0, #100	; 0x64
 8000c70:	d001      	beq.n	8000c76 <_vsnprintf+0x1c6>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8000c72:	220c      	movs	r2, #12
 8000c74:	4395      	bics	r5, r2
        if (flags & FLAGS_PRECISION) {
 8000c76:	056a      	lsls	r2, r5, #21
 8000c78:	d501      	bpl.n	8000c7e <_vsnprintf+0x1ce>
          flags &= ~FLAGS_ZEROPAD;
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4395      	bics	r5, r2
        if ((*format == 'i') || (*format == 'd')) {
 8000c7e:	2869      	cmp	r0, #105	; 0x69
 8000c80:	d027      	beq.n	8000cd2 <_vsnprintf+0x222>
 8000c82:	2864      	cmp	r0, #100	; 0x64
 8000c84:	d025      	beq.n	8000cd2 <_vsnprintf+0x222>
          if (flags & FLAGS_LONG_LONG) {
 8000c86:	05aa      	lsls	r2, r5, #22
 8000c88:	d442      	bmi.n	8000d10 <_vsnprintf+0x260>
          else if (flags & FLAGS_LONG) {
 8000c8a:	05ea      	lsls	r2, r5, #23
 8000c8c:	d469      	bmi.n	8000d62 <_vsnprintf+0x2b2>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8000c8e:	066a      	lsls	r2, r5, #25
 8000c90:	d57c      	bpl.n	8000d8c <_vsnprintf+0x2dc>
 8000c92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000c94:	1d11      	adds	r1, r2, #4
 8000c96:	9114      	str	r1, [sp, #80]	; 0x50
 8000c98:	6811      	ldr	r1, [r2, #0]
 8000c9a:	22ff      	movs	r2, #255	; 0xff
 8000c9c:	400a      	ands	r2, r1
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8000c9e:	9505      	str	r5, [sp, #20]
 8000ca0:	9906      	ldr	r1, [sp, #24]
 8000ca2:	9104      	str	r1, [sp, #16]
 8000ca4:	4659      	mov	r1, fp
 8000ca6:	9103      	str	r1, [sp, #12]
 8000ca8:	9302      	str	r3, [sp, #8]
 8000caa:	2300      	movs	r3, #0
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	9200      	str	r2, [sp, #0]
 8000cb0:	464b      	mov	r3, r9
 8000cb2:	0022      	movs	r2, r4
 8000cb4:	4651      	mov	r1, sl
 8000cb6:	0030      	movs	r0, r6
 8000cb8:	f7ff fd00 	bl	80006bc <_ntoa_long>
 8000cbc:	0004      	movs	r4, r0
 8000cbe:	e027      	b.n	8000d10 <_vsnprintf+0x260>
          base = 16U;
 8000cc0:	2310      	movs	r3, #16
 8000cc2:	e7d0      	b.n	8000c66 <_vsnprintf+0x1b6>
          base =  8U;
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	e7ce      	b.n	8000c66 <_vsnprintf+0x1b6>
          base =  2U;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	e7cc      	b.n	8000c66 <_vsnprintf+0x1b6>
          flags |= FLAGS_UPPERCASE;
 8000ccc:	2220      	movs	r2, #32
 8000cce:	4315      	orrs	r5, r2
 8000cd0:	e7cb      	b.n	8000c6a <_vsnprintf+0x1ba>
          if (flags & FLAGS_LONG_LONG) {
 8000cd2:	05aa      	lsls	r2, r5, #22
 8000cd4:	d41c      	bmi.n	8000d10 <_vsnprintf+0x260>
          else if (flags & FLAGS_LONG) {
 8000cd6:	05ea      	lsls	r2, r5, #23
 8000cd8:	d41e      	bmi.n	8000d18 <_vsnprintf+0x268>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8000cda:	066a      	lsls	r2, r5, #25
 8000cdc:	d534      	bpl.n	8000d48 <_vsnprintf+0x298>
 8000cde:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000ce0:	1d11      	adds	r1, r2, #4
 8000ce2:	9114      	str	r1, [sp, #80]	; 0x50
 8000ce4:	6811      	ldr	r1, [r2, #0]
 8000ce6:	22ff      	movs	r2, #255	; 0xff
 8000ce8:	400a      	ands	r2, r1
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8000cea:	17d0      	asrs	r0, r2, #31
 8000cec:	1811      	adds	r1, r2, r0
 8000cee:	4041      	eors	r1, r0
 8000cf0:	9505      	str	r5, [sp, #20]
 8000cf2:	9806      	ldr	r0, [sp, #24]
 8000cf4:	9004      	str	r0, [sp, #16]
 8000cf6:	4658      	mov	r0, fp
 8000cf8:	9003      	str	r0, [sp, #12]
 8000cfa:	9302      	str	r3, [sp, #8]
 8000cfc:	0fd2      	lsrs	r2, r2, #31
 8000cfe:	9201      	str	r2, [sp, #4]
 8000d00:	9100      	str	r1, [sp, #0]
 8000d02:	464b      	mov	r3, r9
 8000d04:	0022      	movs	r2, r4
 8000d06:	4651      	mov	r1, sl
 8000d08:	0030      	movs	r0, r6
 8000d0a:	f7ff fcd7 	bl	80006bc <_ntoa_long>
 8000d0e:	0004      	movs	r4, r0
        format++;
 8000d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d12:	3301      	adds	r3, #1
 8000d14:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8000d16:	e6da      	b.n	8000ace <_vsnprintf+0x1e>
            const long value = va_arg(va, long);
 8000d18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000d1a:	1d11      	adds	r1, r2, #4
 8000d1c:	9114      	str	r1, [sp, #80]	; 0x50
 8000d1e:	6812      	ldr	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8000d20:	17d0      	asrs	r0, r2, #31
 8000d22:	1811      	adds	r1, r2, r0
 8000d24:	4041      	eors	r1, r0
 8000d26:	9505      	str	r5, [sp, #20]
 8000d28:	9806      	ldr	r0, [sp, #24]
 8000d2a:	9004      	str	r0, [sp, #16]
 8000d2c:	4658      	mov	r0, fp
 8000d2e:	9003      	str	r0, [sp, #12]
 8000d30:	9302      	str	r3, [sp, #8]
 8000d32:	0fd2      	lsrs	r2, r2, #31
 8000d34:	9201      	str	r2, [sp, #4]
 8000d36:	9100      	str	r1, [sp, #0]
 8000d38:	464b      	mov	r3, r9
 8000d3a:	0022      	movs	r2, r4
 8000d3c:	4651      	mov	r1, sl
 8000d3e:	0030      	movs	r0, r6
 8000d40:	f7ff fcbc 	bl	80006bc <_ntoa_long>
 8000d44:	0004      	movs	r4, r0
 8000d46:	e7e3      	b.n	8000d10 <_vsnprintf+0x260>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8000d48:	062a      	lsls	r2, r5, #24
 8000d4a:	d505      	bpl.n	8000d58 <_vsnprintf+0x2a8>
 8000d4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000d4e:	1d11      	adds	r1, r2, #4
 8000d50:	9114      	str	r1, [sp, #80]	; 0x50
 8000d52:	2100      	movs	r1, #0
 8000d54:	5e52      	ldrsh	r2, [r2, r1]
 8000d56:	e7c8      	b.n	8000cea <_vsnprintf+0x23a>
 8000d58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000d5a:	1d11      	adds	r1, r2, #4
 8000d5c:	9114      	str	r1, [sp, #80]	; 0x50
 8000d5e:	6812      	ldr	r2, [r2, #0]
 8000d60:	e7c3      	b.n	8000cea <_vsnprintf+0x23a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8000d62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000d64:	1d11      	adds	r1, r2, #4
 8000d66:	9114      	str	r1, [sp, #80]	; 0x50
 8000d68:	9505      	str	r5, [sp, #20]
 8000d6a:	9906      	ldr	r1, [sp, #24]
 8000d6c:	9104      	str	r1, [sp, #16]
 8000d6e:	4659      	mov	r1, fp
 8000d70:	9103      	str	r1, [sp, #12]
 8000d72:	9302      	str	r3, [sp, #8]
 8000d74:	2300      	movs	r3, #0
 8000d76:	9301      	str	r3, [sp, #4]
 8000d78:	6813      	ldr	r3, [r2, #0]
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	464b      	mov	r3, r9
 8000d7e:	0022      	movs	r2, r4
 8000d80:	4651      	mov	r1, sl
 8000d82:	0030      	movs	r0, r6
 8000d84:	f7ff fc9a 	bl	80006bc <_ntoa_long>
 8000d88:	0004      	movs	r4, r0
 8000d8a:	e7c1      	b.n	8000d10 <_vsnprintf+0x260>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8000d8c:	062a      	lsls	r2, r5, #24
 8000d8e:	d506      	bpl.n	8000d9e <_vsnprintf+0x2ee>
 8000d90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000d92:	1d11      	adds	r1, r2, #4
 8000d94:	9114      	str	r1, [sp, #80]	; 0x50
 8000d96:	6812      	ldr	r2, [r2, #0]
 8000d98:	0412      	lsls	r2, r2, #16
 8000d9a:	0c12      	lsrs	r2, r2, #16
 8000d9c:	e77f      	b.n	8000c9e <_vsnprintf+0x1ee>
 8000d9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000da0:	1d11      	adds	r1, r2, #4
 8000da2:	9114      	str	r1, [sp, #80]	; 0x50
 8000da4:	6812      	ldr	r2, [r2, #0]
 8000da6:	e77a      	b.n	8000c9e <_vsnprintf+0x1ee>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8000da8:	2846      	cmp	r0, #70	; 0x46
 8000daa:	d01a      	beq.n	8000de2 <_vsnprintf+0x332>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8000dac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000dae:	3307      	adds	r3, #7
 8000db0:	2207      	movs	r2, #7
 8000db2:	4393      	bics	r3, r2
 8000db4:	001a      	movs	r2, r3
 8000db6:	3208      	adds	r2, #8
 8000db8:	9214      	str	r2, [sp, #80]	; 0x50
 8000dba:	9504      	str	r5, [sp, #16]
 8000dbc:	9a06      	ldr	r2, [sp, #24]
 8000dbe:	9203      	str	r2, [sp, #12]
 8000dc0:	465a      	mov	r2, fp
 8000dc2:	9202      	str	r2, [sp, #8]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	9200      	str	r2, [sp, #0]
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	464b      	mov	r3, r9
 8000dce:	0022      	movs	r2, r4
 8000dd0:	4651      	mov	r1, sl
 8000dd2:	0030      	movs	r0, r6
 8000dd4:	f7ff fcd0 	bl	8000778 <_ftoa>
 8000dd8:	0004      	movs	r4, r0
        format++;
 8000dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ddc:	3301      	adds	r3, #1
 8000dde:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8000de0:	e675      	b.n	8000ace <_vsnprintf+0x1e>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8000de2:	2320      	movs	r3, #32
 8000de4:	431d      	orrs	r5, r3
 8000de6:	e7e1      	b.n	8000dac <_vsnprintf+0x2fc>
        if (!(flags & FLAGS_LEFT)) {
 8000de8:	2302      	movs	r3, #2
 8000dea:	001a      	movs	r2, r3
 8000dec:	402a      	ands	r2, r5
 8000dee:	4693      	mov	fp, r2
 8000df0:	422b      	tst	r3, r5
 8000df2:	d01e      	beq.n	8000e32 <_vsnprintf+0x382>
        unsigned int l = 1U;
 8000df4:	2501      	movs	r5, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8000df6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000df8:	1d1a      	adds	r2, r3, #4
 8000dfa:	9214      	str	r2, [sp, #80]	; 0x50
 8000dfc:	1c62      	adds	r2, r4, #1
 8000dfe:	4690      	mov	r8, r2
 8000e00:	7818      	ldrb	r0, [r3, #0]
 8000e02:	464b      	mov	r3, r9
 8000e04:	0022      	movs	r2, r4
 8000e06:	4651      	mov	r1, sl
 8000e08:	47b0      	blx	r6
        if (flags & FLAGS_LEFT) {
 8000e0a:	465b      	mov	r3, fp
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d114      	bne.n	8000e3a <_vsnprintf+0x38a>
        format++;
 8000e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e12:	3301      	adds	r3, #1
 8000e14:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8000e16:	4644      	mov	r4, r8
 8000e18:	e659      	b.n	8000ace <_vsnprintf+0x1e>
            out(' ', buffer, idx++, maxlen);
 8000e1a:	1c57      	adds	r7, r2, #1
 8000e1c:	464b      	mov	r3, r9
 8000e1e:	4651      	mov	r1, sl
 8000e20:	2020      	movs	r0, #32
 8000e22:	47b0      	blx	r6
          while (l++ < width) {
 8000e24:	002b      	movs	r3, r5
            out(' ', buffer, idx++, maxlen);
 8000e26:	003a      	movs	r2, r7
          while (l++ < width) {
 8000e28:	1c5d      	adds	r5, r3, #1
 8000e2a:	429c      	cmp	r4, r3
 8000e2c:	d8f5      	bhi.n	8000e1a <_vsnprintf+0x36a>
 8000e2e:	0014      	movs	r4, r2
 8000e30:	e7e1      	b.n	8000df6 <_vsnprintf+0x346>
        unsigned int l = 1U;
 8000e32:	2301      	movs	r3, #1
 8000e34:	0022      	movs	r2, r4
 8000e36:	9c06      	ldr	r4, [sp, #24]
 8000e38:	e7f6      	b.n	8000e28 <_vsnprintf+0x378>
 8000e3a:	4642      	mov	r2, r8
 8000e3c:	46b0      	mov	r8, r6
 8000e3e:	9e06      	ldr	r6, [sp, #24]
 8000e40:	e006      	b.n	8000e50 <_vsnprintf+0x3a0>
            out(' ', buffer, idx++, maxlen);
 8000e42:	1c57      	adds	r7, r2, #1
 8000e44:	464b      	mov	r3, r9
 8000e46:	4651      	mov	r1, sl
 8000e48:	2020      	movs	r0, #32
 8000e4a:	47c0      	blx	r8
          while (l++ < width) {
 8000e4c:	0025      	movs	r5, r4
            out(' ', buffer, idx++, maxlen);
 8000e4e:	003a      	movs	r2, r7
          while (l++ < width) {
 8000e50:	1c6c      	adds	r4, r5, #1
 8000e52:	42ae      	cmp	r6, r5
 8000e54:	d8f5      	bhi.n	8000e42 <_vsnprintf+0x392>
 8000e56:	4646      	mov	r6, r8
 8000e58:	4690      	mov	r8, r2
 8000e5a:	e7d9      	b.n	8000e10 <_vsnprintf+0x360>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8000e5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000e5e:	1d1a      	adds	r2, r3, #4
 8000e60:	9214      	str	r2, [sp, #80]	; 0x50
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4698      	mov	r8, r3
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8000e66:	465b      	mov	r3, fp
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d100      	bne.n	8000e6e <_vsnprintf+0x3be>
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	4647      	mov	r7, r8
 8000e70:	e006      	b.n	8000e80 <_vsnprintf+0x3d0>
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	08002ce8 	.word	0x08002ce8
 8000e78:	08002e38 	.word	0x08002e38
  for (s = str; *s && maxsize--; ++s);
 8000e7c:	3701      	adds	r7, #1
 8000e7e:	0013      	movs	r3, r2
 8000e80:	783a      	ldrb	r2, [r7, #0]
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d002      	beq.n	8000e8c <_vsnprintf+0x3dc>
 8000e86:	1e5a      	subs	r2, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1f7      	bne.n	8000e7c <_vsnprintf+0x3cc>
  return (unsigned int)(s - str);
 8000e8c:	4643      	mov	r3, r8
 8000e8e:	1afa      	subs	r2, r7, r3
 8000e90:	9207      	str	r2, [sp, #28]
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8000e92:	2380      	movs	r3, #128	; 0x80
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	002f      	movs	r7, r5
 8000e98:	401f      	ands	r7, r3
 8000e9a:	421d      	tst	r5, r3
 8000e9c:	d003      	beq.n	8000ea6 <_vsnprintf+0x3f6>
          l = (l < precision ? l : precision);
 8000e9e:	455a      	cmp	r2, fp
 8000ea0:	d901      	bls.n	8000ea6 <_vsnprintf+0x3f6>
 8000ea2:	465b      	mov	r3, fp
 8000ea4:	9307      	str	r3, [sp, #28]
        }
        if (!(flags & FLAGS_LEFT)) {
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	402a      	ands	r2, r5
 8000eac:	9208      	str	r2, [sp, #32]
 8000eae:	422b      	tst	r3, r5
 8000eb0:	d005      	beq.n	8000ebe <_vsnprintf+0x40e>
 8000eb2:	0022      	movs	r2, r4
 8000eb4:	465c      	mov	r4, fp
 8000eb6:	4645      	mov	r5, r8
 8000eb8:	46b0      	mov	r8, r6
 8000eba:	003e      	movs	r6, r7
 8000ebc:	e020      	b.n	8000f00 <_vsnprintf+0x450>
 8000ebe:	0022      	movs	r2, r4
 8000ec0:	9b07      	ldr	r3, [sp, #28]
 8000ec2:	4651      	mov	r1, sl
 8000ec4:	46ba      	mov	sl, r7
 8000ec6:	000f      	movs	r7, r1
 8000ec8:	e006      	b.n	8000ed8 <_vsnprintf+0x428>
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
 8000eca:	1c54      	adds	r4, r2, #1
 8000ecc:	464b      	mov	r3, r9
 8000ece:	0039      	movs	r1, r7
 8000ed0:	2020      	movs	r0, #32
 8000ed2:	47b0      	blx	r6
          while (l++ < width) {
 8000ed4:	002b      	movs	r3, r5
            out(' ', buffer, idx++, maxlen);
 8000ed6:	0022      	movs	r2, r4
          while (l++ < width) {
 8000ed8:	1c5d      	adds	r5, r3, #1
 8000eda:	9906      	ldr	r1, [sp, #24]
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d8f4      	bhi.n	8000eca <_vsnprintf+0x41a>
 8000ee0:	003b      	movs	r3, r7
 8000ee2:	4657      	mov	r7, sl
 8000ee4:	469a      	mov	sl, r3
 8000ee6:	9507      	str	r5, [sp, #28]
 8000ee8:	465c      	mov	r4, fp
 8000eea:	4645      	mov	r5, r8
 8000eec:	46b0      	mov	r8, r6
 8000eee:	003e      	movs	r6, r7
 8000ef0:	e006      	b.n	8000f00 <_vsnprintf+0x450>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8000ef2:	001c      	movs	r4, r3
          out(*(p++), buffer, idx++, maxlen);
 8000ef4:	3501      	adds	r5, #1
 8000ef6:	1c57      	adds	r7, r2, #1
 8000ef8:	464b      	mov	r3, r9
 8000efa:	4651      	mov	r1, sl
 8000efc:	47c0      	blx	r8
 8000efe:	003a      	movs	r2, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8000f00:	7828      	ldrb	r0, [r5, #0]
 8000f02:	2800      	cmp	r0, #0
 8000f04:	d004      	beq.n	8000f10 <_vsnprintf+0x460>
 8000f06:	2e00      	cmp	r6, #0
 8000f08:	d0f4      	beq.n	8000ef4 <_vsnprintf+0x444>
 8000f0a:	1e63      	subs	r3, r4, #1
 8000f0c:	2c00      	cmp	r4, #0
 8000f0e:	d1f0      	bne.n	8000ef2 <_vsnprintf+0x442>
 8000f10:	0014      	movs	r4, r2
 8000f12:	4646      	mov	r6, r8
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8000f14:	9b08      	ldr	r3, [sp, #32]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d103      	bne.n	8000f22 <_vsnprintf+0x472>
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        format++;
 8000f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8000f20:	e5d5      	b.n	8000ace <_vsnprintf+0x1e>
 8000f22:	9f06      	ldr	r7, [sp, #24]
 8000f24:	9b07      	ldr	r3, [sp, #28]
 8000f26:	e006      	b.n	8000f36 <_vsnprintf+0x486>
            out(' ', buffer, idx++, maxlen);
 8000f28:	1c55      	adds	r5, r2, #1
 8000f2a:	464b      	mov	r3, r9
 8000f2c:	4651      	mov	r1, sl
 8000f2e:	2020      	movs	r0, #32
 8000f30:	47b0      	blx	r6
          while (l++ < width) {
 8000f32:	0023      	movs	r3, r4
            out(' ', buffer, idx++, maxlen);
 8000f34:	002a      	movs	r2, r5
          while (l++ < width) {
 8000f36:	1c5c      	adds	r4, r3, #1
 8000f38:	429f      	cmp	r7, r3
 8000f3a:	d8f5      	bhi.n	8000f28 <_vsnprintf+0x478>
 8000f3c:	0014      	movs	r4, r2
 8000f3e:	e7ec      	b.n	8000f1a <_vsnprintf+0x46a>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8000f40:	2321      	movs	r3, #33	; 0x21
 8000f42:	431d      	orrs	r5, r3
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8000f44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000f46:	1d1a      	adds	r2, r3, #4
 8000f48:	9214      	str	r2, [sp, #80]	; 0x50
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	9505      	str	r5, [sp, #20]
 8000f50:	2308      	movs	r3, #8
 8000f52:	9304      	str	r3, [sp, #16]
 8000f54:	465b      	mov	r3, fp
 8000f56:	9303      	str	r3, [sp, #12]
 8000f58:	2310      	movs	r3, #16
 8000f5a:	9302      	str	r3, [sp, #8]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	464b      	mov	r3, r9
 8000f62:	0022      	movs	r2, r4
 8000f64:	4651      	mov	r1, sl
 8000f66:	0030      	movs	r0, r6
 8000f68:	f7ff fba8 	bl	80006bc <_ntoa_long>
 8000f6c:	0004      	movs	r4, r0
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8000f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f70:	3301      	adds	r3, #1
 8000f72:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8000f74:	e5ab      	b.n	8000ace <_vsnprintf+0x1e>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8000f76:	1c65      	adds	r5, r4, #1
 8000f78:	464b      	mov	r3, r9
 8000f7a:	0022      	movs	r2, r4
 8000f7c:	4651      	mov	r1, sl
 8000f7e:	2025      	movs	r0, #37	; 0x25
 8000f80:	47b0      	blx	r6
        format++;
 8000f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f84:	3301      	adds	r3, #1
 8000f86:	9309      	str	r3, [sp, #36]	; 0x24
        out('%', buffer, idx++, maxlen);
 8000f88:	002c      	movs	r4, r5
        break;
 8000f8a:	e5a0      	b.n	8000ace <_vsnprintf+0x1e>

      default :
        out(*format, buffer, idx++, maxlen);
 8000f8c:	1c65      	adds	r5, r4, #1
 8000f8e:	464b      	mov	r3, r9
 8000f90:	0022      	movs	r2, r4
 8000f92:	4651      	mov	r1, sl
 8000f94:	47b0      	blx	r6
        format++;
 8000f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f98:	3301      	adds	r3, #1
 8000f9a:	9309      	str	r3, [sp, #36]	; 0x24
        out(*format, buffer, idx++, maxlen);
 8000f9c:	002c      	movs	r4, r5
        break;
 8000f9e:	e596      	b.n	8000ace <_vsnprintf+0x1e>
    out = _out_null;
 8000fa0:	4e04      	ldr	r6, [pc, #16]	; (8000fb4 <_vsnprintf+0x504>)
 8000fa2:	e593      	b.n	8000acc <_vsnprintf+0x1c>
  // termination
  // out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
}
 8000fa4:	0020      	movs	r0, r4
 8000fa6:	b00b      	add	sp, #44	; 0x2c
 8000fa8:	bcf0      	pop	{r4, r5, r6, r7}
 8000faa:	46bb      	mov	fp, r7
 8000fac:	46b2      	mov	sl, r6
 8000fae:	46a9      	mov	r9, r5
 8000fb0:	46a0      	mov	r8, r4
 8000fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb4:	080004d9 	.word	0x080004d9

08000fb8 <spi_read_single>:
 * 
 * @param reg Register to read
 * @retval Value read from register
 */
static uint8_t spi_read_single(uint8_t reg)
{
 8000fb8:	b570      	push	{r4, r5, r6, lr}
 8000fba:	0004      	movs	r4, r0
  spi_chip_select();
 8000fbc:	25a0      	movs	r5, #160	; 0xa0
 8000fbe:	05ed      	lsls	r5, r5, #23
 8000fc0:	2140      	movs	r1, #64	; 0x40
 8000fc2:	0028      	movs	r0, r5
 8000fc4:	f000 fa14 	bl	80013f0 <gpio_clear>
  timers_delay_microseconds(1);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f000 f8c5 	bl	8001158 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, reg);                   
 8000fce:	b2a1      	uxth	r1, r4
 8000fd0:	4c08      	ldr	r4, [pc, #32]	; (8000ff4 <spi_read_single+0x3c>)
 8000fd2:	0020      	movs	r0, r4
 8000fd4:	f000 fbb8 	bl	8001748 <spi_xfer>
  uint8_t in =  spi_xfer(RFM_SPI, 0x00);                   
 8000fd8:	2100      	movs	r1, #0
 8000fda:	0020      	movs	r0, r4
 8000fdc:	f000 fbb4 	bl	8001748 <spi_xfer>
 8000fe0:	b2c4      	uxtb	r4, r0
    
  spi_chip_deselect(); 
 8000fe2:	2140      	movs	r1, #64	; 0x40
 8000fe4:	0028      	movs	r0, r5
 8000fe6:	f000 fa01 	bl	80013ec <gpio_set>
  timers_delay_microseconds(1);
 8000fea:	2001      	movs	r0, #1
 8000fec:	f000 f8b4 	bl	8001158 <timers_delay_microseconds>

  return in;
}
 8000ff0:	0020      	movs	r0, r4
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	40003800 	.word	0x40003800

08000ff8 <spi_write_single>:
  spi_chip_deselect();     
  timers_delay_microseconds(1);
}

static void spi_write_single(uint8_t reg, uint8_t data)
{
 8000ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ffa:	0005      	movs	r5, r0
 8000ffc:	000e      	movs	r6, r1
  // Set MSB for write operation
  uint8_t cmd = 0x80 | reg;
 8000ffe:	2480      	movs	r4, #128	; 0x80
 8001000:	4264      	negs	r4, r4
 8001002:	4304      	orrs	r4, r0
 8001004:	b2e4      	uxtb	r4, r4

  spi_chip_select();
 8001006:	27a0      	movs	r7, #160	; 0xa0
 8001008:	05ff      	lsls	r7, r7, #23
 800100a:	2140      	movs	r1, #64	; 0x40
 800100c:	0038      	movs	r0, r7
 800100e:	f000 f9ef 	bl	80013f0 <gpio_clear>
  timers_delay_microseconds(1);
 8001012:	2001      	movs	r0, #1
 8001014:	f000 f8a0 	bl	8001158 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, cmd);                 
 8001018:	b2a1      	uxth	r1, r4
 800101a:	4c15      	ldr	r4, [pc, #84]	; (8001070 <spi_write_single+0x78>)
 800101c:	0020      	movs	r0, r4
 800101e:	f000 fb93 	bl	8001748 <spi_xfer>
  spi_xfer(RFM_SPI, data);             
 8001022:	b2b1      	uxth	r1, r6
 8001024:	0020      	movs	r0, r4
 8001026:	f000 fb8f 	bl	8001748 <spi_xfer>

  spi_chip_deselect(); 
 800102a:	2140      	movs	r1, #64	; 0x40
 800102c:	0038      	movs	r0, r7
 800102e:	f000 f9dd 	bl	80013ec <gpio_set>
  timers_delay_microseconds(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f000 f890 	bl	8001158 <timers_delay_microseconds>

  uint8_t curr_data = spi_read_single(reg);
 8001038:	0028      	movs	r0, r5
 800103a:	f7ff ffbd 	bl	8000fb8 <spi_read_single>
 800103e:	0004      	movs	r4, r0

  // log_printf(MAIN, "%02x : %02x\n", reg, data);

  if(reg == RFM_REG_12_IRQ_FLAGS)    
 8001040:	2d12      	cmp	r5, #18
 8001042:	d013      	beq.n	800106c <spi_write_single+0x74>
    return;

  TIMEOUT(10000, "RFM SPI Write", ((reg << 16) | data), (curr_data == data), ;, timers_delay_microseconds(100); curr_data = spi_read_single(reg););
 8001044:	f000 f8da 	bl	80011fc <timeout_init>
 8001048:	042a      	lsls	r2, r5, #16
 800104a:	4332      	orrs	r2, r6
 800104c:	4909      	ldr	r1, [pc, #36]	; (8001074 <spi_write_single+0x7c>)
 800104e:	480a      	ldr	r0, [pc, #40]	; (8001078 <spi_write_single+0x80>)
 8001050:	f000 f8e2 	bl	8001218 <timeout>
 8001054:	2800      	cmp	r0, #0
 8001056:	d109      	bne.n	800106c <spi_write_single+0x74>
 8001058:	42b4      	cmp	r4, r6
 800105a:	d007      	beq.n	800106c <spi_write_single+0x74>
 800105c:	2064      	movs	r0, #100	; 0x64
 800105e:	f000 f87b 	bl	8001158 <timers_delay_microseconds>
 8001062:	0028      	movs	r0, r5
 8001064:	f7ff ffa8 	bl	8000fb8 <spi_read_single>
 8001068:	0004      	movs	r4, r0
 800106a:	e7ed      	b.n	8001048 <spi_write_single+0x50>

  // log_printf(MAIN, "%02x : %02x : %02x\n", reg, data, curr_data);
}
 800106c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	40003800 	.word	0x40003800
 8001074:	08002ed0 	.word	0x08002ed0
 8001078:	00002710 	.word	0x00002710

0800107c <exti4_15_isr>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void exti4_15_isr(void)
{
 800107c:	b570      	push	{r4, r5, r6, lr}
  uint16_t timer = timers_micros();
 800107e:	f000 f881 	bl	8001184 <timers_micros>
  
  exti_reset_request(RFM_IO_0_EXTI);
 8001082:	2480      	movs	r4, #128	; 0x80
 8001084:	00e4      	lsls	r4, r4, #3
 8001086:	0020      	movs	r0, r4
 8001088:	f000 f98c 	bl	80013a4 <exti_reset_request>
  exti_reset_request(RFM_IO_0_EXTI);
 800108c:	0020      	movs	r0, r4
 800108e:	f000 f989 	bl	80013a4 <exti_reset_request>

  // Store IRQ Flags
  packets_buf[packets_head].flags = get_irq();
 8001092:	4d1b      	ldr	r5, [pc, #108]	; (8001100 <exti4_15_isr+0x84>)
 8001094:	782e      	ldrb	r6, [r5, #0]
  return spi_read_single(RFM_REG_12_IRQ_FLAGS);
 8001096:	2012      	movs	r0, #18
 8001098:	f7ff ff8e 	bl	8000fb8 <spi_read_single>
  packets_buf[packets_head].flags = get_irq();
 800109c:	4c19      	ldr	r4, [pc, #100]	; (8001104 <exti4_15_isr+0x88>)
 800109e:	0073      	lsls	r3, r6, #1
 80010a0:	199b      	adds	r3, r3, r6
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	18e3      	adds	r3, r4, r3
 80010a6:	7418      	strb	r0, [r3, #16]
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 80010a8:	21ff      	movs	r1, #255	; 0xff
 80010aa:	2012      	movs	r0, #18
 80010ac:	f7ff ffa4 	bl	8000ff8 <spi_write_single>
 80010b0:	21ff      	movs	r1, #255	; 0xff
 80010b2:	2012      	movs	r0, #18
 80010b4:	f7ff ffa0 	bl	8000ff8 <spi_write_single>
  clear_irq(RFM_IRQ_ALL);
  clear_irq(RFM_IRQ_ALL);

  // Get signal strength
  packets_buf[packets_head].rssi = spi_read_single(RFM_REG_1A_PKT_RSSI_VALUE);
 80010b8:	201a      	movs	r0, #26
 80010ba:	f7ff ff7d 	bl	8000fb8 <spi_read_single>
 80010be:	782a      	ldrb	r2, [r5, #0]
 80010c0:	b200      	sxth	r0, r0
  packets_buf[packets_head].rssi -= 137;
 80010c2:	0053      	lsls	r3, r2, #1
 80010c4:	189b      	adds	r3, r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	18e3      	adds	r3, r4, r3
 80010ca:	3889      	subs	r0, #137	; 0x89
 80010cc:	8298      	strh	r0, [r3, #20]
  packets_buf[packets_head].snr = spi_read_single(RFM_REG_19_PKT_SNR_VALUE) / 4;
 80010ce:	2019      	movs	r0, #25
 80010d0:	f7ff ff72 	bl	8000fb8 <spi_read_single>
 80010d4:	782b      	ldrb	r3, [r5, #0]
 80010d6:	005a      	lsls	r2, r3, #1
 80010d8:	18d2      	adds	r2, r2, r3
 80010da:	00d2      	lsls	r2, r2, #3
 80010dc:	18a4      	adds	r4, r4, r2
 80010de:	0880      	lsrs	r0, r0, #2
 80010e0:	74a0      	strb	r0, [r4, #18]

  // Check for CRC error
  packets_buf[packets_head].crc_ok = !(packets_buf[packets_head].flags & RFM_IRQ_PAYLOAD_CRC_ERROR);
 80010e2:	7c22      	ldrb	r2, [r4, #16]
 80010e4:	0952      	lsrs	r2, r2, #5
 80010e6:	2101      	movs	r1, #1
 80010e8:	404a      	eors	r2, r1
 80010ea:	2101      	movs	r1, #1
 80010ec:	400a      	ands	r2, r1
 80010ee:	7462      	strb	r2, [r4, #17]

  packets_head = (packets_head + 1) % PACKETS_BUF_SIZE;
 80010f0:	3301      	adds	r3, #1
 80010f2:	220f      	movs	r2, #15
 80010f4:	4013      	ands	r3, r2
 80010f6:	702b      	strb	r3, [r5, #0]

  uint16_t time = timers_micros() - timer;
 80010f8:	f000 f844 	bl	8001184 <timers_micros>
  // log_printf(MAIN, "ISR %u %u %u\n", time, packets_head, packets_tail);
}
 80010fc:	bd70      	pop	{r4, r5, r6, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	200002a4 	.word	0x200002a4
 8001104:	20000124 	.word	0x20000124

08001108 <timers_lptim_init>:
}


// Setup lptim1 as approx. microsecond counter
void timers_lptim_init(void)
{
 8001108:	b510      	push	{r4, lr}
    // Input clock is 2.097Mhz
    rcc_set_peripheral_clk_sel(LPTIM1, RCC_CCIPR_LPTIM1SEL_APB);
 800110a:	4c10      	ldr	r4, [pc, #64]	; (800114c <timers_lptim_init+0x44>)
 800110c:	2100      	movs	r1, #0
 800110e:	0020      	movs	r0, r4
 8001110:	f000 faae 	bl	8001670 <rcc_set_peripheral_clk_sel>
 
    rcc_periph_clock_enable(RCC_LPTIM1);
 8001114:	480e      	ldr	r0, [pc, #56]	; (8001150 <timers_lptim_init+0x48>)
 8001116:	f000 fae1 	bl	80016dc <rcc_periph_clock_enable>
    
    lptimer_set_internal_clock_source(LPTIM1);
 800111a:	0020      	movs	r0, r4
 800111c:	f000 f9f2 	bl	8001504 <lptimer_set_internal_clock_source>
    lptimer_enable_trigger(LPTIM1, LPTIM_CFGR_TRIGEN_SW);
 8001120:	2100      	movs	r1, #0
 8001122:	0020      	movs	r0, r4
 8001124:	f000 f9e4 	bl	80014f0 <lptimer_enable_trigger>
    lptimer_set_prescaler(LPTIM1, LPTIM_CFGR_PRESC_2);
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	0089      	lsls	r1, r1, #2
 800112c:	0020      	movs	r0, r4
 800112e:	f000 f9d7 	bl	80014e0 <lptimer_set_prescaler>
    
    lptimer_enable(LPTIM1);
 8001132:	0020      	movs	r0, r4
 8001134:	f000 f9ca 	bl	80014cc <lptimer_enable>
    
    lptimer_set_period(LPTIM1, 0xffff);
 8001138:	4906      	ldr	r1, [pc, #24]	; (8001154 <timers_lptim_init+0x4c>)
 800113a:	0020      	movs	r0, r4
 800113c:	f000 f9e0 	bl	8001500 <lptimer_set_period>
    
    lptimer_start_counter(LPTIM1, LPTIM_CR_CNTSTRT);
 8001140:	2104      	movs	r1, #4
 8001142:	0020      	movs	r0, r4
 8001144:	f000 f9c7 	bl	80014d6 <lptimer_start_counter>
}
 8001148:	bd10      	pop	{r4, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	40007c00 	.word	0x40007c00
 8001150:	0000071f 	.word	0x0000071f
 8001154:	0000ffff 	.word	0x0000ffff

08001158 <timers_delay_microseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_microseconds(uint32_t delay_microseconds)
{
 8001158:	b570      	push	{r4, r5, r6, lr}
 800115a:	0004      	movs	r4, r0
    uint32_t curr_time = lptimer_get_counter(LPTIM1);
 800115c:	4807      	ldr	r0, [pc, #28]	; (800117c <timers_delay_microseconds+0x24>)
 800115e:	f000 f9b2 	bl	80014c6 <lptimer_get_counter>
 8001162:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_microseconds > 65000)
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <timers_delay_microseconds+0x28>)
 8001166:	429c      	cmp	r4, r3
 8001168:	d900      	bls.n	800116c <timers_delay_microseconds+0x14>
        delay_microseconds = 65000;
 800116a:	001c      	movs	r4, r3

    while (lptimer_get_counter(LPTIM1) - curr_time < delay_microseconds);
 800116c:	4803      	ldr	r0, [pc, #12]	; (800117c <timers_delay_microseconds+0x24>)
 800116e:	f000 f9aa 	bl	80014c6 <lptimer_get_counter>
 8001172:	1b40      	subs	r0, r0, r5
 8001174:	42a0      	cmp	r0, r4
 8001176:	d3f9      	bcc.n	800116c <timers_delay_microseconds+0x14>
}
 8001178:	bd70      	pop	{r4, r5, r6, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	40007c00 	.word	0x40007c00
 8001180:	0000fde8 	.word	0x0000fde8

08001184 <timers_micros>:
}
*/

// Returns value of microsecond counter
uint16_t timers_micros(void)
{
 8001184:	b510      	push	{r4, lr}
    return (uint16_t)lptimer_get_counter(LPTIM1);
 8001186:	4802      	ldr	r0, [pc, #8]	; (8001190 <timers_micros+0xc>)
 8001188:	f000 f99d 	bl	80014c6 <lptimer_get_counter>
}
 800118c:	bd10      	pop	{r4, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	40007c00 	.word	0x40007c00

08001194 <timers_tim6_init>:


// Setup TIM6 as millisecond counter. Clocked by APB1
void timers_tim6_init(void)
{
 8001194:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_TIM6);
 8001196:	4808      	ldr	r0, [pc, #32]	; (80011b8 <timers_tim6_init+0x24>)
 8001198:	f000 faa0 	bl	80016dc <rcc_periph_clock_enable>
    timer_disable_counter(TIM6);
 800119c:	4c07      	ldr	r4, [pc, #28]	; (80011bc <timers_tim6_init+0x28>)
 800119e:	0020      	movs	r0, r4
 80011a0:	f000 fadf 	bl	8001762 <timer_disable_counter>
    timer_set_prescaler(TIM6, (2097 - 1));
 80011a4:	2183      	movs	r1, #131	; 0x83
 80011a6:	0109      	lsls	r1, r1, #4
 80011a8:	0020      	movs	r0, r4
 80011aa:	f000 fadf 	bl	800176c <timer_set_prescaler>
    timer_enable_counter(TIM6);
 80011ae:	0020      	movs	r0, r4
 80011b0:	f000 fad2 	bl	8001758 <timer_enable_counter>
}
 80011b4:	bd10      	pop	{r4, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	00000704 	.word	0x00000704
 80011bc:	40001000 	.word	0x40001000

080011c0 <timers_delay_milliseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_milliseconds(uint32_t delay_milliseconds)
{
 80011c0:	b570      	push	{r4, r5, r6, lr}
 80011c2:	0004      	movs	r4, r0
    uint32_t curr_time = timer_get_counter(TIM6);
 80011c4:	4807      	ldr	r0, [pc, #28]	; (80011e4 <timers_delay_milliseconds+0x24>)
 80011c6:	f000 fad3 	bl	8001770 <timer_get_counter>
 80011ca:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_milliseconds > 65000)
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <timers_delay_milliseconds+0x28>)
 80011ce:	429c      	cmp	r4, r3
 80011d0:	d900      	bls.n	80011d4 <timers_delay_milliseconds+0x14>
        delay_milliseconds = 65000;
 80011d2:	001c      	movs	r4, r3

    while (timer_get_counter(TIM6) - curr_time < delay_milliseconds);
 80011d4:	4803      	ldr	r0, [pc, #12]	; (80011e4 <timers_delay_milliseconds+0x24>)
 80011d6:	f000 facb 	bl	8001770 <timer_get_counter>
 80011da:	1b40      	subs	r0, r0, r5
 80011dc:	42a0      	cmp	r0, r4
 80011de:	d3f9      	bcc.n	80011d4 <timers_delay_milliseconds+0x14>
}
 80011e0:	bd70      	pop	{r4, r5, r6, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	40001000 	.word	0x40001000
 80011e8:	0000fde8 	.word	0x0000fde8

080011ec <timers_millis>:

// Returns value of millisecond counter
uint16_t timers_millis(void)
{
 80011ec:	b510      	push	{r4, lr}
    return timer_get_counter(TIM6);
 80011ee:	4802      	ldr	r0, [pc, #8]	; (80011f8 <timers_millis+0xc>)
 80011f0:	f000 fabe 	bl	8001770 <timer_get_counter>
 80011f4:	b280      	uxth	r0, r0
}
 80011f6:	bd10      	pop	{r4, pc}
 80011f8:	40001000 	.word	0x40001000

080011fc <timeout_init>:
}


// Timout functions
void timeout_init(void)
{
 80011fc:	b510      	push	{r4, lr}
    timeout_counter     = 0; 
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <timeout_init+0x14>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
    // timeout_counter     = 2140483648; 
    timeout_timer       = timers_micros(); 
 8001204:	f7ff ffbe 	bl	8001184 <timers_micros>
 8001208:	4b02      	ldr	r3, [pc, #8]	; (8001214 <timeout_init+0x18>)
 800120a:	8018      	strh	r0, [r3, #0]
}
 800120c:	bd10      	pop	{r4, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	200002a8 	.word	0x200002a8
 8001214:	200002ac 	.word	0x200002ac

08001218 <timeout>:

bool timeout(uint32_t time_microseconds, char *msg, uint32_t data)
{
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	b083      	sub	sp, #12
 800121c:	0006      	movs	r6, r0
 800121e:	9101      	str	r1, [sp, #4]
 8001220:	0015      	movs	r5, r2
    timeout_counter    += (uint16_t)(timers_micros() - timeout_timer);
 8001222:	f7ff ffaf 	bl	8001184 <timers_micros>
 8001226:	4c0d      	ldr	r4, [pc, #52]	; (800125c <timeout+0x44>)
 8001228:	8823      	ldrh	r3, [r4, #0]
 800122a:	1ac3      	subs	r3, r0, r3
 800122c:	b29b      	uxth	r3, r3
 800122e:	4f0c      	ldr	r7, [pc, #48]	; (8001260 <timeout+0x48>)
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	4694      	mov	ip, r2
 8001234:	4463      	add	r3, ip
 8001236:	603b      	str	r3, [r7, #0]
    timeout_timer       = timers_micros();
 8001238:	f7ff ffa4 	bl	8001184 <timers_micros>
 800123c:	8020      	strh	r0, [r4, #0]

    // log_printf(MAIN, "%u\n", timeout_counter);

    if(timeout_counter > time_microseconds)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	42b3      	cmp	r3, r6
 8001242:	d802      	bhi.n	800124a <timeout+0x32>
    {
        log_printf(MAIN, "Timeout %s %08X\n", msg, data);
        return true;
    }
    else    
        return false;
 8001244:	2000      	movs	r0, #0
}
 8001246:	b003      	add	sp, #12
 8001248:	bdf0      	pop	{r4, r5, r6, r7, pc}
        log_printf(MAIN, "Timeout %s %08X\n", msg, data);
 800124a:	002b      	movs	r3, r5
 800124c:	9a01      	ldr	r2, [sp, #4]
 800124e:	4905      	ldr	r1, [pc, #20]	; (8001264 <timeout+0x4c>)
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff f8f5 	bl	8000440 <log_printf>
        return true;
 8001256:	2001      	movs	r0, #1
 8001258:	e7f5      	b.n	8001246 <timeout+0x2e>
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	200002ac 	.word	0x200002ac
 8001260:	200002a8 	.word	0x200002a8
 8001264:	08002ee0 	.word	0x08002ee0

08001268 <set_gpio_for_standby>:

void set_gpio_for_standby(void)
{   
 8001268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Common
    // LED
    gpio_mode_setup(LED_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, LED);
 800126a:	2680      	movs	r6, #128	; 0x80
 800126c:	0076      	lsls	r6, r6, #1
 800126e:	4c36      	ldr	r4, [pc, #216]	; (8001348 <set_gpio_for_standby+0xe0>)
 8001270:	0033      	movs	r3, r6
 8001272:	2200      	movs	r2, #0
 8001274:	2103      	movs	r1, #3
 8001276:	0020      	movs	r0, r4
 8001278:	f000 f8bd 	bl	80013f6 <gpio_mode_setup>
    gpio_set(LED_PORT, LED);
 800127c:	0031      	movs	r1, r6
 800127e:	0020      	movs	r0, r4
 8001280:	f000 f8b4 	bl	80013ec <gpio_set>

    // Serial Print
    gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, SPF_USART_TX);
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	25a0      	movs	r5, #160	; 0xa0
 8001288:	05ed      	lsls	r5, r5, #23
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	2201      	movs	r2, #1
 800128e:	2100      	movs	r1, #0
 8001290:	0028      	movs	r0, r5
 8001292:	f000 f8b0 	bl	80013f6 <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE,  SPF_USART_RX);
 8001296:	2780      	movs	r7, #128	; 0x80
 8001298:	00ff      	lsls	r7, r7, #3
 800129a:	003b      	movs	r3, r7
 800129c:	2200      	movs	r2, #0
 800129e:	2101      	movs	r1, #1
 80012a0:	0028      	movs	r0, r5
 80012a2:	f000 f8a8 	bl	80013f6 <gpio_mode_setup>
	gpio_set(SPF_USART_RX_PORT, SPF_USART_RX);
 80012a6:	0039      	movs	r1, r7
 80012a8:	0028      	movs	r0, r5
 80012aa:	f000 f89f 	bl	80013ec <gpio_set>

    // Batt Sense
    gpio_mode_setup(BATT_SENS_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, BATT_SENS);
 80012ae:	2301      	movs	r3, #1
 80012b0:	2200      	movs	r2, #0
 80012b2:	2103      	movs	r1, #3
 80012b4:	0028      	movs	r0, r5
 80012b6:	f000 f89e 	bl	80013f6 <gpio_mode_setup>
    
    // RFM
    // SPI
    gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_ANALOG,   GPIO_PUPD_NONE,       RFM_SPI_MISO);
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	01db      	lsls	r3, r3, #7
 80012be:	2200      	movs	r2, #0
 80012c0:	2103      	movs	r1, #3
 80012c2:	0020      	movs	r0, r4
 80012c4:	f000 f897 	bl	80013f6 <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_SCK_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_SCK);
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	019b      	lsls	r3, r3, #6
 80012cc:	2202      	movs	r2, #2
 80012ce:	2100      	movs	r1, #0
 80012d0:	0020      	movs	r0, r4
 80012d2:	f000 f890 	bl	80013f6 <gpio_mode_setup>
    gpio_mode_setup(RFM_SPI_MOSI_PORT,  GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_MOSI);
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	2202      	movs	r2, #2
 80012dc:	2100      	movs	r1, #0
 80012de:	0020      	movs	r0, r4
 80012e0:	f000 f889 	bl	80013f6 <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_NSS_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_SPI_NSS);
 80012e4:	2340      	movs	r3, #64	; 0x40
 80012e6:	2201      	movs	r2, #1
 80012e8:	2100      	movs	r1, #0
 80012ea:	0028      	movs	r0, r5
 80012ec:	f000 f883 	bl	80013f6 <gpio_mode_setup>
    gpio_mode_setup(RFM_RESET_PORT,     GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_RESET);
 80012f0:	2310      	movs	r3, #16
 80012f2:	2201      	movs	r2, #1
 80012f4:	2100      	movs	r1, #0
 80012f6:	0028      	movs	r0, r5
 80012f8:	f000 f87d 	bl	80013f6 <gpio_mode_setup>

    // DIO
    gpio_mode_setup(RFM_IO_0_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_0);
 80012fc:	003b      	movs	r3, r7
 80012fe:	2200      	movs	r2, #0
 8001300:	2103      	movs	r1, #3
 8001302:	0020      	movs	r0, r4
 8001304:	f000 f877 	bl	80013f6 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_1_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_1);
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	2200      	movs	r2, #0
 800130e:	2103      	movs	r1, #3
 8001310:	0020      	movs	r0, r4
 8001312:	f000 f870 	bl	80013f6 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_2_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_2);
 8001316:	0033      	movs	r3, r6
 8001318:	2200      	movs	r2, #0
 800131a:	2103      	movs	r1, #3
 800131c:	0028      	movs	r0, r5
 800131e:	f000 f86a 	bl	80013f6 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_3_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_3);
 8001322:	2302      	movs	r3, #2
 8001324:	2200      	movs	r2, #0
 8001326:	2103      	movs	r1, #3
 8001328:	0020      	movs	r0, r4
 800132a:	f000 f864 	bl	80013f6 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_4_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_4);
 800132e:	2304      	movs	r3, #4
 8001330:	2200      	movs	r2, #0
 8001332:	2103      	movs	r1, #3
 8001334:	0020      	movs	r0, r4
 8001336:	f000 f85e 	bl	80013f6 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_5_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_5);
 800133a:	2301      	movs	r3, #1
 800133c:	2200      	movs	r2, #0
 800133e:	2103      	movs	r1, #3
 8001340:	0020      	movs	r0, r4
 8001342:	f000 f858 	bl	80013f6 <gpio_mode_setup>
    gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
	gpio_mode_setup(TEMP_I2C_SDA_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SDA);

    #endif

}
 8001346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001348:	50000400 	.word	0x50000400

0800134c <rtc_isr>:

// Override default rtc interrupt handler
void rtc_isr(void)
{ 
 800134c:	b510      	push	{r4, lr}
    exti_reset_request(EXTI20);
 800134e:	2080      	movs	r0, #128	; 0x80
 8001350:	0340      	lsls	r0, r0, #13
 8001352:	f000 f827 	bl	80013a4 <exti_reset_request>

    // scb_reset_system();

    log_init();
 8001356:	f7ff f867 	bl	8000428 <log_init>
    log_printf(MAIN, "RTC ISR\n");
 800135a:	490d      	ldr	r1, [pc, #52]	; (8001390 <rtc_isr+0x44>)
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff f86f 	bl	8000440 <log_printf>

    if(RTC_ISR & RTC_ISR_WUTF)
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <rtc_isr+0x48>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	055b      	lsls	r3, r3, #21
 8001368:	d400      	bmi.n	800136c <rtc_isr+0x20>
        pwr_clear_standby_flag();
        rtc_lock();
	    pwr_enable_backup_domain_write_protect();
        set_gpio_for_standby();
    }
}
 800136a:	bd10      	pop	{r4, pc}
        pwr_disable_backup_domain_write_protect();
 800136c:	f000 f8d0 	bl	8001510 <pwr_disable_backup_domain_write_protect>
        rtc_unlock();
 8001370:	f000 f9d2 	bl	8001718 <rtc_unlock>
	    rtc_clear_wakeup_flag();
 8001374:	f000 f9de 	bl	8001734 <rtc_clear_wakeup_flag>
        pwr_clear_wakeup_flag();
 8001378:	f000 f8e6 	bl	8001548 <pwr_clear_wakeup_flag>
        pwr_clear_standby_flag();
 800137c:	f000 f8dc 	bl	8001538 <pwr_clear_standby_flag>
        rtc_lock();
 8001380:	f000 f9d2 	bl	8001728 <rtc_lock>
	    pwr_enable_backup_domain_write_protect();
 8001384:	f000 f8ce 	bl	8001524 <pwr_enable_backup_domain_write_protect>
        set_gpio_for_standby();
 8001388:	f7ff ff6e 	bl	8001268 <set_gpio_for_standby>
}
 800138c:	e7ed      	b.n	800136a <rtc_isr+0x1e>
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	08002ef4 	.word	0x08002ef4
 8001394:	4000280c 	.word	0x4000280c

08001398 <adc_start_conversion_regular>:
 * @param[in] adc ADC block register address base @ref adc_reg_base
 */
void adc_start_conversion_regular(uint32_t adc)
{
	/* Start conversion on regular channels. */
	ADC_CR(adc) |= ADC_CR_ADSTART;
 8001398:	2304      	movs	r3, #4
 800139a:	6882      	ldr	r2, [r0, #8]
 800139c:	4313      	orrs	r3, r2
 800139e:	6083      	str	r3, [r0, #8]
}
 80013a0:	4770      	bx	lr
	...

080013a4 <exti_reset_request>:
{
#if defined(EXTI_RPR1) && defined(EXTI_FPR1)
	EXTI_RPR1 = extis;
	EXTI_FPR1 = extis;
#else
	EXTI_PR = extis;
 80013a4:	4b01      	ldr	r3, [pc, #4]	; (80013ac <exti_reset_request+0x8>)
 80013a6:	6018      	str	r0, [r3, #0]
#endif
}
 80013a8:	4770      	bx	lr
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	40010414 	.word	0x40010414

080013b0 <flash_set_ws>:
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 80013b0:	2101      	movs	r1, #1
	reg32 = FLASH_ACR;
 80013b2:	4a03      	ldr	r2, [pc, #12]	; (80013c0 <flash_set_ws+0x10>)
 80013b4:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 80013b6:	438b      	bics	r3, r1
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 80013b8:	4303      	orrs	r3, r0
	FLASH_ACR = reg32;
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	4770      	bx	lr
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	40022000 	.word	0x40022000

080013c4 <flash_unlock_pecr>:
 * yourself.
 * @sa flash_unlock
 */
void flash_unlock_pecr(void)
{
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY1;
 80013c4:	4b02      	ldr	r3, [pc, #8]	; (80013d0 <flash_unlock_pecr+0xc>)
 80013c6:	4a03      	ldr	r2, [pc, #12]	; (80013d4 <flash_unlock_pecr+0x10>)
 80013c8:	601a      	str	r2, [r3, #0]
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY2;
 80013ca:	4a03      	ldr	r2, [pc, #12]	; (80013d8 <flash_unlock_pecr+0x14>)
 80013cc:	601a      	str	r2, [r3, #0]
}
 80013ce:	4770      	bx	lr
 80013d0:	4002200c 	.word	0x4002200c
 80013d4:	89abcdef 	.word	0x89abcdef
 80013d8:	02030405 	.word	0x02030405

080013dc <flash_lock_pecr>:

void flash_lock_pecr(void)
{
	FLASH_PECR |= FLASH_PECR_PELOCK;
 80013dc:	2301      	movs	r3, #1
 80013de:	4a02      	ldr	r2, [pc, #8]	; (80013e8 <flash_lock_pecr+0xc>)
 80013e0:	6811      	ldr	r1, [r2, #0]
 80013e2:	430b      	orrs	r3, r1
 80013e4:	6013      	str	r3, [r2, #0]
}
 80013e6:	4770      	bx	lr
 80013e8:	40022004 	.word	0x40022004

080013ec <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 80013ec:	6181      	str	r1, [r0, #24]
}
 80013ee:	4770      	bx	lr

080013f0 <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 80013f0:	0409      	lsls	r1, r1, #16
 80013f2:	6181      	str	r1, [r0, #24]
}
 80013f4:	4770      	bx	lr

080013f6 <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 80013f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f8:	b085      	sub	sp, #20
 80013fa:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 80013fc:	2703      	movs	r7, #3
	pupd = GPIO_PUPDR(gpioport);
 80013fe:	2100      	movs	r1, #0
{
 8001400:	9202      	str	r2, [sp, #8]
 8001402:	9303      	str	r3, [sp, #12]
	moder = GPIO_MODER(gpioport);
 8001404:	6802      	ldr	r2, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 8001406:	68c3      	ldr	r3, [r0, #12]
		if (!((1 << i) & gpios)) {
 8001408:	9c03      	ldr	r4, [sp, #12]
 800140a:	2501      	movs	r5, #1
 800140c:	410c      	asrs	r4, r1
 800140e:	422c      	tst	r4, r5
 8001410:	d00a      	beq.n	8001428 <gpio_mode_setup+0x32>
		moder &= ~GPIO_MODE_MASK(i);
 8001412:	003d      	movs	r5, r7
 8001414:	004c      	lsls	r4, r1, #1
 8001416:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8001418:	9e01      	ldr	r6, [sp, #4]
		moder &= ~GPIO_MODE_MASK(i);
 800141a:	43aa      	bics	r2, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 800141c:	43ab      	bics	r3, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 800141e:	9d02      	ldr	r5, [sp, #8]
		moder |= GPIO_MODE(i, mode);
 8001420:	40a6      	lsls	r6, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 8001422:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8001424:	4332      	orrs	r2, r6
		pupd |= GPIO_PUPD(i, pull_up_down);
 8001426:	432b      	orrs	r3, r5
	for (i = 0; i < 16; i++) {
 8001428:	3101      	adds	r1, #1
 800142a:	2910      	cmp	r1, #16
 800142c:	d1ec      	bne.n	8001408 <gpio_mode_setup+0x12>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 800142e:	6002      	str	r2, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 8001430:	60c3      	str	r3, [r0, #12]
}
 8001432:	b005      	add	sp, #20
 8001434:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001436 <gpio_set_output_options>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_output_options(uint32_t gpioport, uint8_t otype, uint8_t speed,
			     uint16_t gpios)
{
 8001436:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001438:	9201      	str	r2, [sp, #4]
	uint16_t i;
	uint32_t ospeedr;

	if (otype == 0x1) {
 800143a:	2901      	cmp	r1, #1
 800143c:	d116      	bne.n	800146c <gpio_set_output_options+0x36>
		GPIO_OTYPER(gpioport) |= gpios;
 800143e:	6841      	ldr	r1, [r0, #4]
 8001440:	4319      	orrs	r1, r3
	} else {
		GPIO_OTYPER(gpioport) &= ~gpios;
	}

	ospeedr = GPIO_OSPEEDR(gpioport);
 8001442:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8001444:	2601      	movs	r6, #1
			continue;
		}
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8001446:	2703      	movs	r7, #3
		GPIO_OTYPER(gpioport) &= ~gpios;
 8001448:	6041      	str	r1, [r0, #4]
	ospeedr = GPIO_OSPEEDR(gpioport);
 800144a:	6881      	ldr	r1, [r0, #8]
		if (!((1 << i) & gpios)) {
 800144c:	001d      	movs	r5, r3
 800144e:	4125      	asrs	r5, r4
 8001450:	4235      	tst	r5, r6
 8001452:	d006      	beq.n	8001462 <gpio_set_output_options+0x2c>
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8001454:	003a      	movs	r2, r7
 8001456:	0065      	lsls	r5, r4, #1
 8001458:	40aa      	lsls	r2, r5
 800145a:	4391      	bics	r1, r2
		ospeedr |= GPIO_OSPEED(i, speed);
 800145c:	9a01      	ldr	r2, [sp, #4]
 800145e:	40aa      	lsls	r2, r5
 8001460:	4311      	orrs	r1, r2
	for (i = 0; i < 16; i++) {
 8001462:	3401      	adds	r4, #1
 8001464:	2c10      	cmp	r4, #16
 8001466:	d1f1      	bne.n	800144c <gpio_set_output_options+0x16>
	}

	GPIO_OSPEEDR(gpioport) = ospeedr;
 8001468:	6081      	str	r1, [r0, #8]
}
 800146a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		GPIO_OTYPER(gpioport) &= ~gpios;
 800146c:	6841      	ldr	r1, [r0, #4]
 800146e:	4399      	bics	r1, r3
 8001470:	e7e7      	b.n	8001442 <gpio_set_output_options+0xc>

08001472 <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 8001472:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);
 8001474:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 8001476:	2601      	movs	r6, #1
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 8001478:	270f      	movs	r7, #15
	afrl = GPIO_AFRL(gpioport);
 800147a:	6a04      	ldr	r4, [r0, #32]
{
 800147c:	9100      	str	r1, [sp, #0]
	afrh = GPIO_AFRH(gpioport);
 800147e:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8001480:	9201      	str	r2, [sp, #4]
		if (!((1 << i) & gpios)) {
 8001482:	9d01      	ldr	r5, [sp, #4]
 8001484:	411d      	asrs	r5, r3
 8001486:	4235      	tst	r5, r6
 8001488:	d006      	beq.n	8001498 <gpio_set_af+0x26>
		afrl &= ~GPIO_AFR_MASK(i);
 800148a:	003a      	movs	r2, r7
 800148c:	009d      	lsls	r5, r3, #2
 800148e:	40aa      	lsls	r2, r5
 8001490:	4394      	bics	r4, r2
		afrl |= GPIO_AFR(i, alt_func_num);
 8001492:	9a00      	ldr	r2, [sp, #0]
 8001494:	40aa      	lsls	r2, r5
 8001496:	4314      	orrs	r4, r2
	for (i = 0; i < 8; i++) {
 8001498:	3301      	adds	r3, #1
 800149a:	2b08      	cmp	r3, #8
 800149c:	d1f1      	bne.n	8001482 <gpio_set_af+0x10>
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 800149e:	2601      	movs	r6, #1
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 80014a0:	270f      	movs	r7, #15
		if (!((1 << i) & gpios)) {
 80014a2:	9a01      	ldr	r2, [sp, #4]
 80014a4:	411a      	asrs	r2, r3
 80014a6:	4232      	tst	r2, r6
 80014a8:	d007      	beq.n	80014ba <gpio_set_af+0x48>
		afrh &= ~GPIO_AFR_MASK(i - 8);
 80014aa:	003a      	movs	r2, r7
 80014ac:	009d      	lsls	r5, r3, #2
 80014ae:	3d20      	subs	r5, #32
 80014b0:	40aa      	lsls	r2, r5
 80014b2:	4391      	bics	r1, r2
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 80014b4:	9a00      	ldr	r2, [sp, #0]
 80014b6:	40aa      	lsls	r2, r5
 80014b8:	4311      	orrs	r1, r2
	for (i = 8; i < 16; i++) {
 80014ba:	3301      	adds	r3, #1
 80014bc:	2b10      	cmp	r3, #16
 80014be:	d1f0      	bne.n	80014a2 <gpio_set_af+0x30>
	}

	GPIO_AFRL(gpioport) = afrl;
 80014c0:	6204      	str	r4, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 80014c2:	6241      	str	r1, [r0, #36]	; 0x24
}
 80014c4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080014c6 <lptimer_get_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @returns Counter value.
 */
uint16_t lptimer_get_counter(uint32_t lptimer_peripheral)
{
	return LPTIM_CNT(lptimer_peripheral);
 80014c6:	69c0      	ldr	r0, [r0, #28]
 80014c8:	b280      	uxth	r0, r0
}
 80014ca:	4770      	bx	lr

080014cc <lptimer_enable>:
 *
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 */
void lptimer_enable(uint32_t lptimer_peripheral)
{
	LPTIM_CR(lptimer_peripheral) |= LPTIM_CR_ENABLE;
 80014cc:	2301      	movs	r3, #1
 80014ce:	6902      	ldr	r2, [r0, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	6103      	str	r3, [r0, #16]
}
 80014d4:	4770      	bx	lr

080014d6 <lptimer_start_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] mode lptimer start mode (@ref LPTIM_CR_SNGSTRT or @ref LPTIM_CR_CNTSTRT)
 */
void lptimer_start_counter(uint32_t lptimer_peripheral, uint32_t mode)
{
	LPTIM_CR(lptimer_peripheral) |= mode;
 80014d6:	6903      	ldr	r3, [r0, #16]
 80014d8:	430b      	orrs	r3, r1
 80014da:	6103      	str	r3, [r0, #16]
}
 80014dc:	4770      	bx	lr
	...

080014e0 <lptimer_set_prescaler>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] prescaler Clock prescaler (@ref lptim_cfgr_presc)
 */
void lptimer_set_prescaler(uint32_t lptimer_peripheral, uint32_t prescaler)
{
	uint32_t reg32 = LPTIM_CFGR(lptimer_peripheral);
 80014e0:	68c3      	ldr	r3, [r0, #12]
	reg32 &= ~(LPTIM_CFGR_PRESC_MASK << LPTIM_CFGR_PRESC_SHIFT);
 80014e2:	4a02      	ldr	r2, [pc, #8]	; (80014ec <lptimer_set_prescaler+0xc>)
 80014e4:	4013      	ands	r3, r2
	LPTIM_CFGR(lptimer_peripheral) = reg32 | prescaler;
 80014e6:	430b      	orrs	r3, r1
 80014e8:	60c3      	str	r3, [r0, #12]
}
 80014ea:	4770      	bx	lr
 80014ec:	fffff1ff 	.word	0xfffff1ff

080014f0 <lptimer_enable_trigger>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] trigen Enable Trigger
 */
void lptimer_enable_trigger(uint32_t lptimer_peripheral, uint32_t trigen)
{
	uint32_t reg32 = LPTIM_CFGR(lptimer_peripheral);
 80014f0:	68c3      	ldr	r3, [r0, #12]
	reg32 &= ~(LPTIM_CFGR_TRIGEN_MASK << LPTIM_CFGR_TRIGEN_SHIFT);
 80014f2:	4a02      	ldr	r2, [pc, #8]	; (80014fc <lptimer_enable_trigger+0xc>)
 80014f4:	4013      	ands	r3, r2
	LPTIM_CFGR(lptimer_peripheral) = reg32 | trigen;
 80014f6:	430b      	orrs	r3, r1
 80014f8:	60c3      	str	r3, [r0, #12]
}
 80014fa:	4770      	bx	lr
 80014fc:	fff1ffff 	.word	0xfff1ffff

08001500 <lptimer_set_period>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] period_value Autoreload value. Must be greater that CMP value.
 */
void lptimer_set_period(uint32_t lptimer_peripheral, uint16_t period_value)
{
	LPTIM_ARR(lptimer_peripheral) = period_value;
 8001500:	6181      	str	r1, [r0, #24]
}
 8001502:	4770      	bx	lr

08001504 <lptimer_set_internal_clock_source>:
 *
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 */
void lptimer_set_internal_clock_source(uint32_t lptimer_peripheral)
{
	LPTIM_CFGR(lptimer_peripheral) &= ~LPTIM_CFGR_CKSEL;
 8001504:	2201      	movs	r2, #1
 8001506:	68c3      	ldr	r3, [r0, #12]
 8001508:	4393      	bics	r3, r2
 800150a:	60c3      	str	r3, [r0, #12]
}
 800150c:	4770      	bx	lr
	...

08001510 <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	4a03      	ldr	r2, [pc, #12]	; (8001520 <pwr_disable_backup_domain_write_protect+0x10>)
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	6811      	ldr	r1, [r2, #0]
 8001518:	430b      	orrs	r3, r1
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	4770      	bx	lr
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	40007000 	.word	0x40007000

08001524 <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 8001524:	4a02      	ldr	r2, [pc, #8]	; (8001530 <pwr_enable_backup_domain_write_protect+0xc>)
 8001526:	4903      	ldr	r1, [pc, #12]	; (8001534 <pwr_enable_backup_domain_write_protect+0x10>)
 8001528:	6813      	ldr	r3, [r2, #0]
 800152a:	400b      	ands	r3, r1
 800152c:	6013      	str	r3, [r2, #0]
}
 800152e:	4770      	bx	lr
 8001530:	40007000 	.word	0x40007000
 8001534:	fffffeff 	.word	0xfffffeff

08001538 <pwr_clear_standby_flag>:
This is set when the processor returns from a standby mode.
*/

void pwr_clear_standby_flag(void)
{
	PWR_CR |= PWR_CR_CSBF;
 8001538:	2308      	movs	r3, #8
 800153a:	4a02      	ldr	r2, [pc, #8]	; (8001544 <pwr_clear_standby_flag+0xc>)
 800153c:	6811      	ldr	r1, [r2, #0]
 800153e:	430b      	orrs	r3, r1
 8001540:	6013      	str	r3, [r2, #0]
}
 8001542:	4770      	bx	lr
 8001544:	40007000 	.word	0x40007000

08001548 <pwr_clear_wakeup_flag>:
This is set when the processor receives a wakeup signal.
*/

void pwr_clear_wakeup_flag(void)
{
	PWR_CR |= PWR_CR_CWUF;
 8001548:	2304      	movs	r3, #4
 800154a:	4a02      	ldr	r2, [pc, #8]	; (8001554 <pwr_clear_wakeup_flag+0xc>)
 800154c:	6811      	ldr	r1, [r2, #0]
 800154e:	430b      	orrs	r3, r1
 8001550:	6013      	str	r3, [r2, #0]
}
 8001552:	4770      	bx	lr
 8001554:	40007000 	.word	0x40007000

08001558 <rcc_osc_on>:
uint32_t rcc_ahb_frequency = 2097000;
uint32_t rcc_apb1_frequency = 2097000;
uint32_t rcc_apb2_frequency = 2097000;

void rcc_osc_on(enum rcc_osc osc)
{
 8001558:	b500      	push	{lr}
 800155a:	2806      	cmp	r0, #6
 800155c:	d80b      	bhi.n	8001576 <rcc_osc_on+0x1e>
 800155e:	f000 f9cf 	bl	8001900 <__gnu_thumb1_case_uqi>
 8001562:	1004      	.short	0x1004
 8001564:	1b0b1915 	.word	0x1b0b1915
 8001568:	1d          	.byte	0x1d
 8001569:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <rcc_osc_on+0x48>)
 800156e:	045b      	lsls	r3, r3, #17
 8001570:	6811      	ldr	r1, [r2, #0]
		break;
	case RCC_LSE:
		RCC_CSR |= RCC_CSR_LSEON;
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
 8001572:	430b      	orrs	r3, r1
 8001574:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8001576:	bd00      	pop	{pc}
		RCC_CR |= RCC_CR_MSION;
 8001578:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <rcc_osc_on+0x48>)
		RCC_CSR |= RCC_CSR_LSEON;
 800157a:	2380      	movs	r3, #128	; 0x80
 800157c:	6811      	ldr	r1, [r2, #0]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	e7f7      	b.n	8001572 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSEON;
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <rcc_osc_on+0x48>)
 8001586:	025b      	lsls	r3, r3, #9
 8001588:	6811      	ldr	r1, [r2, #0]
 800158a:	e7f2      	b.n	8001572 <rcc_osc_on+0x1a>
		RCC_CRRCR |= RCC_CRRCR_HSI48ON;
 800158c:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <rcc_osc_on+0x4c>)
		RCC_CSR |= RCC_CSR_LSION;
 800158e:	2301      	movs	r3, #1
 8001590:	6811      	ldr	r1, [r2, #0]
 8001592:	e7ee      	b.n	8001572 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSI16ON;
 8001594:	4a02      	ldr	r2, [pc, #8]	; (80015a0 <rcc_osc_on+0x48>)
 8001596:	e7fa      	b.n	800158e <rcc_osc_on+0x36>
		RCC_CSR |= RCC_CSR_LSEON;
 8001598:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <rcc_osc_on+0x50>)
 800159a:	e7ee      	b.n	800157a <rcc_osc_on+0x22>
		RCC_CSR |= RCC_CSR_LSION;
 800159c:	4a02      	ldr	r2, [pc, #8]	; (80015a8 <rcc_osc_on+0x50>)
 800159e:	e7f6      	b.n	800158e <rcc_osc_on+0x36>
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40021008 	.word	0x40021008
 80015a8:	40021050 	.word	0x40021050

080015ac <rcc_is_osc_ready>:
	cm3_assert_not_reached();
}


bool rcc_is_osc_ready(enum rcc_osc osc)
{
 80015ac:	2300      	movs	r3, #0
 80015ae:	b500      	push	{lr}
 80015b0:	2806      	cmp	r0, #6
 80015b2:	d80a      	bhi.n	80015ca <rcc_is_osc_ready+0x1e>
 80015b4:	3301      	adds	r3, #1
 80015b6:	f000 f9a3 	bl	8001900 <__gnu_thumb1_case_uqi>
 80015ba:	0a04      	.short	0x0a04
 80015bc:	1a160e12 	.word	0x1a160e12
 80015c0:	1c          	.byte	0x1c
 80015c1:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 80015c2:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <rcc_is_osc_ready+0x4c>)
 80015c4:	6810      	ldr	r0, [r2, #0]
 80015c6:	0e40      	lsrs	r0, r0, #25
	case RCC_MSI:
		return RCC_CR & RCC_CR_MSIRDY;
	case RCC_LSE:
		return RCC_CSR & RCC_CSR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 80015c8:	4003      	ands	r3, r0
	}
	return false;
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	bd00      	pop	{pc}
		return RCC_CR & RCC_CR_HSERDY;
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <rcc_is_osc_ready+0x4c>)
 80015d0:	6810      	ldr	r0, [r2, #0]
 80015d2:	0c40      	lsrs	r0, r0, #17
 80015d4:	e7f8      	b.n	80015c8 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_HSI16RDY;
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <rcc_is_osc_ready+0x4c>)
 80015d8:	6810      	ldr	r0, [r2, #0]
 80015da:	0880      	lsrs	r0, r0, #2
 80015dc:	e7f4      	b.n	80015c8 <rcc_is_osc_ready+0x1c>
		return RCC_CRRCR & RCC_CRRCR_HSI48RDY;
 80015de:	4a07      	ldr	r2, [pc, #28]	; (80015fc <rcc_is_osc_ready+0x50>)
		return RCC_CSR & RCC_CSR_LSIRDY;
 80015e0:	6810      	ldr	r0, [r2, #0]
 80015e2:	0840      	lsrs	r0, r0, #1
 80015e4:	e7f0      	b.n	80015c8 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_MSIRDY;
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <rcc_is_osc_ready+0x4c>)
		return RCC_CSR & RCC_CSR_LSERDY;
 80015e8:	6810      	ldr	r0, [r2, #0]
 80015ea:	0a40      	lsrs	r0, r0, #9
 80015ec:	e7ec      	b.n	80015c8 <rcc_is_osc_ready+0x1c>
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <rcc_is_osc_ready+0x54>)
 80015f0:	e7fa      	b.n	80015e8 <rcc_is_osc_ready+0x3c>
		return RCC_CSR & RCC_CSR_LSIRDY;
 80015f2:	4a03      	ldr	r2, [pc, #12]	; (8001600 <rcc_is_osc_ready+0x54>)
 80015f4:	e7f4      	b.n	80015e0 <rcc_is_osc_ready+0x34>
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40021008 	.word	0x40021008
 8001600:	40021050 	.word	0x40021050

08001604 <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 8001604:	b510      	push	{r4, lr}
 8001606:	0004      	movs	r4, r0
	while (!rcc_is_osc_ready(osc));
 8001608:	0020      	movs	r0, r4
 800160a:	f7ff ffcf 	bl	80015ac <rcc_is_osc_ready>
 800160e:	2800      	cmp	r0, #0
 8001610:	d0fa      	beq.n	8001608 <rcc_wait_for_osc_ready+0x4>
}
 8001612:	bd10      	pop	{r4, pc}

08001614 <rcc_set_ppre1>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb1pre
 */

void rcc_set_ppre1(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8001614:	4a03      	ldr	r2, [pc, #12]	; (8001624 <rcc_set_ppre1+0x10>)
 8001616:	4904      	ldr	r1, [pc, #16]	; (8001628 <rcc_set_ppre1+0x14>)
 8001618:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE1_MASK << RCC_CFGR_PPRE1_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 800161a:	0200      	lsls	r0, r0, #8
	uint32_t reg = RCC_CFGR
 800161c:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 800161e:	4318      	orrs	r0, r3
 8001620:	6010      	str	r0, [r2, #0]
}
 8001622:	4770      	bx	lr
 8001624:	4002100c 	.word	0x4002100c
 8001628:	fffff8ff 	.word	0xfffff8ff

0800162c <rcc_set_ppre2>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb2pre
 */

void rcc_set_ppre2(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 800162c:	4a03      	ldr	r2, [pc, #12]	; (800163c <rcc_set_ppre2+0x10>)
 800162e:	4904      	ldr	r1, [pc, #16]	; (8001640 <rcc_set_ppre2+0x14>)
 8001630:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE2_MASK << RCC_CFGR_PPRE2_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8001632:	02c0      	lsls	r0, r0, #11
	uint32_t reg = RCC_CFGR
 8001634:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8001636:	4318      	orrs	r0, r3
 8001638:	6010      	str	r0, [r2, #0]
}
 800163a:	4770      	bx	lr
 800163c:	4002100c 	.word	0x4002100c
 8001640:	ffffc7ff 	.word	0xffffc7ff

08001644 <rcc_set_hpre>:
 * @param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
 */

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8001644:	21f0      	movs	r1, #240	; 0xf0
 8001646:	4a03      	ldr	r2, [pc, #12]	; (8001654 <rcc_set_hpre+0x10>)
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8001648:	0100      	lsls	r0, r0, #4
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 800164a:	6813      	ldr	r3, [r2, #0]
 800164c:	438b      	bics	r3, r1
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 800164e:	4318      	orrs	r0, r3
 8001650:	6010      	str	r0, [r2, #0]
}
 8001652:	4770      	bx	lr
 8001654:	4002100c 	.word	0x4002100c

08001658 <rcc_set_msi_range>:
*
 * @param msi_range desired range @ref rcc_icscr_msirange
 */
void rcc_set_msi_range(uint32_t msi_range)
{
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8001658:	4a03      	ldr	r2, [pc, #12]	; (8001668 <rcc_set_msi_range+0x10>)
 800165a:	4904      	ldr	r1, [pc, #16]	; (800166c <rcc_set_msi_range+0x14>)
 800165c:	6813      	ldr	r3, [r2, #0]
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 800165e:	0340      	lsls	r0, r0, #13
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8001660:	400b      	ands	r3, r1
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8001662:	4318      	orrs	r0, r3
 8001664:	6010      	str	r0, [r2, #0]
}
 8001666:	4770      	bx	lr
 8001668:	40021004 	.word	0x40021004
 800166c:	ffff1fff 	.word	0xffff1fff

08001670 <rcc_set_peripheral_clk_sel>:
void rcc_set_peripheral_clk_sel(uint32_t periph, uint32_t sel)
{
	uint8_t shift;
	uint32_t mask;

	switch (periph) {
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <rcc_set_peripheral_clk_sel+0x50>)
{
 8001672:	000a      	movs	r2, r1
 8001674:	b510      	push	{r4, lr}
	switch (periph) {
 8001676:	4298      	cmp	r0, r3
 8001678:	d01c      	beq.n	80016b4 <rcc_set_peripheral_clk_sel+0x44>
 800167a:	d80b      	bhi.n	8001694 <rcc_set_peripheral_clk_sel+0x24>
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <rcc_set_peripheral_clk_sel+0x54>)
 800167e:	4298      	cmp	r0, r3
 8001680:	d01a      	beq.n	80016b8 <rcc_set_peripheral_clk_sel+0x48>
 8001682:	4911      	ldr	r1, [pc, #68]	; (80016c8 <rcc_set_peripheral_clk_sel+0x58>)
			shift = RCC_CCIPR_I2C3SEL_SHIFT;
			mask = RCC_CCIPR_I2C3SEL_MASK;
			break;

		case I2C1_BASE:
			shift = RCC_CCIPR_I2C1SEL_SHIFT;
 8001684:	230c      	movs	r3, #12
	switch (periph) {
 8001686:	4288      	cmp	r0, r1
 8001688:	d00b      	beq.n	80016a2 <rcc_set_peripheral_clk_sel+0x32>
 800168a:	4910      	ldr	r1, [pc, #64]	; (80016cc <rcc_set_peripheral_clk_sel+0x5c>)
			shift = RCC_CCIPR_LPUART1SEL_SHIFT;
			mask = RCC_CCIPR_LPUART1SEL_MASK;
			break;

		case USART2_BASE:
			shift = RCC_CCIPR_USART2SEL_SHIFT;
 800168c:	3b0a      	subs	r3, #10
	switch (periph) {
 800168e:	4288      	cmp	r0, r1
 8001690:	d007      	beq.n	80016a2 <rcc_set_peripheral_clk_sel+0x32>
			return;
	}

	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
	RCC_CCIPR = reg32 | (sel << shift);
}
 8001692:	bd10      	pop	{r4, pc}
	switch (periph) {
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <rcc_set_peripheral_clk_sel+0x60>)
 8001696:	4298      	cmp	r0, r3
 8001698:	d010      	beq.n	80016bc <rcc_set_peripheral_clk_sel+0x4c>
 800169a:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <rcc_set_peripheral_clk_sel+0x64>)
 800169c:	4298      	cmp	r0, r3
 800169e:	d1f8      	bne.n	8001692 <rcc_set_peripheral_clk_sel+0x22>
			shift = RCC_CCIPR_USART1SEL_SHIFT;
 80016a0:	2300      	movs	r3, #0
	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
 80016a2:	2003      	movs	r0, #3
 80016a4:	4098      	lsls	r0, r3
	RCC_CCIPR = reg32 | (sel << shift);
 80016a6:	409a      	lsls	r2, r3
	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
 80016a8:	4c0b      	ldr	r4, [pc, #44]	; (80016d8 <rcc_set_peripheral_clk_sel+0x68>)
 80016aa:	6821      	ldr	r1, [r4, #0]
 80016ac:	4381      	bics	r1, r0
	RCC_CCIPR = reg32 | (sel << shift);
 80016ae:	4311      	orrs	r1, r2
 80016b0:	6021      	str	r1, [r4, #0]
 80016b2:	e7ee      	b.n	8001692 <rcc_set_peripheral_clk_sel+0x22>
	switch (periph) {
 80016b4:	2310      	movs	r3, #16
 80016b6:	e7f4      	b.n	80016a2 <rcc_set_peripheral_clk_sel+0x32>
			shift = RCC_CCIPR_LPUART1SEL_SHIFT;
 80016b8:	230a      	movs	r3, #10
 80016ba:	e7f2      	b.n	80016a2 <rcc_set_peripheral_clk_sel+0x32>
			shift = RCC_CCIPR_LPTIM1SEL_SHIFT;
 80016bc:	2312      	movs	r3, #18
 80016be:	e7f0      	b.n	80016a2 <rcc_set_peripheral_clk_sel+0x32>
 80016c0:	40007800 	.word	0x40007800
 80016c4:	40004800 	.word	0x40004800
 80016c8:	40005400 	.word	0x40005400
 80016cc:	40004400 	.word	0x40004400
 80016d0:	40007c00 	.word	0x40007c00
 80016d4:	40013800 	.word	0x40013800
 80016d8:	4002104c 	.word	0x4002104c

080016dc <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <rcc_periph_clock_enable+0x18>)
 80016de:	0942      	lsrs	r2, r0, #5
 80016e0:	18d2      	adds	r2, r2, r3
 80016e2:	231f      	movs	r3, #31
 80016e4:	4018      	ands	r0, r3
 80016e6:	3b1e      	subs	r3, #30
 80016e8:	4083      	lsls	r3, r0
 80016ea:	6811      	ldr	r1, [r2, #0]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	4770      	bx	lr
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	40021000 	.word	0x40021000

080016f8 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 80016f8:	4a06      	ldr	r2, [pc, #24]	; (8001714 <rcc_periph_reset_pulse+0x1c>)
 80016fa:	0943      	lsrs	r3, r0, #5
 80016fc:	189b      	adds	r3, r3, r2
 80016fe:	221f      	movs	r2, #31
 8001700:	4010      	ands	r0, r2
 8001702:	3a1e      	subs	r2, #30
 8001704:	4082      	lsls	r2, r0
 8001706:	6819      	ldr	r1, [r3, #0]
 8001708:	4311      	orrs	r1, r2
 800170a:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 800170c:	6819      	ldr	r1, [r3, #0]
 800170e:	4391      	bics	r1, r2
 8001710:	6019      	str	r1, [r3, #0]
}
 8001712:	4770      	bx	lr
 8001714:	40021000 	.word	0x40021000

08001718 <rtc_unlock>:
/** @brief Unlock write access to the RTC registers

*/
void rtc_unlock(void)
{
	RTC_WPR = 0xca;
 8001718:	22ca      	movs	r2, #202	; 0xca
 800171a:	4b02      	ldr	r3, [pc, #8]	; (8001724 <rtc_unlock+0xc>)
 800171c:	601a      	str	r2, [r3, #0]
	RTC_WPR = 0x53;
 800171e:	3a77      	subs	r2, #119	; 0x77
 8001720:	601a      	str	r2, [r3, #0]
}
 8001722:	4770      	bx	lr
 8001724:	40002824 	.word	0x40002824

08001728 <rtc_lock>:
/** @brief Lock write access to the RTC registers

*/
void rtc_lock(void)
{
	RTC_WPR = 0xff;
 8001728:	22ff      	movs	r2, #255	; 0xff
 800172a:	4b01      	ldr	r3, [pc, #4]	; (8001730 <rtc_lock+0x8>)
 800172c:	601a      	str	r2, [r3, #0]
}
 800172e:	4770      	bx	lr
 8001730:	40002824 	.word	0x40002824

08001734 <rtc_clear_wakeup_flag>:

@details This function should be called first in the rtc_wkup_isr()
*/
void rtc_clear_wakeup_flag(void)
{
	RTC_ISR &= ~RTC_ISR_WUTF;
 8001734:	4a02      	ldr	r2, [pc, #8]	; (8001740 <rtc_clear_wakeup_flag+0xc>)
 8001736:	4903      	ldr	r1, [pc, #12]	; (8001744 <rtc_clear_wakeup_flag+0x10>)
 8001738:	6813      	ldr	r3, [r2, #0]
 800173a:	400b      	ands	r3, r1
 800173c:	6013      	str	r3, [r2, #0]
}
 800173e:	4770      	bx	lr
 8001740:	4000280c 	.word	0x4000280c
 8001744:	fffffbff 	.word	0xfffffbff

08001748 <spi_xfer>:
uint16_t spi_xfer(uint32_t spi, uint16_t data)
{
	spi_write(spi, data);

	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8001748:	2301      	movs	r3, #1
	SPI_DR(spi) = data;
 800174a:	60c1      	str	r1, [r0, #12]
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 800174c:	6882      	ldr	r2, [r0, #8]
 800174e:	421a      	tst	r2, r3
 8001750:	d0fc      	beq.n	800174c <spi_xfer+0x4>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 8001752:	68c0      	ldr	r0, [r0, #12]
 8001754:	b280      	uxth	r0, r0
}
 8001756:	4770      	bx	lr

08001758 <timer_enable_counter>:
tim_reg_base
*/

void timer_enable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_CEN;
 8001758:	2301      	movs	r3, #1
 800175a:	6802      	ldr	r2, [r0, #0]
 800175c:	4313      	orrs	r3, r2
 800175e:	6003      	str	r3, [r0, #0]
}
 8001760:	4770      	bx	lr

08001762 <timer_disable_counter>:
tim_reg_base
*/

void timer_disable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_CEN;
 8001762:	2201      	movs	r2, #1
 8001764:	6803      	ldr	r3, [r0, #0]
 8001766:	4393      	bics	r3, r2
 8001768:	6003      	str	r3, [r0, #0]
}
 800176a:	4770      	bx	lr

0800176c <timer_set_prescaler>:
@param[in] value Unsigned int32. Prescaler values 0...0xFFFF.
*/

void timer_set_prescaler(uint32_t timer_peripheral, uint32_t value)
{
	TIM_PSC(timer_peripheral) = value;
 800176c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800176e:	4770      	bx	lr

08001770 <timer_get_counter>:
@returns Unsigned int32. Counter value.
*/

uint32_t timer_get_counter(uint32_t timer_peripheral)
{
	return TIM_CNT(timer_peripheral);
 8001770:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8001772:	4770      	bx	lr

08001774 <usart_set_baudrate>:
void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;

#if defined USART1
	if ((usart == USART1)
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <usart_set_baudrate+0x44>)
{
 8001776:	b570      	push	{r4, r5, r6, lr}
 8001778:	0005      	movs	r5, r0
 800177a:	000c      	movs	r4, r1
 800177c:	084e      	lsrs	r6, r1, #1
	if ((usart == USART1)
 800177e:	4298      	cmp	r0, r3
 8001780:	d107      	bne.n	8001792 <usart_set_baudrate+0x1e>
#if defined USART6
		|| (usart == USART6)
#endif
		) {
		clock = rcc_apb2_frequency;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <usart_set_baudrate+0x48>)
 8001784:	6818      	ldr	r0, [r3, #0]
			+ ((clock % baud) * 256 + baud / 2) / baud;
		return;
	}
#endif

	USART_BRR(usart) = (clock + baud / 2) / baud;
 8001786:	0021      	movs	r1, r4
 8001788:	1830      	adds	r0, r6, r0
 800178a:	f000 f8c3 	bl	8001914 <__udivsi3>
 800178e:	60e8      	str	r0, [r5, #12]
 8001790:	e010      	b.n	80017b4 <usart_set_baudrate+0x40>
	uint32_t clock = rcc_apb1_frequency;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <usart_set_baudrate+0x4c>)
 8001794:	6818      	ldr	r0, [r3, #0]
	if (usart == LPUART1) {
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <usart_set_baudrate+0x50>)
 8001798:	429d      	cmp	r5, r3
 800179a:	d1f4      	bne.n	8001786 <usart_set_baudrate+0x12>
		USART_BRR(usart) = (clock / baud) * 256
 800179c:	f000 f940 	bl	8001a20 <__aeabi_uidivmod>
 80017a0:	0005      	movs	r5, r0
			+ ((clock % baud) * 256 + baud / 2) / baud;
 80017a2:	0208      	lsls	r0, r1, #8
 80017a4:	1980      	adds	r0, r0, r6
 80017a6:	0021      	movs	r1, r4
 80017a8:	f000 f8b4 	bl	8001914 <__udivsi3>
		USART_BRR(usart) = (clock / baud) * 256
 80017ac:	022d      	lsls	r5, r5, #8
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <usart_set_baudrate+0x54>)
			+ ((clock % baud) * 256 + baud / 2) / baud;
 80017b0:	1940      	adds	r0, r0, r5
		USART_BRR(usart) = (clock / baud) * 256
 80017b2:	6018      	str	r0, [r3, #0]
}
 80017b4:	bd70      	pop	{r4, r5, r6, pc}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	40013800 	.word	0x40013800
 80017bc:	2000000c 	.word	0x2000000c
 80017c0:	20000008 	.word	0x20000008
 80017c4:	40004800 	.word	0x40004800
 80017c8:	4000480c 	.word	0x4000480c

080017cc <usart_set_databits>:
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
 80017cc:	2908      	cmp	r1, #8
 80017ce:	d104      	bne.n	80017da <usart_set_databits+0xe>
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 80017d0:	6803      	ldr	r3, [r0, #0]
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <usart_set_databits+0x18>)
 80017d4:	4013      	ands	r3, r2
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 80017d6:	6003      	str	r3, [r0, #0]
	}
}
 80017d8:	4770      	bx	lr
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	6802      	ldr	r2, [r0, #0]
 80017de:	015b      	lsls	r3, r3, #5
 80017e0:	4313      	orrs	r3, r2
 80017e2:	e7f8      	b.n	80017d6 <usart_set_databits+0xa>
 80017e4:	ffffefff 	.word	0xffffefff

080017e8 <usart_set_stopbits>:

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 80017e8:	6843      	ldr	r3, [r0, #4]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 80017ea:	4a02      	ldr	r2, [pc, #8]	; (80017f4 <usart_set_stopbits+0xc>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 80017f0:	6043      	str	r3, [r0, #4]
}
 80017f2:	4770      	bx	lr
 80017f4:	ffffcfff 	.word	0xffffcfff

080017f8 <usart_set_parity>:

void usart_set_parity(uint32_t usart, uint32_t parity)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 80017f8:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 80017fa:	4a02      	ldr	r2, [pc, #8]	; (8001804 <usart_set_parity+0xc>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8001800:	6003      	str	r3, [r0, #0]
}
 8001802:	4770      	bx	lr
 8001804:	fffff9ff 	.word	0xfffff9ff

08001808 <usart_set_mode>:
void usart_set_mode(uint32_t usart, uint32_t mode)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8001808:	220c      	movs	r2, #12
	reg32 = USART_CR1(usart);
 800180a:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 800180c:	4393      	bics	r3, r2
 800180e:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8001810:	6003      	str	r3, [r0, #0]
}
 8001812:	4770      	bx	lr

08001814 <usart_set_flow_control>:

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 8001814:	6883      	ldr	r3, [r0, #8]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 8001816:	4a02      	ldr	r2, [pc, #8]	; (8001820 <usart_set_flow_control+0xc>)
 8001818:	4013      	ands	r3, r2
 800181a:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 800181c:	6083      	str	r3, [r0, #8]
}
 800181e:	4770      	bx	lr
 8001820:	fffffcff 	.word	0xfffffcff

08001824 <usart_enable>:
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 8001824:	2301      	movs	r3, #1
 8001826:	6802      	ldr	r2, [r0, #0]
 8001828:	4313      	orrs	r3, r2
 800182a:	6003      	str	r3, [r0, #0]
}
 800182c:	4770      	bx	lr

0800182e <usart_disable>:
usart_reg_base
*/

void usart_disable(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_UE;
 800182e:	2201      	movs	r2, #1
 8001830:	6803      	ldr	r3, [r0, #0]
 8001832:	4393      	bics	r3, r2
 8001834:	6003      	str	r3, [r0, #0]
}
 8001836:	4770      	bx	lr

08001838 <usart_send_blocking>:
usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(uint32_t usart, uint16_t data)
{
 8001838:	b570      	push	{r4, r5, r6, lr}
 800183a:	000d      	movs	r5, r1
 800183c:	0004      	movs	r4, r0
	usart_wait_send_ready(usart);
 800183e:	f000 f80d 	bl	800185c <usart_wait_send_ready>
	usart_send(usart, data);
 8001842:	0029      	movs	r1, r5
 8001844:	0020      	movs	r0, r4
 8001846:	f000 f801 	bl	800184c <usart_send>
}
 800184a:	bd70      	pop	{r4, r5, r6, pc}

0800184c <usart_send>:
 */

void usart_send(uint32_t usart, uint16_t data)
{
	/* Send data. */
	USART_TDR(usart) = (data & USART_TDR_MASK);
 800184c:	05c9      	lsls	r1, r1, #23
 800184e:	0dc9      	lsrs	r1, r1, #23
 8001850:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001852:	4770      	bx	lr

08001854 <usart_recv>:
 */

uint16_t usart_recv(uint32_t usart)
{
	/* Receive data. */
	return USART_RDR(usart) & USART_RDR_MASK;
 8001854:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001856:	05c0      	lsls	r0, r0, #23
 8001858:	0dc0      	lsrs	r0, r0, #23
}
 800185a:	4770      	bx	lr

0800185c <usart_wait_send_ready>:
 */

void usart_wait_send_ready(uint32_t usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_ISR(usart) & USART_ISR_TXE) == 0);
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	69c2      	ldr	r2, [r0, #28]
 8001860:	421a      	tst	r2, r3
 8001862:	d0fc      	beq.n	800185e <usart_wait_send_ready+0x2>
}
 8001864:	4770      	bx	lr

08001866 <usart_get_flag>:
 * @returns boolean: flag set.
 */

bool usart_get_flag(uint32_t usart, uint32_t flag)
{
	return ((USART_ISR(usart) & flag) != 0);
 8001866:	69c0      	ldr	r0, [r0, #28]
 8001868:	4008      	ands	r0, r1
 800186a:	1e41      	subs	r1, r0, #1
 800186c:	4188      	sbcs	r0, r1
 800186e:	b2c0      	uxtb	r0, r0
}
 8001870:	4770      	bx	lr

08001872 <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 8001872:	e7fe      	b.n	8001872 <blocking_handler>

08001874 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 8001874:	4770      	bx	lr
	...

08001878 <reset_handler>:
{
 8001878:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <reset_handler+0x5c>)
 800187c:	4a16      	ldr	r2, [pc, #88]	; (80018d8 <reset_handler+0x60>)
 800187e:	4917      	ldr	r1, [pc, #92]	; (80018dc <reset_handler+0x64>)
 8001880:	428b      	cmp	r3, r1
 8001882:	d318      	bcc.n	80018b6 <reset_handler+0x3e>
		*dest++ = 0;
 8001884:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 8001886:	4a16      	ldr	r2, [pc, #88]	; (80018e0 <reset_handler+0x68>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d317      	bcc.n	80018bc <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	4a15      	ldr	r2, [pc, #84]	; (80018e4 <reset_handler+0x6c>)
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001894:	4c14      	ldr	r4, [pc, #80]	; (80018e8 <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 8001896:	430b      	orrs	r3, r1
 8001898:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <reset_handler+0x74>)
 800189c:	429c      	cmp	r4, r3
 800189e:	d30f      	bcc.n	80018c0 <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 80018a0:	4c13      	ldr	r4, [pc, #76]	; (80018f0 <reset_handler+0x78>)
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <reset_handler+0x7c>)
 80018a4:	429c      	cmp	r4, r3
 80018a6:	d30e      	bcc.n	80018c6 <reset_handler+0x4e>
	(void)main();
 80018a8:	f7fe fc0a 	bl	80000c0 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 80018ac:	4c12      	ldr	r4, [pc, #72]	; (80018f8 <reset_handler+0x80>)
 80018ae:	4b13      	ldr	r3, [pc, #76]	; (80018fc <reset_handler+0x84>)
 80018b0:	429c      	cmp	r4, r3
 80018b2:	d30b      	bcc.n	80018cc <reset_handler+0x54>
}
 80018b4:	bd10      	pop	{r4, pc}
		*dest = *src;
 80018b6:	ca01      	ldmia	r2!, {r0}
 80018b8:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 80018ba:	e7e1      	b.n	8001880 <reset_handler+0x8>
		*dest++ = 0;
 80018bc:	c302      	stmia	r3!, {r1}
 80018be:	e7e3      	b.n	8001888 <reset_handler+0x10>
		(*fp)();
 80018c0:	cc08      	ldmia	r4!, {r3}
 80018c2:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 80018c4:	e7e9      	b.n	800189a <reset_handler+0x22>
		(*fp)();
 80018c6:	cc08      	ldmia	r4!, {r3}
 80018c8:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 80018ca:	e7ea      	b.n	80018a2 <reset_handler+0x2a>
		(*fp)();
 80018cc:	cc08      	ldmia	r4!, {r3}
 80018ce:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 80018d0:	e7ed      	b.n	80018ae <reset_handler+0x36>
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	20000000 	.word	0x20000000
 80018d8:	08002f40 	.word	0x08002f40
 80018dc:	20000010 	.word	0x20000010
 80018e0:	200002b0 	.word	0x200002b0
 80018e4:	e000ed14 	.word	0xe000ed14
 80018e8:	08002f40 	.word	0x08002f40
 80018ec:	08002f40 	.word	0x08002f40
 80018f0:	08002f40 	.word	0x08002f40
 80018f4:	08002f40 	.word	0x08002f40
 80018f8:	08002f40 	.word	0x08002f40
 80018fc:	08002f40 	.word	0x08002f40

08001900 <__gnu_thumb1_case_uqi>:
 8001900:	b402      	push	{r1}
 8001902:	4671      	mov	r1, lr
 8001904:	0849      	lsrs	r1, r1, #1
 8001906:	0049      	lsls	r1, r1, #1
 8001908:	5c09      	ldrb	r1, [r1, r0]
 800190a:	0049      	lsls	r1, r1, #1
 800190c:	448e      	add	lr, r1
 800190e:	bc02      	pop	{r1}
 8001910:	4770      	bx	lr
 8001912:	46c0      	nop			; (mov r8, r8)

08001914 <__udivsi3>:
 8001914:	2200      	movs	r2, #0
 8001916:	0843      	lsrs	r3, r0, #1
 8001918:	428b      	cmp	r3, r1
 800191a:	d374      	bcc.n	8001a06 <__udivsi3+0xf2>
 800191c:	0903      	lsrs	r3, r0, #4
 800191e:	428b      	cmp	r3, r1
 8001920:	d35f      	bcc.n	80019e2 <__udivsi3+0xce>
 8001922:	0a03      	lsrs	r3, r0, #8
 8001924:	428b      	cmp	r3, r1
 8001926:	d344      	bcc.n	80019b2 <__udivsi3+0x9e>
 8001928:	0b03      	lsrs	r3, r0, #12
 800192a:	428b      	cmp	r3, r1
 800192c:	d328      	bcc.n	8001980 <__udivsi3+0x6c>
 800192e:	0c03      	lsrs	r3, r0, #16
 8001930:	428b      	cmp	r3, r1
 8001932:	d30d      	bcc.n	8001950 <__udivsi3+0x3c>
 8001934:	22ff      	movs	r2, #255	; 0xff
 8001936:	0209      	lsls	r1, r1, #8
 8001938:	ba12      	rev	r2, r2
 800193a:	0c03      	lsrs	r3, r0, #16
 800193c:	428b      	cmp	r3, r1
 800193e:	d302      	bcc.n	8001946 <__udivsi3+0x32>
 8001940:	1212      	asrs	r2, r2, #8
 8001942:	0209      	lsls	r1, r1, #8
 8001944:	d065      	beq.n	8001a12 <__udivsi3+0xfe>
 8001946:	0b03      	lsrs	r3, r0, #12
 8001948:	428b      	cmp	r3, r1
 800194a:	d319      	bcc.n	8001980 <__udivsi3+0x6c>
 800194c:	e000      	b.n	8001950 <__udivsi3+0x3c>
 800194e:	0a09      	lsrs	r1, r1, #8
 8001950:	0bc3      	lsrs	r3, r0, #15
 8001952:	428b      	cmp	r3, r1
 8001954:	d301      	bcc.n	800195a <__udivsi3+0x46>
 8001956:	03cb      	lsls	r3, r1, #15
 8001958:	1ac0      	subs	r0, r0, r3
 800195a:	4152      	adcs	r2, r2
 800195c:	0b83      	lsrs	r3, r0, #14
 800195e:	428b      	cmp	r3, r1
 8001960:	d301      	bcc.n	8001966 <__udivsi3+0x52>
 8001962:	038b      	lsls	r3, r1, #14
 8001964:	1ac0      	subs	r0, r0, r3
 8001966:	4152      	adcs	r2, r2
 8001968:	0b43      	lsrs	r3, r0, #13
 800196a:	428b      	cmp	r3, r1
 800196c:	d301      	bcc.n	8001972 <__udivsi3+0x5e>
 800196e:	034b      	lsls	r3, r1, #13
 8001970:	1ac0      	subs	r0, r0, r3
 8001972:	4152      	adcs	r2, r2
 8001974:	0b03      	lsrs	r3, r0, #12
 8001976:	428b      	cmp	r3, r1
 8001978:	d301      	bcc.n	800197e <__udivsi3+0x6a>
 800197a:	030b      	lsls	r3, r1, #12
 800197c:	1ac0      	subs	r0, r0, r3
 800197e:	4152      	adcs	r2, r2
 8001980:	0ac3      	lsrs	r3, r0, #11
 8001982:	428b      	cmp	r3, r1
 8001984:	d301      	bcc.n	800198a <__udivsi3+0x76>
 8001986:	02cb      	lsls	r3, r1, #11
 8001988:	1ac0      	subs	r0, r0, r3
 800198a:	4152      	adcs	r2, r2
 800198c:	0a83      	lsrs	r3, r0, #10
 800198e:	428b      	cmp	r3, r1
 8001990:	d301      	bcc.n	8001996 <__udivsi3+0x82>
 8001992:	028b      	lsls	r3, r1, #10
 8001994:	1ac0      	subs	r0, r0, r3
 8001996:	4152      	adcs	r2, r2
 8001998:	0a43      	lsrs	r3, r0, #9
 800199a:	428b      	cmp	r3, r1
 800199c:	d301      	bcc.n	80019a2 <__udivsi3+0x8e>
 800199e:	024b      	lsls	r3, r1, #9
 80019a0:	1ac0      	subs	r0, r0, r3
 80019a2:	4152      	adcs	r2, r2
 80019a4:	0a03      	lsrs	r3, r0, #8
 80019a6:	428b      	cmp	r3, r1
 80019a8:	d301      	bcc.n	80019ae <__udivsi3+0x9a>
 80019aa:	020b      	lsls	r3, r1, #8
 80019ac:	1ac0      	subs	r0, r0, r3
 80019ae:	4152      	adcs	r2, r2
 80019b0:	d2cd      	bcs.n	800194e <__udivsi3+0x3a>
 80019b2:	09c3      	lsrs	r3, r0, #7
 80019b4:	428b      	cmp	r3, r1
 80019b6:	d301      	bcc.n	80019bc <__udivsi3+0xa8>
 80019b8:	01cb      	lsls	r3, r1, #7
 80019ba:	1ac0      	subs	r0, r0, r3
 80019bc:	4152      	adcs	r2, r2
 80019be:	0983      	lsrs	r3, r0, #6
 80019c0:	428b      	cmp	r3, r1
 80019c2:	d301      	bcc.n	80019c8 <__udivsi3+0xb4>
 80019c4:	018b      	lsls	r3, r1, #6
 80019c6:	1ac0      	subs	r0, r0, r3
 80019c8:	4152      	adcs	r2, r2
 80019ca:	0943      	lsrs	r3, r0, #5
 80019cc:	428b      	cmp	r3, r1
 80019ce:	d301      	bcc.n	80019d4 <__udivsi3+0xc0>
 80019d0:	014b      	lsls	r3, r1, #5
 80019d2:	1ac0      	subs	r0, r0, r3
 80019d4:	4152      	adcs	r2, r2
 80019d6:	0903      	lsrs	r3, r0, #4
 80019d8:	428b      	cmp	r3, r1
 80019da:	d301      	bcc.n	80019e0 <__udivsi3+0xcc>
 80019dc:	010b      	lsls	r3, r1, #4
 80019de:	1ac0      	subs	r0, r0, r3
 80019e0:	4152      	adcs	r2, r2
 80019e2:	08c3      	lsrs	r3, r0, #3
 80019e4:	428b      	cmp	r3, r1
 80019e6:	d301      	bcc.n	80019ec <__udivsi3+0xd8>
 80019e8:	00cb      	lsls	r3, r1, #3
 80019ea:	1ac0      	subs	r0, r0, r3
 80019ec:	4152      	adcs	r2, r2
 80019ee:	0883      	lsrs	r3, r0, #2
 80019f0:	428b      	cmp	r3, r1
 80019f2:	d301      	bcc.n	80019f8 <__udivsi3+0xe4>
 80019f4:	008b      	lsls	r3, r1, #2
 80019f6:	1ac0      	subs	r0, r0, r3
 80019f8:	4152      	adcs	r2, r2
 80019fa:	0843      	lsrs	r3, r0, #1
 80019fc:	428b      	cmp	r3, r1
 80019fe:	d301      	bcc.n	8001a04 <__udivsi3+0xf0>
 8001a00:	004b      	lsls	r3, r1, #1
 8001a02:	1ac0      	subs	r0, r0, r3
 8001a04:	4152      	adcs	r2, r2
 8001a06:	1a41      	subs	r1, r0, r1
 8001a08:	d200      	bcs.n	8001a0c <__udivsi3+0xf8>
 8001a0a:	4601      	mov	r1, r0
 8001a0c:	4152      	adcs	r2, r2
 8001a0e:	4610      	mov	r0, r2
 8001a10:	4770      	bx	lr
 8001a12:	e7ff      	b.n	8001a14 <__udivsi3+0x100>
 8001a14:	b501      	push	{r0, lr}
 8001a16:	2000      	movs	r0, #0
 8001a18:	f000 f8f0 	bl	8001bfc <__aeabi_idiv0>
 8001a1c:	bd02      	pop	{r1, pc}
 8001a1e:	46c0      	nop			; (mov r8, r8)

08001a20 <__aeabi_uidivmod>:
 8001a20:	2900      	cmp	r1, #0
 8001a22:	d0f7      	beq.n	8001a14 <__udivsi3+0x100>
 8001a24:	e776      	b.n	8001914 <__udivsi3>
 8001a26:	4770      	bx	lr

08001a28 <__divsi3>:
 8001a28:	4603      	mov	r3, r0
 8001a2a:	430b      	orrs	r3, r1
 8001a2c:	d47f      	bmi.n	8001b2e <__divsi3+0x106>
 8001a2e:	2200      	movs	r2, #0
 8001a30:	0843      	lsrs	r3, r0, #1
 8001a32:	428b      	cmp	r3, r1
 8001a34:	d374      	bcc.n	8001b20 <__divsi3+0xf8>
 8001a36:	0903      	lsrs	r3, r0, #4
 8001a38:	428b      	cmp	r3, r1
 8001a3a:	d35f      	bcc.n	8001afc <__divsi3+0xd4>
 8001a3c:	0a03      	lsrs	r3, r0, #8
 8001a3e:	428b      	cmp	r3, r1
 8001a40:	d344      	bcc.n	8001acc <__divsi3+0xa4>
 8001a42:	0b03      	lsrs	r3, r0, #12
 8001a44:	428b      	cmp	r3, r1
 8001a46:	d328      	bcc.n	8001a9a <__divsi3+0x72>
 8001a48:	0c03      	lsrs	r3, r0, #16
 8001a4a:	428b      	cmp	r3, r1
 8001a4c:	d30d      	bcc.n	8001a6a <__divsi3+0x42>
 8001a4e:	22ff      	movs	r2, #255	; 0xff
 8001a50:	0209      	lsls	r1, r1, #8
 8001a52:	ba12      	rev	r2, r2
 8001a54:	0c03      	lsrs	r3, r0, #16
 8001a56:	428b      	cmp	r3, r1
 8001a58:	d302      	bcc.n	8001a60 <__divsi3+0x38>
 8001a5a:	1212      	asrs	r2, r2, #8
 8001a5c:	0209      	lsls	r1, r1, #8
 8001a5e:	d065      	beq.n	8001b2c <__divsi3+0x104>
 8001a60:	0b03      	lsrs	r3, r0, #12
 8001a62:	428b      	cmp	r3, r1
 8001a64:	d319      	bcc.n	8001a9a <__divsi3+0x72>
 8001a66:	e000      	b.n	8001a6a <__divsi3+0x42>
 8001a68:	0a09      	lsrs	r1, r1, #8
 8001a6a:	0bc3      	lsrs	r3, r0, #15
 8001a6c:	428b      	cmp	r3, r1
 8001a6e:	d301      	bcc.n	8001a74 <__divsi3+0x4c>
 8001a70:	03cb      	lsls	r3, r1, #15
 8001a72:	1ac0      	subs	r0, r0, r3
 8001a74:	4152      	adcs	r2, r2
 8001a76:	0b83      	lsrs	r3, r0, #14
 8001a78:	428b      	cmp	r3, r1
 8001a7a:	d301      	bcc.n	8001a80 <__divsi3+0x58>
 8001a7c:	038b      	lsls	r3, r1, #14
 8001a7e:	1ac0      	subs	r0, r0, r3
 8001a80:	4152      	adcs	r2, r2
 8001a82:	0b43      	lsrs	r3, r0, #13
 8001a84:	428b      	cmp	r3, r1
 8001a86:	d301      	bcc.n	8001a8c <__divsi3+0x64>
 8001a88:	034b      	lsls	r3, r1, #13
 8001a8a:	1ac0      	subs	r0, r0, r3
 8001a8c:	4152      	adcs	r2, r2
 8001a8e:	0b03      	lsrs	r3, r0, #12
 8001a90:	428b      	cmp	r3, r1
 8001a92:	d301      	bcc.n	8001a98 <__divsi3+0x70>
 8001a94:	030b      	lsls	r3, r1, #12
 8001a96:	1ac0      	subs	r0, r0, r3
 8001a98:	4152      	adcs	r2, r2
 8001a9a:	0ac3      	lsrs	r3, r0, #11
 8001a9c:	428b      	cmp	r3, r1
 8001a9e:	d301      	bcc.n	8001aa4 <__divsi3+0x7c>
 8001aa0:	02cb      	lsls	r3, r1, #11
 8001aa2:	1ac0      	subs	r0, r0, r3
 8001aa4:	4152      	adcs	r2, r2
 8001aa6:	0a83      	lsrs	r3, r0, #10
 8001aa8:	428b      	cmp	r3, r1
 8001aaa:	d301      	bcc.n	8001ab0 <__divsi3+0x88>
 8001aac:	028b      	lsls	r3, r1, #10
 8001aae:	1ac0      	subs	r0, r0, r3
 8001ab0:	4152      	adcs	r2, r2
 8001ab2:	0a43      	lsrs	r3, r0, #9
 8001ab4:	428b      	cmp	r3, r1
 8001ab6:	d301      	bcc.n	8001abc <__divsi3+0x94>
 8001ab8:	024b      	lsls	r3, r1, #9
 8001aba:	1ac0      	subs	r0, r0, r3
 8001abc:	4152      	adcs	r2, r2
 8001abe:	0a03      	lsrs	r3, r0, #8
 8001ac0:	428b      	cmp	r3, r1
 8001ac2:	d301      	bcc.n	8001ac8 <__divsi3+0xa0>
 8001ac4:	020b      	lsls	r3, r1, #8
 8001ac6:	1ac0      	subs	r0, r0, r3
 8001ac8:	4152      	adcs	r2, r2
 8001aca:	d2cd      	bcs.n	8001a68 <__divsi3+0x40>
 8001acc:	09c3      	lsrs	r3, r0, #7
 8001ace:	428b      	cmp	r3, r1
 8001ad0:	d301      	bcc.n	8001ad6 <__divsi3+0xae>
 8001ad2:	01cb      	lsls	r3, r1, #7
 8001ad4:	1ac0      	subs	r0, r0, r3
 8001ad6:	4152      	adcs	r2, r2
 8001ad8:	0983      	lsrs	r3, r0, #6
 8001ada:	428b      	cmp	r3, r1
 8001adc:	d301      	bcc.n	8001ae2 <__divsi3+0xba>
 8001ade:	018b      	lsls	r3, r1, #6
 8001ae0:	1ac0      	subs	r0, r0, r3
 8001ae2:	4152      	adcs	r2, r2
 8001ae4:	0943      	lsrs	r3, r0, #5
 8001ae6:	428b      	cmp	r3, r1
 8001ae8:	d301      	bcc.n	8001aee <__divsi3+0xc6>
 8001aea:	014b      	lsls	r3, r1, #5
 8001aec:	1ac0      	subs	r0, r0, r3
 8001aee:	4152      	adcs	r2, r2
 8001af0:	0903      	lsrs	r3, r0, #4
 8001af2:	428b      	cmp	r3, r1
 8001af4:	d301      	bcc.n	8001afa <__divsi3+0xd2>
 8001af6:	010b      	lsls	r3, r1, #4
 8001af8:	1ac0      	subs	r0, r0, r3
 8001afa:	4152      	adcs	r2, r2
 8001afc:	08c3      	lsrs	r3, r0, #3
 8001afe:	428b      	cmp	r3, r1
 8001b00:	d301      	bcc.n	8001b06 <__divsi3+0xde>
 8001b02:	00cb      	lsls	r3, r1, #3
 8001b04:	1ac0      	subs	r0, r0, r3
 8001b06:	4152      	adcs	r2, r2
 8001b08:	0883      	lsrs	r3, r0, #2
 8001b0a:	428b      	cmp	r3, r1
 8001b0c:	d301      	bcc.n	8001b12 <__divsi3+0xea>
 8001b0e:	008b      	lsls	r3, r1, #2
 8001b10:	1ac0      	subs	r0, r0, r3
 8001b12:	4152      	adcs	r2, r2
 8001b14:	0843      	lsrs	r3, r0, #1
 8001b16:	428b      	cmp	r3, r1
 8001b18:	d301      	bcc.n	8001b1e <__divsi3+0xf6>
 8001b1a:	004b      	lsls	r3, r1, #1
 8001b1c:	1ac0      	subs	r0, r0, r3
 8001b1e:	4152      	adcs	r2, r2
 8001b20:	1a41      	subs	r1, r0, r1
 8001b22:	d200      	bcs.n	8001b26 <__divsi3+0xfe>
 8001b24:	4601      	mov	r1, r0
 8001b26:	4152      	adcs	r2, r2
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4770      	bx	lr
 8001b2c:	e05d      	b.n	8001bea <__divsi3+0x1c2>
 8001b2e:	0fca      	lsrs	r2, r1, #31
 8001b30:	d000      	beq.n	8001b34 <__divsi3+0x10c>
 8001b32:	4249      	negs	r1, r1
 8001b34:	1003      	asrs	r3, r0, #32
 8001b36:	d300      	bcc.n	8001b3a <__divsi3+0x112>
 8001b38:	4240      	negs	r0, r0
 8001b3a:	4053      	eors	r3, r2
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	469c      	mov	ip, r3
 8001b40:	0903      	lsrs	r3, r0, #4
 8001b42:	428b      	cmp	r3, r1
 8001b44:	d32d      	bcc.n	8001ba2 <__divsi3+0x17a>
 8001b46:	0a03      	lsrs	r3, r0, #8
 8001b48:	428b      	cmp	r3, r1
 8001b4a:	d312      	bcc.n	8001b72 <__divsi3+0x14a>
 8001b4c:	22fc      	movs	r2, #252	; 0xfc
 8001b4e:	0189      	lsls	r1, r1, #6
 8001b50:	ba12      	rev	r2, r2
 8001b52:	0a03      	lsrs	r3, r0, #8
 8001b54:	428b      	cmp	r3, r1
 8001b56:	d30c      	bcc.n	8001b72 <__divsi3+0x14a>
 8001b58:	0189      	lsls	r1, r1, #6
 8001b5a:	1192      	asrs	r2, r2, #6
 8001b5c:	428b      	cmp	r3, r1
 8001b5e:	d308      	bcc.n	8001b72 <__divsi3+0x14a>
 8001b60:	0189      	lsls	r1, r1, #6
 8001b62:	1192      	asrs	r2, r2, #6
 8001b64:	428b      	cmp	r3, r1
 8001b66:	d304      	bcc.n	8001b72 <__divsi3+0x14a>
 8001b68:	0189      	lsls	r1, r1, #6
 8001b6a:	d03a      	beq.n	8001be2 <__divsi3+0x1ba>
 8001b6c:	1192      	asrs	r2, r2, #6
 8001b6e:	e000      	b.n	8001b72 <__divsi3+0x14a>
 8001b70:	0989      	lsrs	r1, r1, #6
 8001b72:	09c3      	lsrs	r3, r0, #7
 8001b74:	428b      	cmp	r3, r1
 8001b76:	d301      	bcc.n	8001b7c <__divsi3+0x154>
 8001b78:	01cb      	lsls	r3, r1, #7
 8001b7a:	1ac0      	subs	r0, r0, r3
 8001b7c:	4152      	adcs	r2, r2
 8001b7e:	0983      	lsrs	r3, r0, #6
 8001b80:	428b      	cmp	r3, r1
 8001b82:	d301      	bcc.n	8001b88 <__divsi3+0x160>
 8001b84:	018b      	lsls	r3, r1, #6
 8001b86:	1ac0      	subs	r0, r0, r3
 8001b88:	4152      	adcs	r2, r2
 8001b8a:	0943      	lsrs	r3, r0, #5
 8001b8c:	428b      	cmp	r3, r1
 8001b8e:	d301      	bcc.n	8001b94 <__divsi3+0x16c>
 8001b90:	014b      	lsls	r3, r1, #5
 8001b92:	1ac0      	subs	r0, r0, r3
 8001b94:	4152      	adcs	r2, r2
 8001b96:	0903      	lsrs	r3, r0, #4
 8001b98:	428b      	cmp	r3, r1
 8001b9a:	d301      	bcc.n	8001ba0 <__divsi3+0x178>
 8001b9c:	010b      	lsls	r3, r1, #4
 8001b9e:	1ac0      	subs	r0, r0, r3
 8001ba0:	4152      	adcs	r2, r2
 8001ba2:	08c3      	lsrs	r3, r0, #3
 8001ba4:	428b      	cmp	r3, r1
 8001ba6:	d301      	bcc.n	8001bac <__divsi3+0x184>
 8001ba8:	00cb      	lsls	r3, r1, #3
 8001baa:	1ac0      	subs	r0, r0, r3
 8001bac:	4152      	adcs	r2, r2
 8001bae:	0883      	lsrs	r3, r0, #2
 8001bb0:	428b      	cmp	r3, r1
 8001bb2:	d301      	bcc.n	8001bb8 <__divsi3+0x190>
 8001bb4:	008b      	lsls	r3, r1, #2
 8001bb6:	1ac0      	subs	r0, r0, r3
 8001bb8:	4152      	adcs	r2, r2
 8001bba:	d2d9      	bcs.n	8001b70 <__divsi3+0x148>
 8001bbc:	0843      	lsrs	r3, r0, #1
 8001bbe:	428b      	cmp	r3, r1
 8001bc0:	d301      	bcc.n	8001bc6 <__divsi3+0x19e>
 8001bc2:	004b      	lsls	r3, r1, #1
 8001bc4:	1ac0      	subs	r0, r0, r3
 8001bc6:	4152      	adcs	r2, r2
 8001bc8:	1a41      	subs	r1, r0, r1
 8001bca:	d200      	bcs.n	8001bce <__divsi3+0x1a6>
 8001bcc:	4601      	mov	r1, r0
 8001bce:	4663      	mov	r3, ip
 8001bd0:	4152      	adcs	r2, r2
 8001bd2:	105b      	asrs	r3, r3, #1
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	d301      	bcc.n	8001bdc <__divsi3+0x1b4>
 8001bd8:	4240      	negs	r0, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d500      	bpl.n	8001be0 <__divsi3+0x1b8>
 8001bde:	4249      	negs	r1, r1
 8001be0:	4770      	bx	lr
 8001be2:	4663      	mov	r3, ip
 8001be4:	105b      	asrs	r3, r3, #1
 8001be6:	d300      	bcc.n	8001bea <__divsi3+0x1c2>
 8001be8:	4240      	negs	r0, r0
 8001bea:	b501      	push	{r0, lr}
 8001bec:	2000      	movs	r0, #0
 8001bee:	f000 f805 	bl	8001bfc <__aeabi_idiv0>
 8001bf2:	bd02      	pop	{r1, pc}

08001bf4 <__aeabi_idivmod>:
 8001bf4:	2900      	cmp	r1, #0
 8001bf6:	d0f8      	beq.n	8001bea <__divsi3+0x1c2>
 8001bf8:	e716      	b.n	8001a28 <__divsi3>
 8001bfa:	4770      	bx	lr

08001bfc <__aeabi_idiv0>:
 8001bfc:	4770      	bx	lr
 8001bfe:	46c0      	nop			; (mov r8, r8)

08001c00 <__aeabi_cdrcmple>:
 8001c00:	4684      	mov	ip, r0
 8001c02:	1c10      	adds	r0, r2, #0
 8001c04:	4662      	mov	r2, ip
 8001c06:	468c      	mov	ip, r1
 8001c08:	1c19      	adds	r1, r3, #0
 8001c0a:	4663      	mov	r3, ip
 8001c0c:	e000      	b.n	8001c10 <__aeabi_cdcmpeq>
 8001c0e:	46c0      	nop			; (mov r8, r8)

08001c10 <__aeabi_cdcmpeq>:
 8001c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001c12:	f000 f8ff 	bl	8001e14 <__ledf2>
 8001c16:	2800      	cmp	r0, #0
 8001c18:	d401      	bmi.n	8001c1e <__aeabi_cdcmpeq+0xe>
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	42c8      	cmn	r0, r1
 8001c1e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001c20 <__aeabi_dcmpeq>:
 8001c20:	b510      	push	{r4, lr}
 8001c22:	f000 f849 	bl	8001cb8 <__eqdf2>
 8001c26:	4240      	negs	r0, r0
 8001c28:	3001      	adds	r0, #1
 8001c2a:	bd10      	pop	{r4, pc}

08001c2c <__aeabi_dcmplt>:
 8001c2c:	b510      	push	{r4, lr}
 8001c2e:	f000 f8f1 	bl	8001e14 <__ledf2>
 8001c32:	2800      	cmp	r0, #0
 8001c34:	db01      	blt.n	8001c3a <__aeabi_dcmplt+0xe>
 8001c36:	2000      	movs	r0, #0
 8001c38:	bd10      	pop	{r4, pc}
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	bd10      	pop	{r4, pc}
 8001c3e:	46c0      	nop			; (mov r8, r8)

08001c40 <__aeabi_dcmple>:
 8001c40:	b510      	push	{r4, lr}
 8001c42:	f000 f8e7 	bl	8001e14 <__ledf2>
 8001c46:	2800      	cmp	r0, #0
 8001c48:	dd01      	ble.n	8001c4e <__aeabi_dcmple+0xe>
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	bd10      	pop	{r4, pc}
 8001c4e:	2001      	movs	r0, #1
 8001c50:	bd10      	pop	{r4, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)

08001c54 <__aeabi_dcmpgt>:
 8001c54:	b510      	push	{r4, lr}
 8001c56:	f000 f86b 	bl	8001d30 <__gedf2>
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	dc01      	bgt.n	8001c62 <__aeabi_dcmpgt+0xe>
 8001c5e:	2000      	movs	r0, #0
 8001c60:	bd10      	pop	{r4, pc}
 8001c62:	2001      	movs	r0, #1
 8001c64:	bd10      	pop	{r4, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)

08001c68 <__aeabi_dcmpge>:
 8001c68:	b510      	push	{r4, lr}
 8001c6a:	f000 f861 	bl	8001d30 <__gedf2>
 8001c6e:	2800      	cmp	r0, #0
 8001c70:	da01      	bge.n	8001c76 <__aeabi_dcmpge+0xe>
 8001c72:	2000      	movs	r0, #0
 8001c74:	bd10      	pop	{r4, pc}
 8001c76:	2001      	movs	r0, #1
 8001c78:	bd10      	pop	{r4, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)

08001c7c <__aeabi_d2uiz>:
 8001c7c:	b570      	push	{r4, r5, r6, lr}
 8001c7e:	2200      	movs	r2, #0
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <__aeabi_d2uiz+0x38>)
 8001c82:	0004      	movs	r4, r0
 8001c84:	000d      	movs	r5, r1
 8001c86:	f7ff ffef 	bl	8001c68 <__aeabi_dcmpge>
 8001c8a:	2800      	cmp	r0, #0
 8001c8c:	d104      	bne.n	8001c98 <__aeabi_d2uiz+0x1c>
 8001c8e:	0020      	movs	r0, r4
 8001c90:	0029      	movs	r1, r5
 8001c92:	f000 ff2d 	bl	8002af0 <__aeabi_d2iz>
 8001c96:	bd70      	pop	{r4, r5, r6, pc}
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <__aeabi_d2uiz+0x38>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	0020      	movs	r0, r4
 8001c9e:	0029      	movs	r1, r5
 8001ca0:	f000 fb94 	bl	80023cc <__aeabi_dsub>
 8001ca4:	f000 ff24 	bl	8002af0 <__aeabi_d2iz>
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	061b      	lsls	r3, r3, #24
 8001cac:	469c      	mov	ip, r3
 8001cae:	4460      	add	r0, ip
 8001cb0:	e7f1      	b.n	8001c96 <__aeabi_d2uiz+0x1a>
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	41e00000 	.word	0x41e00000

08001cb8 <__eqdf2>:
 8001cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cba:	464f      	mov	r7, r9
 8001cbc:	4646      	mov	r6, r8
 8001cbe:	46d6      	mov	lr, sl
 8001cc0:	4694      	mov	ip, r2
 8001cc2:	4691      	mov	r9, r2
 8001cc4:	031a      	lsls	r2, r3, #12
 8001cc6:	0b12      	lsrs	r2, r2, #12
 8001cc8:	4d18      	ldr	r5, [pc, #96]	; (8001d2c <__eqdf2+0x74>)
 8001cca:	b5c0      	push	{r6, r7, lr}
 8001ccc:	004c      	lsls	r4, r1, #1
 8001cce:	030f      	lsls	r7, r1, #12
 8001cd0:	4692      	mov	sl, r2
 8001cd2:	005a      	lsls	r2, r3, #1
 8001cd4:	0006      	movs	r6, r0
 8001cd6:	4680      	mov	r8, r0
 8001cd8:	0b3f      	lsrs	r7, r7, #12
 8001cda:	2001      	movs	r0, #1
 8001cdc:	0d64      	lsrs	r4, r4, #21
 8001cde:	0fc9      	lsrs	r1, r1, #31
 8001ce0:	0d52      	lsrs	r2, r2, #21
 8001ce2:	0fdb      	lsrs	r3, r3, #31
 8001ce4:	42ac      	cmp	r4, r5
 8001ce6:	d00a      	beq.n	8001cfe <__eqdf2+0x46>
 8001ce8:	42aa      	cmp	r2, r5
 8001cea:	d003      	beq.n	8001cf4 <__eqdf2+0x3c>
 8001cec:	4294      	cmp	r4, r2
 8001cee:	d101      	bne.n	8001cf4 <__eqdf2+0x3c>
 8001cf0:	4557      	cmp	r7, sl
 8001cf2:	d00d      	beq.n	8001d10 <__eqdf2+0x58>
 8001cf4:	bce0      	pop	{r5, r6, r7}
 8001cf6:	46ba      	mov	sl, r7
 8001cf8:	46b1      	mov	r9, r6
 8001cfa:	46a8      	mov	r8, r5
 8001cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cfe:	003d      	movs	r5, r7
 8001d00:	4335      	orrs	r5, r6
 8001d02:	d1f7      	bne.n	8001cf4 <__eqdf2+0x3c>
 8001d04:	42a2      	cmp	r2, r4
 8001d06:	d1f5      	bne.n	8001cf4 <__eqdf2+0x3c>
 8001d08:	4652      	mov	r2, sl
 8001d0a:	4665      	mov	r5, ip
 8001d0c:	432a      	orrs	r2, r5
 8001d0e:	d1f1      	bne.n	8001cf4 <__eqdf2+0x3c>
 8001d10:	2001      	movs	r0, #1
 8001d12:	45c8      	cmp	r8, r9
 8001d14:	d1ee      	bne.n	8001cf4 <__eqdf2+0x3c>
 8001d16:	4299      	cmp	r1, r3
 8001d18:	d006      	beq.n	8001d28 <__eqdf2+0x70>
 8001d1a:	2c00      	cmp	r4, #0
 8001d1c:	d1ea      	bne.n	8001cf4 <__eqdf2+0x3c>
 8001d1e:	433e      	orrs	r6, r7
 8001d20:	0030      	movs	r0, r6
 8001d22:	1e46      	subs	r6, r0, #1
 8001d24:	41b0      	sbcs	r0, r6
 8001d26:	e7e5      	b.n	8001cf4 <__eqdf2+0x3c>
 8001d28:	2000      	movs	r0, #0
 8001d2a:	e7e3      	b.n	8001cf4 <__eqdf2+0x3c>
 8001d2c:	000007ff 	.word	0x000007ff

08001d30 <__gedf2>:
 8001d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d32:	464e      	mov	r6, r9
 8001d34:	4645      	mov	r5, r8
 8001d36:	4657      	mov	r7, sl
 8001d38:	46de      	mov	lr, fp
 8001d3a:	0004      	movs	r4, r0
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	b5e0      	push	{r5, r6, r7, lr}
 8001d40:	0016      	movs	r6, r2
 8001d42:	031b      	lsls	r3, r3, #12
 8001d44:	0b1b      	lsrs	r3, r3, #12
 8001d46:	4d32      	ldr	r5, [pc, #200]	; (8001e10 <__gedf2+0xe0>)
 8001d48:	030f      	lsls	r7, r1, #12
 8001d4a:	004a      	lsls	r2, r1, #1
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	0043      	lsls	r3, r0, #1
 8001d50:	46a4      	mov	ip, r4
 8001d52:	46b0      	mov	r8, r6
 8001d54:	0b3f      	lsrs	r7, r7, #12
 8001d56:	0d52      	lsrs	r2, r2, #21
 8001d58:	0fc9      	lsrs	r1, r1, #31
 8001d5a:	0d5b      	lsrs	r3, r3, #21
 8001d5c:	0fc0      	lsrs	r0, r0, #31
 8001d5e:	42aa      	cmp	r2, r5
 8001d60:	d029      	beq.n	8001db6 <__gedf2+0x86>
 8001d62:	42ab      	cmp	r3, r5
 8001d64:	d018      	beq.n	8001d98 <__gedf2+0x68>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d12a      	bne.n	8001dc0 <__gedf2+0x90>
 8001d6a:	433c      	orrs	r4, r7
 8001d6c:	46a3      	mov	fp, r4
 8001d6e:	4265      	negs	r5, r4
 8001d70:	4165      	adcs	r5, r4
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d102      	bne.n	8001d7c <__gedf2+0x4c>
 8001d76:	464c      	mov	r4, r9
 8001d78:	4326      	orrs	r6, r4
 8001d7a:	d027      	beq.n	8001dcc <__gedf2+0x9c>
 8001d7c:	2d00      	cmp	r5, #0
 8001d7e:	d115      	bne.n	8001dac <__gedf2+0x7c>
 8001d80:	4281      	cmp	r1, r0
 8001d82:	d028      	beq.n	8001dd6 <__gedf2+0xa6>
 8001d84:	2002      	movs	r0, #2
 8001d86:	3901      	subs	r1, #1
 8001d88:	4008      	ands	r0, r1
 8001d8a:	3801      	subs	r0, #1
 8001d8c:	bcf0      	pop	{r4, r5, r6, r7}
 8001d8e:	46bb      	mov	fp, r7
 8001d90:	46b2      	mov	sl, r6
 8001d92:	46a9      	mov	r9, r5
 8001d94:	46a0      	mov	r8, r4
 8001d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d98:	464d      	mov	r5, r9
 8001d9a:	432e      	orrs	r6, r5
 8001d9c:	d12f      	bne.n	8001dfe <__gedf2+0xce>
 8001d9e:	2a00      	cmp	r2, #0
 8001da0:	d1ee      	bne.n	8001d80 <__gedf2+0x50>
 8001da2:	433c      	orrs	r4, r7
 8001da4:	4265      	negs	r5, r4
 8001da6:	4165      	adcs	r5, r4
 8001da8:	2d00      	cmp	r5, #0
 8001daa:	d0e9      	beq.n	8001d80 <__gedf2+0x50>
 8001dac:	2800      	cmp	r0, #0
 8001dae:	d1ed      	bne.n	8001d8c <__gedf2+0x5c>
 8001db0:	2001      	movs	r0, #1
 8001db2:	4240      	negs	r0, r0
 8001db4:	e7ea      	b.n	8001d8c <__gedf2+0x5c>
 8001db6:	003d      	movs	r5, r7
 8001db8:	4325      	orrs	r5, r4
 8001dba:	d120      	bne.n	8001dfe <__gedf2+0xce>
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d0eb      	beq.n	8001d98 <__gedf2+0x68>
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1dd      	bne.n	8001d80 <__gedf2+0x50>
 8001dc4:	464c      	mov	r4, r9
 8001dc6:	4326      	orrs	r6, r4
 8001dc8:	d1da      	bne.n	8001d80 <__gedf2+0x50>
 8001dca:	e7db      	b.n	8001d84 <__gedf2+0x54>
 8001dcc:	465b      	mov	r3, fp
 8001dce:	2000      	movs	r0, #0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0db      	beq.n	8001d8c <__gedf2+0x5c>
 8001dd4:	e7d6      	b.n	8001d84 <__gedf2+0x54>
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	dc0a      	bgt.n	8001df0 <__gedf2+0xc0>
 8001dda:	dbe7      	blt.n	8001dac <__gedf2+0x7c>
 8001ddc:	454f      	cmp	r7, r9
 8001dde:	d8d1      	bhi.n	8001d84 <__gedf2+0x54>
 8001de0:	d010      	beq.n	8001e04 <__gedf2+0xd4>
 8001de2:	2000      	movs	r0, #0
 8001de4:	454f      	cmp	r7, r9
 8001de6:	d2d1      	bcs.n	8001d8c <__gedf2+0x5c>
 8001de8:	2900      	cmp	r1, #0
 8001dea:	d0e1      	beq.n	8001db0 <__gedf2+0x80>
 8001dec:	0008      	movs	r0, r1
 8001dee:	e7cd      	b.n	8001d8c <__gedf2+0x5c>
 8001df0:	4243      	negs	r3, r0
 8001df2:	4158      	adcs	r0, r3
 8001df4:	2302      	movs	r3, #2
 8001df6:	4240      	negs	r0, r0
 8001df8:	4018      	ands	r0, r3
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	e7c6      	b.n	8001d8c <__gedf2+0x5c>
 8001dfe:	2002      	movs	r0, #2
 8001e00:	4240      	negs	r0, r0
 8001e02:	e7c3      	b.n	8001d8c <__gedf2+0x5c>
 8001e04:	45c4      	cmp	ip, r8
 8001e06:	d8bd      	bhi.n	8001d84 <__gedf2+0x54>
 8001e08:	2000      	movs	r0, #0
 8001e0a:	45c4      	cmp	ip, r8
 8001e0c:	d2be      	bcs.n	8001d8c <__gedf2+0x5c>
 8001e0e:	e7eb      	b.n	8001de8 <__gedf2+0xb8>
 8001e10:	000007ff 	.word	0x000007ff

08001e14 <__ledf2>:
 8001e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e16:	464e      	mov	r6, r9
 8001e18:	4645      	mov	r5, r8
 8001e1a:	4657      	mov	r7, sl
 8001e1c:	46de      	mov	lr, fp
 8001e1e:	0004      	movs	r4, r0
 8001e20:	0018      	movs	r0, r3
 8001e22:	b5e0      	push	{r5, r6, r7, lr}
 8001e24:	0016      	movs	r6, r2
 8001e26:	031b      	lsls	r3, r3, #12
 8001e28:	0b1b      	lsrs	r3, r3, #12
 8001e2a:	4d31      	ldr	r5, [pc, #196]	; (8001ef0 <__ledf2+0xdc>)
 8001e2c:	030f      	lsls	r7, r1, #12
 8001e2e:	004a      	lsls	r2, r1, #1
 8001e30:	4699      	mov	r9, r3
 8001e32:	0043      	lsls	r3, r0, #1
 8001e34:	46a4      	mov	ip, r4
 8001e36:	46b0      	mov	r8, r6
 8001e38:	0b3f      	lsrs	r7, r7, #12
 8001e3a:	0d52      	lsrs	r2, r2, #21
 8001e3c:	0fc9      	lsrs	r1, r1, #31
 8001e3e:	0d5b      	lsrs	r3, r3, #21
 8001e40:	0fc0      	lsrs	r0, r0, #31
 8001e42:	42aa      	cmp	r2, r5
 8001e44:	d011      	beq.n	8001e6a <__ledf2+0x56>
 8001e46:	42ab      	cmp	r3, r5
 8001e48:	d014      	beq.n	8001e74 <__ledf2+0x60>
 8001e4a:	2a00      	cmp	r2, #0
 8001e4c:	d12f      	bne.n	8001eae <__ledf2+0x9a>
 8001e4e:	433c      	orrs	r4, r7
 8001e50:	46a3      	mov	fp, r4
 8001e52:	4265      	negs	r5, r4
 8001e54:	4165      	adcs	r5, r4
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d114      	bne.n	8001e84 <__ledf2+0x70>
 8001e5a:	464c      	mov	r4, r9
 8001e5c:	4326      	orrs	r6, r4
 8001e5e:	d111      	bne.n	8001e84 <__ledf2+0x70>
 8001e60:	465b      	mov	r3, fp
 8001e62:	2000      	movs	r0, #0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d017      	beq.n	8001e98 <__ledf2+0x84>
 8001e68:	e010      	b.n	8001e8c <__ledf2+0x78>
 8001e6a:	003d      	movs	r5, r7
 8001e6c:	4325      	orrs	r5, r4
 8001e6e:	d112      	bne.n	8001e96 <__ledf2+0x82>
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d11c      	bne.n	8001eae <__ledf2+0x9a>
 8001e74:	464d      	mov	r5, r9
 8001e76:	432e      	orrs	r6, r5
 8001e78:	d10d      	bne.n	8001e96 <__ledf2+0x82>
 8001e7a:	2a00      	cmp	r2, #0
 8001e7c:	d104      	bne.n	8001e88 <__ledf2+0x74>
 8001e7e:	433c      	orrs	r4, r7
 8001e80:	4265      	negs	r5, r4
 8001e82:	4165      	adcs	r5, r4
 8001e84:	2d00      	cmp	r5, #0
 8001e86:	d10d      	bne.n	8001ea4 <__ledf2+0x90>
 8001e88:	4281      	cmp	r1, r0
 8001e8a:	d016      	beq.n	8001eba <__ledf2+0xa6>
 8001e8c:	2002      	movs	r0, #2
 8001e8e:	3901      	subs	r1, #1
 8001e90:	4008      	ands	r0, r1
 8001e92:	3801      	subs	r0, #1
 8001e94:	e000      	b.n	8001e98 <__ledf2+0x84>
 8001e96:	2002      	movs	r0, #2
 8001e98:	bcf0      	pop	{r4, r5, r6, r7}
 8001e9a:	46bb      	mov	fp, r7
 8001e9c:	46b2      	mov	sl, r6
 8001e9e:	46a9      	mov	r9, r5
 8001ea0:	46a0      	mov	r8, r4
 8001ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	d1f7      	bne.n	8001e98 <__ledf2+0x84>
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	4240      	negs	r0, r0
 8001eac:	e7f4      	b.n	8001e98 <__ledf2+0x84>
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1ea      	bne.n	8001e88 <__ledf2+0x74>
 8001eb2:	464c      	mov	r4, r9
 8001eb4:	4326      	orrs	r6, r4
 8001eb6:	d1e7      	bne.n	8001e88 <__ledf2+0x74>
 8001eb8:	e7e8      	b.n	8001e8c <__ledf2+0x78>
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	dd06      	ble.n	8001ecc <__ledf2+0xb8>
 8001ebe:	4243      	negs	r3, r0
 8001ec0:	4158      	adcs	r0, r3
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	4240      	negs	r0, r0
 8001ec6:	4018      	ands	r0, r3
 8001ec8:	3801      	subs	r0, #1
 8001eca:	e7e5      	b.n	8001e98 <__ledf2+0x84>
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	dbe9      	blt.n	8001ea4 <__ledf2+0x90>
 8001ed0:	454f      	cmp	r7, r9
 8001ed2:	d8db      	bhi.n	8001e8c <__ledf2+0x78>
 8001ed4:	d006      	beq.n	8001ee4 <__ledf2+0xd0>
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	454f      	cmp	r7, r9
 8001eda:	d2dd      	bcs.n	8001e98 <__ledf2+0x84>
 8001edc:	2900      	cmp	r1, #0
 8001ede:	d0e3      	beq.n	8001ea8 <__ledf2+0x94>
 8001ee0:	0008      	movs	r0, r1
 8001ee2:	e7d9      	b.n	8001e98 <__ledf2+0x84>
 8001ee4:	45c4      	cmp	ip, r8
 8001ee6:	d8d1      	bhi.n	8001e8c <__ledf2+0x78>
 8001ee8:	2000      	movs	r0, #0
 8001eea:	45c4      	cmp	ip, r8
 8001eec:	d2d4      	bcs.n	8001e98 <__ledf2+0x84>
 8001eee:	e7f5      	b.n	8001edc <__ledf2+0xc8>
 8001ef0:	000007ff 	.word	0x000007ff

08001ef4 <__aeabi_dmul>:
 8001ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef6:	4657      	mov	r7, sl
 8001ef8:	464e      	mov	r6, r9
 8001efa:	4645      	mov	r5, r8
 8001efc:	46de      	mov	lr, fp
 8001efe:	b5e0      	push	{r5, r6, r7, lr}
 8001f00:	4698      	mov	r8, r3
 8001f02:	030c      	lsls	r4, r1, #12
 8001f04:	004b      	lsls	r3, r1, #1
 8001f06:	0006      	movs	r6, r0
 8001f08:	4692      	mov	sl, r2
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	0b24      	lsrs	r4, r4, #12
 8001f0e:	0d5b      	lsrs	r3, r3, #21
 8001f10:	0fcf      	lsrs	r7, r1, #31
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d06c      	beq.n	8001ff0 <__aeabi_dmul+0xfc>
 8001f16:	4add      	ldr	r2, [pc, #884]	; (800228c <__aeabi_dmul+0x398>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_dmul+0x2a>
 8001f1c:	e086      	b.n	800202c <__aeabi_dmul+0x138>
 8001f1e:	0f42      	lsrs	r2, r0, #29
 8001f20:	00e4      	lsls	r4, r4, #3
 8001f22:	4314      	orrs	r4, r2
 8001f24:	2280      	movs	r2, #128	; 0x80
 8001f26:	0412      	lsls	r2, r2, #16
 8001f28:	4314      	orrs	r4, r2
 8001f2a:	4ad9      	ldr	r2, [pc, #868]	; (8002290 <__aeabi_dmul+0x39c>)
 8001f2c:	00c5      	lsls	r5, r0, #3
 8001f2e:	4694      	mov	ip, r2
 8001f30:	4463      	add	r3, ip
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2300      	movs	r3, #0
 8001f36:	4699      	mov	r9, r3
 8001f38:	469b      	mov	fp, r3
 8001f3a:	4643      	mov	r3, r8
 8001f3c:	4642      	mov	r2, r8
 8001f3e:	031e      	lsls	r6, r3, #12
 8001f40:	0fd2      	lsrs	r2, r2, #31
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4650      	mov	r0, sl
 8001f46:	4690      	mov	r8, r2
 8001f48:	0b36      	lsrs	r6, r6, #12
 8001f4a:	0d5b      	lsrs	r3, r3, #21
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dmul+0x5c>
 8001f4e:	e078      	b.n	8002042 <__aeabi_dmul+0x14e>
 8001f50:	4ace      	ldr	r2, [pc, #824]	; (800228c <__aeabi_dmul+0x398>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d01d      	beq.n	8001f92 <__aeabi_dmul+0x9e>
 8001f56:	49ce      	ldr	r1, [pc, #824]	; (8002290 <__aeabi_dmul+0x39c>)
 8001f58:	0f42      	lsrs	r2, r0, #29
 8001f5a:	468c      	mov	ip, r1
 8001f5c:	9900      	ldr	r1, [sp, #0]
 8001f5e:	4463      	add	r3, ip
 8001f60:	00f6      	lsls	r6, r6, #3
 8001f62:	468c      	mov	ip, r1
 8001f64:	4316      	orrs	r6, r2
 8001f66:	2280      	movs	r2, #128	; 0x80
 8001f68:	449c      	add	ip, r3
 8001f6a:	0412      	lsls	r2, r2, #16
 8001f6c:	4663      	mov	r3, ip
 8001f6e:	4316      	orrs	r6, r2
 8001f70:	00c2      	lsls	r2, r0, #3
 8001f72:	2000      	movs	r0, #0
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	9900      	ldr	r1, [sp, #0]
 8001f78:	4643      	mov	r3, r8
 8001f7a:	3101      	adds	r1, #1
 8001f7c:	468c      	mov	ip, r1
 8001f7e:	4649      	mov	r1, r9
 8001f80:	407b      	eors	r3, r7
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	290f      	cmp	r1, #15
 8001f86:	d900      	bls.n	8001f8a <__aeabi_dmul+0x96>
 8001f88:	e07e      	b.n	8002088 <__aeabi_dmul+0x194>
 8001f8a:	4bc2      	ldr	r3, [pc, #776]	; (8002294 <__aeabi_dmul+0x3a0>)
 8001f8c:	0089      	lsls	r1, r1, #2
 8001f8e:	5859      	ldr	r1, [r3, r1]
 8001f90:	468f      	mov	pc, r1
 8001f92:	4652      	mov	r2, sl
 8001f94:	9b00      	ldr	r3, [sp, #0]
 8001f96:	4332      	orrs	r2, r6
 8001f98:	d000      	beq.n	8001f9c <__aeabi_dmul+0xa8>
 8001f9a:	e156      	b.n	800224a <__aeabi_dmul+0x356>
 8001f9c:	49bb      	ldr	r1, [pc, #748]	; (800228c <__aeabi_dmul+0x398>)
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	468c      	mov	ip, r1
 8001fa2:	4463      	add	r3, ip
 8001fa4:	4649      	mov	r1, r9
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	2302      	movs	r3, #2
 8001faa:	4319      	orrs	r1, r3
 8001fac:	4689      	mov	r9, r1
 8001fae:	2002      	movs	r0, #2
 8001fb0:	e7e1      	b.n	8001f76 <__aeabi_dmul+0x82>
 8001fb2:	4643      	mov	r3, r8
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	0034      	movs	r4, r6
 8001fb8:	0015      	movs	r5, r2
 8001fba:	4683      	mov	fp, r0
 8001fbc:	465b      	mov	r3, fp
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d05e      	beq.n	8002080 <__aeabi_dmul+0x18c>
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dmul+0xd4>
 8001fc6:	e1f3      	b.n	80023b0 <__aeabi_dmul+0x4bc>
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d000      	beq.n	8001fce <__aeabi_dmul+0xda>
 8001fcc:	e118      	b.n	8002200 <__aeabi_dmul+0x30c>
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2400      	movs	r4, #0
 8001fd2:	2500      	movs	r5, #0
 8001fd4:	9b01      	ldr	r3, [sp, #4]
 8001fd6:	0512      	lsls	r2, r2, #20
 8001fd8:	4322      	orrs	r2, r4
 8001fda:	07db      	lsls	r3, r3, #31
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	0028      	movs	r0, r5
 8001fe0:	0011      	movs	r1, r2
 8001fe2:	b007      	add	sp, #28
 8001fe4:	bcf0      	pop	{r4, r5, r6, r7}
 8001fe6:	46bb      	mov	fp, r7
 8001fe8:	46b2      	mov	sl, r6
 8001fea:	46a9      	mov	r9, r5
 8001fec:	46a0      	mov	r8, r4
 8001fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff0:	0025      	movs	r5, r4
 8001ff2:	4305      	orrs	r5, r0
 8001ff4:	d100      	bne.n	8001ff8 <__aeabi_dmul+0x104>
 8001ff6:	e141      	b.n	800227c <__aeabi_dmul+0x388>
 8001ff8:	2c00      	cmp	r4, #0
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dmul+0x10a>
 8001ffc:	e1ad      	b.n	800235a <__aeabi_dmul+0x466>
 8001ffe:	0020      	movs	r0, r4
 8002000:	f000 fe02 	bl	8002c08 <__clzsi2>
 8002004:	0001      	movs	r1, r0
 8002006:	0002      	movs	r2, r0
 8002008:	390b      	subs	r1, #11
 800200a:	231d      	movs	r3, #29
 800200c:	0010      	movs	r0, r2
 800200e:	1a5b      	subs	r3, r3, r1
 8002010:	0031      	movs	r1, r6
 8002012:	0035      	movs	r5, r6
 8002014:	3808      	subs	r0, #8
 8002016:	4084      	lsls	r4, r0
 8002018:	40d9      	lsrs	r1, r3
 800201a:	4085      	lsls	r5, r0
 800201c:	430c      	orrs	r4, r1
 800201e:	489e      	ldr	r0, [pc, #632]	; (8002298 <__aeabi_dmul+0x3a4>)
 8002020:	1a83      	subs	r3, r0, r2
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	2300      	movs	r3, #0
 8002026:	4699      	mov	r9, r3
 8002028:	469b      	mov	fp, r3
 800202a:	e786      	b.n	8001f3a <__aeabi_dmul+0x46>
 800202c:	0005      	movs	r5, r0
 800202e:	4325      	orrs	r5, r4
 8002030:	d000      	beq.n	8002034 <__aeabi_dmul+0x140>
 8002032:	e11c      	b.n	800226e <__aeabi_dmul+0x37a>
 8002034:	2208      	movs	r2, #8
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	2302      	movs	r3, #2
 800203a:	2400      	movs	r4, #0
 800203c:	4691      	mov	r9, r2
 800203e:	469b      	mov	fp, r3
 8002040:	e77b      	b.n	8001f3a <__aeabi_dmul+0x46>
 8002042:	4652      	mov	r2, sl
 8002044:	4332      	orrs	r2, r6
 8002046:	d100      	bne.n	800204a <__aeabi_dmul+0x156>
 8002048:	e10a      	b.n	8002260 <__aeabi_dmul+0x36c>
 800204a:	2e00      	cmp	r6, #0
 800204c:	d100      	bne.n	8002050 <__aeabi_dmul+0x15c>
 800204e:	e176      	b.n	800233e <__aeabi_dmul+0x44a>
 8002050:	0030      	movs	r0, r6
 8002052:	f000 fdd9 	bl	8002c08 <__clzsi2>
 8002056:	0002      	movs	r2, r0
 8002058:	3a0b      	subs	r2, #11
 800205a:	231d      	movs	r3, #29
 800205c:	0001      	movs	r1, r0
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	4652      	mov	r2, sl
 8002062:	3908      	subs	r1, #8
 8002064:	40da      	lsrs	r2, r3
 8002066:	408e      	lsls	r6, r1
 8002068:	4316      	orrs	r6, r2
 800206a:	4652      	mov	r2, sl
 800206c:	408a      	lsls	r2, r1
 800206e:	9b00      	ldr	r3, [sp, #0]
 8002070:	4989      	ldr	r1, [pc, #548]	; (8002298 <__aeabi_dmul+0x3a4>)
 8002072:	1a18      	subs	r0, r3, r0
 8002074:	0003      	movs	r3, r0
 8002076:	468c      	mov	ip, r1
 8002078:	4463      	add	r3, ip
 800207a:	2000      	movs	r0, #0
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	e77a      	b.n	8001f76 <__aeabi_dmul+0x82>
 8002080:	2400      	movs	r4, #0
 8002082:	2500      	movs	r5, #0
 8002084:	4a81      	ldr	r2, [pc, #516]	; (800228c <__aeabi_dmul+0x398>)
 8002086:	e7a5      	b.n	8001fd4 <__aeabi_dmul+0xe0>
 8002088:	0c2f      	lsrs	r7, r5, #16
 800208a:	042d      	lsls	r5, r5, #16
 800208c:	0c2d      	lsrs	r5, r5, #16
 800208e:	002b      	movs	r3, r5
 8002090:	0c11      	lsrs	r1, r2, #16
 8002092:	0412      	lsls	r2, r2, #16
 8002094:	0c12      	lsrs	r2, r2, #16
 8002096:	4353      	muls	r3, r2
 8002098:	4698      	mov	r8, r3
 800209a:	0013      	movs	r3, r2
 800209c:	0028      	movs	r0, r5
 800209e:	437b      	muls	r3, r7
 80020a0:	4699      	mov	r9, r3
 80020a2:	4348      	muls	r0, r1
 80020a4:	4448      	add	r0, r9
 80020a6:	4683      	mov	fp, r0
 80020a8:	4640      	mov	r0, r8
 80020aa:	000b      	movs	r3, r1
 80020ac:	0c00      	lsrs	r0, r0, #16
 80020ae:	4682      	mov	sl, r0
 80020b0:	4658      	mov	r0, fp
 80020b2:	437b      	muls	r3, r7
 80020b4:	4450      	add	r0, sl
 80020b6:	9302      	str	r3, [sp, #8]
 80020b8:	4581      	cmp	r9, r0
 80020ba:	d906      	bls.n	80020ca <__aeabi_dmul+0x1d6>
 80020bc:	469a      	mov	sl, r3
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	025b      	lsls	r3, r3, #9
 80020c2:	4699      	mov	r9, r3
 80020c4:	44ca      	add	sl, r9
 80020c6:	4653      	mov	r3, sl
 80020c8:	9302      	str	r3, [sp, #8]
 80020ca:	0c03      	lsrs	r3, r0, #16
 80020cc:	469b      	mov	fp, r3
 80020ce:	4643      	mov	r3, r8
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	0400      	lsls	r0, r0, #16
 80020d4:	0c1b      	lsrs	r3, r3, #16
 80020d6:	4698      	mov	r8, r3
 80020d8:	0003      	movs	r3, r0
 80020da:	4443      	add	r3, r8
 80020dc:	9304      	str	r3, [sp, #16]
 80020de:	0c33      	lsrs	r3, r6, #16
 80020e0:	4699      	mov	r9, r3
 80020e2:	002b      	movs	r3, r5
 80020e4:	0436      	lsls	r6, r6, #16
 80020e6:	0c36      	lsrs	r6, r6, #16
 80020e8:	4373      	muls	r3, r6
 80020ea:	4698      	mov	r8, r3
 80020ec:	0033      	movs	r3, r6
 80020ee:	437b      	muls	r3, r7
 80020f0:	469a      	mov	sl, r3
 80020f2:	464b      	mov	r3, r9
 80020f4:	435d      	muls	r5, r3
 80020f6:	435f      	muls	r7, r3
 80020f8:	4643      	mov	r3, r8
 80020fa:	4455      	add	r5, sl
 80020fc:	0c18      	lsrs	r0, r3, #16
 80020fe:	1940      	adds	r0, r0, r5
 8002100:	4582      	cmp	sl, r0
 8002102:	d903      	bls.n	800210c <__aeabi_dmul+0x218>
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	025b      	lsls	r3, r3, #9
 8002108:	469a      	mov	sl, r3
 800210a:	4457      	add	r7, sl
 800210c:	0c05      	lsrs	r5, r0, #16
 800210e:	19eb      	adds	r3, r5, r7
 8002110:	9305      	str	r3, [sp, #20]
 8002112:	4643      	mov	r3, r8
 8002114:	041d      	lsls	r5, r3, #16
 8002116:	0c2d      	lsrs	r5, r5, #16
 8002118:	0400      	lsls	r0, r0, #16
 800211a:	1940      	adds	r0, r0, r5
 800211c:	0c25      	lsrs	r5, r4, #16
 800211e:	0424      	lsls	r4, r4, #16
 8002120:	0c24      	lsrs	r4, r4, #16
 8002122:	0027      	movs	r7, r4
 8002124:	4357      	muls	r7, r2
 8002126:	436a      	muls	r2, r5
 8002128:	4690      	mov	r8, r2
 800212a:	002a      	movs	r2, r5
 800212c:	0c3b      	lsrs	r3, r7, #16
 800212e:	469a      	mov	sl, r3
 8002130:	434a      	muls	r2, r1
 8002132:	4361      	muls	r1, r4
 8002134:	4441      	add	r1, r8
 8002136:	4451      	add	r1, sl
 8002138:	4483      	add	fp, r0
 800213a:	4588      	cmp	r8, r1
 800213c:	d903      	bls.n	8002146 <__aeabi_dmul+0x252>
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	025b      	lsls	r3, r3, #9
 8002142:	4698      	mov	r8, r3
 8002144:	4442      	add	r2, r8
 8002146:	043f      	lsls	r7, r7, #16
 8002148:	0c0b      	lsrs	r3, r1, #16
 800214a:	0c3f      	lsrs	r7, r7, #16
 800214c:	0409      	lsls	r1, r1, #16
 800214e:	19c9      	adds	r1, r1, r7
 8002150:	0027      	movs	r7, r4
 8002152:	4698      	mov	r8, r3
 8002154:	464b      	mov	r3, r9
 8002156:	4377      	muls	r7, r6
 8002158:	435c      	muls	r4, r3
 800215a:	436e      	muls	r6, r5
 800215c:	435d      	muls	r5, r3
 800215e:	0c3b      	lsrs	r3, r7, #16
 8002160:	4699      	mov	r9, r3
 8002162:	19a4      	adds	r4, r4, r6
 8002164:	444c      	add	r4, r9
 8002166:	4442      	add	r2, r8
 8002168:	9503      	str	r5, [sp, #12]
 800216a:	42a6      	cmp	r6, r4
 800216c:	d904      	bls.n	8002178 <__aeabi_dmul+0x284>
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	025b      	lsls	r3, r3, #9
 8002172:	4698      	mov	r8, r3
 8002174:	4445      	add	r5, r8
 8002176:	9503      	str	r5, [sp, #12]
 8002178:	9b02      	ldr	r3, [sp, #8]
 800217a:	043f      	lsls	r7, r7, #16
 800217c:	445b      	add	r3, fp
 800217e:	001e      	movs	r6, r3
 8002180:	4283      	cmp	r3, r0
 8002182:	4180      	sbcs	r0, r0
 8002184:	0423      	lsls	r3, r4, #16
 8002186:	4698      	mov	r8, r3
 8002188:	9b05      	ldr	r3, [sp, #20]
 800218a:	0c3f      	lsrs	r7, r7, #16
 800218c:	4447      	add	r7, r8
 800218e:	4698      	mov	r8, r3
 8002190:	1876      	adds	r6, r6, r1
 8002192:	428e      	cmp	r6, r1
 8002194:	4189      	sbcs	r1, r1
 8002196:	4447      	add	r7, r8
 8002198:	4240      	negs	r0, r0
 800219a:	183d      	adds	r5, r7, r0
 800219c:	46a8      	mov	r8, r5
 800219e:	4693      	mov	fp, r2
 80021a0:	4249      	negs	r1, r1
 80021a2:	468a      	mov	sl, r1
 80021a4:	44c3      	add	fp, r8
 80021a6:	429f      	cmp	r7, r3
 80021a8:	41bf      	sbcs	r7, r7
 80021aa:	4580      	cmp	r8, r0
 80021ac:	4180      	sbcs	r0, r0
 80021ae:	9b03      	ldr	r3, [sp, #12]
 80021b0:	44da      	add	sl, fp
 80021b2:	4698      	mov	r8, r3
 80021b4:	4653      	mov	r3, sl
 80021b6:	4240      	negs	r0, r0
 80021b8:	427f      	negs	r7, r7
 80021ba:	4307      	orrs	r7, r0
 80021bc:	0c24      	lsrs	r4, r4, #16
 80021be:	4593      	cmp	fp, r2
 80021c0:	4192      	sbcs	r2, r2
 80021c2:	458a      	cmp	sl, r1
 80021c4:	4189      	sbcs	r1, r1
 80021c6:	193f      	adds	r7, r7, r4
 80021c8:	0ddc      	lsrs	r4, r3, #23
 80021ca:	9b04      	ldr	r3, [sp, #16]
 80021cc:	0275      	lsls	r5, r6, #9
 80021ce:	431d      	orrs	r5, r3
 80021d0:	1e68      	subs	r0, r5, #1
 80021d2:	4185      	sbcs	r5, r0
 80021d4:	4653      	mov	r3, sl
 80021d6:	4252      	negs	r2, r2
 80021d8:	4249      	negs	r1, r1
 80021da:	430a      	orrs	r2, r1
 80021dc:	18bf      	adds	r7, r7, r2
 80021de:	4447      	add	r7, r8
 80021e0:	0df6      	lsrs	r6, r6, #23
 80021e2:	027f      	lsls	r7, r7, #9
 80021e4:	4335      	orrs	r5, r6
 80021e6:	025a      	lsls	r2, r3, #9
 80021e8:	433c      	orrs	r4, r7
 80021ea:	4315      	orrs	r5, r2
 80021ec:	01fb      	lsls	r3, r7, #7
 80021ee:	d400      	bmi.n	80021f2 <__aeabi_dmul+0x2fe>
 80021f0:	e0c1      	b.n	8002376 <__aeabi_dmul+0x482>
 80021f2:	2101      	movs	r1, #1
 80021f4:	086a      	lsrs	r2, r5, #1
 80021f6:	400d      	ands	r5, r1
 80021f8:	4315      	orrs	r5, r2
 80021fa:	07e2      	lsls	r2, r4, #31
 80021fc:	4315      	orrs	r5, r2
 80021fe:	0864      	lsrs	r4, r4, #1
 8002200:	4926      	ldr	r1, [pc, #152]	; (800229c <__aeabi_dmul+0x3a8>)
 8002202:	4461      	add	r1, ip
 8002204:	2900      	cmp	r1, #0
 8002206:	dd56      	ble.n	80022b6 <__aeabi_dmul+0x3c2>
 8002208:	076b      	lsls	r3, r5, #29
 800220a:	d009      	beq.n	8002220 <__aeabi_dmul+0x32c>
 800220c:	220f      	movs	r2, #15
 800220e:	402a      	ands	r2, r5
 8002210:	2a04      	cmp	r2, #4
 8002212:	d005      	beq.n	8002220 <__aeabi_dmul+0x32c>
 8002214:	1d2a      	adds	r2, r5, #4
 8002216:	42aa      	cmp	r2, r5
 8002218:	41ad      	sbcs	r5, r5
 800221a:	426d      	negs	r5, r5
 800221c:	1964      	adds	r4, r4, r5
 800221e:	0015      	movs	r5, r2
 8002220:	01e3      	lsls	r3, r4, #7
 8002222:	d504      	bpl.n	800222e <__aeabi_dmul+0x33a>
 8002224:	2180      	movs	r1, #128	; 0x80
 8002226:	4a1e      	ldr	r2, [pc, #120]	; (80022a0 <__aeabi_dmul+0x3ac>)
 8002228:	00c9      	lsls	r1, r1, #3
 800222a:	4014      	ands	r4, r2
 800222c:	4461      	add	r1, ip
 800222e:	4a1d      	ldr	r2, [pc, #116]	; (80022a4 <__aeabi_dmul+0x3b0>)
 8002230:	4291      	cmp	r1, r2
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x342>
 8002234:	e724      	b.n	8002080 <__aeabi_dmul+0x18c>
 8002236:	0762      	lsls	r2, r4, #29
 8002238:	08ed      	lsrs	r5, r5, #3
 800223a:	0264      	lsls	r4, r4, #9
 800223c:	0549      	lsls	r1, r1, #21
 800223e:	4315      	orrs	r5, r2
 8002240:	0b24      	lsrs	r4, r4, #12
 8002242:	0d4a      	lsrs	r2, r1, #21
 8002244:	e6c6      	b.n	8001fd4 <__aeabi_dmul+0xe0>
 8002246:	9701      	str	r7, [sp, #4]
 8002248:	e6b8      	b.n	8001fbc <__aeabi_dmul+0xc8>
 800224a:	4a10      	ldr	r2, [pc, #64]	; (800228c <__aeabi_dmul+0x398>)
 800224c:	2003      	movs	r0, #3
 800224e:	4694      	mov	ip, r2
 8002250:	4463      	add	r3, ip
 8002252:	464a      	mov	r2, r9
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	2303      	movs	r3, #3
 8002258:	431a      	orrs	r2, r3
 800225a:	4691      	mov	r9, r2
 800225c:	4652      	mov	r2, sl
 800225e:	e68a      	b.n	8001f76 <__aeabi_dmul+0x82>
 8002260:	4649      	mov	r1, r9
 8002262:	2301      	movs	r3, #1
 8002264:	4319      	orrs	r1, r3
 8002266:	4689      	mov	r9, r1
 8002268:	2600      	movs	r6, #0
 800226a:	2001      	movs	r0, #1
 800226c:	e683      	b.n	8001f76 <__aeabi_dmul+0x82>
 800226e:	220c      	movs	r2, #12
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2303      	movs	r3, #3
 8002274:	0005      	movs	r5, r0
 8002276:	4691      	mov	r9, r2
 8002278:	469b      	mov	fp, r3
 800227a:	e65e      	b.n	8001f3a <__aeabi_dmul+0x46>
 800227c:	2304      	movs	r3, #4
 800227e:	4699      	mov	r9, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	3301      	adds	r3, #1
 8002286:	2400      	movs	r4, #0
 8002288:	469b      	mov	fp, r3
 800228a:	e656      	b.n	8001f3a <__aeabi_dmul+0x46>
 800228c:	000007ff 	.word	0x000007ff
 8002290:	fffffc01 	.word	0xfffffc01
 8002294:	08002f00 	.word	0x08002f00
 8002298:	fffffc0d 	.word	0xfffffc0d
 800229c:	000003ff 	.word	0x000003ff
 80022a0:	feffffff 	.word	0xfeffffff
 80022a4:	000007fe 	.word	0x000007fe
 80022a8:	2300      	movs	r3, #0
 80022aa:	2480      	movs	r4, #128	; 0x80
 80022ac:	2500      	movs	r5, #0
 80022ae:	4a44      	ldr	r2, [pc, #272]	; (80023c0 <__aeabi_dmul+0x4cc>)
 80022b0:	9301      	str	r3, [sp, #4]
 80022b2:	0324      	lsls	r4, r4, #12
 80022b4:	e68e      	b.n	8001fd4 <__aeabi_dmul+0xe0>
 80022b6:	2001      	movs	r0, #1
 80022b8:	1a40      	subs	r0, r0, r1
 80022ba:	2838      	cmp	r0, #56	; 0x38
 80022bc:	dd00      	ble.n	80022c0 <__aeabi_dmul+0x3cc>
 80022be:	e686      	b.n	8001fce <__aeabi_dmul+0xda>
 80022c0:	281f      	cmp	r0, #31
 80022c2:	dd5b      	ble.n	800237c <__aeabi_dmul+0x488>
 80022c4:	221f      	movs	r2, #31
 80022c6:	0023      	movs	r3, r4
 80022c8:	4252      	negs	r2, r2
 80022ca:	1a51      	subs	r1, r2, r1
 80022cc:	40cb      	lsrs	r3, r1
 80022ce:	0019      	movs	r1, r3
 80022d0:	2820      	cmp	r0, #32
 80022d2:	d003      	beq.n	80022dc <__aeabi_dmul+0x3e8>
 80022d4:	4a3b      	ldr	r2, [pc, #236]	; (80023c4 <__aeabi_dmul+0x4d0>)
 80022d6:	4462      	add	r2, ip
 80022d8:	4094      	lsls	r4, r2
 80022da:	4325      	orrs	r5, r4
 80022dc:	1e6a      	subs	r2, r5, #1
 80022de:	4195      	sbcs	r5, r2
 80022e0:	002a      	movs	r2, r5
 80022e2:	430a      	orrs	r2, r1
 80022e4:	2107      	movs	r1, #7
 80022e6:	000d      	movs	r5, r1
 80022e8:	2400      	movs	r4, #0
 80022ea:	4015      	ands	r5, r2
 80022ec:	4211      	tst	r1, r2
 80022ee:	d05b      	beq.n	80023a8 <__aeabi_dmul+0x4b4>
 80022f0:	210f      	movs	r1, #15
 80022f2:	2400      	movs	r4, #0
 80022f4:	4011      	ands	r1, r2
 80022f6:	2904      	cmp	r1, #4
 80022f8:	d053      	beq.n	80023a2 <__aeabi_dmul+0x4ae>
 80022fa:	1d11      	adds	r1, r2, #4
 80022fc:	4291      	cmp	r1, r2
 80022fe:	4192      	sbcs	r2, r2
 8002300:	4252      	negs	r2, r2
 8002302:	18a4      	adds	r4, r4, r2
 8002304:	000a      	movs	r2, r1
 8002306:	0223      	lsls	r3, r4, #8
 8002308:	d54b      	bpl.n	80023a2 <__aeabi_dmul+0x4ae>
 800230a:	2201      	movs	r2, #1
 800230c:	2400      	movs	r4, #0
 800230e:	2500      	movs	r5, #0
 8002310:	e660      	b.n	8001fd4 <__aeabi_dmul+0xe0>
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	031b      	lsls	r3, r3, #12
 8002316:	421c      	tst	r4, r3
 8002318:	d009      	beq.n	800232e <__aeabi_dmul+0x43a>
 800231a:	421e      	tst	r6, r3
 800231c:	d107      	bne.n	800232e <__aeabi_dmul+0x43a>
 800231e:	4333      	orrs	r3, r6
 8002320:	031c      	lsls	r4, r3, #12
 8002322:	4643      	mov	r3, r8
 8002324:	0015      	movs	r5, r2
 8002326:	0b24      	lsrs	r4, r4, #12
 8002328:	4a25      	ldr	r2, [pc, #148]	; (80023c0 <__aeabi_dmul+0x4cc>)
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	e652      	b.n	8001fd4 <__aeabi_dmul+0xe0>
 800232e:	2280      	movs	r2, #128	; 0x80
 8002330:	0312      	lsls	r2, r2, #12
 8002332:	4314      	orrs	r4, r2
 8002334:	0324      	lsls	r4, r4, #12
 8002336:	4a22      	ldr	r2, [pc, #136]	; (80023c0 <__aeabi_dmul+0x4cc>)
 8002338:	0b24      	lsrs	r4, r4, #12
 800233a:	9701      	str	r7, [sp, #4]
 800233c:	e64a      	b.n	8001fd4 <__aeabi_dmul+0xe0>
 800233e:	f000 fc63 	bl	8002c08 <__clzsi2>
 8002342:	0003      	movs	r3, r0
 8002344:	001a      	movs	r2, r3
 8002346:	3215      	adds	r2, #21
 8002348:	3020      	adds	r0, #32
 800234a:	2a1c      	cmp	r2, #28
 800234c:	dc00      	bgt.n	8002350 <__aeabi_dmul+0x45c>
 800234e:	e684      	b.n	800205a <__aeabi_dmul+0x166>
 8002350:	4656      	mov	r6, sl
 8002352:	3b08      	subs	r3, #8
 8002354:	2200      	movs	r2, #0
 8002356:	409e      	lsls	r6, r3
 8002358:	e689      	b.n	800206e <__aeabi_dmul+0x17a>
 800235a:	f000 fc55 	bl	8002c08 <__clzsi2>
 800235e:	0001      	movs	r1, r0
 8002360:	0002      	movs	r2, r0
 8002362:	3115      	adds	r1, #21
 8002364:	3220      	adds	r2, #32
 8002366:	291c      	cmp	r1, #28
 8002368:	dc00      	bgt.n	800236c <__aeabi_dmul+0x478>
 800236a:	e64e      	b.n	800200a <__aeabi_dmul+0x116>
 800236c:	0034      	movs	r4, r6
 800236e:	3808      	subs	r0, #8
 8002370:	2500      	movs	r5, #0
 8002372:	4084      	lsls	r4, r0
 8002374:	e653      	b.n	800201e <__aeabi_dmul+0x12a>
 8002376:	9b00      	ldr	r3, [sp, #0]
 8002378:	469c      	mov	ip, r3
 800237a:	e741      	b.n	8002200 <__aeabi_dmul+0x30c>
 800237c:	4912      	ldr	r1, [pc, #72]	; (80023c8 <__aeabi_dmul+0x4d4>)
 800237e:	0022      	movs	r2, r4
 8002380:	4461      	add	r1, ip
 8002382:	002e      	movs	r6, r5
 8002384:	408d      	lsls	r5, r1
 8002386:	408a      	lsls	r2, r1
 8002388:	40c6      	lsrs	r6, r0
 800238a:	1e69      	subs	r1, r5, #1
 800238c:	418d      	sbcs	r5, r1
 800238e:	4332      	orrs	r2, r6
 8002390:	432a      	orrs	r2, r5
 8002392:	40c4      	lsrs	r4, r0
 8002394:	0753      	lsls	r3, r2, #29
 8002396:	d0b6      	beq.n	8002306 <__aeabi_dmul+0x412>
 8002398:	210f      	movs	r1, #15
 800239a:	4011      	ands	r1, r2
 800239c:	2904      	cmp	r1, #4
 800239e:	d1ac      	bne.n	80022fa <__aeabi_dmul+0x406>
 80023a0:	e7b1      	b.n	8002306 <__aeabi_dmul+0x412>
 80023a2:	0765      	lsls	r5, r4, #29
 80023a4:	0264      	lsls	r4, r4, #9
 80023a6:	0b24      	lsrs	r4, r4, #12
 80023a8:	08d2      	lsrs	r2, r2, #3
 80023aa:	4315      	orrs	r5, r2
 80023ac:	2200      	movs	r2, #0
 80023ae:	e611      	b.n	8001fd4 <__aeabi_dmul+0xe0>
 80023b0:	2280      	movs	r2, #128	; 0x80
 80023b2:	0312      	lsls	r2, r2, #12
 80023b4:	4314      	orrs	r4, r2
 80023b6:	0324      	lsls	r4, r4, #12
 80023b8:	4a01      	ldr	r2, [pc, #4]	; (80023c0 <__aeabi_dmul+0x4cc>)
 80023ba:	0b24      	lsrs	r4, r4, #12
 80023bc:	e60a      	b.n	8001fd4 <__aeabi_dmul+0xe0>
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	000007ff 	.word	0x000007ff
 80023c4:	0000043e 	.word	0x0000043e
 80023c8:	0000041e 	.word	0x0000041e

080023cc <__aeabi_dsub>:
 80023cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ce:	4657      	mov	r7, sl
 80023d0:	464e      	mov	r6, r9
 80023d2:	4645      	mov	r5, r8
 80023d4:	46de      	mov	lr, fp
 80023d6:	0004      	movs	r4, r0
 80023d8:	b5e0      	push	{r5, r6, r7, lr}
 80023da:	001f      	movs	r7, r3
 80023dc:	0010      	movs	r0, r2
 80023de:	030b      	lsls	r3, r1, #12
 80023e0:	0f62      	lsrs	r2, r4, #29
 80023e2:	004e      	lsls	r6, r1, #1
 80023e4:	0fcd      	lsrs	r5, r1, #31
 80023e6:	0a5b      	lsrs	r3, r3, #9
 80023e8:	0339      	lsls	r1, r7, #12
 80023ea:	4313      	orrs	r3, r2
 80023ec:	0a49      	lsrs	r1, r1, #9
 80023ee:	00e2      	lsls	r2, r4, #3
 80023f0:	0f44      	lsrs	r4, r0, #29
 80023f2:	4321      	orrs	r1, r4
 80023f4:	4cc2      	ldr	r4, [pc, #776]	; (8002700 <__aeabi_dsub+0x334>)
 80023f6:	4691      	mov	r9, r2
 80023f8:	4692      	mov	sl, r2
 80023fa:	00c0      	lsls	r0, r0, #3
 80023fc:	007a      	lsls	r2, r7, #1
 80023fe:	4680      	mov	r8, r0
 8002400:	0d76      	lsrs	r6, r6, #21
 8002402:	0d52      	lsrs	r2, r2, #21
 8002404:	0fff      	lsrs	r7, r7, #31
 8002406:	42a2      	cmp	r2, r4
 8002408:	d100      	bne.n	800240c <__aeabi_dsub+0x40>
 800240a:	e0b4      	b.n	8002576 <__aeabi_dsub+0x1aa>
 800240c:	2401      	movs	r4, #1
 800240e:	4067      	eors	r7, r4
 8002410:	46bb      	mov	fp, r7
 8002412:	42bd      	cmp	r5, r7
 8002414:	d100      	bne.n	8002418 <__aeabi_dsub+0x4c>
 8002416:	e088      	b.n	800252a <__aeabi_dsub+0x15e>
 8002418:	1ab4      	subs	r4, r6, r2
 800241a:	46a4      	mov	ip, r4
 800241c:	2c00      	cmp	r4, #0
 800241e:	dc00      	bgt.n	8002422 <__aeabi_dsub+0x56>
 8002420:	e0b2      	b.n	8002588 <__aeabi_dsub+0x1bc>
 8002422:	2a00      	cmp	r2, #0
 8002424:	d100      	bne.n	8002428 <__aeabi_dsub+0x5c>
 8002426:	e0c5      	b.n	80025b4 <__aeabi_dsub+0x1e8>
 8002428:	4ab5      	ldr	r2, [pc, #724]	; (8002700 <__aeabi_dsub+0x334>)
 800242a:	4296      	cmp	r6, r2
 800242c:	d100      	bne.n	8002430 <__aeabi_dsub+0x64>
 800242e:	e28b      	b.n	8002948 <__aeabi_dsub+0x57c>
 8002430:	2280      	movs	r2, #128	; 0x80
 8002432:	0412      	lsls	r2, r2, #16
 8002434:	4311      	orrs	r1, r2
 8002436:	4662      	mov	r2, ip
 8002438:	2a38      	cmp	r2, #56	; 0x38
 800243a:	dd00      	ble.n	800243e <__aeabi_dsub+0x72>
 800243c:	e1a1      	b.n	8002782 <__aeabi_dsub+0x3b6>
 800243e:	2a1f      	cmp	r2, #31
 8002440:	dd00      	ble.n	8002444 <__aeabi_dsub+0x78>
 8002442:	e216      	b.n	8002872 <__aeabi_dsub+0x4a6>
 8002444:	2720      	movs	r7, #32
 8002446:	000c      	movs	r4, r1
 8002448:	1abf      	subs	r7, r7, r2
 800244a:	40bc      	lsls	r4, r7
 800244c:	0002      	movs	r2, r0
 800244e:	46a0      	mov	r8, r4
 8002450:	4664      	mov	r4, ip
 8002452:	40b8      	lsls	r0, r7
 8002454:	40e2      	lsrs	r2, r4
 8002456:	4644      	mov	r4, r8
 8002458:	4314      	orrs	r4, r2
 800245a:	0002      	movs	r2, r0
 800245c:	1e50      	subs	r0, r2, #1
 800245e:	4182      	sbcs	r2, r0
 8002460:	4660      	mov	r0, ip
 8002462:	40c1      	lsrs	r1, r0
 8002464:	4322      	orrs	r2, r4
 8002466:	1a5b      	subs	r3, r3, r1
 8002468:	4649      	mov	r1, r9
 800246a:	1a8c      	subs	r4, r1, r2
 800246c:	45a1      	cmp	r9, r4
 800246e:	4192      	sbcs	r2, r2
 8002470:	4252      	negs	r2, r2
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	4698      	mov	r8, r3
 8002476:	4643      	mov	r3, r8
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	d400      	bmi.n	800247e <__aeabi_dsub+0xb2>
 800247c:	e117      	b.n	80026ae <__aeabi_dsub+0x2e2>
 800247e:	4643      	mov	r3, r8
 8002480:	025b      	lsls	r3, r3, #9
 8002482:	0a5b      	lsrs	r3, r3, #9
 8002484:	4698      	mov	r8, r3
 8002486:	4643      	mov	r3, r8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d100      	bne.n	800248e <__aeabi_dsub+0xc2>
 800248c:	e16c      	b.n	8002768 <__aeabi_dsub+0x39c>
 800248e:	4640      	mov	r0, r8
 8002490:	f000 fbba 	bl	8002c08 <__clzsi2>
 8002494:	0002      	movs	r2, r0
 8002496:	3a08      	subs	r2, #8
 8002498:	2120      	movs	r1, #32
 800249a:	0020      	movs	r0, r4
 800249c:	4643      	mov	r3, r8
 800249e:	1a89      	subs	r1, r1, r2
 80024a0:	4093      	lsls	r3, r2
 80024a2:	40c8      	lsrs	r0, r1
 80024a4:	4094      	lsls	r4, r2
 80024a6:	4303      	orrs	r3, r0
 80024a8:	4296      	cmp	r6, r2
 80024aa:	dd00      	ble.n	80024ae <__aeabi_dsub+0xe2>
 80024ac:	e157      	b.n	800275e <__aeabi_dsub+0x392>
 80024ae:	1b96      	subs	r6, r2, r6
 80024b0:	1c71      	adds	r1, r6, #1
 80024b2:	291f      	cmp	r1, #31
 80024b4:	dd00      	ble.n	80024b8 <__aeabi_dsub+0xec>
 80024b6:	e1cb      	b.n	8002850 <__aeabi_dsub+0x484>
 80024b8:	2220      	movs	r2, #32
 80024ba:	0018      	movs	r0, r3
 80024bc:	0026      	movs	r6, r4
 80024be:	1a52      	subs	r2, r2, r1
 80024c0:	4094      	lsls	r4, r2
 80024c2:	4090      	lsls	r0, r2
 80024c4:	40ce      	lsrs	r6, r1
 80024c6:	40cb      	lsrs	r3, r1
 80024c8:	1e62      	subs	r2, r4, #1
 80024ca:	4194      	sbcs	r4, r2
 80024cc:	4330      	orrs	r0, r6
 80024ce:	4698      	mov	r8, r3
 80024d0:	2600      	movs	r6, #0
 80024d2:	4304      	orrs	r4, r0
 80024d4:	0763      	lsls	r3, r4, #29
 80024d6:	d009      	beq.n	80024ec <__aeabi_dsub+0x120>
 80024d8:	230f      	movs	r3, #15
 80024da:	4023      	ands	r3, r4
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d005      	beq.n	80024ec <__aeabi_dsub+0x120>
 80024e0:	1d23      	adds	r3, r4, #4
 80024e2:	42a3      	cmp	r3, r4
 80024e4:	41a4      	sbcs	r4, r4
 80024e6:	4264      	negs	r4, r4
 80024e8:	44a0      	add	r8, r4
 80024ea:	001c      	movs	r4, r3
 80024ec:	4643      	mov	r3, r8
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	d400      	bmi.n	80024f4 <__aeabi_dsub+0x128>
 80024f2:	e0df      	b.n	80026b4 <__aeabi_dsub+0x2e8>
 80024f4:	4b82      	ldr	r3, [pc, #520]	; (8002700 <__aeabi_dsub+0x334>)
 80024f6:	3601      	adds	r6, #1
 80024f8:	429e      	cmp	r6, r3
 80024fa:	d100      	bne.n	80024fe <__aeabi_dsub+0x132>
 80024fc:	e0fb      	b.n	80026f6 <__aeabi_dsub+0x32a>
 80024fe:	4642      	mov	r2, r8
 8002500:	4b80      	ldr	r3, [pc, #512]	; (8002704 <__aeabi_dsub+0x338>)
 8002502:	08e4      	lsrs	r4, r4, #3
 8002504:	401a      	ands	r2, r3
 8002506:	0013      	movs	r3, r2
 8002508:	0571      	lsls	r1, r6, #21
 800250a:	0752      	lsls	r2, r2, #29
 800250c:	025b      	lsls	r3, r3, #9
 800250e:	4322      	orrs	r2, r4
 8002510:	0b1b      	lsrs	r3, r3, #12
 8002512:	0d49      	lsrs	r1, r1, #21
 8002514:	0509      	lsls	r1, r1, #20
 8002516:	07ed      	lsls	r5, r5, #31
 8002518:	4319      	orrs	r1, r3
 800251a:	4329      	orrs	r1, r5
 800251c:	0010      	movs	r0, r2
 800251e:	bcf0      	pop	{r4, r5, r6, r7}
 8002520:	46bb      	mov	fp, r7
 8002522:	46b2      	mov	sl, r6
 8002524:	46a9      	mov	r9, r5
 8002526:	46a0      	mov	r8, r4
 8002528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800252a:	1ab4      	subs	r4, r6, r2
 800252c:	46a4      	mov	ip, r4
 800252e:	2c00      	cmp	r4, #0
 8002530:	dd58      	ble.n	80025e4 <__aeabi_dsub+0x218>
 8002532:	2a00      	cmp	r2, #0
 8002534:	d100      	bne.n	8002538 <__aeabi_dsub+0x16c>
 8002536:	e09e      	b.n	8002676 <__aeabi_dsub+0x2aa>
 8002538:	4a71      	ldr	r2, [pc, #452]	; (8002700 <__aeabi_dsub+0x334>)
 800253a:	4296      	cmp	r6, r2
 800253c:	d100      	bne.n	8002540 <__aeabi_dsub+0x174>
 800253e:	e13b      	b.n	80027b8 <__aeabi_dsub+0x3ec>
 8002540:	2280      	movs	r2, #128	; 0x80
 8002542:	0412      	lsls	r2, r2, #16
 8002544:	4311      	orrs	r1, r2
 8002546:	4662      	mov	r2, ip
 8002548:	2a38      	cmp	r2, #56	; 0x38
 800254a:	dd00      	ble.n	800254e <__aeabi_dsub+0x182>
 800254c:	e0c1      	b.n	80026d2 <__aeabi_dsub+0x306>
 800254e:	2a1f      	cmp	r2, #31
 8002550:	dc00      	bgt.n	8002554 <__aeabi_dsub+0x188>
 8002552:	e1bb      	b.n	80028cc <__aeabi_dsub+0x500>
 8002554:	000c      	movs	r4, r1
 8002556:	3a20      	subs	r2, #32
 8002558:	40d4      	lsrs	r4, r2
 800255a:	0022      	movs	r2, r4
 800255c:	4664      	mov	r4, ip
 800255e:	2c20      	cmp	r4, #32
 8002560:	d004      	beq.n	800256c <__aeabi_dsub+0x1a0>
 8002562:	2740      	movs	r7, #64	; 0x40
 8002564:	1b3f      	subs	r7, r7, r4
 8002566:	40b9      	lsls	r1, r7
 8002568:	4308      	orrs	r0, r1
 800256a:	4680      	mov	r8, r0
 800256c:	4644      	mov	r4, r8
 800256e:	1e61      	subs	r1, r4, #1
 8002570:	418c      	sbcs	r4, r1
 8002572:	4314      	orrs	r4, r2
 8002574:	e0b1      	b.n	80026da <__aeabi_dsub+0x30e>
 8002576:	000c      	movs	r4, r1
 8002578:	4304      	orrs	r4, r0
 800257a:	d02a      	beq.n	80025d2 <__aeabi_dsub+0x206>
 800257c:	46bb      	mov	fp, r7
 800257e:	42bd      	cmp	r5, r7
 8002580:	d02d      	beq.n	80025de <__aeabi_dsub+0x212>
 8002582:	4c61      	ldr	r4, [pc, #388]	; (8002708 <__aeabi_dsub+0x33c>)
 8002584:	46a4      	mov	ip, r4
 8002586:	44b4      	add	ip, r6
 8002588:	4664      	mov	r4, ip
 800258a:	2c00      	cmp	r4, #0
 800258c:	d05c      	beq.n	8002648 <__aeabi_dsub+0x27c>
 800258e:	1b94      	subs	r4, r2, r6
 8002590:	46a4      	mov	ip, r4
 8002592:	2e00      	cmp	r6, #0
 8002594:	d000      	beq.n	8002598 <__aeabi_dsub+0x1cc>
 8002596:	e115      	b.n	80027c4 <__aeabi_dsub+0x3f8>
 8002598:	464d      	mov	r5, r9
 800259a:	431d      	orrs	r5, r3
 800259c:	d100      	bne.n	80025a0 <__aeabi_dsub+0x1d4>
 800259e:	e1c3      	b.n	8002928 <__aeabi_dsub+0x55c>
 80025a0:	1e65      	subs	r5, r4, #1
 80025a2:	2c01      	cmp	r4, #1
 80025a4:	d100      	bne.n	80025a8 <__aeabi_dsub+0x1dc>
 80025a6:	e20c      	b.n	80029c2 <__aeabi_dsub+0x5f6>
 80025a8:	4e55      	ldr	r6, [pc, #340]	; (8002700 <__aeabi_dsub+0x334>)
 80025aa:	42b4      	cmp	r4, r6
 80025ac:	d100      	bne.n	80025b0 <__aeabi_dsub+0x1e4>
 80025ae:	e1f8      	b.n	80029a2 <__aeabi_dsub+0x5d6>
 80025b0:	46ac      	mov	ip, r5
 80025b2:	e10e      	b.n	80027d2 <__aeabi_dsub+0x406>
 80025b4:	000a      	movs	r2, r1
 80025b6:	4302      	orrs	r2, r0
 80025b8:	d100      	bne.n	80025bc <__aeabi_dsub+0x1f0>
 80025ba:	e136      	b.n	800282a <__aeabi_dsub+0x45e>
 80025bc:	0022      	movs	r2, r4
 80025be:	3a01      	subs	r2, #1
 80025c0:	2c01      	cmp	r4, #1
 80025c2:	d100      	bne.n	80025c6 <__aeabi_dsub+0x1fa>
 80025c4:	e1c6      	b.n	8002954 <__aeabi_dsub+0x588>
 80025c6:	4c4e      	ldr	r4, [pc, #312]	; (8002700 <__aeabi_dsub+0x334>)
 80025c8:	45a4      	cmp	ip, r4
 80025ca:	d100      	bne.n	80025ce <__aeabi_dsub+0x202>
 80025cc:	e0f4      	b.n	80027b8 <__aeabi_dsub+0x3ec>
 80025ce:	4694      	mov	ip, r2
 80025d0:	e731      	b.n	8002436 <__aeabi_dsub+0x6a>
 80025d2:	2401      	movs	r4, #1
 80025d4:	4067      	eors	r7, r4
 80025d6:	46bb      	mov	fp, r7
 80025d8:	42bd      	cmp	r5, r7
 80025da:	d000      	beq.n	80025de <__aeabi_dsub+0x212>
 80025dc:	e71c      	b.n	8002418 <__aeabi_dsub+0x4c>
 80025de:	4c4a      	ldr	r4, [pc, #296]	; (8002708 <__aeabi_dsub+0x33c>)
 80025e0:	46a4      	mov	ip, r4
 80025e2:	44b4      	add	ip, r6
 80025e4:	4664      	mov	r4, ip
 80025e6:	2c00      	cmp	r4, #0
 80025e8:	d100      	bne.n	80025ec <__aeabi_dsub+0x220>
 80025ea:	e0cf      	b.n	800278c <__aeabi_dsub+0x3c0>
 80025ec:	1b94      	subs	r4, r2, r6
 80025ee:	46a4      	mov	ip, r4
 80025f0:	2e00      	cmp	r6, #0
 80025f2:	d100      	bne.n	80025f6 <__aeabi_dsub+0x22a>
 80025f4:	e15c      	b.n	80028b0 <__aeabi_dsub+0x4e4>
 80025f6:	4e42      	ldr	r6, [pc, #264]	; (8002700 <__aeabi_dsub+0x334>)
 80025f8:	42b2      	cmp	r2, r6
 80025fa:	d100      	bne.n	80025fe <__aeabi_dsub+0x232>
 80025fc:	e1ec      	b.n	80029d8 <__aeabi_dsub+0x60c>
 80025fe:	2680      	movs	r6, #128	; 0x80
 8002600:	0436      	lsls	r6, r6, #16
 8002602:	4333      	orrs	r3, r6
 8002604:	4664      	mov	r4, ip
 8002606:	2c38      	cmp	r4, #56	; 0x38
 8002608:	dd00      	ble.n	800260c <__aeabi_dsub+0x240>
 800260a:	e1b3      	b.n	8002974 <__aeabi_dsub+0x5a8>
 800260c:	2c1f      	cmp	r4, #31
 800260e:	dd00      	ble.n	8002612 <__aeabi_dsub+0x246>
 8002610:	e238      	b.n	8002a84 <__aeabi_dsub+0x6b8>
 8002612:	2620      	movs	r6, #32
 8002614:	1b36      	subs	r6, r6, r4
 8002616:	001c      	movs	r4, r3
 8002618:	40b4      	lsls	r4, r6
 800261a:	464f      	mov	r7, r9
 800261c:	46a0      	mov	r8, r4
 800261e:	4664      	mov	r4, ip
 8002620:	40e7      	lsrs	r7, r4
 8002622:	4644      	mov	r4, r8
 8002624:	433c      	orrs	r4, r7
 8002626:	464f      	mov	r7, r9
 8002628:	40b7      	lsls	r7, r6
 800262a:	003e      	movs	r6, r7
 800262c:	1e77      	subs	r7, r6, #1
 800262e:	41be      	sbcs	r6, r7
 8002630:	4334      	orrs	r4, r6
 8002632:	4666      	mov	r6, ip
 8002634:	40f3      	lsrs	r3, r6
 8002636:	18c9      	adds	r1, r1, r3
 8002638:	1824      	adds	r4, r4, r0
 800263a:	4284      	cmp	r4, r0
 800263c:	419b      	sbcs	r3, r3
 800263e:	425b      	negs	r3, r3
 8002640:	4698      	mov	r8, r3
 8002642:	0016      	movs	r6, r2
 8002644:	4488      	add	r8, r1
 8002646:	e04e      	b.n	80026e6 <__aeabi_dsub+0x31a>
 8002648:	4a30      	ldr	r2, [pc, #192]	; (800270c <__aeabi_dsub+0x340>)
 800264a:	1c74      	adds	r4, r6, #1
 800264c:	4214      	tst	r4, r2
 800264e:	d000      	beq.n	8002652 <__aeabi_dsub+0x286>
 8002650:	e0d6      	b.n	8002800 <__aeabi_dsub+0x434>
 8002652:	464a      	mov	r2, r9
 8002654:	431a      	orrs	r2, r3
 8002656:	2e00      	cmp	r6, #0
 8002658:	d000      	beq.n	800265c <__aeabi_dsub+0x290>
 800265a:	e15b      	b.n	8002914 <__aeabi_dsub+0x548>
 800265c:	2a00      	cmp	r2, #0
 800265e:	d100      	bne.n	8002662 <__aeabi_dsub+0x296>
 8002660:	e1a5      	b.n	80029ae <__aeabi_dsub+0x5e2>
 8002662:	000a      	movs	r2, r1
 8002664:	4302      	orrs	r2, r0
 8002666:	d000      	beq.n	800266a <__aeabi_dsub+0x29e>
 8002668:	e1bb      	b.n	80029e2 <__aeabi_dsub+0x616>
 800266a:	464a      	mov	r2, r9
 800266c:	0759      	lsls	r1, r3, #29
 800266e:	08d2      	lsrs	r2, r2, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	08db      	lsrs	r3, r3, #3
 8002674:	e027      	b.n	80026c6 <__aeabi_dsub+0x2fa>
 8002676:	000a      	movs	r2, r1
 8002678:	4302      	orrs	r2, r0
 800267a:	d100      	bne.n	800267e <__aeabi_dsub+0x2b2>
 800267c:	e174      	b.n	8002968 <__aeabi_dsub+0x59c>
 800267e:	0022      	movs	r2, r4
 8002680:	3a01      	subs	r2, #1
 8002682:	2c01      	cmp	r4, #1
 8002684:	d005      	beq.n	8002692 <__aeabi_dsub+0x2c6>
 8002686:	4c1e      	ldr	r4, [pc, #120]	; (8002700 <__aeabi_dsub+0x334>)
 8002688:	45a4      	cmp	ip, r4
 800268a:	d100      	bne.n	800268e <__aeabi_dsub+0x2c2>
 800268c:	e094      	b.n	80027b8 <__aeabi_dsub+0x3ec>
 800268e:	4694      	mov	ip, r2
 8002690:	e759      	b.n	8002546 <__aeabi_dsub+0x17a>
 8002692:	4448      	add	r0, r9
 8002694:	4548      	cmp	r0, r9
 8002696:	4192      	sbcs	r2, r2
 8002698:	185b      	adds	r3, r3, r1
 800269a:	4698      	mov	r8, r3
 800269c:	0004      	movs	r4, r0
 800269e:	4252      	negs	r2, r2
 80026a0:	4490      	add	r8, r2
 80026a2:	4643      	mov	r3, r8
 80026a4:	2602      	movs	r6, #2
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	d500      	bpl.n	80026ac <__aeabi_dsub+0x2e0>
 80026aa:	e0c4      	b.n	8002836 <__aeabi_dsub+0x46a>
 80026ac:	3e01      	subs	r6, #1
 80026ae:	0763      	lsls	r3, r4, #29
 80026b0:	d000      	beq.n	80026b4 <__aeabi_dsub+0x2e8>
 80026b2:	e711      	b.n	80024d8 <__aeabi_dsub+0x10c>
 80026b4:	4643      	mov	r3, r8
 80026b6:	46b4      	mov	ip, r6
 80026b8:	0759      	lsls	r1, r3, #29
 80026ba:	08e2      	lsrs	r2, r4, #3
 80026bc:	430a      	orrs	r2, r1
 80026be:	08db      	lsrs	r3, r3, #3
 80026c0:	490f      	ldr	r1, [pc, #60]	; (8002700 <__aeabi_dsub+0x334>)
 80026c2:	458c      	cmp	ip, r1
 80026c4:	d040      	beq.n	8002748 <__aeabi_dsub+0x37c>
 80026c6:	4661      	mov	r1, ip
 80026c8:	031b      	lsls	r3, r3, #12
 80026ca:	0549      	lsls	r1, r1, #21
 80026cc:	0b1b      	lsrs	r3, r3, #12
 80026ce:	0d49      	lsrs	r1, r1, #21
 80026d0:	e720      	b.n	8002514 <__aeabi_dsub+0x148>
 80026d2:	4301      	orrs	r1, r0
 80026d4:	000c      	movs	r4, r1
 80026d6:	1e61      	subs	r1, r4, #1
 80026d8:	418c      	sbcs	r4, r1
 80026da:	444c      	add	r4, r9
 80026dc:	454c      	cmp	r4, r9
 80026de:	4192      	sbcs	r2, r2
 80026e0:	4252      	negs	r2, r2
 80026e2:	4690      	mov	r8, r2
 80026e4:	4498      	add	r8, r3
 80026e6:	4643      	mov	r3, r8
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	d5e0      	bpl.n	80026ae <__aeabi_dsub+0x2e2>
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <__aeabi_dsub+0x334>)
 80026ee:	3601      	adds	r6, #1
 80026f0:	429e      	cmp	r6, r3
 80026f2:	d000      	beq.n	80026f6 <__aeabi_dsub+0x32a>
 80026f4:	e09f      	b.n	8002836 <__aeabi_dsub+0x46a>
 80026f6:	0031      	movs	r1, r6
 80026f8:	2300      	movs	r3, #0
 80026fa:	2200      	movs	r2, #0
 80026fc:	e70a      	b.n	8002514 <__aeabi_dsub+0x148>
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	000007ff 	.word	0x000007ff
 8002704:	ff7fffff 	.word	0xff7fffff
 8002708:	fffff801 	.word	0xfffff801
 800270c:	000007fe 	.word	0x000007fe
 8002710:	2a00      	cmp	r2, #0
 8002712:	d100      	bne.n	8002716 <__aeabi_dsub+0x34a>
 8002714:	e160      	b.n	80029d8 <__aeabi_dsub+0x60c>
 8002716:	000a      	movs	r2, r1
 8002718:	4302      	orrs	r2, r0
 800271a:	d04d      	beq.n	80027b8 <__aeabi_dsub+0x3ec>
 800271c:	464a      	mov	r2, r9
 800271e:	075c      	lsls	r4, r3, #29
 8002720:	08d2      	lsrs	r2, r2, #3
 8002722:	4322      	orrs	r2, r4
 8002724:	2480      	movs	r4, #128	; 0x80
 8002726:	08db      	lsrs	r3, r3, #3
 8002728:	0324      	lsls	r4, r4, #12
 800272a:	4223      	tst	r3, r4
 800272c:	d007      	beq.n	800273e <__aeabi_dsub+0x372>
 800272e:	08ce      	lsrs	r6, r1, #3
 8002730:	4226      	tst	r6, r4
 8002732:	d104      	bne.n	800273e <__aeabi_dsub+0x372>
 8002734:	465d      	mov	r5, fp
 8002736:	0033      	movs	r3, r6
 8002738:	08c2      	lsrs	r2, r0, #3
 800273a:	0749      	lsls	r1, r1, #29
 800273c:	430a      	orrs	r2, r1
 800273e:	0f51      	lsrs	r1, r2, #29
 8002740:	00d2      	lsls	r2, r2, #3
 8002742:	08d2      	lsrs	r2, r2, #3
 8002744:	0749      	lsls	r1, r1, #29
 8002746:	430a      	orrs	r2, r1
 8002748:	0011      	movs	r1, r2
 800274a:	4319      	orrs	r1, r3
 800274c:	d100      	bne.n	8002750 <__aeabi_dsub+0x384>
 800274e:	e1c8      	b.n	8002ae2 <__aeabi_dsub+0x716>
 8002750:	2180      	movs	r1, #128	; 0x80
 8002752:	0309      	lsls	r1, r1, #12
 8002754:	430b      	orrs	r3, r1
 8002756:	031b      	lsls	r3, r3, #12
 8002758:	49d5      	ldr	r1, [pc, #852]	; (8002ab0 <__aeabi_dsub+0x6e4>)
 800275a:	0b1b      	lsrs	r3, r3, #12
 800275c:	e6da      	b.n	8002514 <__aeabi_dsub+0x148>
 800275e:	49d5      	ldr	r1, [pc, #852]	; (8002ab4 <__aeabi_dsub+0x6e8>)
 8002760:	1ab6      	subs	r6, r6, r2
 8002762:	400b      	ands	r3, r1
 8002764:	4698      	mov	r8, r3
 8002766:	e6b5      	b.n	80024d4 <__aeabi_dsub+0x108>
 8002768:	0020      	movs	r0, r4
 800276a:	f000 fa4d 	bl	8002c08 <__clzsi2>
 800276e:	0002      	movs	r2, r0
 8002770:	3218      	adds	r2, #24
 8002772:	2a1f      	cmp	r2, #31
 8002774:	dc00      	bgt.n	8002778 <__aeabi_dsub+0x3ac>
 8002776:	e68f      	b.n	8002498 <__aeabi_dsub+0xcc>
 8002778:	0023      	movs	r3, r4
 800277a:	3808      	subs	r0, #8
 800277c:	4083      	lsls	r3, r0
 800277e:	2400      	movs	r4, #0
 8002780:	e692      	b.n	80024a8 <__aeabi_dsub+0xdc>
 8002782:	4308      	orrs	r0, r1
 8002784:	0002      	movs	r2, r0
 8002786:	1e50      	subs	r0, r2, #1
 8002788:	4182      	sbcs	r2, r0
 800278a:	e66d      	b.n	8002468 <__aeabi_dsub+0x9c>
 800278c:	4cca      	ldr	r4, [pc, #808]	; (8002ab8 <__aeabi_dsub+0x6ec>)
 800278e:	1c72      	adds	r2, r6, #1
 8002790:	4222      	tst	r2, r4
 8002792:	d000      	beq.n	8002796 <__aeabi_dsub+0x3ca>
 8002794:	e0ad      	b.n	80028f2 <__aeabi_dsub+0x526>
 8002796:	464a      	mov	r2, r9
 8002798:	431a      	orrs	r2, r3
 800279a:	2e00      	cmp	r6, #0
 800279c:	d1b8      	bne.n	8002710 <__aeabi_dsub+0x344>
 800279e:	2a00      	cmp	r2, #0
 80027a0:	d100      	bne.n	80027a4 <__aeabi_dsub+0x3d8>
 80027a2:	e158      	b.n	8002a56 <__aeabi_dsub+0x68a>
 80027a4:	000a      	movs	r2, r1
 80027a6:	4302      	orrs	r2, r0
 80027a8:	d000      	beq.n	80027ac <__aeabi_dsub+0x3e0>
 80027aa:	e159      	b.n	8002a60 <__aeabi_dsub+0x694>
 80027ac:	464a      	mov	r2, r9
 80027ae:	0759      	lsls	r1, r3, #29
 80027b0:	08d2      	lsrs	r2, r2, #3
 80027b2:	430a      	orrs	r2, r1
 80027b4:	08db      	lsrs	r3, r3, #3
 80027b6:	e786      	b.n	80026c6 <__aeabi_dsub+0x2fa>
 80027b8:	464a      	mov	r2, r9
 80027ba:	0759      	lsls	r1, r3, #29
 80027bc:	08d2      	lsrs	r2, r2, #3
 80027be:	430a      	orrs	r2, r1
 80027c0:	08db      	lsrs	r3, r3, #3
 80027c2:	e7c1      	b.n	8002748 <__aeabi_dsub+0x37c>
 80027c4:	4dba      	ldr	r5, [pc, #744]	; (8002ab0 <__aeabi_dsub+0x6e4>)
 80027c6:	42aa      	cmp	r2, r5
 80027c8:	d100      	bne.n	80027cc <__aeabi_dsub+0x400>
 80027ca:	e11e      	b.n	8002a0a <__aeabi_dsub+0x63e>
 80027cc:	2580      	movs	r5, #128	; 0x80
 80027ce:	042d      	lsls	r5, r5, #16
 80027d0:	432b      	orrs	r3, r5
 80027d2:	4664      	mov	r4, ip
 80027d4:	2c38      	cmp	r4, #56	; 0x38
 80027d6:	dc5d      	bgt.n	8002894 <__aeabi_dsub+0x4c8>
 80027d8:	2c1f      	cmp	r4, #31
 80027da:	dd00      	ble.n	80027de <__aeabi_dsub+0x412>
 80027dc:	e0d0      	b.n	8002980 <__aeabi_dsub+0x5b4>
 80027de:	2520      	movs	r5, #32
 80027e0:	4667      	mov	r7, ip
 80027e2:	1b2d      	subs	r5, r5, r4
 80027e4:	464e      	mov	r6, r9
 80027e6:	001c      	movs	r4, r3
 80027e8:	40fe      	lsrs	r6, r7
 80027ea:	40ac      	lsls	r4, r5
 80027ec:	4334      	orrs	r4, r6
 80027ee:	464e      	mov	r6, r9
 80027f0:	40ae      	lsls	r6, r5
 80027f2:	0035      	movs	r5, r6
 80027f4:	40fb      	lsrs	r3, r7
 80027f6:	1e6e      	subs	r6, r5, #1
 80027f8:	41b5      	sbcs	r5, r6
 80027fa:	1ac9      	subs	r1, r1, r3
 80027fc:	432c      	orrs	r4, r5
 80027fe:	e04e      	b.n	800289e <__aeabi_dsub+0x4d2>
 8002800:	464a      	mov	r2, r9
 8002802:	1a14      	subs	r4, r2, r0
 8002804:	45a1      	cmp	r9, r4
 8002806:	4192      	sbcs	r2, r2
 8002808:	4252      	negs	r2, r2
 800280a:	4690      	mov	r8, r2
 800280c:	1a5f      	subs	r7, r3, r1
 800280e:	003a      	movs	r2, r7
 8002810:	4647      	mov	r7, r8
 8002812:	1bd2      	subs	r2, r2, r7
 8002814:	4690      	mov	r8, r2
 8002816:	0212      	lsls	r2, r2, #8
 8002818:	d500      	bpl.n	800281c <__aeabi_dsub+0x450>
 800281a:	e08b      	b.n	8002934 <__aeabi_dsub+0x568>
 800281c:	4642      	mov	r2, r8
 800281e:	4322      	orrs	r2, r4
 8002820:	d000      	beq.n	8002824 <__aeabi_dsub+0x458>
 8002822:	e630      	b.n	8002486 <__aeabi_dsub+0xba>
 8002824:	2300      	movs	r3, #0
 8002826:	2500      	movs	r5, #0
 8002828:	e74d      	b.n	80026c6 <__aeabi_dsub+0x2fa>
 800282a:	464a      	mov	r2, r9
 800282c:	0759      	lsls	r1, r3, #29
 800282e:	08d2      	lsrs	r2, r2, #3
 8002830:	430a      	orrs	r2, r1
 8002832:	08db      	lsrs	r3, r3, #3
 8002834:	e744      	b.n	80026c0 <__aeabi_dsub+0x2f4>
 8002836:	4642      	mov	r2, r8
 8002838:	4b9e      	ldr	r3, [pc, #632]	; (8002ab4 <__aeabi_dsub+0x6e8>)
 800283a:	0861      	lsrs	r1, r4, #1
 800283c:	401a      	ands	r2, r3
 800283e:	0013      	movs	r3, r2
 8002840:	2201      	movs	r2, #1
 8002842:	4014      	ands	r4, r2
 8002844:	430c      	orrs	r4, r1
 8002846:	07da      	lsls	r2, r3, #31
 8002848:	085b      	lsrs	r3, r3, #1
 800284a:	4698      	mov	r8, r3
 800284c:	4314      	orrs	r4, r2
 800284e:	e641      	b.n	80024d4 <__aeabi_dsub+0x108>
 8002850:	001a      	movs	r2, r3
 8002852:	3e1f      	subs	r6, #31
 8002854:	40f2      	lsrs	r2, r6
 8002856:	0016      	movs	r6, r2
 8002858:	2920      	cmp	r1, #32
 800285a:	d003      	beq.n	8002864 <__aeabi_dsub+0x498>
 800285c:	2240      	movs	r2, #64	; 0x40
 800285e:	1a51      	subs	r1, r2, r1
 8002860:	408b      	lsls	r3, r1
 8002862:	431c      	orrs	r4, r3
 8002864:	1e62      	subs	r2, r4, #1
 8002866:	4194      	sbcs	r4, r2
 8002868:	2300      	movs	r3, #0
 800286a:	4334      	orrs	r4, r6
 800286c:	4698      	mov	r8, r3
 800286e:	2600      	movs	r6, #0
 8002870:	e71d      	b.n	80026ae <__aeabi_dsub+0x2e2>
 8002872:	000c      	movs	r4, r1
 8002874:	3a20      	subs	r2, #32
 8002876:	40d4      	lsrs	r4, r2
 8002878:	0022      	movs	r2, r4
 800287a:	4664      	mov	r4, ip
 800287c:	2c20      	cmp	r4, #32
 800287e:	d004      	beq.n	800288a <__aeabi_dsub+0x4be>
 8002880:	2740      	movs	r7, #64	; 0x40
 8002882:	1b3f      	subs	r7, r7, r4
 8002884:	40b9      	lsls	r1, r7
 8002886:	4308      	orrs	r0, r1
 8002888:	4680      	mov	r8, r0
 800288a:	4644      	mov	r4, r8
 800288c:	1e61      	subs	r1, r4, #1
 800288e:	418c      	sbcs	r4, r1
 8002890:	4322      	orrs	r2, r4
 8002892:	e5e9      	b.n	8002468 <__aeabi_dsub+0x9c>
 8002894:	464c      	mov	r4, r9
 8002896:	4323      	orrs	r3, r4
 8002898:	001c      	movs	r4, r3
 800289a:	1e63      	subs	r3, r4, #1
 800289c:	419c      	sbcs	r4, r3
 800289e:	1b04      	subs	r4, r0, r4
 80028a0:	42a0      	cmp	r0, r4
 80028a2:	419b      	sbcs	r3, r3
 80028a4:	425b      	negs	r3, r3
 80028a6:	1acb      	subs	r3, r1, r3
 80028a8:	4698      	mov	r8, r3
 80028aa:	465d      	mov	r5, fp
 80028ac:	0016      	movs	r6, r2
 80028ae:	e5e2      	b.n	8002476 <__aeabi_dsub+0xaa>
 80028b0:	464e      	mov	r6, r9
 80028b2:	431e      	orrs	r6, r3
 80028b4:	d100      	bne.n	80028b8 <__aeabi_dsub+0x4ec>
 80028b6:	e0ae      	b.n	8002a16 <__aeabi_dsub+0x64a>
 80028b8:	1e66      	subs	r6, r4, #1
 80028ba:	2c01      	cmp	r4, #1
 80028bc:	d100      	bne.n	80028c0 <__aeabi_dsub+0x4f4>
 80028be:	e0fd      	b.n	8002abc <__aeabi_dsub+0x6f0>
 80028c0:	4f7b      	ldr	r7, [pc, #492]	; (8002ab0 <__aeabi_dsub+0x6e4>)
 80028c2:	42bc      	cmp	r4, r7
 80028c4:	d100      	bne.n	80028c8 <__aeabi_dsub+0x4fc>
 80028c6:	e107      	b.n	8002ad8 <__aeabi_dsub+0x70c>
 80028c8:	46b4      	mov	ip, r6
 80028ca:	e69b      	b.n	8002604 <__aeabi_dsub+0x238>
 80028cc:	4664      	mov	r4, ip
 80028ce:	2220      	movs	r2, #32
 80028d0:	1b12      	subs	r2, r2, r4
 80028d2:	000c      	movs	r4, r1
 80028d4:	4094      	lsls	r4, r2
 80028d6:	0007      	movs	r7, r0
 80028d8:	4090      	lsls	r0, r2
 80028da:	46a0      	mov	r8, r4
 80028dc:	4664      	mov	r4, ip
 80028de:	1e42      	subs	r2, r0, #1
 80028e0:	4190      	sbcs	r0, r2
 80028e2:	4662      	mov	r2, ip
 80028e4:	40e7      	lsrs	r7, r4
 80028e6:	4644      	mov	r4, r8
 80028e8:	40d1      	lsrs	r1, r2
 80028ea:	433c      	orrs	r4, r7
 80028ec:	4304      	orrs	r4, r0
 80028ee:	185b      	adds	r3, r3, r1
 80028f0:	e6f3      	b.n	80026da <__aeabi_dsub+0x30e>
 80028f2:	4c6f      	ldr	r4, [pc, #444]	; (8002ab0 <__aeabi_dsub+0x6e4>)
 80028f4:	42a2      	cmp	r2, r4
 80028f6:	d100      	bne.n	80028fa <__aeabi_dsub+0x52e>
 80028f8:	e0d5      	b.n	8002aa6 <__aeabi_dsub+0x6da>
 80028fa:	4448      	add	r0, r9
 80028fc:	185b      	adds	r3, r3, r1
 80028fe:	4548      	cmp	r0, r9
 8002900:	4189      	sbcs	r1, r1
 8002902:	4249      	negs	r1, r1
 8002904:	185b      	adds	r3, r3, r1
 8002906:	07dc      	lsls	r4, r3, #31
 8002908:	0840      	lsrs	r0, r0, #1
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	4698      	mov	r8, r3
 800290e:	0016      	movs	r6, r2
 8002910:	4304      	orrs	r4, r0
 8002912:	e6cc      	b.n	80026ae <__aeabi_dsub+0x2e2>
 8002914:	2a00      	cmp	r2, #0
 8002916:	d000      	beq.n	800291a <__aeabi_dsub+0x54e>
 8002918:	e082      	b.n	8002a20 <__aeabi_dsub+0x654>
 800291a:	000a      	movs	r2, r1
 800291c:	4302      	orrs	r2, r0
 800291e:	d140      	bne.n	80029a2 <__aeabi_dsub+0x5d6>
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	2500      	movs	r5, #0
 8002924:	031b      	lsls	r3, r3, #12
 8002926:	e713      	b.n	8002750 <__aeabi_dsub+0x384>
 8002928:	074b      	lsls	r3, r1, #29
 800292a:	08c2      	lsrs	r2, r0, #3
 800292c:	431a      	orrs	r2, r3
 800292e:	465d      	mov	r5, fp
 8002930:	08cb      	lsrs	r3, r1, #3
 8002932:	e6c5      	b.n	80026c0 <__aeabi_dsub+0x2f4>
 8002934:	464a      	mov	r2, r9
 8002936:	1a84      	subs	r4, r0, r2
 8002938:	42a0      	cmp	r0, r4
 800293a:	4192      	sbcs	r2, r2
 800293c:	1acb      	subs	r3, r1, r3
 800293e:	4252      	negs	r2, r2
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	4698      	mov	r8, r3
 8002944:	465d      	mov	r5, fp
 8002946:	e59e      	b.n	8002486 <__aeabi_dsub+0xba>
 8002948:	464a      	mov	r2, r9
 800294a:	0759      	lsls	r1, r3, #29
 800294c:	08d2      	lsrs	r2, r2, #3
 800294e:	430a      	orrs	r2, r1
 8002950:	08db      	lsrs	r3, r3, #3
 8002952:	e6f9      	b.n	8002748 <__aeabi_dsub+0x37c>
 8002954:	464a      	mov	r2, r9
 8002956:	1a14      	subs	r4, r2, r0
 8002958:	45a1      	cmp	r9, r4
 800295a:	4192      	sbcs	r2, r2
 800295c:	1a5b      	subs	r3, r3, r1
 800295e:	4252      	negs	r2, r2
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	4698      	mov	r8, r3
 8002964:	2601      	movs	r6, #1
 8002966:	e586      	b.n	8002476 <__aeabi_dsub+0xaa>
 8002968:	464a      	mov	r2, r9
 800296a:	0759      	lsls	r1, r3, #29
 800296c:	08d2      	lsrs	r2, r2, #3
 800296e:	430a      	orrs	r2, r1
 8002970:	08db      	lsrs	r3, r3, #3
 8002972:	e6a5      	b.n	80026c0 <__aeabi_dsub+0x2f4>
 8002974:	464c      	mov	r4, r9
 8002976:	4323      	orrs	r3, r4
 8002978:	001c      	movs	r4, r3
 800297a:	1e63      	subs	r3, r4, #1
 800297c:	419c      	sbcs	r4, r3
 800297e:	e65b      	b.n	8002638 <__aeabi_dsub+0x26c>
 8002980:	4665      	mov	r5, ip
 8002982:	001e      	movs	r6, r3
 8002984:	3d20      	subs	r5, #32
 8002986:	40ee      	lsrs	r6, r5
 8002988:	2c20      	cmp	r4, #32
 800298a:	d005      	beq.n	8002998 <__aeabi_dsub+0x5cc>
 800298c:	2540      	movs	r5, #64	; 0x40
 800298e:	1b2d      	subs	r5, r5, r4
 8002990:	40ab      	lsls	r3, r5
 8002992:	464c      	mov	r4, r9
 8002994:	431c      	orrs	r4, r3
 8002996:	46a2      	mov	sl, r4
 8002998:	4654      	mov	r4, sl
 800299a:	1e63      	subs	r3, r4, #1
 800299c:	419c      	sbcs	r4, r3
 800299e:	4334      	orrs	r4, r6
 80029a0:	e77d      	b.n	800289e <__aeabi_dsub+0x4d2>
 80029a2:	074b      	lsls	r3, r1, #29
 80029a4:	08c2      	lsrs	r2, r0, #3
 80029a6:	431a      	orrs	r2, r3
 80029a8:	465d      	mov	r5, fp
 80029aa:	08cb      	lsrs	r3, r1, #3
 80029ac:	e6cc      	b.n	8002748 <__aeabi_dsub+0x37c>
 80029ae:	000a      	movs	r2, r1
 80029b0:	4302      	orrs	r2, r0
 80029b2:	d100      	bne.n	80029b6 <__aeabi_dsub+0x5ea>
 80029b4:	e736      	b.n	8002824 <__aeabi_dsub+0x458>
 80029b6:	074b      	lsls	r3, r1, #29
 80029b8:	08c2      	lsrs	r2, r0, #3
 80029ba:	431a      	orrs	r2, r3
 80029bc:	465d      	mov	r5, fp
 80029be:	08cb      	lsrs	r3, r1, #3
 80029c0:	e681      	b.n	80026c6 <__aeabi_dsub+0x2fa>
 80029c2:	464a      	mov	r2, r9
 80029c4:	1a84      	subs	r4, r0, r2
 80029c6:	42a0      	cmp	r0, r4
 80029c8:	4192      	sbcs	r2, r2
 80029ca:	1acb      	subs	r3, r1, r3
 80029cc:	4252      	negs	r2, r2
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	4698      	mov	r8, r3
 80029d2:	465d      	mov	r5, fp
 80029d4:	2601      	movs	r6, #1
 80029d6:	e54e      	b.n	8002476 <__aeabi_dsub+0xaa>
 80029d8:	074b      	lsls	r3, r1, #29
 80029da:	08c2      	lsrs	r2, r0, #3
 80029dc:	431a      	orrs	r2, r3
 80029de:	08cb      	lsrs	r3, r1, #3
 80029e0:	e6b2      	b.n	8002748 <__aeabi_dsub+0x37c>
 80029e2:	464a      	mov	r2, r9
 80029e4:	1a14      	subs	r4, r2, r0
 80029e6:	45a1      	cmp	r9, r4
 80029e8:	4192      	sbcs	r2, r2
 80029ea:	1a5f      	subs	r7, r3, r1
 80029ec:	4252      	negs	r2, r2
 80029ee:	1aba      	subs	r2, r7, r2
 80029f0:	4690      	mov	r8, r2
 80029f2:	0212      	lsls	r2, r2, #8
 80029f4:	d56b      	bpl.n	8002ace <__aeabi_dsub+0x702>
 80029f6:	464a      	mov	r2, r9
 80029f8:	1a84      	subs	r4, r0, r2
 80029fa:	42a0      	cmp	r0, r4
 80029fc:	4192      	sbcs	r2, r2
 80029fe:	1acb      	subs	r3, r1, r3
 8002a00:	4252      	negs	r2, r2
 8002a02:	1a9b      	subs	r3, r3, r2
 8002a04:	4698      	mov	r8, r3
 8002a06:	465d      	mov	r5, fp
 8002a08:	e564      	b.n	80024d4 <__aeabi_dsub+0x108>
 8002a0a:	074b      	lsls	r3, r1, #29
 8002a0c:	08c2      	lsrs	r2, r0, #3
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	465d      	mov	r5, fp
 8002a12:	08cb      	lsrs	r3, r1, #3
 8002a14:	e698      	b.n	8002748 <__aeabi_dsub+0x37c>
 8002a16:	074b      	lsls	r3, r1, #29
 8002a18:	08c2      	lsrs	r2, r0, #3
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	08cb      	lsrs	r3, r1, #3
 8002a1e:	e64f      	b.n	80026c0 <__aeabi_dsub+0x2f4>
 8002a20:	000a      	movs	r2, r1
 8002a22:	4302      	orrs	r2, r0
 8002a24:	d090      	beq.n	8002948 <__aeabi_dsub+0x57c>
 8002a26:	464a      	mov	r2, r9
 8002a28:	075c      	lsls	r4, r3, #29
 8002a2a:	08d2      	lsrs	r2, r2, #3
 8002a2c:	4314      	orrs	r4, r2
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	08db      	lsrs	r3, r3, #3
 8002a32:	0312      	lsls	r2, r2, #12
 8002a34:	4213      	tst	r3, r2
 8002a36:	d008      	beq.n	8002a4a <__aeabi_dsub+0x67e>
 8002a38:	08ce      	lsrs	r6, r1, #3
 8002a3a:	4216      	tst	r6, r2
 8002a3c:	d105      	bne.n	8002a4a <__aeabi_dsub+0x67e>
 8002a3e:	08c0      	lsrs	r0, r0, #3
 8002a40:	0749      	lsls	r1, r1, #29
 8002a42:	4308      	orrs	r0, r1
 8002a44:	0004      	movs	r4, r0
 8002a46:	465d      	mov	r5, fp
 8002a48:	0033      	movs	r3, r6
 8002a4a:	0f61      	lsrs	r1, r4, #29
 8002a4c:	00e2      	lsls	r2, r4, #3
 8002a4e:	0749      	lsls	r1, r1, #29
 8002a50:	08d2      	lsrs	r2, r2, #3
 8002a52:	430a      	orrs	r2, r1
 8002a54:	e678      	b.n	8002748 <__aeabi_dsub+0x37c>
 8002a56:	074b      	lsls	r3, r1, #29
 8002a58:	08c2      	lsrs	r2, r0, #3
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	08cb      	lsrs	r3, r1, #3
 8002a5e:	e632      	b.n	80026c6 <__aeabi_dsub+0x2fa>
 8002a60:	4448      	add	r0, r9
 8002a62:	185b      	adds	r3, r3, r1
 8002a64:	4548      	cmp	r0, r9
 8002a66:	4192      	sbcs	r2, r2
 8002a68:	4698      	mov	r8, r3
 8002a6a:	4252      	negs	r2, r2
 8002a6c:	4490      	add	r8, r2
 8002a6e:	4643      	mov	r3, r8
 8002a70:	0004      	movs	r4, r0
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	d400      	bmi.n	8002a78 <__aeabi_dsub+0x6ac>
 8002a76:	e61a      	b.n	80026ae <__aeabi_dsub+0x2e2>
 8002a78:	4642      	mov	r2, r8
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <__aeabi_dsub+0x6e8>)
 8002a7c:	2601      	movs	r6, #1
 8002a7e:	401a      	ands	r2, r3
 8002a80:	4690      	mov	r8, r2
 8002a82:	e614      	b.n	80026ae <__aeabi_dsub+0x2e2>
 8002a84:	4666      	mov	r6, ip
 8002a86:	001f      	movs	r7, r3
 8002a88:	3e20      	subs	r6, #32
 8002a8a:	40f7      	lsrs	r7, r6
 8002a8c:	2c20      	cmp	r4, #32
 8002a8e:	d005      	beq.n	8002a9c <__aeabi_dsub+0x6d0>
 8002a90:	2640      	movs	r6, #64	; 0x40
 8002a92:	1b36      	subs	r6, r6, r4
 8002a94:	40b3      	lsls	r3, r6
 8002a96:	464c      	mov	r4, r9
 8002a98:	431c      	orrs	r4, r3
 8002a9a:	46a2      	mov	sl, r4
 8002a9c:	4654      	mov	r4, sl
 8002a9e:	1e63      	subs	r3, r4, #1
 8002aa0:	419c      	sbcs	r4, r3
 8002aa2:	433c      	orrs	r4, r7
 8002aa4:	e5c8      	b.n	8002638 <__aeabi_dsub+0x26c>
 8002aa6:	0011      	movs	r1, r2
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2200      	movs	r2, #0
 8002aac:	e532      	b.n	8002514 <__aeabi_dsub+0x148>
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	000007ff 	.word	0x000007ff
 8002ab4:	ff7fffff 	.word	0xff7fffff
 8002ab8:	000007fe 	.word	0x000007fe
 8002abc:	464a      	mov	r2, r9
 8002abe:	1814      	adds	r4, r2, r0
 8002ac0:	4284      	cmp	r4, r0
 8002ac2:	4192      	sbcs	r2, r2
 8002ac4:	185b      	adds	r3, r3, r1
 8002ac6:	4698      	mov	r8, r3
 8002ac8:	4252      	negs	r2, r2
 8002aca:	4490      	add	r8, r2
 8002acc:	e5e9      	b.n	80026a2 <__aeabi_dsub+0x2d6>
 8002ace:	4642      	mov	r2, r8
 8002ad0:	4322      	orrs	r2, r4
 8002ad2:	d100      	bne.n	8002ad6 <__aeabi_dsub+0x70a>
 8002ad4:	e6a6      	b.n	8002824 <__aeabi_dsub+0x458>
 8002ad6:	e5ea      	b.n	80026ae <__aeabi_dsub+0x2e2>
 8002ad8:	074b      	lsls	r3, r1, #29
 8002ada:	08c2      	lsrs	r2, r0, #3
 8002adc:	431a      	orrs	r2, r3
 8002ade:	08cb      	lsrs	r3, r1, #3
 8002ae0:	e632      	b.n	8002748 <__aeabi_dsub+0x37c>
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	4901      	ldr	r1, [pc, #4]	; (8002aec <__aeabi_dsub+0x720>)
 8002ae6:	0013      	movs	r3, r2
 8002ae8:	e514      	b.n	8002514 <__aeabi_dsub+0x148>
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	000007ff 	.word	0x000007ff

08002af0 <__aeabi_d2iz>:
 8002af0:	000a      	movs	r2, r1
 8002af2:	b530      	push	{r4, r5, lr}
 8002af4:	4c13      	ldr	r4, [pc, #76]	; (8002b44 <__aeabi_d2iz+0x54>)
 8002af6:	0053      	lsls	r3, r2, #1
 8002af8:	0309      	lsls	r1, r1, #12
 8002afa:	0005      	movs	r5, r0
 8002afc:	0b09      	lsrs	r1, r1, #12
 8002afe:	2000      	movs	r0, #0
 8002b00:	0d5b      	lsrs	r3, r3, #21
 8002b02:	0fd2      	lsrs	r2, r2, #31
 8002b04:	42a3      	cmp	r3, r4
 8002b06:	dd04      	ble.n	8002b12 <__aeabi_d2iz+0x22>
 8002b08:	480f      	ldr	r0, [pc, #60]	; (8002b48 <__aeabi_d2iz+0x58>)
 8002b0a:	4283      	cmp	r3, r0
 8002b0c:	dd02      	ble.n	8002b14 <__aeabi_d2iz+0x24>
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <__aeabi_d2iz+0x5c>)
 8002b10:	18d0      	adds	r0, r2, r3
 8002b12:	bd30      	pop	{r4, r5, pc}
 8002b14:	2080      	movs	r0, #128	; 0x80
 8002b16:	0340      	lsls	r0, r0, #13
 8002b18:	4301      	orrs	r1, r0
 8002b1a:	480d      	ldr	r0, [pc, #52]	; (8002b50 <__aeabi_d2iz+0x60>)
 8002b1c:	1ac0      	subs	r0, r0, r3
 8002b1e:	281f      	cmp	r0, #31
 8002b20:	dd08      	ble.n	8002b34 <__aeabi_d2iz+0x44>
 8002b22:	480c      	ldr	r0, [pc, #48]	; (8002b54 <__aeabi_d2iz+0x64>)
 8002b24:	1ac3      	subs	r3, r0, r3
 8002b26:	40d9      	lsrs	r1, r3
 8002b28:	000b      	movs	r3, r1
 8002b2a:	4258      	negs	r0, r3
 8002b2c:	2a00      	cmp	r2, #0
 8002b2e:	d1f0      	bne.n	8002b12 <__aeabi_d2iz+0x22>
 8002b30:	0018      	movs	r0, r3
 8002b32:	e7ee      	b.n	8002b12 <__aeabi_d2iz+0x22>
 8002b34:	4c08      	ldr	r4, [pc, #32]	; (8002b58 <__aeabi_d2iz+0x68>)
 8002b36:	40c5      	lsrs	r5, r0
 8002b38:	46a4      	mov	ip, r4
 8002b3a:	4463      	add	r3, ip
 8002b3c:	4099      	lsls	r1, r3
 8002b3e:	000b      	movs	r3, r1
 8002b40:	432b      	orrs	r3, r5
 8002b42:	e7f2      	b.n	8002b2a <__aeabi_d2iz+0x3a>
 8002b44:	000003fe 	.word	0x000003fe
 8002b48:	0000041d 	.word	0x0000041d
 8002b4c:	7fffffff 	.word	0x7fffffff
 8002b50:	00000433 	.word	0x00000433
 8002b54:	00000413 	.word	0x00000413
 8002b58:	fffffbed 	.word	0xfffffbed

08002b5c <__aeabi_i2d>:
 8002b5c:	b570      	push	{r4, r5, r6, lr}
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	d016      	beq.n	8002b90 <__aeabi_i2d+0x34>
 8002b62:	17c3      	asrs	r3, r0, #31
 8002b64:	18c5      	adds	r5, r0, r3
 8002b66:	405d      	eors	r5, r3
 8002b68:	0fc4      	lsrs	r4, r0, #31
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f84c 	bl	8002c08 <__clzsi2>
 8002b70:	4a11      	ldr	r2, [pc, #68]	; (8002bb8 <__aeabi_i2d+0x5c>)
 8002b72:	1a12      	subs	r2, r2, r0
 8002b74:	280a      	cmp	r0, #10
 8002b76:	dc16      	bgt.n	8002ba6 <__aeabi_i2d+0x4a>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	002e      	movs	r6, r5
 8002b7c:	3315      	adds	r3, #21
 8002b7e:	409e      	lsls	r6, r3
 8002b80:	230b      	movs	r3, #11
 8002b82:	1a18      	subs	r0, r3, r0
 8002b84:	40c5      	lsrs	r5, r0
 8002b86:	0553      	lsls	r3, r2, #21
 8002b88:	032d      	lsls	r5, r5, #12
 8002b8a:	0b2d      	lsrs	r5, r5, #12
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	e003      	b.n	8002b98 <__aeabi_i2d+0x3c>
 8002b90:	2400      	movs	r4, #0
 8002b92:	2300      	movs	r3, #0
 8002b94:	2500      	movs	r5, #0
 8002b96:	2600      	movs	r6, #0
 8002b98:	051b      	lsls	r3, r3, #20
 8002b9a:	432b      	orrs	r3, r5
 8002b9c:	07e4      	lsls	r4, r4, #31
 8002b9e:	4323      	orrs	r3, r4
 8002ba0:	0030      	movs	r0, r6
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	bd70      	pop	{r4, r5, r6, pc}
 8002ba6:	380b      	subs	r0, #11
 8002ba8:	4085      	lsls	r5, r0
 8002baa:	0553      	lsls	r3, r2, #21
 8002bac:	032d      	lsls	r5, r5, #12
 8002bae:	2600      	movs	r6, #0
 8002bb0:	0b2d      	lsrs	r5, r5, #12
 8002bb2:	0d5b      	lsrs	r3, r3, #21
 8002bb4:	e7f0      	b.n	8002b98 <__aeabi_i2d+0x3c>
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	0000041e 	.word	0x0000041e

08002bbc <__aeabi_ui2d>:
 8002bbc:	b510      	push	{r4, lr}
 8002bbe:	1e04      	subs	r4, r0, #0
 8002bc0:	d010      	beq.n	8002be4 <__aeabi_ui2d+0x28>
 8002bc2:	f000 f821 	bl	8002c08 <__clzsi2>
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <__aeabi_ui2d+0x48>)
 8002bc8:	1a1b      	subs	r3, r3, r0
 8002bca:	280a      	cmp	r0, #10
 8002bcc:	dc11      	bgt.n	8002bf2 <__aeabi_ui2d+0x36>
 8002bce:	220b      	movs	r2, #11
 8002bd0:	0021      	movs	r1, r4
 8002bd2:	1a12      	subs	r2, r2, r0
 8002bd4:	40d1      	lsrs	r1, r2
 8002bd6:	3015      	adds	r0, #21
 8002bd8:	030a      	lsls	r2, r1, #12
 8002bda:	055b      	lsls	r3, r3, #21
 8002bdc:	4084      	lsls	r4, r0
 8002bde:	0b12      	lsrs	r2, r2, #12
 8002be0:	0d5b      	lsrs	r3, r3, #21
 8002be2:	e001      	b.n	8002be8 <__aeabi_ui2d+0x2c>
 8002be4:	2300      	movs	r3, #0
 8002be6:	2200      	movs	r2, #0
 8002be8:	051b      	lsls	r3, r3, #20
 8002bea:	4313      	orrs	r3, r2
 8002bec:	0020      	movs	r0, r4
 8002bee:	0019      	movs	r1, r3
 8002bf0:	bd10      	pop	{r4, pc}
 8002bf2:	0022      	movs	r2, r4
 8002bf4:	380b      	subs	r0, #11
 8002bf6:	4082      	lsls	r2, r0
 8002bf8:	055b      	lsls	r3, r3, #21
 8002bfa:	0312      	lsls	r2, r2, #12
 8002bfc:	2400      	movs	r4, #0
 8002bfe:	0b12      	lsrs	r2, r2, #12
 8002c00:	0d5b      	lsrs	r3, r3, #21
 8002c02:	e7f1      	b.n	8002be8 <__aeabi_ui2d+0x2c>
 8002c04:	0000041e 	.word	0x0000041e

08002c08 <__clzsi2>:
 8002c08:	211c      	movs	r1, #28
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	4298      	cmp	r0, r3
 8002c10:	d301      	bcc.n	8002c16 <__clzsi2+0xe>
 8002c12:	0c00      	lsrs	r0, r0, #16
 8002c14:	3910      	subs	r1, #16
 8002c16:	0a1b      	lsrs	r3, r3, #8
 8002c18:	4298      	cmp	r0, r3
 8002c1a:	d301      	bcc.n	8002c20 <__clzsi2+0x18>
 8002c1c:	0a00      	lsrs	r0, r0, #8
 8002c1e:	3908      	subs	r1, #8
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	4298      	cmp	r0, r3
 8002c24:	d301      	bcc.n	8002c2a <__clzsi2+0x22>
 8002c26:	0900      	lsrs	r0, r0, #4
 8002c28:	3904      	subs	r1, #4
 8002c2a:	a202      	add	r2, pc, #8	; (adr r2, 8002c34 <__clzsi2+0x2c>)
 8002c2c:	5c10      	ldrb	r0, [r2, r0]
 8002c2e:	1840      	adds	r0, r0, r1
 8002c30:	4770      	bx	lr
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	02020304 	.word	0x02020304
 8002c38:	01010101 	.word	0x01010101
	...
 8002c44:	20627548 	.word	0x20627548
 8002c48:	746f6f42 	.word	0x746f6f42
 8002c4c:	64616f6c 	.word	0x64616f6c
 8002c50:	53207265 	.word	0x53207265
 8002c54:	74726174 	.word	0x74726174
 8002c58:	0000000a 	.word	0x0000000a
 8002c5c:	20627548 	.word	0x20627548
 8002c60:	746f6f42 	.word	0x746f6f42
 8002c64:	64616f6c 	.word	0x64616f6c
 8002c68:	4c207265 	.word	0x4c207265
 8002c6c:	0a706f6f 	.word	0x0a706f6f
 8002c70:	0000000a 	.word	0x0000000a
 8002c74:	67756c50 	.word	0x67756c50
 8002c78:	20646567 	.word	0x20646567
 8002c7c:	0a74754f 	.word	0x0a74754f
 8002c80:	00000000 	.word	0x00000000
 8002c84:	67756c50 	.word	0x67756c50
 8002c88:	20646567 	.word	0x20646567
 8002c8c:	000a6e49 	.word	0x000a6e49
 8002c90:	65736552 	.word	0x65736552
 8002c94:	65532074 	.word	0x65532074
 8002c98:	6e657571 	.word	0x6e657571
 8002c9c:	000a6563 	.word	0x000a6563
 8002ca0:	6f727245 	.word	0x6f727245
 8002ca4:	44412072 	.word	0x44412072
 8002ca8:	53492043 	.word	0x53492043
 8002cac:	65442052 	.word	0x65442052
 8002cb0:	74756166 	.word	0x74756166
 8002cb4:	73614320 	.word	0x73614320
 8002cb8:	00000a65 	.word	0x00000a65
 8002cbc:	0800018e 	.word	0x0800018e
 8002cc0:	080001a8 	.word	0x080001a8
 8002cc4:	080001d4 	.word	0x080001d4
 8002cc8:	0800020e 	.word	0x0800020e
 8002ccc:	08000230 	.word	0x08000230
 8002cd0:	00696e66 	.word	0x00696e66
 8002cd4:	2b696e66 	.word	0x2b696e66
 8002cd8:	00000000 	.word	0x00000000
 8002cdc:	006e616e 	.word	0x006e616e
 8002ce0:	2d696e66 	.word	0x2d696e66
 8002ce4:	00000000 	.word	0x00000000
 8002ce8:	08000f76 	.word	0x08000f76
 8002cec:	08000f8c 	.word	0x08000f8c
 8002cf0:	08000f8c 	.word	0x08000f8c
 8002cf4:	08000f8c 	.word	0x08000f8c
 8002cf8:	08000f8c 	.word	0x08000f8c
 8002cfc:	08000f8c 	.word	0x08000f8c
 8002d00:	08000f8c 	.word	0x08000f8c
 8002d04:	08000f8c 	.word	0x08000f8c
 8002d08:	08000f8c 	.word	0x08000f8c
 8002d0c:	08000f8c 	.word	0x08000f8c
 8002d10:	08000f8c 	.word	0x08000f8c
 8002d14:	08000f8c 	.word	0x08000f8c
 8002d18:	08000f8c 	.word	0x08000f8c
 8002d1c:	08000f8c 	.word	0x08000f8c
 8002d20:	08000f8c 	.word	0x08000f8c
 8002d24:	08000f8c 	.word	0x08000f8c
 8002d28:	08000f8c 	.word	0x08000f8c
 8002d2c:	08000f8c 	.word	0x08000f8c
 8002d30:	08000f8c 	.word	0x08000f8c
 8002d34:	08000f8c 	.word	0x08000f8c
 8002d38:	08000f8c 	.word	0x08000f8c
 8002d3c:	08000f8c 	.word	0x08000f8c
 8002d40:	08000f8c 	.word	0x08000f8c
 8002d44:	08000f8c 	.word	0x08000f8c
 8002d48:	08000f8c 	.word	0x08000f8c
 8002d4c:	08000f8c 	.word	0x08000f8c
 8002d50:	08000f8c 	.word	0x08000f8c
 8002d54:	08000f8c 	.word	0x08000f8c
 8002d58:	08000f8c 	.word	0x08000f8c
 8002d5c:	08000f8c 	.word	0x08000f8c
 8002d60:	08000f8c 	.word	0x08000f8c
 8002d64:	08000f8c 	.word	0x08000f8c
 8002d68:	08000f8c 	.word	0x08000f8c
 8002d6c:	08000da8 	.word	0x08000da8
 8002d70:	08000f8c 	.word	0x08000f8c
 8002d74:	08000f8c 	.word	0x08000f8c
 8002d78:	08000f8c 	.word	0x08000f8c
 8002d7c:	08000f8c 	.word	0x08000f8c
 8002d80:	08000f8c 	.word	0x08000f8c
 8002d84:	08000f8c 	.word	0x08000f8c
 8002d88:	08000f8c 	.word	0x08000f8c
 8002d8c:	08000f8c 	.word	0x08000f8c
 8002d90:	08000f8c 	.word	0x08000f8c
 8002d94:	08000f8c 	.word	0x08000f8c
 8002d98:	08000f8c 	.word	0x08000f8c
 8002d9c:	08000f8c 	.word	0x08000f8c
 8002da0:	08000f8c 	.word	0x08000f8c
 8002da4:	08000f8c 	.word	0x08000f8c
 8002da8:	08000f8c 	.word	0x08000f8c
 8002dac:	08000f8c 	.word	0x08000f8c
 8002db0:	08000f8c 	.word	0x08000f8c
 8002db4:	08000c4c 	.word	0x08000c4c
 8002db8:	08000f8c 	.word	0x08000f8c
 8002dbc:	08000f8c 	.word	0x08000f8c
 8002dc0:	08000f8c 	.word	0x08000f8c
 8002dc4:	08000f8c 	.word	0x08000f8c
 8002dc8:	08000f8c 	.word	0x08000f8c
 8002dcc:	08000f8c 	.word	0x08000f8c
 8002dd0:	08000f8c 	.word	0x08000f8c
 8002dd4:	08000f8c 	.word	0x08000f8c
 8002dd8:	08000f8c 	.word	0x08000f8c
 8002ddc:	08000c4c 	.word	0x08000c4c
 8002de0:	08000de8 	.word	0x08000de8
 8002de4:	08000c4c 	.word	0x08000c4c
 8002de8:	08000f8c 	.word	0x08000f8c
 8002dec:	08000da8 	.word	0x08000da8
 8002df0:	08000f8c 	.word	0x08000f8c
 8002df4:	08000f8c 	.word	0x08000f8c
 8002df8:	08000c4c 	.word	0x08000c4c
 8002dfc:	08000f8c 	.word	0x08000f8c
 8002e00:	08000f8c 	.word	0x08000f8c
 8002e04:	08000f8c 	.word	0x08000f8c
 8002e08:	08000f8c 	.word	0x08000f8c
 8002e0c:	08000f8c 	.word	0x08000f8c
 8002e10:	08000c4c 	.word	0x08000c4c
 8002e14:	08000f40 	.word	0x08000f40
 8002e18:	08000f8c 	.word	0x08000f8c
 8002e1c:	08000f8c 	.word	0x08000f8c
 8002e20:	08000e5c 	.word	0x08000e5c
 8002e24:	08000f8c 	.word	0x08000f8c
 8002e28:	08000c4c 	.word	0x08000c4c
 8002e2c:	08000f8c 	.word	0x08000f8c
 8002e30:	08000f8c 	.word	0x08000f8c
 8002e34:	08000c4c 	.word	0x08000c4c
 8002e38:	08000b7e 	.word	0x08000b7e
 8002e3c:	08000af8 	.word	0x08000af8
 8002e40:	08000af8 	.word	0x08000af8
 8002e44:	08000b88 	.word	0x08000b88
 8002e48:	08000af8 	.word	0x08000af8
 8002e4c:	08000af8 	.word	0x08000af8
 8002e50:	08000af8 	.word	0x08000af8
 8002e54:	08000af8 	.word	0x08000af8
 8002e58:	08000af8 	.word	0x08000af8
 8002e5c:	08000af8 	.word	0x08000af8
 8002e60:	08000af8 	.word	0x08000af8
 8002e64:	08000b74 	.word	0x08000b74
 8002e68:	08000af8 	.word	0x08000af8
 8002e6c:	08000b6a 	.word	0x08000b6a
 8002e70:	08000af8 	.word	0x08000af8
 8002e74:	08000af8 	.word	0x08000af8
 8002e78:	08000b4c 	.word	0x08000b4c
 8002e7c:	00000000 	.word	0x00000000

08002e80 <pow10.4126>:
 8002e80:	00000000 3ff00000 00000000 40240000     .......?......$@
 8002e90:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8002ea0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8002eb0:	00000000 412e8480 00000000 416312d0     .......A......cA
 8002ec0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8002ed0:	204d4652 20495053 74697257 00000065     RFM SPI Write...
 8002ee0:	656d6954 2074756f 25207325 0a583830     Timeout %s %08X.
 8002ef0:	00000000 20435452 0a525349 00000000     ....RTC ISR.....
 8002f00:	08002088 08001fb6 08001fb6 08001fb2     . ..............
 8002f10:	08001fbc 08001fbc 080022a8 08001fb2     ........."......
 8002f20:	08001fbc 080022a8 08001fbc 08001fb2     ....."..........
 8002f30:	08002246 08002246 08002246 08002312     F"..F"..F"...#..
