
hub/bin/hub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017f0  08004000  08004000  00000098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .preinit_array 00000000  080057f0  080057f0  0000198c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .init_array   00000000  080057f0  080057f0  0000198c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000000  080057f0  080057f0  0000198c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000104  20000000  080057f0  00001888  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  5 .bss          000002bc  20000104  080058f4  0000198c  2**2
                  ALLOC
  6 ._user_heap_stack 00001000  200003c0  080058f4  0000198c  2**0
                  ALLOC
  7 .ARM.attributes 0000002a  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001088f  00000000  00000000  000019b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00002da9  00000000  00000000  00012245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00004300  00000000  00000000  00014fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000f68  00000000  00000000  000192ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000f80  00000000  00000000  0001a256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00005899  00000000  00000000  0001b1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c9f8  00000000  00000000  00020a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0002037b  00000000  00000000  0002d467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      0000004c  00000000  00000000  0004d7e2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002484  00000000  00000000  0004d830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004000 <vector_table>:
 8004000:	00 20 00 20 09 52 00 08 0d 41 00 08 1d 41 00 08     . . .R...A...A..
	...
 800402c:	05 52 00 08 00 00 00 00 00 00 00 00 05 52 00 08     .R...........R..
 800403c:	05 52 00 08 03 52 00 08 03 52 00 08 71 4c 00 08     .R...R...R..qL..
 800404c:	03 52 00 08 03 52 00 08 03 52 00 08 03 52 00 08     .R...R...R...R..
 800405c:	89 48 00 08 03 52 00 08 03 52 00 08 03 52 00 08     .H...R...R...R..
 800406c:	03 52 00 08 65 41 00 08 03 52 00 08 03 52 00 08     .R..eA...R...R..
 800407c:	03 52 00 08 03 52 00 08 03 52 00 08 03 52 00 08     .R...R...R...R..
 800408c:	03 52 00 08 03 52 00 08 03 52 00 08 03 52 00 08     .R...R...R...R..
 800409c:	03 52 00 08 03 52 00 08 03 52 00 08 03 52 00 08     .R...R...R...R..
 80040ac:	03 52 00 08 2d 41 00 08 03 52 00 08 03 52 00 08     .R..-A...R...R..
 80040bc:	03 52 00 08                                         .R..

080040c0 <main>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

int main(void)
{
 80040c0:	b510      	push	{r4, lr}
	log_init();
 80040c2:	f000 f9b3 	bl	800442c <log_init>
	timers_lptim_init();
 80040c6:	f000 fcb3 	bl	8004a30 <timers_lptim_init>
	timers_tim6_init();
 80040ca:	f000 fcf7 	bl	8004abc <timers_tim6_init>
	// mem_init();
	// aes_init();
	// batt_init();

	#ifdef DEBUG
	for(int i = 0; i < 100000; i++){__asm__("nop");};
 80040ce:	2300      	movs	r3, #0
 80040d0:	e001      	b.n	80040d6 <main+0x16>
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	3301      	adds	r3, #1
 80040d6:	4a0a      	ldr	r2, [pc, #40]	; (8004100 <main+0x40>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	ddfa      	ble.n	80040d2 <main+0x12>
	#endif

	log_printf("Hub Start\n");
 80040dc:	4809      	ldr	r0, [pc, #36]	; (8004104 <main+0x44>)
 80040de:	f000 f9bb 	bl	8004458 <log_printf>
	flash_led(100, 5);
 80040e2:	2105      	movs	r1, #5
 80040e4:	2064      	movs	r0, #100	; 0x64
 80040e6:	f000 fc73 	bl	80049d0 <flash_led>

	test_mem_write_read();
 80040ea:	f000 fc13 	bl	8004914 <test_mem_write_read>
	(void)test_hub2;


	for (;;)
	{
		log_printf("Hub Loop\n\n");
 80040ee:	4806      	ldr	r0, [pc, #24]	; (8004108 <main+0x48>)
 80040f0:	f000 f9b2 	bl	8004458 <log_printf>
		timers_delay_milliseconds(1000);
 80040f4:	20fa      	movs	r0, #250	; 0xfa
 80040f6:	0080      	lsls	r0, r0, #2
 80040f8:	f000 fcf6 	bl	8004ae8 <timers_delay_milliseconds>
	for (;;)
 80040fc:	e7f7      	b.n	80040ee <main+0x2e>
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	0001869f 	.word	0x0001869f
 8004104:	08005510 	.word	0x08005510
 8004108:	0800551c 	.word	0x0800551c

0800410c <nmi_handler>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void nmi_handler(void)
{
 800410c:	b510      	push	{r4, lr}
  log_printf("nmi\n");
 800410e:	4802      	ldr	r0, [pc, #8]	; (8004118 <nmi_handler+0xc>)
 8004110:	f000 f9a2 	bl	8004458 <log_printf>
	while(1)
 8004114:	e7fe      	b.n	8004114 <nmi_handler+0x8>
 8004116:	46c0      	nop			; (mov r8, r8)
 8004118:	08005528 	.word	0x08005528

0800411c <hard_fault_handler>:
		
	}
}

void hard_fault_handler(void)
{
 800411c:	b510      	push	{r4, lr}
  log_printf("hard fault\n");
 800411e:	4802      	ldr	r0, [pc, #8]	; (8004128 <hard_fault_handler+0xc>)
 8004120:	f000 f99a 	bl	8004458 <log_printf>
	while(1)
 8004124:	e7fe      	b.n	8004124 <hard_fault_handler+0x8>
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	08005530 	.word	0x08005530

0800412c <usart2_isr>:
}


// Interrupt routines
void usart2_isr(void)
{
 800412c:	b510      	push	{r4, lr}
	usart_send(SPF_USART, usart_recv(SIM_USART));
 800412e:	4c09      	ldr	r4, [pc, #36]	; (8004154 <usart2_isr+0x28>)
 8004130:	0020      	movs	r0, r4
 8004132:	f001 f857 	bl	80051e4 <usart_recv>
 8004136:	0001      	movs	r1, r0
 8004138:	4807      	ldr	r0, [pc, #28]	; (8004158 <usart2_isr+0x2c>)
 800413a:	f001 f84f 	bl	80051dc <usart_send>

	sim_rx_buf[sim_rx_head++] = usart_recv(SIM_USART);
 800413e:	0020      	movs	r0, r4
 8004140:	f001 f850 	bl	80051e4 <usart_recv>
 8004144:	4a05      	ldr	r2, [pc, #20]	; (800415c <usart2_isr+0x30>)
 8004146:	7813      	ldrb	r3, [r2, #0]
 8004148:	1c59      	adds	r1, r3, #1
 800414a:	7011      	strb	r1, [r2, #0]
 800414c:	4a04      	ldr	r2, [pc, #16]	; (8004160 <usart2_isr+0x34>)
 800414e:	54d0      	strb	r0, [r2, r3]
}
 8004150:	bd10      	pop	{r4, pc}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	40004400 	.word	0x40004400
 8004158:	40013800 	.word	0x40013800
 800415c:	20000204 	.word	0x20000204
 8004160:	20000104 	.word	0x20000104

08004164 <adc_comp_isr>:

// ISRs
#ifdef _HUB
// For use with ADC1
void adc_comp_isr(void)
{
 8004164:	b570      	push	{r4, r5, r6, lr}
    // Takes about 150us to run

    // log_printf("ADC ISR %08X\n", ADC_ISR(ADC1));

    // Calculate batt_voltages
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8004166:	2400      	movs	r4, #0
 8004168:	e014      	b.n	8004194 <adc_comp_isr+0x30>
        batt_voltages[i] = ( (uint32_t)300 * ST_VREFINT_CAL * adc_vals[i + 1] ) / ( adc_vals[0] * 4095 ); }
 800416a:	4b4f      	ldr	r3, [pc, #316]	; (80042a8 <adc_comp_isr+0x144>)
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	1c65      	adds	r5, r4, #1
 8004170:	4a4e      	ldr	r2, [pc, #312]	; (80042ac <adc_comp_isr+0x148>)
 8004172:	0069      	lsls	r1, r5, #1
 8004174:	5a88      	ldrh	r0, [r1, r2]
 8004176:	4343      	muls	r3, r0
 8004178:	0098      	lsls	r0, r3, #2
 800417a:	18c3      	adds	r3, r0, r3
 800417c:	0118      	lsls	r0, r3, #4
 800417e:	1ac0      	subs	r0, r0, r3
 8004180:	0080      	lsls	r0, r0, #2
 8004182:	8813      	ldrh	r3, [r2, #0]
 8004184:	0319      	lsls	r1, r3, #12
 8004186:	1ac9      	subs	r1, r1, r3
 8004188:	f001 f918 	bl	80053bc <__udivsi3>
 800418c:	0064      	lsls	r4, r4, #1
 800418e:	4b48      	ldr	r3, [pc, #288]	; (80042b0 <adc_comp_isr+0x14c>)
 8004190:	5318      	strh	r0, [r3, r4]
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8004192:	b2ec      	uxtb	r4, r5
 8004194:	2c01      	cmp	r4, #1
 8004196:	d9e8      	bls.n	800416a <adc_comp_isr+0x6>

    // For Hub : Measured voltage is half of actual
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8004198:	2300      	movs	r3, #0
 800419a:	e006      	b.n	80041aa <adc_comp_isr+0x46>
        batt_voltages[i] = batt_voltages[i] * 2; }
 800419c:	4944      	ldr	r1, [pc, #272]	; (80042b0 <adc_comp_isr+0x14c>)
 800419e:	0058      	lsls	r0, r3, #1
 80041a0:	5a42      	ldrh	r2, [r0, r1]
 80041a2:	0052      	lsls	r2, r2, #1
 80041a4:	5242      	strh	r2, [r0, r1]
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 80041a6:	3301      	adds	r3, #1
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d9f6      	bls.n	800419c <adc_comp_isr+0x38>

    static uint16_t timer = 0;
    static uint8_t state = 0;
    switch(state)
 80041ae:	4b41      	ldr	r3, [pc, #260]	; (80042b4 <adc_comp_isr+0x150>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d86e      	bhi.n	8004294 <adc_comp_isr+0x130>
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4a3f      	ldr	r2, [pc, #252]	; (80042b8 <adc_comp_isr+0x154>)
 80041ba:	58d3      	ldr	r3, [r2, r3]
 80041bc:	469f      	mov	pc, r3
    {
        case 0:
            plugged_in = true;
            timer = timers_millis();
 80041be:	f000 fca9 	bl	8004b14 <timers_millis>
 80041c2:	4b3e      	ldr	r3, [pc, #248]	; (80042bc <adc_comp_isr+0x158>)
 80041c4:	8018      	strh	r0, [r3, #0]
            if(batt_voltages[PWR_VOLTAGE] < batt_voltages[BATT_VOLTAGE])
 80041c6:	4b3a      	ldr	r3, [pc, #232]	; (80042b0 <adc_comp_isr+0x14c>)
 80041c8:	881a      	ldrh	r2, [r3, #0]
 80041ca:	885b      	ldrh	r3, [r3, #2]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d264      	bcs.n	800429a <adc_comp_isr+0x136>
                state = 1;
 80041d0:	4b38      	ldr	r3, [pc, #224]	; (80042b4 <adc_comp_isr+0x150>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	701a      	strb	r2, [r3, #0]
 80041d6:	e060      	b.n	800429a <adc_comp_isr+0x136>
            break;

        case 1:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE])
 80041d8:	4b35      	ldr	r3, [pc, #212]	; (80042b0 <adc_comp_isr+0x14c>)
 80041da:	881a      	ldrh	r2, [r3, #0]
 80041dc:	885b      	ldrh	r3, [r3, #2]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d903      	bls.n	80041ea <adc_comp_isr+0x86>
                state = 0;
 80041e2:	4b34      	ldr	r3, [pc, #208]	; (80042b4 <adc_comp_isr+0x150>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	e057      	b.n	800429a <adc_comp_isr+0x136>
            else if(timers_millis() - timer > 1000)
 80041ea:	f000 fc93 	bl	8004b14 <timers_millis>
 80041ee:	4b33      	ldr	r3, [pc, #204]	; (80042bc <adc_comp_isr+0x158>)
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	1ac0      	subs	r0, r0, r3
 80041f4:	23fa      	movs	r3, #250	; 0xfa
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4298      	cmp	r0, r3
 80041fa:	dd4e      	ble.n	800429a <adc_comp_isr+0x136>
                state = 2;
 80041fc:	4b2d      	ldr	r3, [pc, #180]	; (80042b4 <adc_comp_isr+0x150>)
 80041fe:	2202      	movs	r2, #2
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	e04a      	b.n	800429a <adc_comp_isr+0x136>
            break;
        
        case 2:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE]){
 8004204:	4b2a      	ldr	r3, [pc, #168]	; (80042b0 <adc_comp_isr+0x14c>)
 8004206:	881a      	ldrh	r2, [r3, #0]
 8004208:	885b      	ldrh	r3, [r3, #2]
 800420a:	429a      	cmp	r2, r3
 800420c:	d907      	bls.n	800421e <adc_comp_isr+0xba>
                timer = timers_millis(); 
 800420e:	f000 fc81 	bl	8004b14 <timers_millis>
 8004212:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <adc_comp_isr+0x158>)
 8004214:	8018      	strh	r0, [r3, #0]
                state = 4;}
 8004216:	4b27      	ldr	r3, [pc, #156]	; (80042b4 <adc_comp_isr+0x150>)
 8004218:	2204      	movs	r2, #4
 800421a:	701a      	strb	r2, [r3, #0]
 800421c:	e03d      	b.n	800429a <adc_comp_isr+0x136>
            else if(timers_millis() - timer > 10000){
 800421e:	f000 fc79 	bl	8004b14 <timers_millis>
 8004222:	4b26      	ldr	r3, [pc, #152]	; (80042bc <adc_comp_isr+0x158>)
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	1ac0      	subs	r0, r0, r3
 8004228:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <adc_comp_isr+0x15c>)
 800422a:	4298      	cmp	r0, r3
 800422c:	dd35      	ble.n	800429a <adc_comp_isr+0x136>
                state = 3;
 800422e:	4b21      	ldr	r3, [pc, #132]	; (80042b4 <adc_comp_isr+0x150>)
 8004230:	2203      	movs	r2, #3
 8004232:	701a      	strb	r2, [r3, #0]
                plugged_in = false;
                log_printf("Plugged Out\n");}
 8004234:	4823      	ldr	r0, [pc, #140]	; (80042c4 <adc_comp_isr+0x160>)
 8004236:	f000 f90f 	bl	8004458 <log_printf>
 800423a:	e02e      	b.n	800429a <adc_comp_isr+0x136>
            break;
        
        case 3:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE]){
 800423c:	4b1c      	ldr	r3, [pc, #112]	; (80042b0 <adc_comp_isr+0x14c>)
 800423e:	881a      	ldrh	r2, [r3, #0]
 8004240:	885b      	ldrh	r3, [r3, #2]
 8004242:	429a      	cmp	r2, r3
 8004244:	d929      	bls.n	800429a <adc_comp_isr+0x136>
                timer = timers_millis();
 8004246:	f000 fc65 	bl	8004b14 <timers_millis>
 800424a:	4b1c      	ldr	r3, [pc, #112]	; (80042bc <adc_comp_isr+0x158>)
 800424c:	8018      	strh	r0, [r3, #0]
                state = 0;
 800424e:	4b19      	ldr	r3, [pc, #100]	; (80042b4 <adc_comp_isr+0x150>)
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
                log_printf("Plugged In\n");}
 8004254:	481c      	ldr	r0, [pc, #112]	; (80042c8 <adc_comp_isr+0x164>)
 8004256:	f000 f8ff 	bl	8004458 <log_printf>
 800425a:	e01e      	b.n	800429a <adc_comp_isr+0x136>
            break;

        case 4:
            if(batt_voltages[PWR_VOLTAGE] < batt_voltages[BATT_VOLTAGE]){
 800425c:	4b14      	ldr	r3, [pc, #80]	; (80042b0 <adc_comp_isr+0x14c>)
 800425e:	881a      	ldrh	r2, [r3, #0]
 8004260:	885b      	ldrh	r3, [r3, #2]
 8004262:	429a      	cmp	r2, r3
 8004264:	d203      	bcs.n	800426e <adc_comp_isr+0x10a>
                state = 2; }
 8004266:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <adc_comp_isr+0x150>)
 8004268:	2202      	movs	r2, #2
 800426a:	701a      	strb	r2, [r3, #0]
 800426c:	e015      	b.n	800429a <adc_comp_isr+0x136>
            else if(timers_millis() - timer > 1000){
 800426e:	f000 fc51 	bl	8004b14 <timers_millis>
 8004272:	4b12      	ldr	r3, [pc, #72]	; (80042bc <adc_comp_isr+0x158>)
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	1ac0      	subs	r0, r0, r3
 8004278:	23fa      	movs	r3, #250	; 0xfa
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4298      	cmp	r0, r3
 800427e:	dd0c      	ble.n	800429a <adc_comp_isr+0x136>
                state = 0;
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <adc_comp_isr+0x150>)
 8004282:	2200      	movs	r2, #0
 8004284:	701a      	strb	r2, [r3, #0]
                batt_rst_seq = true; 
 8004286:	4b11      	ldr	r3, [pc, #68]	; (80042cc <adc_comp_isr+0x168>)
 8004288:	3201      	adds	r2, #1
 800428a:	701a      	strb	r2, [r3, #0]
                log_printf("Reset Sequence\n"); }
 800428c:	4810      	ldr	r0, [pc, #64]	; (80042d0 <adc_comp_isr+0x16c>)
 800428e:	f000 f8e3 	bl	8004458 <log_printf>
 8004292:	e002      	b.n	800429a <adc_comp_isr+0x136>
            break;

        default:
            log_printf("Error ADC ISR Defaut Case\n");
 8004294:	480f      	ldr	r0, [pc, #60]	; (80042d4 <adc_comp_isr+0x170>)
 8004296:	f000 f8df 	bl	8004458 <log_printf>
            break;
    }

    // log_printf("ADC ISR %u %u %u V\n",state, batt_voltages[0], batt_voltages[1]);

    ADC_ISR(ADC1) = 0xFFFFFFFF;
 800429a:	480f      	ldr	r0, [pc, #60]	; (80042d8 <adc_comp_isr+0x174>)
 800429c:	2301      	movs	r3, #1
 800429e:	425b      	negs	r3, r3
 80042a0:	6003      	str	r3, [r0, #0]
    adc_start_conversion_regular(ADC1);
 80042a2:	f000 fd09 	bl	8004cb8 <adc_start_conversion_regular>
}
 80042a6:	bd70      	pop	{r4, r5, r6, pc}
 80042a8:	1ff80078 	.word	0x1ff80078
 80042ac:	20000208 	.word	0x20000208
 80042b0:	20000210 	.word	0x20000210
 80042b4:	20000214 	.word	0x20000214
 80042b8:	08005584 	.word	0x08005584
 80042bc:	20000216 	.word	0x20000216
 80042c0:	00002710 	.word	0x00002710
 80042c4:	0800553c 	.word	0x0800553c
 80042c8:	0800554c 	.word	0x0800554c
 80042cc:	2000020e 	.word	0x2000020e
 80042d0:	08005558 	.word	0x08005558
 80042d4:	08005568 	.word	0x08005568
 80042d8:	40012400 	.word	0x40012400

080042dc <clock_setup>:
// Static Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

//  Static Function Definitions
static void clock_setup(void) 
{
 80042dc:	b510      	push	{r4, lr}
	// Enable MSI Osc 2.097Mhz
	rcc_osc_on(RCC_MSI);
 80042de:	2004      	movs	r0, #4
 80042e0:	f000 fe02 	bl	8004ee8 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_MSI);
 80042e4:	2004      	movs	r0, #4
 80042e6:	f000 fe55 	bl	8004f94 <rcc_wait_for_osc_ready>

	// Set MSI to 2.097Mhz
	rcc_set_msi_range(5);
 80042ea:	2005      	movs	r0, #5
 80042ec:	f000 fe7c 	bl	8004fe8 <rcc_set_msi_range>

	// Set prescalers for AHB, APB1, APB2
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);				// AHB -> 2.097Mhz
 80042f0:	2000      	movs	r0, #0
 80042f2:	f000 fe6f 	bl	8004fd4 <rcc_set_hpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);			// APB1 -> 2.097Mhz
 80042f6:	2000      	movs	r0, #0
 80042f8:	f000 fe54 	bl	8004fa4 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);			// APB2 -> 2.097Mhz
 80042fc:	2000      	movs	r0, #0
 80042fe:	f000 fe5d 	bl	8004fbc <rcc_set_ppre2>

	// Set flash, 2.097Mhz -> 0 waitstates
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 8004302:	2000      	movs	r0, #0
 8004304:	f000 fce4 	bl	8004cd0 <flash_set_ws>

	// Set Peripheral Clock Frequencies used
	rcc_ahb_frequency = 2097000;
 8004308:	4b03      	ldr	r3, [pc, #12]	; (8004318 <clock_setup+0x3c>)
 800430a:	4a04      	ldr	r2, [pc, #16]	; (800431c <clock_setup+0x40>)
 800430c:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 2097000;
 800430e:	4a04      	ldr	r2, [pc, #16]	; (8004320 <clock_setup+0x44>)
 8004310:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = 2097000;
 8004312:	4a04      	ldr	r2, [pc, #16]	; (8004324 <clock_setup+0x48>)
 8004314:	6013      	str	r3, [r2, #0]
}
 8004316:	bd10      	pop	{r4, pc}
 8004318:	001fff68 	.word	0x001fff68
 800431c:	20000094 	.word	0x20000094
 8004320:	20000098 	.word	0x20000098
 8004324:	2000009c 	.word	0x2000009c

08004328 <usart_setup>:

static void usart_setup(void) 
{
 8004328:	b570      	push	{r4, r5, r6, lr}
    rcc_periph_clock_enable(RCC_GPIOA);
 800432a:	20b0      	movs	r0, #176	; 0xb0
 800432c:	00c0      	lsls	r0, r0, #3
 800432e:	f000 fe9d 	bl	800506c <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOB);
 8004332:	4826      	ldr	r0, [pc, #152]	; (80043cc <usart_setup+0xa4>)
 8004334:	f000 fe9a 	bl	800506c <rcc_periph_clock_enable>

	gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_TX);
 8004338:	2580      	movs	r5, #128	; 0x80
 800433a:	00ad      	lsls	r5, r5, #2
 800433c:	24a0      	movs	r4, #160	; 0xa0
 800433e:	05e4      	lsls	r4, r4, #23
 8004340:	002b      	movs	r3, r5
 8004342:	2200      	movs	r2, #0
 8004344:	2102      	movs	r1, #2
 8004346:	0020      	movs	r0, r4
 8004348:	f000 fd1d 	bl	8004d86 <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_RX);
 800434c:	2680      	movs	r6, #128	; 0x80
 800434e:	00f6      	lsls	r6, r6, #3
 8004350:	0033      	movs	r3, r6
 8004352:	2200      	movs	r2, #0
 8004354:	2102      	movs	r1, #2
 8004356:	0020      	movs	r0, r4
 8004358:	f000 fd15 	bl	8004d86 <gpio_mode_setup>
    
    gpio_set_output_options(SPF_USART_TX_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, SPF_USART_TX);
 800435c:	002b      	movs	r3, r5
 800435e:	2200      	movs	r2, #0
 8004360:	2100      	movs	r1, #0
 8004362:	0020      	movs	r0, r4
 8004364:	f000 fd2f 	bl	8004dc6 <gpio_set_output_options>

    gpio_set_af(SPF_USART_TX_PORT, SPF_USART_AF, SPF_USART_TX);
 8004368:	002a      	movs	r2, r5
 800436a:	2104      	movs	r1, #4
 800436c:	0020      	movs	r0, r4
 800436e:	f000 fd48 	bl	8004e02 <gpio_set_af>
    gpio_set_af(SPF_USART_RX_PORT, SPF_USART_AF, SPF_USART_RX);
 8004372:	0032      	movs	r2, r6
 8004374:	2104      	movs	r1, #4
 8004376:	0020      	movs	r0, r4
 8004378:	f000 fd43 	bl	8004e02 <gpio_set_af>
    
	rcc_periph_clock_enable(SPF_USART_RCC);
 800437c:	4814      	ldr	r0, [pc, #80]	; (80043d0 <usart_setup+0xa8>)
 800437e:	f000 fe75 	bl	800506c <rcc_periph_clock_enable>
    rcc_periph_reset_pulse(SPF_USART_RCC_RST);
 8004382:	4814      	ldr	r0, [pc, #80]	; (80043d4 <usart_setup+0xac>)
 8004384:	f000 fe80 	bl	8005088 <rcc_periph_reset_pulse>
	usart_disable(SPF_USART);
 8004388:	4c13      	ldr	r4, [pc, #76]	; (80043d8 <usart_setup+0xb0>)
 800438a:	0020      	movs	r0, r4
 800438c:	f000 ff17 	bl	80051be <usart_disable>
	usart_set_baudrate(SPF_USART, SPF_USART_BAUD);
 8004390:	21e1      	movs	r1, #225	; 0xe1
 8004392:	0249      	lsls	r1, r1, #9
 8004394:	0020      	movs	r0, r4
 8004396:	f000 feb5 	bl	8005104 <usart_set_baudrate>
	usart_set_databits(SPF_USART, 8);
 800439a:	2108      	movs	r1, #8
 800439c:	0020      	movs	r0, r4
 800439e:	f000 fedd 	bl	800515c <usart_set_databits>
	usart_set_stopbits(SPF_USART,USART_STOPBITS_1);
 80043a2:	2100      	movs	r1, #0
 80043a4:	0020      	movs	r0, r4
 80043a6:	f000 fee7 	bl	8005178 <usart_set_stopbits>
	usart_set_mode(SPF_USART, USART_MODE_TX_RX);
 80043aa:	210c      	movs	r1, #12
 80043ac:	0020      	movs	r0, r4
 80043ae:	f000 fef3 	bl	8005198 <usart_set_mode>
	usart_set_parity(SPF_USART, USART_PARITY_NONE);
 80043b2:	2100      	movs	r1, #0
 80043b4:	0020      	movs	r0, r4
 80043b6:	f000 fee7 	bl	8005188 <usart_set_parity>
	usart_set_flow_control(SPF_USART, USART_FLOWCONTROL_NONE);
 80043ba:	2100      	movs	r1, #0
 80043bc:	0020      	movs	r0, r4
 80043be:	f000 fef1 	bl	80051a4 <usart_set_flow_control>
	usart_enable(SPF_USART);
 80043c2:	0020      	movs	r0, r4
 80043c4:	f000 fef6 	bl	80051b4 <usart_enable>
}
 80043c8:	bd70      	pop	{r4, r5, r6, pc}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	00000581 	.word	0x00000581
 80043d0:	0000068e 	.word	0x0000068e
 80043d4:	0000048e 	.word	0x0000048e
 80043d8:	40013800 	.word	0x40013800

080043dc <_putchar_mem>:
{
	usart_send_blocking(SPF_USART, character);		
}

static void _putchar_mem(char character)
{
 80043dc:	b510      	push	{r4, lr}
 80043de:	0001      	movs	r1, r0
	mem_eeprom_write_byte(curr_address++, character);
 80043e0:	4c07      	ldr	r4, [pc, #28]	; (8004400 <_putchar_mem+0x24>)
 80043e2:	6820      	ldr	r0, [r4, #0]
 80043e4:	1c43      	adds	r3, r0, #1
 80043e6:	6023      	str	r3, [r4, #0]
 80043e8:	f000 f87e 	bl	80044e8 <mem_eeprom_write_byte>
	
	if(curr_address == LOG_START + LOG_SIZE)
 80043ec:	6822      	ldr	r2, [r4, #0]
 80043ee:	4b05      	ldr	r3, [pc, #20]	; (8004404 <_putchar_mem+0x28>)
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d000      	beq.n	80043f6 <_putchar_mem+0x1a>
	{
		curr_address = LOG_START;
	}
}
 80043f4:	bd10      	pop	{r4, pc}
		curr_address = LOG_START;
 80043f6:	4b02      	ldr	r3, [pc, #8]	; (8004400 <_putchar_mem+0x24>)
 80043f8:	4a03      	ldr	r2, [pc, #12]	; (8004408 <_putchar_mem+0x2c>)
 80043fa:	601a      	str	r2, [r3, #0]
}
 80043fc:	e7fa      	b.n	80043f4 <_putchar_mem+0x18>
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	20000000 	.word	0x20000000
 8004404:	08080800 	.word	0x08080800
 8004408:	08080400 	.word	0x08080400

0800440c <_putchar_spf>:
{
 800440c:	b510      	push	{r4, lr}
	usart_send_blocking(SPF_USART, character);		
 800440e:	0001      	movs	r1, r0
 8004410:	4801      	ldr	r0, [pc, #4]	; (8004418 <_putchar_spf+0xc>)
 8004412:	f000 fed9 	bl	80051c8 <usart_send_blocking>
}
 8004416:	bd10      	pop	{r4, pc}
 8004418:	40013800 	.word	0x40013800

0800441c <_putchar_main>:
{
 800441c:	b510      	push	{r4, lr}
 800441e:	0004      	movs	r4, r0
	_putchar_mem(character);
 8004420:	f7ff ffdc 	bl	80043dc <_putchar_mem>
	_putchar_spf(character);
 8004424:	0020      	movs	r0, r4
 8004426:	f7ff fff1 	bl	800440c <_putchar_spf>
}
 800442a:	bd10      	pop	{r4, pc}

0800442c <log_init>:
{
 800442c:	b510      	push	{r4, lr}
	mem_init();
 800442e:	f000 f82b 	bl	8004488 <mem_init>
    curr_address = 0;
 8004432:	4b07      	ldr	r3, [pc, #28]	; (8004450 <log_init+0x24>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
    clock_setup();
 8004438:	f7ff ff50 	bl	80042dc <clock_setup>
    usart_setup();
 800443c:	f7ff ff74 	bl	8004328 <usart_setup>
	for(int i = 0; i < 100000; i++){__asm__("nop");};
 8004440:	2300      	movs	r3, #0
 8004442:	4a04      	ldr	r2, [pc, #16]	; (8004454 <log_init+0x28>)
 8004444:	4293      	cmp	r3, r2
 8004446:	dc02      	bgt.n	800444e <log_init+0x22>
 8004448:	46c0      	nop			; (mov r8, r8)
 800444a:	3301      	adds	r3, #1
 800444c:	e7f9      	b.n	8004442 <log_init+0x16>
}
 800444e:	bd10      	pop	{r4, pc}
 8004450:	20000000 	.word	0x20000000
 8004454:	0001869f 	.word	0x0001869f

08004458 <log_printf>:
{
 8004458:	b40f      	push	{r0, r1, r2, r3}
 800445a:	b500      	push	{lr}
 800445c:	b083      	sub	sp, #12
 800445e:	aa04      	add	r2, sp, #16
 8004460:	ca02      	ldmia	r2!, {r1}
	va_start(va, format);
 8004462:	9201      	str	r2, [sp, #4]
	fnprintf(_putchar_main, format, va);
 8004464:	4806      	ldr	r0, [pc, #24]	; (8004480 <log_printf+0x28>)
 8004466:	f000 f90d 	bl	8004684 <fnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {}
 800446a:	2140      	movs	r1, #64	; 0x40
 800446c:	4805      	ldr	r0, [pc, #20]	; (8004484 <log_printf+0x2c>)
 800446e:	f000 fec2 	bl	80051f6 <usart_get_flag>
 8004472:	2800      	cmp	r0, #0
 8004474:	d0f9      	beq.n	800446a <log_printf+0x12>
}
 8004476:	b003      	add	sp, #12
 8004478:	bc08      	pop	{r3}
 800447a:	b004      	add	sp, #16
 800447c:	4718      	bx	r3
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	0800441d 	.word	0x0800441d
 8004484:	40013800 	.word	0x40013800

08004488 <mem_init>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

void mem_init(void)
{
 8004488:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_MIF);
 800448a:	20c1      	movs	r0, #193	; 0xc1
 800448c:	00c0      	lsls	r0, r0, #3
 800448e:	f000 fded 	bl	800506c <rcc_periph_clock_enable>
    // {
    //     // log_printf("%08x : %08x\n", next_reading_add, MMIO32(next_reading_add));
    //     msg_num++;
    //     next_reading_add += 4;
    // }
}
 8004492:	bd10      	pop	{r4, pc}

08004494 <mem_eeprom_write_word>:


bool mem_eeprom_write_word(uint32_t address, uint32_t data)
{
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	0004      	movs	r4, r0
 8004498:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 800449a:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <mem_eeprom_write_word+0x44>)
 800449c:	18c2      	adds	r2, r0, r3
 800449e:	2380      	movs	r3, #128	; 0x80
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d301      	bcc.n	80044aa <mem_eeprom_write_word+0x16>
        return false;
 80044a6:	2000      	movs	r0, #0
        FLASH_SR = FLASH_SR_EOP;

    flash_lock_pecr();

    return true;
}
 80044a8:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock_pecr();
 80044aa:	f000 fc27 	bl	8004cfc <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 80044ae:	4a0b      	ldr	r2, [pc, #44]	; (80044dc <mem_eeprom_write_word+0x48>)
 80044b0:	6813      	ldr	r3, [r2, #0]
 80044b2:	490b      	ldr	r1, [pc, #44]	; (80044e0 <mem_eeprom_write_word+0x4c>)
 80044b4:	400b      	ands	r3, r1
 80044b6:	6013      	str	r3, [r2, #0]
    MMIO32(address) = data;
 80044b8:	6025      	str	r5, [r4, #0]
    while (FLASH_SR & FLASH_SR_BSY);
 80044ba:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <mem_eeprom_write_word+0x50>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	07db      	lsls	r3, r3, #31
 80044c0:	d4fb      	bmi.n	80044ba <mem_eeprom_write_word+0x26>
    if (FLASH_SR & FLASH_SR_EOP)
 80044c2:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <mem_eeprom_write_word+0x50>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	079b      	lsls	r3, r3, #30
 80044c8:	d502      	bpl.n	80044d0 <mem_eeprom_write_word+0x3c>
        FLASH_SR = FLASH_SR_EOP;
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <mem_eeprom_write_word+0x50>)
 80044cc:	2202      	movs	r2, #2
 80044ce:	601a      	str	r2, [r3, #0]
    flash_lock_pecr();
 80044d0:	f000 fc20 	bl	8004d14 <flash_lock_pecr>
    return true;
 80044d4:	2001      	movs	r0, #1
 80044d6:	e7e7      	b.n	80044a8 <mem_eeprom_write_word+0x14>
 80044d8:	f7f80000 	.word	0xf7f80000
 80044dc:	40022004 	.word	0x40022004
 80044e0:	fffffeff 	.word	0xfffffeff
 80044e4:	40022018 	.word	0x40022018

080044e8 <mem_eeprom_write_byte>:

    return true;
}

bool mem_eeprom_write_byte(uint32_t address, uint8_t data)
{
 80044e8:	b570      	push	{r4, r5, r6, lr}
 80044ea:	0004      	movs	r4, r0
 80044ec:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 80044ee:	4b0f      	ldr	r3, [pc, #60]	; (800452c <mem_eeprom_write_byte+0x44>)
 80044f0:	18c2      	adds	r2, r0, r3
 80044f2:	2380      	movs	r3, #128	; 0x80
 80044f4:	011b      	lsls	r3, r3, #4
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d301      	bcc.n	80044fe <mem_eeprom_write_byte+0x16>
        return false;
 80044fa:	2000      	movs	r0, #0
        FLASH_SR = FLASH_SR_EOP;

    flash_lock_pecr();

    return true;
}
 80044fc:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock_pecr();
 80044fe:	f000 fbfd 	bl	8004cfc <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 8004502:	4a0b      	ldr	r2, [pc, #44]	; (8004530 <mem_eeprom_write_byte+0x48>)
 8004504:	6813      	ldr	r3, [r2, #0]
 8004506:	490b      	ldr	r1, [pc, #44]	; (8004534 <mem_eeprom_write_byte+0x4c>)
 8004508:	400b      	ands	r3, r1
 800450a:	6013      	str	r3, [r2, #0]
    MMIO8(address) = data;
 800450c:	7025      	strb	r5, [r4, #0]
    while (FLASH_SR & FLASH_SR_BSY);
 800450e:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <mem_eeprom_write_byte+0x50>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	07db      	lsls	r3, r3, #31
 8004514:	d4fb      	bmi.n	800450e <mem_eeprom_write_byte+0x26>
    if (FLASH_SR & FLASH_SR_EOP)
 8004516:	4b08      	ldr	r3, [pc, #32]	; (8004538 <mem_eeprom_write_byte+0x50>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	079b      	lsls	r3, r3, #30
 800451c:	d502      	bpl.n	8004524 <mem_eeprom_write_byte+0x3c>
        FLASH_SR = FLASH_SR_EOP;
 800451e:	4b06      	ldr	r3, [pc, #24]	; (8004538 <mem_eeprom_write_byte+0x50>)
 8004520:	2202      	movs	r2, #2
 8004522:	601a      	str	r2, [r3, #0]
    flash_lock_pecr();
 8004524:	f000 fbf6 	bl	8004d14 <flash_lock_pecr>
    return true;
 8004528:	2001      	movs	r0, #1
 800452a:	e7e7      	b.n	80044fc <mem_eeprom_write_byte+0x14>
 800452c:	f7f80000 	.word	0xf7f80000
 8004530:	40022004 	.word	0x40022004
 8004534:	fffffeff 	.word	0xfffffeff
 8004538:	40022018 	.word	0x40022018

0800453c <mem_flash_erase_page>:


bool mem_flash_erase_page(uint32_t address)
{
 800453c:	b510      	push	{r4, lr}
 800453e:	0004      	movs	r4, r0
    bool result = false;

    // Check page aligned
    if (address & 0x7F)
 8004540:	0643      	lsls	r3, r0, #25
 8004542:	d002      	beq.n	800454a <mem_flash_erase_page+0xe>
        return false; 
 8004544:	2400      	movs	r4, #0

    flash_unlock();
    result = mem_flash_do_page_erase(address);
    flash_lock();
    return result;
}
 8004546:	0020      	movs	r0, r4
 8004548:	bd10      	pop	{r4, pc}
    flash_unlock();
 800454a:	f000 fc07 	bl	8004d5c <flash_unlock>
    result = mem_flash_do_page_erase(address);
 800454e:	0020      	movs	r0, r4
 8004550:	f000 ffce 	bl	80054f0 <__mem_flash_do_page_erase_veneer>
 8004554:	0004      	movs	r4, r0
    flash_lock();
 8004556:	f000 fc09 	bl	8004d6c <flash_lock>
    return result;
 800455a:	e7f4      	b.n	8004546 <mem_flash_erase_page+0xa>

0800455c <mem_flash_write_half_page>:

bool mem_flash_write_half_page(uint32_t address, uint32_t *data)
{
 800455c:	b570      	push	{r4, r5, r6, lr}
 800455e:	0004      	movs	r4, r0
 8004560:	000d      	movs	r5, r1
    bool result = false;

    if ((uint32_t)address & 0x3F)
 8004562:	0683      	lsls	r3, r0, #26
 8004564:	d002      	beq.n	800456c <mem_flash_write_half_page+0x10>
        return false; //not half-page aligned
 8004566:	2400      	movs	r4, #0

    flash_unlock();
    result = mem_flash_do_write_half_page(address, data);
    flash_lock();
    return result;
}
 8004568:	0020      	movs	r0, r4
 800456a:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock();
 800456c:	f000 fbf6 	bl	8004d5c <flash_unlock>
    result = mem_flash_do_write_half_page(address, data);
 8004570:	0029      	movs	r1, r5
 8004572:	0020      	movs	r0, r4
 8004574:	f000 ffc4 	bl	8005500 <__mem_flash_do_write_half_page_veneer>
 8004578:	0004      	movs	r4, r0
    flash_lock();
 800457a:	f000 fbf7 	bl	8004d6c <flash_lock>
    return result;
 800457e:	e7f3      	b.n	8004568 <mem_flash_write_half_page+0xc>

08004580 <_atoi>:
    return (ch >= '0') && (ch <= '9');
}

// internal ASCII string to uint32_t conversion
static uint32_t _atoi(const char **str)
{
 8004580:	0001      	movs	r1, r0
    uint32_t i = 0U;
 8004582:	2000      	movs	r0, #0
    while (_is_digit(**str))
 8004584:	680a      	ldr	r2, [r1, #0]
 8004586:	7813      	ldrb	r3, [r2, #0]
    return (ch >= '0') && (ch <= '9');
 8004588:	3b30      	subs	r3, #48	; 0x30
 800458a:	b2db      	uxtb	r3, r3
    while (_is_digit(**str))
 800458c:	2b09      	cmp	r3, #9
 800458e:	d808      	bhi.n	80045a2 <_atoi+0x22>
    {
        i = i * 10U + (uint32_t)(*((*str)++) - '0');
 8004590:	0083      	lsls	r3, r0, #2
 8004592:	181b      	adds	r3, r3, r0
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	1c50      	adds	r0, r2, #1
 8004598:	6008      	str	r0, [r1, #0]
 800459a:	7810      	ldrb	r0, [r2, #0]
 800459c:	18c0      	adds	r0, r0, r3
 800459e:	3830      	subs	r0, #48	; 0x30
 80045a0:	e7f0      	b.n	8004584 <_atoi+0x4>
    }
    return i;
}
 80045a2:	4770      	bx	lr

080045a4 <_ntoa_format>:

// internal itoa format
static uint32_t _ntoa_format(out_fct_type out, int32_t value, uint32_t base, uint32_t width, bool sign)
{
 80045a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045a6:	46d6      	mov	lr, sl
 80045a8:	464f      	mov	r7, r9
 80045aa:	4646      	mov	r6, r8
 80045ac:	b5c0      	push	{r6, r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	4680      	mov	r8, r0
 80045b2:	0008      	movs	r0, r1
 80045b4:	0015      	movs	r5, r2
 80045b6:	469a      	mov	sl, r3
 80045b8:	ab10      	add	r3, sp, #64	; 0x40
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	4699      	mov	r9, r3
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    uint32_t len = 0;
    bool negative = false;

    // write if precision != 0 and value is != 0
    if (value)
 80045be:	2900      	cmp	r1, #0
 80045c0:	d057      	beq.n	8004672 <_ntoa_format+0xce>
    {
        // Negative sign
        if(sign && value < 0)
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <_ntoa_format+0x2a>
 80045c6:	2900      	cmp	r1, #0
 80045c8:	db03      	blt.n	80045d2 <_ntoa_format+0x2e>
            negative = true;
            value = 0 - value; 
        } 
        else
        {
            negative = false;
 80045ca:	2300      	movs	r3, #0
 80045cc:	4699      	mov	r9, r3
 80045ce:	2400      	movs	r4, #0
 80045d0:	e00f      	b.n	80045f2 <_ntoa_format+0x4e>
            value = 0 - value; 
 80045d2:	4248      	negs	r0, r1
 80045d4:	e7fb      	b.n	80045ce <_ntoa_format+0x2a>

        // Digits to char
        do
        {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 80045d6:	3130      	adds	r1, #48	; 0x30
 80045d8:	b2c9      	uxtb	r1, r1
 80045da:	1c67      	adds	r7, r4, #1
 80045dc:	466b      	mov	r3, sp
 80045de:	5519      	strb	r1, [r3, r4]
            value /= base;
 80045e0:	0029      	movs	r1, r5
 80045e2:	0030      	movs	r0, r6
 80045e4:	f000 feea 	bl	80053bc <__udivsi3>
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d010      	beq.n	800460e <_ntoa_format+0x6a>
 80045ec:	2f1f      	cmp	r7, #31
 80045ee:	d80e      	bhi.n	800460e <_ntoa_format+0x6a>
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 80045f0:	003c      	movs	r4, r7
            const char digit = (char)(value % base);
 80045f2:	0006      	movs	r6, r0
 80045f4:	0029      	movs	r1, r5
 80045f6:	f000 ff67 	bl	80054c8 <__aeabi_uidivmod>
 80045fa:	b2c9      	uxtb	r1, r1
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 80045fc:	2909      	cmp	r1, #9
 80045fe:	d9ea      	bls.n	80045d6 <_ntoa_format+0x32>
 8004600:	3137      	adds	r1, #55	; 0x37
 8004602:	b2c9      	uxtb	r1, r1
 8004604:	e7e9      	b.n	80045da <_ntoa_format+0x36>

        // pad leading zeros
        while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
        {
            buf[len++] = '0';
 8004606:	2330      	movs	r3, #48	; 0x30
 8004608:	466a      	mov	r2, sp
 800460a:	55d3      	strb	r3, [r2, r7]
 800460c:	3701      	adds	r7, #1
        while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
 800460e:	4557      	cmp	r7, sl
 8004610:	d201      	bcs.n	8004616 <_ntoa_format+0x72>
 8004612:	2f1f      	cmp	r7, #31
 8004614:	d9f7      	bls.n	8004606 <_ntoa_format+0x62>
        }

        // Base specifier
        if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004616:	2d10      	cmp	r5, #16
 8004618:	d016      	beq.n	8004648 <_ntoa_format+0xa4>
        {
            buf[len++] = 'X';
        }
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 800461a:	2d02      	cmp	r5, #2
 800461c:	d01b      	beq.n	8004656 <_ntoa_format+0xb2>
        {
            buf[len++] = 'b';
        }
        if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 800461e:	2d10      	cmp	r5, #16
 8004620:	d020      	beq.n	8004664 <_ntoa_format+0xc0>
 8004622:	2d02      	cmp	r5, #2
 8004624:	d01e      	beq.n	8004664 <_ntoa_format+0xc0>
        {
            buf[len++] = '0';
        }

        if ( negative && (len < PRINTF_NTOA_BUFFER_SIZE) )
 8004626:	464b      	mov	r3, r9
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <_ntoa_format+0x94>
 800462c:	2f1f      	cmp	r7, #31
 800462e:	d803      	bhi.n	8004638 <_ntoa_format+0x94>
        {
            buf[len++] = '-';
 8004630:	232d      	movs	r3, #45	; 0x2d
 8004632:	466a      	mov	r2, sp
 8004634:	55d3      	strb	r3, [r2, r7]
 8004636:	3701      	adds	r7, #1
        }

        // reverse string and write out
        uint32_t i = len;
 8004638:	003c      	movs	r4, r7
        while (i)
 800463a:	2c00      	cmp	r4, #0
 800463c:	d01a      	beq.n	8004674 <_ntoa_format+0xd0>
        {
            out(buf[--i]);
 800463e:	3c01      	subs	r4, #1
 8004640:	466b      	mov	r3, sp
 8004642:	5d18      	ldrb	r0, [r3, r4]
 8004644:	47c0      	blx	r8
 8004646:	e7f8      	b.n	800463a <_ntoa_format+0x96>
        if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004648:	2f1f      	cmp	r7, #31
 800464a:	d8e6      	bhi.n	800461a <_ntoa_format+0x76>
            buf[len++] = 'X';
 800464c:	2358      	movs	r3, #88	; 0x58
 800464e:	466a      	mov	r2, sp
 8004650:	55d3      	strb	r3, [r2, r7]
 8004652:	3701      	adds	r7, #1
 8004654:	e7e3      	b.n	800461e <_ntoa_format+0x7a>
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004656:	2f1f      	cmp	r7, #31
 8004658:	d8e1      	bhi.n	800461e <_ntoa_format+0x7a>
            buf[len++] = 'b';
 800465a:	2362      	movs	r3, #98	; 0x62
 800465c:	466a      	mov	r2, sp
 800465e:	55d3      	strb	r3, [r2, r7]
 8004660:	3701      	adds	r7, #1
 8004662:	e7dc      	b.n	800461e <_ntoa_format+0x7a>
        if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004664:	2f1f      	cmp	r7, #31
 8004666:	d8de      	bhi.n	8004626 <_ntoa_format+0x82>
            buf[len++] = '0';
 8004668:	2330      	movs	r3, #48	; 0x30
 800466a:	466a      	mov	r2, sp
 800466c:	55d3      	strb	r3, [r2, r7]
 800466e:	3701      	adds	r7, #1
 8004670:	e7d9      	b.n	8004626 <_ntoa_format+0x82>
    uint32_t len = 0;
 8004672:	2700      	movs	r7, #0
        }
    }
    return len;
}
 8004674:	0038      	movs	r0, r7
 8004676:	b008      	add	sp, #32
 8004678:	bce0      	pop	{r5, r6, r7}
 800467a:	46ba      	mov	sl, r7
 800467c:	46b1      	mov	r9, r6
 800467e:	46a8      	mov	r8, r5
 8004680:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004684 <fnprintf>:

uint32_t fnprintf(out_fct_type out, const char *format, va_list va)
{
 8004684:	b570      	push	{r4, r5, r6, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	0005      	movs	r5, r0
 800468a:	9103      	str	r1, [sp, #12]
 800468c:	9202      	str	r2, [sp, #8]
    uint32_t width;
    uint32_t idx = 0U;
 800468e:	2400      	movs	r4, #0

    while (*format)
 8004690:	e004      	b.n	800469c <fnprintf+0x18>
            format++;
        }
        else
        {
            // Just print char
            out(*format);
 8004692:	47a8      	blx	r5
            idx++;
 8004694:	3401      	adds	r4, #1
            format++;
 8004696:	9b03      	ldr	r3, [sp, #12]
 8004698:	3301      	adds	r3, #1
 800469a:	9303      	str	r3, [sp, #12]
    while (*format)
 800469c:	9b03      	ldr	r3, [sp, #12]
 800469e:	7818      	ldrb	r0, [r3, #0]
 80046a0:	2800      	cmp	r0, #0
 80046a2:	d100      	bne.n	80046a6 <fnprintf+0x22>
 80046a4:	e089      	b.n	80047ba <fnprintf+0x136>
        if (*format == '%')
 80046a6:	2825      	cmp	r0, #37	; 0x25
 80046a8:	d1f3      	bne.n	8004692 <fnprintf+0xe>
            format++;
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	9203      	str	r2, [sp, #12]
            continue;
        }

        // evaluate width field
        width = 0U;
        if (_is_digit(*format))
 80046ae:	785b      	ldrb	r3, [r3, #1]
    return (ch >= '0') && (ch <= '9');
 80046b0:	3b30      	subs	r3, #48	; 0x30
 80046b2:	b2db      	uxtb	r3, r3
        if (_is_digit(*format))
 80046b4:	2b09      	cmp	r3, #9
 80046b6:	d90b      	bls.n	80046d0 <fnprintf+0x4c>
        width = 0U;
 80046b8:	2300      	movs	r3, #0
        {
            width = _atoi(&format);
        }

        // evaluate specifier
        switch (*format)
 80046ba:	9a03      	ldr	r2, [sp, #12]
 80046bc:	7810      	ldrb	r0, [r2, #0]
 80046be:	0002      	movs	r2, r0
 80046c0:	3a25      	subs	r2, #37	; 0x25
 80046c2:	b2d1      	uxtb	r1, r2
 80046c4:	2953      	cmp	r1, #83	; 0x53
 80046c6:	d872      	bhi.n	80047ae <fnprintf+0x12a>
 80046c8:	008a      	lsls	r2, r1, #2
 80046ca:	493d      	ldr	r1, [pc, #244]	; (80047c0 <fnprintf+0x13c>)
 80046cc:	588a      	ldr	r2, [r1, r2]
 80046ce:	4697      	mov	pc, r2
            width = _atoi(&format);
 80046d0:	a803      	add	r0, sp, #12
 80046d2:	f7ff ff55 	bl	8004580 <_atoi>
 80046d6:	0003      	movs	r3, r0
 80046d8:	e7ef      	b.n	80046ba <fnprintf+0x36>
        case 'o':
        case 'b':
        {
            // set the base
            uint32_t base;
            if (*format == 'x' || *format == 'X')
 80046da:	2878      	cmp	r0, #120	; 0x78
 80046dc:	d009      	beq.n	80046f2 <fnprintf+0x6e>
 80046de:	2858      	cmp	r0, #88	; 0x58
 80046e0:	d01a      	beq.n	8004718 <fnprintf+0x94>
            {
                base = 16U;
            }
            else if (*format == 'o')
 80046e2:	286f      	cmp	r0, #111	; 0x6f
 80046e4:	d01a      	beq.n	800471c <fnprintf+0x98>
            {
                base = 8U;
            }
            else if (*format == 'b')
 80046e6:	2862      	cmp	r0, #98	; 0x62
 80046e8:	d001      	beq.n	80046ee <fnprintf+0x6a>
            {
                base = 2U;
            }
            else
            {
                base = 10U;
 80046ea:	220a      	movs	r2, #10
 80046ec:	e002      	b.n	80046f4 <fnprintf+0x70>
                base = 2U;
 80046ee:	2202      	movs	r2, #2
 80046f0:	e000      	b.n	80046f4 <fnprintf+0x70>
                base = 16U;
 80046f2:	2210      	movs	r2, #16
            }

            // convert integer
            if ((*format == 'i') || (*format == 'd'))
 80046f4:	2869      	cmp	r0, #105	; 0x69
 80046f6:	d001      	beq.n	80046fc <fnprintf+0x78>
 80046f8:	2864      	cmp	r0, #100	; 0x64
 80046fa:	d111      	bne.n	8004720 <fnprintf+0x9c>
            {
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, true);
 80046fc:	9902      	ldr	r1, [sp, #8]
 80046fe:	1d08      	adds	r0, r1, #4
 8004700:	9002      	str	r0, [sp, #8]
 8004702:	6809      	ldr	r1, [r1, #0]
 8004704:	2001      	movs	r0, #1
 8004706:	9000      	str	r0, [sp, #0]
 8004708:	0028      	movs	r0, r5
 800470a:	f7ff ff4b 	bl	80045a4 <_ntoa_format>
 800470e:	1824      	adds	r4, r4, r0
            }
            else
            {
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, false);
            }
            format++;
 8004710:	9b03      	ldr	r3, [sp, #12]
 8004712:	3301      	adds	r3, #1
 8004714:	9303      	str	r3, [sp, #12]
            break;
 8004716:	e7c1      	b.n	800469c <fnprintf+0x18>
                base = 16U;
 8004718:	2210      	movs	r2, #16
 800471a:	e7eb      	b.n	80046f4 <fnprintf+0x70>
                base = 8U;
 800471c:	2208      	movs	r2, #8
 800471e:	e7e9      	b.n	80046f4 <fnprintf+0x70>
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, false);
 8004720:	9902      	ldr	r1, [sp, #8]
 8004722:	1d08      	adds	r0, r1, #4
 8004724:	9002      	str	r0, [sp, #8]
 8004726:	6809      	ldr	r1, [r1, #0]
 8004728:	2000      	movs	r0, #0
 800472a:	9000      	str	r0, [sp, #0]
 800472c:	0028      	movs	r0, r5
 800472e:	f7ff ff39 	bl	80045a4 <_ntoa_format>
 8004732:	1824      	adds	r4, r4, r0
 8004734:	e7ec      	b.n	8004710 <fnprintf+0x8c>
        }

        case 'c':
        {
            out((char)va_arg(va, int));
 8004736:	9b02      	ldr	r3, [sp, #8]
 8004738:	1d1a      	adds	r2, r3, #4
 800473a:	9202      	str	r2, [sp, #8]
 800473c:	7818      	ldrb	r0, [r3, #0]
 800473e:	47a8      	blx	r5
            idx++;
 8004740:	3401      	adds	r4, #1
            format++;
 8004742:	9b03      	ldr	r3, [sp, #12]
 8004744:	3301      	adds	r3, #1
 8004746:	9303      	str	r3, [sp, #12]
            break;
 8004748:	e7a8      	b.n	800469c <fnprintf+0x18>
        }

        case 's':
        {
            const char *p = va_arg(va, char *);
 800474a:	9b02      	ldr	r3, [sp, #8]
 800474c:	1d1a      	adds	r2, r3, #4
 800474e:	9202      	str	r2, [sp, #8]
 8004750:	681e      	ldr	r6, [r3, #0]
    for (s = str; *s && maxsize--; ++s)
 8004752:	0033      	movs	r3, r6
 8004754:	2280      	movs	r2, #128	; 0x80
 8004756:	00d2      	lsls	r2, r2, #3
 8004758:	e001      	b.n	800475e <fnprintf+0xda>
 800475a:	3301      	adds	r3, #1
 800475c:	000a      	movs	r2, r1
 800475e:	7819      	ldrb	r1, [r3, #0]
 8004760:	2900      	cmp	r1, #0
 8004762:	d002      	beq.n	800476a <fnprintf+0xe6>
 8004764:	1e51      	subs	r1, r2, #1
 8004766:	2a00      	cmp	r2, #0
 8004768:	d1f7      	bne.n	800475a <fnprintf+0xd6>
            uint32_t l = _strnlen_s(p, PRINTF_MAX_STR_LEN);

            // string output
            while (*p != 0)
 800476a:	7830      	ldrb	r0, [r6, #0]
 800476c:	2800      	cmp	r0, #0
 800476e:	d003      	beq.n	8004778 <fnprintf+0xf4>
            {
                out(*(p++));
 8004770:	3601      	adds	r6, #1
 8004772:	47a8      	blx	r5
                idx++;
 8004774:	3401      	adds	r4, #1
 8004776:	e7f8      	b.n	800476a <fnprintf+0xe6>
            }
            format++;
 8004778:	9b03      	ldr	r3, [sp, #12]
 800477a:	3301      	adds	r3, #1
 800477c:	9303      	str	r3, [sp, #12]
            break;
 800477e:	e78d      	b.n	800469c <fnprintf+0x18>
        }

        case 'p':
        {
            width = sizeof(void *) * 2U;
            idx += _ntoa_format(out, (int32_t)((uintptr_t)va_arg(va, void *)), 16U, width, false);
 8004780:	9b02      	ldr	r3, [sp, #8]
 8004782:	1d1a      	adds	r2, r3, #4
 8004784:	9202      	str	r2, [sp, #8]
 8004786:	6819      	ldr	r1, [r3, #0]
 8004788:	2300      	movs	r3, #0
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	3308      	adds	r3, #8
 800478e:	2210      	movs	r2, #16
 8004790:	0028      	movs	r0, r5
 8004792:	f7ff ff07 	bl	80045a4 <_ntoa_format>
 8004796:	1824      	adds	r4, r4, r0
            format++;
 8004798:	9b03      	ldr	r3, [sp, #12]
 800479a:	3301      	adds	r3, #1
 800479c:	9303      	str	r3, [sp, #12]
            break;
 800479e:	e77d      	b.n	800469c <fnprintf+0x18>
        }

        case '%':
        {
            out('%');
 80047a0:	2025      	movs	r0, #37	; 0x25
 80047a2:	47a8      	blx	r5
            idx++;
 80047a4:	3401      	adds	r4, #1
            format++;
 80047a6:	9b03      	ldr	r3, [sp, #12]
 80047a8:	3301      	adds	r3, #1
 80047aa:	9303      	str	r3, [sp, #12]
            break;
 80047ac:	e776      	b.n	800469c <fnprintf+0x18>
        }

        default:
        {
            out(*format);
 80047ae:	47a8      	blx	r5
            idx++;
 80047b0:	3401      	adds	r4, #1
            format++;
 80047b2:	9b03      	ldr	r3, [sp, #12]
 80047b4:	3301      	adds	r3, #1
 80047b6:	9303      	str	r3, [sp, #12]
            break;
 80047b8:	e770      	b.n	800469c <fnprintf+0x18>
        }
        }
    }
    // return written chars without terminating \0
    return idx;
}
 80047ba:	0020      	movs	r0, r4
 80047bc:	b004      	add	sp, #16
 80047be:	bd70      	pop	{r4, r5, r6, pc}
 80047c0:	08005598 	.word	0x08005598

080047c4 <spi_read_single>:
 * 
 * @param reg Register to read
 * @retval Value read from register
 */
static uint8_t spi_read_single(uint8_t reg)
{
 80047c4:	b570      	push	{r4, r5, r6, lr}
 80047c6:	0004      	movs	r4, r0
  spi_chip_select();
 80047c8:	25a0      	movs	r5, #160	; 0xa0
 80047ca:	05ed      	lsls	r5, r5, #23
 80047cc:	2140      	movs	r1, #64	; 0x40
 80047ce:	0028      	movs	r0, r5
 80047d0:	f000 fad6 	bl	8004d80 <gpio_clear>
  timers_delay_microseconds(1);
 80047d4:	2001      	movs	r0, #1
 80047d6:	f000 f953 	bl	8004a80 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, reg);                   
 80047da:	b2a1      	uxth	r1, r4
 80047dc:	4c08      	ldr	r4, [pc, #32]	; (8004800 <spi_read_single+0x3c>)
 80047de:	0020      	movs	r0, r4
 80047e0:	f000 fc7a 	bl	80050d8 <spi_xfer>
  uint8_t in =  spi_xfer(RFM_SPI, 0x00);                   
 80047e4:	2100      	movs	r1, #0
 80047e6:	0020      	movs	r0, r4
 80047e8:	f000 fc76 	bl	80050d8 <spi_xfer>
 80047ec:	b2c4      	uxtb	r4, r0
    
  spi_chip_deselect(); 
 80047ee:	2140      	movs	r1, #64	; 0x40
 80047f0:	0028      	movs	r0, r5
 80047f2:	f000 fac3 	bl	8004d7c <gpio_set>
  timers_delay_microseconds(1);
 80047f6:	2001      	movs	r0, #1
 80047f8:	f000 f942 	bl	8004a80 <timers_delay_microseconds>

  return in;
}
 80047fc:	0020      	movs	r0, r4
 80047fe:	bd70      	pop	{r4, r5, r6, pc}
 8004800:	40003800 	.word	0x40003800

08004804 <spi_write_single>:
  spi_chip_deselect();     
  timers_delay_microseconds(1);
}

static void spi_write_single(uint8_t reg, uint8_t data)
{
 8004804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004806:	0005      	movs	r5, r0
 8004808:	000e      	movs	r6, r1
  // Set MSB for write operation
  uint8_t cmd = 0x80 | reg;
 800480a:	2480      	movs	r4, #128	; 0x80
 800480c:	4264      	negs	r4, r4
 800480e:	4304      	orrs	r4, r0
 8004810:	b2e4      	uxtb	r4, r4

  spi_chip_select();
 8004812:	27a0      	movs	r7, #160	; 0xa0
 8004814:	05ff      	lsls	r7, r7, #23
 8004816:	2140      	movs	r1, #64	; 0x40
 8004818:	0038      	movs	r0, r7
 800481a:	f000 fab1 	bl	8004d80 <gpio_clear>
  timers_delay_microseconds(1);
 800481e:	2001      	movs	r0, #1
 8004820:	f000 f92e 	bl	8004a80 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, cmd);                 
 8004824:	b2a1      	uxth	r1, r4
 8004826:	4c15      	ldr	r4, [pc, #84]	; (800487c <spi_write_single+0x78>)
 8004828:	0020      	movs	r0, r4
 800482a:	f000 fc55 	bl	80050d8 <spi_xfer>
  spi_xfer(RFM_SPI, data);             
 800482e:	b2b1      	uxth	r1, r6
 8004830:	0020      	movs	r0, r4
 8004832:	f000 fc51 	bl	80050d8 <spi_xfer>

  spi_chip_deselect(); 
 8004836:	2140      	movs	r1, #64	; 0x40
 8004838:	0038      	movs	r0, r7
 800483a:	f000 fa9f 	bl	8004d7c <gpio_set>
  timers_delay_microseconds(1);
 800483e:	2001      	movs	r0, #1
 8004840:	f000 f91e 	bl	8004a80 <timers_delay_microseconds>

  uint8_t curr_data = spi_read_single(reg);
 8004844:	0028      	movs	r0, r5
 8004846:	f7ff ffbd 	bl	80047c4 <spi_read_single>
 800484a:	0004      	movs	r4, r0

  // log_printf("%02x : %02x\n", reg, data);

  if(reg == RFM_REG_12_IRQ_FLAGS)    
 800484c:	2d12      	cmp	r5, #18
 800484e:	d013      	beq.n	8004878 <spi_write_single+0x74>
    return;

  TIMEOUT(10000, "RFM SPI Write", ((reg << 16) | data), (curr_data == data), ;, timers_delay_microseconds(100); curr_data = spi_read_single(reg););
 8004850:	f000 f968 	bl	8004b24 <timeout_init>
 8004854:	042a      	lsls	r2, r5, #16
 8004856:	4332      	orrs	r2, r6
 8004858:	4909      	ldr	r1, [pc, #36]	; (8004880 <spi_write_single+0x7c>)
 800485a:	480a      	ldr	r0, [pc, #40]	; (8004884 <spi_write_single+0x80>)
 800485c:	f000 f970 	bl	8004b40 <timeout>
 8004860:	2800      	cmp	r0, #0
 8004862:	d109      	bne.n	8004878 <spi_write_single+0x74>
 8004864:	42b4      	cmp	r4, r6
 8004866:	d007      	beq.n	8004878 <spi_write_single+0x74>
 8004868:	2064      	movs	r0, #100	; 0x64
 800486a:	f000 f909 	bl	8004a80 <timers_delay_microseconds>
 800486e:	0028      	movs	r0, r5
 8004870:	f7ff ffa8 	bl	80047c4 <spi_read_single>
 8004874:	0004      	movs	r4, r0
 8004876:	e7ed      	b.n	8004854 <spi_write_single+0x50>

  // log_printf("%02x : %02x : %02x\n", reg, data, curr_data);
}
 8004878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	40003800 	.word	0x40003800
 8004880:	080056e8 	.word	0x080056e8
 8004884:	00002710 	.word	0x00002710

08004888 <exti4_15_isr>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void exti4_15_isr(void)
{
 8004888:	b570      	push	{r4, r5, r6, lr}
  uint16_t timer = timers_micros();
 800488a:	f000 f90f 	bl	8004aac <timers_micros>
  
  exti_reset_request(RFM_IO_0_EXTI);
 800488e:	2480      	movs	r4, #128	; 0x80
 8004890:	00e4      	lsls	r4, r4, #3
 8004892:	0020      	movs	r0, r4
 8004894:	f000 fa16 	bl	8004cc4 <exti_reset_request>
  exti_reset_request(RFM_IO_0_EXTI);
 8004898:	0020      	movs	r0, r4
 800489a:	f000 fa13 	bl	8004cc4 <exti_reset_request>

  // Store IRQ Flags
  packets_buf[packets_head].flags = get_irq();
 800489e:	4d1b      	ldr	r5, [pc, #108]	; (800490c <exti4_15_isr+0x84>)
 80048a0:	782e      	ldrb	r6, [r5, #0]
  return spi_read_single(RFM_REG_12_IRQ_FLAGS);
 80048a2:	2012      	movs	r0, #18
 80048a4:	f7ff ff8e 	bl	80047c4 <spi_read_single>
  packets_buf[packets_head].flags = get_irq();
 80048a8:	4c19      	ldr	r4, [pc, #100]	; (8004910 <exti4_15_isr+0x88>)
 80048aa:	0073      	lsls	r3, r6, #1
 80048ac:	199b      	adds	r3, r3, r6
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	18e3      	adds	r3, r4, r3
 80048b2:	7418      	strb	r0, [r3, #16]
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 80048b4:	21ff      	movs	r1, #255	; 0xff
 80048b6:	2012      	movs	r0, #18
 80048b8:	f7ff ffa4 	bl	8004804 <spi_write_single>
 80048bc:	21ff      	movs	r1, #255	; 0xff
 80048be:	2012      	movs	r0, #18
 80048c0:	f7ff ffa0 	bl	8004804 <spi_write_single>
  clear_irq(RFM_IRQ_ALL);
  clear_irq(RFM_IRQ_ALL);

  // Get signal strength
  packets_buf[packets_head].rssi = spi_read_single(RFM_REG_1A_PKT_RSSI_VALUE);
 80048c4:	201a      	movs	r0, #26
 80048c6:	f7ff ff7d 	bl	80047c4 <spi_read_single>
 80048ca:	782a      	ldrb	r2, [r5, #0]
 80048cc:	b200      	sxth	r0, r0
  packets_buf[packets_head].rssi -= 137;
 80048ce:	0053      	lsls	r3, r2, #1
 80048d0:	189b      	adds	r3, r3, r2
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	18e3      	adds	r3, r4, r3
 80048d6:	3889      	subs	r0, #137	; 0x89
 80048d8:	8298      	strh	r0, [r3, #20]
  packets_buf[packets_head].snr = spi_read_single(RFM_REG_19_PKT_SNR_VALUE) / 4;
 80048da:	2019      	movs	r0, #25
 80048dc:	f7ff ff72 	bl	80047c4 <spi_read_single>
 80048e0:	782b      	ldrb	r3, [r5, #0]
 80048e2:	005a      	lsls	r2, r3, #1
 80048e4:	18d2      	adds	r2, r2, r3
 80048e6:	00d2      	lsls	r2, r2, #3
 80048e8:	18a4      	adds	r4, r4, r2
 80048ea:	0880      	lsrs	r0, r0, #2
 80048ec:	74a0      	strb	r0, [r4, #18]

  // Check for CRC error
  packets_buf[packets_head].crc_ok = !(packets_buf[packets_head].flags & RFM_IRQ_PAYLOAD_CRC_ERROR);
 80048ee:	7c22      	ldrb	r2, [r4, #16]
 80048f0:	0952      	lsrs	r2, r2, #5
 80048f2:	2101      	movs	r1, #1
 80048f4:	404a      	eors	r2, r1
 80048f6:	2101      	movs	r1, #1
 80048f8:	400a      	ands	r2, r1
 80048fa:	7462      	strb	r2, [r4, #17]

  packets_head = (packets_head + 1) % PACKETS_BUF_SIZE;
 80048fc:	3301      	adds	r3, #1
 80048fe:	220f      	movs	r2, #15
 8004900:	4013      	ands	r3, r2
 8004902:	702b      	strb	r3, [r5, #0]

  uint16_t time = timers_micros() - timer;
 8004904:	f000 f8d2 	bl	8004aac <timers_micros>
  // log_printf("ISR %u %u %u\n", time, packets_head, packets_tail);
}
 8004908:	bd70      	pop	{r4, r5, r6, pc}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	20000398 	.word	0x20000398
 8004910:	20000218 	.word	0x20000218

08004914 <test_mem_write_read>:
/*////////////////////////////////////////////////////////////////////////////*/
// Memory tests
/*////////////////////////////////////////////////////////////////////////////*/

void test_mem_write_read(void)
{
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	b082      	sub	sp, #8
    uint32_t eeprom_address = EEPROM_END - EEPROM_PAGE_SIZE;
    uint32_t eeprom_word    = 0x12345678;

    uint32_t flash_address = FLASH_END - FLASH_PAGE_SIZE;
    uint32_t *flash_data   = (uint32_t*)malloc(64); 
 8004918:	2040      	movs	r0, #64	; 0x40
 800491a:	f000 fcb9 	bl	8005290 <malloc>
 800491e:	0004      	movs	r4, r0
    flash_data[0] = 0x12345678;
 8004920:	4e1e      	ldr	r6, [pc, #120]	; (800499c <test_mem_write_read+0x88>)
 8004922:	6006      	str	r6, [r0, #0]
    flash_data[1] = 0x24681234;
 8004924:	4b1e      	ldr	r3, [pc, #120]	; (80049a0 <test_mem_write_read+0x8c>)
 8004926:	6043      	str	r3, [r0, #4]

    log_printf("Test Mem Write Read\n\n");
 8004928:	481e      	ldr	r0, [pc, #120]	; (80049a4 <test_mem_write_read+0x90>)
 800492a:	f7ff fd95 	bl	8004458 <log_printf>

    log_printf("EEPROM Start: %08x : %08x\n", eeprom_address, MMIO32(eeprom_address));
 800492e:	4d1e      	ldr	r5, [pc, #120]	; (80049a8 <test_mem_write_read+0x94>)
 8004930:	682a      	ldr	r2, [r5, #0]
 8004932:	0029      	movs	r1, r5
 8004934:	481d      	ldr	r0, [pc, #116]	; (80049ac <test_mem_write_read+0x98>)
 8004936:	f7ff fd8f 	bl	8004458 <log_printf>
    log_printf("Programming: %08x\n", eeprom_word); mem_eeprom_write_word(eeprom_address, eeprom_word);
 800493a:	0031      	movs	r1, r6
 800493c:	481c      	ldr	r0, [pc, #112]	; (80049b0 <test_mem_write_read+0x9c>)
 800493e:	f7ff fd8b 	bl	8004458 <log_printf>
 8004942:	0031      	movs	r1, r6
 8004944:	0028      	movs	r0, r5
 8004946:	f7ff fda5 	bl	8004494 <mem_eeprom_write_word>
    log_printf("EEPROM End: %08x : %08x\n\n", eeprom_address, MMIO32(eeprom_address));
 800494a:	682a      	ldr	r2, [r5, #0]
 800494c:	0029      	movs	r1, r5
 800494e:	4819      	ldr	r0, [pc, #100]	; (80049b4 <test_mem_write_read+0xa0>)
 8004950:	f7ff fd82 	bl	8004458 <log_printf>

    log_printf("Flash Erase\n"); mem_flash_erase_page(flash_address);
 8004954:	4818      	ldr	r0, [pc, #96]	; (80049b8 <test_mem_write_read+0xa4>)
 8004956:	f7ff fd7f 	bl	8004458 <log_printf>
 800495a:	4d18      	ldr	r5, [pc, #96]	; (80049bc <test_mem_write_read+0xa8>)
 800495c:	0028      	movs	r0, r5
 800495e:	f7ff fded 	bl	800453c <mem_flash_erase_page>
    log_printf("Flash Start: %08x : %08x\n%08x : %08x\n", flash_address, MMIO32(flash_address), flash_address+4, MMIO32(flash_address+4));
 8004962:	682a      	ldr	r2, [r5, #0]
 8004964:	4e16      	ldr	r6, [pc, #88]	; (80049c0 <test_mem_write_read+0xac>)
 8004966:	6833      	ldr	r3, [r6, #0]
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	0033      	movs	r3, r6
 800496c:	0029      	movs	r1, r5
 800496e:	4815      	ldr	r0, [pc, #84]	; (80049c4 <test_mem_write_read+0xb0>)
 8004970:	f7ff fd72 	bl	8004458 <log_printf>
    log_printf("Programming %08x %08x\n", flash_data[0], flash_data[1]); mem_flash_write_half_page(flash_address, flash_data);
 8004974:	6862      	ldr	r2, [r4, #4]
 8004976:	6821      	ldr	r1, [r4, #0]
 8004978:	4813      	ldr	r0, [pc, #76]	; (80049c8 <test_mem_write_read+0xb4>)
 800497a:	f7ff fd6d 	bl	8004458 <log_printf>
 800497e:	0021      	movs	r1, r4
 8004980:	0028      	movs	r0, r5
 8004982:	f7ff fdeb 	bl	800455c <mem_flash_write_half_page>
    // log_printf("Programming %08x\n", flash_data[1]); mem_flash_write_word(flash_address, flash_data[1]);
    log_printf("Flash End: %08x : %08x\n%08x : %08x\n", flash_address, MMIO32(flash_address), flash_address+4, MMIO32(flash_address+4));
 8004986:	682a      	ldr	r2, [r5, #0]
 8004988:	6833      	ldr	r3, [r6, #0]
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	0033      	movs	r3, r6
 800498e:	0029      	movs	r1, r5
 8004990:	480e      	ldr	r0, [pc, #56]	; (80049cc <test_mem_write_read+0xb8>)
 8004992:	f7ff fd61 	bl	8004458 <log_printf>
}
 8004996:	b002      	add	sp, #8
 8004998:	bd70      	pop	{r4, r5, r6, pc}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	12345678 	.word	0x12345678
 80049a0:	24681234 	.word	0x24681234
 80049a4:	080056f8 	.word	0x080056f8
 80049a8:	080807fc 	.word	0x080807fc
 80049ac:	08005710 	.word	0x08005710
 80049b0:	0800572c 	.word	0x0800572c
 80049b4:	08005740 	.word	0x08005740
 80049b8:	0800575c 	.word	0x0800575c
 80049bc:	0800ff80 	.word	0x0800ff80
 80049c0:	0800ff84 	.word	0x0800ff84
 80049c4:	0800576c 	.word	0x0800576c
 80049c8:	08005794 	.word	0x08005794
 80049cc:	080057ac 	.word	0x080057ac

080049d0 <flash_led>:
    serial_printf("Checksum value: %8x %8x %8x %8x\n", crc, not_crc, 0x01, ~0x01);
}


void flash_led(uint16_t milliseconds, uint8_t num_flashes)
{
 80049d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049d2:	46c6      	mov	lr, r8
 80049d4:	b500      	push	{lr}
 80049d6:	0005      	movs	r5, r0
 80049d8:	4688      	mov	r8, r1
	gpio_mode_setup(LED_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, LED);
 80049da:	2680      	movs	r6, #128	; 0x80
 80049dc:	0076      	lsls	r6, r6, #1
 80049de:	4c13      	ldr	r4, [pc, #76]	; (8004a2c <flash_led+0x5c>)
 80049e0:	0033      	movs	r3, r6
 80049e2:	2200      	movs	r2, #0
 80049e4:	2101      	movs	r1, #1
 80049e6:	0020      	movs	r0, r4
 80049e8:	f000 f9cd 	bl	8004d86 <gpio_mode_setup>
	gpio_clear(LED_PORT, LED);
 80049ec:	0031      	movs	r1, r6
 80049ee:	0020      	movs	r0, r4
 80049f0:	f000 f9c6 	bl	8004d80 <gpio_clear>
	for(uint8_t i = 0; i < num_flashes; i++)
 80049f4:	2400      	movs	r4, #0
 80049f6:	4544      	cmp	r4, r8
 80049f8:	d215      	bcs.n	8004a26 <flash_led+0x56>
	{
		gpio_set(LED_PORT, LED);
 80049fa:	2780      	movs	r7, #128	; 0x80
 80049fc:	007f      	lsls	r7, r7, #1
 80049fe:	4e0b      	ldr	r6, [pc, #44]	; (8004a2c <flash_led+0x5c>)
 8004a00:	0039      	movs	r1, r7
 8004a02:	0030      	movs	r0, r6
 8004a04:	f000 f9ba 	bl	8004d7c <gpio_set>
		timers_delay_milliseconds(milliseconds / 4);
 8004a08:	08a8      	lsrs	r0, r5, #2
 8004a0a:	f000 f86d 	bl	8004ae8 <timers_delay_milliseconds>
		gpio_clear(LED_PORT, LED);
 8004a0e:	0039      	movs	r1, r7
 8004a10:	0030      	movs	r0, r6
 8004a12:	f000 f9b5 	bl	8004d80 <gpio_clear>
		timers_delay_milliseconds(3 * milliseconds / 4);
 8004a16:	0068      	lsls	r0, r5, #1
 8004a18:	1828      	adds	r0, r5, r0
 8004a1a:	1080      	asrs	r0, r0, #2
 8004a1c:	f000 f864 	bl	8004ae8 <timers_delay_milliseconds>
	for(uint8_t i = 0; i < num_flashes; i++)
 8004a20:	3401      	adds	r4, #1
 8004a22:	b2e4      	uxtb	r4, r4
 8004a24:	e7e7      	b.n	80049f6 <flash_led+0x26>
	}
}
 8004a26:	bc80      	pop	{r7}
 8004a28:	46b8      	mov	r8, r7
 8004a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a2c:	50000400 	.word	0x50000400

08004a30 <timers_lptim_init>:
}


// Setup lptim1 as approx. microsecond counter
void timers_lptim_init(void)
{
 8004a30:	b510      	push	{r4, lr}
    // Input clock is 2.097Mhz
    rcc_set_peripheral_clk_sel(LPTIM1, RCC_CCIPR_LPTIM1SEL_APB);
 8004a32:	4c10      	ldr	r4, [pc, #64]	; (8004a74 <timers_lptim_init+0x44>)
 8004a34:	2100      	movs	r1, #0
 8004a36:	0020      	movs	r0, r4
 8004a38:	f000 fae2 	bl	8005000 <rcc_set_peripheral_clk_sel>
 
    rcc_periph_clock_enable(RCC_LPTIM1);
 8004a3c:	480e      	ldr	r0, [pc, #56]	; (8004a78 <timers_lptim_init+0x48>)
 8004a3e:	f000 fb15 	bl	800506c <rcc_periph_clock_enable>
    
    lptimer_set_internal_clock_source(LPTIM1);
 8004a42:	0020      	movs	r0, r4
 8004a44:	f000 fa26 	bl	8004e94 <lptimer_set_internal_clock_source>
    lptimer_enable_trigger(LPTIM1, LPTIM_CFGR_TRIGEN_SW);
 8004a48:	2100      	movs	r1, #0
 8004a4a:	0020      	movs	r0, r4
 8004a4c:	f000 fa18 	bl	8004e80 <lptimer_enable_trigger>
    lptimer_set_prescaler(LPTIM1, LPTIM_CFGR_PRESC_2);
 8004a50:	2180      	movs	r1, #128	; 0x80
 8004a52:	0089      	lsls	r1, r1, #2
 8004a54:	0020      	movs	r0, r4
 8004a56:	f000 fa0b 	bl	8004e70 <lptimer_set_prescaler>
    
    lptimer_enable(LPTIM1);
 8004a5a:	0020      	movs	r0, r4
 8004a5c:	f000 f9fe 	bl	8004e5c <lptimer_enable>
    
    lptimer_set_period(LPTIM1, 0xffff);
 8004a60:	4906      	ldr	r1, [pc, #24]	; (8004a7c <timers_lptim_init+0x4c>)
 8004a62:	0020      	movs	r0, r4
 8004a64:	f000 fa14 	bl	8004e90 <lptimer_set_period>
    
    lptimer_start_counter(LPTIM1, LPTIM_CR_CNTSTRT);
 8004a68:	2104      	movs	r1, #4
 8004a6a:	0020      	movs	r0, r4
 8004a6c:	f000 f9fb 	bl	8004e66 <lptimer_start_counter>
}
 8004a70:	bd10      	pop	{r4, pc}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	40007c00 	.word	0x40007c00
 8004a78:	0000071f 	.word	0x0000071f
 8004a7c:	0000ffff 	.word	0x0000ffff

08004a80 <timers_delay_microseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_microseconds(uint32_t delay_microseconds)
{
 8004a80:	b570      	push	{r4, r5, r6, lr}
 8004a82:	0004      	movs	r4, r0
    uint32_t curr_time = lptimer_get_counter(LPTIM1);
 8004a84:	4807      	ldr	r0, [pc, #28]	; (8004aa4 <timers_delay_microseconds+0x24>)
 8004a86:	f000 f9e6 	bl	8004e56 <lptimer_get_counter>
 8004a8a:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_microseconds > 65000)
 8004a8c:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <timers_delay_microseconds+0x28>)
 8004a8e:	429c      	cmp	r4, r3
 8004a90:	d900      	bls.n	8004a94 <timers_delay_microseconds+0x14>
        delay_microseconds = 65000;
 8004a92:	001c      	movs	r4, r3

    while (lptimer_get_counter(LPTIM1) - curr_time < delay_microseconds);
 8004a94:	4803      	ldr	r0, [pc, #12]	; (8004aa4 <timers_delay_microseconds+0x24>)
 8004a96:	f000 f9de 	bl	8004e56 <lptimer_get_counter>
 8004a9a:	1b40      	subs	r0, r0, r5
 8004a9c:	42a0      	cmp	r0, r4
 8004a9e:	d3f9      	bcc.n	8004a94 <timers_delay_microseconds+0x14>
}
 8004aa0:	bd70      	pop	{r4, r5, r6, pc}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	40007c00 	.word	0x40007c00
 8004aa8:	0000fde8 	.word	0x0000fde8

08004aac <timers_micros>:
}
*/

// Returns value of microsecond counter
uint16_t timers_micros(void)
{
 8004aac:	b510      	push	{r4, lr}
    return (uint16_t)lptimer_get_counter(LPTIM1);
 8004aae:	4802      	ldr	r0, [pc, #8]	; (8004ab8 <timers_micros+0xc>)
 8004ab0:	f000 f9d1 	bl	8004e56 <lptimer_get_counter>
}
 8004ab4:	bd10      	pop	{r4, pc}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	40007c00 	.word	0x40007c00

08004abc <timers_tim6_init>:


// Setup TIM6 as millisecond counter. Clocked by APB1
void timers_tim6_init(void)
{
 8004abc:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_TIM6);
 8004abe:	4808      	ldr	r0, [pc, #32]	; (8004ae0 <timers_tim6_init+0x24>)
 8004ac0:	f000 fad4 	bl	800506c <rcc_periph_clock_enable>
    timer_disable_counter(TIM6);
 8004ac4:	4c07      	ldr	r4, [pc, #28]	; (8004ae4 <timers_tim6_init+0x28>)
 8004ac6:	0020      	movs	r0, r4
 8004ac8:	f000 fb13 	bl	80050f2 <timer_disable_counter>
    timer_set_prescaler(TIM6, (2097 - 1));
 8004acc:	2183      	movs	r1, #131	; 0x83
 8004ace:	0109      	lsls	r1, r1, #4
 8004ad0:	0020      	movs	r0, r4
 8004ad2:	f000 fb13 	bl	80050fc <timer_set_prescaler>
    timer_enable_counter(TIM6);
 8004ad6:	0020      	movs	r0, r4
 8004ad8:	f000 fb06 	bl	80050e8 <timer_enable_counter>
}
 8004adc:	bd10      	pop	{r4, pc}
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	00000704 	.word	0x00000704
 8004ae4:	40001000 	.word	0x40001000

08004ae8 <timers_delay_milliseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_milliseconds(uint32_t delay_milliseconds)
{
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	0004      	movs	r4, r0
    uint32_t curr_time = timer_get_counter(TIM6);
 8004aec:	4807      	ldr	r0, [pc, #28]	; (8004b0c <timers_delay_milliseconds+0x24>)
 8004aee:	f000 fb07 	bl	8005100 <timer_get_counter>
 8004af2:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_milliseconds > 65000)
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <timers_delay_milliseconds+0x28>)
 8004af6:	429c      	cmp	r4, r3
 8004af8:	d900      	bls.n	8004afc <timers_delay_milliseconds+0x14>
        delay_milliseconds = 65000;
 8004afa:	001c      	movs	r4, r3

    while (timer_get_counter(TIM6) - curr_time < delay_milliseconds);
 8004afc:	4803      	ldr	r0, [pc, #12]	; (8004b0c <timers_delay_milliseconds+0x24>)
 8004afe:	f000 faff 	bl	8005100 <timer_get_counter>
 8004b02:	1b40      	subs	r0, r0, r5
 8004b04:	42a0      	cmp	r0, r4
 8004b06:	d3f9      	bcc.n	8004afc <timers_delay_milliseconds+0x14>
}
 8004b08:	bd70      	pop	{r4, r5, r6, pc}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	40001000 	.word	0x40001000
 8004b10:	0000fde8 	.word	0x0000fde8

08004b14 <timers_millis>:

// Returns value of millisecond counter
uint16_t timers_millis(void)
{
 8004b14:	b510      	push	{r4, lr}
    return timer_get_counter(TIM6);
 8004b16:	4802      	ldr	r0, [pc, #8]	; (8004b20 <timers_millis+0xc>)
 8004b18:	f000 faf2 	bl	8005100 <timer_get_counter>
 8004b1c:	b280      	uxth	r0, r0
}
 8004b1e:	bd10      	pop	{r4, pc}
 8004b20:	40001000 	.word	0x40001000

08004b24 <timeout_init>:
}


// Timout functions
void timeout_init(void)
{
 8004b24:	b510      	push	{r4, lr}
    timeout_counter     = 0; 
 8004b26:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <timeout_init+0x14>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
    // timeout_counter     = 2140483648; 
    timeout_timer       = timers_micros(); 
 8004b2c:	f7ff ffbe 	bl	8004aac <timers_micros>
 8004b30:	4b02      	ldr	r3, [pc, #8]	; (8004b3c <timeout_init+0x18>)
 8004b32:	8018      	strh	r0, [r3, #0]
}
 8004b34:	bd10      	pop	{r4, pc}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	2000039c 	.word	0x2000039c
 8004b3c:	200003a0 	.word	0x200003a0

08004b40 <timeout>:

bool timeout(uint32_t time_microseconds, char *msg, uint32_t data)
{
 8004b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b42:	b083      	sub	sp, #12
 8004b44:	0006      	movs	r6, r0
 8004b46:	9101      	str	r1, [sp, #4]
 8004b48:	0015      	movs	r5, r2
    timeout_counter    += (uint16_t)(timers_micros() - timeout_timer);
 8004b4a:	f7ff ffaf 	bl	8004aac <timers_micros>
 8004b4e:	4c0c      	ldr	r4, [pc, #48]	; (8004b80 <timeout+0x40>)
 8004b50:	8823      	ldrh	r3, [r4, #0]
 8004b52:	1ac3      	subs	r3, r0, r3
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	4f0b      	ldr	r7, [pc, #44]	; (8004b84 <timeout+0x44>)
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	4694      	mov	ip, r2
 8004b5c:	4463      	add	r3, ip
 8004b5e:	603b      	str	r3, [r7, #0]
    timeout_timer       = timers_micros();
 8004b60:	f7ff ffa4 	bl	8004aac <timers_micros>
 8004b64:	8020      	strh	r0, [r4, #0]

    // log_printf("%u\n", timeout_counter);

    if(timeout_counter > time_microseconds)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	42b3      	cmp	r3, r6
 8004b6a:	d802      	bhi.n	8004b72 <timeout+0x32>
    {
        log_printf("Timeout %s %08X\n", msg, data);
        return true;
    }
    else    
        return false;
 8004b6c:	2000      	movs	r0, #0
}
 8004b6e:	b003      	add	sp, #12
 8004b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
        log_printf("Timeout %s %08X\n", msg, data);
 8004b72:	002a      	movs	r2, r5
 8004b74:	9901      	ldr	r1, [sp, #4]
 8004b76:	4804      	ldr	r0, [pc, #16]	; (8004b88 <timeout+0x48>)
 8004b78:	f7ff fc6e 	bl	8004458 <log_printf>
        return true;
 8004b7c:	2001      	movs	r0, #1
 8004b7e:	e7f6      	b.n	8004b6e <timeout+0x2e>
 8004b80:	200003a0 	.word	0x200003a0
 8004b84:	2000039c 	.word	0x2000039c
 8004b88:	080057d0 	.word	0x080057d0

08004b8c <set_gpio_for_standby>:

void set_gpio_for_standby(void)
{   
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Common
    // LED
    gpio_mode_setup(LED_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, LED);
 8004b8e:	2680      	movs	r6, #128	; 0x80
 8004b90:	0076      	lsls	r6, r6, #1
 8004b92:	4c36      	ldr	r4, [pc, #216]	; (8004c6c <set_gpio_for_standby+0xe0>)
 8004b94:	0033      	movs	r3, r6
 8004b96:	2200      	movs	r2, #0
 8004b98:	2103      	movs	r1, #3
 8004b9a:	0020      	movs	r0, r4
 8004b9c:	f000 f8f3 	bl	8004d86 <gpio_mode_setup>
    gpio_set(LED_PORT, LED);
 8004ba0:	0031      	movs	r1, r6
 8004ba2:	0020      	movs	r0, r4
 8004ba4:	f000 f8ea 	bl	8004d7c <gpio_set>

    // Serial Print
    gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, SPF_USART_TX);
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	25a0      	movs	r5, #160	; 0xa0
 8004bac:	05ed      	lsls	r5, r5, #23
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	0028      	movs	r0, r5
 8004bb6:	f000 f8e6 	bl	8004d86 <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE,  SPF_USART_RX);
 8004bba:	2780      	movs	r7, #128	; 0x80
 8004bbc:	00ff      	lsls	r7, r7, #3
 8004bbe:	003b      	movs	r3, r7
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	0028      	movs	r0, r5
 8004bc6:	f000 f8de 	bl	8004d86 <gpio_mode_setup>
	gpio_set(SPF_USART_RX_PORT, SPF_USART_RX);
 8004bca:	0039      	movs	r1, r7
 8004bcc:	0028      	movs	r0, r5
 8004bce:	f000 f8d5 	bl	8004d7c <gpio_set>

    // Batt Sense
    gpio_mode_setup(BATT_SENS_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, BATT_SENS);
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2103      	movs	r1, #3
 8004bd8:	0028      	movs	r0, r5
 8004bda:	f000 f8d4 	bl	8004d86 <gpio_mode_setup>
    
    // RFM
    // SPI
    gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_ANALOG,   GPIO_PUPD_NONE,       RFM_SPI_MISO);
 8004bde:	2380      	movs	r3, #128	; 0x80
 8004be0:	01db      	lsls	r3, r3, #7
 8004be2:	2200      	movs	r2, #0
 8004be4:	2103      	movs	r1, #3
 8004be6:	0020      	movs	r0, r4
 8004be8:	f000 f8cd 	bl	8004d86 <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_SCK_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_SCK);
 8004bec:	2380      	movs	r3, #128	; 0x80
 8004bee:	019b      	lsls	r3, r3, #6
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	0020      	movs	r0, r4
 8004bf6:	f000 f8c6 	bl	8004d86 <gpio_mode_setup>
    gpio_mode_setup(RFM_SPI_MOSI_PORT,  GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_MOSI);
 8004bfa:	2380      	movs	r3, #128	; 0x80
 8004bfc:	021b      	lsls	r3, r3, #8
 8004bfe:	2202      	movs	r2, #2
 8004c00:	2100      	movs	r1, #0
 8004c02:	0020      	movs	r0, r4
 8004c04:	f000 f8bf 	bl	8004d86 <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_NSS_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_SPI_NSS);
 8004c08:	2340      	movs	r3, #64	; 0x40
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	0028      	movs	r0, r5
 8004c10:	f000 f8b9 	bl	8004d86 <gpio_mode_setup>
    gpio_mode_setup(RFM_RESET_PORT,     GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_RESET);
 8004c14:	2310      	movs	r3, #16
 8004c16:	2201      	movs	r2, #1
 8004c18:	2100      	movs	r1, #0
 8004c1a:	0028      	movs	r0, r5
 8004c1c:	f000 f8b3 	bl	8004d86 <gpio_mode_setup>

    // DIO
    gpio_mode_setup(RFM_IO_0_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_0);
 8004c20:	003b      	movs	r3, r7
 8004c22:	2200      	movs	r2, #0
 8004c24:	2103      	movs	r1, #3
 8004c26:	0020      	movs	r0, r4
 8004c28:	f000 f8ad 	bl	8004d86 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_1_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_1);
 8004c2c:	2380      	movs	r3, #128	; 0x80
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	2200      	movs	r2, #0
 8004c32:	2103      	movs	r1, #3
 8004c34:	0020      	movs	r0, r4
 8004c36:	f000 f8a6 	bl	8004d86 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_2_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_2);
 8004c3a:	0033      	movs	r3, r6
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2103      	movs	r1, #3
 8004c40:	0028      	movs	r0, r5
 8004c42:	f000 f8a0 	bl	8004d86 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_3_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_3);
 8004c46:	2302      	movs	r3, #2
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2103      	movs	r1, #3
 8004c4c:	0020      	movs	r0, r4
 8004c4e:	f000 f89a 	bl	8004d86 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_4_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_4);
 8004c52:	2304      	movs	r3, #4
 8004c54:	2200      	movs	r2, #0
 8004c56:	2103      	movs	r1, #3
 8004c58:	0020      	movs	r0, r4
 8004c5a:	f000 f894 	bl	8004d86 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_5_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_5);
 8004c5e:	2301      	movs	r3, #1
 8004c60:	2200      	movs	r2, #0
 8004c62:	2103      	movs	r1, #3
 8004c64:	0020      	movs	r0, r4
 8004c66:	f000 f88e 	bl	8004d86 <gpio_mode_setup>
    gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
	gpio_mode_setup(TEMP_I2C_SDA_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SDA);

    #endif

}
 8004c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c6c:	50000400 	.word	0x50000400

08004c70 <rtc_isr>:

// Override default rtc interrupt handler
void rtc_isr(void)
{ 
 8004c70:	b510      	push	{r4, lr}
    exti_reset_request(EXTI20);
 8004c72:	2080      	movs	r0, #128	; 0x80
 8004c74:	0340      	lsls	r0, r0, #13
 8004c76:	f000 f825 	bl	8004cc4 <exti_reset_request>

    // scb_reset_system();

    log_init();
 8004c7a:	f7ff fbd7 	bl	800442c <log_init>
    log_printf("RTC ISR\n");
 8004c7e:	480c      	ldr	r0, [pc, #48]	; (8004cb0 <rtc_isr+0x40>)
 8004c80:	f7ff fbea 	bl	8004458 <log_printf>

    if(RTC_ISR & RTC_ISR_WUTF)
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <rtc_isr+0x44>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	055b      	lsls	r3, r3, #21
 8004c8a:	d400      	bmi.n	8004c8e <rtc_isr+0x1e>
        pwr_clear_standby_flag();
        rtc_lock();
	    pwr_enable_backup_domain_write_protect();
        set_gpio_for_standby();
    }
}
 8004c8c:	bd10      	pop	{r4, pc}
        pwr_disable_backup_domain_write_protect();
 8004c8e:	f000 f907 	bl	8004ea0 <pwr_disable_backup_domain_write_protect>
        rtc_unlock();
 8004c92:	f000 fa09 	bl	80050a8 <rtc_unlock>
	    rtc_clear_wakeup_flag();
 8004c96:	f000 fa15 	bl	80050c4 <rtc_clear_wakeup_flag>
        pwr_clear_wakeup_flag();
 8004c9a:	f000 f91d 	bl	8004ed8 <pwr_clear_wakeup_flag>
        pwr_clear_standby_flag();
 8004c9e:	f000 f913 	bl	8004ec8 <pwr_clear_standby_flag>
        rtc_lock();
 8004ca2:	f000 fa09 	bl	80050b8 <rtc_lock>
	    pwr_enable_backup_domain_write_protect();
 8004ca6:	f000 f905 	bl	8004eb4 <pwr_enable_backup_domain_write_protect>
        set_gpio_for_standby();
 8004caa:	f7ff ff6f 	bl	8004b8c <set_gpio_for_standby>
}
 8004cae:	e7ed      	b.n	8004c8c <rtc_isr+0x1c>
 8004cb0:	080057e4 	.word	0x080057e4
 8004cb4:	4000280c 	.word	0x4000280c

08004cb8 <adc_start_conversion_regular>:
 * @param[in] adc ADC block register address base @ref adc_reg_base
 */
void adc_start_conversion_regular(uint32_t adc)
{
	/* Start conversion on regular channels. */
	ADC_CR(adc) |= ADC_CR_ADSTART;
 8004cb8:	2304      	movs	r3, #4
 8004cba:	6882      	ldr	r2, [r0, #8]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	6083      	str	r3, [r0, #8]
}
 8004cc0:	4770      	bx	lr
	...

08004cc4 <exti_reset_request>:
{
#if defined(EXTI_RPR1) && defined(EXTI_FPR1)
	EXTI_RPR1 = extis;
	EXTI_FPR1 = extis;
#else
	EXTI_PR = extis;
 8004cc4:	4b01      	ldr	r3, [pc, #4]	; (8004ccc <exti_reset_request+0x8>)
 8004cc6:	6018      	str	r0, [r3, #0]
#endif
}
 8004cc8:	4770      	bx	lr
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	40010414 	.word	0x40010414

08004cd0 <flash_set_ws>:
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8004cd0:	2101      	movs	r1, #1
	reg32 = FLASH_ACR;
 8004cd2:	4a03      	ldr	r2, [pc, #12]	; (8004ce0 <flash_set_ws+0x10>)
 8004cd4:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8004cd6:	438b      	bics	r3, r1
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 8004cd8:	4303      	orrs	r3, r0
	FLASH_ACR = reg32;
 8004cda:	6013      	str	r3, [r2, #0]
}
 8004cdc:	4770      	bx	lr
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	40022000 	.word	0x40022000

08004ce4 <flash_unlock_option_bytes>:

void flash_unlock_option_bytes(void)
{
	FLASH_OPTKEYR = FLASH_OPTKEYR_KEY1;
 8004ce4:	4b02      	ldr	r3, [pc, #8]	; (8004cf0 <flash_unlock_option_bytes+0xc>)
 8004ce6:	4a03      	ldr	r2, [pc, #12]	; (8004cf4 <flash_unlock_option_bytes+0x10>)
 8004ce8:	601a      	str	r2, [r3, #0]
	FLASH_OPTKEYR = FLASH_OPTKEYR_KEY2;
 8004cea:	4a03      	ldr	r2, [pc, #12]	; (8004cf8 <flash_unlock_option_bytes+0x14>)
 8004cec:	601a      	str	r2, [r3, #0]
}
 8004cee:	4770      	bx	lr
 8004cf0:	40022014 	.word	0x40022014
 8004cf4:	fbead9c8 	.word	0xfbead9c8
 8004cf8:	24252627 	.word	0x24252627

08004cfc <flash_unlock_pecr>:
 * yourself.
 * @sa flash_unlock
 */
void flash_unlock_pecr(void)
{
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY1;
 8004cfc:	4b02      	ldr	r3, [pc, #8]	; (8004d08 <flash_unlock_pecr+0xc>)
 8004cfe:	4a03      	ldr	r2, [pc, #12]	; (8004d0c <flash_unlock_pecr+0x10>)
 8004d00:	601a      	str	r2, [r3, #0]
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY2;
 8004d02:	4a03      	ldr	r2, [pc, #12]	; (8004d10 <flash_unlock_pecr+0x14>)
 8004d04:	601a      	str	r2, [r3, #0]
}
 8004d06:	4770      	bx	lr
 8004d08:	4002200c 	.word	0x4002200c
 8004d0c:	89abcdef 	.word	0x89abcdef
 8004d10:	02030405 	.word	0x02030405

08004d14 <flash_lock_pecr>:

void flash_lock_pecr(void)
{
	FLASH_PECR |= FLASH_PECR_PELOCK;
 8004d14:	2301      	movs	r3, #1
 8004d16:	4a02      	ldr	r2, [pc, #8]	; (8004d20 <flash_lock_pecr+0xc>)
 8004d18:	6811      	ldr	r1, [r2, #0]
 8004d1a:	430b      	orrs	r3, r1
 8004d1c:	6013      	str	r3, [r2, #0]
}
 8004d1e:	4770      	bx	lr
 8004d20:	40022004 	.word	0x40022004

08004d24 <flash_unlock_progmem>:
 * you must have already unlocked access to this register!
 * @sa flash_unlock_pecr
 */
void flash_unlock_progmem(void)
{
	FLASH_PRGKEYR = FLASH_PRGKEYR_PRGKEY1;
 8004d24:	4b02      	ldr	r3, [pc, #8]	; (8004d30 <flash_unlock_progmem+0xc>)
 8004d26:	4a03      	ldr	r2, [pc, #12]	; (8004d34 <flash_unlock_progmem+0x10>)
 8004d28:	601a      	str	r2, [r3, #0]
	FLASH_PRGKEYR = FLASH_PRGKEYR_PRGKEY2;
 8004d2a:	4a03      	ldr	r2, [pc, #12]	; (8004d38 <flash_unlock_progmem+0x14>)
 8004d2c:	601a      	str	r2, [r3, #0]
}
 8004d2e:	4770      	bx	lr
 8004d30:	40022010 	.word	0x40022010
 8004d34:	8c9daebf 	.word	0x8c9daebf
 8004d38:	13141516 	.word	0x13141516

08004d3c <flash_lock_progmem>:

void flash_lock_progmem(void)
{
	FLASH_PECR |= FLASH_PECR_PRGLOCK;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	4a02      	ldr	r2, [pc, #8]	; (8004d48 <flash_lock_progmem+0xc>)
 8004d40:	6811      	ldr	r1, [r2, #0]
 8004d42:	430b      	orrs	r3, r1
 8004d44:	6013      	str	r3, [r2, #0]
}
 8004d46:	4770      	bx	lr
 8004d48:	40022004 	.word	0x40022004

08004d4c <flash_lock_option_bytes>:

void flash_lock_option_bytes(void)
{
	FLASH_PECR |= FLASH_PECR_OPTLOCK;
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	4a02      	ldr	r2, [pc, #8]	; (8004d58 <flash_lock_option_bytes+0xc>)
 8004d50:	6811      	ldr	r1, [r2, #0]
 8004d52:	430b      	orrs	r3, r1
 8004d54:	6013      	str	r3, [r2, #0]
}
 8004d56:	4770      	bx	lr
 8004d58:	40022004 	.word	0x40022004

08004d5c <flash_unlock>:

/** @brief Unlock all segments of flash
 *
 */
void flash_unlock(void)
{
 8004d5c:	b510      	push	{r4, lr}
	flash_unlock_pecr();
 8004d5e:	f7ff ffcd 	bl	8004cfc <flash_unlock_pecr>
	flash_unlock_progmem();
 8004d62:	f7ff ffdf 	bl	8004d24 <flash_unlock_progmem>
	flash_unlock_option_bytes();
 8004d66:	f7ff ffbd 	bl	8004ce4 <flash_unlock_option_bytes>
}
 8004d6a:	bd10      	pop	{r4, pc}

08004d6c <flash_lock>:

/** @brief Lock all segments of flash
 *
 */
void flash_lock(void)
{
 8004d6c:	b510      	push	{r4, lr}
	flash_lock_option_bytes();
 8004d6e:	f7ff ffed 	bl	8004d4c <flash_lock_option_bytes>
	flash_lock_progmem();
 8004d72:	f7ff ffe3 	bl	8004d3c <flash_lock_progmem>
	flash_lock_pecr();
 8004d76:	f7ff ffcd 	bl	8004d14 <flash_lock_pecr>
}
 8004d7a:	bd10      	pop	{r4, pc}

08004d7c <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8004d7c:	6181      	str	r1, [r0, #24]
}
 8004d7e:	4770      	bx	lr

08004d80 <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8004d80:	0409      	lsls	r1, r1, #16
 8004d82:	6181      	str	r1, [r0, #24]
}
 8004d84:	4770      	bx	lr

08004d86 <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 8004d86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d88:	b085      	sub	sp, #20
 8004d8a:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8004d8c:	2703      	movs	r7, #3
	pupd = GPIO_PUPDR(gpioport);
 8004d8e:	2100      	movs	r1, #0
{
 8004d90:	9202      	str	r2, [sp, #8]
 8004d92:	9303      	str	r3, [sp, #12]
	moder = GPIO_MODER(gpioport);
 8004d94:	6802      	ldr	r2, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 8004d96:	68c3      	ldr	r3, [r0, #12]
		if (!((1 << i) & gpios)) {
 8004d98:	9c03      	ldr	r4, [sp, #12]
 8004d9a:	2501      	movs	r5, #1
 8004d9c:	410c      	asrs	r4, r1
 8004d9e:	422c      	tst	r4, r5
 8004da0:	d00a      	beq.n	8004db8 <gpio_mode_setup+0x32>
		moder &= ~GPIO_MODE_MASK(i);
 8004da2:	003d      	movs	r5, r7
 8004da4:	004c      	lsls	r4, r1, #1
 8004da6:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8004da8:	9e01      	ldr	r6, [sp, #4]
		moder &= ~GPIO_MODE_MASK(i);
 8004daa:	43aa      	bics	r2, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 8004dac:	43ab      	bics	r3, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 8004dae:	9d02      	ldr	r5, [sp, #8]
		moder |= GPIO_MODE(i, mode);
 8004db0:	40a6      	lsls	r6, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 8004db2:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8004db4:	4332      	orrs	r2, r6
		pupd |= GPIO_PUPD(i, pull_up_down);
 8004db6:	432b      	orrs	r3, r5
	for (i = 0; i < 16; i++) {
 8004db8:	3101      	adds	r1, #1
 8004dba:	2910      	cmp	r1, #16
 8004dbc:	d1ec      	bne.n	8004d98 <gpio_mode_setup+0x12>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 8004dbe:	6002      	str	r2, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 8004dc0:	60c3      	str	r3, [r0, #12]
}
 8004dc2:	b005      	add	sp, #20
 8004dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004dc6 <gpio_set_output_options>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_output_options(uint32_t gpioport, uint8_t otype, uint8_t speed,
			     uint16_t gpios)
{
 8004dc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dc8:	9201      	str	r2, [sp, #4]
	uint16_t i;
	uint32_t ospeedr;

	if (otype == 0x1) {
 8004dca:	2901      	cmp	r1, #1
 8004dcc:	d116      	bne.n	8004dfc <gpio_set_output_options+0x36>
		GPIO_OTYPER(gpioport) |= gpios;
 8004dce:	6841      	ldr	r1, [r0, #4]
 8004dd0:	4319      	orrs	r1, r3
	} else {
		GPIO_OTYPER(gpioport) &= ~gpios;
	}

	ospeedr = GPIO_OSPEEDR(gpioport);
 8004dd2:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8004dd4:	2601      	movs	r6, #1
			continue;
		}
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8004dd6:	2703      	movs	r7, #3
		GPIO_OTYPER(gpioport) &= ~gpios;
 8004dd8:	6041      	str	r1, [r0, #4]
	ospeedr = GPIO_OSPEEDR(gpioport);
 8004dda:	6881      	ldr	r1, [r0, #8]
		if (!((1 << i) & gpios)) {
 8004ddc:	001d      	movs	r5, r3
 8004dde:	4125      	asrs	r5, r4
 8004de0:	4235      	tst	r5, r6
 8004de2:	d006      	beq.n	8004df2 <gpio_set_output_options+0x2c>
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8004de4:	003a      	movs	r2, r7
 8004de6:	0065      	lsls	r5, r4, #1
 8004de8:	40aa      	lsls	r2, r5
 8004dea:	4391      	bics	r1, r2
		ospeedr |= GPIO_OSPEED(i, speed);
 8004dec:	9a01      	ldr	r2, [sp, #4]
 8004dee:	40aa      	lsls	r2, r5
 8004df0:	4311      	orrs	r1, r2
	for (i = 0; i < 16; i++) {
 8004df2:	3401      	adds	r4, #1
 8004df4:	2c10      	cmp	r4, #16
 8004df6:	d1f1      	bne.n	8004ddc <gpio_set_output_options+0x16>
	}

	GPIO_OSPEEDR(gpioport) = ospeedr;
 8004df8:	6081      	str	r1, [r0, #8]
}
 8004dfa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		GPIO_OTYPER(gpioport) &= ~gpios;
 8004dfc:	6841      	ldr	r1, [r0, #4]
 8004dfe:	4399      	bics	r1, r3
 8004e00:	e7e7      	b.n	8004dd2 <gpio_set_output_options+0xc>

08004e02 <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 8004e02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);
 8004e04:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 8004e06:	2601      	movs	r6, #1
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 8004e08:	270f      	movs	r7, #15
	afrl = GPIO_AFRL(gpioport);
 8004e0a:	6a04      	ldr	r4, [r0, #32]
{
 8004e0c:	9100      	str	r1, [sp, #0]
	afrh = GPIO_AFRH(gpioport);
 8004e0e:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8004e10:	9201      	str	r2, [sp, #4]
		if (!((1 << i) & gpios)) {
 8004e12:	9d01      	ldr	r5, [sp, #4]
 8004e14:	411d      	asrs	r5, r3
 8004e16:	4235      	tst	r5, r6
 8004e18:	d006      	beq.n	8004e28 <gpio_set_af+0x26>
		afrl &= ~GPIO_AFR_MASK(i);
 8004e1a:	003a      	movs	r2, r7
 8004e1c:	009d      	lsls	r5, r3, #2
 8004e1e:	40aa      	lsls	r2, r5
 8004e20:	4394      	bics	r4, r2
		afrl |= GPIO_AFR(i, alt_func_num);
 8004e22:	9a00      	ldr	r2, [sp, #0]
 8004e24:	40aa      	lsls	r2, r5
 8004e26:	4314      	orrs	r4, r2
	for (i = 0; i < 8; i++) {
 8004e28:	3301      	adds	r3, #1
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d1f1      	bne.n	8004e12 <gpio_set_af+0x10>
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8004e2e:	2601      	movs	r6, #1
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8004e30:	270f      	movs	r7, #15
		if (!((1 << i) & gpios)) {
 8004e32:	9a01      	ldr	r2, [sp, #4]
 8004e34:	411a      	asrs	r2, r3
 8004e36:	4232      	tst	r2, r6
 8004e38:	d007      	beq.n	8004e4a <gpio_set_af+0x48>
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8004e3a:	003a      	movs	r2, r7
 8004e3c:	009d      	lsls	r5, r3, #2
 8004e3e:	3d20      	subs	r5, #32
 8004e40:	40aa      	lsls	r2, r5
 8004e42:	4391      	bics	r1, r2
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 8004e44:	9a00      	ldr	r2, [sp, #0]
 8004e46:	40aa      	lsls	r2, r5
 8004e48:	4311      	orrs	r1, r2
	for (i = 8; i < 16; i++) {
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d1f0      	bne.n	8004e32 <gpio_set_af+0x30>
	}

	GPIO_AFRL(gpioport) = afrl;
 8004e50:	6204      	str	r4, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 8004e52:	6241      	str	r1, [r0, #36]	; 0x24
}
 8004e54:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08004e56 <lptimer_get_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @returns Counter value.
 */
uint16_t lptimer_get_counter(uint32_t lptimer_peripheral)
{
	return LPTIM_CNT(lptimer_peripheral);
 8004e56:	69c0      	ldr	r0, [r0, #28]
 8004e58:	b280      	uxth	r0, r0
}
 8004e5a:	4770      	bx	lr

08004e5c <lptimer_enable>:
 *
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 */
void lptimer_enable(uint32_t lptimer_peripheral)
{
	LPTIM_CR(lptimer_peripheral) |= LPTIM_CR_ENABLE;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	6902      	ldr	r2, [r0, #16]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	6103      	str	r3, [r0, #16]
}
 8004e64:	4770      	bx	lr

08004e66 <lptimer_start_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] mode lptimer start mode (@ref LPTIM_CR_SNGSTRT or @ref LPTIM_CR_CNTSTRT)
 */
void lptimer_start_counter(uint32_t lptimer_peripheral, uint32_t mode)
{
	LPTIM_CR(lptimer_peripheral) |= mode;
 8004e66:	6903      	ldr	r3, [r0, #16]
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	6103      	str	r3, [r0, #16]
}
 8004e6c:	4770      	bx	lr
	...

08004e70 <lptimer_set_prescaler>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] prescaler Clock prescaler (@ref lptim_cfgr_presc)
 */
void lptimer_set_prescaler(uint32_t lptimer_peripheral, uint32_t prescaler)
{
	uint32_t reg32 = LPTIM_CFGR(lptimer_peripheral);
 8004e70:	68c3      	ldr	r3, [r0, #12]
	reg32 &= ~(LPTIM_CFGR_PRESC_MASK << LPTIM_CFGR_PRESC_SHIFT);
 8004e72:	4a02      	ldr	r2, [pc, #8]	; (8004e7c <lptimer_set_prescaler+0xc>)
 8004e74:	4013      	ands	r3, r2
	LPTIM_CFGR(lptimer_peripheral) = reg32 | prescaler;
 8004e76:	430b      	orrs	r3, r1
 8004e78:	60c3      	str	r3, [r0, #12]
}
 8004e7a:	4770      	bx	lr
 8004e7c:	fffff1ff 	.word	0xfffff1ff

08004e80 <lptimer_enable_trigger>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] trigen Enable Trigger
 */
void lptimer_enable_trigger(uint32_t lptimer_peripheral, uint32_t trigen)
{
	uint32_t reg32 = LPTIM_CFGR(lptimer_peripheral);
 8004e80:	68c3      	ldr	r3, [r0, #12]
	reg32 &= ~(LPTIM_CFGR_TRIGEN_MASK << LPTIM_CFGR_TRIGEN_SHIFT);
 8004e82:	4a02      	ldr	r2, [pc, #8]	; (8004e8c <lptimer_enable_trigger+0xc>)
 8004e84:	4013      	ands	r3, r2
	LPTIM_CFGR(lptimer_peripheral) = reg32 | trigen;
 8004e86:	430b      	orrs	r3, r1
 8004e88:	60c3      	str	r3, [r0, #12]
}
 8004e8a:	4770      	bx	lr
 8004e8c:	fff1ffff 	.word	0xfff1ffff

08004e90 <lptimer_set_period>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] period_value Autoreload value. Must be greater that CMP value.
 */
void lptimer_set_period(uint32_t lptimer_peripheral, uint16_t period_value)
{
	LPTIM_ARR(lptimer_peripheral) = period_value;
 8004e90:	6181      	str	r1, [r0, #24]
}
 8004e92:	4770      	bx	lr

08004e94 <lptimer_set_internal_clock_source>:
 *
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 */
void lptimer_set_internal_clock_source(uint32_t lptimer_peripheral)
{
	LPTIM_CFGR(lptimer_peripheral) &= ~LPTIM_CFGR_CKSEL;
 8004e94:	2201      	movs	r2, #1
 8004e96:	68c3      	ldr	r3, [r0, #12]
 8004e98:	4393      	bics	r3, r2
 8004e9a:	60c3      	str	r3, [r0, #12]
}
 8004e9c:	4770      	bx	lr
	...

08004ea0 <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 8004ea0:	2380      	movs	r3, #128	; 0x80
 8004ea2:	4a03      	ldr	r2, [pc, #12]	; (8004eb0 <pwr_disable_backup_domain_write_protect+0x10>)
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	6811      	ldr	r1, [r2, #0]
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	6013      	str	r3, [r2, #0]
}
 8004eac:	4770      	bx	lr
 8004eae:	46c0      	nop			; (mov r8, r8)
 8004eb0:	40007000 	.word	0x40007000

08004eb4 <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 8004eb4:	4a02      	ldr	r2, [pc, #8]	; (8004ec0 <pwr_enable_backup_domain_write_protect+0xc>)
 8004eb6:	4903      	ldr	r1, [pc, #12]	; (8004ec4 <pwr_enable_backup_domain_write_protect+0x10>)
 8004eb8:	6813      	ldr	r3, [r2, #0]
 8004eba:	400b      	ands	r3, r1
 8004ebc:	6013      	str	r3, [r2, #0]
}
 8004ebe:	4770      	bx	lr
 8004ec0:	40007000 	.word	0x40007000
 8004ec4:	fffffeff 	.word	0xfffffeff

08004ec8 <pwr_clear_standby_flag>:
This is set when the processor returns from a standby mode.
*/

void pwr_clear_standby_flag(void)
{
	PWR_CR |= PWR_CR_CSBF;
 8004ec8:	2308      	movs	r3, #8
 8004eca:	4a02      	ldr	r2, [pc, #8]	; (8004ed4 <pwr_clear_standby_flag+0xc>)
 8004ecc:	6811      	ldr	r1, [r2, #0]
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	6013      	str	r3, [r2, #0]
}
 8004ed2:	4770      	bx	lr
 8004ed4:	40007000 	.word	0x40007000

08004ed8 <pwr_clear_wakeup_flag>:
This is set when the processor receives a wakeup signal.
*/

void pwr_clear_wakeup_flag(void)
{
	PWR_CR |= PWR_CR_CWUF;
 8004ed8:	2304      	movs	r3, #4
 8004eda:	4a02      	ldr	r2, [pc, #8]	; (8004ee4 <pwr_clear_wakeup_flag+0xc>)
 8004edc:	6811      	ldr	r1, [r2, #0]
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	6013      	str	r3, [r2, #0]
}
 8004ee2:	4770      	bx	lr
 8004ee4:	40007000 	.word	0x40007000

08004ee8 <rcc_osc_on>:
uint32_t rcc_ahb_frequency = 2097000;
uint32_t rcc_apb1_frequency = 2097000;
uint32_t rcc_apb2_frequency = 2097000;

void rcc_osc_on(enum rcc_osc osc)
{
 8004ee8:	b500      	push	{lr}
 8004eea:	2806      	cmp	r0, #6
 8004eec:	d80b      	bhi.n	8004f06 <rcc_osc_on+0x1e>
 8004eee:	f000 fa5b 	bl	80053a8 <__gnu_thumb1_case_uqi>
 8004ef2:	1004      	.short	0x1004
 8004ef4:	1b0b1915 	.word	0x1b0b1915
 8004ef8:	1d          	.byte	0x1d
 8004ef9:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	4a0c      	ldr	r2, [pc, #48]	; (8004f30 <rcc_osc_on+0x48>)
 8004efe:	045b      	lsls	r3, r3, #17
 8004f00:	6811      	ldr	r1, [r2, #0]
		break;
	case RCC_LSE:
		RCC_CSR |= RCC_CSR_LSEON;
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
 8004f02:	430b      	orrs	r3, r1
 8004f04:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8004f06:	bd00      	pop	{pc}
		RCC_CR |= RCC_CR_MSION;
 8004f08:	4a09      	ldr	r2, [pc, #36]	; (8004f30 <rcc_osc_on+0x48>)
		RCC_CSR |= RCC_CSR_LSEON;
 8004f0a:	2380      	movs	r3, #128	; 0x80
 8004f0c:	6811      	ldr	r1, [r2, #0]
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	e7f7      	b.n	8004f02 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSEON;
 8004f12:	2380      	movs	r3, #128	; 0x80
 8004f14:	4a06      	ldr	r2, [pc, #24]	; (8004f30 <rcc_osc_on+0x48>)
 8004f16:	025b      	lsls	r3, r3, #9
 8004f18:	6811      	ldr	r1, [r2, #0]
 8004f1a:	e7f2      	b.n	8004f02 <rcc_osc_on+0x1a>
		RCC_CRRCR |= RCC_CRRCR_HSI48ON;
 8004f1c:	4a05      	ldr	r2, [pc, #20]	; (8004f34 <rcc_osc_on+0x4c>)
		RCC_CSR |= RCC_CSR_LSION;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	6811      	ldr	r1, [r2, #0]
 8004f22:	e7ee      	b.n	8004f02 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSI16ON;
 8004f24:	4a02      	ldr	r2, [pc, #8]	; (8004f30 <rcc_osc_on+0x48>)
 8004f26:	e7fa      	b.n	8004f1e <rcc_osc_on+0x36>
		RCC_CSR |= RCC_CSR_LSEON;
 8004f28:	4a03      	ldr	r2, [pc, #12]	; (8004f38 <rcc_osc_on+0x50>)
 8004f2a:	e7ee      	b.n	8004f0a <rcc_osc_on+0x22>
		RCC_CSR |= RCC_CSR_LSION;
 8004f2c:	4a02      	ldr	r2, [pc, #8]	; (8004f38 <rcc_osc_on+0x50>)
 8004f2e:	e7f6      	b.n	8004f1e <rcc_osc_on+0x36>
 8004f30:	40021000 	.word	0x40021000
 8004f34:	40021008 	.word	0x40021008
 8004f38:	40021050 	.word	0x40021050

08004f3c <rcc_is_osc_ready>:
	cm3_assert_not_reached();
}


bool rcc_is_osc_ready(enum rcc_osc osc)
{
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	b500      	push	{lr}
 8004f40:	2806      	cmp	r0, #6
 8004f42:	d80a      	bhi.n	8004f5a <rcc_is_osc_ready+0x1e>
 8004f44:	3301      	adds	r3, #1
 8004f46:	f000 fa2f 	bl	80053a8 <__gnu_thumb1_case_uqi>
 8004f4a:	0a04      	.short	0x0a04
 8004f4c:	1a160e12 	.word	0x1a160e12
 8004f50:	1c          	.byte	0x1c
 8004f51:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 8004f52:	4a0d      	ldr	r2, [pc, #52]	; (8004f88 <rcc_is_osc_ready+0x4c>)
 8004f54:	6810      	ldr	r0, [r2, #0]
 8004f56:	0e40      	lsrs	r0, r0, #25
	case RCC_MSI:
		return RCC_CR & RCC_CR_MSIRDY;
	case RCC_LSE:
		return RCC_CSR & RCC_CSR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 8004f58:	4003      	ands	r3, r0
	}
	return false;
}
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	bd00      	pop	{pc}
		return RCC_CR & RCC_CR_HSERDY;
 8004f5e:	4a0a      	ldr	r2, [pc, #40]	; (8004f88 <rcc_is_osc_ready+0x4c>)
 8004f60:	6810      	ldr	r0, [r2, #0]
 8004f62:	0c40      	lsrs	r0, r0, #17
 8004f64:	e7f8      	b.n	8004f58 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_HSI16RDY;
 8004f66:	4a08      	ldr	r2, [pc, #32]	; (8004f88 <rcc_is_osc_ready+0x4c>)
 8004f68:	6810      	ldr	r0, [r2, #0]
 8004f6a:	0880      	lsrs	r0, r0, #2
 8004f6c:	e7f4      	b.n	8004f58 <rcc_is_osc_ready+0x1c>
		return RCC_CRRCR & RCC_CRRCR_HSI48RDY;
 8004f6e:	4a07      	ldr	r2, [pc, #28]	; (8004f8c <rcc_is_osc_ready+0x50>)
		return RCC_CSR & RCC_CSR_LSIRDY;
 8004f70:	6810      	ldr	r0, [r2, #0]
 8004f72:	0840      	lsrs	r0, r0, #1
 8004f74:	e7f0      	b.n	8004f58 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_MSIRDY;
 8004f76:	4a04      	ldr	r2, [pc, #16]	; (8004f88 <rcc_is_osc_ready+0x4c>)
		return RCC_CSR & RCC_CSR_LSERDY;
 8004f78:	6810      	ldr	r0, [r2, #0]
 8004f7a:	0a40      	lsrs	r0, r0, #9
 8004f7c:	e7ec      	b.n	8004f58 <rcc_is_osc_ready+0x1c>
 8004f7e:	4a04      	ldr	r2, [pc, #16]	; (8004f90 <rcc_is_osc_ready+0x54>)
 8004f80:	e7fa      	b.n	8004f78 <rcc_is_osc_ready+0x3c>
		return RCC_CSR & RCC_CSR_LSIRDY;
 8004f82:	4a03      	ldr	r2, [pc, #12]	; (8004f90 <rcc_is_osc_ready+0x54>)
 8004f84:	e7f4      	b.n	8004f70 <rcc_is_osc_ready+0x34>
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	40021008 	.word	0x40021008
 8004f90:	40021050 	.word	0x40021050

08004f94 <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 8004f94:	b510      	push	{r4, lr}
 8004f96:	0004      	movs	r4, r0
	while (!rcc_is_osc_ready(osc));
 8004f98:	0020      	movs	r0, r4
 8004f9a:	f7ff ffcf 	bl	8004f3c <rcc_is_osc_ready>
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	d0fa      	beq.n	8004f98 <rcc_wait_for_osc_ready+0x4>
}
 8004fa2:	bd10      	pop	{r4, pc}

08004fa4 <rcc_set_ppre1>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb1pre
 */

void rcc_set_ppre1(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8004fa4:	4a03      	ldr	r2, [pc, #12]	; (8004fb4 <rcc_set_ppre1+0x10>)
 8004fa6:	4904      	ldr	r1, [pc, #16]	; (8004fb8 <rcc_set_ppre1+0x14>)
 8004fa8:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE1_MASK << RCC_CFGR_PPRE1_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8004faa:	0200      	lsls	r0, r0, #8
	uint32_t reg = RCC_CFGR
 8004fac:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8004fae:	4318      	orrs	r0, r3
 8004fb0:	6010      	str	r0, [r2, #0]
}
 8004fb2:	4770      	bx	lr
 8004fb4:	4002100c 	.word	0x4002100c
 8004fb8:	fffff8ff 	.word	0xfffff8ff

08004fbc <rcc_set_ppre2>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb2pre
 */

void rcc_set_ppre2(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8004fbc:	4a03      	ldr	r2, [pc, #12]	; (8004fcc <rcc_set_ppre2+0x10>)
 8004fbe:	4904      	ldr	r1, [pc, #16]	; (8004fd0 <rcc_set_ppre2+0x14>)
 8004fc0:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE2_MASK << RCC_CFGR_PPRE2_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8004fc2:	02c0      	lsls	r0, r0, #11
	uint32_t reg = RCC_CFGR
 8004fc4:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8004fc6:	4318      	orrs	r0, r3
 8004fc8:	6010      	str	r0, [r2, #0]
}
 8004fca:	4770      	bx	lr
 8004fcc:	4002100c 	.word	0x4002100c
 8004fd0:	ffffc7ff 	.word	0xffffc7ff

08004fd4 <rcc_set_hpre>:
 * @param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
 */

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8004fd4:	21f0      	movs	r1, #240	; 0xf0
 8004fd6:	4a03      	ldr	r2, [pc, #12]	; (8004fe4 <rcc_set_hpre+0x10>)
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8004fd8:	0100      	lsls	r0, r0, #4
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8004fda:	6813      	ldr	r3, [r2, #0]
 8004fdc:	438b      	bics	r3, r1
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8004fde:	4318      	orrs	r0, r3
 8004fe0:	6010      	str	r0, [r2, #0]
}
 8004fe2:	4770      	bx	lr
 8004fe4:	4002100c 	.word	0x4002100c

08004fe8 <rcc_set_msi_range>:
*
 * @param msi_range desired range @ref rcc_icscr_msirange
 */
void rcc_set_msi_range(uint32_t msi_range)
{
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8004fe8:	4a03      	ldr	r2, [pc, #12]	; (8004ff8 <rcc_set_msi_range+0x10>)
 8004fea:	4904      	ldr	r1, [pc, #16]	; (8004ffc <rcc_set_msi_range+0x14>)
 8004fec:	6813      	ldr	r3, [r2, #0]
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8004fee:	0340      	lsls	r0, r0, #13
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8004ff0:	400b      	ands	r3, r1
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8004ff2:	4318      	orrs	r0, r3
 8004ff4:	6010      	str	r0, [r2, #0]
}
 8004ff6:	4770      	bx	lr
 8004ff8:	40021004 	.word	0x40021004
 8004ffc:	ffff1fff 	.word	0xffff1fff

08005000 <rcc_set_peripheral_clk_sel>:
void rcc_set_peripheral_clk_sel(uint32_t periph, uint32_t sel)
{
	uint8_t shift;
	uint32_t mask;

	switch (periph) {
 8005000:	4b13      	ldr	r3, [pc, #76]	; (8005050 <rcc_set_peripheral_clk_sel+0x50>)
{
 8005002:	000a      	movs	r2, r1
 8005004:	b510      	push	{r4, lr}
	switch (periph) {
 8005006:	4298      	cmp	r0, r3
 8005008:	d01c      	beq.n	8005044 <rcc_set_peripheral_clk_sel+0x44>
 800500a:	d80b      	bhi.n	8005024 <rcc_set_peripheral_clk_sel+0x24>
 800500c:	4b11      	ldr	r3, [pc, #68]	; (8005054 <rcc_set_peripheral_clk_sel+0x54>)
 800500e:	4298      	cmp	r0, r3
 8005010:	d01a      	beq.n	8005048 <rcc_set_peripheral_clk_sel+0x48>
 8005012:	4911      	ldr	r1, [pc, #68]	; (8005058 <rcc_set_peripheral_clk_sel+0x58>)
			shift = RCC_CCIPR_I2C3SEL_SHIFT;
			mask = RCC_CCIPR_I2C3SEL_MASK;
			break;

		case I2C1_BASE:
			shift = RCC_CCIPR_I2C1SEL_SHIFT;
 8005014:	230c      	movs	r3, #12
	switch (periph) {
 8005016:	4288      	cmp	r0, r1
 8005018:	d00b      	beq.n	8005032 <rcc_set_peripheral_clk_sel+0x32>
 800501a:	4910      	ldr	r1, [pc, #64]	; (800505c <rcc_set_peripheral_clk_sel+0x5c>)
			shift = RCC_CCIPR_LPUART1SEL_SHIFT;
			mask = RCC_CCIPR_LPUART1SEL_MASK;
			break;

		case USART2_BASE:
			shift = RCC_CCIPR_USART2SEL_SHIFT;
 800501c:	3b0a      	subs	r3, #10
	switch (periph) {
 800501e:	4288      	cmp	r0, r1
 8005020:	d007      	beq.n	8005032 <rcc_set_peripheral_clk_sel+0x32>
			return;
	}

	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
	RCC_CCIPR = reg32 | (sel << shift);
}
 8005022:	bd10      	pop	{r4, pc}
	switch (periph) {
 8005024:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <rcc_set_peripheral_clk_sel+0x60>)
 8005026:	4298      	cmp	r0, r3
 8005028:	d010      	beq.n	800504c <rcc_set_peripheral_clk_sel+0x4c>
 800502a:	4b0e      	ldr	r3, [pc, #56]	; (8005064 <rcc_set_peripheral_clk_sel+0x64>)
 800502c:	4298      	cmp	r0, r3
 800502e:	d1f8      	bne.n	8005022 <rcc_set_peripheral_clk_sel+0x22>
			shift = RCC_CCIPR_USART1SEL_SHIFT;
 8005030:	2300      	movs	r3, #0
	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
 8005032:	2003      	movs	r0, #3
 8005034:	4098      	lsls	r0, r3
	RCC_CCIPR = reg32 | (sel << shift);
 8005036:	409a      	lsls	r2, r3
	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
 8005038:	4c0b      	ldr	r4, [pc, #44]	; (8005068 <rcc_set_peripheral_clk_sel+0x68>)
 800503a:	6821      	ldr	r1, [r4, #0]
 800503c:	4381      	bics	r1, r0
	RCC_CCIPR = reg32 | (sel << shift);
 800503e:	4311      	orrs	r1, r2
 8005040:	6021      	str	r1, [r4, #0]
 8005042:	e7ee      	b.n	8005022 <rcc_set_peripheral_clk_sel+0x22>
	switch (periph) {
 8005044:	2310      	movs	r3, #16
 8005046:	e7f4      	b.n	8005032 <rcc_set_peripheral_clk_sel+0x32>
			shift = RCC_CCIPR_LPUART1SEL_SHIFT;
 8005048:	230a      	movs	r3, #10
 800504a:	e7f2      	b.n	8005032 <rcc_set_peripheral_clk_sel+0x32>
			shift = RCC_CCIPR_LPTIM1SEL_SHIFT;
 800504c:	2312      	movs	r3, #18
 800504e:	e7f0      	b.n	8005032 <rcc_set_peripheral_clk_sel+0x32>
 8005050:	40007800 	.word	0x40007800
 8005054:	40004800 	.word	0x40004800
 8005058:	40005400 	.word	0x40005400
 800505c:	40004400 	.word	0x40004400
 8005060:	40007c00 	.word	0x40007c00
 8005064:	40013800 	.word	0x40013800
 8005068:	4002104c 	.word	0x4002104c

0800506c <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 800506c:	4b05      	ldr	r3, [pc, #20]	; (8005084 <rcc_periph_clock_enable+0x18>)
 800506e:	0942      	lsrs	r2, r0, #5
 8005070:	18d2      	adds	r2, r2, r3
 8005072:	231f      	movs	r3, #31
 8005074:	4018      	ands	r0, r3
 8005076:	3b1e      	subs	r3, #30
 8005078:	4083      	lsls	r3, r0
 800507a:	6811      	ldr	r1, [r2, #0]
 800507c:	430b      	orrs	r3, r1
 800507e:	6013      	str	r3, [r2, #0]
}
 8005080:	4770      	bx	lr
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	40021000 	.word	0x40021000

08005088 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8005088:	4a06      	ldr	r2, [pc, #24]	; (80050a4 <rcc_periph_reset_pulse+0x1c>)
 800508a:	0943      	lsrs	r3, r0, #5
 800508c:	189b      	adds	r3, r3, r2
 800508e:	221f      	movs	r2, #31
 8005090:	4010      	ands	r0, r2
 8005092:	3a1e      	subs	r2, #30
 8005094:	4082      	lsls	r2, r0
 8005096:	6819      	ldr	r1, [r3, #0]
 8005098:	4311      	orrs	r1, r2
 800509a:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 800509c:	6819      	ldr	r1, [r3, #0]
 800509e:	4391      	bics	r1, r2
 80050a0:	6019      	str	r1, [r3, #0]
}
 80050a2:	4770      	bx	lr
 80050a4:	40021000 	.word	0x40021000

080050a8 <rtc_unlock>:
/** @brief Unlock write access to the RTC registers

*/
void rtc_unlock(void)
{
	RTC_WPR = 0xca;
 80050a8:	22ca      	movs	r2, #202	; 0xca
 80050aa:	4b02      	ldr	r3, [pc, #8]	; (80050b4 <rtc_unlock+0xc>)
 80050ac:	601a      	str	r2, [r3, #0]
	RTC_WPR = 0x53;
 80050ae:	3a77      	subs	r2, #119	; 0x77
 80050b0:	601a      	str	r2, [r3, #0]
}
 80050b2:	4770      	bx	lr
 80050b4:	40002824 	.word	0x40002824

080050b8 <rtc_lock>:
/** @brief Lock write access to the RTC registers

*/
void rtc_lock(void)
{
	RTC_WPR = 0xff;
 80050b8:	22ff      	movs	r2, #255	; 0xff
 80050ba:	4b01      	ldr	r3, [pc, #4]	; (80050c0 <rtc_lock+0x8>)
 80050bc:	601a      	str	r2, [r3, #0]
}
 80050be:	4770      	bx	lr
 80050c0:	40002824 	.word	0x40002824

080050c4 <rtc_clear_wakeup_flag>:

@details This function should be called first in the rtc_wkup_isr()
*/
void rtc_clear_wakeup_flag(void)
{
	RTC_ISR &= ~RTC_ISR_WUTF;
 80050c4:	4a02      	ldr	r2, [pc, #8]	; (80050d0 <rtc_clear_wakeup_flag+0xc>)
 80050c6:	4903      	ldr	r1, [pc, #12]	; (80050d4 <rtc_clear_wakeup_flag+0x10>)
 80050c8:	6813      	ldr	r3, [r2, #0]
 80050ca:	400b      	ands	r3, r1
 80050cc:	6013      	str	r3, [r2, #0]
}
 80050ce:	4770      	bx	lr
 80050d0:	4000280c 	.word	0x4000280c
 80050d4:	fffffbff 	.word	0xfffffbff

080050d8 <spi_xfer>:
uint16_t spi_xfer(uint32_t spi, uint16_t data)
{
	spi_write(spi, data);

	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 80050d8:	2301      	movs	r3, #1
	SPI_DR(spi) = data;
 80050da:	60c1      	str	r1, [r0, #12]
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 80050dc:	6882      	ldr	r2, [r0, #8]
 80050de:	421a      	tst	r2, r3
 80050e0:	d0fc      	beq.n	80050dc <spi_xfer+0x4>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 80050e2:	68c0      	ldr	r0, [r0, #12]
 80050e4:	b280      	uxth	r0, r0
}
 80050e6:	4770      	bx	lr

080050e8 <timer_enable_counter>:
tim_reg_base
*/

void timer_enable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_CEN;
 80050e8:	2301      	movs	r3, #1
 80050ea:	6802      	ldr	r2, [r0, #0]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	6003      	str	r3, [r0, #0]
}
 80050f0:	4770      	bx	lr

080050f2 <timer_disable_counter>:
tim_reg_base
*/

void timer_disable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_CEN;
 80050f2:	2201      	movs	r2, #1
 80050f4:	6803      	ldr	r3, [r0, #0]
 80050f6:	4393      	bics	r3, r2
 80050f8:	6003      	str	r3, [r0, #0]
}
 80050fa:	4770      	bx	lr

080050fc <timer_set_prescaler>:
@param[in] value Unsigned int32. Prescaler values 0...0xFFFF.
*/

void timer_set_prescaler(uint32_t timer_peripheral, uint32_t value)
{
	TIM_PSC(timer_peripheral) = value;
 80050fc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80050fe:	4770      	bx	lr

08005100 <timer_get_counter>:
@returns Unsigned int32. Counter value.
*/

uint32_t timer_get_counter(uint32_t timer_peripheral)
{
	return TIM_CNT(timer_peripheral);
 8005100:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8005102:	4770      	bx	lr

08005104 <usart_set_baudrate>:
void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;

#if defined USART1
	if ((usart == USART1)
 8005104:	4b10      	ldr	r3, [pc, #64]	; (8005148 <usart_set_baudrate+0x44>)
{
 8005106:	b570      	push	{r4, r5, r6, lr}
 8005108:	0005      	movs	r5, r0
 800510a:	000c      	movs	r4, r1
 800510c:	084e      	lsrs	r6, r1, #1
	if ((usart == USART1)
 800510e:	4298      	cmp	r0, r3
 8005110:	d107      	bne.n	8005122 <usart_set_baudrate+0x1e>
#if defined USART6
		|| (usart == USART6)
#endif
		) {
		clock = rcc_apb2_frequency;
 8005112:	4b0e      	ldr	r3, [pc, #56]	; (800514c <usart_set_baudrate+0x48>)
 8005114:	6818      	ldr	r0, [r3, #0]
			+ ((clock % baud) * 256 + baud / 2) / baud;
		return;
	}
#endif

	USART_BRR(usart) = (clock + baud / 2) / baud;
 8005116:	0021      	movs	r1, r4
 8005118:	1830      	adds	r0, r6, r0
 800511a:	f000 f94f 	bl	80053bc <__udivsi3>
 800511e:	60e8      	str	r0, [r5, #12]
 8005120:	e010      	b.n	8005144 <usart_set_baudrate+0x40>
	uint32_t clock = rcc_apb1_frequency;
 8005122:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <usart_set_baudrate+0x4c>)
 8005124:	6818      	ldr	r0, [r3, #0]
	if (usart == LPUART1) {
 8005126:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <usart_set_baudrate+0x50>)
 8005128:	429d      	cmp	r5, r3
 800512a:	d1f4      	bne.n	8005116 <usart_set_baudrate+0x12>
		USART_BRR(usart) = (clock / baud) * 256
 800512c:	f000 f9cc 	bl	80054c8 <__aeabi_uidivmod>
 8005130:	0005      	movs	r5, r0
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8005132:	0208      	lsls	r0, r1, #8
 8005134:	1980      	adds	r0, r0, r6
 8005136:	0021      	movs	r1, r4
 8005138:	f000 f940 	bl	80053bc <__udivsi3>
		USART_BRR(usart) = (clock / baud) * 256
 800513c:	022d      	lsls	r5, r5, #8
 800513e:	4b06      	ldr	r3, [pc, #24]	; (8005158 <usart_set_baudrate+0x54>)
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8005140:	1940      	adds	r0, r0, r5
		USART_BRR(usart) = (clock / baud) * 256
 8005142:	6018      	str	r0, [r3, #0]
}
 8005144:	bd70      	pop	{r4, r5, r6, pc}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	40013800 	.word	0x40013800
 800514c:	2000009c 	.word	0x2000009c
 8005150:	20000098 	.word	0x20000098
 8005154:	40004800 	.word	0x40004800
 8005158:	4000480c 	.word	0x4000480c

0800515c <usart_set_databits>:
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
 800515c:	2908      	cmp	r1, #8
 800515e:	d104      	bne.n	800516a <usart_set_databits+0xe>
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 8005160:	6803      	ldr	r3, [r0, #0]
 8005162:	4a04      	ldr	r2, [pc, #16]	; (8005174 <usart_set_databits+0x18>)
 8005164:	4013      	ands	r3, r2
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8005166:	6003      	str	r3, [r0, #0]
	}
}
 8005168:	4770      	bx	lr
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 800516a:	2380      	movs	r3, #128	; 0x80
 800516c:	6802      	ldr	r2, [r0, #0]
 800516e:	015b      	lsls	r3, r3, #5
 8005170:	4313      	orrs	r3, r2
 8005172:	e7f8      	b.n	8005166 <usart_set_databits+0xa>
 8005174:	ffffefff 	.word	0xffffefff

08005178 <usart_set_stopbits>:

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 8005178:	6843      	ldr	r3, [r0, #4]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 800517a:	4a02      	ldr	r2, [pc, #8]	; (8005184 <usart_set_stopbits+0xc>)
 800517c:	4013      	ands	r3, r2
 800517e:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 8005180:	6043      	str	r3, [r0, #4]
}
 8005182:	4770      	bx	lr
 8005184:	ffffcfff 	.word	0xffffcfff

08005188 <usart_set_parity>:

void usart_set_parity(uint32_t usart, uint32_t parity)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 8005188:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 800518a:	4a02      	ldr	r2, [pc, #8]	; (8005194 <usart_set_parity+0xc>)
 800518c:	4013      	ands	r3, r2
 800518e:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8005190:	6003      	str	r3, [r0, #0]
}
 8005192:	4770      	bx	lr
 8005194:	fffff9ff 	.word	0xfffff9ff

08005198 <usart_set_mode>:
void usart_set_mode(uint32_t usart, uint32_t mode)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8005198:	220c      	movs	r2, #12
	reg32 = USART_CR1(usart);
 800519a:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 800519c:	4393      	bics	r3, r2
 800519e:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 80051a0:	6003      	str	r3, [r0, #0]
}
 80051a2:	4770      	bx	lr

080051a4 <usart_set_flow_control>:

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 80051a4:	6883      	ldr	r3, [r0, #8]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 80051a6:	4a02      	ldr	r2, [pc, #8]	; (80051b0 <usart_set_flow_control+0xc>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 80051ac:	6083      	str	r3, [r0, #8]
}
 80051ae:	4770      	bx	lr
 80051b0:	fffffcff 	.word	0xfffffcff

080051b4 <usart_enable>:
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 80051b4:	2301      	movs	r3, #1
 80051b6:	6802      	ldr	r2, [r0, #0]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	6003      	str	r3, [r0, #0]
}
 80051bc:	4770      	bx	lr

080051be <usart_disable>:
usart_reg_base
*/

void usart_disable(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_UE;
 80051be:	2201      	movs	r2, #1
 80051c0:	6803      	ldr	r3, [r0, #0]
 80051c2:	4393      	bics	r3, r2
 80051c4:	6003      	str	r3, [r0, #0]
}
 80051c6:	4770      	bx	lr

080051c8 <usart_send_blocking>:
usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(uint32_t usart, uint16_t data)
{
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	000d      	movs	r5, r1
 80051cc:	0004      	movs	r4, r0
	usart_wait_send_ready(usart);
 80051ce:	f000 f80d 	bl	80051ec <usart_wait_send_ready>
	usart_send(usart, data);
 80051d2:	0029      	movs	r1, r5
 80051d4:	0020      	movs	r0, r4
 80051d6:	f000 f801 	bl	80051dc <usart_send>
}
 80051da:	bd70      	pop	{r4, r5, r6, pc}

080051dc <usart_send>:
 */

void usart_send(uint32_t usart, uint16_t data)
{
	/* Send data. */
	USART_TDR(usart) = (data & USART_TDR_MASK);
 80051dc:	05c9      	lsls	r1, r1, #23
 80051de:	0dc9      	lsrs	r1, r1, #23
 80051e0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80051e2:	4770      	bx	lr

080051e4 <usart_recv>:
 */

uint16_t usart_recv(uint32_t usart)
{
	/* Receive data. */
	return USART_RDR(usart) & USART_RDR_MASK;
 80051e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80051e6:	05c0      	lsls	r0, r0, #23
 80051e8:	0dc0      	lsrs	r0, r0, #23
}
 80051ea:	4770      	bx	lr

080051ec <usart_wait_send_ready>:
 */

void usart_wait_send_ready(uint32_t usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_ISR(usart) & USART_ISR_TXE) == 0);
 80051ec:	2380      	movs	r3, #128	; 0x80
 80051ee:	69c2      	ldr	r2, [r0, #28]
 80051f0:	421a      	tst	r2, r3
 80051f2:	d0fc      	beq.n	80051ee <usart_wait_send_ready+0x2>
}
 80051f4:	4770      	bx	lr

080051f6 <usart_get_flag>:
 * @returns boolean: flag set.
 */

bool usart_get_flag(uint32_t usart, uint32_t flag)
{
	return ((USART_ISR(usart) & flag) != 0);
 80051f6:	69c0      	ldr	r0, [r0, #28]
 80051f8:	4008      	ands	r0, r1
 80051fa:	1e41      	subs	r1, r0, #1
 80051fc:	4188      	sbcs	r0, r1
 80051fe:	b2c0      	uxtb	r0, r0
}
 8005200:	4770      	bx	lr

08005202 <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 8005202:	e7fe      	b.n	8005202 <blocking_handler>

08005204 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 8005204:	4770      	bx	lr
	...

08005208 <reset_handler>:
{
 8005208:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 800520a:	4b16      	ldr	r3, [pc, #88]	; (8005264 <reset_handler+0x5c>)
 800520c:	4a16      	ldr	r2, [pc, #88]	; (8005268 <reset_handler+0x60>)
 800520e:	4917      	ldr	r1, [pc, #92]	; (800526c <reset_handler+0x64>)
 8005210:	428b      	cmp	r3, r1
 8005212:	d318      	bcc.n	8005246 <reset_handler+0x3e>
		*dest++ = 0;
 8005214:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 8005216:	4a16      	ldr	r2, [pc, #88]	; (8005270 <reset_handler+0x68>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d317      	bcc.n	800524c <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	4a15      	ldr	r2, [pc, #84]	; (8005274 <reset_handler+0x6c>)
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8005224:	4c14      	ldr	r4, [pc, #80]	; (8005278 <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 8005226:	430b      	orrs	r3, r1
 8005228:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 800522a:	4b14      	ldr	r3, [pc, #80]	; (800527c <reset_handler+0x74>)
 800522c:	429c      	cmp	r4, r3
 800522e:	d30f      	bcc.n	8005250 <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8005230:	4c13      	ldr	r4, [pc, #76]	; (8005280 <reset_handler+0x78>)
 8005232:	4b14      	ldr	r3, [pc, #80]	; (8005284 <reset_handler+0x7c>)
 8005234:	429c      	cmp	r4, r3
 8005236:	d30e      	bcc.n	8005256 <reset_handler+0x4e>
	(void)main();
 8005238:	f7fe ff42 	bl	80040c0 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 800523c:	4c12      	ldr	r4, [pc, #72]	; (8005288 <reset_handler+0x80>)
 800523e:	4b13      	ldr	r3, [pc, #76]	; (800528c <reset_handler+0x84>)
 8005240:	429c      	cmp	r4, r3
 8005242:	d30b      	bcc.n	800525c <reset_handler+0x54>
}
 8005244:	bd10      	pop	{r4, pc}
		*dest = *src;
 8005246:	ca01      	ldmia	r2!, {r0}
 8005248:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 800524a:	e7e1      	b.n	8005210 <reset_handler+0x8>
		*dest++ = 0;
 800524c:	c302      	stmia	r3!, {r1}
 800524e:	e7e3      	b.n	8005218 <reset_handler+0x10>
		(*fp)();
 8005250:	cc08      	ldmia	r4!, {r3}
 8005252:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8005254:	e7e9      	b.n	800522a <reset_handler+0x22>
		(*fp)();
 8005256:	cc08      	ldmia	r4!, {r3}
 8005258:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 800525a:	e7ea      	b.n	8005232 <reset_handler+0x2a>
		(*fp)();
 800525c:	cc08      	ldmia	r4!, {r3}
 800525e:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8005260:	e7ed      	b.n	800523e <reset_handler+0x36>
 8005262:	46c0      	nop			; (mov r8, r8)
 8005264:	20000000 	.word	0x20000000
 8005268:	080057f0 	.word	0x080057f0
 800526c:	20000104 	.word	0x20000104
 8005270:	200003c0 	.word	0x200003c0
 8005274:	e000ed14 	.word	0xe000ed14
 8005278:	080057f0 	.word	0x080057f0
 800527c:	080057f0 	.word	0x080057f0
 8005280:	080057f0 	.word	0x080057f0
 8005284:	080057f0 	.word	0x080057f0
 8005288:	080057f0 	.word	0x080057f0
 800528c:	080057f0 	.word	0x080057f0

08005290 <malloc>:
 8005290:	b510      	push	{r4, lr}
 8005292:	4b03      	ldr	r3, [pc, #12]	; (80052a0 <malloc+0x10>)
 8005294:	0001      	movs	r1, r0
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	f000 f804 	bl	80052a4 <_malloc_r>
 800529c:	bd10      	pop	{r4, pc}
 800529e:	46c0      	nop			; (mov r8, r8)
 80052a0:	200000a0 	.word	0x200000a0

080052a4 <_malloc_r>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	2303      	movs	r3, #3
 80052a8:	1ccd      	adds	r5, r1, #3
 80052aa:	439d      	bics	r5, r3
 80052ac:	3508      	adds	r5, #8
 80052ae:	0006      	movs	r6, r0
 80052b0:	2d0c      	cmp	r5, #12
 80052b2:	d21f      	bcs.n	80052f4 <_malloc_r+0x50>
 80052b4:	250c      	movs	r5, #12
 80052b6:	42a9      	cmp	r1, r5
 80052b8:	d81e      	bhi.n	80052f8 <_malloc_r+0x54>
 80052ba:	0030      	movs	r0, r6
 80052bc:	f000 f862 	bl	8005384 <__malloc_lock>
 80052c0:	4925      	ldr	r1, [pc, #148]	; (8005358 <_malloc_r+0xb4>)
 80052c2:	680a      	ldr	r2, [r1, #0]
 80052c4:	0014      	movs	r4, r2
 80052c6:	2c00      	cmp	r4, #0
 80052c8:	d11a      	bne.n	8005300 <_malloc_r+0x5c>
 80052ca:	4f24      	ldr	r7, [pc, #144]	; (800535c <_malloc_r+0xb8>)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d104      	bne.n	80052dc <_malloc_r+0x38>
 80052d2:	0021      	movs	r1, r4
 80052d4:	0030      	movs	r0, r6
 80052d6:	f000 f843 	bl	8005360 <_sbrk_r>
 80052da:	6038      	str	r0, [r7, #0]
 80052dc:	0029      	movs	r1, r5
 80052de:	0030      	movs	r0, r6
 80052e0:	f000 f83e 	bl	8005360 <_sbrk_r>
 80052e4:	1c43      	adds	r3, r0, #1
 80052e6:	d12b      	bne.n	8005340 <_malloc_r+0x9c>
 80052e8:	230c      	movs	r3, #12
 80052ea:	0030      	movs	r0, r6
 80052ec:	6033      	str	r3, [r6, #0]
 80052ee:	f000 f851 	bl	8005394 <__malloc_unlock>
 80052f2:	e003      	b.n	80052fc <_malloc_r+0x58>
 80052f4:	2d00      	cmp	r5, #0
 80052f6:	dade      	bge.n	80052b6 <_malloc_r+0x12>
 80052f8:	230c      	movs	r3, #12
 80052fa:	6033      	str	r3, [r6, #0]
 80052fc:	2000      	movs	r0, #0
 80052fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	1b5b      	subs	r3, r3, r5
 8005304:	d419      	bmi.n	800533a <_malloc_r+0x96>
 8005306:	2b0b      	cmp	r3, #11
 8005308:	d903      	bls.n	8005312 <_malloc_r+0x6e>
 800530a:	6023      	str	r3, [r4, #0]
 800530c:	18e4      	adds	r4, r4, r3
 800530e:	6025      	str	r5, [r4, #0]
 8005310:	e003      	b.n	800531a <_malloc_r+0x76>
 8005312:	6863      	ldr	r3, [r4, #4]
 8005314:	42a2      	cmp	r2, r4
 8005316:	d10e      	bne.n	8005336 <_malloc_r+0x92>
 8005318:	600b      	str	r3, [r1, #0]
 800531a:	0030      	movs	r0, r6
 800531c:	f000 f83a 	bl	8005394 <__malloc_unlock>
 8005320:	0020      	movs	r0, r4
 8005322:	2207      	movs	r2, #7
 8005324:	300b      	adds	r0, #11
 8005326:	1d23      	adds	r3, r4, #4
 8005328:	4390      	bics	r0, r2
 800532a:	1ac2      	subs	r2, r0, r3
 800532c:	4298      	cmp	r0, r3
 800532e:	d0e6      	beq.n	80052fe <_malloc_r+0x5a>
 8005330:	1a1b      	subs	r3, r3, r0
 8005332:	50a3      	str	r3, [r4, r2]
 8005334:	e7e3      	b.n	80052fe <_malloc_r+0x5a>
 8005336:	6053      	str	r3, [r2, #4]
 8005338:	e7ef      	b.n	800531a <_malloc_r+0x76>
 800533a:	0022      	movs	r2, r4
 800533c:	6864      	ldr	r4, [r4, #4]
 800533e:	e7c2      	b.n	80052c6 <_malloc_r+0x22>
 8005340:	2303      	movs	r3, #3
 8005342:	1cc4      	adds	r4, r0, #3
 8005344:	439c      	bics	r4, r3
 8005346:	42a0      	cmp	r0, r4
 8005348:	d0e1      	beq.n	800530e <_malloc_r+0x6a>
 800534a:	1a21      	subs	r1, r4, r0
 800534c:	0030      	movs	r0, r6
 800534e:	f000 f807 	bl	8005360 <_sbrk_r>
 8005352:	1c43      	adds	r3, r0, #1
 8005354:	d1db      	bne.n	800530e <_malloc_r+0x6a>
 8005356:	e7c7      	b.n	80052e8 <_malloc_r+0x44>
 8005358:	200003a4 	.word	0x200003a4
 800535c:	200003a8 	.word	0x200003a8

08005360 <_sbrk_r>:
 8005360:	2300      	movs	r3, #0
 8005362:	b570      	push	{r4, r5, r6, lr}
 8005364:	4d06      	ldr	r5, [pc, #24]	; (8005380 <_sbrk_r+0x20>)
 8005366:	0004      	movs	r4, r0
 8005368:	0008      	movs	r0, r1
 800536a:	602b      	str	r3, [r5, #0]
 800536c:	f000 f8b2 	bl	80054d4 <_sbrk>
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	d103      	bne.n	800537c <_sbrk_r+0x1c>
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d000      	beq.n	800537c <_sbrk_r+0x1c>
 800537a:	6023      	str	r3, [r4, #0]
 800537c:	bd70      	pop	{r4, r5, r6, pc}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	200003b0 	.word	0x200003b0

08005384 <__malloc_lock>:
 8005384:	b510      	push	{r4, lr}
 8005386:	4802      	ldr	r0, [pc, #8]	; (8005390 <__malloc_lock+0xc>)
 8005388:	f000 f80c 	bl	80053a4 <__retarget_lock_acquire_recursive>
 800538c:	bd10      	pop	{r4, pc}
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	200003b8 	.word	0x200003b8

08005394 <__malloc_unlock>:
 8005394:	b510      	push	{r4, lr}
 8005396:	4802      	ldr	r0, [pc, #8]	; (80053a0 <__malloc_unlock+0xc>)
 8005398:	f000 f805 	bl	80053a6 <__retarget_lock_release_recursive>
 800539c:	bd10      	pop	{r4, pc}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	200003b8 	.word	0x200003b8

080053a4 <__retarget_lock_acquire_recursive>:
 80053a4:	4770      	bx	lr

080053a6 <__retarget_lock_release_recursive>:
 80053a6:	4770      	bx	lr

080053a8 <__gnu_thumb1_case_uqi>:
 80053a8:	b402      	push	{r1}
 80053aa:	4671      	mov	r1, lr
 80053ac:	0849      	lsrs	r1, r1, #1
 80053ae:	0049      	lsls	r1, r1, #1
 80053b0:	5c09      	ldrb	r1, [r1, r0]
 80053b2:	0049      	lsls	r1, r1, #1
 80053b4:	448e      	add	lr, r1
 80053b6:	bc02      	pop	{r1}
 80053b8:	4770      	bx	lr
 80053ba:	46c0      	nop			; (mov r8, r8)

080053bc <__udivsi3>:
 80053bc:	2200      	movs	r2, #0
 80053be:	0843      	lsrs	r3, r0, #1
 80053c0:	428b      	cmp	r3, r1
 80053c2:	d374      	bcc.n	80054ae <__udivsi3+0xf2>
 80053c4:	0903      	lsrs	r3, r0, #4
 80053c6:	428b      	cmp	r3, r1
 80053c8:	d35f      	bcc.n	800548a <__udivsi3+0xce>
 80053ca:	0a03      	lsrs	r3, r0, #8
 80053cc:	428b      	cmp	r3, r1
 80053ce:	d344      	bcc.n	800545a <__udivsi3+0x9e>
 80053d0:	0b03      	lsrs	r3, r0, #12
 80053d2:	428b      	cmp	r3, r1
 80053d4:	d328      	bcc.n	8005428 <__udivsi3+0x6c>
 80053d6:	0c03      	lsrs	r3, r0, #16
 80053d8:	428b      	cmp	r3, r1
 80053da:	d30d      	bcc.n	80053f8 <__udivsi3+0x3c>
 80053dc:	22ff      	movs	r2, #255	; 0xff
 80053de:	0209      	lsls	r1, r1, #8
 80053e0:	ba12      	rev	r2, r2
 80053e2:	0c03      	lsrs	r3, r0, #16
 80053e4:	428b      	cmp	r3, r1
 80053e6:	d302      	bcc.n	80053ee <__udivsi3+0x32>
 80053e8:	1212      	asrs	r2, r2, #8
 80053ea:	0209      	lsls	r1, r1, #8
 80053ec:	d065      	beq.n	80054ba <__udivsi3+0xfe>
 80053ee:	0b03      	lsrs	r3, r0, #12
 80053f0:	428b      	cmp	r3, r1
 80053f2:	d319      	bcc.n	8005428 <__udivsi3+0x6c>
 80053f4:	e000      	b.n	80053f8 <__udivsi3+0x3c>
 80053f6:	0a09      	lsrs	r1, r1, #8
 80053f8:	0bc3      	lsrs	r3, r0, #15
 80053fa:	428b      	cmp	r3, r1
 80053fc:	d301      	bcc.n	8005402 <__udivsi3+0x46>
 80053fe:	03cb      	lsls	r3, r1, #15
 8005400:	1ac0      	subs	r0, r0, r3
 8005402:	4152      	adcs	r2, r2
 8005404:	0b83      	lsrs	r3, r0, #14
 8005406:	428b      	cmp	r3, r1
 8005408:	d301      	bcc.n	800540e <__udivsi3+0x52>
 800540a:	038b      	lsls	r3, r1, #14
 800540c:	1ac0      	subs	r0, r0, r3
 800540e:	4152      	adcs	r2, r2
 8005410:	0b43      	lsrs	r3, r0, #13
 8005412:	428b      	cmp	r3, r1
 8005414:	d301      	bcc.n	800541a <__udivsi3+0x5e>
 8005416:	034b      	lsls	r3, r1, #13
 8005418:	1ac0      	subs	r0, r0, r3
 800541a:	4152      	adcs	r2, r2
 800541c:	0b03      	lsrs	r3, r0, #12
 800541e:	428b      	cmp	r3, r1
 8005420:	d301      	bcc.n	8005426 <__udivsi3+0x6a>
 8005422:	030b      	lsls	r3, r1, #12
 8005424:	1ac0      	subs	r0, r0, r3
 8005426:	4152      	adcs	r2, r2
 8005428:	0ac3      	lsrs	r3, r0, #11
 800542a:	428b      	cmp	r3, r1
 800542c:	d301      	bcc.n	8005432 <__udivsi3+0x76>
 800542e:	02cb      	lsls	r3, r1, #11
 8005430:	1ac0      	subs	r0, r0, r3
 8005432:	4152      	adcs	r2, r2
 8005434:	0a83      	lsrs	r3, r0, #10
 8005436:	428b      	cmp	r3, r1
 8005438:	d301      	bcc.n	800543e <__udivsi3+0x82>
 800543a:	028b      	lsls	r3, r1, #10
 800543c:	1ac0      	subs	r0, r0, r3
 800543e:	4152      	adcs	r2, r2
 8005440:	0a43      	lsrs	r3, r0, #9
 8005442:	428b      	cmp	r3, r1
 8005444:	d301      	bcc.n	800544a <__udivsi3+0x8e>
 8005446:	024b      	lsls	r3, r1, #9
 8005448:	1ac0      	subs	r0, r0, r3
 800544a:	4152      	adcs	r2, r2
 800544c:	0a03      	lsrs	r3, r0, #8
 800544e:	428b      	cmp	r3, r1
 8005450:	d301      	bcc.n	8005456 <__udivsi3+0x9a>
 8005452:	020b      	lsls	r3, r1, #8
 8005454:	1ac0      	subs	r0, r0, r3
 8005456:	4152      	adcs	r2, r2
 8005458:	d2cd      	bcs.n	80053f6 <__udivsi3+0x3a>
 800545a:	09c3      	lsrs	r3, r0, #7
 800545c:	428b      	cmp	r3, r1
 800545e:	d301      	bcc.n	8005464 <__udivsi3+0xa8>
 8005460:	01cb      	lsls	r3, r1, #7
 8005462:	1ac0      	subs	r0, r0, r3
 8005464:	4152      	adcs	r2, r2
 8005466:	0983      	lsrs	r3, r0, #6
 8005468:	428b      	cmp	r3, r1
 800546a:	d301      	bcc.n	8005470 <__udivsi3+0xb4>
 800546c:	018b      	lsls	r3, r1, #6
 800546e:	1ac0      	subs	r0, r0, r3
 8005470:	4152      	adcs	r2, r2
 8005472:	0943      	lsrs	r3, r0, #5
 8005474:	428b      	cmp	r3, r1
 8005476:	d301      	bcc.n	800547c <__udivsi3+0xc0>
 8005478:	014b      	lsls	r3, r1, #5
 800547a:	1ac0      	subs	r0, r0, r3
 800547c:	4152      	adcs	r2, r2
 800547e:	0903      	lsrs	r3, r0, #4
 8005480:	428b      	cmp	r3, r1
 8005482:	d301      	bcc.n	8005488 <__udivsi3+0xcc>
 8005484:	010b      	lsls	r3, r1, #4
 8005486:	1ac0      	subs	r0, r0, r3
 8005488:	4152      	adcs	r2, r2
 800548a:	08c3      	lsrs	r3, r0, #3
 800548c:	428b      	cmp	r3, r1
 800548e:	d301      	bcc.n	8005494 <__udivsi3+0xd8>
 8005490:	00cb      	lsls	r3, r1, #3
 8005492:	1ac0      	subs	r0, r0, r3
 8005494:	4152      	adcs	r2, r2
 8005496:	0883      	lsrs	r3, r0, #2
 8005498:	428b      	cmp	r3, r1
 800549a:	d301      	bcc.n	80054a0 <__udivsi3+0xe4>
 800549c:	008b      	lsls	r3, r1, #2
 800549e:	1ac0      	subs	r0, r0, r3
 80054a0:	4152      	adcs	r2, r2
 80054a2:	0843      	lsrs	r3, r0, #1
 80054a4:	428b      	cmp	r3, r1
 80054a6:	d301      	bcc.n	80054ac <__udivsi3+0xf0>
 80054a8:	004b      	lsls	r3, r1, #1
 80054aa:	1ac0      	subs	r0, r0, r3
 80054ac:	4152      	adcs	r2, r2
 80054ae:	1a41      	subs	r1, r0, r1
 80054b0:	d200      	bcs.n	80054b4 <__udivsi3+0xf8>
 80054b2:	4601      	mov	r1, r0
 80054b4:	4152      	adcs	r2, r2
 80054b6:	4610      	mov	r0, r2
 80054b8:	4770      	bx	lr
 80054ba:	e7ff      	b.n	80054bc <__udivsi3+0x100>
 80054bc:	b501      	push	{r0, lr}
 80054be:	2000      	movs	r0, #0
 80054c0:	f000 f806 	bl	80054d0 <__aeabi_idiv0>
 80054c4:	bd02      	pop	{r1, pc}
 80054c6:	46c0      	nop			; (mov r8, r8)

080054c8 <__aeabi_uidivmod>:
 80054c8:	2900      	cmp	r1, #0
 80054ca:	d0f7      	beq.n	80054bc <__udivsi3+0x100>
 80054cc:	e776      	b.n	80053bc <__udivsi3>
 80054ce:	4770      	bx	lr

080054d0 <__aeabi_idiv0>:
 80054d0:	4770      	bx	lr
 80054d2:	46c0      	nop			; (mov r8, r8)

080054d4 <_sbrk>:
 80054d4:	4a04      	ldr	r2, [pc, #16]	; (80054e8 <_sbrk+0x14>)
 80054d6:	0003      	movs	r3, r0
 80054d8:	6810      	ldr	r0, [r2, #0]
 80054da:	2800      	cmp	r0, #0
 80054dc:	d002      	beq.n	80054e4 <_sbrk+0x10>
 80054de:	18c3      	adds	r3, r0, r3
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	4770      	bx	lr
 80054e4:	4801      	ldr	r0, [pc, #4]	; (80054ec <_sbrk+0x18>)
 80054e6:	e7fa      	b.n	80054de <_sbrk+0xa>
 80054e8:	200003ac 	.word	0x200003ac
 80054ec:	200003c0 	.word	0x200003c0

080054f0 <__mem_flash_do_page_erase_veneer>:
 80054f0:	b401      	push	{r0}
 80054f2:	4802      	ldr	r0, [pc, #8]	; (80054fc <__mem_flash_do_page_erase_veneer+0xc>)
 80054f4:	4684      	mov	ip, r0
 80054f6:	bc01      	pop	{r0}
 80054f8:	4760      	bx	ip
 80054fa:	bf00      	nop
 80054fc:	20000005 	.word	0x20000005

08005500 <__mem_flash_do_write_half_page_veneer>:
 8005500:	b401      	push	{r0}
 8005502:	4802      	ldr	r0, [pc, #8]	; (800550c <__mem_flash_do_write_half_page_veneer+0xc>)
 8005504:	4684      	mov	ip, r0
 8005506:	bc01      	pop	{r0}
 8005508:	4760      	bx	ip
 800550a:	bf00      	nop
 800550c:	20000045 	.word	0x20000045
 8005510:	20627548 	.word	0x20627548
 8005514:	72617453 	.word	0x72617453
 8005518:	00000a74 	.word	0x00000a74
 800551c:	20627548 	.word	0x20627548
 8005520:	706f6f4c 	.word	0x706f6f4c
 8005524:	00000a0a 	.word	0x00000a0a
 8005528:	0a696d6e 	.word	0x0a696d6e
 800552c:	00000000 	.word	0x00000000
 8005530:	64726168 	.word	0x64726168
 8005534:	75616620 	.word	0x75616620
 8005538:	000a746c 	.word	0x000a746c
 800553c:	67756c50 	.word	0x67756c50
 8005540:	20646567 	.word	0x20646567
 8005544:	0a74754f 	.word	0x0a74754f
 8005548:	00000000 	.word	0x00000000
 800554c:	67756c50 	.word	0x67756c50
 8005550:	20646567 	.word	0x20646567
 8005554:	000a6e49 	.word	0x000a6e49
 8005558:	65736552 	.word	0x65736552
 800555c:	65532074 	.word	0x65532074
 8005560:	6e657571 	.word	0x6e657571
 8005564:	000a6563 	.word	0x000a6563
 8005568:	6f727245 	.word	0x6f727245
 800556c:	44412072 	.word	0x44412072
 8005570:	53492043 	.word	0x53492043
 8005574:	65442052 	.word	0x65442052
 8005578:	74756166 	.word	0x74756166
 800557c:	73614320 	.word	0x73614320
 8005580:	00000a65 	.word	0x00000a65
 8005584:	080041be 	.word	0x080041be
 8005588:	080041d8 	.word	0x080041d8
 800558c:	08004204 	.word	0x08004204
 8005590:	0800423c 	.word	0x0800423c
 8005594:	0800425c 	.word	0x0800425c
 8005598:	080047a0 	.word	0x080047a0
 800559c:	080047ae 	.word	0x080047ae
 80055a0:	080047ae 	.word	0x080047ae
 80055a4:	080047ae 	.word	0x080047ae
 80055a8:	080047ae 	.word	0x080047ae
 80055ac:	080047ae 	.word	0x080047ae
 80055b0:	080047ae 	.word	0x080047ae
 80055b4:	080047ae 	.word	0x080047ae
 80055b8:	080047ae 	.word	0x080047ae
 80055bc:	080047ae 	.word	0x080047ae
 80055c0:	080047ae 	.word	0x080047ae
 80055c4:	080047ae 	.word	0x080047ae
 80055c8:	080047ae 	.word	0x080047ae
 80055cc:	080047ae 	.word	0x080047ae
 80055d0:	080047ae 	.word	0x080047ae
 80055d4:	080047ae 	.word	0x080047ae
 80055d8:	080047ae 	.word	0x080047ae
 80055dc:	080047ae 	.word	0x080047ae
 80055e0:	080047ae 	.word	0x080047ae
 80055e4:	080047ae 	.word	0x080047ae
 80055e8:	080047ae 	.word	0x080047ae
 80055ec:	080047ae 	.word	0x080047ae
 80055f0:	080047ae 	.word	0x080047ae
 80055f4:	080047ae 	.word	0x080047ae
 80055f8:	080047ae 	.word	0x080047ae
 80055fc:	080047ae 	.word	0x080047ae
 8005600:	080047ae 	.word	0x080047ae
 8005604:	080047ae 	.word	0x080047ae
 8005608:	080047ae 	.word	0x080047ae
 800560c:	080047ae 	.word	0x080047ae
 8005610:	080047ae 	.word	0x080047ae
 8005614:	080047ae 	.word	0x080047ae
 8005618:	080047ae 	.word	0x080047ae
 800561c:	080047ae 	.word	0x080047ae
 8005620:	080047ae 	.word	0x080047ae
 8005624:	080047ae 	.word	0x080047ae
 8005628:	080047ae 	.word	0x080047ae
 800562c:	080047ae 	.word	0x080047ae
 8005630:	080047ae 	.word	0x080047ae
 8005634:	080047ae 	.word	0x080047ae
 8005638:	080047ae 	.word	0x080047ae
 800563c:	080047ae 	.word	0x080047ae
 8005640:	080047ae 	.word	0x080047ae
 8005644:	080047ae 	.word	0x080047ae
 8005648:	080047ae 	.word	0x080047ae
 800564c:	080047ae 	.word	0x080047ae
 8005650:	080047ae 	.word	0x080047ae
 8005654:	080047ae 	.word	0x080047ae
 8005658:	080047ae 	.word	0x080047ae
 800565c:	080047ae 	.word	0x080047ae
 8005660:	080047ae 	.word	0x080047ae
 8005664:	080046da 	.word	0x080046da
 8005668:	080047ae 	.word	0x080047ae
 800566c:	080047ae 	.word	0x080047ae
 8005670:	080047ae 	.word	0x080047ae
 8005674:	080047ae 	.word	0x080047ae
 8005678:	080047ae 	.word	0x080047ae
 800567c:	080047ae 	.word	0x080047ae
 8005680:	080047ae 	.word	0x080047ae
 8005684:	080047ae 	.word	0x080047ae
 8005688:	080047ae 	.word	0x080047ae
 800568c:	080046da 	.word	0x080046da
 8005690:	08004736 	.word	0x08004736
 8005694:	080046da 	.word	0x080046da
 8005698:	080047ae 	.word	0x080047ae
 800569c:	080047ae 	.word	0x080047ae
 80056a0:	080047ae 	.word	0x080047ae
 80056a4:	080047ae 	.word	0x080047ae
 80056a8:	080046da 	.word	0x080046da
 80056ac:	080047ae 	.word	0x080047ae
 80056b0:	080047ae 	.word	0x080047ae
 80056b4:	080047ae 	.word	0x080047ae
 80056b8:	080047ae 	.word	0x080047ae
 80056bc:	080047ae 	.word	0x080047ae
 80056c0:	080046da 	.word	0x080046da
 80056c4:	08004780 	.word	0x08004780
 80056c8:	080047ae 	.word	0x080047ae
 80056cc:	080047ae 	.word	0x080047ae
 80056d0:	0800474a 	.word	0x0800474a
 80056d4:	080047ae 	.word	0x080047ae
 80056d8:	080046da 	.word	0x080046da
 80056dc:	080047ae 	.word	0x080047ae
 80056e0:	080047ae 	.word	0x080047ae
 80056e4:	080046da 	.word	0x080046da
 80056e8:	204d4652 	.word	0x204d4652
 80056ec:	20495053 	.word	0x20495053
 80056f0:	74697257 	.word	0x74697257
 80056f4:	00000065 	.word	0x00000065
 80056f8:	74736554 	.word	0x74736554
 80056fc:	6d654d20 	.word	0x6d654d20
 8005700:	69725720 	.word	0x69725720
 8005704:	52206574 	.word	0x52206574
 8005708:	0a646165 	.word	0x0a646165
 800570c:	0000000a 	.word	0x0000000a
 8005710:	52504545 	.word	0x52504545
 8005714:	53204d4f 	.word	0x53204d4f
 8005718:	74726174 	.word	0x74726174
 800571c:	3025203a 	.word	0x3025203a
 8005720:	3a207838 	.word	0x3a207838
 8005724:	38302520 	.word	0x38302520
 8005728:	00000a78 	.word	0x00000a78
 800572c:	676f7250 	.word	0x676f7250
 8005730:	6d6d6172 	.word	0x6d6d6172
 8005734:	3a676e69 	.word	0x3a676e69
 8005738:	38302520 	.word	0x38302520
 800573c:	00000a78 	.word	0x00000a78
 8005740:	52504545 	.word	0x52504545
 8005744:	45204d4f 	.word	0x45204d4f
 8005748:	203a646e 	.word	0x203a646e
 800574c:	78383025 	.word	0x78383025
 8005750:	25203a20 	.word	0x25203a20
 8005754:	0a783830 	.word	0x0a783830
 8005758:	0000000a 	.word	0x0000000a
 800575c:	73616c46 	.word	0x73616c46
 8005760:	72452068 	.word	0x72452068
 8005764:	0a657361 	.word	0x0a657361
 8005768:	00000000 	.word	0x00000000
 800576c:	73616c46 	.word	0x73616c46
 8005770:	74532068 	.word	0x74532068
 8005774:	3a747261 	.word	0x3a747261
 8005778:	38302520 	.word	0x38302520
 800577c:	203a2078 	.word	0x203a2078
 8005780:	78383025 	.word	0x78383025
 8005784:	3830250a 	.word	0x3830250a
 8005788:	203a2078 	.word	0x203a2078
 800578c:	78383025 	.word	0x78383025
 8005790:	0000000a 	.word	0x0000000a
 8005794:	676f7250 	.word	0x676f7250
 8005798:	6d6d6172 	.word	0x6d6d6172
 800579c:	20676e69 	.word	0x20676e69
 80057a0:	78383025 	.word	0x78383025
 80057a4:	38302520 	.word	0x38302520
 80057a8:	00000a78 	.word	0x00000a78
 80057ac:	73616c46 	.word	0x73616c46
 80057b0:	6e452068 	.word	0x6e452068
 80057b4:	25203a64 	.word	0x25203a64
 80057b8:	20783830 	.word	0x20783830
 80057bc:	3025203a 	.word	0x3025203a
 80057c0:	250a7838 	.word	0x250a7838
 80057c4:	20783830 	.word	0x20783830
 80057c8:	3025203a 	.word	0x3025203a
 80057cc:	000a7838 	.word	0x000a7838
 80057d0:	656d6954 	.word	0x656d6954
 80057d4:	2074756f 	.word	0x2074756f
 80057d8:	25207325 	.word	0x25207325
 80057dc:	0a583830 	.word	0x0a583830
 80057e0:	00000000 	.word	0x00000000
 80057e4:	20435452 	.word	0x20435452
 80057e8:	0a525349 	.word	0x0a525349
 80057ec:	00000000 	.word	0x00000000

Disassembly of section .data:

20000000 <curr_address>:
20000000:	08080400                                ....

20000004 <mem_flash_do_page_erase>:
 * address: Page-aligned address to erase
 */
static _RAM bool mem_flash_do_page_erase(uint32_t address)
{
    //erase operation
    FLASH_PECR |= FLASH_PECR_ERASE | FLASH_PECR_PROG;
20000004:	4a0c      	ldr	r2, [pc, #48]	; (20000038 <mem_flash_do_page_erase+0x34>)
20000006:	6811      	ldr	r1, [r2, #0]
20000008:	2382      	movs	r3, #130	; 0x82
2000000a:	009b      	lsls	r3, r3, #2
2000000c:	430b      	orrs	r3, r1
2000000e:	6013      	str	r3, [r2, #0]
    MMIO32(address) = (uint32_t)0;
20000010:	2300      	movs	r3, #0
20000012:	6003      	str	r3, [r0, #0]
    //wait for completion
    while (FLASH_SR & FLASH_SR_BSY) { }
20000014:	4b09      	ldr	r3, [pc, #36]	; (2000003c <mem_flash_do_page_erase+0x38>)
20000016:	681b      	ldr	r3, [r3, #0]
20000018:	07db      	lsls	r3, r3, #31
2000001a:	d4fb      	bmi.n	20000014 <mem_flash_do_page_erase+0x10>
    if (FLASH_SR & FLASH_SR_EOP)
2000001c:	4b07      	ldr	r3, [pc, #28]	; (2000003c <mem_flash_do_page_erase+0x38>)
2000001e:	681b      	ldr	r3, [r3, #0]
20000020:	079b      	lsls	r3, r3, #30
20000022:	d504      	bpl.n	2000002e <mem_flash_do_page_erase+0x2a>
    {
        //completed without incident
        FLASH_SR = FLASH_SR_EOP;
20000024:	4b05      	ldr	r3, [pc, #20]	; (2000003c <mem_flash_do_page_erase+0x38>)
20000026:	2202      	movs	r2, #2
20000028:	601a      	str	r2, [r3, #0]
        return true;
2000002a:	2001      	movs	r0, #1
    {
        //there was an error
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
        return false;
    }
}
2000002c:	4770      	bx	lr
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
2000002e:	4b03      	ldr	r3, [pc, #12]	; (2000003c <mem_flash_do_page_erase+0x38>)
20000030:	4a03      	ldr	r2, [pc, #12]	; (20000040 <mem_flash_do_page_erase+0x3c>)
20000032:	601a      	str	r2, [r3, #0]
        return false;
20000034:	2000      	movs	r0, #0
20000036:	e7f9      	b.n	2000002c <mem_flash_do_page_erase+0x28>
20000038:	40022004 	.word	0x40022004
2000003c:	40022018 	.word	0x40022018
20000040:	00020300 	.word	0x00020300

20000044 <mem_flash_do_write_half_page>:
 *
 * address: Half-page aligned address to write
 * data: Array to 16 32-bit words to write
 */
static _RAM bool mem_flash_do_write_half_page(uint32_t address, uint32_t *data)
{
20000044:	b510      	push	{r4, lr}
    uint8_t i;

    //half-page program operation
    FLASH_PECR |= FLASH_PECR_PROG | FLASH_PECR_FPRG;
20000046:	4a10      	ldr	r2, [pc, #64]	; (20000088 <mem_flash_do_write_half_page+0x44>)
20000048:	6814      	ldr	r4, [r2, #0]
2000004a:	2381      	movs	r3, #129	; 0x81
2000004c:	00db      	lsls	r3, r3, #3
2000004e:	4323      	orrs	r3, r4
20000050:	6013      	str	r3, [r2, #0]
    for (i = 0; i < 16; i++)
20000052:	2300      	movs	r3, #0
20000054:	2b0f      	cmp	r3, #15
20000056:	d805      	bhi.n	20000064 <mem_flash_do_write_half_page+0x20>
    {
        MMIO32(address) = data[i]; //the actual address written is unimportant as these words will be queued
20000058:	009a      	lsls	r2, r3, #2
2000005a:	5852      	ldr	r2, [r2, r1]
2000005c:	6002      	str	r2, [r0, #0]
    for (i = 0; i < 16; i++)
2000005e:	3301      	adds	r3, #1
20000060:	b2db      	uxtb	r3, r3
20000062:	e7f7      	b.n	20000054 <mem_flash_do_write_half_page+0x10>
    }
    //wait for completion
    while (FLASH_SR & FLASH_SR_BSY) { }
20000064:	4b09      	ldr	r3, [pc, #36]	; (2000008c <mem_flash_do_write_half_page+0x48>)
20000066:	681b      	ldr	r3, [r3, #0]
20000068:	07db      	lsls	r3, r3, #31
2000006a:	d4fb      	bmi.n	20000064 <mem_flash_do_write_half_page+0x20>
    if (FLASH_SR & FLASH_SR_EOP)
2000006c:	4b07      	ldr	r3, [pc, #28]	; (2000008c <mem_flash_do_write_half_page+0x48>)
2000006e:	681b      	ldr	r3, [r3, #0]
20000070:	079b      	lsls	r3, r3, #30
20000072:	d504      	bpl.n	2000007e <mem_flash_do_write_half_page+0x3a>
    {
        //completed without incident
        FLASH_SR = FLASH_SR_EOP;
20000074:	4b05      	ldr	r3, [pc, #20]	; (2000008c <mem_flash_do_write_half_page+0x48>)
20000076:	2202      	movs	r2, #2
20000078:	601a      	str	r2, [r3, #0]
        return true;
2000007a:	2001      	movs	r0, #1
        //there was an error
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_NOTZEROERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
        return false;

    }
}
2000007c:	bd10      	pop	{r4, pc}
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_NOTZEROERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
2000007e:	4b03      	ldr	r3, [pc, #12]	; (2000008c <mem_flash_do_write_half_page+0x48>)
20000080:	4a03      	ldr	r2, [pc, #12]	; (20000090 <mem_flash_do_write_half_page+0x4c>)
20000082:	601a      	str	r2, [r3, #0]
        return false;
20000084:	2000      	movs	r0, #0
20000086:	e7f9      	b.n	2000007c <mem_flash_do_write_half_page+0x38>
20000088:	40022004 	.word	0x40022004
2000008c:	40022018 	.word	0x40022018
20000090:	00030300 	.word	0x00030300

20000094 <rcc_ahb_frequency>:
20000094:	001fff68                                h...

20000098 <rcc_apb1_frequency>:
20000098:	001fff68                                h...

2000009c <rcc_apb2_frequency>:
2000009c:	001fff68                                h...

200000a0 <_impure_ptr>:
200000a0:	200000a4                                ... 

200000a4 <impure_data>:
	...
