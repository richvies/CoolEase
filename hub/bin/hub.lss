
hub/bin/hub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003154  08004000  08004000  00000098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .preinit_array 00000000  08007154  08007154  0000332c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .init_array   00000000  08007154  08007154  0000332c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000000  08007154  08007154  0000332c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000140  20000000  08007154  000031ec  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  5 .bss          0000044c  20000140  08007294  0000332c  2**2
                  ALLOC
  6 ._user_heap_stack 00001004  2000058c  08007294  0000332c  2**0
                  ALLOC
  7 .ARM.attributes 0000002a  00000000  00000000  0000332c  2**0
                  CONTENTS, READONLY
  8 .debug_info   000193e7  00000000  00000000  00003356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00004556  00000000  00000000  0001c73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    000074a9  00000000  00000000  00020c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001288  00000000  00000000  0002813c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001398  00000000  00000000  000293c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00006f4b  00000000  00000000  0002a75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001003e  00000000  00000000  000316a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00023f16  00000000  00000000  000416e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      0000004c  00000000  00000000  000655fb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002cac  00000000  00000000  00065648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004000 <vector_table>:
 8004000:	00 20 00 20 b9 67 00 08 fd 44 00 08 0d 45 00 08     . . .g...D...E..
	...
 800402c:	b7 67 00 08 00 00 00 00 00 00 00 00 b7 67 00 08     .g...........g..
 800403c:	b7 67 00 08 b5 67 00 08 b5 67 00 08 25 51 00 08     .g...g...g..%Q..
 800404c:	b5 67 00 08 b5 67 00 08 b5 67 00 08 b5 67 00 08     .g...g...g...g..
 800405c:	3d 4d 00 08 b5 67 00 08 b5 67 00 08 b5 67 00 08     =M...g...g...g..
 800406c:	b5 67 00 08 55 45 00 08 b5 67 00 08 b5 67 00 08     .g..UE...g...g..
 800407c:	b5 67 00 08 b5 67 00 08 b5 67 00 08 b5 67 00 08     .g...g...g...g..
 800408c:	b5 67 00 08 b5 67 00 08 b5 67 00 08 b5 67 00 08     .g...g...g...g..
 800409c:	b5 67 00 08 b5 67 00 08 b5 67 00 08 b5 67 00 08     .g...g...g...g..
 80040ac:	b5 67 00 08 1d 45 00 08 b5 67 00 08 b5 67 00 08     .g...E...g...g..
 80040bc:	79 43 00 08                                         yC..

080040c0 <hid_control_request>:
                                                          void (**complete)(usbd_device *, struct usb_setup_data *))
{
    (void)complete;
    (void)dev;

    if ((req->bmRequestType != 0x81) ||
 80040c0:	7808      	ldrb	r0, [r1, #0]
 80040c2:	2881      	cmp	r0, #129	; 0x81
 80040c4:	d110      	bne.n	80040e8 <hid_control_request+0x28>
        (req->bRequest != USB_REQ_GET_DESCRIPTOR) ||
 80040c6:	7848      	ldrb	r0, [r1, #1]
    if ((req->bmRequestType != 0x81) ||
 80040c8:	2806      	cmp	r0, #6
 80040ca:	d10f      	bne.n	80040ec <hid_control_request+0x2c>
        (req->wValue != 0x2200))
 80040cc:	7888      	ldrb	r0, [r1, #2]
 80040ce:	78c9      	ldrb	r1, [r1, #3]
 80040d0:	0209      	lsls	r1, r1, #8
 80040d2:	4301      	orrs	r1, r0
        (req->bRequest != USB_REQ_GET_DESCRIPTOR) ||
 80040d4:	2088      	movs	r0, #136	; 0x88
 80040d6:	0180      	lsls	r0, r0, #6
 80040d8:	4281      	cmp	r1, r0
 80040da:	d109      	bne.n	80040f0 <hid_control_request+0x30>
        return USBD_REQ_NOTSUPP;

    //  Handle the HID report descriptor.
    *buf = (uint8_t *)hid_report_descriptor;
 80040dc:	4905      	ldr	r1, [pc, #20]	; (80040f4 <hid_control_request+0x34>)
 80040de:	6011      	str	r1, [r2, #0]
    *len = sizeof(hid_report_descriptor);
 80040e0:	2219      	movs	r2, #25
 80040e2:	801a      	strh	r2, [r3, #0]

    return USBD_REQ_HANDLED;
 80040e4:	2001      	movs	r0, #1
 80040e6:	e000      	b.n	80040ea <hid_control_request+0x2a>
        return USBD_REQ_NOTSUPP;
 80040e8:	2000      	movs	r0, #0
}
 80040ea:	4770      	bx	lr
        return USBD_REQ_NOTSUPP;
 80040ec:	2000      	movs	r0, #0
 80040ee:	e7fc      	b.n	80040ea <hid_control_request+0x2a>
 80040f0:	2000      	movs	r0, #0
 80040f2:	e7fa      	b.n	80040ea <hid_control_request+0x2a>
 80040f4:	08006ddc 	.word	0x08006ddc

080040f8 <hid_set_config>:
{
 80040f8:	b510      	push	{r4, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	0004      	movs	r4, r0
    usbd_ep_setup(dev, ENDPOINT_HID_IN, USB_ENDPOINT_ATTR_INTERRUPT, 64, hid_in_report_callback);
 80040fe:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <hid_set_config+0x3c>)
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	2340      	movs	r3, #64	; 0x40
 8004104:	2203      	movs	r2, #3
 8004106:	2181      	movs	r1, #129	; 0x81
 8004108:	f001 fb54 	bl	80057b4 <usbd_ep_setup>
    usbd_ep_setup(dev, ENDPOINT_HID_OUT, USB_ENDPOINT_ATTR_INTERRUPT, 64, hid_out_report_callback);
 800410c:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <hid_set_config+0x40>)
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	2340      	movs	r3, #64	; 0x40
 8004112:	2203      	movs	r2, #3
 8004114:	2101      	movs	r1, #1
 8004116:	0020      	movs	r0, r4
 8004118:	f001 fb4c 	bl	80057b4 <usbd_ep_setup>
    usbd_register_control_callback(
 800411c:	4b07      	ldr	r3, [pc, #28]	; (800413c <hid_set_config+0x44>)
 800411e:	227f      	movs	r2, #127	; 0x7f
 8004120:	2101      	movs	r1, #1
 8004122:	0020      	movs	r0, r4
 8004124:	f001 fc41 	bl	80059aa <usbd_register_control_callback>
    usb_state = CONNECTED;
 8004128:	4b05      	ldr	r3, [pc, #20]	; (8004140 <hid_set_config+0x48>)
 800412a:	2201      	movs	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
}
 800412e:	b002      	add	sp, #8
 8004130:	bd10      	pop	{r4, pc}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	08004199 	.word	0x08004199
 8004138:	08004145 	.word	0x08004145
 800413c:	080040c1 	.word	0x080040c1
 8004140:	20000142 	.word	0x20000142

08004144 <hid_out_report_callback>:
        }
    }
}

static void hid_out_report_callback(usbd_device *dev, uint8_t ea)
{
 8004144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004146:	b087      	sub	sp, #28
 8004148:	0005      	movs	r5, r0
 800414a:	000e      	movs	r6, r1
    // serial_printf("G");

    // Have to write a packet back here to begin IN transactions
    uint8_t buf[] = "Out Report Callback\n";
 800414c:	466a      	mov	r2, sp
 800414e:	4b0f      	ldr	r3, [pc, #60]	; (800418c <hid_out_report_callback+0x48>)
 8004150:	0014      	movs	r4, r2
 8004152:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004154:	c483      	stmia	r4!, {r0, r1, r7}
 8004156:	cb03      	ldmia	r3!, {r0, r1}
 8004158:	c403      	stmia	r4!, {r0, r1}
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	7023      	strb	r3, [r4, #0]
    usbd_ep_write_packet(dev, ea, buf, HID_REPORT_SIZE);
 800415e:	2340      	movs	r3, #64	; 0x40
 8004160:	0031      	movs	r1, r6
 8004162:	0028      	movs	r0, r5
 8004164:	f001 fb46 	bl	80057f4 <usbd_ep_write_packet>

    usbd_ep_read_packet(dev, ea, hid_report_buf, HID_REPORT_SIZE);
 8004168:	4c09      	ldr	r4, [pc, #36]	; (8004190 <hid_out_report_callback+0x4c>)
 800416a:	2340      	movs	r3, #64	; 0x40
 800416c:	0022      	movs	r2, r4
 800416e:	0031      	movs	r1, r6
 8004170:	0028      	movs	r0, r5
 8004172:	f001 fb46 	bl	8005802 <usbd_ep_read_packet>
    uint8_t command = hid_report_buf[0];
 8004176:	7823      	ldrb	r3, [r4, #0]

    // serial_printf("Out Report command: %i data: %s\n", command, &hid_report_buf[4]);

    // Get Log
    if (command == 1)
 8004178:	2b01      	cmp	r3, #1
 800417a:	d001      	beq.n	8004180 <hid_out_report_callback+0x3c>
    {
        usb_state = GET_LOG;
        log_read_reset();
    }
}
 800417c:	b007      	add	sp, #28
 800417e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        usb_state = GET_LOG;
 8004180:	4b04      	ldr	r3, [pc, #16]	; (8004194 <hid_out_report_callback+0x50>)
 8004182:	2202      	movs	r2, #2
 8004184:	701a      	strb	r2, [r3, #0]
        log_read_reset();
 8004186:	f000 fba5 	bl	80048d4 <log_read_reset>
}
 800418a:	e7f7      	b.n	800417c <hid_out_report_callback+0x38>
 800418c:	08006d10 	.word	0x08006d10
 8004190:	20000000 	.word	0x20000000
 8004194:	20000142 	.word	0x20000142

08004198 <hid_in_report_callback>:
{
 8004198:	b570      	push	{r4, r5, r6, lr}
 800419a:	0005      	movs	r5, r0
 800419c:	000e      	movs	r6, r1
    if (usb_state == GET_LOG)
 800419e:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <hid_in_report_callback+0x50>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d01d      	beq.n	80041e2 <hid_in_report_callback+0x4a>
}
 80041a6:	bd70      	pop	{r4, r5, r6, pc}
            hid_report_buf[i] = log_read();
 80041a8:	f000 fb78 	bl	800489c <log_read>
 80041ac:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <hid_in_report_callback+0x54>)
 80041ae:	5518      	strb	r0, [r3, r4]
        for (uint16_t i = 0; i < HID_REPORT_SIZE; i++)
 80041b0:	3401      	adds	r4, #1
 80041b2:	b2a4      	uxth	r4, r4
 80041b4:	2c3f      	cmp	r4, #63	; 0x3f
 80041b6:	d9f7      	bls.n	80041a8 <hid_in_report_callback+0x10>
        bytes_sent += HID_REPORT_SIZE;
 80041b8:	4c0d      	ldr	r4, [pc, #52]	; (80041f0 <hid_in_report_callback+0x58>)
 80041ba:	8823      	ldrh	r3, [r4, #0]
 80041bc:	3340      	adds	r3, #64	; 0x40
 80041be:	8023      	strh	r3, [r4, #0]
        usbd_ep_write_packet(dev, ea, hid_report_buf, HID_REPORT_SIZE);
 80041c0:	2340      	movs	r3, #64	; 0x40
 80041c2:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <hid_in_report_callback+0x54>)
 80041c4:	0031      	movs	r1, r6
 80041c6:	0028      	movs	r0, r5
 80041c8:	f001 fb14 	bl	80057f4 <usbd_ep_write_packet>
        if(bytes_sent >= log_size())
 80041cc:	f000 fb8c 	bl	80048e8 <log_size>
 80041d0:	8823      	ldrh	r3, [r4, #0]
 80041d2:	4298      	cmp	r0, r3
 80041d4:	d8e7      	bhi.n	80041a6 <hid_in_report_callback+0xe>
            usb_state = RESET;
 80041d6:	2300      	movs	r3, #0
 80041d8:	4a03      	ldr	r2, [pc, #12]	; (80041e8 <hid_in_report_callback+0x50>)
 80041da:	7013      	strb	r3, [r2, #0]
            bytes_sent = 0;
 80041dc:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <hid_in_report_callback+0x58>)
 80041de:	8013      	strh	r3, [r2, #0]
}
 80041e0:	e7e1      	b.n	80041a6 <hid_in_report_callback+0xe>
        for (uint16_t i = 0; i < HID_REPORT_SIZE; i++)
 80041e2:	2400      	movs	r4, #0
 80041e4:	e7e6      	b.n	80041b4 <hid_in_report_callback+0x1c>
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	20000142 	.word	0x20000142
 80041ec:	20000000 	.word	0x20000000
 80041f0:	20000140 	.word	0x20000140

080041f4 <cusb_clock_init>:
{
 80041f4:	b510      	push	{r4, lr}
    flash_set_ws(FLASH_ACR_LATENCY_0WS);
 80041f6:	2000      	movs	r0, #0
 80041f8:	f000 ffc4 	bl	8005184 <flash_set_ws>
    rcc_osc_on(RCC_HSI16);
 80041fc:	2003      	movs	r0, #3
 80041fe:	f001 f8cd 	bl	800539c <rcc_osc_on>
    rcc_wait_for_osc_ready(RCC_HSI16);
 8004202:	2003      	movs	r0, #3
 8004204:	f001 f94e 	bl	80054a4 <rcc_wait_for_osc_ready>
    rcc_set_sysclk_source(RCC_HSI16);
 8004208:	2003      	movs	r0, #3
 800420a:	f001 f95d 	bl	80054c8 <rcc_set_sysclk_source>
    RCC_CFGR |= RCC_CFGR_STOPWUCK_HSI16;
 800420e:	4a1f      	ldr	r2, [pc, #124]	; (800428c <cusb_clock_init+0x98>)
 8004210:	6811      	ldr	r1, [r2, #0]
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	430b      	orrs	r3, r1
 8004218:	6013      	str	r3, [r2, #0]
    rcc_set_hpre(RCC_CFGR_HPRE_NODIV);   //  AHB -> 16Mhz
 800421a:	2000      	movs	r0, #0
 800421c:	f001 f992 	bl	8005544 <rcc_set_hpre>
    rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV); //  APB1 ->16Mhz
 8004220:	2000      	movs	r0, #0
 8004222:	f001 f977 	bl	8005514 <rcc_set_ppre1>
    rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV); //  APB2 ->16Mhz
 8004226:	2000      	movs	r0, #0
 8004228:	f001 f980 	bl	800552c <rcc_set_ppre2>
    rcc_ahb_frequency = 16000000;
 800422c:	4b18      	ldr	r3, [pc, #96]	; (8004290 <cusb_clock_init+0x9c>)
 800422e:	4a19      	ldr	r2, [pc, #100]	; (8004294 <cusb_clock_init+0xa0>)
 8004230:	6013      	str	r3, [r2, #0]
    rcc_apb1_frequency = 16000000;
 8004232:	4a19      	ldr	r2, [pc, #100]	; (8004298 <cusb_clock_init+0xa4>)
 8004234:	6013      	str	r3, [r2, #0]
    rcc_apb2_frequency = 16000000;
 8004236:	4a19      	ldr	r2, [pc, #100]	; (800429c <cusb_clock_init+0xa8>)
 8004238:	6013      	str	r3, [r2, #0]
    rcc_periph_clock_enable(RCC_SYSCFG);
 800423a:	20d0      	movs	r0, #208	; 0xd0
 800423c:	00c0      	lsls	r0, r0, #3
 800423e:	f001 f9c1 	bl	80055c4 <rcc_periph_clock_enable>
    SYSCFG_CFGR3 |= 0x01;
 8004242:	4a17      	ldr	r2, [pc, #92]	; (80042a0 <cusb_clock_init+0xac>)
 8004244:	6813      	ldr	r3, [r2, #0]
 8004246:	2101      	movs	r1, #1
 8004248:	430b      	orrs	r3, r1
 800424a:	6013      	str	r3, [r2, #0]
    while (!(SYSCFG_CFGR3 & SYSCFG_CFGR3_VREFINT_RDYF))
 800424c:	4b14      	ldr	r3, [pc, #80]	; (80042a0 <cusb_clock_init+0xac>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	d5fb      	bpl.n	800424c <cusb_clock_init+0x58>
    SYSCFG_CFGR3 |= SYSCFG_CFGR3_ENREF_HSI48;
 8004254:	4a12      	ldr	r2, [pc, #72]	; (80042a0 <cusb_clock_init+0xac>)
 8004256:	6811      	ldr	r1, [r2, #0]
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	019b      	lsls	r3, r3, #6
 800425c:	430b      	orrs	r3, r1
 800425e:	6013      	str	r3, [r2, #0]
    while (!(SYSCFG_CFGR3 & SYSCFG_CFGR3_REF_HSI48_RDYF))
 8004260:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <cusb_clock_init+0xac>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	015b      	lsls	r3, r3, #5
 8004266:	d5fb      	bpl.n	8004260 <cusb_clock_init+0x6c>
    rcc_osc_on(RCC_HSI48);
 8004268:	2002      	movs	r0, #2
 800426a:	f001 f897 	bl	800539c <rcc_osc_on>
    rcc_wait_for_osc_ready(RCC_HSI48);
 800426e:	2002      	movs	r0, #2
 8004270:	f001 f918 	bl	80054a4 <rcc_wait_for_osc_ready>
    rcc_periph_clock_enable(RCC_USB);
 8004274:	480b      	ldr	r0, [pc, #44]	; (80042a4 <cusb_clock_init+0xb0>)
 8004276:	f001 f9a5 	bl	80055c4 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_CRS);
 800427a:	480b      	ldr	r0, [pc, #44]	; (80042a8 <cusb_clock_init+0xb4>)
 800427c:	f001 f9a2 	bl	80055c4 <rcc_periph_clock_enable>
    rcc_set_hsi48_source_rc48();
 8004280:	f001 f918 	bl	80054b4 <rcc_set_hsi48_source_rc48>
    rcc_osc_off(RCC_MSI);
 8004284:	2004      	movs	r0, #4
 8004286:	f001 f8b3 	bl	80053f0 <rcc_osc_off>
}
 800428a:	bd10      	pop	{r4, pc}
 800428c:	4002100c 	.word	0x4002100c
 8004290:	00f42400 	.word	0x00f42400
 8004294:	200000d0 	.word	0x200000d0
 8004298:	200000d4 	.word	0x200000d4
 800429c:	200000d8 	.word	0x200000d8
 80042a0:	40010020 	.word	0x40010020
 80042a4:	00000717 	.word	0x00000717
 80042a8:	0000071b 	.word	0x0000071b

080042ac <cusb_init>:
{
 80042ac:	b510      	push	{r4, lr}
 80042ae:	b084      	sub	sp, #16
    cusb_clock_init();
 80042b0:	f7ff ffa0 	bl	80041f4 <cusb_clock_init>
    usb_state = RESET;
 80042b4:	2300      	movs	r3, #0
 80042b6:	4a13      	ldr	r2, [pc, #76]	; (8004304 <cusb_init+0x58>)
 80042b8:	7013      	strb	r3, [r2, #0]
    SET_REG(USB_CNTR_REG, USB_CNTR_FRES);
 80042ba:	4a13      	ldr	r2, [pc, #76]	; (8004308 <cusb_init+0x5c>)
 80042bc:	2101      	movs	r1, #1
 80042be:	6011      	str	r1, [r2, #0]
    SET_REG(USB_CNTR_REG, 0);
 80042c0:	6013      	str	r3, [r2, #0]
    SET_REG(USB_ISTR_REG, 0);
 80042c2:	4a12      	ldr	r2, [pc, #72]	; (800430c <cusb_init+0x60>)
 80042c4:	6013      	str	r3, [r2, #0]
    usbd_dev = usbd_init(&st_usbfs_v2_usb_driver, &dev_desc, &cfg_desc, usb_strings, sizeof(usb_strings) / sizeof(const char *), usbd_control_buffer, sizeof(usbd_control_buffer));
 80042c6:	3380      	adds	r3, #128	; 0x80
 80042c8:	9302      	str	r3, [sp, #8]
 80042ca:	4b11      	ldr	r3, [pc, #68]	; (8004310 <cusb_init+0x64>)
 80042cc:	9301      	str	r3, [sp, #4]
 80042ce:	2304      	movs	r3, #4
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	4b10      	ldr	r3, [pc, #64]	; (8004314 <cusb_init+0x68>)
 80042d4:	4a10      	ldr	r2, [pc, #64]	; (8004318 <cusb_init+0x6c>)
 80042d6:	4911      	ldr	r1, [pc, #68]	; (800431c <cusb_init+0x70>)
 80042d8:	4811      	ldr	r0, [pc, #68]	; (8004320 <cusb_init+0x74>)
 80042da:	f001 fa3f 	bl	800575c <usbd_init>
 80042de:	4c11      	ldr	r4, [pc, #68]	; (8004324 <cusb_init+0x78>)
 80042e0:	6020      	str	r0, [r4, #0]
    usbd_register_reset_callback(usbd_dev, cusb_reset_callback);
 80042e2:	4911      	ldr	r1, [pc, #68]	; (8004328 <cusb_init+0x7c>)
 80042e4:	f001 fa64 	bl	80057b0 <usbd_register_reset_callback>
    usbd_register_set_config_callback(usbd_dev, hid_set_config);
 80042e8:	6820      	ldr	r0, [r4, #0]
 80042ea:	4910      	ldr	r1, [pc, #64]	; (800432c <cusb_init+0x80>)
 80042ec:	f001 fef2 	bl	80060d4 <usbd_register_set_config_callback>
    nvic_enable_irq(NVIC_USB_IRQ);
 80042f0:	201f      	movs	r0, #31
 80042f2:	f002 faa5 	bl	8006840 <nvic_enable_irq>
    nvic_set_priority(NVIC_USB_IRQ, 0);
 80042f6:	2100      	movs	r1, #0
 80042f8:	201f      	movs	r0, #31
 80042fa:	f002 faad 	bl	8006858 <nvic_set_priority>
}
 80042fe:	b004      	add	sp, #16
 8004300:	bd10      	pop	{r4, pc}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	20000142 	.word	0x20000142
 8004308:	40005c40 	.word	0x40005c40
 800430c:	40005c44 	.word	0x40005c44
 8004310:	20000144 	.word	0x20000144
 8004314:	08006e08 	.word	0x08006e08
 8004318:	08006d74 	.word	0x08006d74
 800431c:	08006d84 	.word	0x08006d84
 8004320:	08007120 	.word	0x08007120
 8004324:	200001c4 	.word	0x200001c4
 8004328:	08004365 	.word	0x08004365
 800432c:	080040f9 	.word	0x080040f9

08004330 <cusb_send>:
{
 8004330:	b500      	push	{lr}
 8004332:	b083      	sub	sp, #12
 8004334:	466b      	mov	r3, sp
 8004336:	71d8      	strb	r0, [r3, #7]
    if(usb_state == CONNECTED)
 8004338:	4b07      	ldr	r3, [pc, #28]	; (8004358 <cusb_send+0x28>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d001      	beq.n	8004344 <cusb_send+0x14>
}
 8004340:	b003      	add	sp, #12
 8004342:	bd00      	pop	{pc}
        usbd_ep_write_packet(usbd_dev, ENDPOINT_HID_IN, &character, 1);
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <cusb_send+0x2c>)
 8004346:	6818      	ldr	r0, [r3, #0]
 8004348:	2301      	movs	r3, #1
 800434a:	466a      	mov	r2, sp
 800434c:	3207      	adds	r2, #7
 800434e:	2181      	movs	r1, #129	; 0x81
 8004350:	f001 fa50 	bl	80057f4 <usbd_ep_write_packet>
}
 8004354:	e7f4      	b.n	8004340 <cusb_send+0x10>
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	20000142 	.word	0x20000142
 800435c:	200001c4 	.word	0x200001c4

08004360 <cusb_hook_reset>:

/*////////////////////////////////////////////////////////////////////////////*/
// Hook Function Weak Definitions
/*////////////////////////////////////////////////////////////////////////////*/

void __attribute__ ((weak)) cusb_hook_reset(void) {}
 8004360:	4770      	bx	lr
	...

08004364 <cusb_reset_callback>:
{
 8004364:	b510      	push	{r4, lr}
    usb_state = RESET;
 8004366:	4b03      	ldr	r3, [pc, #12]	; (8004374 <cusb_reset_callback+0x10>)
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
    cusb_hook_reset();
 800436c:	f7ff fff8 	bl	8004360 <cusb_hook_reset>
}
 8004370:	bd10      	pop	{r4, pc}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	20000142 	.word	0x20000142

08004378 <usb_isr>:
/*////////////////////////////////////////////////////////////////////////////*/
// USB Interrupt
/*////////////////////////////////////////////////////////////////////////////*/

void usb_isr(void)
{
 8004378:	b570      	push	{r4, r5, r6, lr}
    // This print is definitley not the problem with hidapi write failing
    // serial_printf("I");

    uint16_t istr = *USB_ISTR_REG;
 800437a:	4b42      	ldr	r3, [pc, #264]	; (8004484 <usb_isr+0x10c>)
 800437c:	681b      	ldr	r3, [r3, #0]

    if (istr & USB_ISTR_RESET)
 800437e:	041a      	lsls	r2, r3, #16
 8004380:	0c15      	lsrs	r5, r2, #16
 8004382:	0152      	lsls	r2, r2, #5
 8004384:	d42e      	bmi.n	80043e4 <usb_isr+0x6c>
        usbd_dev->pm_top = USBD_PM_TOP;
        _usbd_reset(usbd_dev);
        return;
    }

    if (istr & USB_ISTR_CTR)
 8004386:	041a      	lsls	r2, r3, #16
 8004388:	d436      	bmi.n	80043f8 <usb_isr+0x80>
        {
            USB_CLR_EP_RX_CTR(ep);
        }
    }

    if (istr & USB_ISTR_SUSP)
 800438a:	052b      	lsls	r3, r5, #20
 800438c:	d508      	bpl.n	80043a0 <usb_isr+0x28>
    {
        USB_CLR_ISTR_SUSP();
 800438e:	4b3d      	ldr	r3, [pc, #244]	; (8004484 <usb_isr+0x10c>)
 8004390:	4a3d      	ldr	r2, [pc, #244]	; (8004488 <usb_isr+0x110>)
 8004392:	601a      	str	r2, [r3, #0]
        if (usbd_dev->user_callback_suspend)
 8004394:	4b3d      	ldr	r3, [pc, #244]	; (800448c <usb_isr+0x114>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d000      	beq.n	80043a0 <usb_isr+0x28>
        {
            usbd_dev->user_callback_suspend();
 800439e:	4798      	blx	r3
        }
    }

    if (istr & USB_ISTR_WKUP)
 80043a0:	04eb      	lsls	r3, r5, #19
 80043a2:	d508      	bpl.n	80043b6 <usb_isr+0x3e>
    {
        USB_CLR_ISTR_WKUP();
 80043a4:	4b37      	ldr	r3, [pc, #220]	; (8004484 <usb_isr+0x10c>)
 80043a6:	4a3a      	ldr	r2, [pc, #232]	; (8004490 <usb_isr+0x118>)
 80043a8:	601a      	str	r2, [r3, #0]
        if (usbd_dev->user_callback_resume)
 80043aa:	4b38      	ldr	r3, [pc, #224]	; (800448c <usb_isr+0x114>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d000      	beq.n	80043b6 <usb_isr+0x3e>
        {
            usbd_dev->user_callback_resume();
 80043b4:	4798      	blx	r3
        }
    }

    if (istr & USB_ISTR_SOF)
 80043b6:	05ab      	lsls	r3, r5, #22
 80043b8:	d508      	bpl.n	80043cc <usb_isr+0x54>
    {
        USB_CLR_ISTR_SOF();
 80043ba:	4b32      	ldr	r3, [pc, #200]	; (8004484 <usb_isr+0x10c>)
 80043bc:	4a35      	ldr	r2, [pc, #212]	; (8004494 <usb_isr+0x11c>)
 80043be:	601a      	str	r2, [r3, #0]
        if (usbd_dev->user_callback_sof)
 80043c0:	4b32      	ldr	r3, [pc, #200]	; (800448c <usb_isr+0x114>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d000      	beq.n	80043cc <usb_isr+0x54>
        {
            usbd_dev->user_callback_sof();
 80043ca:	4798      	blx	r3
        }
    }

    if (usbd_dev->user_callback_sof)
 80043cc:	4b2f      	ldr	r3, [pc, #188]	; (800448c <usb_isr+0x114>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d04f      	beq.n	8004476 <usb_isr+0xfe>
    {
        *USB_CNTR_REG |= USB_CNTR_SOFM;
 80043d6:	4a30      	ldr	r2, [pc, #192]	; (8004498 <usb_isr+0x120>)
 80043d8:	6811      	ldr	r1, [r2, #0]
 80043da:	2380      	movs	r3, #128	; 0x80
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	430b      	orrs	r3, r1
 80043e0:	6013      	str	r3, [r2, #0]
    }
    else
    {
        *USB_CNTR_REG &= ~USB_CNTR_SOFM;
    }
}
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
        USB_CLR_ISTR_RESET();
 80043e4:	4b27      	ldr	r3, [pc, #156]	; (8004484 <usb_isr+0x10c>)
 80043e6:	4a2d      	ldr	r2, [pc, #180]	; (800449c <usb_isr+0x124>)
 80043e8:	601a      	str	r2, [r3, #0]
        usbd_dev->pm_top = USBD_PM_TOP;
 80043ea:	4b28      	ldr	r3, [pc, #160]	; (800448c <usb_isr+0x114>)
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	2340      	movs	r3, #64	; 0x40
 80043f0:	8303      	strh	r3, [r0, #24]
        _usbd_reset(usbd_dev);
 80043f2:	f001 f9e8 	bl	80057c6 <_usbd_reset>
        return;
 80043f6:	e7f4      	b.n	80043e2 <usb_isr+0x6a>
        uint8_t ep = istr & USB_ISTR_EP_ID;
 80043f8:	240f      	movs	r4, #15
 80043fa:	401c      	ands	r4, r3
        if (istr & USB_ISTR_DIR)
 80043fc:	06eb      	lsls	r3, r5, #27
 80043fe:	d512      	bpl.n	8004426 <usb_isr+0xae>
            if (*USB_EP_REG(ep) & USB_EP_SETUP)
 8004400:	00a3      	lsls	r3, r4, #2
 8004402:	4a27      	ldr	r2, [pc, #156]	; (80044a0 <usb_isr+0x128>)
 8004404:	4694      	mov	ip, r2
 8004406:	4463      	add	r3, ip
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	051b      	lsls	r3, r3, #20
 800440c:	d401      	bmi.n	8004412 <usb_isr+0x9a>
                type = USB_TRANSACTION_OUT;
 800440e:	2101      	movs	r1, #1
 8004410:	e016      	b.n	8004440 <usb_isr+0xc8>
                st_usbfs_ep_read_packet(usbd_dev, ep, &usbd_dev->control_state.req, 8);
 8004412:	4b1e      	ldr	r3, [pc, #120]	; (800448c <usb_isr+0x114>)
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	0002      	movs	r2, r0
 8004418:	3230      	adds	r2, #48	; 0x30
 800441a:	2308      	movs	r3, #8
 800441c:	0021      	movs	r1, r4
 800441e:	f002 f88f 	bl	8006540 <st_usbfs_ep_read_packet>
                type = USB_TRANSACTION_SETUP;
 8004422:	2102      	movs	r1, #2
 8004424:	e00c      	b.n	8004440 <usb_isr+0xc8>
            USB_CLR_EP_TX_CTR(ep);
 8004426:	00a1      	lsls	r1, r4, #2
 8004428:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <usb_isr+0x128>)
 800442a:	469c      	mov	ip, r3
 800442c:	4461      	add	r1, ip
 800442e:	680b      	ldr	r3, [r1, #0]
 8004430:	b21b      	sxth	r3, r3
 8004432:	4a1c      	ldr	r2, [pc, #112]	; (80044a4 <usb_isr+0x12c>)
 8004434:	401a      	ands	r2, r3
 8004436:	4b1c      	ldr	r3, [pc, #112]	; (80044a8 <usb_isr+0x130>)
 8004438:	4313      	orrs	r3, r2
 800443a:	b29b      	uxth	r3, r3
 800443c:	600b      	str	r3, [r1, #0]
            type = USB_TRANSACTION_IN;
 800443e:	2100      	movs	r1, #0
        if (usbd_dev->user_callback_ctr[ep][type])
 8004440:	4a12      	ldr	r2, [pc, #72]	; (800448c <usb_isr+0x114>)
 8004442:	6810      	ldr	r0, [r2, #0]
 8004444:	0063      	lsls	r3, r4, #1
 8004446:	191b      	adds	r3, r3, r4
 8004448:	185b      	adds	r3, r3, r1
 800444a:	331a      	adds	r3, #26
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	581b      	ldr	r3, [r3, r0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <usb_isr+0xe2>
            usbd_dev->user_callback_ctr[ep][type](usbd_dev, ep);
 8004454:	0021      	movs	r1, r4
 8004456:	4798      	blx	r3
 8004458:	e797      	b.n	800438a <usb_isr+0x12>
            USB_CLR_EP_RX_CTR(ep);
 800445a:	00a3      	lsls	r3, r4, #2
 800445c:	4a10      	ldr	r2, [pc, #64]	; (80044a0 <usb_isr+0x128>)
 800445e:	4694      	mov	ip, r2
 8004460:	4463      	add	r3, ip
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	b212      	sxth	r2, r2
 8004466:	490f      	ldr	r1, [pc, #60]	; (80044a4 <usb_isr+0x12c>)
 8004468:	400a      	ands	r2, r1
 800446a:	2180      	movs	r1, #128	; 0x80
 800446c:	430a      	orrs	r2, r1
 800446e:	b212      	sxth	r2, r2
 8004470:	b292      	uxth	r2, r2
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	e789      	b.n	800438a <usb_isr+0x12>
        *USB_CNTR_REG &= ~USB_CNTR_SOFM;
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <usb_isr+0x120>)
 8004478:	6813      	ldr	r3, [r2, #0]
 800447a:	490c      	ldr	r1, [pc, #48]	; (80044ac <usb_isr+0x134>)
 800447c:	400b      	ands	r3, r1
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	e7af      	b.n	80043e2 <usb_isr+0x6a>
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	40005c44 	.word	0x40005c44
 8004488:	0000f7ff 	.word	0x0000f7ff
 800448c:	200001c4 	.word	0x200001c4
 8004490:	0000efff 	.word	0x0000efff
 8004494:	0000fdff 	.word	0x0000fdff
 8004498:	40005c40 	.word	0x40005c40
 800449c:	0000fbff 	.word	0x0000fbff
 80044a0:	40005c00 	.word	0x40005c00
 80044a4:	00000f0f 	.word	0x00000f0f
 80044a8:	ffff8000 	.word	0xffff8000
 80044ac:	fffffdff 	.word	0xfffffdff

080044b0 <main>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

int main(void)
{
 80044b0:	b510      	push	{r4, lr}
	log_init();
 80044b2:	f000 f995 	bl	80047e0 <log_init>
	timers_lptim_init();
 80044b6:	f000 fd15 	bl	8004ee4 <timers_lptim_init>
	timers_tim6_init();
 80044ba:	f000 fd59 	bl	8004f70 <timers_tim6_init>
	// mem_init();
	// aes_init();
	// batt_init();

	#ifdef DEBUG
	for(int i = 0; i < 100000; i++){__asm__("nop");};
 80044be:	2300      	movs	r3, #0
 80044c0:	e001      	b.n	80044c6 <main+0x16>
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	3301      	adds	r3, #1
 80044c6:	4a0a      	ldr	r2, [pc, #40]	; (80044f0 <main+0x40>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	ddfa      	ble.n	80044c2 <main+0x12>
	#endif

	log_printf("Hub Start\n");
 80044cc:	4809      	ldr	r0, [pc, #36]	; (80044f4 <main+0x44>)
 80044ce:	f000 f9ad 	bl	800482c <log_printf>
	flash_led(100, 5);
 80044d2:	2105      	movs	r1, #5
 80044d4:	2064      	movs	r0, #100	; 0x64
 80044d6:	f000 fcd5 	bl	8004e84 <flash_led>

	test_mem_write_read();
 80044da:	f000 fc75 	bl	8004dc8 <test_mem_write_read>
	(void)test_hub2;


	for (;;)
	{
		log_printf("Hub Loop\n\n");
 80044de:	4806      	ldr	r0, [pc, #24]	; (80044f8 <main+0x48>)
 80044e0:	f000 f9a4 	bl	800482c <log_printf>
		timers_delay_milliseconds(1000);
 80044e4:	20fa      	movs	r0, #250	; 0xfa
 80044e6:	0080      	lsls	r0, r0, #2
 80044e8:	f000 fd58 	bl	8004f9c <timers_delay_milliseconds>
	for (;;)
 80044ec:	e7f7      	b.n	80044de <main+0x2e>
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	0001869f 	.word	0x0001869f
 80044f4:	08006e18 	.word	0x08006e18
 80044f8:	08006e24 	.word	0x08006e24

080044fc <nmi_handler>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void nmi_handler(void)
{
 80044fc:	b510      	push	{r4, lr}
  log_printf("nmi\n");
 80044fe:	4802      	ldr	r0, [pc, #8]	; (8004508 <nmi_handler+0xc>)
 8004500:	f000 f994 	bl	800482c <log_printf>
	while(1)
 8004504:	e7fe      	b.n	8004504 <nmi_handler+0x8>
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	08006e30 	.word	0x08006e30

0800450c <hard_fault_handler>:
		
	}
}

void hard_fault_handler(void)
{
 800450c:	b510      	push	{r4, lr}
  log_printf("hard fault\n");
 800450e:	4802      	ldr	r0, [pc, #8]	; (8004518 <hard_fault_handler+0xc>)
 8004510:	f000 f98c 	bl	800482c <log_printf>
	while(1)
 8004514:	e7fe      	b.n	8004514 <hard_fault_handler+0x8>
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	08006e38 	.word	0x08006e38

0800451c <usart2_isr>:
}


// Interrupt routines
void usart2_isr(void)
{
 800451c:	b510      	push	{r4, lr}
	usart_send(SPF_USART, usart_recv(SIM_USART));
 800451e:	4c09      	ldr	r4, [pc, #36]	; (8004544 <usart2_isr+0x28>)
 8004520:	0020      	movs	r0, r4
 8004522:	f001 f90b 	bl	800573c <usart_recv>
 8004526:	0001      	movs	r1, r0
 8004528:	4807      	ldr	r0, [pc, #28]	; (8004548 <usart2_isr+0x2c>)
 800452a:	f001 f903 	bl	8005734 <usart_send>

	sim_rx_buf[sim_rx_head++] = usart_recv(SIM_USART);
 800452e:	0020      	movs	r0, r4
 8004530:	f001 f904 	bl	800573c <usart_recv>
 8004534:	4a05      	ldr	r2, [pc, #20]	; (800454c <usart2_isr+0x30>)
 8004536:	7813      	ldrb	r3, [r2, #0]
 8004538:	1c59      	adds	r1, r3, #1
 800453a:	7011      	strb	r1, [r2, #0]
 800453c:	4a04      	ldr	r2, [pc, #16]	; (8004550 <usart2_isr+0x34>)
 800453e:	54d0      	strb	r0, [r2, r3]
}
 8004540:	bd10      	pop	{r4, pc}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	40004400 	.word	0x40004400
 8004548:	40013800 	.word	0x40013800
 800454c:	200002c8 	.word	0x200002c8
 8004550:	200001c8 	.word	0x200001c8

08004554 <adc_comp_isr>:

// ISRs
#ifdef _HUB
// For use with ADC1
void adc_comp_isr(void)
{
 8004554:	b570      	push	{r4, r5, r6, lr}
    // Takes about 150us to run

    // log_printf("ADC ISR %08X\n", ADC_ISR(ADC1));

    // Calculate batt_voltages
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8004556:	2400      	movs	r4, #0
 8004558:	e014      	b.n	8004584 <adc_comp_isr+0x30>
        batt_voltages[i] = ( (uint32_t)300 * ST_VREFINT_CAL * adc_vals[i + 1] ) / ( adc_vals[0] * 4095 ); }
 800455a:	4b4f      	ldr	r3, [pc, #316]	; (8004698 <adc_comp_isr+0x144>)
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	1c65      	adds	r5, r4, #1
 8004560:	4a4e      	ldr	r2, [pc, #312]	; (800469c <adc_comp_isr+0x148>)
 8004562:	0069      	lsls	r1, r5, #1
 8004564:	5a88      	ldrh	r0, [r1, r2]
 8004566:	4343      	muls	r3, r0
 8004568:	0098      	lsls	r0, r3, #2
 800456a:	18c3      	adds	r3, r0, r3
 800456c:	0118      	lsls	r0, r3, #4
 800456e:	1ac0      	subs	r0, r0, r3
 8004570:	0080      	lsls	r0, r0, #2
 8004572:	8813      	ldrh	r3, [r2, #0]
 8004574:	0319      	lsls	r1, r3, #12
 8004576:	1ac9      	subs	r1, r1, r3
 8004578:	f002 fa34 	bl	80069e4 <__udivsi3>
 800457c:	0064      	lsls	r4, r4, #1
 800457e:	4b48      	ldr	r3, [pc, #288]	; (80046a0 <adc_comp_isr+0x14c>)
 8004580:	5318      	strh	r0, [r3, r4]
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8004582:	b2ec      	uxtb	r4, r5
 8004584:	2c01      	cmp	r4, #1
 8004586:	d9e8      	bls.n	800455a <adc_comp_isr+0x6>

    // For Hub : Measured voltage is half of actual
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8004588:	2300      	movs	r3, #0
 800458a:	e006      	b.n	800459a <adc_comp_isr+0x46>
        batt_voltages[i] = batt_voltages[i] * 2; }
 800458c:	4944      	ldr	r1, [pc, #272]	; (80046a0 <adc_comp_isr+0x14c>)
 800458e:	0058      	lsls	r0, r3, #1
 8004590:	5a42      	ldrh	r2, [r0, r1]
 8004592:	0052      	lsls	r2, r2, #1
 8004594:	5242      	strh	r2, [r0, r1]
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8004596:	3301      	adds	r3, #1
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b01      	cmp	r3, #1
 800459c:	d9f6      	bls.n	800458c <adc_comp_isr+0x38>

    static uint16_t timer = 0;
    static uint8_t state = 0;
    switch(state)
 800459e:	4b41      	ldr	r3, [pc, #260]	; (80046a4 <adc_comp_isr+0x150>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d86e      	bhi.n	8004684 <adc_comp_isr+0x130>
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4a3f      	ldr	r2, [pc, #252]	; (80046a8 <adc_comp_isr+0x154>)
 80045aa:	58d3      	ldr	r3, [r2, r3]
 80045ac:	469f      	mov	pc, r3
    {
        case 0:
            plugged_in = true;
            timer = timers_millis();
 80045ae:	f000 fd0b 	bl	8004fc8 <timers_millis>
 80045b2:	4b3e      	ldr	r3, [pc, #248]	; (80046ac <adc_comp_isr+0x158>)
 80045b4:	8018      	strh	r0, [r3, #0]
            if(batt_voltages[PWR_VOLTAGE] < batt_voltages[BATT_VOLTAGE])
 80045b6:	4b3a      	ldr	r3, [pc, #232]	; (80046a0 <adc_comp_isr+0x14c>)
 80045b8:	881a      	ldrh	r2, [r3, #0]
 80045ba:	885b      	ldrh	r3, [r3, #2]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d264      	bcs.n	800468a <adc_comp_isr+0x136>
                state = 1;
 80045c0:	4b38      	ldr	r3, [pc, #224]	; (80046a4 <adc_comp_isr+0x150>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	e060      	b.n	800468a <adc_comp_isr+0x136>
            break;

        case 1:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE])
 80045c8:	4b35      	ldr	r3, [pc, #212]	; (80046a0 <adc_comp_isr+0x14c>)
 80045ca:	881a      	ldrh	r2, [r3, #0]
 80045cc:	885b      	ldrh	r3, [r3, #2]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d903      	bls.n	80045da <adc_comp_isr+0x86>
                state = 0;
 80045d2:	4b34      	ldr	r3, [pc, #208]	; (80046a4 <adc_comp_isr+0x150>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	e057      	b.n	800468a <adc_comp_isr+0x136>
            else if(timers_millis() - timer > 1000)
 80045da:	f000 fcf5 	bl	8004fc8 <timers_millis>
 80045de:	4b33      	ldr	r3, [pc, #204]	; (80046ac <adc_comp_isr+0x158>)
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	1ac0      	subs	r0, r0, r3
 80045e4:	23fa      	movs	r3, #250	; 0xfa
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4298      	cmp	r0, r3
 80045ea:	dd4e      	ble.n	800468a <adc_comp_isr+0x136>
                state = 2;
 80045ec:	4b2d      	ldr	r3, [pc, #180]	; (80046a4 <adc_comp_isr+0x150>)
 80045ee:	2202      	movs	r2, #2
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	e04a      	b.n	800468a <adc_comp_isr+0x136>
            break;
        
        case 2:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE]){
 80045f4:	4b2a      	ldr	r3, [pc, #168]	; (80046a0 <adc_comp_isr+0x14c>)
 80045f6:	881a      	ldrh	r2, [r3, #0]
 80045f8:	885b      	ldrh	r3, [r3, #2]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d907      	bls.n	800460e <adc_comp_isr+0xba>
                timer = timers_millis(); 
 80045fe:	f000 fce3 	bl	8004fc8 <timers_millis>
 8004602:	4b2a      	ldr	r3, [pc, #168]	; (80046ac <adc_comp_isr+0x158>)
 8004604:	8018      	strh	r0, [r3, #0]
                state = 4;}
 8004606:	4b27      	ldr	r3, [pc, #156]	; (80046a4 <adc_comp_isr+0x150>)
 8004608:	2204      	movs	r2, #4
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	e03d      	b.n	800468a <adc_comp_isr+0x136>
            else if(timers_millis() - timer > 10000){
 800460e:	f000 fcdb 	bl	8004fc8 <timers_millis>
 8004612:	4b26      	ldr	r3, [pc, #152]	; (80046ac <adc_comp_isr+0x158>)
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	1ac0      	subs	r0, r0, r3
 8004618:	4b25      	ldr	r3, [pc, #148]	; (80046b0 <adc_comp_isr+0x15c>)
 800461a:	4298      	cmp	r0, r3
 800461c:	dd35      	ble.n	800468a <adc_comp_isr+0x136>
                state = 3;
 800461e:	4b21      	ldr	r3, [pc, #132]	; (80046a4 <adc_comp_isr+0x150>)
 8004620:	2203      	movs	r2, #3
 8004622:	701a      	strb	r2, [r3, #0]
                plugged_in = false;
                log_printf("Plugged Out\n");}
 8004624:	4823      	ldr	r0, [pc, #140]	; (80046b4 <adc_comp_isr+0x160>)
 8004626:	f000 f901 	bl	800482c <log_printf>
 800462a:	e02e      	b.n	800468a <adc_comp_isr+0x136>
            break;
        
        case 3:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE]){
 800462c:	4b1c      	ldr	r3, [pc, #112]	; (80046a0 <adc_comp_isr+0x14c>)
 800462e:	881a      	ldrh	r2, [r3, #0]
 8004630:	885b      	ldrh	r3, [r3, #2]
 8004632:	429a      	cmp	r2, r3
 8004634:	d929      	bls.n	800468a <adc_comp_isr+0x136>
                timer = timers_millis();
 8004636:	f000 fcc7 	bl	8004fc8 <timers_millis>
 800463a:	4b1c      	ldr	r3, [pc, #112]	; (80046ac <adc_comp_isr+0x158>)
 800463c:	8018      	strh	r0, [r3, #0]
                state = 0;
 800463e:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <adc_comp_isr+0x150>)
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]
                log_printf("Plugged In\n");}
 8004644:	481c      	ldr	r0, [pc, #112]	; (80046b8 <adc_comp_isr+0x164>)
 8004646:	f000 f8f1 	bl	800482c <log_printf>
 800464a:	e01e      	b.n	800468a <adc_comp_isr+0x136>
            break;

        case 4:
            if(batt_voltages[PWR_VOLTAGE] < batt_voltages[BATT_VOLTAGE]){
 800464c:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <adc_comp_isr+0x14c>)
 800464e:	881a      	ldrh	r2, [r3, #0]
 8004650:	885b      	ldrh	r3, [r3, #2]
 8004652:	429a      	cmp	r2, r3
 8004654:	d203      	bcs.n	800465e <adc_comp_isr+0x10a>
                state = 2; }
 8004656:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <adc_comp_isr+0x150>)
 8004658:	2202      	movs	r2, #2
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	e015      	b.n	800468a <adc_comp_isr+0x136>
            else if(timers_millis() - timer > 1000){
 800465e:	f000 fcb3 	bl	8004fc8 <timers_millis>
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <adc_comp_isr+0x158>)
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	1ac0      	subs	r0, r0, r3
 8004668:	23fa      	movs	r3, #250	; 0xfa
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4298      	cmp	r0, r3
 800466e:	dd0c      	ble.n	800468a <adc_comp_isr+0x136>
                state = 0;
 8004670:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <adc_comp_isr+0x150>)
 8004672:	2200      	movs	r2, #0
 8004674:	701a      	strb	r2, [r3, #0]
                batt_rst_seq = true; 
 8004676:	4b11      	ldr	r3, [pc, #68]	; (80046bc <adc_comp_isr+0x168>)
 8004678:	3201      	adds	r2, #1
 800467a:	701a      	strb	r2, [r3, #0]
                log_printf("Reset Sequence\n"); }
 800467c:	4810      	ldr	r0, [pc, #64]	; (80046c0 <adc_comp_isr+0x16c>)
 800467e:	f000 f8d5 	bl	800482c <log_printf>
 8004682:	e002      	b.n	800468a <adc_comp_isr+0x136>
            break;

        default:
            log_printf("Error ADC ISR Defaut Case\n");
 8004684:	480f      	ldr	r0, [pc, #60]	; (80046c4 <adc_comp_isr+0x170>)
 8004686:	f000 f8d1 	bl	800482c <log_printf>
            break;
    }

    // log_printf("ADC ISR %u %u %u V\n",state, batt_voltages[0], batt_voltages[1]);

    ADC_ISR(ADC1) = 0xFFFFFFFF;
 800468a:	480f      	ldr	r0, [pc, #60]	; (80046c8 <adc_comp_isr+0x174>)
 800468c:	2301      	movs	r3, #1
 800468e:	425b      	negs	r3, r3
 8004690:	6003      	str	r3, [r0, #0]
    adc_start_conversion_regular(ADC1);
 8004692:	f000 fd6b 	bl	800516c <adc_start_conversion_regular>
}
 8004696:	bd70      	pop	{r4, r5, r6, pc}
 8004698:	1ff80078 	.word	0x1ff80078
 800469c:	200002cc 	.word	0x200002cc
 80046a0:	200002d4 	.word	0x200002d4
 80046a4:	200002d8 	.word	0x200002d8
 80046a8:	08006e8c 	.word	0x08006e8c
 80046ac:	200002da 	.word	0x200002da
 80046b0:	00002710 	.word	0x00002710
 80046b4:	08006e44 	.word	0x08006e44
 80046b8:	08006e54 	.word	0x08006e54
 80046bc:	200002d2 	.word	0x200002d2
 80046c0:	08006e60 	.word	0x08006e60
 80046c4:	08006e70 	.word	0x08006e70
 80046c8:	40012400 	.word	0x40012400

080046cc <usart_setup>:
}

#ifdef DEBUG

static void usart_setup(void) 
{
 80046cc:	b570      	push	{r4, r5, r6, lr}
    rcc_periph_clock_enable(RCC_GPIOA);
 80046ce:	20b0      	movs	r0, #176	; 0xb0
 80046d0:	00c0      	lsls	r0, r0, #3
 80046d2:	f000 ff77 	bl	80055c4 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOB);
 80046d6:	4826      	ldr	r0, [pc, #152]	; (8004770 <usart_setup+0xa4>)
 80046d8:	f000 ff74 	bl	80055c4 <rcc_periph_clock_enable>

	gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_TX);
 80046dc:	2580      	movs	r5, #128	; 0x80
 80046de:	00ad      	lsls	r5, r5, #2
 80046e0:	24a0      	movs	r4, #160	; 0xa0
 80046e2:	05e4      	lsls	r4, r4, #23
 80046e4:	002b      	movs	r3, r5
 80046e6:	2200      	movs	r2, #0
 80046e8:	2102      	movs	r1, #2
 80046ea:	0020      	movs	r0, r4
 80046ec:	f000 fda5 	bl	800523a <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_RX);
 80046f0:	2680      	movs	r6, #128	; 0x80
 80046f2:	00f6      	lsls	r6, r6, #3
 80046f4:	0033      	movs	r3, r6
 80046f6:	2200      	movs	r2, #0
 80046f8:	2102      	movs	r1, #2
 80046fa:	0020      	movs	r0, r4
 80046fc:	f000 fd9d 	bl	800523a <gpio_mode_setup>
    
    gpio_set_output_options(SPF_USART_TX_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, SPF_USART_TX);
 8004700:	002b      	movs	r3, r5
 8004702:	2200      	movs	r2, #0
 8004704:	2100      	movs	r1, #0
 8004706:	0020      	movs	r0, r4
 8004708:	f000 fdb7 	bl	800527a <gpio_set_output_options>

    gpio_set_af(SPF_USART_TX_PORT, SPF_USART_AF, SPF_USART_TX);
 800470c:	002a      	movs	r2, r5
 800470e:	2104      	movs	r1, #4
 8004710:	0020      	movs	r0, r4
 8004712:	f000 fdd0 	bl	80052b6 <gpio_set_af>
    gpio_set_af(SPF_USART_RX_PORT, SPF_USART_AF, SPF_USART_RX);
 8004716:	0032      	movs	r2, r6
 8004718:	2104      	movs	r1, #4
 800471a:	0020      	movs	r0, r4
 800471c:	f000 fdcb 	bl	80052b6 <gpio_set_af>
    
	rcc_periph_clock_enable(SPF_USART_RCC);
 8004720:	4814      	ldr	r0, [pc, #80]	; (8004774 <usart_setup+0xa8>)
 8004722:	f000 ff4f 	bl	80055c4 <rcc_periph_clock_enable>
    rcc_periph_reset_pulse(SPF_USART_RCC_RST);
 8004726:	4814      	ldr	r0, [pc, #80]	; (8004778 <usart_setup+0xac>)
 8004728:	f000 ff5a 	bl	80055e0 <rcc_periph_reset_pulse>
	usart_disable(SPF_USART);
 800472c:	4c13      	ldr	r4, [pc, #76]	; (800477c <usart_setup+0xb0>)
 800472e:	0020      	movs	r0, r4
 8004730:	f000 fff1 	bl	8005716 <usart_disable>
	usart_set_baudrate(SPF_USART, SPF_USART_BAUD);
 8004734:	21e1      	movs	r1, #225	; 0xe1
 8004736:	0249      	lsls	r1, r1, #9
 8004738:	0020      	movs	r0, r4
 800473a:	f000 ff8f 	bl	800565c <usart_set_baudrate>
	usart_set_databits(SPF_USART, 8);
 800473e:	2108      	movs	r1, #8
 8004740:	0020      	movs	r0, r4
 8004742:	f000 ffb7 	bl	80056b4 <usart_set_databits>
	usart_set_stopbits(SPF_USART,USART_STOPBITS_1);
 8004746:	2100      	movs	r1, #0
 8004748:	0020      	movs	r0, r4
 800474a:	f000 ffc1 	bl	80056d0 <usart_set_stopbits>
	usart_set_mode(SPF_USART, USART_MODE_TX_RX);
 800474e:	210c      	movs	r1, #12
 8004750:	0020      	movs	r0, r4
 8004752:	f000 ffcd 	bl	80056f0 <usart_set_mode>
	usart_set_parity(SPF_USART, USART_PARITY_NONE);
 8004756:	2100      	movs	r1, #0
 8004758:	0020      	movs	r0, r4
 800475a:	f000 ffc1 	bl	80056e0 <usart_set_parity>
	usart_set_flow_control(SPF_USART, USART_FLOWCONTROL_NONE);
 800475e:	2100      	movs	r1, #0
 8004760:	0020      	movs	r0, r4
 8004762:	f000 ffcb 	bl	80056fc <usart_set_flow_control>
	usart_enable(SPF_USART);
 8004766:	0020      	movs	r0, r4
 8004768:	f000 ffd0 	bl	800570c <usart_enable>
}
 800476c:	bd70      	pop	{r4, r5, r6, pc}
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	00000581 	.word	0x00000581
 8004774:	0000068e 	.word	0x0000068e
 8004778:	0000048e 	.word	0x0000048e
 800477c:	40013800 	.word	0x40013800

08004780 <_putchar_mem>:
{
 8004780:	b510      	push	{r4, lr}
 8004782:	0001      	movs	r1, r0
	mem_eeprom_write_byte((uint32_t)&(log_file->log[write_index]), character);
 8004784:	4c07      	ldr	r4, [pc, #28]	; (80047a4 <_putchar_mem+0x24>)
 8004786:	8820      	ldrh	r0, [r4, #0]
 8004788:	4b07      	ldr	r3, [pc, #28]	; (80047a8 <_putchar_mem+0x28>)
 800478a:	469c      	mov	ip, r3
 800478c:	4460      	add	r0, ip
 800478e:	f000 f905 	bl	800499c <mem_eeprom_write_byte>
	write_index = (write_index + 1) % log_file->size;
 8004792:	8820      	ldrh	r0, [r4, #0]
 8004794:	3001      	adds	r0, #1
 8004796:	4b05      	ldr	r3, [pc, #20]	; (80047ac <_putchar_mem+0x2c>)
 8004798:	8819      	ldrh	r1, [r3, #0]
 800479a:	f002 fa93 	bl	8006cc4 <__aeabi_idivmod>
 800479e:	8021      	strh	r1, [r4, #0]
}
 80047a0:	bd10      	pop	{r4, pc}
 80047a2:	46c0      	nop			; (mov r8, r8)
 80047a4:	200002de 	.word	0x200002de
 80047a8:	08080104 	.word	0x08080104
 80047ac:	08080100 	.word	0x08080100

080047b0 <_putchar_spf>:

static void _putchar_spf(char character)
{
 80047b0:	b510      	push	{r4, lr}
	usart_send_blocking(SPF_USART, character);	
 80047b2:	0001      	movs	r1, r0
 80047b4:	4801      	ldr	r0, [pc, #4]	; (80047bc <_putchar_spf+0xc>)
 80047b6:	f000 ffb3 	bl	8005720 <usart_send_blocking>
}
 80047ba:	bd10      	pop	{r4, pc}
 80047bc:	40013800 	.word	0x40013800

080047c0 <_putchar_usb>:

#ifdef _HUB
static void _putchar_usb(char character)
{
 80047c0:	b510      	push	{r4, lr}
	cusb_send(character);
 80047c2:	f7ff fdb5 	bl	8004330 <cusb_send>
}
 80047c6:	bd10      	pop	{r4, pc}

080047c8 <_putchar_main>:
{
 80047c8:	b510      	push	{r4, lr}
 80047ca:	0004      	movs	r4, r0
	_putchar_mem(character);
 80047cc:	f7ff ffd8 	bl	8004780 <_putchar_mem>
	_putchar_spf(character);
 80047d0:	0020      	movs	r0, r4
 80047d2:	f7ff ffed 	bl	80047b0 <_putchar_spf>
	_putchar_usb(character);
 80047d6:	0020      	movs	r0, r4
 80047d8:	f7ff fff2 	bl	80047c0 <_putchar_usb>
}
 80047dc:	bd10      	pop	{r4, pc}
	...

080047e0 <log_init>:
{
 80047e0:	b510      	push	{r4, lr}
	mem_eeprom_write_half_word((uint32_t)(&(log_file->size)), EEPROM_LOG_SIZE - sizeof(log_t));
 80047e2:	4c0d      	ldr	r4, [pc, #52]	; (8004818 <log_init+0x38>)
 80047e4:	21ff      	movs	r1, #255	; 0xff
 80047e6:	0089      	lsls	r1, r1, #2
 80047e8:	0020      	movs	r0, r4
 80047ea:	f000 f8ad 	bl	8004948 <mem_eeprom_write_half_word>
	mem_eeprom_write_half_word((uint32_t)(&(log_file->idx)), 0);
 80047ee:	2100      	movs	r1, #0
 80047f0:	480a      	ldr	r0, [pc, #40]	; (800481c <log_init+0x3c>)
 80047f2:	f000 f8a9 	bl	8004948 <mem_eeprom_write_half_word>
	write_index = log_file->idx;
 80047f6:	8863      	ldrh	r3, [r4, #2]
 80047f8:	4a09      	ldr	r2, [pc, #36]	; (8004820 <log_init+0x40>)
 80047fa:	8013      	strh	r3, [r2, #0]
	read_index 	= write_index;
 80047fc:	4a09      	ldr	r2, [pc, #36]	; (8004824 <log_init+0x44>)
 80047fe:	8013      	strh	r3, [r2, #0]
	cusb_init();
 8004800:	f7ff fd54 	bl	80042ac <cusb_init>
    usart_setup();
 8004804:	f7ff ff62 	bl	80046cc <usart_setup>
	for(int i = 0; i < 100000; i++){__asm__("nop");};
 8004808:	2300      	movs	r3, #0
 800480a:	4a07      	ldr	r2, [pc, #28]	; (8004828 <log_init+0x48>)
 800480c:	4293      	cmp	r3, r2
 800480e:	dc02      	bgt.n	8004816 <log_init+0x36>
 8004810:	46c0      	nop			; (mov r8, r8)
 8004812:	3301      	adds	r3, #1
 8004814:	e7f9      	b.n	800480a <log_init+0x2a>
}
 8004816:	bd10      	pop	{r4, pc}
 8004818:	08080100 	.word	0x08080100
 800481c:	08080102 	.word	0x08080102
 8004820:	200002de 	.word	0x200002de
 8004824:	200002dc 	.word	0x200002dc
 8004828:	0001869f 	.word	0x0001869f

0800482c <log_printf>:
{
 800482c:	b40f      	push	{r0, r1, r2, r3}
 800482e:	b500      	push	{lr}
 8004830:	b083      	sub	sp, #12
 8004832:	aa04      	add	r2, sp, #16
 8004834:	ca02      	ldmia	r2!, {r1}
	va_start(va, format);
 8004836:	9201      	str	r2, [sp, #4]
	fnprintf(_putchar_main, format, va);
 8004838:	4808      	ldr	r0, [pc, #32]	; (800485c <log_printf+0x30>)
 800483a:	f000 f979 	bl	8004b30 <fnprintf>
	mem_eeprom_write_byte((uint32_t)&log_file->idx, write_index);
 800483e:	4b08      	ldr	r3, [pc, #32]	; (8004860 <log_printf+0x34>)
 8004840:	7819      	ldrb	r1, [r3, #0]
 8004842:	4808      	ldr	r0, [pc, #32]	; (8004864 <log_printf+0x38>)
 8004844:	f000 f8aa 	bl	800499c <mem_eeprom_write_byte>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {}
 8004848:	2140      	movs	r1, #64	; 0x40
 800484a:	4807      	ldr	r0, [pc, #28]	; (8004868 <log_printf+0x3c>)
 800484c:	f000 ff7f 	bl	800574e <usart_get_flag>
 8004850:	2800      	cmp	r0, #0
 8004852:	d0f9      	beq.n	8004848 <log_printf+0x1c>
}
 8004854:	b003      	add	sp, #12
 8004856:	bc08      	pop	{r3}
 8004858:	b004      	add	sp, #16
 800485a:	4718      	bx	r3
 800485c:	080047c9 	.word	0x080047c9
 8004860:	200002de 	.word	0x200002de
 8004864:	08080102 	.word	0x08080102
 8004868:	40013800 	.word	0x40013800

0800486c <serial_printf>:
{
 800486c:	b40f      	push	{r0, r1, r2, r3}
 800486e:	b500      	push	{lr}
 8004870:	b083      	sub	sp, #12
 8004872:	aa04      	add	r2, sp, #16
 8004874:	ca02      	ldmia	r2!, {r1}
	va_start(va, format);
 8004876:	9201      	str	r2, [sp, #4]
	fnprintf(_putchar_spf, format, va);
 8004878:	4806      	ldr	r0, [pc, #24]	; (8004894 <serial_printf+0x28>)
 800487a:	f000 f959 	bl	8004b30 <fnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {}
 800487e:	2140      	movs	r1, #64	; 0x40
 8004880:	4805      	ldr	r0, [pc, #20]	; (8004898 <serial_printf+0x2c>)
 8004882:	f000 ff64 	bl	800574e <usart_get_flag>
 8004886:	2800      	cmp	r0, #0
 8004888:	d0f9      	beq.n	800487e <serial_printf+0x12>
}
 800488a:	b003      	add	sp, #12
 800488c:	bc08      	pop	{r3}
 800488e:	b004      	add	sp, #16
 8004890:	4718      	bx	r3
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	080047b1 	.word	0x080047b1
 8004898:	40013800 	.word	0x40013800

0800489c <log_read>:
{
 800489c:	b510      	push	{r4, lr}
	read_index = (read_index + 1) % log_file->size;
 800489e:	4c0a      	ldr	r4, [pc, #40]	; (80048c8 <log_read+0x2c>)
 80048a0:	8820      	ldrh	r0, [r4, #0]
 80048a2:	3001      	adds	r0, #1
 80048a4:	4b09      	ldr	r3, [pc, #36]	; (80048cc <log_read+0x30>)
 80048a6:	8819      	ldrh	r1, [r3, #0]
 80048a8:	f002 fa0c 	bl	8006cc4 <__aeabi_idivmod>
 80048ac:	b289      	uxth	r1, r1
 80048ae:	8021      	strh	r1, [r4, #0]
	if(read_index == write_index)
 80048b0:	4b07      	ldr	r3, [pc, #28]	; (80048d0 <log_read+0x34>)
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	4299      	cmp	r1, r3
 80048b6:	d004      	beq.n	80048c2 <log_read+0x26>
		byte = log_file->log[read_index];
 80048b8:	4b04      	ldr	r3, [pc, #16]	; (80048cc <log_read+0x30>)
 80048ba:	469c      	mov	ip, r3
 80048bc:	4461      	add	r1, ip
 80048be:	7908      	ldrb	r0, [r1, #4]
}
 80048c0:	bd10      	pop	{r4, pc}
		byte = 0;
 80048c2:	2000      	movs	r0, #0
 80048c4:	e7fc      	b.n	80048c0 <log_read+0x24>
 80048c6:	46c0      	nop			; (mov r8, r8)
 80048c8:	200002dc 	.word	0x200002dc
 80048cc:	08080100 	.word	0x08080100
 80048d0:	200002de 	.word	0x200002de

080048d4 <log_read_reset>:
	read_index = write_index;
 80048d4:	4b02      	ldr	r3, [pc, #8]	; (80048e0 <log_read_reset+0xc>)
 80048d6:	881a      	ldrh	r2, [r3, #0]
 80048d8:	4b02      	ldr	r3, [pc, #8]	; (80048e4 <log_read_reset+0x10>)
 80048da:	801a      	strh	r2, [r3, #0]
}
 80048dc:	4770      	bx	lr
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	200002de 	.word	0x200002de
 80048e4:	200002dc 	.word	0x200002dc

080048e8 <log_size>:
	return log_file->size;
 80048e8:	4b01      	ldr	r3, [pc, #4]	; (80048f0 <log_size+0x8>)
 80048ea:	8818      	ldrh	r0, [r3, #0]
}
 80048ec:	4770      	bx	lr
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	08080100 	.word	0x08080100

080048f4 <mem_eeprom_write_word>:
    // }
}


bool mem_eeprom_write_word(uint32_t address, uint32_t data)
{
 80048f4:	b570      	push	{r4, r5, r6, lr}
 80048f6:	0004      	movs	r4, r0
 80048f8:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 80048fa:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <mem_eeprom_write_word+0x44>)
 80048fc:	18c2      	adds	r2, r0, r3
 80048fe:	2380      	movs	r3, #128	; 0x80
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	429a      	cmp	r2, r3
 8004904:	d301      	bcc.n	800490a <mem_eeprom_write_word+0x16>
        return false;
 8004906:	2000      	movs	r0, #0
        FLASH_SR = FLASH_SR_EOP;

    flash_lock_pecr();

    return true;
}
 8004908:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock_pecr();
 800490a:	f000 fc51 	bl	80051b0 <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 800490e:	4a0b      	ldr	r2, [pc, #44]	; (800493c <mem_eeprom_write_word+0x48>)
 8004910:	6813      	ldr	r3, [r2, #0]
 8004912:	490b      	ldr	r1, [pc, #44]	; (8004940 <mem_eeprom_write_word+0x4c>)
 8004914:	400b      	ands	r3, r1
 8004916:	6013      	str	r3, [r2, #0]
    MMIO32(address) = data;
 8004918:	6025      	str	r5, [r4, #0]
    while (FLASH_SR & FLASH_SR_BSY);
 800491a:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <mem_eeprom_write_word+0x50>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	07db      	lsls	r3, r3, #31
 8004920:	d4fb      	bmi.n	800491a <mem_eeprom_write_word+0x26>
    if (FLASH_SR & FLASH_SR_EOP)
 8004922:	4b08      	ldr	r3, [pc, #32]	; (8004944 <mem_eeprom_write_word+0x50>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	079b      	lsls	r3, r3, #30
 8004928:	d502      	bpl.n	8004930 <mem_eeprom_write_word+0x3c>
        FLASH_SR = FLASH_SR_EOP;
 800492a:	4b06      	ldr	r3, [pc, #24]	; (8004944 <mem_eeprom_write_word+0x50>)
 800492c:	2202      	movs	r2, #2
 800492e:	601a      	str	r2, [r3, #0]
    flash_lock_pecr();
 8004930:	f000 fc4a 	bl	80051c8 <flash_lock_pecr>
    return true;
 8004934:	2001      	movs	r0, #1
 8004936:	e7e7      	b.n	8004908 <mem_eeprom_write_word+0x14>
 8004938:	f7f80000 	.word	0xf7f80000
 800493c:	40022004 	.word	0x40022004
 8004940:	fffffeff 	.word	0xfffffeff
 8004944:	40022018 	.word	0x40022018

08004948 <mem_eeprom_write_half_word>:

bool mem_eeprom_write_half_word(uint32_t address, uint16_t data)
{
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	0004      	movs	r4, r0
 800494c:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 800494e:	4b0f      	ldr	r3, [pc, #60]	; (800498c <mem_eeprom_write_half_word+0x44>)
 8004950:	18c2      	adds	r2, r0, r3
 8004952:	2380      	movs	r3, #128	; 0x80
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	429a      	cmp	r2, r3
 8004958:	d301      	bcc.n	800495e <mem_eeprom_write_half_word+0x16>
        return false;
 800495a:	2000      	movs	r0, #0
        FLASH_SR = FLASH_SR_EOP;

    flash_lock_pecr();

    return true;
}
 800495c:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock_pecr();
 800495e:	f000 fc27 	bl	80051b0 <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 8004962:	4a0b      	ldr	r2, [pc, #44]	; (8004990 <mem_eeprom_write_half_word+0x48>)
 8004964:	6813      	ldr	r3, [r2, #0]
 8004966:	490b      	ldr	r1, [pc, #44]	; (8004994 <mem_eeprom_write_half_word+0x4c>)
 8004968:	400b      	ands	r3, r1
 800496a:	6013      	str	r3, [r2, #0]
    MMIO16(address) = data;
 800496c:	8025      	strh	r5, [r4, #0]
    while (FLASH_SR & FLASH_SR_BSY);
 800496e:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <mem_eeprom_write_half_word+0x50>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	07db      	lsls	r3, r3, #31
 8004974:	d4fb      	bmi.n	800496e <mem_eeprom_write_half_word+0x26>
    if (FLASH_SR & FLASH_SR_EOP)
 8004976:	4b08      	ldr	r3, [pc, #32]	; (8004998 <mem_eeprom_write_half_word+0x50>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	079b      	lsls	r3, r3, #30
 800497c:	d502      	bpl.n	8004984 <mem_eeprom_write_half_word+0x3c>
        FLASH_SR = FLASH_SR_EOP;
 800497e:	4b06      	ldr	r3, [pc, #24]	; (8004998 <mem_eeprom_write_half_word+0x50>)
 8004980:	2202      	movs	r2, #2
 8004982:	601a      	str	r2, [r3, #0]
    flash_lock_pecr();
 8004984:	f000 fc20 	bl	80051c8 <flash_lock_pecr>
    return true;
 8004988:	2001      	movs	r0, #1
 800498a:	e7e7      	b.n	800495c <mem_eeprom_write_half_word+0x14>
 800498c:	f7f80000 	.word	0xf7f80000
 8004990:	40022004 	.word	0x40022004
 8004994:	fffffeff 	.word	0xfffffeff
 8004998:	40022018 	.word	0x40022018

0800499c <mem_eeprom_write_byte>:

bool mem_eeprom_write_byte(uint32_t address, uint8_t data)
{
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	0004      	movs	r4, r0
 80049a0:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 80049a2:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <mem_eeprom_write_byte+0x4c>)
 80049a4:	18c2      	adds	r2, r0, r3
 80049a6:	2380      	movs	r3, #128	; 0x80
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d216      	bcs.n	80049dc <mem_eeprom_write_byte+0x40>
    {
        serial_printf("Mem Log EEPROM Address out of bounds\n");
        return false;
    }

    flash_unlock_pecr();
 80049ae:	f000 fbff 	bl	80051b0 <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 80049b2:	4a0e      	ldr	r2, [pc, #56]	; (80049ec <mem_eeprom_write_byte+0x50>)
 80049b4:	6813      	ldr	r3, [r2, #0]
 80049b6:	490e      	ldr	r1, [pc, #56]	; (80049f0 <mem_eeprom_write_byte+0x54>)
 80049b8:	400b      	ands	r3, r1
 80049ba:	6013      	str	r3, [r2, #0]

    MMIO8(address) = data;
 80049bc:	7025      	strb	r5, [r4, #0]

    while (FLASH_SR & FLASH_SR_BSY);
 80049be:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <mem_eeprom_write_byte+0x58>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	07db      	lsls	r3, r3, #31
 80049c4:	d4fb      	bmi.n	80049be <mem_eeprom_write_byte+0x22>
    if (FLASH_SR & FLASH_SR_EOP)
 80049c6:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <mem_eeprom_write_byte+0x58>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	079b      	lsls	r3, r3, #30
 80049cc:	d502      	bpl.n	80049d4 <mem_eeprom_write_byte+0x38>
        FLASH_SR = FLASH_SR_EOP;
 80049ce:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <mem_eeprom_write_byte+0x58>)
 80049d0:	2202      	movs	r2, #2
 80049d2:	601a      	str	r2, [r3, #0]

    flash_lock_pecr();
 80049d4:	f000 fbf8 	bl	80051c8 <flash_lock_pecr>

    return true;
 80049d8:	2001      	movs	r0, #1
}
 80049da:	bd70      	pop	{r4, r5, r6, pc}
        serial_printf("Mem Log EEPROM Address out of bounds\n");
 80049dc:	4806      	ldr	r0, [pc, #24]	; (80049f8 <mem_eeprom_write_byte+0x5c>)
 80049de:	f7ff ff45 	bl	800486c <serial_printf>
        return false;
 80049e2:	2000      	movs	r0, #0
 80049e4:	e7f9      	b.n	80049da <mem_eeprom_write_byte+0x3e>
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	f7f80000 	.word	0xf7f80000
 80049ec:	40022004 	.word	0x40022004
 80049f0:	fffffeff 	.word	0xfffffeff
 80049f4:	40022018 	.word	0x40022018
 80049f8:	08006ea0 	.word	0x08006ea0

080049fc <mem_flash_erase_page>:


bool mem_flash_erase_page(uint32_t address)
{
 80049fc:	b510      	push	{r4, lr}
 80049fe:	0004      	movs	r4, r0
    bool result = false;

    // Check page aligned
    if (address & 0x7F)
 8004a00:	0643      	lsls	r3, r0, #25
 8004a02:	d002      	beq.n	8004a0a <mem_flash_erase_page+0xe>
        return false; 
 8004a04:	2400      	movs	r4, #0

    flash_unlock();
    result = mem_flash_do_page_erase(address);
    flash_lock();
    return result;
}
 8004a06:	0020      	movs	r0, r4
 8004a08:	bd10      	pop	{r4, pc}
    flash_unlock();
 8004a0a:	f000 fc01 	bl	8005210 <flash_unlock>
    result = mem_flash_do_page_erase(address);
 8004a0e:	0020      	movs	r0, r4
 8004a10:	f002 f96e 	bl	8006cf0 <__mem_flash_do_page_erase_veneer>
 8004a14:	0004      	movs	r4, r0
    flash_lock();
 8004a16:	f000 fc03 	bl	8005220 <flash_lock>
    return result;
 8004a1a:	e7f4      	b.n	8004a06 <mem_flash_erase_page+0xa>

08004a1c <mem_flash_write_half_page>:

bool mem_flash_write_half_page(uint32_t address, uint32_t *data)
{
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	0004      	movs	r4, r0
 8004a20:	000d      	movs	r5, r1
    bool result = false;

    if ((uint32_t)address & 0x3F)
 8004a22:	0683      	lsls	r3, r0, #26
 8004a24:	d002      	beq.n	8004a2c <mem_flash_write_half_page+0x10>
        return false; //not half-page aligned
 8004a26:	2400      	movs	r4, #0

    flash_unlock();
    result = mem_flash_do_write_half_page(address, data);
    flash_lock();
    return result;
}
 8004a28:	0020      	movs	r0, r4
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock();
 8004a2c:	f000 fbf0 	bl	8005210 <flash_unlock>
    result = mem_flash_do_write_half_page(address, data);
 8004a30:	0029      	movs	r1, r5
 8004a32:	0020      	movs	r0, r4
 8004a34:	f002 f964 	bl	8006d00 <__mem_flash_do_write_half_page_veneer>
 8004a38:	0004      	movs	r4, r0
    flash_lock();
 8004a3a:	f000 fbf1 	bl	8005220 <flash_lock>
    return result;
 8004a3e:	e7f3      	b.n	8004a28 <mem_flash_write_half_page+0xc>

08004a40 <_atoi>:
    return (ch >= '0') && (ch <= '9');
}

// internal ASCII string to uint32_t conversion
static uint32_t _atoi(const char **str)
{
 8004a40:	0001      	movs	r1, r0
    uint32_t i = 0U;
 8004a42:	2000      	movs	r0, #0
    while (_is_digit(**str))
 8004a44:	680a      	ldr	r2, [r1, #0]
 8004a46:	7813      	ldrb	r3, [r2, #0]
    return (ch >= '0') && (ch <= '9');
 8004a48:	3b30      	subs	r3, #48	; 0x30
 8004a4a:	b2db      	uxtb	r3, r3
    while (_is_digit(**str))
 8004a4c:	2b09      	cmp	r3, #9
 8004a4e:	d808      	bhi.n	8004a62 <_atoi+0x22>
    {
        i = i * 10U + (uint32_t)(*((*str)++) - '0');
 8004a50:	0083      	lsls	r3, r0, #2
 8004a52:	181b      	adds	r3, r3, r0
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	1c50      	adds	r0, r2, #1
 8004a58:	6008      	str	r0, [r1, #0]
 8004a5a:	7810      	ldrb	r0, [r2, #0]
 8004a5c:	18c0      	adds	r0, r0, r3
 8004a5e:	3830      	subs	r0, #48	; 0x30
 8004a60:	e7f0      	b.n	8004a44 <_atoi+0x4>
    }
    return i;
}
 8004a62:	4770      	bx	lr

08004a64 <_ntoa_format>:

// internal itoa format
static uint32_t _ntoa_format(out_fct_type out, uint32_t value, uint32_t base, uint32_t width, bool negative)
{
 8004a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a66:	46d6      	mov	lr, sl
 8004a68:	464f      	mov	r7, r9
 8004a6a:	4646      	mov	r6, r8
 8004a6c:	b5c0      	push	{r6, r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	4680      	mov	r8, r0
 8004a72:	000c      	movs	r4, r1
 8004a74:	0015      	movs	r5, r2
 8004a76:	469a      	mov	sl, r3
 8004a78:	ab10      	add	r3, sp, #64	; 0x40
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	4699      	mov	r9, r3
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    uint32_t len = 0;
 8004a7e:	2600      	movs	r6, #0
 8004a80:	e00e      	b.n	8004aa0 <_ntoa_format+0x3c>

    // Digits to char
    do
    {
        const char digit = (char)(value % base);
        buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 8004a82:	3130      	adds	r1, #48	; 0x30
 8004a84:	b2c9      	uxtb	r1, r1
 8004a86:	1c77      	adds	r7, r6, #1
 8004a88:	466b      	mov	r3, sp
 8004a8a:	5599      	strb	r1, [r3, r6]
        value /= base;
 8004a8c:	0029      	movs	r1, r5
 8004a8e:	0020      	movs	r0, r4
 8004a90:	f001 ffa8 	bl	80069e4 <__udivsi3>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004a94:	42ac      	cmp	r4, r5
 8004a96:	d311      	bcc.n	8004abc <_ntoa_format+0x58>
 8004a98:	2f1f      	cmp	r7, #31
 8004a9a:	d80f      	bhi.n	8004abc <_ntoa_format+0x58>
        buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 8004a9c:	003e      	movs	r6, r7
        value /= base;
 8004a9e:	0004      	movs	r4, r0
        const char digit = (char)(value % base);
 8004aa0:	0029      	movs	r1, r5
 8004aa2:	0020      	movs	r0, r4
 8004aa4:	f002 f824 	bl	8006af0 <__aeabi_uidivmod>
 8004aa8:	b2c9      	uxtb	r1, r1
        buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 8004aaa:	2909      	cmp	r1, #9
 8004aac:	d9e9      	bls.n	8004a82 <_ntoa_format+0x1e>
 8004aae:	3137      	adds	r1, #55	; 0x37
 8004ab0:	b2c9      	uxtb	r1, r1
 8004ab2:	e7e8      	b.n	8004a86 <_ntoa_format+0x22>

    // pad leading zeros
    while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
    {
        buf[len++] = '0';
 8004ab4:	2330      	movs	r3, #48	; 0x30
 8004ab6:	466a      	mov	r2, sp
 8004ab8:	55d3      	strb	r3, [r2, r7]
 8004aba:	3701      	adds	r7, #1
    while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004abc:	4557      	cmp	r7, sl
 8004abe:	d201      	bcs.n	8004ac4 <_ntoa_format+0x60>
 8004ac0:	2f1f      	cmp	r7, #31
 8004ac2:	d9f7      	bls.n	8004ab4 <_ntoa_format+0x50>
    }

    // Base specifier
    if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004ac4:	2d10      	cmp	r5, #16
 8004ac6:	d016      	beq.n	8004af6 <_ntoa_format+0x92>
    {
        buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004ac8:	2d02      	cmp	r5, #2
 8004aca:	d01b      	beq.n	8004b04 <_ntoa_format+0xa0>
    {
        buf[len++] = 'b';
    }
    if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004acc:	2d10      	cmp	r5, #16
 8004ace:	d020      	beq.n	8004b12 <_ntoa_format+0xae>
 8004ad0:	2d02      	cmp	r5, #2
 8004ad2:	d01e      	beq.n	8004b12 <_ntoa_format+0xae>
    {
        buf[len++] = '0';
    }

    if (negative && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004ad4:	464b      	mov	r3, r9
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d005      	beq.n	8004ae6 <_ntoa_format+0x82>
 8004ada:	2f1f      	cmp	r7, #31
 8004adc:	d803      	bhi.n	8004ae6 <_ntoa_format+0x82>
    {
        buf[len++] = '-';
 8004ade:	232d      	movs	r3, #45	; 0x2d
 8004ae0:	466a      	mov	r2, sp
 8004ae2:	55d3      	strb	r3, [r2, r7]
 8004ae4:	3701      	adds	r7, #1
    }

    // reverse string and write out
    uint32_t i = len;
 8004ae6:	003c      	movs	r4, r7
    while (i)
 8004ae8:	2c00      	cmp	r4, #0
 8004aea:	d019      	beq.n	8004b20 <_ntoa_format+0xbc>
    {
        out(buf[--i]);
 8004aec:	3c01      	subs	r4, #1
 8004aee:	466b      	mov	r3, sp
 8004af0:	5d18      	ldrb	r0, [r3, r4]
 8004af2:	47c0      	blx	r8
 8004af4:	e7f8      	b.n	8004ae8 <_ntoa_format+0x84>
    if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004af6:	2f1f      	cmp	r7, #31
 8004af8:	d8e6      	bhi.n	8004ac8 <_ntoa_format+0x64>
        buf[len++] = 'X';
 8004afa:	2358      	movs	r3, #88	; 0x58
 8004afc:	466a      	mov	r2, sp
 8004afe:	55d3      	strb	r3, [r2, r7]
 8004b00:	3701      	adds	r7, #1
 8004b02:	e7e3      	b.n	8004acc <_ntoa_format+0x68>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004b04:	2f1f      	cmp	r7, #31
 8004b06:	d8e1      	bhi.n	8004acc <_ntoa_format+0x68>
        buf[len++] = 'b';
 8004b08:	2362      	movs	r3, #98	; 0x62
 8004b0a:	466a      	mov	r2, sp
 8004b0c:	55d3      	strb	r3, [r2, r7]
 8004b0e:	3701      	adds	r7, #1
 8004b10:	e7dc      	b.n	8004acc <_ntoa_format+0x68>
    if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004b12:	2f1f      	cmp	r7, #31
 8004b14:	d8de      	bhi.n	8004ad4 <_ntoa_format+0x70>
        buf[len++] = '0';
 8004b16:	2330      	movs	r3, #48	; 0x30
 8004b18:	466a      	mov	r2, sp
 8004b1a:	55d3      	strb	r3, [r2, r7]
 8004b1c:	3701      	adds	r7, #1
 8004b1e:	e7d9      	b.n	8004ad4 <_ntoa_format+0x70>
    }
    return len;
}
 8004b20:	0038      	movs	r0, r7
 8004b22:	b008      	add	sp, #32
 8004b24:	bce0      	pop	{r5, r6, r7}
 8004b26:	46ba      	mov	sl, r7
 8004b28:	46b1      	mov	r9, r6
 8004b2a:	46a8      	mov	r8, r5
 8004b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004b30 <fnprintf>:

uint32_t fnprintf(out_fct_type out, const char *format, va_list va)
{
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	0005      	movs	r5, r0
 8004b36:	9103      	str	r1, [sp, #12]
 8004b38:	9202      	str	r2, [sp, #8]
    uint32_t width;
    uint32_t idx = 0U;
 8004b3a:	2400      	movs	r4, #0

    while (*format)
 8004b3c:	e004      	b.n	8004b48 <fnprintf+0x18>
            format++;
        }
        else
        {
            // Just print char
            out(*format);
 8004b3e:	47a8      	blx	r5
            idx++;
 8004b40:	3401      	adds	r4, #1
            format++;
 8004b42:	9b03      	ldr	r3, [sp, #12]
 8004b44:	3301      	adds	r3, #1
 8004b46:	9303      	str	r3, [sp, #12]
    while (*format)
 8004b48:	9b03      	ldr	r3, [sp, #12]
 8004b4a:	7818      	ldrb	r0, [r3, #0]
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d100      	bne.n	8004b52 <fnprintf+0x22>
 8004b50:	e08c      	b.n	8004c6c <fnprintf+0x13c>
        if (*format == '%')
 8004b52:	2825      	cmp	r0, #37	; 0x25
 8004b54:	d1f3      	bne.n	8004b3e <fnprintf+0xe>
            format++;
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	9203      	str	r2, [sp, #12]
            continue;
        }

        // evaluate width field
        width = 0U;
        if (_is_digit(*format))
 8004b5a:	785b      	ldrb	r3, [r3, #1]
    return (ch >= '0') && (ch <= '9');
 8004b5c:	3b30      	subs	r3, #48	; 0x30
 8004b5e:	b2db      	uxtb	r3, r3
        if (_is_digit(*format))
 8004b60:	2b09      	cmp	r3, #9
 8004b62:	d90b      	bls.n	8004b7c <fnprintf+0x4c>
        width = 0U;
 8004b64:	2300      	movs	r3, #0
        {
            width = _atoi(&format);
        }

        // evaluate specifier
        switch (*format)
 8004b66:	9a03      	ldr	r2, [sp, #12]
 8004b68:	7810      	ldrb	r0, [r2, #0]
 8004b6a:	0002      	movs	r2, r0
 8004b6c:	3a25      	subs	r2, #37	; 0x25
 8004b6e:	b2d1      	uxtb	r1, r2
 8004b70:	2953      	cmp	r1, #83	; 0x53
 8004b72:	d875      	bhi.n	8004c60 <fnprintf+0x130>
 8004b74:	008a      	lsls	r2, r1, #2
 8004b76:	493f      	ldr	r1, [pc, #252]	; (8004c74 <fnprintf+0x144>)
 8004b78:	588a      	ldr	r2, [r1, r2]
 8004b7a:	4697      	mov	pc, r2
            width = _atoi(&format);
 8004b7c:	a803      	add	r0, sp, #12
 8004b7e:	f7ff ff5f 	bl	8004a40 <_atoi>
 8004b82:	0003      	movs	r3, r0
 8004b84:	e7ef      	b.n	8004b66 <fnprintf+0x36>
        case 'o':
        case 'b':
        {
            // set the base
            uint32_t base;
            if (*format == 'x' || *format == 'X')
 8004b86:	2878      	cmp	r0, #120	; 0x78
 8004b88:	d009      	beq.n	8004b9e <fnprintf+0x6e>
 8004b8a:	2858      	cmp	r0, #88	; 0x58
 8004b8c:	d01d      	beq.n	8004bca <fnprintf+0x9a>
            {
                base = 16U;
            }
            else if (*format == 'o')
 8004b8e:	286f      	cmp	r0, #111	; 0x6f
 8004b90:	d01d      	beq.n	8004bce <fnprintf+0x9e>
            {
                base = 8U;
            }
            else if (*format == 'b')
 8004b92:	2862      	cmp	r0, #98	; 0x62
 8004b94:	d001      	beq.n	8004b9a <fnprintf+0x6a>
            {
                base = 2U;
            }
            else
            {
                base = 10U;
 8004b96:	220a      	movs	r2, #10
 8004b98:	e002      	b.n	8004ba0 <fnprintf+0x70>
                base = 2U;
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	e000      	b.n	8004ba0 <fnprintf+0x70>
                base = 16U;
 8004b9e:	2210      	movs	r2, #16
            }

            // convert integer
            if ((*format == 'i') || (*format == 'd'))
 8004ba0:	2869      	cmp	r0, #105	; 0x69
 8004ba2:	d001      	beq.n	8004ba8 <fnprintf+0x78>
 8004ba4:	2864      	cmp	r0, #100	; 0x64
 8004ba6:	d114      	bne.n	8004bd2 <fnprintf+0xa2>
            {
                int32_t val = (int32_t)va_arg(va, int);
 8004ba8:	9902      	ldr	r1, [sp, #8]
 8004baa:	1d08      	adds	r0, r1, #4
 8004bac:	9002      	str	r0, [sp, #8]
 8004bae:	6808      	ldr	r0, [r1, #0]
                idx += _ntoa_format(out, (val < 0)? (0-val) : val, base, width, (val < 0)? true : false);
 8004bb0:	17c6      	asrs	r6, r0, #31
 8004bb2:	1981      	adds	r1, r0, r6
 8004bb4:	4071      	eors	r1, r6
 8004bb6:	0fc0      	lsrs	r0, r0, #31
 8004bb8:	9000      	str	r0, [sp, #0]
 8004bba:	0028      	movs	r0, r5
 8004bbc:	f7ff ff52 	bl	8004a64 <_ntoa_format>
 8004bc0:	1824      	adds	r4, r4, r0
            }
            else
            {
                idx += _ntoa_format(out, va_arg(va, int), base, width, false);
            }
            format++;
 8004bc2:	9b03      	ldr	r3, [sp, #12]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	9303      	str	r3, [sp, #12]
            break;
 8004bc8:	e7be      	b.n	8004b48 <fnprintf+0x18>
                base = 16U;
 8004bca:	2210      	movs	r2, #16
 8004bcc:	e7e8      	b.n	8004ba0 <fnprintf+0x70>
                base = 8U;
 8004bce:	2208      	movs	r2, #8
 8004bd0:	e7e6      	b.n	8004ba0 <fnprintf+0x70>
                idx += _ntoa_format(out, va_arg(va, int), base, width, false);
 8004bd2:	9902      	ldr	r1, [sp, #8]
 8004bd4:	1d08      	adds	r0, r1, #4
 8004bd6:	9002      	str	r0, [sp, #8]
 8004bd8:	6809      	ldr	r1, [r1, #0]
 8004bda:	2000      	movs	r0, #0
 8004bdc:	9000      	str	r0, [sp, #0]
 8004bde:	0028      	movs	r0, r5
 8004be0:	f7ff ff40 	bl	8004a64 <_ntoa_format>
 8004be4:	1824      	adds	r4, r4, r0
 8004be6:	e7ec      	b.n	8004bc2 <fnprintf+0x92>
        }

        case 'c':
        {
            out((char)va_arg(va, int));
 8004be8:	9b02      	ldr	r3, [sp, #8]
 8004bea:	1d1a      	adds	r2, r3, #4
 8004bec:	9202      	str	r2, [sp, #8]
 8004bee:	7818      	ldrb	r0, [r3, #0]
 8004bf0:	47a8      	blx	r5
            idx++;
 8004bf2:	3401      	adds	r4, #1
            format++;
 8004bf4:	9b03      	ldr	r3, [sp, #12]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	9303      	str	r3, [sp, #12]
            break;
 8004bfa:	e7a5      	b.n	8004b48 <fnprintf+0x18>
        }

        case 's':
        {
            const char *p = va_arg(va, char *);
 8004bfc:	9b02      	ldr	r3, [sp, #8]
 8004bfe:	1d1a      	adds	r2, r3, #4
 8004c00:	9202      	str	r2, [sp, #8]
 8004c02:	681e      	ldr	r6, [r3, #0]
    for (s = str; *s && maxsize--; ++s)
 8004c04:	0033      	movs	r3, r6
 8004c06:	2280      	movs	r2, #128	; 0x80
 8004c08:	00d2      	lsls	r2, r2, #3
 8004c0a:	e001      	b.n	8004c10 <fnprintf+0xe0>
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	000a      	movs	r2, r1
 8004c10:	7819      	ldrb	r1, [r3, #0]
 8004c12:	2900      	cmp	r1, #0
 8004c14:	d002      	beq.n	8004c1c <fnprintf+0xec>
 8004c16:	1e51      	subs	r1, r2, #1
 8004c18:	2a00      	cmp	r2, #0
 8004c1a:	d1f7      	bne.n	8004c0c <fnprintf+0xdc>
            uint32_t l = _strnlen_s(p, PRINTF_MAX_STR_LEN);

            // string output
            while (*p != 0)
 8004c1c:	7830      	ldrb	r0, [r6, #0]
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	d003      	beq.n	8004c2a <fnprintf+0xfa>
            {
                out(*(p++));
 8004c22:	3601      	adds	r6, #1
 8004c24:	47a8      	blx	r5
                idx++;
 8004c26:	3401      	adds	r4, #1
 8004c28:	e7f8      	b.n	8004c1c <fnprintf+0xec>
            }
            format++;
 8004c2a:	9b03      	ldr	r3, [sp, #12]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	9303      	str	r3, [sp, #12]
            break;
 8004c30:	e78a      	b.n	8004b48 <fnprintf+0x18>
        }

        case 'p':
        {
            width = sizeof(void *) * 2U;
            idx += _ntoa_format(out, (int32_t)((uintptr_t)va_arg(va, void *)), 16U, width, false);
 8004c32:	9b02      	ldr	r3, [sp, #8]
 8004c34:	1d1a      	adds	r2, r3, #4
 8004c36:	9202      	str	r2, [sp, #8]
 8004c38:	6819      	ldr	r1, [r3, #0]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	3308      	adds	r3, #8
 8004c40:	2210      	movs	r2, #16
 8004c42:	0028      	movs	r0, r5
 8004c44:	f7ff ff0e 	bl	8004a64 <_ntoa_format>
 8004c48:	1824      	adds	r4, r4, r0
            format++;
 8004c4a:	9b03      	ldr	r3, [sp, #12]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	9303      	str	r3, [sp, #12]
            break;
 8004c50:	e77a      	b.n	8004b48 <fnprintf+0x18>
        }

        case '%':
        {
            out('%');
 8004c52:	2025      	movs	r0, #37	; 0x25
 8004c54:	47a8      	blx	r5
            idx++;
 8004c56:	3401      	adds	r4, #1
            format++;
 8004c58:	9b03      	ldr	r3, [sp, #12]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	9303      	str	r3, [sp, #12]
            break;
 8004c5e:	e773      	b.n	8004b48 <fnprintf+0x18>
        }

        default:
        {
            out(*format);
 8004c60:	47a8      	blx	r5
            idx++;
 8004c62:	3401      	adds	r4, #1
            format++;
 8004c64:	9b03      	ldr	r3, [sp, #12]
 8004c66:	3301      	adds	r3, #1
 8004c68:	9303      	str	r3, [sp, #12]
            break;
 8004c6a:	e76d      	b.n	8004b48 <fnprintf+0x18>
        }
        }
    }
    // return written chars without terminating \0
    return idx;
}
 8004c6c:	0020      	movs	r0, r4
 8004c6e:	b004      	add	sp, #16
 8004c70:	bd70      	pop	{r4, r5, r6, pc}
 8004c72:	46c0      	nop			; (mov r8, r8)
 8004c74:	08006ec8 	.word	0x08006ec8

08004c78 <spi_read_single>:
 * 
 * @param reg Register to read
 * @retval Value read from register
 */
static uint8_t spi_read_single(uint8_t reg)
{
 8004c78:	b570      	push	{r4, r5, r6, lr}
 8004c7a:	0004      	movs	r4, r0
  spi_chip_select();
 8004c7c:	25a0      	movs	r5, #160	; 0xa0
 8004c7e:	05ed      	lsls	r5, r5, #23
 8004c80:	2140      	movs	r1, #64	; 0x40
 8004c82:	0028      	movs	r0, r5
 8004c84:	f000 fad6 	bl	8005234 <gpio_clear>
  timers_delay_microseconds(1);
 8004c88:	2001      	movs	r0, #1
 8004c8a:	f000 f953 	bl	8004f34 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, reg);                   
 8004c8e:	b2a1      	uxth	r1, r4
 8004c90:	4c08      	ldr	r4, [pc, #32]	; (8004cb4 <spi_read_single+0x3c>)
 8004c92:	0020      	movs	r0, r4
 8004c94:	f000 fccc 	bl	8005630 <spi_xfer>
  uint8_t in =  spi_xfer(RFM_SPI, 0x00);                   
 8004c98:	2100      	movs	r1, #0
 8004c9a:	0020      	movs	r0, r4
 8004c9c:	f000 fcc8 	bl	8005630 <spi_xfer>
 8004ca0:	b2c4      	uxtb	r4, r0
    
  spi_chip_deselect(); 
 8004ca2:	2140      	movs	r1, #64	; 0x40
 8004ca4:	0028      	movs	r0, r5
 8004ca6:	f000 fac3 	bl	8005230 <gpio_set>
  timers_delay_microseconds(1);
 8004caa:	2001      	movs	r0, #1
 8004cac:	f000 f942 	bl	8004f34 <timers_delay_microseconds>

  return in;
}
 8004cb0:	0020      	movs	r0, r4
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
 8004cb4:	40003800 	.word	0x40003800

08004cb8 <spi_write_single>:
  spi_chip_deselect();     
  timers_delay_microseconds(1);
}

static void spi_write_single(uint8_t reg, uint8_t data)
{
 8004cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cba:	0005      	movs	r5, r0
 8004cbc:	000e      	movs	r6, r1
  // Set MSB for write operation
  uint8_t cmd = 0x80 | reg;
 8004cbe:	2480      	movs	r4, #128	; 0x80
 8004cc0:	4264      	negs	r4, r4
 8004cc2:	4304      	orrs	r4, r0
 8004cc4:	b2e4      	uxtb	r4, r4

  spi_chip_select();
 8004cc6:	27a0      	movs	r7, #160	; 0xa0
 8004cc8:	05ff      	lsls	r7, r7, #23
 8004cca:	2140      	movs	r1, #64	; 0x40
 8004ccc:	0038      	movs	r0, r7
 8004cce:	f000 fab1 	bl	8005234 <gpio_clear>
  timers_delay_microseconds(1);
 8004cd2:	2001      	movs	r0, #1
 8004cd4:	f000 f92e 	bl	8004f34 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, cmd);                 
 8004cd8:	b2a1      	uxth	r1, r4
 8004cda:	4c15      	ldr	r4, [pc, #84]	; (8004d30 <spi_write_single+0x78>)
 8004cdc:	0020      	movs	r0, r4
 8004cde:	f000 fca7 	bl	8005630 <spi_xfer>
  spi_xfer(RFM_SPI, data);             
 8004ce2:	b2b1      	uxth	r1, r6
 8004ce4:	0020      	movs	r0, r4
 8004ce6:	f000 fca3 	bl	8005630 <spi_xfer>

  spi_chip_deselect(); 
 8004cea:	2140      	movs	r1, #64	; 0x40
 8004cec:	0038      	movs	r0, r7
 8004cee:	f000 fa9f 	bl	8005230 <gpio_set>
  timers_delay_microseconds(1);
 8004cf2:	2001      	movs	r0, #1
 8004cf4:	f000 f91e 	bl	8004f34 <timers_delay_microseconds>

  uint8_t curr_data = spi_read_single(reg);
 8004cf8:	0028      	movs	r0, r5
 8004cfa:	f7ff ffbd 	bl	8004c78 <spi_read_single>
 8004cfe:	0004      	movs	r4, r0

  // log_printf("%02x : %02x\n", reg, data);

  if(reg == RFM_REG_12_IRQ_FLAGS)    
 8004d00:	2d12      	cmp	r5, #18
 8004d02:	d013      	beq.n	8004d2c <spi_write_single+0x74>
    return;

  TIMEOUT(10000, "RFM SPI Write", ((reg << 16) | data), (curr_data == data), ;, timers_delay_microseconds(100); curr_data = spi_read_single(reg););
 8004d04:	f000 f968 	bl	8004fd8 <timeout_init>
 8004d08:	042a      	lsls	r2, r5, #16
 8004d0a:	4332      	orrs	r2, r6
 8004d0c:	4909      	ldr	r1, [pc, #36]	; (8004d34 <spi_write_single+0x7c>)
 8004d0e:	480a      	ldr	r0, [pc, #40]	; (8004d38 <spi_write_single+0x80>)
 8004d10:	f000 f970 	bl	8004ff4 <timeout>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	d109      	bne.n	8004d2c <spi_write_single+0x74>
 8004d18:	42b4      	cmp	r4, r6
 8004d1a:	d007      	beq.n	8004d2c <spi_write_single+0x74>
 8004d1c:	2064      	movs	r0, #100	; 0x64
 8004d1e:	f000 f909 	bl	8004f34 <timers_delay_microseconds>
 8004d22:	0028      	movs	r0, r5
 8004d24:	f7ff ffa8 	bl	8004c78 <spi_read_single>
 8004d28:	0004      	movs	r4, r0
 8004d2a:	e7ed      	b.n	8004d08 <spi_write_single+0x50>

  // log_printf("%02x : %02x : %02x\n", reg, data, curr_data);
}
 8004d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	40003800 	.word	0x40003800
 8004d34:	08007018 	.word	0x08007018
 8004d38:	00002710 	.word	0x00002710

08004d3c <exti4_15_isr>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void exti4_15_isr(void)
{
 8004d3c:	b570      	push	{r4, r5, r6, lr}
  uint16_t timer = timers_micros();
 8004d3e:	f000 f90f 	bl	8004f60 <timers_micros>
  
  exti_reset_request(RFM_IO_0_EXTI);
 8004d42:	2480      	movs	r4, #128	; 0x80
 8004d44:	00e4      	lsls	r4, r4, #3
 8004d46:	0020      	movs	r0, r4
 8004d48:	f000 fa16 	bl	8005178 <exti_reset_request>
  exti_reset_request(RFM_IO_0_EXTI);
 8004d4c:	0020      	movs	r0, r4
 8004d4e:	f000 fa13 	bl	8005178 <exti_reset_request>

  // Store IRQ Flags
  packets_buf[packets_head].flags = get_irq();
 8004d52:	4d1b      	ldr	r5, [pc, #108]	; (8004dc0 <exti4_15_isr+0x84>)
 8004d54:	782e      	ldrb	r6, [r5, #0]
  return spi_read_single(RFM_REG_12_IRQ_FLAGS);
 8004d56:	2012      	movs	r0, #18
 8004d58:	f7ff ff8e 	bl	8004c78 <spi_read_single>
  packets_buf[packets_head].flags = get_irq();
 8004d5c:	4c19      	ldr	r4, [pc, #100]	; (8004dc4 <exti4_15_isr+0x88>)
 8004d5e:	0073      	lsls	r3, r6, #1
 8004d60:	199b      	adds	r3, r3, r6
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	18e3      	adds	r3, r4, r3
 8004d66:	7418      	strb	r0, [r3, #16]
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 8004d68:	21ff      	movs	r1, #255	; 0xff
 8004d6a:	2012      	movs	r0, #18
 8004d6c:	f7ff ffa4 	bl	8004cb8 <spi_write_single>
 8004d70:	21ff      	movs	r1, #255	; 0xff
 8004d72:	2012      	movs	r0, #18
 8004d74:	f7ff ffa0 	bl	8004cb8 <spi_write_single>
  clear_irq(RFM_IRQ_ALL);
  clear_irq(RFM_IRQ_ALL);

  // Get signal strength
  packets_buf[packets_head].rssi = spi_read_single(RFM_REG_1A_PKT_RSSI_VALUE);
 8004d78:	201a      	movs	r0, #26
 8004d7a:	f7ff ff7d 	bl	8004c78 <spi_read_single>
 8004d7e:	782a      	ldrb	r2, [r5, #0]
 8004d80:	b200      	sxth	r0, r0
  packets_buf[packets_head].rssi -= 137;
 8004d82:	0053      	lsls	r3, r2, #1
 8004d84:	189b      	adds	r3, r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	18e3      	adds	r3, r4, r3
 8004d8a:	3889      	subs	r0, #137	; 0x89
 8004d8c:	8298      	strh	r0, [r3, #20]
  packets_buf[packets_head].snr = spi_read_single(RFM_REG_19_PKT_SNR_VALUE) / 4;
 8004d8e:	2019      	movs	r0, #25
 8004d90:	f7ff ff72 	bl	8004c78 <spi_read_single>
 8004d94:	782b      	ldrb	r3, [r5, #0]
 8004d96:	005a      	lsls	r2, r3, #1
 8004d98:	18d2      	adds	r2, r2, r3
 8004d9a:	00d2      	lsls	r2, r2, #3
 8004d9c:	18a4      	adds	r4, r4, r2
 8004d9e:	0880      	lsrs	r0, r0, #2
 8004da0:	74a0      	strb	r0, [r4, #18]

  // Check for CRC error
  packets_buf[packets_head].crc_ok = !(packets_buf[packets_head].flags & RFM_IRQ_PAYLOAD_CRC_ERROR);
 8004da2:	7c22      	ldrb	r2, [r4, #16]
 8004da4:	0952      	lsrs	r2, r2, #5
 8004da6:	2101      	movs	r1, #1
 8004da8:	404a      	eors	r2, r1
 8004daa:	2101      	movs	r1, #1
 8004dac:	400a      	ands	r2, r1
 8004dae:	7462      	strb	r2, [r4, #17]

  packets_head = (packets_head + 1) % PACKETS_BUF_SIZE;
 8004db0:	3301      	adds	r3, #1
 8004db2:	220f      	movs	r2, #15
 8004db4:	4013      	ands	r3, r2
 8004db6:	702b      	strb	r3, [r5, #0]

  uint16_t time = timers_micros() - timer;
 8004db8:	f000 f8d2 	bl	8004f60 <timers_micros>
  // log_printf("ISR %u %u %u\n", time, packets_head, packets_tail);
}
 8004dbc:	bd70      	pop	{r4, r5, r6, pc}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	20000460 	.word	0x20000460
 8004dc4:	200002e0 	.word	0x200002e0

08004dc8 <test_mem_write_read>:
/*////////////////////////////////////////////////////////////////////////////*/
// Memory tests
/*////////////////////////////////////////////////////////////////////////////*/

void test_mem_write_read(void)
{
 8004dc8:	b570      	push	{r4, r5, r6, lr}
 8004dca:	b082      	sub	sp, #8
    uint32_t eeprom_address = EEPROM_END - EEPROM_PAGE_SIZE;
    uint32_t eeprom_word    = 0x12345678;

    uint32_t flash_address = FLASH_END - FLASH_PAGE_SIZE;
    uint32_t *flash_data   = (uint32_t*)malloc(64); 
 8004dcc:	2040      	movs	r0, #64	; 0x40
 8004dce:	f001 fd61 	bl	8006894 <malloc>
 8004dd2:	0004      	movs	r4, r0
    flash_data[0] = 0x12345678;
 8004dd4:	4e1e      	ldr	r6, [pc, #120]	; (8004e50 <test_mem_write_read+0x88>)
 8004dd6:	6006      	str	r6, [r0, #0]
    flash_data[1] = 0x24681234;
 8004dd8:	4b1e      	ldr	r3, [pc, #120]	; (8004e54 <test_mem_write_read+0x8c>)
 8004dda:	6043      	str	r3, [r0, #4]

    log_printf("Test Mem Write Read\n\n");
 8004ddc:	481e      	ldr	r0, [pc, #120]	; (8004e58 <test_mem_write_read+0x90>)
 8004dde:	f7ff fd25 	bl	800482c <log_printf>

    log_printf("EEPROM Start: %08x : %08x\n", eeprom_address, MMIO32(eeprom_address));
 8004de2:	4d1e      	ldr	r5, [pc, #120]	; (8004e5c <test_mem_write_read+0x94>)
 8004de4:	682a      	ldr	r2, [r5, #0]
 8004de6:	0029      	movs	r1, r5
 8004de8:	481d      	ldr	r0, [pc, #116]	; (8004e60 <test_mem_write_read+0x98>)
 8004dea:	f7ff fd1f 	bl	800482c <log_printf>
    log_printf("Programming: %08x\n", eeprom_word); mem_eeprom_write_word(eeprom_address, eeprom_word);
 8004dee:	0031      	movs	r1, r6
 8004df0:	481c      	ldr	r0, [pc, #112]	; (8004e64 <test_mem_write_read+0x9c>)
 8004df2:	f7ff fd1b 	bl	800482c <log_printf>
 8004df6:	0031      	movs	r1, r6
 8004df8:	0028      	movs	r0, r5
 8004dfa:	f7ff fd7b 	bl	80048f4 <mem_eeprom_write_word>
    log_printf("EEPROM End: %08x : %08x\n\n", eeprom_address, MMIO32(eeprom_address));
 8004dfe:	682a      	ldr	r2, [r5, #0]
 8004e00:	0029      	movs	r1, r5
 8004e02:	4819      	ldr	r0, [pc, #100]	; (8004e68 <test_mem_write_read+0xa0>)
 8004e04:	f7ff fd12 	bl	800482c <log_printf>

    log_printf("Flash Erase\n"); mem_flash_erase_page(flash_address);
 8004e08:	4818      	ldr	r0, [pc, #96]	; (8004e6c <test_mem_write_read+0xa4>)
 8004e0a:	f7ff fd0f 	bl	800482c <log_printf>
 8004e0e:	4d18      	ldr	r5, [pc, #96]	; (8004e70 <test_mem_write_read+0xa8>)
 8004e10:	0028      	movs	r0, r5
 8004e12:	f7ff fdf3 	bl	80049fc <mem_flash_erase_page>
    log_printf("Flash Start: %08x : %08x\n%08x : %08x\n", flash_address, MMIO32(flash_address), flash_address+4, MMIO32(flash_address+4));
 8004e16:	682a      	ldr	r2, [r5, #0]
 8004e18:	4e16      	ldr	r6, [pc, #88]	; (8004e74 <test_mem_write_read+0xac>)
 8004e1a:	6833      	ldr	r3, [r6, #0]
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	0033      	movs	r3, r6
 8004e20:	0029      	movs	r1, r5
 8004e22:	4815      	ldr	r0, [pc, #84]	; (8004e78 <test_mem_write_read+0xb0>)
 8004e24:	f7ff fd02 	bl	800482c <log_printf>
    log_printf("Programming %08x %08x\n", flash_data[0], flash_data[1]); mem_flash_write_half_page(flash_address, flash_data);
 8004e28:	6862      	ldr	r2, [r4, #4]
 8004e2a:	6821      	ldr	r1, [r4, #0]
 8004e2c:	4813      	ldr	r0, [pc, #76]	; (8004e7c <test_mem_write_read+0xb4>)
 8004e2e:	f7ff fcfd 	bl	800482c <log_printf>
 8004e32:	0021      	movs	r1, r4
 8004e34:	0028      	movs	r0, r5
 8004e36:	f7ff fdf1 	bl	8004a1c <mem_flash_write_half_page>
    // log_printf("Programming %08x\n", flash_data[1]); mem_flash_write_word(flash_address, flash_data[1]);
    log_printf("Flash End: %08x : %08x\n%08x : %08x\n", flash_address, MMIO32(flash_address), flash_address+4, MMIO32(flash_address+4));
 8004e3a:	682a      	ldr	r2, [r5, #0]
 8004e3c:	6833      	ldr	r3, [r6, #0]
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	0033      	movs	r3, r6
 8004e42:	0029      	movs	r1, r5
 8004e44:	480e      	ldr	r0, [pc, #56]	; (8004e80 <test_mem_write_read+0xb8>)
 8004e46:	f7ff fcf1 	bl	800482c <log_printf>
}
 8004e4a:	b002      	add	sp, #8
 8004e4c:	bd70      	pop	{r4, r5, r6, pc}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	12345678 	.word	0x12345678
 8004e54:	24681234 	.word	0x24681234
 8004e58:	08007028 	.word	0x08007028
 8004e5c:	080807fc 	.word	0x080807fc
 8004e60:	08007040 	.word	0x08007040
 8004e64:	0800705c 	.word	0x0800705c
 8004e68:	08007070 	.word	0x08007070
 8004e6c:	0800708c 	.word	0x0800708c
 8004e70:	0800ff80 	.word	0x0800ff80
 8004e74:	0800ff84 	.word	0x0800ff84
 8004e78:	0800709c 	.word	0x0800709c
 8004e7c:	080070c4 	.word	0x080070c4
 8004e80:	080070dc 	.word	0x080070dc

08004e84 <flash_led>:
    serial_printf("Checksum value: %8x %8x\n", crc, ~crc);
}


void flash_led(uint16_t milliseconds, uint8_t num_flashes)
{
 8004e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e86:	46c6      	mov	lr, r8
 8004e88:	b500      	push	{lr}
 8004e8a:	0005      	movs	r5, r0
 8004e8c:	4688      	mov	r8, r1
	gpio_mode_setup(LED_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, LED);
 8004e8e:	2680      	movs	r6, #128	; 0x80
 8004e90:	0076      	lsls	r6, r6, #1
 8004e92:	4c13      	ldr	r4, [pc, #76]	; (8004ee0 <flash_led+0x5c>)
 8004e94:	0033      	movs	r3, r6
 8004e96:	2200      	movs	r2, #0
 8004e98:	2101      	movs	r1, #1
 8004e9a:	0020      	movs	r0, r4
 8004e9c:	f000 f9cd 	bl	800523a <gpio_mode_setup>
	gpio_clear(LED_PORT, LED);
 8004ea0:	0031      	movs	r1, r6
 8004ea2:	0020      	movs	r0, r4
 8004ea4:	f000 f9c6 	bl	8005234 <gpio_clear>
	for(uint8_t i = 0; i < num_flashes; i++)
 8004ea8:	2400      	movs	r4, #0
 8004eaa:	4544      	cmp	r4, r8
 8004eac:	d215      	bcs.n	8004eda <flash_led+0x56>
	{
		gpio_set(LED_PORT, LED);
 8004eae:	2780      	movs	r7, #128	; 0x80
 8004eb0:	007f      	lsls	r7, r7, #1
 8004eb2:	4e0b      	ldr	r6, [pc, #44]	; (8004ee0 <flash_led+0x5c>)
 8004eb4:	0039      	movs	r1, r7
 8004eb6:	0030      	movs	r0, r6
 8004eb8:	f000 f9ba 	bl	8005230 <gpio_set>
		timers_delay_milliseconds(milliseconds / 4);
 8004ebc:	08a8      	lsrs	r0, r5, #2
 8004ebe:	f000 f86d 	bl	8004f9c <timers_delay_milliseconds>
		gpio_clear(LED_PORT, LED);
 8004ec2:	0039      	movs	r1, r7
 8004ec4:	0030      	movs	r0, r6
 8004ec6:	f000 f9b5 	bl	8005234 <gpio_clear>
		timers_delay_milliseconds(3 * milliseconds / 4);
 8004eca:	0068      	lsls	r0, r5, #1
 8004ecc:	1828      	adds	r0, r5, r0
 8004ece:	1080      	asrs	r0, r0, #2
 8004ed0:	f000 f864 	bl	8004f9c <timers_delay_milliseconds>
	for(uint8_t i = 0; i < num_flashes; i++)
 8004ed4:	3401      	adds	r4, #1
 8004ed6:	b2e4      	uxtb	r4, r4
 8004ed8:	e7e7      	b.n	8004eaa <flash_led+0x26>
	}
}
 8004eda:	bc80      	pop	{r7}
 8004edc:	46b8      	mov	r8, r7
 8004ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ee0:	50000400 	.word	0x50000400

08004ee4 <timers_lptim_init>:
}


// Setup lptim1 as approx. microsecond counter
void timers_lptim_init(void)
{
 8004ee4:	b510      	push	{r4, lr}
    // Input clock is 2.097Mhz
    rcc_set_peripheral_clk_sel(LPTIM1, RCC_CCIPR_LPTIM1SEL_APB);
 8004ee6:	4c10      	ldr	r4, [pc, #64]	; (8004f28 <timers_lptim_init+0x44>)
 8004ee8:	2100      	movs	r1, #0
 8004eea:	0020      	movs	r0, r4
 8004eec:	f000 fb34 	bl	8005558 <rcc_set_peripheral_clk_sel>
 
    rcc_periph_clock_enable(RCC_LPTIM1);
 8004ef0:	480e      	ldr	r0, [pc, #56]	; (8004f2c <timers_lptim_init+0x48>)
 8004ef2:	f000 fb67 	bl	80055c4 <rcc_periph_clock_enable>
    
    lptimer_set_internal_clock_source(LPTIM1);
 8004ef6:	0020      	movs	r0, r4
 8004ef8:	f000 fa26 	bl	8005348 <lptimer_set_internal_clock_source>
    lptimer_enable_trigger(LPTIM1, LPTIM_CFGR_TRIGEN_SW);
 8004efc:	2100      	movs	r1, #0
 8004efe:	0020      	movs	r0, r4
 8004f00:	f000 fa18 	bl	8005334 <lptimer_enable_trigger>
    lptimer_set_prescaler(LPTIM1, LPTIM_CFGR_PRESC_2);
 8004f04:	2180      	movs	r1, #128	; 0x80
 8004f06:	0089      	lsls	r1, r1, #2
 8004f08:	0020      	movs	r0, r4
 8004f0a:	f000 fa0b 	bl	8005324 <lptimer_set_prescaler>
    
    lptimer_enable(LPTIM1);
 8004f0e:	0020      	movs	r0, r4
 8004f10:	f000 f9fe 	bl	8005310 <lptimer_enable>
    
    lptimer_set_period(LPTIM1, 0xffff);
 8004f14:	4906      	ldr	r1, [pc, #24]	; (8004f30 <timers_lptim_init+0x4c>)
 8004f16:	0020      	movs	r0, r4
 8004f18:	f000 fa14 	bl	8005344 <lptimer_set_period>
    
    lptimer_start_counter(LPTIM1, LPTIM_CR_CNTSTRT);
 8004f1c:	2104      	movs	r1, #4
 8004f1e:	0020      	movs	r0, r4
 8004f20:	f000 f9fb 	bl	800531a <lptimer_start_counter>
}
 8004f24:	bd10      	pop	{r4, pc}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	40007c00 	.word	0x40007c00
 8004f2c:	0000071f 	.word	0x0000071f
 8004f30:	0000ffff 	.word	0x0000ffff

08004f34 <timers_delay_microseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_microseconds(uint32_t delay_microseconds)
{
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	0004      	movs	r4, r0
    uint32_t curr_time = lptimer_get_counter(LPTIM1);
 8004f38:	4807      	ldr	r0, [pc, #28]	; (8004f58 <timers_delay_microseconds+0x24>)
 8004f3a:	f000 f9e6 	bl	800530a <lptimer_get_counter>
 8004f3e:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_microseconds > 65000)
 8004f40:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <timers_delay_microseconds+0x28>)
 8004f42:	429c      	cmp	r4, r3
 8004f44:	d900      	bls.n	8004f48 <timers_delay_microseconds+0x14>
        delay_microseconds = 65000;
 8004f46:	001c      	movs	r4, r3

    while (lptimer_get_counter(LPTIM1) - curr_time < delay_microseconds);
 8004f48:	4803      	ldr	r0, [pc, #12]	; (8004f58 <timers_delay_microseconds+0x24>)
 8004f4a:	f000 f9de 	bl	800530a <lptimer_get_counter>
 8004f4e:	1b40      	subs	r0, r0, r5
 8004f50:	42a0      	cmp	r0, r4
 8004f52:	d3f9      	bcc.n	8004f48 <timers_delay_microseconds+0x14>
}
 8004f54:	bd70      	pop	{r4, r5, r6, pc}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	40007c00 	.word	0x40007c00
 8004f5c:	0000fde8 	.word	0x0000fde8

08004f60 <timers_micros>:
}
*/

// Returns value of microsecond counter
uint16_t timers_micros(void)
{
 8004f60:	b510      	push	{r4, lr}
    return (uint16_t)lptimer_get_counter(LPTIM1);
 8004f62:	4802      	ldr	r0, [pc, #8]	; (8004f6c <timers_micros+0xc>)
 8004f64:	f000 f9d1 	bl	800530a <lptimer_get_counter>
}
 8004f68:	bd10      	pop	{r4, pc}
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	40007c00 	.word	0x40007c00

08004f70 <timers_tim6_init>:


// Setup TIM6 as millisecond counter. Clocked by APB1
void timers_tim6_init(void)
{
 8004f70:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_TIM6);
 8004f72:	4808      	ldr	r0, [pc, #32]	; (8004f94 <timers_tim6_init+0x24>)
 8004f74:	f000 fb26 	bl	80055c4 <rcc_periph_clock_enable>
    timer_disable_counter(TIM6);
 8004f78:	4c07      	ldr	r4, [pc, #28]	; (8004f98 <timers_tim6_init+0x28>)
 8004f7a:	0020      	movs	r0, r4
 8004f7c:	f000 fb65 	bl	800564a <timer_disable_counter>
    timer_set_prescaler(TIM6, (2097 - 1));
 8004f80:	2183      	movs	r1, #131	; 0x83
 8004f82:	0109      	lsls	r1, r1, #4
 8004f84:	0020      	movs	r0, r4
 8004f86:	f000 fb65 	bl	8005654 <timer_set_prescaler>
    timer_enable_counter(TIM6);
 8004f8a:	0020      	movs	r0, r4
 8004f8c:	f000 fb58 	bl	8005640 <timer_enable_counter>
}
 8004f90:	bd10      	pop	{r4, pc}
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	00000704 	.word	0x00000704
 8004f98:	40001000 	.word	0x40001000

08004f9c <timers_delay_milliseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_milliseconds(uint32_t delay_milliseconds)
{
 8004f9c:	b570      	push	{r4, r5, r6, lr}
 8004f9e:	0004      	movs	r4, r0
    uint32_t curr_time = timer_get_counter(TIM6);
 8004fa0:	4807      	ldr	r0, [pc, #28]	; (8004fc0 <timers_delay_milliseconds+0x24>)
 8004fa2:	f000 fb59 	bl	8005658 <timer_get_counter>
 8004fa6:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_milliseconds > 65000)
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <timers_delay_milliseconds+0x28>)
 8004faa:	429c      	cmp	r4, r3
 8004fac:	d900      	bls.n	8004fb0 <timers_delay_milliseconds+0x14>
        delay_milliseconds = 65000;
 8004fae:	001c      	movs	r4, r3

    while (timer_get_counter(TIM6) - curr_time < delay_milliseconds);
 8004fb0:	4803      	ldr	r0, [pc, #12]	; (8004fc0 <timers_delay_milliseconds+0x24>)
 8004fb2:	f000 fb51 	bl	8005658 <timer_get_counter>
 8004fb6:	1b40      	subs	r0, r0, r5
 8004fb8:	42a0      	cmp	r0, r4
 8004fba:	d3f9      	bcc.n	8004fb0 <timers_delay_milliseconds+0x14>
}
 8004fbc:	bd70      	pop	{r4, r5, r6, pc}
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	40001000 	.word	0x40001000
 8004fc4:	0000fde8 	.word	0x0000fde8

08004fc8 <timers_millis>:

// Returns value of millisecond counter
uint16_t timers_millis(void)
{
 8004fc8:	b510      	push	{r4, lr}
    return timer_get_counter(TIM6);
 8004fca:	4802      	ldr	r0, [pc, #8]	; (8004fd4 <timers_millis+0xc>)
 8004fcc:	f000 fb44 	bl	8005658 <timer_get_counter>
 8004fd0:	b280      	uxth	r0, r0
}
 8004fd2:	bd10      	pop	{r4, pc}
 8004fd4:	40001000 	.word	0x40001000

08004fd8 <timeout_init>:
}


// Timout functions
void timeout_init(void)
{
 8004fd8:	b510      	push	{r4, lr}
    timeout_counter     = 0; 
 8004fda:	4b04      	ldr	r3, [pc, #16]	; (8004fec <timeout_init+0x14>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
    // timeout_counter     = 2140483648; 
    timeout_timer       = timers_micros(); 
 8004fe0:	f7ff ffbe 	bl	8004f60 <timers_micros>
 8004fe4:	4b02      	ldr	r3, [pc, #8]	; (8004ff0 <timeout_init+0x18>)
 8004fe6:	8018      	strh	r0, [r3, #0]
}
 8004fe8:	bd10      	pop	{r4, pc}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	20000464 	.word	0x20000464
 8004ff0:	20000468 	.word	0x20000468

08004ff4 <timeout>:

bool timeout(uint32_t time_microseconds, char *msg, uint32_t data)
{
 8004ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	0006      	movs	r6, r0
 8004ffa:	9101      	str	r1, [sp, #4]
 8004ffc:	0015      	movs	r5, r2
    timeout_counter    += (uint16_t)(timers_micros() - timeout_timer);
 8004ffe:	f7ff ffaf 	bl	8004f60 <timers_micros>
 8005002:	4c0c      	ldr	r4, [pc, #48]	; (8005034 <timeout+0x40>)
 8005004:	8823      	ldrh	r3, [r4, #0]
 8005006:	1ac3      	subs	r3, r0, r3
 8005008:	b29b      	uxth	r3, r3
 800500a:	4f0b      	ldr	r7, [pc, #44]	; (8005038 <timeout+0x44>)
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	4694      	mov	ip, r2
 8005010:	4463      	add	r3, ip
 8005012:	603b      	str	r3, [r7, #0]
    timeout_timer       = timers_micros();
 8005014:	f7ff ffa4 	bl	8004f60 <timers_micros>
 8005018:	8020      	strh	r0, [r4, #0]

    // log_printf("%u\n", timeout_counter);

    if(timeout_counter > time_microseconds)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	42b3      	cmp	r3, r6
 800501e:	d802      	bhi.n	8005026 <timeout+0x32>
    {
        log_printf("Timeout %s %08X\n", msg, data);
        return true;
    }
    else    
        return false;
 8005020:	2000      	movs	r0, #0
}
 8005022:	b003      	add	sp, #12
 8005024:	bdf0      	pop	{r4, r5, r6, r7, pc}
        log_printf("Timeout %s %08X\n", msg, data);
 8005026:	002a      	movs	r2, r5
 8005028:	9901      	ldr	r1, [sp, #4]
 800502a:	4804      	ldr	r0, [pc, #16]	; (800503c <timeout+0x48>)
 800502c:	f7ff fbfe 	bl	800482c <log_printf>
        return true;
 8005030:	2001      	movs	r0, #1
 8005032:	e7f6      	b.n	8005022 <timeout+0x2e>
 8005034:	20000468 	.word	0x20000468
 8005038:	20000464 	.word	0x20000464
 800503c:	08007100 	.word	0x08007100

08005040 <set_gpio_for_standby>:

void set_gpio_for_standby(void)
{   
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Common
    // LED
    gpio_mode_setup(LED_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, LED);
 8005042:	2680      	movs	r6, #128	; 0x80
 8005044:	0076      	lsls	r6, r6, #1
 8005046:	4c36      	ldr	r4, [pc, #216]	; (8005120 <set_gpio_for_standby+0xe0>)
 8005048:	0033      	movs	r3, r6
 800504a:	2200      	movs	r2, #0
 800504c:	2103      	movs	r1, #3
 800504e:	0020      	movs	r0, r4
 8005050:	f000 f8f3 	bl	800523a <gpio_mode_setup>
    gpio_set(LED_PORT, LED);
 8005054:	0031      	movs	r1, r6
 8005056:	0020      	movs	r0, r4
 8005058:	f000 f8ea 	bl	8005230 <gpio_set>

    // Serial Print
    gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, SPF_USART_TX);
 800505c:	2380      	movs	r3, #128	; 0x80
 800505e:	25a0      	movs	r5, #160	; 0xa0
 8005060:	05ed      	lsls	r5, r5, #23
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	2201      	movs	r2, #1
 8005066:	2100      	movs	r1, #0
 8005068:	0028      	movs	r0, r5
 800506a:	f000 f8e6 	bl	800523a <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE,  SPF_USART_RX);
 800506e:	2780      	movs	r7, #128	; 0x80
 8005070:	00ff      	lsls	r7, r7, #3
 8005072:	003b      	movs	r3, r7
 8005074:	2200      	movs	r2, #0
 8005076:	2101      	movs	r1, #1
 8005078:	0028      	movs	r0, r5
 800507a:	f000 f8de 	bl	800523a <gpio_mode_setup>
	gpio_set(SPF_USART_RX_PORT, SPF_USART_RX);
 800507e:	0039      	movs	r1, r7
 8005080:	0028      	movs	r0, r5
 8005082:	f000 f8d5 	bl	8005230 <gpio_set>

    // Batt Sense
    gpio_mode_setup(BATT_SENS_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, BATT_SENS);
 8005086:	2301      	movs	r3, #1
 8005088:	2200      	movs	r2, #0
 800508a:	2103      	movs	r1, #3
 800508c:	0028      	movs	r0, r5
 800508e:	f000 f8d4 	bl	800523a <gpio_mode_setup>
    
    // RFM
    // SPI
    gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_ANALOG,   GPIO_PUPD_NONE,       RFM_SPI_MISO);
 8005092:	2380      	movs	r3, #128	; 0x80
 8005094:	01db      	lsls	r3, r3, #7
 8005096:	2200      	movs	r2, #0
 8005098:	2103      	movs	r1, #3
 800509a:	0020      	movs	r0, r4
 800509c:	f000 f8cd 	bl	800523a <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_SCK_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_SCK);
 80050a0:	2380      	movs	r3, #128	; 0x80
 80050a2:	019b      	lsls	r3, r3, #6
 80050a4:	2202      	movs	r2, #2
 80050a6:	2100      	movs	r1, #0
 80050a8:	0020      	movs	r0, r4
 80050aa:	f000 f8c6 	bl	800523a <gpio_mode_setup>
    gpio_mode_setup(RFM_SPI_MOSI_PORT,  GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_MOSI);
 80050ae:	2380      	movs	r3, #128	; 0x80
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	2202      	movs	r2, #2
 80050b4:	2100      	movs	r1, #0
 80050b6:	0020      	movs	r0, r4
 80050b8:	f000 f8bf 	bl	800523a <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_NSS_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_SPI_NSS);
 80050bc:	2340      	movs	r3, #64	; 0x40
 80050be:	2201      	movs	r2, #1
 80050c0:	2100      	movs	r1, #0
 80050c2:	0028      	movs	r0, r5
 80050c4:	f000 f8b9 	bl	800523a <gpio_mode_setup>
    gpio_mode_setup(RFM_RESET_PORT,     GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_RESET);
 80050c8:	2310      	movs	r3, #16
 80050ca:	2201      	movs	r2, #1
 80050cc:	2100      	movs	r1, #0
 80050ce:	0028      	movs	r0, r5
 80050d0:	f000 f8b3 	bl	800523a <gpio_mode_setup>

    // DIO
    gpio_mode_setup(RFM_IO_0_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_0);
 80050d4:	003b      	movs	r3, r7
 80050d6:	2200      	movs	r2, #0
 80050d8:	2103      	movs	r1, #3
 80050da:	0020      	movs	r0, r4
 80050dc:	f000 f8ad 	bl	800523a <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_1_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_1);
 80050e0:	2380      	movs	r3, #128	; 0x80
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	2200      	movs	r2, #0
 80050e6:	2103      	movs	r1, #3
 80050e8:	0020      	movs	r0, r4
 80050ea:	f000 f8a6 	bl	800523a <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_2_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_2);
 80050ee:	0033      	movs	r3, r6
 80050f0:	2200      	movs	r2, #0
 80050f2:	2103      	movs	r1, #3
 80050f4:	0028      	movs	r0, r5
 80050f6:	f000 f8a0 	bl	800523a <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_3_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_3);
 80050fa:	2302      	movs	r3, #2
 80050fc:	2200      	movs	r2, #0
 80050fe:	2103      	movs	r1, #3
 8005100:	0020      	movs	r0, r4
 8005102:	f000 f89a 	bl	800523a <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_4_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_4);
 8005106:	2304      	movs	r3, #4
 8005108:	2200      	movs	r2, #0
 800510a:	2103      	movs	r1, #3
 800510c:	0020      	movs	r0, r4
 800510e:	f000 f894 	bl	800523a <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_5_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_5);
 8005112:	2301      	movs	r3, #1
 8005114:	2200      	movs	r2, #0
 8005116:	2103      	movs	r1, #3
 8005118:	0020      	movs	r0, r4
 800511a:	f000 f88e 	bl	800523a <gpio_mode_setup>
    gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
	gpio_mode_setup(TEMP_I2C_SDA_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SDA);

    #endif

}
 800511e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005120:	50000400 	.word	0x50000400

08005124 <rtc_isr>:

// Override default rtc interrupt handler
void rtc_isr(void)
{ 
 8005124:	b510      	push	{r4, lr}
    exti_reset_request(EXTI20);
 8005126:	2080      	movs	r0, #128	; 0x80
 8005128:	0340      	lsls	r0, r0, #13
 800512a:	f000 f825 	bl	8005178 <exti_reset_request>

    // scb_reset_system();

    log_init();
 800512e:	f7ff fb57 	bl	80047e0 <log_init>
    log_printf("RTC ISR\n");
 8005132:	480c      	ldr	r0, [pc, #48]	; (8005164 <rtc_isr+0x40>)
 8005134:	f7ff fb7a 	bl	800482c <log_printf>

    if(RTC_ISR & RTC_ISR_WUTF)
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <rtc_isr+0x44>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	055b      	lsls	r3, r3, #21
 800513e:	d400      	bmi.n	8005142 <rtc_isr+0x1e>
        pwr_clear_standby_flag();
        rtc_lock();
	    pwr_enable_backup_domain_write_protect();
        set_gpio_for_standby();
    }
}
 8005140:	bd10      	pop	{r4, pc}
        pwr_disable_backup_domain_write_protect();
 8005142:	f000 f907 	bl	8005354 <pwr_disable_backup_domain_write_protect>
        rtc_unlock();
 8005146:	f000 fa5b 	bl	8005600 <rtc_unlock>
	    rtc_clear_wakeup_flag();
 800514a:	f000 fa67 	bl	800561c <rtc_clear_wakeup_flag>
        pwr_clear_wakeup_flag();
 800514e:	f000 f91d 	bl	800538c <pwr_clear_wakeup_flag>
        pwr_clear_standby_flag();
 8005152:	f000 f913 	bl	800537c <pwr_clear_standby_flag>
        rtc_lock();
 8005156:	f000 fa5b 	bl	8005610 <rtc_lock>
	    pwr_enable_backup_domain_write_protect();
 800515a:	f000 f905 	bl	8005368 <pwr_enable_backup_domain_write_protect>
        set_gpio_for_standby();
 800515e:	f7ff ff6f 	bl	8005040 <set_gpio_for_standby>
}
 8005162:	e7ed      	b.n	8005140 <rtc_isr+0x1c>
 8005164:	08007114 	.word	0x08007114
 8005168:	4000280c 	.word	0x4000280c

0800516c <adc_start_conversion_regular>:
 * @param[in] adc ADC block register address base @ref adc_reg_base
 */
void adc_start_conversion_regular(uint32_t adc)
{
	/* Start conversion on regular channels. */
	ADC_CR(adc) |= ADC_CR_ADSTART;
 800516c:	2304      	movs	r3, #4
 800516e:	6882      	ldr	r2, [r0, #8]
 8005170:	4313      	orrs	r3, r2
 8005172:	6083      	str	r3, [r0, #8]
}
 8005174:	4770      	bx	lr
	...

08005178 <exti_reset_request>:
{
#if defined(EXTI_RPR1) && defined(EXTI_FPR1)
	EXTI_RPR1 = extis;
	EXTI_FPR1 = extis;
#else
	EXTI_PR = extis;
 8005178:	4b01      	ldr	r3, [pc, #4]	; (8005180 <exti_reset_request+0x8>)
 800517a:	6018      	str	r0, [r3, #0]
#endif
}
 800517c:	4770      	bx	lr
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	40010414 	.word	0x40010414

08005184 <flash_set_ws>:
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8005184:	2101      	movs	r1, #1
	reg32 = FLASH_ACR;
 8005186:	4a03      	ldr	r2, [pc, #12]	; (8005194 <flash_set_ws+0x10>)
 8005188:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 800518a:	438b      	bics	r3, r1
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 800518c:	4303      	orrs	r3, r0
	FLASH_ACR = reg32;
 800518e:	6013      	str	r3, [r2, #0]
}
 8005190:	4770      	bx	lr
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	40022000 	.word	0x40022000

08005198 <flash_unlock_option_bytes>:

void flash_unlock_option_bytes(void)
{
	FLASH_OPTKEYR = FLASH_OPTKEYR_KEY1;
 8005198:	4b02      	ldr	r3, [pc, #8]	; (80051a4 <flash_unlock_option_bytes+0xc>)
 800519a:	4a03      	ldr	r2, [pc, #12]	; (80051a8 <flash_unlock_option_bytes+0x10>)
 800519c:	601a      	str	r2, [r3, #0]
	FLASH_OPTKEYR = FLASH_OPTKEYR_KEY2;
 800519e:	4a03      	ldr	r2, [pc, #12]	; (80051ac <flash_unlock_option_bytes+0x14>)
 80051a0:	601a      	str	r2, [r3, #0]
}
 80051a2:	4770      	bx	lr
 80051a4:	40022014 	.word	0x40022014
 80051a8:	fbead9c8 	.word	0xfbead9c8
 80051ac:	24252627 	.word	0x24252627

080051b0 <flash_unlock_pecr>:
 * yourself.
 * @sa flash_unlock
 */
void flash_unlock_pecr(void)
{
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY1;
 80051b0:	4b02      	ldr	r3, [pc, #8]	; (80051bc <flash_unlock_pecr+0xc>)
 80051b2:	4a03      	ldr	r2, [pc, #12]	; (80051c0 <flash_unlock_pecr+0x10>)
 80051b4:	601a      	str	r2, [r3, #0]
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY2;
 80051b6:	4a03      	ldr	r2, [pc, #12]	; (80051c4 <flash_unlock_pecr+0x14>)
 80051b8:	601a      	str	r2, [r3, #0]
}
 80051ba:	4770      	bx	lr
 80051bc:	4002200c 	.word	0x4002200c
 80051c0:	89abcdef 	.word	0x89abcdef
 80051c4:	02030405 	.word	0x02030405

080051c8 <flash_lock_pecr>:

void flash_lock_pecr(void)
{
	FLASH_PECR |= FLASH_PECR_PELOCK;
 80051c8:	2301      	movs	r3, #1
 80051ca:	4a02      	ldr	r2, [pc, #8]	; (80051d4 <flash_lock_pecr+0xc>)
 80051cc:	6811      	ldr	r1, [r2, #0]
 80051ce:	430b      	orrs	r3, r1
 80051d0:	6013      	str	r3, [r2, #0]
}
 80051d2:	4770      	bx	lr
 80051d4:	40022004 	.word	0x40022004

080051d8 <flash_unlock_progmem>:
 * you must have already unlocked access to this register!
 * @sa flash_unlock_pecr
 */
void flash_unlock_progmem(void)
{
	FLASH_PRGKEYR = FLASH_PRGKEYR_PRGKEY1;
 80051d8:	4b02      	ldr	r3, [pc, #8]	; (80051e4 <flash_unlock_progmem+0xc>)
 80051da:	4a03      	ldr	r2, [pc, #12]	; (80051e8 <flash_unlock_progmem+0x10>)
 80051dc:	601a      	str	r2, [r3, #0]
	FLASH_PRGKEYR = FLASH_PRGKEYR_PRGKEY2;
 80051de:	4a03      	ldr	r2, [pc, #12]	; (80051ec <flash_unlock_progmem+0x14>)
 80051e0:	601a      	str	r2, [r3, #0]
}
 80051e2:	4770      	bx	lr
 80051e4:	40022010 	.word	0x40022010
 80051e8:	8c9daebf 	.word	0x8c9daebf
 80051ec:	13141516 	.word	0x13141516

080051f0 <flash_lock_progmem>:

void flash_lock_progmem(void)
{
	FLASH_PECR |= FLASH_PECR_PRGLOCK;
 80051f0:	2302      	movs	r3, #2
 80051f2:	4a02      	ldr	r2, [pc, #8]	; (80051fc <flash_lock_progmem+0xc>)
 80051f4:	6811      	ldr	r1, [r2, #0]
 80051f6:	430b      	orrs	r3, r1
 80051f8:	6013      	str	r3, [r2, #0]
}
 80051fa:	4770      	bx	lr
 80051fc:	40022004 	.word	0x40022004

08005200 <flash_lock_option_bytes>:

void flash_lock_option_bytes(void)
{
	FLASH_PECR |= FLASH_PECR_OPTLOCK;
 8005200:	2304      	movs	r3, #4
 8005202:	4a02      	ldr	r2, [pc, #8]	; (800520c <flash_lock_option_bytes+0xc>)
 8005204:	6811      	ldr	r1, [r2, #0]
 8005206:	430b      	orrs	r3, r1
 8005208:	6013      	str	r3, [r2, #0]
}
 800520a:	4770      	bx	lr
 800520c:	40022004 	.word	0x40022004

08005210 <flash_unlock>:

/** @brief Unlock all segments of flash
 *
 */
void flash_unlock(void)
{
 8005210:	b510      	push	{r4, lr}
	flash_unlock_pecr();
 8005212:	f7ff ffcd 	bl	80051b0 <flash_unlock_pecr>
	flash_unlock_progmem();
 8005216:	f7ff ffdf 	bl	80051d8 <flash_unlock_progmem>
	flash_unlock_option_bytes();
 800521a:	f7ff ffbd 	bl	8005198 <flash_unlock_option_bytes>
}
 800521e:	bd10      	pop	{r4, pc}

08005220 <flash_lock>:

/** @brief Lock all segments of flash
 *
 */
void flash_lock(void)
{
 8005220:	b510      	push	{r4, lr}
	flash_lock_option_bytes();
 8005222:	f7ff ffed 	bl	8005200 <flash_lock_option_bytes>
	flash_lock_progmem();
 8005226:	f7ff ffe3 	bl	80051f0 <flash_lock_progmem>
	flash_lock_pecr();
 800522a:	f7ff ffcd 	bl	80051c8 <flash_lock_pecr>
}
 800522e:	bd10      	pop	{r4, pc}

08005230 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8005230:	6181      	str	r1, [r0, #24]
}
 8005232:	4770      	bx	lr

08005234 <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8005234:	0409      	lsls	r1, r1, #16
 8005236:	6181      	str	r1, [r0, #24]
}
 8005238:	4770      	bx	lr

0800523a <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 800523a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800523c:	b085      	sub	sp, #20
 800523e:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8005240:	2703      	movs	r7, #3
	pupd = GPIO_PUPDR(gpioport);
 8005242:	2100      	movs	r1, #0
{
 8005244:	9202      	str	r2, [sp, #8]
 8005246:	9303      	str	r3, [sp, #12]
	moder = GPIO_MODER(gpioport);
 8005248:	6802      	ldr	r2, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 800524a:	68c3      	ldr	r3, [r0, #12]
		if (!((1 << i) & gpios)) {
 800524c:	9c03      	ldr	r4, [sp, #12]
 800524e:	2501      	movs	r5, #1
 8005250:	410c      	asrs	r4, r1
 8005252:	422c      	tst	r4, r5
 8005254:	d00a      	beq.n	800526c <gpio_mode_setup+0x32>
		moder &= ~GPIO_MODE_MASK(i);
 8005256:	003d      	movs	r5, r7
 8005258:	004c      	lsls	r4, r1, #1
 800525a:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 800525c:	9e01      	ldr	r6, [sp, #4]
		moder &= ~GPIO_MODE_MASK(i);
 800525e:	43aa      	bics	r2, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 8005260:	43ab      	bics	r3, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 8005262:	9d02      	ldr	r5, [sp, #8]
		moder |= GPIO_MODE(i, mode);
 8005264:	40a6      	lsls	r6, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 8005266:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8005268:	4332      	orrs	r2, r6
		pupd |= GPIO_PUPD(i, pull_up_down);
 800526a:	432b      	orrs	r3, r5
	for (i = 0; i < 16; i++) {
 800526c:	3101      	adds	r1, #1
 800526e:	2910      	cmp	r1, #16
 8005270:	d1ec      	bne.n	800524c <gpio_mode_setup+0x12>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 8005272:	6002      	str	r2, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 8005274:	60c3      	str	r3, [r0, #12]
}
 8005276:	b005      	add	sp, #20
 8005278:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800527a <gpio_set_output_options>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_output_options(uint32_t gpioport, uint8_t otype, uint8_t speed,
			     uint16_t gpios)
{
 800527a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800527c:	9201      	str	r2, [sp, #4]
	uint16_t i;
	uint32_t ospeedr;

	if (otype == 0x1) {
 800527e:	2901      	cmp	r1, #1
 8005280:	d116      	bne.n	80052b0 <gpio_set_output_options+0x36>
		GPIO_OTYPER(gpioport) |= gpios;
 8005282:	6841      	ldr	r1, [r0, #4]
 8005284:	4319      	orrs	r1, r3
	} else {
		GPIO_OTYPER(gpioport) &= ~gpios;
	}

	ospeedr = GPIO_OSPEEDR(gpioport);
 8005286:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8005288:	2601      	movs	r6, #1
			continue;
		}
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 800528a:	2703      	movs	r7, #3
		GPIO_OTYPER(gpioport) &= ~gpios;
 800528c:	6041      	str	r1, [r0, #4]
	ospeedr = GPIO_OSPEEDR(gpioport);
 800528e:	6881      	ldr	r1, [r0, #8]
		if (!((1 << i) & gpios)) {
 8005290:	001d      	movs	r5, r3
 8005292:	4125      	asrs	r5, r4
 8005294:	4235      	tst	r5, r6
 8005296:	d006      	beq.n	80052a6 <gpio_set_output_options+0x2c>
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8005298:	003a      	movs	r2, r7
 800529a:	0065      	lsls	r5, r4, #1
 800529c:	40aa      	lsls	r2, r5
 800529e:	4391      	bics	r1, r2
		ospeedr |= GPIO_OSPEED(i, speed);
 80052a0:	9a01      	ldr	r2, [sp, #4]
 80052a2:	40aa      	lsls	r2, r5
 80052a4:	4311      	orrs	r1, r2
	for (i = 0; i < 16; i++) {
 80052a6:	3401      	adds	r4, #1
 80052a8:	2c10      	cmp	r4, #16
 80052aa:	d1f1      	bne.n	8005290 <gpio_set_output_options+0x16>
	}

	GPIO_OSPEEDR(gpioport) = ospeedr;
 80052ac:	6081      	str	r1, [r0, #8]
}
 80052ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		GPIO_OTYPER(gpioport) &= ~gpios;
 80052b0:	6841      	ldr	r1, [r0, #4]
 80052b2:	4399      	bics	r1, r3
 80052b4:	e7e7      	b.n	8005286 <gpio_set_output_options+0xc>

080052b6 <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 80052b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);
 80052b8:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 80052ba:	2601      	movs	r6, #1
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 80052bc:	270f      	movs	r7, #15
	afrl = GPIO_AFRL(gpioport);
 80052be:	6a04      	ldr	r4, [r0, #32]
{
 80052c0:	9100      	str	r1, [sp, #0]
	afrh = GPIO_AFRH(gpioport);
 80052c2:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 80052c4:	9201      	str	r2, [sp, #4]
		if (!((1 << i) & gpios)) {
 80052c6:	9d01      	ldr	r5, [sp, #4]
 80052c8:	411d      	asrs	r5, r3
 80052ca:	4235      	tst	r5, r6
 80052cc:	d006      	beq.n	80052dc <gpio_set_af+0x26>
		afrl &= ~GPIO_AFR_MASK(i);
 80052ce:	003a      	movs	r2, r7
 80052d0:	009d      	lsls	r5, r3, #2
 80052d2:	40aa      	lsls	r2, r5
 80052d4:	4394      	bics	r4, r2
		afrl |= GPIO_AFR(i, alt_func_num);
 80052d6:	9a00      	ldr	r2, [sp, #0]
 80052d8:	40aa      	lsls	r2, r5
 80052da:	4314      	orrs	r4, r2
	for (i = 0; i < 8; i++) {
 80052dc:	3301      	adds	r3, #1
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d1f1      	bne.n	80052c6 <gpio_set_af+0x10>
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 80052e2:	2601      	movs	r6, #1
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 80052e4:	270f      	movs	r7, #15
		if (!((1 << i) & gpios)) {
 80052e6:	9a01      	ldr	r2, [sp, #4]
 80052e8:	411a      	asrs	r2, r3
 80052ea:	4232      	tst	r2, r6
 80052ec:	d007      	beq.n	80052fe <gpio_set_af+0x48>
		afrh &= ~GPIO_AFR_MASK(i - 8);
 80052ee:	003a      	movs	r2, r7
 80052f0:	009d      	lsls	r5, r3, #2
 80052f2:	3d20      	subs	r5, #32
 80052f4:	40aa      	lsls	r2, r5
 80052f6:	4391      	bics	r1, r2
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 80052f8:	9a00      	ldr	r2, [sp, #0]
 80052fa:	40aa      	lsls	r2, r5
 80052fc:	4311      	orrs	r1, r2
	for (i = 8; i < 16; i++) {
 80052fe:	3301      	adds	r3, #1
 8005300:	2b10      	cmp	r3, #16
 8005302:	d1f0      	bne.n	80052e6 <gpio_set_af+0x30>
	}

	GPIO_AFRL(gpioport) = afrl;
 8005304:	6204      	str	r4, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 8005306:	6241      	str	r1, [r0, #36]	; 0x24
}
 8005308:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0800530a <lptimer_get_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @returns Counter value.
 */
uint16_t lptimer_get_counter(uint32_t lptimer_peripheral)
{
	return LPTIM_CNT(lptimer_peripheral);
 800530a:	69c0      	ldr	r0, [r0, #28]
 800530c:	b280      	uxth	r0, r0
}
 800530e:	4770      	bx	lr

08005310 <lptimer_enable>:
 *
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 */
void lptimer_enable(uint32_t lptimer_peripheral)
{
	LPTIM_CR(lptimer_peripheral) |= LPTIM_CR_ENABLE;
 8005310:	2301      	movs	r3, #1
 8005312:	6902      	ldr	r2, [r0, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	6103      	str	r3, [r0, #16]
}
 8005318:	4770      	bx	lr

0800531a <lptimer_start_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] mode lptimer start mode (@ref LPTIM_CR_SNGSTRT or @ref LPTIM_CR_CNTSTRT)
 */
void lptimer_start_counter(uint32_t lptimer_peripheral, uint32_t mode)
{
	LPTIM_CR(lptimer_peripheral) |= mode;
 800531a:	6903      	ldr	r3, [r0, #16]
 800531c:	430b      	orrs	r3, r1
 800531e:	6103      	str	r3, [r0, #16]
}
 8005320:	4770      	bx	lr
	...

08005324 <lptimer_set_prescaler>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] prescaler Clock prescaler (@ref lptim_cfgr_presc)
 */
void lptimer_set_prescaler(uint32_t lptimer_peripheral, uint32_t prescaler)
{
	uint32_t reg32 = LPTIM_CFGR(lptimer_peripheral);
 8005324:	68c3      	ldr	r3, [r0, #12]
	reg32 &= ~(LPTIM_CFGR_PRESC_MASK << LPTIM_CFGR_PRESC_SHIFT);
 8005326:	4a02      	ldr	r2, [pc, #8]	; (8005330 <lptimer_set_prescaler+0xc>)
 8005328:	4013      	ands	r3, r2
	LPTIM_CFGR(lptimer_peripheral) = reg32 | prescaler;
 800532a:	430b      	orrs	r3, r1
 800532c:	60c3      	str	r3, [r0, #12]
}
 800532e:	4770      	bx	lr
 8005330:	fffff1ff 	.word	0xfffff1ff

08005334 <lptimer_enable_trigger>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] trigen Enable Trigger
 */
void lptimer_enable_trigger(uint32_t lptimer_peripheral, uint32_t trigen)
{
	uint32_t reg32 = LPTIM_CFGR(lptimer_peripheral);
 8005334:	68c3      	ldr	r3, [r0, #12]
	reg32 &= ~(LPTIM_CFGR_TRIGEN_MASK << LPTIM_CFGR_TRIGEN_SHIFT);
 8005336:	4a02      	ldr	r2, [pc, #8]	; (8005340 <lptimer_enable_trigger+0xc>)
 8005338:	4013      	ands	r3, r2
	LPTIM_CFGR(lptimer_peripheral) = reg32 | trigen;
 800533a:	430b      	orrs	r3, r1
 800533c:	60c3      	str	r3, [r0, #12]
}
 800533e:	4770      	bx	lr
 8005340:	fff1ffff 	.word	0xfff1ffff

08005344 <lptimer_set_period>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] period_value Autoreload value. Must be greater that CMP value.
 */
void lptimer_set_period(uint32_t lptimer_peripheral, uint16_t period_value)
{
	LPTIM_ARR(lptimer_peripheral) = period_value;
 8005344:	6181      	str	r1, [r0, #24]
}
 8005346:	4770      	bx	lr

08005348 <lptimer_set_internal_clock_source>:
 *
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 */
void lptimer_set_internal_clock_source(uint32_t lptimer_peripheral)
{
	LPTIM_CFGR(lptimer_peripheral) &= ~LPTIM_CFGR_CKSEL;
 8005348:	2201      	movs	r2, #1
 800534a:	68c3      	ldr	r3, [r0, #12]
 800534c:	4393      	bics	r3, r2
 800534e:	60c3      	str	r3, [r0, #12]
}
 8005350:	4770      	bx	lr
	...

08005354 <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 8005354:	2380      	movs	r3, #128	; 0x80
 8005356:	4a03      	ldr	r2, [pc, #12]	; (8005364 <pwr_disable_backup_domain_write_protect+0x10>)
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	6811      	ldr	r1, [r2, #0]
 800535c:	430b      	orrs	r3, r1
 800535e:	6013      	str	r3, [r2, #0]
}
 8005360:	4770      	bx	lr
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	40007000 	.word	0x40007000

08005368 <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 8005368:	4a02      	ldr	r2, [pc, #8]	; (8005374 <pwr_enable_backup_domain_write_protect+0xc>)
 800536a:	4903      	ldr	r1, [pc, #12]	; (8005378 <pwr_enable_backup_domain_write_protect+0x10>)
 800536c:	6813      	ldr	r3, [r2, #0]
 800536e:	400b      	ands	r3, r1
 8005370:	6013      	str	r3, [r2, #0]
}
 8005372:	4770      	bx	lr
 8005374:	40007000 	.word	0x40007000
 8005378:	fffffeff 	.word	0xfffffeff

0800537c <pwr_clear_standby_flag>:
This is set when the processor returns from a standby mode.
*/

void pwr_clear_standby_flag(void)
{
	PWR_CR |= PWR_CR_CSBF;
 800537c:	2308      	movs	r3, #8
 800537e:	4a02      	ldr	r2, [pc, #8]	; (8005388 <pwr_clear_standby_flag+0xc>)
 8005380:	6811      	ldr	r1, [r2, #0]
 8005382:	430b      	orrs	r3, r1
 8005384:	6013      	str	r3, [r2, #0]
}
 8005386:	4770      	bx	lr
 8005388:	40007000 	.word	0x40007000

0800538c <pwr_clear_wakeup_flag>:
This is set when the processor receives a wakeup signal.
*/

void pwr_clear_wakeup_flag(void)
{
	PWR_CR |= PWR_CR_CWUF;
 800538c:	2304      	movs	r3, #4
 800538e:	4a02      	ldr	r2, [pc, #8]	; (8005398 <pwr_clear_wakeup_flag+0xc>)
 8005390:	6811      	ldr	r1, [r2, #0]
 8005392:	430b      	orrs	r3, r1
 8005394:	6013      	str	r3, [r2, #0]
}
 8005396:	4770      	bx	lr
 8005398:	40007000 	.word	0x40007000

0800539c <rcc_osc_on>:
uint32_t rcc_ahb_frequency = 2097000;
uint32_t rcc_apb1_frequency = 2097000;
uint32_t rcc_apb2_frequency = 2097000;

void rcc_osc_on(enum rcc_osc osc)
{
 800539c:	b500      	push	{lr}
 800539e:	2806      	cmp	r0, #6
 80053a0:	d80b      	bhi.n	80053ba <rcc_osc_on+0x1e>
 80053a2:	f001 fb15 	bl	80069d0 <__gnu_thumb1_case_uqi>
 80053a6:	1004      	.short	0x1004
 80053a8:	1b0b1915 	.word	0x1b0b1915
 80053ac:	1d          	.byte	0x1d
 80053ad:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 80053ae:	2380      	movs	r3, #128	; 0x80
 80053b0:	4a0c      	ldr	r2, [pc, #48]	; (80053e4 <rcc_osc_on+0x48>)
 80053b2:	045b      	lsls	r3, r3, #17
 80053b4:	6811      	ldr	r1, [r2, #0]
		break;
	case RCC_LSE:
		RCC_CSR |= RCC_CSR_LSEON;
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
 80053b6:	430b      	orrs	r3, r1
 80053b8:	6013      	str	r3, [r2, #0]
		break;
	}
}
 80053ba:	bd00      	pop	{pc}
		RCC_CR |= RCC_CR_MSION;
 80053bc:	4a09      	ldr	r2, [pc, #36]	; (80053e4 <rcc_osc_on+0x48>)
		RCC_CSR |= RCC_CSR_LSEON;
 80053be:	2380      	movs	r3, #128	; 0x80
 80053c0:	6811      	ldr	r1, [r2, #0]
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	e7f7      	b.n	80053b6 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSEON;
 80053c6:	2380      	movs	r3, #128	; 0x80
 80053c8:	4a06      	ldr	r2, [pc, #24]	; (80053e4 <rcc_osc_on+0x48>)
 80053ca:	025b      	lsls	r3, r3, #9
 80053cc:	6811      	ldr	r1, [r2, #0]
 80053ce:	e7f2      	b.n	80053b6 <rcc_osc_on+0x1a>
		RCC_CRRCR |= RCC_CRRCR_HSI48ON;
 80053d0:	4a05      	ldr	r2, [pc, #20]	; (80053e8 <rcc_osc_on+0x4c>)
		RCC_CSR |= RCC_CSR_LSION;
 80053d2:	2301      	movs	r3, #1
 80053d4:	6811      	ldr	r1, [r2, #0]
 80053d6:	e7ee      	b.n	80053b6 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSI16ON;
 80053d8:	4a02      	ldr	r2, [pc, #8]	; (80053e4 <rcc_osc_on+0x48>)
 80053da:	e7fa      	b.n	80053d2 <rcc_osc_on+0x36>
		RCC_CSR |= RCC_CSR_LSEON;
 80053dc:	4a03      	ldr	r2, [pc, #12]	; (80053ec <rcc_osc_on+0x50>)
 80053de:	e7ee      	b.n	80053be <rcc_osc_on+0x22>
		RCC_CSR |= RCC_CSR_LSION;
 80053e0:	4a02      	ldr	r2, [pc, #8]	; (80053ec <rcc_osc_on+0x50>)
 80053e2:	e7f6      	b.n	80053d2 <rcc_osc_on+0x36>
 80053e4:	40021000 	.word	0x40021000
 80053e8:	40021008 	.word	0x40021008
 80053ec:	40021050 	.word	0x40021050

080053f0 <rcc_osc_off>:

void rcc_osc_off(enum rcc_osc osc)
{
 80053f0:	b500      	push	{lr}
 80053f2:	2806      	cmp	r0, #6
 80053f4:	d80a      	bhi.n	800540c <rcc_osc_off+0x1c>
 80053f6:	f001 faeb 	bl	80069d0 <__gnu_thumb1_case_uqi>
 80053fa:	0e04      	.short	0x0e04
 80053fc:	190a1712 	.word	0x190a1712
 8005400:	1b          	.byte	0x1b
 8005401:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR &= ~RCC_CR_PLLON;
 8005402:	4a0c      	ldr	r2, [pc, #48]	; (8005434 <rcc_osc_off+0x44>)
 8005404:	490c      	ldr	r1, [pc, #48]	; (8005438 <rcc_osc_off+0x48>)
 8005406:	6813      	ldr	r3, [r2, #0]
		break;
	case RCC_HSI16:
		RCC_CR &= ~RCC_CR_HSI16ON;
		break;
	case RCC_LSE:
		RCC_CSR &= ~RCC_CSR_LSEON;
 8005408:	400b      	ands	r3, r1
		break;
	case RCC_LSI:
		RCC_CSR &= ~RCC_CSR_LSION;
 800540a:	6013      	str	r3, [r2, #0]
		break;
	}
}
 800540c:	bd00      	pop	{pc}
		RCC_CR &= ~RCC_CR_MSION;
 800540e:	4a09      	ldr	r2, [pc, #36]	; (8005434 <rcc_osc_off+0x44>)
		RCC_CSR &= ~RCC_CSR_LSEON;
 8005410:	6813      	ldr	r3, [r2, #0]
 8005412:	490a      	ldr	r1, [pc, #40]	; (800543c <rcc_osc_off+0x4c>)
 8005414:	e7f8      	b.n	8005408 <rcc_osc_off+0x18>
		RCC_CR &= ~RCC_CR_HSEON;
 8005416:	4a07      	ldr	r2, [pc, #28]	; (8005434 <rcc_osc_off+0x44>)
 8005418:	4909      	ldr	r1, [pc, #36]	; (8005440 <rcc_osc_off+0x50>)
 800541a:	6813      	ldr	r3, [r2, #0]
 800541c:	e7f4      	b.n	8005408 <rcc_osc_off+0x18>
		RCC_CRRCR &= ~RCC_CRRCR_HSI48ON;
 800541e:	4a09      	ldr	r2, [pc, #36]	; (8005444 <rcc_osc_off+0x54>)
		RCC_CSR &= ~RCC_CSR_LSION;
 8005420:	2101      	movs	r1, #1
 8005422:	6813      	ldr	r3, [r2, #0]
 8005424:	438b      	bics	r3, r1
 8005426:	e7f0      	b.n	800540a <rcc_osc_off+0x1a>
		RCC_CR &= ~RCC_CR_HSI16ON;
 8005428:	4a02      	ldr	r2, [pc, #8]	; (8005434 <rcc_osc_off+0x44>)
 800542a:	e7f9      	b.n	8005420 <rcc_osc_off+0x30>
		RCC_CSR &= ~RCC_CSR_LSEON;
 800542c:	4a06      	ldr	r2, [pc, #24]	; (8005448 <rcc_osc_off+0x58>)
 800542e:	e7ef      	b.n	8005410 <rcc_osc_off+0x20>
		RCC_CSR &= ~RCC_CSR_LSION;
 8005430:	4a05      	ldr	r2, [pc, #20]	; (8005448 <rcc_osc_off+0x58>)
 8005432:	e7f5      	b.n	8005420 <rcc_osc_off+0x30>
 8005434:	40021000 	.word	0x40021000
 8005438:	feffffff 	.word	0xfeffffff
 800543c:	fffffeff 	.word	0xfffffeff
 8005440:	fffeffff 	.word	0xfffeffff
 8005444:	40021008 	.word	0x40021008
 8005448:	40021050 	.word	0x40021050

0800544c <rcc_is_osc_ready>:
	cm3_assert_not_reached();
}


bool rcc_is_osc_ready(enum rcc_osc osc)
{
 800544c:	2300      	movs	r3, #0
 800544e:	b500      	push	{lr}
 8005450:	2806      	cmp	r0, #6
 8005452:	d80a      	bhi.n	800546a <rcc_is_osc_ready+0x1e>
 8005454:	3301      	adds	r3, #1
 8005456:	f001 fabb 	bl	80069d0 <__gnu_thumb1_case_uqi>
 800545a:	0a04      	.short	0x0a04
 800545c:	1a160e12 	.word	0x1a160e12
 8005460:	1c          	.byte	0x1c
 8005461:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 8005462:	4a0d      	ldr	r2, [pc, #52]	; (8005498 <rcc_is_osc_ready+0x4c>)
 8005464:	6810      	ldr	r0, [r2, #0]
 8005466:	0e40      	lsrs	r0, r0, #25
	case RCC_MSI:
		return RCC_CR & RCC_CR_MSIRDY;
	case RCC_LSE:
		return RCC_CSR & RCC_CSR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 8005468:	4003      	ands	r3, r0
	}
	return false;
}
 800546a:	0018      	movs	r0, r3
 800546c:	bd00      	pop	{pc}
		return RCC_CR & RCC_CR_HSERDY;
 800546e:	4a0a      	ldr	r2, [pc, #40]	; (8005498 <rcc_is_osc_ready+0x4c>)
 8005470:	6810      	ldr	r0, [r2, #0]
 8005472:	0c40      	lsrs	r0, r0, #17
 8005474:	e7f8      	b.n	8005468 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_HSI16RDY;
 8005476:	4a08      	ldr	r2, [pc, #32]	; (8005498 <rcc_is_osc_ready+0x4c>)
 8005478:	6810      	ldr	r0, [r2, #0]
 800547a:	0880      	lsrs	r0, r0, #2
 800547c:	e7f4      	b.n	8005468 <rcc_is_osc_ready+0x1c>
		return RCC_CRRCR & RCC_CRRCR_HSI48RDY;
 800547e:	4a07      	ldr	r2, [pc, #28]	; (800549c <rcc_is_osc_ready+0x50>)
		return RCC_CSR & RCC_CSR_LSIRDY;
 8005480:	6810      	ldr	r0, [r2, #0]
 8005482:	0840      	lsrs	r0, r0, #1
 8005484:	e7f0      	b.n	8005468 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_MSIRDY;
 8005486:	4a04      	ldr	r2, [pc, #16]	; (8005498 <rcc_is_osc_ready+0x4c>)
		return RCC_CSR & RCC_CSR_LSERDY;
 8005488:	6810      	ldr	r0, [r2, #0]
 800548a:	0a40      	lsrs	r0, r0, #9
 800548c:	e7ec      	b.n	8005468 <rcc_is_osc_ready+0x1c>
 800548e:	4a04      	ldr	r2, [pc, #16]	; (80054a0 <rcc_is_osc_ready+0x54>)
 8005490:	e7fa      	b.n	8005488 <rcc_is_osc_ready+0x3c>
		return RCC_CSR & RCC_CSR_LSIRDY;
 8005492:	4a03      	ldr	r2, [pc, #12]	; (80054a0 <rcc_is_osc_ready+0x54>)
 8005494:	e7f4      	b.n	8005480 <rcc_is_osc_ready+0x34>
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	40021000 	.word	0x40021000
 800549c:	40021008 	.word	0x40021008
 80054a0:	40021050 	.word	0x40021050

080054a4 <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 80054a4:	b510      	push	{r4, lr}
 80054a6:	0004      	movs	r4, r0
	while (!rcc_is_osc_ready(osc));
 80054a8:	0020      	movs	r0, r4
 80054aa:	f7ff ffcf 	bl	800544c <rcc_is_osc_ready>
 80054ae:	2800      	cmp	r0, #0
 80054b0:	d0fa      	beq.n	80054a8 <rcc_wait_for_osc_ready+0x4>
}
 80054b2:	bd10      	pop	{r4, pc}

080054b4 <rcc_set_hsi48_source_rc48>:
/*---------------------------------------------------------------------------*/
/** @brief RCC Set HSI48 clock source to the RC48 (CRS)
 */
void rcc_set_hsi48_source_rc48(void)
{
	RCC_CCIPR |= RCC_CCIPR_HSI48SEL;
 80054b4:	2380      	movs	r3, #128	; 0x80
 80054b6:	4a03      	ldr	r2, [pc, #12]	; (80054c4 <rcc_set_hsi48_source_rc48+0x10>)
 80054b8:	04db      	lsls	r3, r3, #19
 80054ba:	6811      	ldr	r1, [r2, #0]
 80054bc:	430b      	orrs	r3, r1
 80054be:	6013      	str	r3, [r2, #0]
}
 80054c0:	4770      	bx	lr
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	4002104c 	.word	0x4002104c

080054c8 <rcc_set_sysclk_source>:
 *
 * @param[in] osc Oscillator ID. Only HSE, HSI16, MSI and PLL have effect.
 */

void rcc_set_sysclk_source(enum rcc_osc osc)
{
 80054c8:	b500      	push	{lr}
 80054ca:	2804      	cmp	r0, #4
 80054cc:	d812      	bhi.n	80054f4 <rcc_set_sysclk_source+0x2c>
 80054ce:	f001 fa7f 	bl	80069d0 <__gnu_thumb1_case_uqi>
 80054d2:	0903      	.short	0x0903
 80054d4:	1211      	.short	0x1211
 80054d6:	19          	.byte	0x19
 80054d7:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CFGR |=  RCC_CFGR_SW_PLL;
 80054d8:	2303      	movs	r3, #3
 80054da:	4a0d      	ldr	r2, [pc, #52]	; (8005510 <rcc_set_sysclk_source+0x48>)
 80054dc:	6811      	ldr	r1, [r2, #0]
 80054de:	430b      	orrs	r3, r1
		break;
	case RCC_HSI16:
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_HSI16;
		break;
	case RCC_MSI:
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_MSI;
 80054e0:	6013      	str	r3, [r2, #0]
	case RCC_HSI48:
	case RCC_LSE:
	case RCC_LSI:
		break;
	}
}
 80054e2:	e007      	b.n	80054f4 <rcc_set_sysclk_source+0x2c>
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_HSE;
 80054e4:	2203      	movs	r2, #3
 80054e6:	490a      	ldr	r1, [pc, #40]	; (8005510 <rcc_set_sysclk_source+0x48>)
 80054e8:	680b      	ldr	r3, [r1, #0]
 80054ea:	4393      	bics	r3, r2
 80054ec:	001a      	movs	r2, r3
 80054ee:	2302      	movs	r3, #2
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_HSI16;
 80054f0:	4313      	orrs	r3, r2
 80054f2:	600b      	str	r3, [r1, #0]
}
 80054f4:	bd00      	pop	{pc}
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_HSI16;
 80054f6:	2203      	movs	r2, #3
 80054f8:	4905      	ldr	r1, [pc, #20]	; (8005510 <rcc_set_sysclk_source+0x48>)
 80054fa:	680b      	ldr	r3, [r1, #0]
 80054fc:	4393      	bics	r3, r2
 80054fe:	001a      	movs	r2, r3
 8005500:	2301      	movs	r3, #1
 8005502:	e7f5      	b.n	80054f0 <rcc_set_sysclk_source+0x28>
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_MSI;
 8005504:	2103      	movs	r1, #3
 8005506:	4a02      	ldr	r2, [pc, #8]	; (8005510 <rcc_set_sysclk_source+0x48>)
 8005508:	6813      	ldr	r3, [r2, #0]
 800550a:	438b      	bics	r3, r1
 800550c:	e7e8      	b.n	80054e0 <rcc_set_sysclk_source+0x18>
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	4002100c 	.word	0x4002100c

08005514 <rcc_set_ppre1>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb1pre
 */

void rcc_set_ppre1(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8005514:	4a03      	ldr	r2, [pc, #12]	; (8005524 <rcc_set_ppre1+0x10>)
 8005516:	4904      	ldr	r1, [pc, #16]	; (8005528 <rcc_set_ppre1+0x14>)
 8005518:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE1_MASK << RCC_CFGR_PPRE1_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 800551a:	0200      	lsls	r0, r0, #8
	uint32_t reg = RCC_CFGR
 800551c:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 800551e:	4318      	orrs	r0, r3
 8005520:	6010      	str	r0, [r2, #0]
}
 8005522:	4770      	bx	lr
 8005524:	4002100c 	.word	0x4002100c
 8005528:	fffff8ff 	.word	0xfffff8ff

0800552c <rcc_set_ppre2>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb2pre
 */

void rcc_set_ppre2(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 800552c:	4a03      	ldr	r2, [pc, #12]	; (800553c <rcc_set_ppre2+0x10>)
 800552e:	4904      	ldr	r1, [pc, #16]	; (8005540 <rcc_set_ppre2+0x14>)
 8005530:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE2_MASK << RCC_CFGR_PPRE2_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8005532:	02c0      	lsls	r0, r0, #11
	uint32_t reg = RCC_CFGR
 8005534:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8005536:	4318      	orrs	r0, r3
 8005538:	6010      	str	r0, [r2, #0]
}
 800553a:	4770      	bx	lr
 800553c:	4002100c 	.word	0x4002100c
 8005540:	ffffc7ff 	.word	0xffffc7ff

08005544 <rcc_set_hpre>:
 * @param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
 */

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8005544:	21f0      	movs	r1, #240	; 0xf0
 8005546:	4a03      	ldr	r2, [pc, #12]	; (8005554 <rcc_set_hpre+0x10>)
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8005548:	0100      	lsls	r0, r0, #4
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 800554a:	6813      	ldr	r3, [r2, #0]
 800554c:	438b      	bics	r3, r1
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 800554e:	4318      	orrs	r0, r3
 8005550:	6010      	str	r0, [r2, #0]
}
 8005552:	4770      	bx	lr
 8005554:	4002100c 	.word	0x4002100c

08005558 <rcc_set_peripheral_clk_sel>:
void rcc_set_peripheral_clk_sel(uint32_t periph, uint32_t sel)
{
	uint8_t shift;
	uint32_t mask;

	switch (periph) {
 8005558:	4b13      	ldr	r3, [pc, #76]	; (80055a8 <rcc_set_peripheral_clk_sel+0x50>)
{
 800555a:	000a      	movs	r2, r1
 800555c:	b510      	push	{r4, lr}
	switch (periph) {
 800555e:	4298      	cmp	r0, r3
 8005560:	d01c      	beq.n	800559c <rcc_set_peripheral_clk_sel+0x44>
 8005562:	d80b      	bhi.n	800557c <rcc_set_peripheral_clk_sel+0x24>
 8005564:	4b11      	ldr	r3, [pc, #68]	; (80055ac <rcc_set_peripheral_clk_sel+0x54>)
 8005566:	4298      	cmp	r0, r3
 8005568:	d01a      	beq.n	80055a0 <rcc_set_peripheral_clk_sel+0x48>
 800556a:	4911      	ldr	r1, [pc, #68]	; (80055b0 <rcc_set_peripheral_clk_sel+0x58>)
			shift = RCC_CCIPR_I2C3SEL_SHIFT;
			mask = RCC_CCIPR_I2C3SEL_MASK;
			break;

		case I2C1_BASE:
			shift = RCC_CCIPR_I2C1SEL_SHIFT;
 800556c:	230c      	movs	r3, #12
	switch (periph) {
 800556e:	4288      	cmp	r0, r1
 8005570:	d00b      	beq.n	800558a <rcc_set_peripheral_clk_sel+0x32>
 8005572:	4910      	ldr	r1, [pc, #64]	; (80055b4 <rcc_set_peripheral_clk_sel+0x5c>)
			shift = RCC_CCIPR_LPUART1SEL_SHIFT;
			mask = RCC_CCIPR_LPUART1SEL_MASK;
			break;

		case USART2_BASE:
			shift = RCC_CCIPR_USART2SEL_SHIFT;
 8005574:	3b0a      	subs	r3, #10
	switch (periph) {
 8005576:	4288      	cmp	r0, r1
 8005578:	d007      	beq.n	800558a <rcc_set_peripheral_clk_sel+0x32>
			return;
	}

	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
	RCC_CCIPR = reg32 | (sel << shift);
}
 800557a:	bd10      	pop	{r4, pc}
	switch (periph) {
 800557c:	4b0e      	ldr	r3, [pc, #56]	; (80055b8 <rcc_set_peripheral_clk_sel+0x60>)
 800557e:	4298      	cmp	r0, r3
 8005580:	d010      	beq.n	80055a4 <rcc_set_peripheral_clk_sel+0x4c>
 8005582:	4b0e      	ldr	r3, [pc, #56]	; (80055bc <rcc_set_peripheral_clk_sel+0x64>)
 8005584:	4298      	cmp	r0, r3
 8005586:	d1f8      	bne.n	800557a <rcc_set_peripheral_clk_sel+0x22>
			shift = RCC_CCIPR_USART1SEL_SHIFT;
 8005588:	2300      	movs	r3, #0
	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
 800558a:	2003      	movs	r0, #3
 800558c:	4098      	lsls	r0, r3
	RCC_CCIPR = reg32 | (sel << shift);
 800558e:	409a      	lsls	r2, r3
	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
 8005590:	4c0b      	ldr	r4, [pc, #44]	; (80055c0 <rcc_set_peripheral_clk_sel+0x68>)
 8005592:	6821      	ldr	r1, [r4, #0]
 8005594:	4381      	bics	r1, r0
	RCC_CCIPR = reg32 | (sel << shift);
 8005596:	4311      	orrs	r1, r2
 8005598:	6021      	str	r1, [r4, #0]
 800559a:	e7ee      	b.n	800557a <rcc_set_peripheral_clk_sel+0x22>
	switch (periph) {
 800559c:	2310      	movs	r3, #16
 800559e:	e7f4      	b.n	800558a <rcc_set_peripheral_clk_sel+0x32>
			shift = RCC_CCIPR_LPUART1SEL_SHIFT;
 80055a0:	230a      	movs	r3, #10
 80055a2:	e7f2      	b.n	800558a <rcc_set_peripheral_clk_sel+0x32>
			shift = RCC_CCIPR_LPTIM1SEL_SHIFT;
 80055a4:	2312      	movs	r3, #18
 80055a6:	e7f0      	b.n	800558a <rcc_set_peripheral_clk_sel+0x32>
 80055a8:	40007800 	.word	0x40007800
 80055ac:	40004800 	.word	0x40004800
 80055b0:	40005400 	.word	0x40005400
 80055b4:	40004400 	.word	0x40004400
 80055b8:	40007c00 	.word	0x40007c00
 80055bc:	40013800 	.word	0x40013800
 80055c0:	4002104c 	.word	0x4002104c

080055c4 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 80055c4:	4b05      	ldr	r3, [pc, #20]	; (80055dc <rcc_periph_clock_enable+0x18>)
 80055c6:	0942      	lsrs	r2, r0, #5
 80055c8:	18d2      	adds	r2, r2, r3
 80055ca:	231f      	movs	r3, #31
 80055cc:	4018      	ands	r0, r3
 80055ce:	3b1e      	subs	r3, #30
 80055d0:	4083      	lsls	r3, r0
 80055d2:	6811      	ldr	r1, [r2, #0]
 80055d4:	430b      	orrs	r3, r1
 80055d6:	6013      	str	r3, [r2, #0]
}
 80055d8:	4770      	bx	lr
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	40021000 	.word	0x40021000

080055e0 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 80055e0:	4a06      	ldr	r2, [pc, #24]	; (80055fc <rcc_periph_reset_pulse+0x1c>)
 80055e2:	0943      	lsrs	r3, r0, #5
 80055e4:	189b      	adds	r3, r3, r2
 80055e6:	221f      	movs	r2, #31
 80055e8:	4010      	ands	r0, r2
 80055ea:	3a1e      	subs	r2, #30
 80055ec:	4082      	lsls	r2, r0
 80055ee:	6819      	ldr	r1, [r3, #0]
 80055f0:	4311      	orrs	r1, r2
 80055f2:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 80055f4:	6819      	ldr	r1, [r3, #0]
 80055f6:	4391      	bics	r1, r2
 80055f8:	6019      	str	r1, [r3, #0]
}
 80055fa:	4770      	bx	lr
 80055fc:	40021000 	.word	0x40021000

08005600 <rtc_unlock>:
/** @brief Unlock write access to the RTC registers

*/
void rtc_unlock(void)
{
	RTC_WPR = 0xca;
 8005600:	22ca      	movs	r2, #202	; 0xca
 8005602:	4b02      	ldr	r3, [pc, #8]	; (800560c <rtc_unlock+0xc>)
 8005604:	601a      	str	r2, [r3, #0]
	RTC_WPR = 0x53;
 8005606:	3a77      	subs	r2, #119	; 0x77
 8005608:	601a      	str	r2, [r3, #0]
}
 800560a:	4770      	bx	lr
 800560c:	40002824 	.word	0x40002824

08005610 <rtc_lock>:
/** @brief Lock write access to the RTC registers

*/
void rtc_lock(void)
{
	RTC_WPR = 0xff;
 8005610:	22ff      	movs	r2, #255	; 0xff
 8005612:	4b01      	ldr	r3, [pc, #4]	; (8005618 <rtc_lock+0x8>)
 8005614:	601a      	str	r2, [r3, #0]
}
 8005616:	4770      	bx	lr
 8005618:	40002824 	.word	0x40002824

0800561c <rtc_clear_wakeup_flag>:

@details This function should be called first in the rtc_wkup_isr()
*/
void rtc_clear_wakeup_flag(void)
{
	RTC_ISR &= ~RTC_ISR_WUTF;
 800561c:	4a02      	ldr	r2, [pc, #8]	; (8005628 <rtc_clear_wakeup_flag+0xc>)
 800561e:	4903      	ldr	r1, [pc, #12]	; (800562c <rtc_clear_wakeup_flag+0x10>)
 8005620:	6813      	ldr	r3, [r2, #0]
 8005622:	400b      	ands	r3, r1
 8005624:	6013      	str	r3, [r2, #0]
}
 8005626:	4770      	bx	lr
 8005628:	4000280c 	.word	0x4000280c
 800562c:	fffffbff 	.word	0xfffffbff

08005630 <spi_xfer>:
uint16_t spi_xfer(uint32_t spi, uint16_t data)
{
	spi_write(spi, data);

	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8005630:	2301      	movs	r3, #1
	SPI_DR(spi) = data;
 8005632:	60c1      	str	r1, [r0, #12]
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8005634:	6882      	ldr	r2, [r0, #8]
 8005636:	421a      	tst	r2, r3
 8005638:	d0fc      	beq.n	8005634 <spi_xfer+0x4>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 800563a:	68c0      	ldr	r0, [r0, #12]
 800563c:	b280      	uxth	r0, r0
}
 800563e:	4770      	bx	lr

08005640 <timer_enable_counter>:
tim_reg_base
*/

void timer_enable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_CEN;
 8005640:	2301      	movs	r3, #1
 8005642:	6802      	ldr	r2, [r0, #0]
 8005644:	4313      	orrs	r3, r2
 8005646:	6003      	str	r3, [r0, #0]
}
 8005648:	4770      	bx	lr

0800564a <timer_disable_counter>:
tim_reg_base
*/

void timer_disable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_CEN;
 800564a:	2201      	movs	r2, #1
 800564c:	6803      	ldr	r3, [r0, #0]
 800564e:	4393      	bics	r3, r2
 8005650:	6003      	str	r3, [r0, #0]
}
 8005652:	4770      	bx	lr

08005654 <timer_set_prescaler>:
@param[in] value Unsigned int32. Prescaler values 0...0xFFFF.
*/

void timer_set_prescaler(uint32_t timer_peripheral, uint32_t value)
{
	TIM_PSC(timer_peripheral) = value;
 8005654:	6281      	str	r1, [r0, #40]	; 0x28
}
 8005656:	4770      	bx	lr

08005658 <timer_get_counter>:
@returns Unsigned int32. Counter value.
*/

uint32_t timer_get_counter(uint32_t timer_peripheral)
{
	return TIM_CNT(timer_peripheral);
 8005658:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 800565a:	4770      	bx	lr

0800565c <usart_set_baudrate>:
void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;

#if defined USART1
	if ((usart == USART1)
 800565c:	4b10      	ldr	r3, [pc, #64]	; (80056a0 <usart_set_baudrate+0x44>)
{
 800565e:	b570      	push	{r4, r5, r6, lr}
 8005660:	0005      	movs	r5, r0
 8005662:	000c      	movs	r4, r1
 8005664:	084e      	lsrs	r6, r1, #1
	if ((usart == USART1)
 8005666:	4298      	cmp	r0, r3
 8005668:	d107      	bne.n	800567a <usart_set_baudrate+0x1e>
#if defined USART6
		|| (usart == USART6)
#endif
		) {
		clock = rcc_apb2_frequency;
 800566a:	4b0e      	ldr	r3, [pc, #56]	; (80056a4 <usart_set_baudrate+0x48>)
 800566c:	6818      	ldr	r0, [r3, #0]
			+ ((clock % baud) * 256 + baud / 2) / baud;
		return;
	}
#endif

	USART_BRR(usart) = (clock + baud / 2) / baud;
 800566e:	0021      	movs	r1, r4
 8005670:	1830      	adds	r0, r6, r0
 8005672:	f001 f9b7 	bl	80069e4 <__udivsi3>
 8005676:	60e8      	str	r0, [r5, #12]
 8005678:	e010      	b.n	800569c <usart_set_baudrate+0x40>
	uint32_t clock = rcc_apb1_frequency;
 800567a:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <usart_set_baudrate+0x4c>)
 800567c:	6818      	ldr	r0, [r3, #0]
	if (usart == LPUART1) {
 800567e:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <usart_set_baudrate+0x50>)
 8005680:	429d      	cmp	r5, r3
 8005682:	d1f4      	bne.n	800566e <usart_set_baudrate+0x12>
		USART_BRR(usart) = (clock / baud) * 256
 8005684:	f001 fa34 	bl	8006af0 <__aeabi_uidivmod>
 8005688:	0005      	movs	r5, r0
			+ ((clock % baud) * 256 + baud / 2) / baud;
 800568a:	0208      	lsls	r0, r1, #8
 800568c:	1980      	adds	r0, r0, r6
 800568e:	0021      	movs	r1, r4
 8005690:	f001 f9a8 	bl	80069e4 <__udivsi3>
		USART_BRR(usart) = (clock / baud) * 256
 8005694:	022d      	lsls	r5, r5, #8
 8005696:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <usart_set_baudrate+0x54>)
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8005698:	1940      	adds	r0, r0, r5
		USART_BRR(usart) = (clock / baud) * 256
 800569a:	6018      	str	r0, [r3, #0]
}
 800569c:	bd70      	pop	{r4, r5, r6, pc}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	40013800 	.word	0x40013800
 80056a4:	200000d8 	.word	0x200000d8
 80056a8:	200000d4 	.word	0x200000d4
 80056ac:	40004800 	.word	0x40004800
 80056b0:	4000480c 	.word	0x4000480c

080056b4 <usart_set_databits>:
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
 80056b4:	2908      	cmp	r1, #8
 80056b6:	d104      	bne.n	80056c2 <usart_set_databits+0xe>
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 80056b8:	6803      	ldr	r3, [r0, #0]
 80056ba:	4a04      	ldr	r2, [pc, #16]	; (80056cc <usart_set_databits+0x18>)
 80056bc:	4013      	ands	r3, r2
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 80056be:	6003      	str	r3, [r0, #0]
	}
}
 80056c0:	4770      	bx	lr
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 80056c2:	2380      	movs	r3, #128	; 0x80
 80056c4:	6802      	ldr	r2, [r0, #0]
 80056c6:	015b      	lsls	r3, r3, #5
 80056c8:	4313      	orrs	r3, r2
 80056ca:	e7f8      	b.n	80056be <usart_set_databits+0xa>
 80056cc:	ffffefff 	.word	0xffffefff

080056d0 <usart_set_stopbits>:

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 80056d0:	6843      	ldr	r3, [r0, #4]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 80056d2:	4a02      	ldr	r2, [pc, #8]	; (80056dc <usart_set_stopbits+0xc>)
 80056d4:	4013      	ands	r3, r2
 80056d6:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 80056d8:	6043      	str	r3, [r0, #4]
}
 80056da:	4770      	bx	lr
 80056dc:	ffffcfff 	.word	0xffffcfff

080056e0 <usart_set_parity>:

void usart_set_parity(uint32_t usart, uint32_t parity)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 80056e0:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 80056e2:	4a02      	ldr	r2, [pc, #8]	; (80056ec <usart_set_parity+0xc>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 80056e8:	6003      	str	r3, [r0, #0]
}
 80056ea:	4770      	bx	lr
 80056ec:	fffff9ff 	.word	0xfffff9ff

080056f0 <usart_set_mode>:
void usart_set_mode(uint32_t usart, uint32_t mode)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 80056f0:	220c      	movs	r2, #12
	reg32 = USART_CR1(usart);
 80056f2:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 80056f4:	4393      	bics	r3, r2
 80056f6:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 80056f8:	6003      	str	r3, [r0, #0]
}
 80056fa:	4770      	bx	lr

080056fc <usart_set_flow_control>:

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 80056fc:	6883      	ldr	r3, [r0, #8]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 80056fe:	4a02      	ldr	r2, [pc, #8]	; (8005708 <usart_set_flow_control+0xc>)
 8005700:	4013      	ands	r3, r2
 8005702:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 8005704:	6083      	str	r3, [r0, #8]
}
 8005706:	4770      	bx	lr
 8005708:	fffffcff 	.word	0xfffffcff

0800570c <usart_enable>:
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 800570c:	2301      	movs	r3, #1
 800570e:	6802      	ldr	r2, [r0, #0]
 8005710:	4313      	orrs	r3, r2
 8005712:	6003      	str	r3, [r0, #0]
}
 8005714:	4770      	bx	lr

08005716 <usart_disable>:
usart_reg_base
*/

void usart_disable(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_UE;
 8005716:	2201      	movs	r2, #1
 8005718:	6803      	ldr	r3, [r0, #0]
 800571a:	4393      	bics	r3, r2
 800571c:	6003      	str	r3, [r0, #0]
}
 800571e:	4770      	bx	lr

08005720 <usart_send_blocking>:
usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(uint32_t usart, uint16_t data)
{
 8005720:	b570      	push	{r4, r5, r6, lr}
 8005722:	000d      	movs	r5, r1
 8005724:	0004      	movs	r4, r0
	usart_wait_send_ready(usart);
 8005726:	f000 f80d 	bl	8005744 <usart_wait_send_ready>
	usart_send(usart, data);
 800572a:	0029      	movs	r1, r5
 800572c:	0020      	movs	r0, r4
 800572e:	f000 f801 	bl	8005734 <usart_send>
}
 8005732:	bd70      	pop	{r4, r5, r6, pc}

08005734 <usart_send>:
 */

void usart_send(uint32_t usart, uint16_t data)
{
	/* Send data. */
	USART_TDR(usart) = (data & USART_TDR_MASK);
 8005734:	05c9      	lsls	r1, r1, #23
 8005736:	0dc9      	lsrs	r1, r1, #23
 8005738:	6281      	str	r1, [r0, #40]	; 0x28
}
 800573a:	4770      	bx	lr

0800573c <usart_recv>:
 */

uint16_t usart_recv(uint32_t usart)
{
	/* Receive data. */
	return USART_RDR(usart) & USART_RDR_MASK;
 800573c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800573e:	05c0      	lsls	r0, r0, #23
 8005740:	0dc0      	lsrs	r0, r0, #23
}
 8005742:	4770      	bx	lr

08005744 <usart_wait_send_ready>:
 */

void usart_wait_send_ready(uint32_t usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_ISR(usart) & USART_ISR_TXE) == 0);
 8005744:	2380      	movs	r3, #128	; 0x80
 8005746:	69c2      	ldr	r2, [r0, #28]
 8005748:	421a      	tst	r2, r3
 800574a:	d0fc      	beq.n	8005746 <usart_wait_send_ready+0x2>
}
 800574c:	4770      	bx	lr

0800574e <usart_get_flag>:
 * @returns boolean: flag set.
 */

bool usart_get_flag(uint32_t usart, uint32_t flag)
{
	return ((USART_ISR(usart) & flag) != 0);
 800574e:	69c0      	ldr	r0, [r0, #28]
 8005750:	4008      	ands	r0, r1
 8005752:	1e41      	subs	r1, r0, #1
 8005754:	4188      	sbcs	r0, r1
 8005756:	b2c0      	uxtb	r0, r0
}
 8005758:	4770      	bx	lr
	...

0800575c <usbd_init>:
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char * const *strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 800575c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800575e:	001d      	movs	r5, r3
 8005760:	ab0a      	add	r3, sp, #40	; 0x28
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	0016      	movs	r6, r2
 8005766:	9301      	str	r3, [sp, #4]
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 8005768:	6803      	ldr	r3, [r0, #0]
{
 800576a:	000f      	movs	r7, r1
 800576c:	0004      	movs	r4, r0
	usbd_dev = driver->init();
 800576e:	4798      	blx	r3

	usbd_dev->driver = driver;
 8005770:	0003      	movs	r3, r0
 8005772:	33dc      	adds	r3, #220	; 0xdc
 8005774:	601c      	str	r4, [r3, #0]
	usbd_dev->desc = dev;
	usbd_dev->config = conf;
	usbd_dev->strings = strings;
	usbd_dev->num_strings = num_strings;
 8005776:	9b08      	ldr	r3, [sp, #32]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
	    _usbd_control_in;

	int i;
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
		usbd_dev->user_callback_set_config[i] = NULL;
 8005778:	0002      	movs	r2, r0
	usbd_dev->num_strings = num_strings;
 800577a:	60c3      	str	r3, [r0, #12]
	usbd_dev->ctrl_buf = control_buffer;
 800577c:	9b09      	ldr	r3, [sp, #36]	; 0x24
		usbd_dev->user_callback_set_config[i] = NULL;
 800577e:	32c8      	adds	r2, #200	; 0xc8
	usbd_dev->ctrl_buf = control_buffer;
 8005780:	6103      	str	r3, [r0, #16]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 8005782:	9b01      	ldr	r3, [sp, #4]
	usbd_dev->desc = dev;
 8005784:	6007      	str	r7, [r0, #0]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 8005786:	8283      	strh	r3, [r0, #20]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 8005788:	4b06      	ldr	r3, [pc, #24]	; (80057a4 <usbd_init+0x48>)
	usbd_dev->config = conf;
 800578a:	6046      	str	r6, [r0, #4]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 800578c:	6703      	str	r3, [r0, #112]	; 0x70
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 800578e:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <usbd_init+0x4c>)
	usbd_dev->strings = strings;
 8005790:	6085      	str	r5, [r0, #8]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 8005792:	66c3      	str	r3, [r0, #108]	; 0x6c
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 8005794:	4b05      	ldr	r3, [pc, #20]	; (80057ac <usbd_init+0x50>)
 8005796:	6683      	str	r3, [r0, #104]	; 0x68
		usbd_dev->user_callback_set_config[i] = NULL;
 8005798:	2300      	movs	r3, #0
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	6053      	str	r3, [r2, #4]
 800579e:	6093      	str	r3, [r2, #8]
 80057a0:	60d3      	str	r3, [r2, #12]
	}

	return usbd_dev;
}
 80057a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057a4:	080059db 	.word	0x080059db
 80057a8:	08005a45 	.word	0x08005a45
 80057ac:	08005ac7 	.word	0x08005ac7

080057b0 <usbd_register_reset_callback>:

void usbd_register_reset_callback(usbd_device *usbd_dev, void (*callback)(void))
{
	usbd_dev->user_callback_reset = callback;
 80057b0:	61c1      	str	r1, [r0, #28]
}
 80057b2:	4770      	bx	lr

080057b4 <usbd_ep_setup>:
	}
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size, usbd_endpoint_callback callback)
{
 80057b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 80057b6:	0004      	movs	r4, r0
 80057b8:	9d06      	ldr	r5, [sp, #24]
 80057ba:	34dc      	adds	r4, #220	; 0xdc
 80057bc:	6824      	ldr	r4, [r4, #0]
 80057be:	9500      	str	r5, [sp, #0]
 80057c0:	68a4      	ldr	r4, [r4, #8]
 80057c2:	47a0      	blx	r4
}
 80057c4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080057c6 <_usbd_reset>:
{
 80057c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	usbd_dev->current_address = 0;
 80057c8:	2500      	movs	r5, #0
{
 80057ca:	0004      	movs	r4, r0
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 80057cc:	6803      	ldr	r3, [r0, #0]
	usbd_dev->current_address = 0;
 80057ce:	82c5      	strh	r5, [r0, #22]
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 80057d0:	79db      	ldrb	r3, [r3, #7]
 80057d2:	002a      	movs	r2, r5
 80057d4:	0029      	movs	r1, r5
 80057d6:	9500      	str	r5, [sp, #0]
 80057d8:	f7ff ffec 	bl	80057b4 <usbd_ep_setup>
	usbd_dev->driver->set_address(usbd_dev, 0);
 80057dc:	0023      	movs	r3, r4
 80057de:	33dc      	adds	r3, #220	; 0xdc
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	0029      	movs	r1, r5
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	0020      	movs	r0, r4
 80057e8:	4798      	blx	r3
	if (usbd_dev->user_callback_reset) {
 80057ea:	69e3      	ldr	r3, [r4, #28]
 80057ec:	42ab      	cmp	r3, r5
 80057ee:	d000      	beq.n	80057f2 <_usbd_reset+0x2c>
		usbd_dev->user_callback_reset();
 80057f0:	4798      	blx	r3
}
 80057f2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080057f4 <usbd_ep_write_packet>:

uint16_t usbd_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			 const void *buf, uint16_t len)
{
 80057f4:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 80057f6:	0004      	movs	r4, r0
 80057f8:	34dc      	adds	r4, #220	; 0xdc
 80057fa:	6824      	ldr	r4, [r4, #0]
 80057fc:	69e4      	ldr	r4, [r4, #28]
 80057fe:	47a0      	blx	r4
}
 8005800:	bd10      	pop	{r4, pc}

08005802 <usbd_ep_read_packet>:

uint16_t usbd_ep_read_packet(usbd_device *usbd_dev, uint8_t addr, void *buf,
			     uint16_t len)
{
 8005802:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 8005804:	0004      	movs	r4, r0
 8005806:	34dc      	adds	r4, #220	; 0xdc
 8005808:	6824      	ldr	r4, [r4, #0]
 800580a:	6a24      	ldr	r4, [r4, #32]
 800580c:	47a0      	blx	r4
}
 800580e:	bd10      	pop	{r4, pc}

08005810 <usbd_ep_stall_set>:

void usbd_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 8005810:	0003      	movs	r3, r0
{
 8005812:	b510      	push	{r4, lr}
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 8005814:	33dc      	adds	r3, #220	; 0xdc
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	4798      	blx	r3
}
 800581c:	bd10      	pop	{r4, pc}

0800581e <usbd_ep_stall_get>:

uint8_t usbd_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 800581e:	0003      	movs	r3, r0
{
 8005820:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 8005822:	33dc      	adds	r3, #220	; 0xdc
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	4798      	blx	r3
}
 800582a:	bd10      	pop	{r4, pc}

0800582c <usbd_ep_nak_set>:

void usbd_ep_nak_set(usbd_device *usbd_dev, uint8_t addr, uint8_t nak)
{
	usbd_dev->driver->ep_nak_set(usbd_dev, addr, nak);
 800582c:	0003      	movs	r3, r0
{
 800582e:	b510      	push	{r4, lr}
	usbd_dev->driver->ep_nak_set(usbd_dev, addr, nak);
 8005830:	33dc      	adds	r3, #220	; 0xdc
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	4798      	blx	r3
}
 8005838:	bd10      	pop	{r4, pc}

0800583a <usb_control_send_chunk>:

	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
 800583a:	b570      	push	{r4, r5, r6, lr}
 800583c:	0005      	movs	r5, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
 800583e:	6803      	ldr	r3, [r0, #0]
{
 8005840:	0004      	movs	r4, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
 8005842:	79d9      	ldrb	r1, [r3, #7]
			usbd_dev->control_state.ctrl_len) {
 8005844:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8005846:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8005848:	352c      	adds	r5, #44	; 0x2c
	if (usbd_dev->desc->bMaxPacketSize0 <
 800584a:	4299      	cmp	r1, r3
 800584c:	d20e      	bcs.n	800586c <usb_control_send_chunk+0x32>
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 800584e:	000b      	movs	r3, r1
 8005850:	2100      	movs	r1, #0
 8005852:	f7ff ffcf 	bl	80057f4 <usbd_ep_write_packet>
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->desc->bMaxPacketSize0);
		usbd_dev->control_state.state = DATA_IN;
 8005856:	2302      	movs	r3, #2
 8005858:	702b      	strb	r3, [r5, #0]
		usbd_dev->control_state.ctrl_buf +=
			usbd_dev->desc->bMaxPacketSize0;
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	79d9      	ldrb	r1, [r3, #7]
		usbd_dev->control_state.ctrl_buf +=
 800585e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005860:	185a      	adds	r2, r3, r1
		usbd_dev->control_state.ctrl_len -=
 8005862:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf +=
 8005864:	63a2      	str	r2, [r4, #56]	; 0x38
		usbd_dev->control_state.ctrl_len -=
 8005866:	1a5b      	subs	r3, r3, r1
 8005868:	87a3      	strh	r3, [r4, #60]	; 0x3c
			DATA_IN : LAST_DATA_IN;
		usbd_dev->control_state.needs_zlp = false;
		usbd_dev->control_state.ctrl_len = 0;
		usbd_dev->control_state.ctrl_buf = NULL;
	}
}
 800586a:	bd70      	pop	{r4, r5, r6, pc}
		usbd_ep_write_packet(usbd_dev, 0,
 800586c:	2100      	movs	r1, #0
 800586e:	f7ff ffc1 	bl	80057f4 <usbd_ep_write_packet>
			usbd_dev->control_state.needs_zlp ?
 8005872:	0022      	movs	r2, r4
 8005874:	3244      	adds	r2, #68	; 0x44
			DATA_IN : LAST_DATA_IN;
 8005876:	7813      	ldrb	r3, [r2, #0]
 8005878:	4259      	negs	r1, r3
 800587a:	414b      	adcs	r3, r1
 800587c:	3302      	adds	r3, #2
		usbd_dev->control_state.state =
 800587e:	702b      	strb	r3, [r5, #0]
		usbd_dev->control_state.needs_zlp = false;
 8005880:	2300      	movs	r3, #0
 8005882:	7013      	strb	r3, [r2, #0]
		usbd_dev->control_state.ctrl_len = 0;
 8005884:	87a3      	strh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf = NULL;
 8005886:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005888:	e7ef      	b.n	800586a <usb_control_send_chunk+0x30>

0800588a <usb_control_request_dispatch>:
{
	int i, result = 0;
	struct user_control_callback *cb = usbd_dev->user_control_callback;

	/* Call user command hook function. */
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 800588a:	0003      	movs	r3, r0
{
 800588c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800588e:	0005      	movs	r5, r0
 8005890:	0004      	movs	r4, r0
 8005892:	000e      	movs	r6, r1
 8005894:	b087      	sub	sp, #28
 8005896:	3368      	adds	r3, #104	; 0x68
 8005898:	3548      	adds	r5, #72	; 0x48
 800589a:	9305      	str	r3, [sp, #20]
		if (cb[i].cb == NULL) {
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	0027      	movs	r7, r4
 80058a0:	469c      	mov	ip, r3
 80058a2:	0023      	movs	r3, r4
 80058a4:	3338      	adds	r3, #56	; 0x38
 80058a6:	9304      	str	r3, [sp, #16]
 80058a8:	4663      	mov	r3, ip
 80058aa:	373c      	adds	r7, #60	; 0x3c
 80058ac:	9703      	str	r7, [sp, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d107      	bne.n	80058c2 <usb_control_request_dispatch+0x38>
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 80058b2:	0031      	movs	r1, r6
 80058b4:	0020      	movs	r0, r4
 80058b6:	9b03      	ldr	r3, [sp, #12]
 80058b8:	9a04      	ldr	r2, [sp, #16]
 80058ba:	f000 fc85 	bl	80061c8 <_usbd_standard_request>
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 80058be:	b007      	add	sp, #28
 80058c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
 80058c2:	7831      	ldrb	r1, [r6, #0]
 80058c4:	796b      	ldrb	r3, [r5, #5]
 80058c6:	792a      	ldrb	r2, [r5, #4]
 80058c8:	400b      	ands	r3, r1
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d004      	beq.n	80058d8 <usb_control_request_dispatch+0x4e>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 80058ce:	9b05      	ldr	r3, [sp, #20]
 80058d0:	3508      	adds	r5, #8
 80058d2:	429d      	cmp	r5, r3
 80058d4:	d1e2      	bne.n	800589c <usb_control_request_dispatch+0x12>
 80058d6:	e7ec      	b.n	80058b2 <usb_control_request_dispatch+0x28>
			result = cb[i].cb(usbd_dev, req,
 80058d8:	0023      	movs	r3, r4
 80058da:	3340      	adds	r3, #64	; 0x40
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	0031      	movs	r1, r6
 80058e0:	0020      	movs	r0, r4
 80058e2:	4667      	mov	r7, ip
 80058e4:	9b03      	ldr	r3, [sp, #12]
 80058e6:	9a04      	ldr	r2, [sp, #16]
 80058e8:	47b8      	blx	r7
			if (result == USBD_REQ_HANDLED ||
 80058ea:	2801      	cmp	r0, #1
 80058ec:	d8ef      	bhi.n	80058ce <usb_control_request_dispatch+0x44>
 80058ee:	e7e6      	b.n	80058be <usb_control_request_dispatch+0x34>

080058f0 <stall_transaction>:
{
 80058f0:	b510      	push	{r4, lr}
	usbd_ep_stall_set(usbd_dev, 0, 1);
 80058f2:	2201      	movs	r2, #1
{
 80058f4:	0004      	movs	r4, r0
	usbd_ep_stall_set(usbd_dev, 0, 1);
 80058f6:	2100      	movs	r1, #0
 80058f8:	f7ff ff8a 	bl	8005810 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 80058fc:	2300      	movs	r3, #0
 80058fe:	342c      	adds	r4, #44	; 0x2c
 8005900:	7023      	strb	r3, [r4, #0]
}
 8005902:	bd10      	pop	{r4, pc}

08005904 <usb_control_recv_chunk>:
{
 8005904:	b570      	push	{r4, r5, r6, lr}
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8005906:	6803      	ldr	r3, [r0, #0]
 8005908:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 800590a:	8ec5      	ldrh	r5, [r0, #54]	; 0x36
 800590c:	79db      	ldrb	r3, [r3, #7]
{
 800590e:	0004      	movs	r4, r0
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8005910:	1aad      	subs	r5, r5, r2
 8005912:	429d      	cmp	r5, r3
 8005914:	dd00      	ble.n	8005918 <usb_control_recv_chunk+0x14>
 8005916:	001d      	movs	r5, r3
				       usbd_dev->control_state.ctrl_buf +
 8005918:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 800591a:	b2ae      	uxth	r6, r5
				       usbd_dev->control_state.ctrl_buf +
 800591c:	189a      	adds	r2, r3, r2
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 800591e:	2100      	movs	r1, #0
 8005920:	0033      	movs	r3, r6
 8005922:	0020      	movs	r0, r4
 8005924:	f7ff ff6d 	bl	8005802 <usbd_ep_read_packet>
	if (size != packetsize) {
 8005928:	4286      	cmp	r6, r0
 800592a:	d005      	beq.n	8005938 <usb_control_recv_chunk+0x34>
		stall_transaction(usbd_dev);
 800592c:	0020      	movs	r0, r4
 800592e:	f7ff ffdf 	bl	80058f0 <stall_transaction>
		return -1;
 8005932:	2001      	movs	r0, #1
 8005934:	4240      	negs	r0, r0
}
 8005936:	bd70      	pop	{r4, r5, r6, pc}
	usbd_dev->control_state.ctrl_len += size;
 8005938:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800593a:	b2a8      	uxth	r0, r5
 800593c:	18f6      	adds	r6, r6, r3
 800593e:	87a6      	strh	r6, [r4, #60]	; 0x3c
	return packetsize;
 8005940:	e7f9      	b.n	8005936 <usb_control_recv_chunk+0x32>

08005942 <usb_control_setup_read>:

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 8005942:	b570      	push	{r4, r5, r6, lr}
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8005944:	6903      	ldr	r3, [r0, #16]
{
 8005946:	0004      	movs	r4, r0
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8005948:	6383      	str	r3, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = req->wLength;
 800594a:	79cb      	ldrb	r3, [r1, #7]
 800594c:	798a      	ldrb	r2, [r1, #6]
 800594e:	021b      	lsls	r3, r3, #8
 8005950:	4313      	orrs	r3, r2
 8005952:	8783      	strh	r3, [r0, #60]	; 0x3c
{
 8005954:	000d      	movs	r5, r1

	if (usb_control_request_dispatch(usbd_dev, req)) {
 8005956:	f7ff ff98 	bl	800588a <usb_control_request_dispatch>
 800595a:	2800      	cmp	r0, #0
 800595c:	d021      	beq.n	80059a2 <usb_control_setup_read+0x60>
		if (req->wLength) {
 800595e:	79eb      	ldrb	r3, [r5, #7]
 8005960:	79aa      	ldrb	r2, [r5, #6]
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	4313      	orrs	r3, r2
 8005966:	d013      	beq.n	8005990 <usb_control_setup_read+0x4e>
			usbd_dev->control_state.needs_zlp =
				needs_zlp(usbd_dev->control_state.ctrl_len,
 8005968:	6822      	ldr	r2, [r4, #0]
 800596a:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800596c:	79d1      	ldrb	r1, [r2, #7]
	return false;
 800596e:	2200      	movs	r2, #0
	if (len < wLength) {
 8005970:	4283      	cmp	r3, r0
 8005972:	d906      	bls.n	8005982 <usb_control_setup_read+0x40>
		if (len && (len % ep_size == 0)) {
 8005974:	4290      	cmp	r0, r2
 8005976:	d004      	beq.n	8005982 <usb_control_setup_read+0x40>
 8005978:	f001 f9a4 	bl	8006cc4 <__aeabi_idivmod>
 800597c:	424a      	negs	r2, r1
 800597e:	414a      	adcs	r2, r1
 8005980:	b2d2      	uxtb	r2, r2
			usbd_dev->control_state.needs_zlp =
 8005982:	0023      	movs	r3, r4
 8005984:	3344      	adds	r3, #68	; 0x44
					req->wLength,
					usbd_dev->desc->bMaxPacketSize0);
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 8005986:	0020      	movs	r0, r4
			usbd_dev->control_state.needs_zlp =
 8005988:	701a      	strb	r2, [r3, #0]
			usb_control_send_chunk(usbd_dev);
 800598a:	f7ff ff56 	bl	800583a <usb_control_send_chunk>
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
	}
}
 800598e:	bd70      	pop	{r4, r5, r6, pc}
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8005990:	001a      	movs	r2, r3
 8005992:	0019      	movs	r1, r3
 8005994:	0020      	movs	r0, r4
 8005996:	f7ff ff2d 	bl	80057f4 <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 800599a:	2304      	movs	r3, #4
 800599c:	342c      	adds	r4, #44	; 0x2c
 800599e:	7023      	strb	r3, [r4, #0]
}
 80059a0:	e7f5      	b.n	800598e <usb_control_setup_read+0x4c>
		stall_transaction(usbd_dev);
 80059a2:	0020      	movs	r0, r4
 80059a4:	f7ff ffa4 	bl	80058f0 <stall_transaction>
}
 80059a8:	e7f1      	b.n	800598e <usb_control_setup_read+0x4c>

080059aa <usbd_register_control_callback>:
{
 80059aa:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (usbd_dev->user_control_callback[i].cb) {
 80059ac:	0007      	movs	r7, r0
{
 80059ae:	0004      	movs	r4, r0
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 80059b0:	2500      	movs	r5, #0
		if (usbd_dev->user_control_callback[i].cb) {
 80059b2:	3748      	adds	r7, #72	; 0x48
 80059b4:	00ee      	lsls	r6, r5, #3
 80059b6:	59b8      	ldr	r0, [r7, r6]
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d005      	beq.n	80059c8 <usbd_register_control_callback+0x1e>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 80059bc:	3501      	adds	r5, #1
 80059be:	2d04      	cmp	r5, #4
 80059c0:	d1f8      	bne.n	80059b4 <usbd_register_control_callback+0xa>
	return -1;
 80059c2:	2001      	movs	r0, #1
 80059c4:	4240      	negs	r0, r0
}
 80059c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		usbd_dev->user_control_callback[i].type = type;
 80059c8:	19a4      	adds	r4, r4, r6
 80059ca:	0025      	movs	r5, r4
 80059cc:	354c      	adds	r5, #76	; 0x4c
 80059ce:	7029      	strb	r1, [r5, #0]
		usbd_dev->user_control_callback[i].type_mask = type_mask;
 80059d0:	0021      	movs	r1, r4
 80059d2:	314d      	adds	r1, #77	; 0x4d
 80059d4:	700a      	strb	r2, [r1, #0]
		usbd_dev->user_control_callback[i].cb = callback;
 80059d6:	64a3      	str	r3, [r4, #72]	; 0x48
		return 0;
 80059d8:	e7f5      	b.n	80059c6 <usbd_register_control_callback+0x1c>

080059da <_usbd_control_setup>:

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 80059da:	b570      	push	{r4, r5, r6, lr}
	struct usb_setup_data *req = &usbd_dev->control_state.req;
	(void)ea;

	usbd_dev->control_state.complete = NULL;
 80059dc:	2500      	movs	r5, #0
{
 80059de:	0004      	movs	r4, r0

	usbd_ep_nak_set(usbd_dev, 0, 1);
 80059e0:	2201      	movs	r2, #1
 80059e2:	0029      	movs	r1, r5
	usbd_dev->control_state.complete = NULL;
 80059e4:	6405      	str	r5, [r0, #64]	; 0x40
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 80059e6:	0006      	movs	r6, r0
	usbd_ep_nak_set(usbd_dev, 0, 1);
 80059e8:	f7ff ff20 	bl	800582c <usbd_ep_nak_set>

	if (req->wLength == 0) {
 80059ec:	0023      	movs	r3, r4
 80059ee:	3336      	adds	r3, #54	; 0x36
 80059f0:	781a      	ldrb	r2, [r3, #0]
 80059f2:	3301      	adds	r3, #1
 80059f4:	781b      	ldrb	r3, [r3, #0]
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 80059f6:	3630      	adds	r6, #48	; 0x30
	if (req->wLength == 0) {
 80059f8:	021b      	lsls	r3, r3, #8
 80059fa:	4313      	orrs	r3, r2
 80059fc:	42ab      	cmp	r3, r5
 80059fe:	d104      	bne.n	8005a0a <_usbd_control_setup+0x30>
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
		usb_control_setup_read(usbd_dev, req);
 8005a00:	0031      	movs	r1, r6
 8005a02:	0020      	movs	r0, r4
 8005a04:	f7ff ff9d 	bl	8005942 <usb_control_setup_read>
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 8005a08:	bd70      	pop	{r4, r5, r6, pc}
	} else if (req->bmRequestType & 0x80) {
 8005a0a:	7832      	ldrb	r2, [r6, #0]
 8005a0c:	2a7f      	cmp	r2, #127	; 0x7f
 8005a0e:	d8f7      	bhi.n	8005a00 <_usbd_control_setup+0x26>
	if (req->wLength > usbd_dev->ctrl_buf_len) {
 8005a10:	8aa2      	ldrh	r2, [r4, #20]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d203      	bcs.n	8005a1e <_usbd_control_setup+0x44>
		stall_transaction(usbd_dev);
 8005a16:	0020      	movs	r0, r4
 8005a18:	f7ff ff6a 	bl	80058f0 <stall_transaction>
		return;
 8005a1c:	e7f4      	b.n	8005a08 <_usbd_control_setup+0x2e>
		usbd_dev->control_state.state = LAST_DATA_OUT;
 8005a1e:	0029      	movs	r1, r5
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8005a20:	6922      	ldr	r2, [r4, #16]
	usbd_dev->control_state.ctrl_len = 0;
 8005a22:	87a5      	strh	r5, [r4, #60]	; 0x3c
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8005a24:	63a2      	str	r2, [r4, #56]	; 0x38
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8005a26:	6822      	ldr	r2, [r4, #0]
	usbd_ep_nak_set(usbd_dev, 0, 0);
 8005a28:	0020      	movs	r0, r4
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8005a2a:	79d2      	ldrb	r2, [r2, #7]
		usbd_dev->control_state.state = LAST_DATA_OUT;
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	4169      	adcs	r1, r5
 8005a30:	0022      	movs	r2, r4
 8005a32:	000b      	movs	r3, r1
 8005a34:	322c      	adds	r2, #44	; 0x2c
 8005a36:	3305      	adds	r3, #5
 8005a38:	7013      	strb	r3, [r2, #0]
	usbd_ep_nak_set(usbd_dev, 0, 0);
 8005a3a:	0029      	movs	r1, r5
 8005a3c:	002a      	movs	r2, r5
 8005a3e:	f7ff fef5 	bl	800582c <usbd_ep_nak_set>
}
 8005a42:	e7e1      	b.n	8005a08 <_usbd_control_setup+0x2e>

08005a44 <_usbd_control_out>:

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
 8005a44:	b570      	push	{r4, r5, r6, lr}
	(void)ea;

	switch (usbd_dev->control_state.state) {
 8005a46:	0005      	movs	r5, r0
 8005a48:	352c      	adds	r5, #44	; 0x2c
 8005a4a:	782b      	ldrb	r3, [r5, #0]
{
 8005a4c:	0004      	movs	r4, r0
	switch (usbd_dev->control_state.state) {
 8005a4e:	2b06      	cmp	r3, #6
 8005a50:	d011      	beq.n	8005a76 <_usbd_control_out+0x32>
 8005a52:	2b07      	cmp	r3, #7
 8005a54:	d026      	beq.n	8005aa4 <_usbd_control_out+0x60>
 8005a56:	2b05      	cmp	r3, #5
 8005a58:	d121      	bne.n	8005a9e <_usbd_control_out+0x5a>
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8005a5a:	f7ff ff53 	bl	8005904 <usb_control_recv_chunk>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	db08      	blt.n	8005a74 <_usbd_control_out+0x30>
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
					usbd_dev->control_state.ctrl_len) <=
 8005a62:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
		if ((usbd_dev->control_state.req.wLength -
 8005a64:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005a66:	1a9b      	subs	r3, r3, r2
					usbd_dev->desc->bMaxPacketSize0) {
 8005a68:	6822      	ldr	r2, [r4, #0]
 8005a6a:	79d2      	ldrb	r2, [r2, #7]
		if ((usbd_dev->control_state.req.wLength -
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	dc01      	bgt.n	8005a74 <_usbd_control_out+0x30>
			usbd_dev->control_state.state = LAST_DATA_OUT;
 8005a70:	2306      	movs	r3, #6
		 */
		if (usb_control_request_dispatch(usbd_dev,
					&(usbd_dev->control_state.req))) {
			/* Go to status stage on success. */
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
			usbd_dev->control_state.state = STATUS_IN;
 8005a72:	702b      	strb	r3, [r5, #0]
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8005a74:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8005a76:	f7ff ff45 	bl	8005904 <usb_control_recv_chunk>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	dbfa      	blt.n	8005a74 <_usbd_control_out+0x30>
		if (usb_control_request_dispatch(usbd_dev,
 8005a7e:	0021      	movs	r1, r4
 8005a80:	0020      	movs	r0, r4
 8005a82:	3130      	adds	r1, #48	; 0x30
 8005a84:	f7ff ff01 	bl	800588a <usb_control_request_dispatch>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	d007      	beq.n	8005a9c <_usbd_control_out+0x58>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	0020      	movs	r0, r4
 8005a90:	001a      	movs	r2, r3
 8005a92:	0019      	movs	r1, r3
 8005a94:	f7ff feae 	bl	80057f4 <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8005a98:	2304      	movs	r3, #4
 8005a9a:	e7ea      	b.n	8005a72 <_usbd_control_out+0x2e>
			stall_transaction(usbd_dev);
 8005a9c:	0020      	movs	r0, r4
		stall_transaction(usbd_dev);
 8005a9e:	f7ff ff27 	bl	80058f0 <stall_transaction>
}
 8005aa2:	e7e7      	b.n	8005a74 <_usbd_control_out+0x30>
		usbd_ep_read_packet(usbd_dev, 0, NULL, 0);
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	001a      	movs	r2, r3
 8005aa8:	0019      	movs	r1, r3
 8005aaa:	f7ff feaa 	bl	8005802 <usbd_ep_read_packet>
		usbd_dev->control_state.state = IDLE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	702b      	strb	r3, [r5, #0]
		if (usbd_dev->control_state.complete) {
 8005ab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <_usbd_control_out+0x7c>
			usbd_dev->control_state.complete(usbd_dev,
 8005ab8:	0021      	movs	r1, r4
 8005aba:	0020      	movs	r0, r4
 8005abc:	3130      	adds	r1, #48	; 0x30
 8005abe:	4798      	blx	r3
		usbd_dev->control_state.complete = NULL;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8005ac4:	e7d6      	b.n	8005a74 <_usbd_control_out+0x30>

08005ac6 <_usbd_control_in>:

void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
 8005ac6:	b570      	push	{r4, r5, r6, lr}
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8005ac8:	0005      	movs	r5, r0
 8005aca:	352c      	adds	r5, #44	; 0x2c
 8005acc:	782b      	ldrb	r3, [r5, #0]
{
 8005ace:	0004      	movs	r4, r0
	switch (usbd_dev->control_state.state) {
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d006      	beq.n	8005ae2 <_usbd_control_in+0x1c>
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d00b      	beq.n	8005af0 <_usbd_control_in+0x2a>
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d121      	bne.n	8005b20 <_usbd_control_in+0x5a>
	case DATA_IN:
		usb_control_send_chunk(usbd_dev);
 8005adc:	f7ff fead 	bl	800583a <usb_control_send_chunk>
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8005ae0:	bd70      	pop	{r4, r5, r6, pc}
		usbd_dev->control_state.state = STATUS_OUT;
 8005ae2:	2307      	movs	r3, #7
		usbd_ep_nak_set(usbd_dev, 0, 0);
 8005ae4:	2200      	movs	r2, #0
		usbd_dev->control_state.state = STATUS_OUT;
 8005ae6:	702b      	strb	r3, [r5, #0]
		usbd_ep_nak_set(usbd_dev, 0, 0);
 8005ae8:	0011      	movs	r1, r2
 8005aea:	f7ff fe9f 	bl	800582c <usbd_ep_nak_set>
		break;
 8005aee:	e7f7      	b.n	8005ae0 <_usbd_control_in+0x1a>
		if (usbd_dev->control_state.complete) {
 8005af0:	0006      	movs	r6, r0
 8005af2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005af4:	3630      	adds	r6, #48	; 0x30
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <_usbd_control_in+0x38>
			usbd_dev->control_state.complete(usbd_dev,
 8005afa:	0031      	movs	r1, r6
 8005afc:	4798      	blx	r3
		if ((req->bmRequestType == 0) &&
 8005afe:	7833      	ldrb	r3, [r6, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <_usbd_control_in+0x54>
 8005b04:	7873      	ldrb	r3, [r6, #1]
 8005b06:	2b05      	cmp	r3, #5
 8005b08:	d107      	bne.n	8005b1a <_usbd_control_in+0x54>
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8005b0a:	0023      	movs	r3, r4
 8005b0c:	3332      	adds	r3, #50	; 0x32
 8005b0e:	7819      	ldrb	r1, [r3, #0]
 8005b10:	33aa      	adds	r3, #170	; 0xaa
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	0020      	movs	r0, r4
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	4798      	blx	r3
		usbd_dev->control_state.state = IDLE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	702b      	strb	r3, [r5, #0]
		break;
 8005b1e:	e7df      	b.n	8005ae0 <_usbd_control_in+0x1a>
		stall_transaction(usbd_dev);
 8005b20:	f7ff fee6 	bl	80058f0 <stall_transaction>
}
 8005b24:	e7dc      	b.n	8005ae0 <_usbd_control_in+0x1a>

08005b26 <usb_standard_set_address>:

static enum usbd_request_return_codes
usb_standard_set_address(usbd_device *usbd_dev,
			 struct usb_setup_data *req, uint8_t **buf,
			 uint16_t *len)
{
 8005b26:	b510      	push	{r4, lr}
	(void)req;
	(void)buf;
	(void)len;

	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 8005b28:	780c      	ldrb	r4, [r1, #0]
 8005b2a:	2c00      	cmp	r4, #0
 8005b2c:	d114      	bne.n	8005b58 <usb_standard_set_address+0x32>
 8005b2e:	78cb      	ldrb	r3, [r1, #3]
 8005b30:	788a      	ldrb	r2, [r1, #2]
 8005b32:	021b      	lsls	r3, r3, #8
 8005b34:	4313      	orrs	r3, r2
 8005b36:	2b7f      	cmp	r3, #127	; 0x7f
 8005b38:	d80c      	bhi.n	8005b54 <usb_standard_set_address+0x2e>
		return USBD_REQ_NOTSUPP;
	}

	usbd_dev->current_address = req->wValue;
 8005b3a:	7583      	strb	r3, [r0, #22]

	/*
	 * Special workaround for STM32F10[57] that require the address
	 * to be set here. This is undocumented!
	 */
	if (usbd_dev->driver->set_address_before_status) {
 8005b3c:	0003      	movs	r3, r0
 8005b3e:	33dc      	adds	r3, #220	; 0xdc
 8005b40:	681b      	ldr	r3, [r3, #0]
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
	}

	return USBD_REQ_HANDLED;
 8005b42:	3401      	adds	r4, #1
	if (usbd_dev->driver->set_address_before_status) {
 8005b44:	001a      	movs	r2, r3
 8005b46:	3230      	adds	r2, #48	; 0x30
 8005b48:	7812      	ldrb	r2, [r2, #0]
 8005b4a:	2a00      	cmp	r2, #0
 8005b4c:	d002      	beq.n	8005b54 <usb_standard_set_address+0x2e>
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8005b4e:	7889      	ldrb	r1, [r1, #2]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	4798      	blx	r3
}
 8005b54:	0020      	movs	r0, r4
 8005b56:	bd10      	pop	{r4, pc}
		return USBD_REQ_NOTSUPP;
 8005b58:	2400      	movs	r4, #0
 8005b5a:	e7fb      	b.n	8005b54 <usb_standard_set_address+0x2e>

08005b5c <usb_standard_set_configuration>:

static enum usbd_request_return_codes
usb_standard_set_configuration(usbd_device *usbd_dev,
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
 8005b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	(void)req;
	(void)buf;
	(void)len;

	if (req->wValue > 0) {
 8005b5e:	78ca      	ldrb	r2, [r1, #3]
 8005b60:	788b      	ldrb	r3, [r1, #2]
 8005b62:	0212      	lsls	r2, r2, #8
{
 8005b64:	0004      	movs	r4, r0
 8005b66:	000d      	movs	r5, r1
	if (req->wValue > 0) {
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	d010      	beq.n	8005b8e <usb_standard_set_configuration+0x32>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8005b6c:	6803      	ldr	r3, [r0, #0]
			if (req->wValue
			    == usbd_dev->config[i].bConfigurationValue) {
 8005b6e:	260d      	movs	r6, #13
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8005b70:	7c58      	ldrb	r0, [r3, #17]
 8005b72:	2300      	movs	r3, #0
 8005b74:	4298      	cmp	r0, r3
 8005b76:	d801      	bhi.n	8005b7c <usb_standard_set_configuration+0x20>
				found_index = i;
				break;
			}
		}
		if (found_index < 0) {
			return USBD_REQ_NOTSUPP;
 8005b78:	2000      	movs	r0, #0
			}
		}
	}

	return USBD_REQ_HANDLED;
}
 8005b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			    == usbd_dev->config[i].bConfigurationValue) {
 8005b7c:	0031      	movs	r1, r6
 8005b7e:	4359      	muls	r1, r3
 8005b80:	6867      	ldr	r7, [r4, #4]
 8005b82:	1879      	adds	r1, r7, r1
			if (req->wValue
 8005b84:	7949      	ldrb	r1, [r1, #5]
 8005b86:	4291      	cmp	r1, r2
 8005b88:	d003      	beq.n	8005b92 <usb_standard_set_configuration+0x36>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	e7f2      	b.n	8005b74 <usb_standard_set_configuration+0x18>
	int found_index = -1;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	425b      	negs	r3, r3
	usbd_dev->current_config = found_index + 1;
 8005b92:	3301      	adds	r3, #1
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	75e3      	strb	r3, [r4, #23]
	if (usbd_dev->current_config > 0) {
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10c      	bne.n	8005bb6 <usb_standard_set_configuration+0x5a>
	usbd_dev->driver->ep_reset(usbd_dev);
 8005b9c:	0023      	movs	r3, r4
	if (usbd_dev->user_callback_set_config[0]) {
 8005b9e:	0026      	movs	r6, r4
	usbd_dev->driver->ep_reset(usbd_dev);
 8005ba0:	33dc      	adds	r3, #220	; 0xdc
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	0020      	movs	r0, r4
 8005ba6:	68db      	ldr	r3, [r3, #12]
	if (usbd_dev->user_callback_set_config[0]) {
 8005ba8:	36c8      	adds	r6, #200	; 0xc8
	usbd_dev->driver->ep_reset(usbd_dev);
 8005baa:	4798      	blx	r3
	if (usbd_dev->user_callback_set_config[0]) {
 8005bac:	6833      	ldr	r3, [r6, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d11c      	bne.n	8005bec <usb_standard_set_configuration+0x90>
	return USBD_REQ_HANDLED;
 8005bb2:	2001      	movs	r0, #1
 8005bb4:	e7e1      	b.n	8005b7a <usb_standard_set_configuration+0x1e>
		cfg = &usbd_dev->config[usbd_dev->current_config - 1];
 8005bb6:	220d      	movs	r2, #13
 8005bb8:	4353      	muls	r3, r2
 8005bba:	6862      	ldr	r2, [r4, #4]
 8005bbc:	3b0d      	subs	r3, #13
 8005bbe:	18d3      	adds	r3, r2, r3
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8005bc0:	2200      	movs	r2, #0
				*cfg->interface[i].cur_altsetting = 0;
 8005bc2:	0016      	movs	r6, r2
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8005bc4:	7919      	ldrb	r1, [r3, #4]
 8005bc6:	4291      	cmp	r1, r2
 8005bc8:	d9e8      	bls.n	8005b9c <usb_standard_set_configuration+0x40>
			if (cfg->interface[i].cur_altsetting) {
 8005bca:	7a98      	ldrb	r0, [r3, #10]
 8005bcc:	7a59      	ldrb	r1, [r3, #9]
 8005bce:	0200      	lsls	r0, r0, #8
 8005bd0:	4308      	orrs	r0, r1
 8005bd2:	7ad9      	ldrb	r1, [r3, #11]
 8005bd4:	0409      	lsls	r1, r1, #16
 8005bd6:	4308      	orrs	r0, r1
 8005bd8:	7b19      	ldrb	r1, [r3, #12]
 8005bda:	0609      	lsls	r1, r1, #24
 8005bdc:	4301      	orrs	r1, r0
 8005bde:	0110      	lsls	r0, r2, #4
 8005be0:	5841      	ldr	r1, [r0, r1]
 8005be2:	2900      	cmp	r1, #0
 8005be4:	d000      	beq.n	8005be8 <usb_standard_set_configuration+0x8c>
				*cfg->interface[i].cur_altsetting = 0;
 8005be6:	700e      	strb	r6, [r1, #0]
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8005be8:	3201      	adds	r2, #1
 8005bea:	e7eb      	b.n	8005bc4 <usb_standard_set_configuration+0x68>
			usbd_dev->user_control_callback[i].cb = NULL;
 8005bec:	2300      	movs	r3, #0
 8005bee:	0027      	movs	r7, r4
 8005bf0:	64a3      	str	r3, [r4, #72]	; 0x48
 8005bf2:	6523      	str	r3, [r4, #80]	; 0x50
 8005bf4:	65a3      	str	r3, [r4, #88]	; 0x58
 8005bf6:	6623      	str	r3, [r4, #96]	; 0x60
		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8005bf8:	37d8      	adds	r7, #216	; 0xd8
			if (usbd_dev->user_callback_set_config[i]) {
 8005bfa:	6833      	ldr	r3, [r6, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d005      	beq.n	8005c0c <usb_standard_set_configuration+0xb0>
				usbd_dev->user_callback_set_config[i](usbd_dev,
 8005c00:	78e9      	ldrb	r1, [r5, #3]
 8005c02:	78aa      	ldrb	r2, [r5, #2]
 8005c04:	0209      	lsls	r1, r1, #8
 8005c06:	0020      	movs	r0, r4
 8005c08:	4311      	orrs	r1, r2
 8005c0a:	4798      	blx	r3
		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8005c0c:	3604      	adds	r6, #4
 8005c0e:	42b7      	cmp	r7, r6
 8005c10:	d1f3      	bne.n	8005bfa <usb_standard_set_configuration+0x9e>
 8005c12:	e7ce      	b.n	8005bb2 <usb_standard_set_configuration+0x56>

08005c14 <usb_standard_get_configuration>:
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
	(void)req;

	if (*len > 1) {
 8005c14:	8819      	ldrh	r1, [r3, #0]
{
 8005c16:	b510      	push	{r4, lr}
	if (*len > 1) {
 8005c18:	2901      	cmp	r1, #1
 8005c1a:	d901      	bls.n	8005c20 <usb_standard_get_configuration+0xc>
		*len = 1;
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	8019      	strh	r1, [r3, #0]
	}
	if (usbd_dev->current_config > 0) {
 8005c20:	7dc1      	ldrb	r1, [r0, #23]
 8005c22:	6814      	ldr	r4, [r2, #0]
 8005c24:	2900      	cmp	r1, #0
 8005c26:	d008      	beq.n	8005c3a <usb_standard_get_configuration+0x26>
		const struct usb_config_descriptor *cfg =
			&usbd_dev->config[usbd_dev->current_config - 1];
		(*buf)[0] = cfg->bConfigurationValue;
 8005c28:	220d      	movs	r2, #13
 8005c2a:	4351      	muls	r1, r2
 8005c2c:	6843      	ldr	r3, [r0, #4]
 8005c2e:	185b      	adds	r3, r3, r1
 8005c30:	3b0d      	subs	r3, #13
 8005c32:	795b      	ldrb	r3, [r3, #5]
 8005c34:	7023      	strb	r3, [r4, #0]
	} else {
		(*buf)[0] = 0;
	}

	return USBD_REQ_HANDLED;
}
 8005c36:	2001      	movs	r0, #1
 8005c38:	bd10      	pop	{r4, pc}
		(*buf)[0] = 0;
 8005c3a:	7021      	strb	r1, [r4, #0]
 8005c3c:	e7fb      	b.n	8005c36 <usb_standard_get_configuration+0x22>

08005c3e <usb_standard_get_interface>:

static enum usbd_request_return_codes
usb_standard_get_interface(usbd_device *usbd_dev,
			   struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 8005c3e:	b570      	push	{r4, r5, r6, lr}
	uint8_t *cur_altsetting;
	const struct usb_config_descriptor *cfx =
		&usbd_dev->config[usbd_dev->current_config - 1];
 8005c40:	240d      	movs	r4, #13
 8005c42:	7dc5      	ldrb	r5, [r0, #23]
	const struct usb_config_descriptor *cfx =
 8005c44:	6840      	ldr	r0, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 8005c46:	436c      	muls	r4, r5
 8005c48:	3c0d      	subs	r4, #13
	const struct usb_config_descriptor *cfx =
 8005c4a:	1904      	adds	r4, r0, r4

	if (req->wIndex >= cfx->bNumInterfaces) {
 8005c4c:	794d      	ldrb	r5, [r1, #5]
 8005c4e:	7908      	ldrb	r0, [r1, #4]
 8005c50:	7926      	ldrb	r6, [r4, #4]
 8005c52:	022d      	lsls	r5, r5, #8
 8005c54:	4305      	orrs	r5, r0
		return USBD_REQ_NOTSUPP;
 8005c56:	2000      	movs	r0, #0
	if (req->wIndex >= cfx->bNumInterfaces) {
 8005c58:	42ae      	cmp	r6, r5
 8005c5a:	d917      	bls.n	8005c8c <usb_standard_get_interface+0x4e>
	}

	*len = 1;
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	8018      	strh	r0, [r3, #0]
	cur_altsetting = cfx->interface[req->wIndex].cur_altsetting;
 8005c60:	7aa3      	ldrb	r3, [r4, #10]
 8005c62:	7a60      	ldrb	r0, [r4, #9]
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	4303      	orrs	r3, r0
 8005c68:	7ae0      	ldrb	r0, [r4, #11]
 8005c6a:	0400      	lsls	r0, r0, #16
 8005c6c:	4303      	orrs	r3, r0
 8005c6e:	7b20      	ldrb	r0, [r4, #12]
 8005c70:	790c      	ldrb	r4, [r1, #4]
 8005c72:	0600      	lsls	r0, r0, #24
 8005c74:	4318      	orrs	r0, r3
 8005c76:	794b      	ldrb	r3, [r1, #5]
 8005c78:	021b      	lsls	r3, r3, #8
 8005c7a:	4323      	orrs	r3, r4
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	581b      	ldr	r3, [r3, r0]
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 8005c80:	1e19      	subs	r1, r3, #0
 8005c82:	d000      	beq.n	8005c86 <usb_standard_get_interface+0x48>
 8005c84:	7819      	ldrb	r1, [r3, #0]

	return USBD_REQ_HANDLED;
 8005c86:	2001      	movs	r0, #1
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 8005c88:	6813      	ldr	r3, [r2, #0]
 8005c8a:	7019      	strb	r1, [r3, #0]
}
 8005c8c:	bd70      	pop	{r4, r5, r6, pc}

08005c8e <usb_standard_device_get_status>:
	(void)usbd_dev;
	(void)req;

	/* bit 0: self powered */
	/* bit 1: remote wakeup */
	if (*len > 2) {
 8005c8e:	8819      	ldrh	r1, [r3, #0]
 8005c90:	2902      	cmp	r1, #2
 8005c92:	d901      	bls.n	8005c98 <usb_standard_device_get_status+0xa>
		*len = 2;
 8005c94:	2102      	movs	r1, #2
 8005c96:	8019      	strh	r1, [r3, #0]
	}
	(*buf)[0] = 0;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	6811      	ldr	r1, [r2, #0]
	(*buf)[1] = 0;

	return USBD_REQ_HANDLED;
}
 8005c9c:	2001      	movs	r0, #1
	(*buf)[0] = 0;
 8005c9e:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 8005ca0:	6812      	ldr	r2, [r2, #0]
 8005ca2:	7053      	strb	r3, [r2, #1]
}
 8005ca4:	4770      	bx	lr

08005ca6 <usb_standard_endpoint_get_status>:

static enum usbd_request_return_codes
usb_standard_endpoint_get_status(usbd_device *usbd_dev,
				 struct usb_setup_data *req,
				 uint8_t **buf, uint16_t *len)
{
 8005ca6:	b510      	push	{r4, lr}
 8005ca8:	0014      	movs	r4, r2
	(void)req;

	if (*len > 2) {
 8005caa:	881a      	ldrh	r2, [r3, #0]
 8005cac:	2a02      	cmp	r2, #2
 8005cae:	d901      	bls.n	8005cb4 <usb_standard_endpoint_get_status+0xe>
		*len = 2;
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	801a      	strh	r2, [r3, #0]
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8005cb4:	7909      	ldrb	r1, [r1, #4]
 8005cb6:	f7ff fdb2 	bl	800581e <usbd_ep_stall_get>
 8005cba:	1e43      	subs	r3, r0, #1
 8005cbc:	4198      	sbcs	r0, r3
	(*buf)[1] = 0;
 8005cbe:	2200      	movs	r2, #0
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	7018      	strb	r0, [r3, #0]
	(*buf)[1] = 0;
 8005cc4:	6823      	ldr	r3, [r4, #0]

	return USBD_REQ_HANDLED;
}
 8005cc6:	2001      	movs	r0, #1
	(*buf)[1] = 0;
 8005cc8:	705a      	strb	r2, [r3, #1]
}
 8005cca:	bd10      	pop	{r4, pc}

08005ccc <usb_standard_endpoint_stall>:

static enum usbd_request_return_codes
usb_standard_endpoint_stall(usbd_device *usbd_dev,
			    struct usb_setup_data *req,
			    uint8_t **buf, uint16_t *len)
{
 8005ccc:	b510      	push	{r4, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 1);
 8005cce:	2201      	movs	r2, #1
 8005cd0:	7909      	ldrb	r1, [r1, #4]
 8005cd2:	f7ff fd9d 	bl	8005810 <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 8005cd6:	2001      	movs	r0, #1
 8005cd8:	bd10      	pop	{r4, pc}

08005cda <usb_standard_endpoint_unstall>:

static enum usbd_request_return_codes
usb_standard_endpoint_unstall(usbd_device *usbd_dev,
			      struct usb_setup_data *req,
			      uint8_t **buf, uint16_t *len)
{
 8005cda:	b510      	push	{r4, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 0);
 8005cdc:	2200      	movs	r2, #0
 8005cde:	7909      	ldrb	r1, [r1, #4]
 8005ce0:	f7ff fd96 	bl	8005810 <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 8005ce4:	2001      	movs	r0, #1
 8005ce6:	bd10      	pop	{r4, pc}

08005ce8 <usb_standard_set_interface>:
{
 8005ce8:	b570      	push	{r4, r5, r6, lr}
		&usbd_dev->config[usbd_dev->current_config - 1];
 8005cea:	260d      	movs	r6, #13
{
 8005cec:	001d      	movs	r5, r3
		&usbd_dev->config[usbd_dev->current_config - 1];
 8005cee:	7dc3      	ldrb	r3, [r0, #23]
	if (req->wIndex >= cfx->bNumInterfaces) {
 8005cf0:	794c      	ldrb	r4, [r1, #5]
		&usbd_dev->config[usbd_dev->current_config - 1];
 8005cf2:	435e      	muls	r6, r3
	const struct usb_config_descriptor *cfx =
 8005cf4:	6843      	ldr	r3, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 8005cf6:	3e0d      	subs	r6, #13
	const struct usb_config_descriptor *cfx =
 8005cf8:	199e      	adds	r6, r3, r6
	if (req->wIndex >= cfx->bNumInterfaces) {
 8005cfa:	790b      	ldrb	r3, [r1, #4]
 8005cfc:	0224      	lsls	r4, r4, #8
 8005cfe:	431c      	orrs	r4, r3
 8005d00:	7933      	ldrb	r3, [r6, #4]
		return USBD_REQ_NOTSUPP;
 8005d02:	2200      	movs	r2, #0
	if (req->wIndex >= cfx->bNumInterfaces) {
 8005d04:	42a3      	cmp	r3, r4
 8005d06:	d92b      	bls.n	8005d60 <usb_standard_set_interface+0x78>
	iface = &cfx->interface[req->wIndex];
 8005d08:	7ab2      	ldrb	r2, [r6, #10]
 8005d0a:	7a73      	ldrb	r3, [r6, #9]
 8005d0c:	0212      	lsls	r2, r2, #8
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	7af3      	ldrb	r3, [r6, #11]
 8005d12:	0124      	lsls	r4, r4, #4
 8005d14:	041b      	lsls	r3, r3, #16
 8005d16:	431a      	orrs	r2, r3
 8005d18:	7b33      	ldrb	r3, [r6, #12]
 8005d1a:	061b      	lsls	r3, r3, #24
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	191b      	adds	r3, r3, r4
	if (req->wValue >= iface->num_altsetting) {
 8005d20:	78cc      	ldrb	r4, [r1, #3]
 8005d22:	788a      	ldrb	r2, [r1, #2]
 8005d24:	791e      	ldrb	r6, [r3, #4]
 8005d26:	0224      	lsls	r4, r4, #8
 8005d28:	4314      	orrs	r4, r2
		return USBD_REQ_NOTSUPP;
 8005d2a:	2200      	movs	r2, #0
	if (req->wValue >= iface->num_altsetting) {
 8005d2c:	42a6      	cmp	r6, r4
 8005d2e:	d917      	bls.n	8005d60 <usb_standard_set_interface+0x78>
	if (iface->cur_altsetting) {
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	2a00      	cmp	r2, #0
 8005d34:	d012      	beq.n	8005d5c <usb_standard_set_interface+0x74>
		*iface->cur_altsetting = req->wValue;
 8005d36:	7014      	strb	r4, [r2, #0]
	if (usbd_dev->user_callback_set_altsetting) {
 8005d38:	0003      	movs	r3, r0
 8005d3a:	33d8      	adds	r3, #216	; 0xd8
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d008      	beq.n	8005d54 <usb_standard_set_interface+0x6c>
			usbd_dev->user_callback_set_altsetting(usbd_dev,
 8005d42:	78ca      	ldrb	r2, [r1, #3]
 8005d44:	788c      	ldrb	r4, [r1, #2]
 8005d46:	0212      	lsls	r2, r2, #8
 8005d48:	4322      	orrs	r2, r4
 8005d4a:	790c      	ldrb	r4, [r1, #4]
 8005d4c:	7949      	ldrb	r1, [r1, #5]
 8005d4e:	0209      	lsls	r1, r1, #8
 8005d50:	4321      	orrs	r1, r4
 8005d52:	4798      	blx	r3
	*len = 0;
 8005d54:	2300      	movs	r3, #0
 8005d56:	2201      	movs	r2, #1
 8005d58:	802b      	strh	r3, [r5, #0]
	return USBD_REQ_HANDLED;
 8005d5a:	e001      	b.n	8005d60 <usb_standard_set_interface+0x78>
	} else if (req->wValue > 0) {
 8005d5c:	2c00      	cmp	r4, #0
 8005d5e:	d0eb      	beq.n	8005d38 <usb_standard_set_interface+0x50>
}
 8005d60:	0010      	movs	r0, r2
 8005d62:	bd70      	pop	{r4, r5, r6, pc}

08005d64 <usb_standard_get_descriptor>:
{
 8005d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d66:	b08f      	sub	sp, #60	; 0x3c
 8005d68:	9305      	str	r3, [sp, #20]
 8005d6a:	0014      	movs	r4, r2
	descr_idx = usb_descriptor_index(req->wValue);
 8005d6c:	78ca      	ldrb	r2, [r1, #3]
 8005d6e:	788b      	ldrb	r3, [r1, #2]
 8005d70:	0212      	lsls	r2, r2, #8
 8005d72:	4313      	orrs	r3, r2
{
 8005d74:	0006      	movs	r6, r0
	return wValue >> 8;
 8005d76:	0a12      	lsrs	r2, r2, #8
	switch (usb_descriptor_type(req->wValue)) {
 8005d78:	2a02      	cmp	r2, #2
 8005d7a:	d013      	beq.n	8005da4 <usb_standard_get_descriptor+0x40>
 8005d7c:	2a03      	cmp	r2, #3
 8005d7e:	d100      	bne.n	8005d82 <usb_standard_get_descriptor+0x1e>
 8005d80:	e152      	b.n	8006028 <usb_standard_get_descriptor+0x2c4>
 8005d82:	2000      	movs	r0, #0
 8005d84:	2a01      	cmp	r2, #1
 8005d86:	d10b      	bne.n	8005da0 <usb_standard_get_descriptor+0x3c>
		*buf = (uint8_t *) usbd_dev->desc;
 8005d88:	6833      	ldr	r3, [r6, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 8005d8a:	7819      	ldrb	r1, [r3, #0]
		*buf = (uint8_t *) usbd_dev->desc;
 8005d8c:	6023      	str	r3, [r4, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 8005d8e:	9b05      	ldr	r3, [sp, #20]
 8005d90:	881a      	ldrh	r2, [r3, #0]
 8005d92:	1c0b      	adds	r3, r1, #0
 8005d94:	4291      	cmp	r1, r2
 8005d96:	d900      	bls.n	8005d9a <usb_standard_get_descriptor+0x36>
 8005d98:	1c13      	adds	r3, r2, #0
 8005d9a:	9a05      	ldr	r2, [sp, #20]
 8005d9c:	8013      	strh	r3, [r2, #0]
		return USBD_REQ_HANDLED;
 8005d9e:	2001      	movs	r0, #1
}
 8005da0:	b00f      	add	sp, #60	; 0x3c
 8005da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*buf = usbd_dev->ctrl_buf;
 8005da4:	6902      	ldr	r2, [r0, #16]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8005da6:	b2db      	uxtb	r3, r3
		*buf = usbd_dev->ctrl_buf;
 8005da8:	6022      	str	r2, [r4, #0]
 8005daa:	9206      	str	r2, [sp, #24]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8005dac:	9a05      	ldr	r2, [sp, #20]
 8005dae:	8814      	ldrh	r4, [r2, #0]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8005db0:	220d      	movs	r2, #13
 8005db2:	4353      	muls	r3, r2
 8005db4:	6842      	ldr	r2, [r0, #4]
 8005db6:	18d1      	adds	r1, r2, r3
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8005db8:	5cd3      	ldrb	r3, [r2, r3]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8005dba:	9104      	str	r1, [sp, #16]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8005dbc:	1c1f      	adds	r7, r3, #0
 8005dbe:	42a3      	cmp	r3, r4
 8005dc0:	d900      	bls.n	8005dc4 <usb_standard_get_descriptor+0x60>
 8005dc2:	1c27      	adds	r7, r4, #0
 8005dc4:	b2bb      	uxth	r3, r7
 8005dc6:	001a      	movs	r2, r3
 8005dc8:	9904      	ldr	r1, [sp, #16]
 8005dca:	9806      	ldr	r0, [sp, #24]
 8005dcc:	9303      	str	r3, [sp, #12]
 8005dce:	f000 fd6b 	bl	80068a8 <memcpy>
	buf += count;
 8005dd2:	9a03      	ldr	r2, [sp, #12]
 8005dd4:	9b06      	ldr	r3, [sp, #24]
 8005dd6:	4694      	mov	ip, r2
	len -= count;
 8005dd8:	1aa4      	subs	r4, r4, r2
	buf += count;
 8005dda:	4463      	add	r3, ip
 8005ddc:	9302      	str	r3, [sp, #8]
	len -= count;
 8005dde:	b2a3      	uxth	r3, r4
 8005de0:	9301      	str	r3, [sp, #4]
	totallen += cfg->bLength;
 8005de2:	9b04      	ldr	r3, [sp, #16]
 8005de4:	781a      	ldrb	r2, [r3, #0]
 8005de6:	ab0c      	add	r3, sp, #48	; 0x30
 8005de8:	80da      	strh	r2, [r3, #6]
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8005dea:	2300      	movs	r3, #0
 8005dec:	9307      	str	r3, [sp, #28]
 8005dee:	9b04      	ldr	r3, [sp, #16]
 8005df0:	791a      	ldrb	r2, [r3, #4]
 8005df2:	466b      	mov	r3, sp
 8005df4:	8b9b      	ldrh	r3, [r3, #28]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d80a      	bhi.n	8005e10 <usb_standard_get_descriptor+0xac>
	memcpy((tmpbuf + 2), &totallen, sizeof(uint16_t));
 8005dfa:	9806      	ldr	r0, [sp, #24]
 8005dfc:	ab0c      	add	r3, sp, #48	; 0x30
 8005dfe:	2202      	movs	r2, #2
 8005e00:	1d99      	adds	r1, r3, #6
 8005e02:	3002      	adds	r0, #2
 8005e04:	f000 fd50 	bl	80068a8 <memcpy>
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8005e08:	9b05      	ldr	r3, [sp, #20]
 8005e0a:	9a03      	ldr	r2, [sp, #12]
 8005e0c:	801a      	strh	r2, [r3, #0]
		return USBD_REQ_HANDLED;
 8005e0e:	e7c6      	b.n	8005d9e <usb_standard_get_descriptor+0x3a>
		if (cfg->interface[i].iface_assoc) {
 8005e10:	9b07      	ldr	r3, [sp, #28]
 8005e12:	9a04      	ldr	r2, [sp, #16]
 8005e14:	011b      	lsls	r3, r3, #4
 8005e16:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e18:	9b04      	ldr	r3, [sp, #16]
 8005e1a:	7a92      	ldrb	r2, [r2, #10]
 8005e1c:	7a5b      	ldrb	r3, [r3, #9]
 8005e1e:	0212      	lsls	r2, r2, #8
 8005e20:	431a      	orrs	r2, r3
 8005e22:	9b04      	ldr	r3, [sp, #16]
 8005e24:	7adb      	ldrb	r3, [r3, #11]
 8005e26:	041b      	lsls	r3, r3, #16
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	9b04      	ldr	r3, [sp, #16]
 8005e2c:	7b1b      	ldrb	r3, [r3, #12]
 8005e2e:	061b      	lsls	r3, r3, #24
 8005e30:	4313      	orrs	r3, r2
 8005e32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e34:	189b      	adds	r3, r3, r2
 8005e36:	689c      	ldr	r4, [r3, #8]
 8005e38:	2c00      	cmp	r4, #0
 8005e3a:	d01d      	beq.n	8005e78 <usb_standard_get_descriptor+0x114>
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 8005e3c:	7823      	ldrb	r3, [r4, #0]
 8005e3e:	9a01      	ldr	r2, [sp, #4]
 8005e40:	1c1f      	adds	r7, r3, #0
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d901      	bls.n	8005e4a <usb_standard_get_descriptor+0xe6>
 8005e46:	466b      	mov	r3, sp
 8005e48:	889f      	ldrh	r7, [r3, #4]
 8005e4a:	b2bf      	uxth	r7, r7
 8005e4c:	003a      	movs	r2, r7
 8005e4e:	0021      	movs	r1, r4
 8005e50:	9802      	ldr	r0, [sp, #8]
 8005e52:	f000 fd29 	bl	80068a8 <memcpy>
			buf += count;
 8005e56:	9b02      	ldr	r3, [sp, #8]
 8005e58:	19db      	adds	r3, r3, r7
 8005e5a:	9302      	str	r3, [sp, #8]
			len -= count;
 8005e5c:	9b01      	ldr	r3, [sp, #4]
 8005e5e:	1bdb      	subs	r3, r3, r7
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	9301      	str	r3, [sp, #4]
			total += count;
 8005e64:	9b03      	ldr	r3, [sp, #12]
 8005e66:	18ff      	adds	r7, r7, r3
 8005e68:	b2bb      	uxth	r3, r7
 8005e6a:	9303      	str	r3, [sp, #12]
			totallen += assoc->bLength;
 8005e6c:	ab0c      	add	r3, sp, #48	; 0x30
 8005e6e:	1d9a      	adds	r2, r3, #6
 8005e70:	8811      	ldrh	r1, [r2, #0]
 8005e72:	7823      	ldrb	r3, [r4, #0]
 8005e74:	185b      	adds	r3, r3, r1
 8005e76:	8013      	strh	r3, [r2, #0]
{
 8005e78:	2300      	movs	r3, #0
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 8005e7a:	9a04      	ldr	r2, [sp, #16]
 8005e7c:	9308      	str	r3, [sp, #32]
 8005e7e:	9b04      	ldr	r3, [sp, #16]
 8005e80:	7a92      	ldrb	r2, [r2, #10]
 8005e82:	7a5b      	ldrb	r3, [r3, #9]
 8005e84:	0212      	lsls	r2, r2, #8
 8005e86:	431a      	orrs	r2, r3
 8005e88:	9b04      	ldr	r3, [sp, #16]
 8005e8a:	7adb      	ldrb	r3, [r3, #11]
 8005e8c:	041b      	lsls	r3, r3, #16
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	9b04      	ldr	r3, [sp, #16]
 8005e92:	7b1b      	ldrb	r3, [r3, #12]
 8005e94:	061b      	lsls	r3, r3, #24
 8005e96:	4313      	orrs	r3, r2
 8005e98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e9a:	189b      	adds	r3, r3, r2
 8005e9c:	466a      	mov	r2, sp
 8005e9e:	7919      	ldrb	r1, [r3, #4]
 8005ea0:	8c12      	ldrh	r2, [r2, #32]
 8005ea2:	4291      	cmp	r1, r2
 8005ea4:	d802      	bhi.n	8005eac <usb_standard_get_descriptor+0x148>
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8005ea6:	9b07      	ldr	r3, [sp, #28]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	e79f      	b.n	8005dec <usb_standard_get_descriptor+0x88>
			const struct usb_interface_descriptor *iface =
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	2315      	movs	r3, #21
 8005eb0:	9908      	ldr	r1, [sp, #32]
 8005eb2:	434b      	muls	r3, r1
 8005eb4:	18d4      	adds	r4, r2, r3
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8005eb6:	5cd3      	ldrb	r3, [r2, r3]
 8005eb8:	9a01      	ldr	r2, [sp, #4]
 8005eba:	1c1f      	adds	r7, r3, #0
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d901      	bls.n	8005ec4 <usb_standard_get_descriptor+0x160>
 8005ec0:	466b      	mov	r3, sp
 8005ec2:	889f      	ldrh	r7, [r3, #4]
 8005ec4:	b2bf      	uxth	r7, r7
 8005ec6:	003a      	movs	r2, r7
 8005ec8:	0021      	movs	r1, r4
 8005eca:	9802      	ldr	r0, [sp, #8]
 8005ecc:	f000 fcec 	bl	80068a8 <memcpy>
			buf += count;
 8005ed0:	9b02      	ldr	r3, [sp, #8]
			totallen += iface->bLength;
 8005ed2:	7826      	ldrb	r6, [r4, #0]
			buf += count;
 8005ed4:	19db      	adds	r3, r3, r7
 8005ed6:	9302      	str	r3, [sp, #8]
			len -= count;
 8005ed8:	9b01      	ldr	r3, [sp, #4]
 8005eda:	1bdb      	subs	r3, r3, r7
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	9301      	str	r3, [sp, #4]
			total += count;
 8005ee0:	9b03      	ldr	r3, [sp, #12]
 8005ee2:	18ff      	adds	r7, r7, r3
 8005ee4:	b2bb      	uxth	r3, r7
 8005ee6:	9303      	str	r3, [sp, #12]
			totallen += iface->bLength;
 8005ee8:	ab0c      	add	r3, sp, #48	; 0x30
 8005eea:	88da      	ldrh	r2, [r3, #6]
 8005eec:	18b6      	adds	r6, r6, r2
 8005eee:	b2b6      	uxth	r6, r6
 8005ef0:	80de      	strh	r6, [r3, #6]
			if (iface->extra) {
 8005ef2:	7ba3      	ldrb	r3, [r4, #14]
 8005ef4:	7b61      	ldrb	r1, [r4, #13]
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	7be1      	ldrb	r1, [r4, #15]
 8005efc:	0409      	lsls	r1, r1, #16
 8005efe:	430b      	orrs	r3, r1
 8005f00:	7c21      	ldrb	r1, [r4, #16]
 8005f02:	0609      	lsls	r1, r1, #24
 8005f04:	4319      	orrs	r1, r3
 8005f06:	d024      	beq.n	8005f52 <usb_standard_get_descriptor+0x1ee>
				       count = MIN(len, iface->extralen));
 8005f08:	7ca3      	ldrb	r3, [r4, #18]
 8005f0a:	7c65      	ldrb	r5, [r4, #17]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	432b      	orrs	r3, r5
 8005f10:	7ce5      	ldrb	r5, [r4, #19]
 8005f12:	042d      	lsls	r5, r5, #16
 8005f14:	432b      	orrs	r3, r5
 8005f16:	7d25      	ldrb	r5, [r4, #20]
 8005f18:	062d      	lsls	r5, r5, #24
 8005f1a:	431d      	orrs	r5, r3
 8005f1c:	9b01      	ldr	r3, [sp, #4]
 8005f1e:	429d      	cmp	r5, r3
 8005f20:	dd00      	ble.n	8005f24 <usb_standard_get_descriptor+0x1c0>
 8005f22:	001d      	movs	r5, r3
 8005f24:	b2af      	uxth	r7, r5
				memcpy(buf, iface->extra,
 8005f26:	003a      	movs	r2, r7
 8005f28:	9802      	ldr	r0, [sp, #8]
 8005f2a:	f000 fcbd 	bl	80068a8 <memcpy>
				buf += count;
 8005f2e:	9b02      	ldr	r3, [sp, #8]
 8005f30:	19db      	adds	r3, r3, r7
 8005f32:	9302      	str	r3, [sp, #8]
				len -= count;
 8005f34:	9b01      	ldr	r3, [sp, #4]
 8005f36:	1bdb      	subs	r3, r3, r7
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	9301      	str	r3, [sp, #4]
				total += count;
 8005f3c:	9b03      	ldr	r3, [sp, #12]
 8005f3e:	19df      	adds	r7, r3, r7
 8005f40:	b2bb      	uxth	r3, r7
 8005f42:	9303      	str	r3, [sp, #12]
				totallen += iface->extralen;
 8005f44:	7ca3      	ldrb	r3, [r4, #18]
 8005f46:	7c62      	ldrb	r2, [r4, #17]
 8005f48:	021b      	lsls	r3, r3, #8
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	199e      	adds	r6, r3, r6
 8005f4e:	ab0c      	add	r3, sp, #48	; 0x30
 8005f50:	80de      	strh	r6, [r3, #6]
{
 8005f52:	2300      	movs	r3, #0
 8005f54:	9309      	str	r3, [sp, #36]	; 0x24
			for (k = 0; k < iface->bNumEndpoints; k++) {
 8005f56:	466b      	mov	r3, sp
 8005f58:	7922      	ldrb	r2, [r4, #4]
 8005f5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d802      	bhi.n	8005f66 <usb_standard_get_descriptor+0x202>
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 8005f60:	9b08      	ldr	r3, [sp, #32]
 8005f62:	3301      	adds	r3, #1
 8005f64:	e789      	b.n	8005e7a <usb_standard_get_descriptor+0x116>
				    &iface->endpoint[k];
 8005f66:	7aa2      	ldrb	r2, [r4, #10]
 8005f68:	7a63      	ldrb	r3, [r4, #9]
 8005f6a:	0212      	lsls	r2, r2, #8
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	7ae3      	ldrb	r3, [r4, #11]
				const struct usb_endpoint_descriptor *ep =
 8005f70:	9909      	ldr	r1, [sp, #36]	; 0x24
				    &iface->endpoint[k];
 8005f72:	041b      	lsls	r3, r3, #16
 8005f74:	431a      	orrs	r2, r3
 8005f76:	7b23      	ldrb	r3, [r4, #12]
 8005f78:	061b      	lsls	r3, r3, #24
 8005f7a:	4313      	orrs	r3, r2
				const struct usb_endpoint_descriptor *ep =
 8005f7c:	220f      	movs	r2, #15
 8005f7e:	434a      	muls	r2, r1
 8005f80:	189d      	adds	r5, r3, r2
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 8005f82:	5c9b      	ldrb	r3, [r3, r2]
 8005f84:	9a01      	ldr	r2, [sp, #4]
 8005f86:	1c1f      	adds	r7, r3, #0
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d901      	bls.n	8005f90 <usb_standard_get_descriptor+0x22c>
 8005f8c:	466b      	mov	r3, sp
 8005f8e:	889f      	ldrh	r7, [r3, #4]
 8005f90:	b2bf      	uxth	r7, r7
 8005f92:	003a      	movs	r2, r7
 8005f94:	0029      	movs	r1, r5
 8005f96:	9802      	ldr	r0, [sp, #8]
 8005f98:	f000 fc86 	bl	80068a8 <memcpy>
				buf += count;
 8005f9c:	9b02      	ldr	r3, [sp, #8]
				totallen += ep->bLength;
 8005f9e:	aa0c      	add	r2, sp, #48	; 0x30
				buf += count;
 8005fa0:	19db      	adds	r3, r3, r7
 8005fa2:	9302      	str	r3, [sp, #8]
				len -= count;
 8005fa4:	9b01      	ldr	r3, [sp, #4]
				totallen += ep->bLength;
 8005fa6:	88d1      	ldrh	r1, [r2, #6]
				len -= count;
 8005fa8:	1bdb      	subs	r3, r3, r7
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	9301      	str	r3, [sp, #4]
				total += count;
 8005fae:	9b03      	ldr	r3, [sp, #12]
 8005fb0:	18ff      	adds	r7, r7, r3
 8005fb2:	b2bb      	uxth	r3, r7
 8005fb4:	9303      	str	r3, [sp, #12]
				totallen += ep->bLength;
 8005fb6:	782b      	ldrb	r3, [r5, #0]
 8005fb8:	185b      	adds	r3, r3, r1
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	930a      	str	r3, [sp, #40]	; 0x28
 8005fbe:	80d3      	strh	r3, [r2, #6]
				if (ep->extra) {
 8005fc0:	7a2b      	ldrb	r3, [r5, #8]
 8005fc2:	79e9      	ldrb	r1, [r5, #7]
 8005fc4:	021b      	lsls	r3, r3, #8
 8005fc6:	430b      	orrs	r3, r1
 8005fc8:	7a69      	ldrb	r1, [r5, #9]
 8005fca:	0409      	lsls	r1, r1, #16
 8005fcc:	430b      	orrs	r3, r1
 8005fce:	7aa9      	ldrb	r1, [r5, #10]
 8005fd0:	0609      	lsls	r1, r1, #24
 8005fd2:	4319      	orrs	r1, r3
 8005fd4:	d025      	beq.n	8006022 <usb_standard_get_descriptor+0x2be>
					       count = MIN(len, ep->extralen));
 8005fd6:	7b2b      	ldrb	r3, [r5, #12]
 8005fd8:	7aee      	ldrb	r6, [r5, #11]
 8005fda:	021b      	lsls	r3, r3, #8
 8005fdc:	4333      	orrs	r3, r6
 8005fde:	7b6e      	ldrb	r6, [r5, #13]
 8005fe0:	0436      	lsls	r6, r6, #16
 8005fe2:	4333      	orrs	r3, r6
 8005fe4:	7bae      	ldrb	r6, [r5, #14]
 8005fe6:	0636      	lsls	r6, r6, #24
 8005fe8:	431e      	orrs	r6, r3
 8005fea:	9b01      	ldr	r3, [sp, #4]
 8005fec:	429e      	cmp	r6, r3
 8005fee:	dd00      	ble.n	8005ff2 <usb_standard_get_descriptor+0x28e>
 8005ff0:	001e      	movs	r6, r3
 8005ff2:	b2b7      	uxth	r7, r6
					memcpy(buf, ep->extra,
 8005ff4:	003a      	movs	r2, r7
 8005ff6:	9802      	ldr	r0, [sp, #8]
 8005ff8:	f000 fc56 	bl	80068a8 <memcpy>
					buf += count;
 8005ffc:	9b02      	ldr	r3, [sp, #8]
 8005ffe:	19db      	adds	r3, r3, r7
 8006000:	9302      	str	r3, [sp, #8]
					len -= count;
 8006002:	9b01      	ldr	r3, [sp, #4]
 8006004:	1bdb      	subs	r3, r3, r7
 8006006:	b29b      	uxth	r3, r3
 8006008:	9301      	str	r3, [sp, #4]
					total += count;
 800600a:	9b03      	ldr	r3, [sp, #12]
 800600c:	19df      	adds	r7, r3, r7
 800600e:	b2bb      	uxth	r3, r7
 8006010:	9303      	str	r3, [sp, #12]
					totallen += ep->extralen;
 8006012:	7b2b      	ldrb	r3, [r5, #12]
 8006014:	7aea      	ldrb	r2, [r5, #11]
 8006016:	021b      	lsls	r3, r3, #8
 8006018:	4313      	orrs	r3, r2
 800601a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800601c:	189b      	adds	r3, r3, r2
 800601e:	aa0c      	add	r2, sp, #48	; 0x30
 8006020:	80d3      	strh	r3, [r2, #6]
			for (k = 0; k < iface->bNumEndpoints; k++) {
 8006022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006024:	3301      	adds	r3, #1
 8006026:	e795      	b.n	8005f54 <usb_standard_get_descriptor+0x1f0>
 8006028:	b2db      	uxtb	r3, r3
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;
 800602a:	6905      	ldr	r5, [r0, #16]
		if (descr_idx == 0) {
 800602c:	2b00      	cmp	r3, #0
 800602e:	d110      	bne.n	8006052 <usb_standard_get_descriptor+0x2ee>
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 8006030:	3309      	adds	r3, #9
 8006032:	70ab      	strb	r3, [r5, #2]
 8006034:	3b05      	subs	r3, #5
 8006036:	70eb      	strb	r3, [r5, #3]
			*len = MIN(*len, sd->bLength);
 8006038:	9a05      	ldr	r2, [sp, #20]
			sd->bLength = sizeof(sd->bLength) +
 800603a:	702b      	strb	r3, [r5, #0]
			*len = MIN(*len, sd->bLength);
 800603c:	8811      	ldrh	r1, [r2, #0]
 800603e:	1c0a      	adds	r2, r1, #0
 8006040:	4299      	cmp	r1, r3
 8006042:	d900      	bls.n	8006046 <usb_standard_get_descriptor+0x2e2>
 8006044:	1c1a      	adds	r2, r3, #0
 8006046:	9b05      	ldr	r3, [sp, #20]
 8006048:	801a      	strh	r2, [r3, #0]
		sd->bDescriptorType = USB_DT_STRING;
 800604a:	2303      	movs	r3, #3
 800604c:	706b      	strb	r3, [r5, #1]
		*buf = (uint8_t *)sd;
 800604e:	6025      	str	r5, [r4, #0]
 8006050:	e6a5      	b.n	8005d9e <usb_standard_get_descriptor+0x3a>
			if (!usbd_dev->strings) {
 8006052:	6887      	ldr	r7, [r0, #8]
			array_idx = descr_idx - 1;
 8006054:	3b01      	subs	r3, #1
				return USBD_REQ_NOTSUPP;
 8006056:	1e38      	subs	r0, r7, #0
			if (!usbd_dev->strings) {
 8006058:	d100      	bne.n	800605c <usb_standard_get_descriptor+0x2f8>
 800605a:	e6a1      	b.n	8005da0 <usb_standard_get_descriptor+0x3c>
			if (array_idx >= usbd_dev->num_strings) {
 800605c:	68f2      	ldr	r2, [r6, #12]
				return USBD_REQ_NOTSUPP;
 800605e:	2000      	movs	r0, #0
			if (array_idx >= usbd_dev->num_strings) {
 8006060:	429a      	cmp	r2, r3
 8006062:	dc00      	bgt.n	8006066 <usb_standard_get_descriptor+0x302>
 8006064:	e69c      	b.n	8005da0 <usb_standard_get_descriptor+0x3c>
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 8006066:	794a      	ldrb	r2, [r1, #5]
 8006068:	7908      	ldrb	r0, [r1, #4]
 800606a:	4913      	ldr	r1, [pc, #76]	; (80060b8 <usb_standard_get_descriptor+0x354>)
 800606c:	0212      	lsls	r2, r2, #8
 800606e:	4302      	orrs	r2, r0
				return USBD_REQ_NOTSUPP;
 8006070:	2000      	movs	r0, #0
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 8006072:	428a      	cmp	r2, r1
 8006074:	d000      	beq.n	8006078 <usb_standard_get_descriptor+0x314>
 8006076:	e693      	b.n	8005da0 <usb_standard_get_descriptor+0x3c>
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	59de      	ldr	r6, [r3, r7]
 800607c:	0030      	movs	r0, r6
 800607e:	f000 fc8d 	bl	800699c <strlen>
				      sizeof(sd->bLength) +
 8006082:	3001      	adds	r0, #1
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8006084:	0040      	lsls	r0, r0, #1
			*len = MIN(*len, sd->bLength);
 8006086:	9b05      	ldr	r3, [sp, #20]
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8006088:	b2c0      	uxtb	r0, r0
 800608a:	7028      	strb	r0, [r5, #0]
			*len = MIN(*len, sd->bLength);
 800608c:	881a      	ldrh	r2, [r3, #0]
 800608e:	1c13      	adds	r3, r2, #0
 8006090:	4282      	cmp	r2, r0
 8006092:	d900      	bls.n	8006096 <usb_standard_get_descriptor+0x332>
 8006094:	1c03      	adds	r3, r0, #0
 8006096:	9a05      	ldr	r2, [sp, #20]
 8006098:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < (*len / 2) - 1; i++) {
 800609a:	2300      	movs	r3, #0
 800609c:	9a05      	ldr	r2, [sp, #20]
 800609e:	8812      	ldrh	r2, [r2, #0]
 80060a0:	0852      	lsrs	r2, r2, #1
 80060a2:	3a01      	subs	r2, #1
 80060a4:	429a      	cmp	r2, r3
 80060a6:	ddd0      	ble.n	800604a <usb_standard_get_descriptor+0x2e6>
				sd->wData[i] =
 80060a8:	5cf1      	ldrb	r1, [r6, r3]
 80060aa:	005a      	lsls	r2, r3, #1
 80060ac:	18aa      	adds	r2, r5, r2
 80060ae:	7091      	strb	r1, [r2, #2]
 80060b0:	2100      	movs	r1, #0
			for (i = 0; i < (*len / 2) - 1; i++) {
 80060b2:	3301      	adds	r3, #1
				sd->wData[i] =
 80060b4:	70d1      	strb	r1, [r2, #3]
			for (i = 0; i < (*len / 2) - 1; i++) {
 80060b6:	e7f1      	b.n	800609c <usb_standard_get_descriptor+0x338>
 80060b8:	00000409 	.word	0x00000409

080060bc <usb_standard_interface_get_status>:
 80060bc:	8819      	ldrh	r1, [r3, #0]
 80060be:	2902      	cmp	r1, #2
 80060c0:	d901      	bls.n	80060c6 <usb_standard_interface_get_status+0xa>
 80060c2:	2102      	movs	r1, #2
 80060c4:	8019      	strh	r1, [r3, #0]
 80060c6:	2300      	movs	r3, #0
 80060c8:	6811      	ldr	r1, [r2, #0]
 80060ca:	2001      	movs	r0, #1
 80060cc:	700b      	strb	r3, [r1, #0]
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	7053      	strb	r3, [r2, #1]
 80060d2:	4770      	bx	lr

080060d4 <usbd_register_set_config_callback>:
{
 80060d4:	b510      	push	{r4, lr}
		if (usbd_dev->user_callback_set_config[i]) {
 80060d6:	0004      	movs	r4, r0
{
 80060d8:	0002      	movs	r2, r0
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 80060da:	2300      	movs	r3, #0
		if (usbd_dev->user_callback_set_config[i]) {
 80060dc:	34c8      	adds	r4, #200	; 0xc8
 80060de:	0098      	lsls	r0, r3, #2
 80060e0:	5820      	ldr	r0, [r4, r0]
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d007      	beq.n	80060f6 <usbd_register_set_config_callback+0x22>
			if (usbd_dev->user_callback_set_config[i] == callback) {
 80060e6:	4288      	cmp	r0, r1
 80060e8:	d009      	beq.n	80060fe <usbd_register_set_config_callback+0x2a>
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 80060ea:	3301      	adds	r3, #1
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d1f6      	bne.n	80060de <usbd_register_set_config_callback+0xa>
	return -1;
 80060f0:	2001      	movs	r0, #1
 80060f2:	4240      	negs	r0, r0
}
 80060f4:	bd10      	pop	{r4, pc}
		usbd_dev->user_callback_set_config[i] = callback;
 80060f6:	3332      	adds	r3, #50	; 0x32
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	5099      	str	r1, [r3, r2]
		return 0;
 80060fc:	e7fa      	b.n	80060f4 <usbd_register_set_config_callback+0x20>
				return 0;
 80060fe:	2000      	movs	r0, #0
 8006100:	e7f8      	b.n	80060f4 <usbd_register_set_config_callback+0x20>
	...

08006104 <_usbd_standard_request_device>:

enum usbd_request_return_codes
_usbd_standard_request_device(usbd_device *usbd_dev,
			      struct usb_setup_data *req, uint8_t **buf,
			      uint16_t *len)
{
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	0005      	movs	r5, r0
 8006108:	7848      	ldrb	r0, [r1, #1]
 800610a:	2809      	cmp	r0, #9
 800610c:	d812      	bhi.n	8006134 <_usbd_standard_request_device+0x30>
 800610e:	f000 fc5f 	bl	80069d0 <__gnu_thumb1_case_uqi>
 8006112:	110d      	.short	0x110d
 8006114:	0f111111 	.word	0x0f111111
 8006118:	0509110b 	.word	0x0509110b
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 800611c:	4c06      	ldr	r4, [pc, #24]	; (8006138 <_usbd_standard_request_device+0x34>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 800611e:	0028      	movs	r0, r5
 8006120:	47a0      	blx	r4
}
 8006122:	bd70      	pop	{r4, r5, r6, pc}
		command = usb_standard_get_configuration;
 8006124:	4c05      	ldr	r4, [pc, #20]	; (800613c <_usbd_standard_request_device+0x38>)
		break;
 8006126:	e7fa      	b.n	800611e <_usbd_standard_request_device+0x1a>
		command = usb_standard_get_descriptor;
 8006128:	4c05      	ldr	r4, [pc, #20]	; (8006140 <_usbd_standard_request_device+0x3c>)
		break;
 800612a:	e7f8      	b.n	800611e <_usbd_standard_request_device+0x1a>
		command = usb_standard_device_get_status;
 800612c:	4c05      	ldr	r4, [pc, #20]	; (8006144 <_usbd_standard_request_device+0x40>)
		break;
 800612e:	e7f6      	b.n	800611e <_usbd_standard_request_device+0x1a>
		command = usb_standard_set_address;
 8006130:	4c05      	ldr	r4, [pc, #20]	; (8006148 <_usbd_standard_request_device+0x44>)
 8006132:	e7f4      	b.n	800611e <_usbd_standard_request_device+0x1a>
	switch (req->bRequest) {
 8006134:	2000      	movs	r0, #0
 8006136:	e7f4      	b.n	8006122 <_usbd_standard_request_device+0x1e>
 8006138:	08005b5d 	.word	0x08005b5d
 800613c:	08005c15 	.word	0x08005c15
 8006140:	08005d65 	.word	0x08005d65
 8006144:	08005c8f 	.word	0x08005c8f
 8006148:	08005b27 	.word	0x08005b27

0800614c <_usbd_standard_request_interface>:

enum usbd_request_return_codes
_usbd_standard_request_interface(usbd_device *usbd_dev,
				 struct usb_setup_data *req, uint8_t **buf,
				 uint16_t *len)
{
 800614c:	b570      	push	{r4, r5, r6, lr}
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 800614e:	784c      	ldrb	r4, [r1, #1]
{
 8006150:	0005      	movs	r5, r0
	switch (req->bRequest) {
 8006152:	2c0a      	cmp	r4, #10
 8006154:	d008      	beq.n	8006168 <_usbd_standard_request_interface+0x1c>
 8006156:	2c0b      	cmp	r4, #11
 8006158:	d008      	beq.n	800616c <_usbd_standard_request_interface+0x20>
 800615a:	2000      	movs	r0, #0
 800615c:	4284      	cmp	r4, r0
 800615e:	d102      	bne.n	8006166 <_usbd_standard_request_interface+0x1a>
		break;
	case USB_REQ_SET_INTERFACE:
		command = usb_standard_set_interface;
		break;
	case USB_REQ_GET_STATUS:
		command = usb_standard_interface_get_status;
 8006160:	4c03      	ldr	r4, [pc, #12]	; (8006170 <_usbd_standard_request_interface+0x24>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 8006162:	0028      	movs	r0, r5
 8006164:	47a0      	blx	r4
}
 8006166:	bd70      	pop	{r4, r5, r6, pc}
		command = usb_standard_get_interface;
 8006168:	4c02      	ldr	r4, [pc, #8]	; (8006174 <_usbd_standard_request_interface+0x28>)
 800616a:	e7fa      	b.n	8006162 <_usbd_standard_request_interface+0x16>
	switch (req->bRequest) {
 800616c:	4c02      	ldr	r4, [pc, #8]	; (8006178 <_usbd_standard_request_interface+0x2c>)
 800616e:	e7f8      	b.n	8006162 <_usbd_standard_request_interface+0x16>
 8006170:	080060bd 	.word	0x080060bd
 8006174:	08005c3f 	.word	0x08005c3f
 8006178:	08005ce9 	.word	0x08005ce9

0800617c <_usbd_standard_request_endpoint>:

enum usbd_request_return_codes
_usbd_standard_request_endpoint(usbd_device *usbd_dev,
				struct usb_setup_data *req, uint8_t **buf,
				uint16_t *len)
{
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	0005      	movs	r5, r0
	enum usbd_request_return_codes (*command) (usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8006180:	7848      	ldrb	r0, [r1, #1]
 8006182:	2801      	cmp	r0, #1
 8006184:	d005      	beq.n	8006192 <_usbd_standard_request_endpoint+0x16>
 8006186:	2803      	cmp	r0, #3
 8006188:	d00c      	beq.n	80061a4 <_usbd_standard_request_endpoint+0x28>
 800618a:	2800      	cmp	r0, #0
 800618c:	d013      	beq.n	80061b6 <_usbd_standard_request_endpoint+0x3a>
		 */
		break;
	}

	if (!command) {
		return USBD_REQ_NOTSUPP;
 800618e:	2000      	movs	r0, #0
	}

	return command(usbd_dev, req, buf, len);
}
 8006190:	bd70      	pop	{r4, r5, r6, pc}
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8006192:	78c8      	ldrb	r0, [r1, #3]
 8006194:	788c      	ldrb	r4, [r1, #2]
 8006196:	0200      	lsls	r0, r0, #8
 8006198:	4320      	orrs	r0, r4
			command = usb_standard_endpoint_unstall;
 800619a:	4c08      	ldr	r4, [pc, #32]	; (80061bc <_usbd_standard_request_endpoint+0x40>)
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 800619c:	d1f7      	bne.n	800618e <_usbd_standard_request_endpoint+0x12>
	return command(usbd_dev, req, buf, len);
 800619e:	0028      	movs	r0, r5
 80061a0:	47a0      	blx	r4
 80061a2:	e7f5      	b.n	8006190 <_usbd_standard_request_endpoint+0x14>
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 80061a4:	78cc      	ldrb	r4, [r1, #3]
 80061a6:	7888      	ldrb	r0, [r1, #2]
 80061a8:	0224      	lsls	r4, r4, #8
 80061aa:	4304      	orrs	r4, r0
		return USBD_REQ_NOTSUPP;
 80061ac:	2000      	movs	r0, #0
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 80061ae:	4284      	cmp	r4, r0
 80061b0:	d1ee      	bne.n	8006190 <_usbd_standard_request_endpoint+0x14>
			command = usb_standard_endpoint_stall;
 80061b2:	4c03      	ldr	r4, [pc, #12]	; (80061c0 <_usbd_standard_request_endpoint+0x44>)
 80061b4:	e7f3      	b.n	800619e <_usbd_standard_request_endpoint+0x22>
	switch (req->bRequest) {
 80061b6:	4c03      	ldr	r4, [pc, #12]	; (80061c4 <_usbd_standard_request_endpoint+0x48>)
 80061b8:	e7f1      	b.n	800619e <_usbd_standard_request_endpoint+0x22>
 80061ba:	46c0      	nop			; (mov r8, r8)
 80061bc:	08005cdb 	.word	0x08005cdb
 80061c0:	08005ccd 	.word	0x08005ccd
 80061c4:	08005ca7 	.word	0x08005ca7

080061c8 <_usbd_standard_request>:

enum usbd_request_return_codes
_usbd_standard_request(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len)
{
 80061c8:	b570      	push	{r4, r5, r6, lr}
	/* FIXME: Have class/vendor requests as well. */
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) {
 80061ca:	780d      	ldrb	r5, [r1, #0]
 80061cc:	2660      	movs	r6, #96	; 0x60
 80061ce:	002c      	movs	r4, r5
 80061d0:	4034      	ands	r4, r6
 80061d2:	4235      	tst	r5, r6
 80061d4:	d112      	bne.n	80061fc <_usbd_standard_request+0x34>
		return USBD_REQ_NOTSUPP;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
 80061d6:	3e41      	subs	r6, #65	; 0x41
 80061d8:	4035      	ands	r5, r6
 80061da:	2d01      	cmp	r5, #1
 80061dc:	d008      	beq.n	80061f0 <_usbd_standard_request+0x28>
 80061de:	2d02      	cmp	r5, #2
 80061e0:	d009      	beq.n	80061f6 <_usbd_standard_request+0x2e>
 80061e2:	2d00      	cmp	r5, #0
 80061e4:	d102      	bne.n	80061ec <_usbd_standard_request+0x24>
	case USB_REQ_TYPE_DEVICE:
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
 80061e6:	f7ff ff8d 	bl	8006104 <_usbd_standard_request_device>
	case USB_REQ_TYPE_INTERFACE:
		return _usbd_standard_request_interface(usbd_dev, req,
							buf, len);
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 80061ea:	0004      	movs	r4, r0
	default:
		return USBD_REQ_NOTSUPP;
	}
}
 80061ec:	0020      	movs	r0, r4
 80061ee:	bd70      	pop	{r4, r5, r6, pc}
		return _usbd_standard_request_interface(usbd_dev, req,
 80061f0:	f7ff ffac 	bl	800614c <_usbd_standard_request_interface>
 80061f4:	e7f9      	b.n	80061ea <_usbd_standard_request+0x22>
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 80061f6:	f7ff ffc1 	bl	800617c <_usbd_standard_request_endpoint>
 80061fa:	e7f6      	b.n	80061ea <_usbd_standard_request+0x22>
		return USBD_REQ_NOTSUPP;
 80061fc:	2400      	movs	r4, #0
 80061fe:	e7f5      	b.n	80061ec <_usbd_standard_request+0x24>

08006200 <st_usbfs_set_address>:

void st_usbfs_set_address(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	/* Set device address and enable. */
	SET_REG(USB_DADDR_REG, (addr & USB_DADDR_ADDR) | USB_DADDR_EF);
 8006200:	2380      	movs	r3, #128	; 0x80
 8006202:	4319      	orrs	r1, r3
 8006204:	4b01      	ldr	r3, [pc, #4]	; (800620c <st_usbfs_set_address+0xc>)
 8006206:	6019      	str	r1, [r3, #0]
}
 8006208:	4770      	bx	lr
 800620a:	46c0      	nop			; (mov r8, r8)
 800620c:	40005c4c 	.word	0x40005c4c

08006210 <st_usbfs_set_ep_rx_bufsize>:
	 *	0		0		0			??? "Not allowed" according to RM0091, RM0008
	 *	1		0		1			2
	 *	61		0		31			62
	 *	63		1		1			64
	 */
	if (size > 62) {
 8006210:	2a3e      	cmp	r2, #62	; 0x3e
 8006212:	d910      	bls.n	8006236 <st_usbfs_set_ep_rx_bufsize+0x26>
		/* Round up, div by 32 and sub 1 == (size + 31)/32 - 1 == (size-1)/32)*/
		size = ((size - 1) >> 5) & 0x1F;
		realsize = (size + 1) << 5;
		/* Set BL_SIZE bit (no macro for this) */
		size |= (1<<5);
 8006214:	2320      	movs	r3, #32
		size = ((size - 1) >> 5) & 0x1F;
 8006216:	3a01      	subs	r2, #1
 8006218:	0592      	lsls	r2, r2, #22
 800621a:	0ed2      	lsrs	r2, r2, #27
		realsize = (size + 1) << 5;
 800621c:	0150      	lsls	r0, r2, #5
 800621e:	3020      	adds	r0, #32
		size |= (1<<5);
 8006220:	431a      	orrs	r2, r3
		/* round up and div by 2 */
		size = (size + 1) >> 1;
		realsize = size << 1;
	}
	/* write to the BL_SIZE and NUM_BLOCK fields */
	USB_SET_EP_RX_COUNT(ep, size << 10);
 8006222:	4b07      	ldr	r3, [pc, #28]	; (8006240 <st_usbfs_set_ep_rx_bufsize+0x30>)
 8006224:	00c9      	lsls	r1, r1, #3
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	0292      	lsls	r2, r2, #10
 800622a:	b29b      	uxth	r3, r3
 800622c:	18c9      	adds	r1, r1, r3
 800622e:	4b05      	ldr	r3, [pc, #20]	; (8006244 <st_usbfs_set_ep_rx_bufsize+0x34>)
 8006230:	18c9      	adds	r1, r1, r3
 8006232:	800a      	strh	r2, [r1, #0]
	return realsize;
}
 8006234:	4770      	bx	lr
		size = (size + 1) >> 1;
 8006236:	3201      	adds	r2, #1
 8006238:	0852      	lsrs	r2, r2, #1
		realsize = size << 1;
 800623a:	0050      	lsls	r0, r2, #1
 800623c:	b280      	uxth	r0, r0
 800623e:	e7f0      	b.n	8006222 <st_usbfs_set_ep_rx_bufsize+0x12>
 8006240:	40005c50 	.word	0x40005c50
 8006244:	40006006 	.word	0x40006006

08006248 <st_usbfs_ep_setup>:

void st_usbfs_ep_setup(usbd_device *dev, uint8_t addr, uint8_t type,
		uint16_t max_size,
		void (*callback) (usbd_device *usbd_dev,
		uint8_t ep))
{
 8006248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800624a:	0005      	movs	r5, r0
	/* Translate USB standard type codes to STM32. */
	const uint16_t typelookup[] = {
 800624c:	4837      	ldr	r0, [pc, #220]	; (800632c <st_usbfs_ep_setup+0xe4>)
{
 800624e:	b085      	sub	sp, #20
	const uint16_t typelookup[] = {
 8006250:	9002      	str	r0, [sp, #8]
 8006252:	20c0      	movs	r0, #192	; 0xc0
		[USB_ENDPOINT_ATTR_ISOCHRONOUS] = USB_EP_TYPE_ISO,
		[USB_ENDPOINT_ATTR_BULK] = USB_EP_TYPE_BULK,
		[USB_ENDPOINT_ATTR_INTERRUPT] = USB_EP_TYPE_INTERRUPT,
	};
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;
 8006254:	267f      	movs	r6, #127	; 0x7f
	const uint16_t typelookup[] = {
 8006256:	04c0      	lsls	r0, r0, #19
 8006258:	9003      	str	r0, [sp, #12]
	addr &= 0x7f;
 800625a:	400e      	ands	r6, r1

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
 800625c:	4834      	ldr	r0, [pc, #208]	; (8006330 <st_usbfs_ep_setup+0xe8>)
 800625e:	00b4      	lsls	r4, r6, #2
 8006260:	1824      	adds	r4, r4, r0
 8006262:	6820      	ldr	r0, [r4, #0]
 8006264:	4f33      	ldr	r7, [pc, #204]	; (8006334 <st_usbfs_ep_setup+0xec>)
	USB_SET_EP_TYPE(addr, typelookup[type]);
 8006266:	0052      	lsls	r2, r2, #1
	USB_SET_EP_ADDR(addr, addr);
 8006268:	4038      	ands	r0, r7
 800626a:	4330      	orrs	r0, r6
 800626c:	b280      	uxth	r0, r0
 800626e:	6020      	str	r0, [r4, #0]
	USB_SET_EP_TYPE(addr, typelookup[type]);
 8006270:	6827      	ldr	r7, [r4, #0]
 8006272:	4831      	ldr	r0, [pc, #196]	; (8006338 <st_usbfs_ep_setup+0xf0>)
 8006274:	4038      	ands	r0, r7
 8006276:	af02      	add	r7, sp, #8
 8006278:	5bd2      	ldrh	r2, [r2, r7]
 800627a:	4f30      	ldr	r7, [pc, #192]	; (800633c <st_usbfs_ep_setup+0xf4>)
 800627c:	4310      	orrs	r0, r2
 800627e:	b280      	uxth	r0, r0
 8006280:	b24a      	sxtb	r2, r1
 8006282:	6020      	str	r0, [r4, #0]

	if (dir || (addr == 0)) {
 8006284:	4694      	mov	ip, r2
 8006286:	482e      	ldr	r0, [pc, #184]	; (8006340 <st_usbfs_ep_setup+0xf8>)
 8006288:	2a00      	cmp	r2, #0
 800628a:	db22      	blt.n	80062d2 <st_usbfs_ep_setup+0x8a>
 800628c:	2e00      	cmp	r6, #0
 800628e:	d020      	beq.n	80062d2 <st_usbfs_ep_setup+0x8a>
		dev->pm_top += max_size;
	}

	if (!dir) {
		uint16_t realsize;
		USB_SET_EP_RX_ADDR(addr, dev->pm_top);
 8006290:	6800      	ldr	r0, [r0, #0]
 8006292:	00f2      	lsls	r2, r6, #3
 8006294:	b280      	uxth	r0, r0
 8006296:	1812      	adds	r2, r2, r0
 8006298:	482a      	ldr	r0, [pc, #168]	; (8006344 <st_usbfs_ep_setup+0xfc>)
 800629a:	8b29      	ldrh	r1, [r5, #24]
 800629c:	1812      	adds	r2, r2, r0
 800629e:	8011      	strh	r1, [r2, #0]
		realsize = st_usbfs_set_ep_rx_bufsize(dev, addr, max_size);
 80062a0:	0028      	movs	r0, r5
 80062a2:	001a      	movs	r2, r3
 80062a4:	0031      	movs	r1, r6
 80062a6:	f7ff ffb3 	bl	8006210 <st_usbfs_set_ep_rx_bufsize>
		if (callback) {
 80062aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d136      	bne.n	800631e <st_usbfs_ep_setup+0xd6>
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
			    (void *)callback;
		}
		USB_CLR_EP_RX_DTOG(addr);
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	4a25      	ldr	r2, [pc, #148]	; (8006348 <st_usbfs_ep_setup+0x100>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	6023      	str	r3, [r4, #0]
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	4a24      	ldr	r2, [pc, #144]	; (800634c <st_usbfs_ep_setup+0x104>)
 80062bc:	401a      	ands	r2, r3
 80062be:	23c0      	movs	r3, #192	; 0xc0
 80062c0:	019b      	lsls	r3, r3, #6
 80062c2:	4053      	eors	r3, r2
 80062c4:	433b      	orrs	r3, r7
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	6023      	str	r3, [r4, #0]
		dev->pm_top += realsize;
 80062ca:	8b2b      	ldrh	r3, [r5, #24]
 80062cc:	18c0      	adds	r0, r0, r3
 80062ce:	8328      	strh	r0, [r5, #24]
	}
}
 80062d0:	e023      	b.n	800631a <st_usbfs_ep_setup+0xd2>
		USB_SET_EP_TX_ADDR(addr, dev->pm_top);
 80062d2:	6802      	ldr	r2, [r0, #0]
 80062d4:	8b29      	ldrh	r1, [r5, #24]
 80062d6:	b292      	uxth	r2, r2
 80062d8:	9101      	str	r1, [sp, #4]
 80062da:	00f1      	lsls	r1, r6, #3
 80062dc:	1889      	adds	r1, r1, r2
 80062de:	4a1c      	ldr	r2, [pc, #112]	; (8006350 <st_usbfs_ep_setup+0x108>)
 80062e0:	1889      	adds	r1, r1, r2
 80062e2:	9a01      	ldr	r2, [sp, #4]
 80062e4:	800a      	strh	r2, [r1, #0]
		if (callback) {
 80062e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062e8:	2a00      	cmp	r2, #0
 80062ea:	d004      	beq.n	80062f6 <st_usbfs_ep_setup+0xae>
			dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
 80062ec:	220c      	movs	r2, #12
 80062ee:	4372      	muls	r2, r6
 80062f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80062f2:	18aa      	adds	r2, r5, r2
 80062f4:	6691      	str	r1, [r2, #104]	; 0x68
		USB_CLR_EP_TX_DTOG(addr);
 80062f6:	6822      	ldr	r2, [r4, #0]
 80062f8:	4916      	ldr	r1, [pc, #88]	; (8006354 <st_usbfs_ep_setup+0x10c>)
 80062fa:	400a      	ands	r2, r1
 80062fc:	6022      	str	r2, [r4, #0]
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 80062fe:	6822      	ldr	r2, [r4, #0]
 8006300:	4915      	ldr	r1, [pc, #84]	; (8006358 <st_usbfs_ep_setup+0x110>)
 8006302:	4011      	ands	r1, r2
 8006304:	2220      	movs	r2, #32
 8006306:	404a      	eors	r2, r1
 8006308:	433a      	orrs	r2, r7
 800630a:	b292      	uxth	r2, r2
 800630c:	6022      	str	r2, [r4, #0]
		dev->pm_top += max_size;
 800630e:	8b2a      	ldrh	r2, [r5, #24]
 8006310:	189a      	adds	r2, r3, r2
 8006312:	832a      	strh	r2, [r5, #24]
	if (!dir) {
 8006314:	4662      	mov	r2, ip
 8006316:	2a00      	cmp	r2, #0
 8006318:	daba      	bge.n	8006290 <st_usbfs_ep_setup+0x48>
}
 800631a:	b005      	add	sp, #20
 800631c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
 800631e:	230c      	movs	r3, #12
 8006320:	435e      	muls	r6, r3
 8006322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006324:	19ae      	adds	r6, r5, r6
 8006326:	66f3      	str	r3, [r6, #108]	; 0x6c
 8006328:	e7c2      	b.n	80062b0 <st_usbfs_ep_setup+0x68>
 800632a:	46c0      	nop			; (mov r8, r8)
 800632c:	04000200 	.word	0x04000200
 8006330:	40005c00 	.word	0x40005c00
 8006334:	ffff8f80 	.word	0xffff8f80
 8006338:	ffff898f 	.word	0xffff898f
 800633c:	ffff8080 	.word	0xffff8080
 8006340:	40005c50 	.word	0x40005c50
 8006344:	40006004 	.word	0x40006004
 8006348:	0000cf8f 	.word	0x0000cf8f
 800634c:	0000bf8f 	.word	0x0000bf8f
 8006350:	40006000 	.word	0x40006000
 8006354:	00008fcf 	.word	0x00008fcf
 8006358:	00008fbf 	.word	0x00008fbf

0800635c <st_usbfs_endpoints_reset>:

void st_usbfs_endpoints_reset(usbd_device *dev)
{
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	4a0b      	ldr	r2, [pc, #44]	; (800638c <st_usbfs_endpoints_reset+0x30>)
	int i;

	/* Reset all endpoints. */
	for (i = 1; i < 8; i++) {
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 8006360:	4e0b      	ldr	r6, [pc, #44]	; (8006390 <st_usbfs_endpoints_reset+0x34>)
 8006362:	490c      	ldr	r1, [pc, #48]	; (8006394 <st_usbfs_endpoints_reset+0x38>)
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 8006364:	4d0c      	ldr	r5, [pc, #48]	; (8006398 <st_usbfs_endpoints_reset+0x3c>)
	for (i = 1; i < 8; i++) {
 8006366:	4c0d      	ldr	r4, [pc, #52]	; (800639c <st_usbfs_endpoints_reset+0x40>)
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 8006368:	6813      	ldr	r3, [r2, #0]
 800636a:	4033      	ands	r3, r6
 800636c:	430b      	orrs	r3, r1
 800636e:	b29b      	uxth	r3, r3
 8006370:	6013      	str	r3, [r2, #0]
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 8006372:	6813      	ldr	r3, [r2, #0]
 8006374:	402b      	ands	r3, r5
 8006376:	430b      	orrs	r3, r1
 8006378:	b29b      	uxth	r3, r3
 800637a:	c208      	stmia	r2!, {r3}
	for (i = 1; i < 8; i++) {
 800637c:	42a2      	cmp	r2, r4
 800637e:	d1f3      	bne.n	8006368 <st_usbfs_endpoints_reset+0xc>
	}
	dev->pm_top = USBD_PM_TOP + (2 * dev->desc->bMaxPacketSize0);
 8006380:	6803      	ldr	r3, [r0, #0]
 8006382:	79db      	ldrb	r3, [r3, #7]
 8006384:	3320      	adds	r3, #32
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	8303      	strh	r3, [r0, #24]
}
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	40005c04 	.word	0x40005c04
 8006390:	ffff8fbf 	.word	0xffff8fbf
 8006394:	ffff8080 	.word	0xffff8080
 8006398:	ffffbf8f 	.word	0xffffbf8f
 800639c:	40005c20 	.word	0x40005c20

080063a0 <st_usbfs_ep_stall_set>:

void st_usbfs_ep_stall_set(usbd_device *dev, uint8_t addr,
				   uint8_t stall)
{
 80063a0:	b530      	push	{r4, r5, lr}
 80063a2:	4822      	ldr	r0, [pc, #136]	; (800642c <st_usbfs_ep_stall_set+0x8c>)
	(void)dev;
	if (addr == 0) {
 80063a4:	2900      	cmp	r1, #0
 80063a6:	d126      	bne.n	80063f6 <st_usbfs_ep_stall_set+0x56>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 80063a8:	4c21      	ldr	r4, [pc, #132]	; (8006430 <st_usbfs_ep_stall_set+0x90>)
 80063aa:	4d22      	ldr	r5, [pc, #136]	; (8006434 <st_usbfs_ep_stall_set+0x94>)
 80063ac:	6823      	ldr	r3, [r4, #0]
 80063ae:	401d      	ands	r5, r3
 80063b0:	2310      	movs	r3, #16
 80063b2:	2a00      	cmp	r2, #0
 80063b4:	d100      	bne.n	80063b8 <st_usbfs_ep_stall_set+0x18>
 80063b6:	18db      	adds	r3, r3, r3
 80063b8:	406b      	eors	r3, r5
 80063ba:	b21b      	sxth	r3, r3
 80063bc:	4303      	orrs	r3, r0
 80063be:	b29b      	uxth	r3, r3
 80063c0:	6023      	str	r3, [r4, #0]
		if (!stall) {
			USB_CLR_EP_TX_DTOG(addr);
		}
	} else {
		/* Reset to DATA0 if clearing stall condition. */
		if (!stall) {
 80063c2:	4b1b      	ldr	r3, [pc, #108]	; (8006430 <st_usbfs_ep_stall_set+0x90>)
 80063c4:	0089      	lsls	r1, r1, #2
 80063c6:	18c9      	adds	r1, r1, r3
 80063c8:	2a00      	cmp	r2, #0
 80063ca:	d103      	bne.n	80063d4 <st_usbfs_ep_stall_set+0x34>
			USB_CLR_EP_RX_DTOG(addr);
 80063cc:	680b      	ldr	r3, [r1, #0]
 80063ce:	4c1a      	ldr	r4, [pc, #104]	; (8006438 <st_usbfs_ep_stall_set+0x98>)
 80063d0:	4023      	ands	r3, r4
 80063d2:	600b      	str	r3, [r1, #0]
		}

		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 80063d4:	680c      	ldr	r4, [r1, #0]
 80063d6:	4b19      	ldr	r3, [pc, #100]	; (800643c <st_usbfs_ep_stall_set+0x9c>)
 80063d8:	401c      	ands	r4, r3
 80063da:	0013      	movs	r3, r2
 80063dc:	1e5a      	subs	r2, r3, #1
 80063de:	4193      	sbcs	r3, r2
 80063e0:	425a      	negs	r2, r3
 80063e2:	23c0      	movs	r3, #192	; 0xc0
 80063e4:	0352      	lsls	r2, r2, #13
 80063e6:	019b      	lsls	r3, r3, #6
 80063e8:	18d2      	adds	r2, r2, r3
 80063ea:	4062      	eors	r2, r4
 80063ec:	b212      	sxth	r2, r2
 80063ee:	4302      	orrs	r2, r0
 80063f0:	b292      	uxth	r2, r2
 80063f2:	600a      	str	r2, [r1, #0]
				   USB_EP_RX_STAT_VALID);
	}
}
 80063f4:	e019      	b.n	800642a <st_usbfs_ep_stall_set+0x8a>
	if (addr & 0x80) {
 80063f6:	b24b      	sxtb	r3, r1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	dae2      	bge.n	80063c2 <st_usbfs_ep_stall_set+0x22>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 80063fc:	237f      	movs	r3, #127	; 0x7f
 80063fe:	4019      	ands	r1, r3
 8006400:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <st_usbfs_ep_stall_set+0x90>)
 8006402:	0089      	lsls	r1, r1, #2
 8006404:	18c9      	adds	r1, r1, r3
 8006406:	680b      	ldr	r3, [r1, #0]
 8006408:	4c0a      	ldr	r4, [pc, #40]	; (8006434 <st_usbfs_ep_stall_set+0x94>)
 800640a:	401c      	ands	r4, r3
 800640c:	2310      	movs	r3, #16
 800640e:	2a00      	cmp	r2, #0
 8006410:	d100      	bne.n	8006414 <st_usbfs_ep_stall_set+0x74>
 8006412:	18db      	adds	r3, r3, r3
 8006414:	4063      	eors	r3, r4
 8006416:	b21b      	sxth	r3, r3
 8006418:	4318      	orrs	r0, r3
 800641a:	b280      	uxth	r0, r0
 800641c:	6008      	str	r0, [r1, #0]
		if (!stall) {
 800641e:	2a00      	cmp	r2, #0
 8006420:	d103      	bne.n	800642a <st_usbfs_ep_stall_set+0x8a>
			USB_CLR_EP_TX_DTOG(addr);
 8006422:	680b      	ldr	r3, [r1, #0]
 8006424:	4a06      	ldr	r2, [pc, #24]	; (8006440 <st_usbfs_ep_stall_set+0xa0>)
 8006426:	4013      	ands	r3, r2
 8006428:	600b      	str	r3, [r1, #0]
}
 800642a:	bd30      	pop	{r4, r5, pc}
 800642c:	ffff8080 	.word	0xffff8080
 8006430:	40005c00 	.word	0x40005c00
 8006434:	00008fbf 	.word	0x00008fbf
 8006438:	0000cf8f 	.word	0x0000cf8f
 800643c:	0000bf8f 	.word	0x0000bf8f
 8006440:	00008fcf 	.word	0x00008fcf

08006444 <st_usbfs_ep_stall_get>:

uint8_t st_usbfs_ep_stall_get(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	if (addr & 0x80) {
 8006444:	b24b      	sxtb	r3, r1
 8006446:	2b00      	cmp	r3, #0
 8006448:	da0c      	bge.n	8006464 <st_usbfs_ep_stall_get+0x20>
		if ((*USB_EP_REG(addr & 0x7F) & USB_EP_TX_STAT) ==
 800644a:	237f      	movs	r3, #127	; 0x7f
 800644c:	4019      	ands	r1, r3
 800644e:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <st_usbfs_ep_stall_get+0x34>)
 8006450:	0089      	lsls	r1, r1, #2
 8006452:	18c9      	adds	r1, r1, r3
 8006454:	2330      	movs	r3, #48	; 0x30
 8006456:	6808      	ldr	r0, [r1, #0]
 8006458:	4018      	ands	r0, r3
 800645a:	3810      	subs	r0, #16
		    USB_EP_TX_STAT_STALL) {
			return 1;
		}
	} else {
		if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) ==
 800645c:	4243      	negs	r3, r0
 800645e:	4158      	adcs	r0, r3
			return 1;
 8006460:	b2c0      	uxtb	r0, r0
		    USB_EP_RX_STAT_STALL) {
			return 1;
		}
	}
	return 0;
}
 8006462:	4770      	bx	lr
		if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) ==
 8006464:	4b04      	ldr	r3, [pc, #16]	; (8006478 <st_usbfs_ep_stall_get+0x34>)
 8006466:	0089      	lsls	r1, r1, #2
 8006468:	18c9      	adds	r1, r1, r3
 800646a:	23c0      	movs	r3, #192	; 0xc0
 800646c:	6808      	ldr	r0, [r1, #0]
 800646e:	019b      	lsls	r3, r3, #6
 8006470:	4018      	ands	r0, r3
 8006472:	4b02      	ldr	r3, [pc, #8]	; (800647c <st_usbfs_ep_stall_get+0x38>)
 8006474:	18c0      	adds	r0, r0, r3
 8006476:	e7f1      	b.n	800645c <st_usbfs_ep_stall_get+0x18>
 8006478:	40005c00 	.word	0x40005c00
 800647c:	fffff000 	.word	0xfffff000

08006480 <st_usbfs_ep_nak_set>:

void st_usbfs_ep_nak_set(usbd_device *dev, uint8_t addr, uint8_t nak)
{
	(void)dev;
	/* It does not make sense to force NAK on IN endpoints. */
	if (addr & 0x80) {
 8006480:	b24b      	sxtb	r3, r1
{
 8006482:	b510      	push	{r4, lr}
	if (addr & 0x80) {
 8006484:	2b00      	cmp	r3, #0
 8006486:	db11      	blt.n	80064ac <st_usbfs_ep_nak_set+0x2c>
		return;
	}

	st_usbfs_force_nak[addr] = nak;
 8006488:	4b0c      	ldr	r3, [pc, #48]	; (80064bc <st_usbfs_ep_nak_set+0x3c>)
 800648a:	4c0d      	ldr	r4, [pc, #52]	; (80064c0 <st_usbfs_ep_nak_set+0x40>)
 800648c:	545a      	strb	r2, [r3, r1]

	if (nak) {
 800648e:	4b0d      	ldr	r3, [pc, #52]	; (80064c4 <st_usbfs_ep_nak_set+0x44>)
 8006490:	0089      	lsls	r1, r1, #2
 8006492:	480d      	ldr	r0, [pc, #52]	; (80064c8 <st_usbfs_ep_nak_set+0x48>)
 8006494:	18c9      	adds	r1, r1, r3
 8006496:	2a00      	cmp	r2, #0
 8006498:	d009      	beq.n	80064ae <st_usbfs_ep_nak_set+0x2e>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_NAK);
 800649a:	2380      	movs	r3, #128	; 0x80
 800649c:	680a      	ldr	r2, [r1, #0]
 800649e:	019b      	lsls	r3, r3, #6
 80064a0:	4022      	ands	r2, r4
 80064a2:	b292      	uxth	r2, r2
	} else {
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 80064a4:	4053      	eors	r3, r2
 80064a6:	4303      	orrs	r3, r0
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	600b      	str	r3, [r1, #0]
	}
}
 80064ac:	bd10      	pop	{r4, pc}
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 80064ae:	22c0      	movs	r2, #192	; 0xc0
 80064b0:	680b      	ldr	r3, [r1, #0]
 80064b2:	0192      	lsls	r2, r2, #6
 80064b4:	4023      	ands	r3, r4
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	e7f4      	b.n	80064a4 <st_usbfs_ep_nak_set+0x24>
 80064ba:	46c0      	nop			; (mov r8, r8)
 80064bc:	20000568 	.word	0x20000568
 80064c0:	ffffbf8f 	.word	0xffffbf8f
 80064c4:	40005c00 	.word	0x40005c00
 80064c8:	ffff8080 	.word	0xffff8080

080064cc <st_usbfs_ep_write_packet>:

uint16_t st_usbfs_ep_write_packet(usbd_device *dev, uint8_t addr,
				     const void *buf, uint16_t len)
{
 80064cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ce:	000c      	movs	r4, r1
 80064d0:	001d      	movs	r5, r3
	(void)dev;
	addr &= 0x7F;
 80064d2:	237f      	movs	r3, #127	; 0x7f
{
 80064d4:	0011      	movs	r1, r2

	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 80064d6:	2230      	movs	r2, #48	; 0x30
	addr &= 0x7F;
 80064d8:	401c      	ands	r4, r3
	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 80064da:	4b13      	ldr	r3, [pc, #76]	; (8006528 <st_usbfs_ep_write_packet+0x5c>)
 80064dc:	00a6      	lsls	r6, r4, #2
 80064de:	18f6      	adds	r6, r6, r3
 80064e0:	6833      	ldr	r3, [r6, #0]
 80064e2:	4013      	ands	r3, r2
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d01c      	beq.n	8006522 <st_usbfs_ep_write_packet+0x56>
		return 0;
	}

	st_usbfs_copy_to_pm(USB_GET_EP_TX_BUFF(addr), buf, len);
 80064e8:	4810      	ldr	r0, [pc, #64]	; (800652c <st_usbfs_ep_write_packet+0x60>)
 80064ea:	4f11      	ldr	r7, [pc, #68]	; (8006530 <st_usbfs_ep_write_packet+0x64>)
 80064ec:	0002      	movs	r2, r0
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	00e4      	lsls	r4, r4, #3
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	18e3      	adds	r3, r4, r3
 80064f6:	181b      	adds	r3, r3, r0
 80064f8:	8818      	ldrh	r0, [r3, #0]
 80064fa:	1880      	adds	r0, r0, r2
 80064fc:	002a      	movs	r2, r5
 80064fe:	f000 f921 	bl	8006744 <st_usbfs_copy_to_pm>
	USB_SET_EP_TX_COUNT(addr, len);
 8006502:	6839      	ldr	r1, [r7, #0]
 8006504:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <st_usbfs_ep_write_packet+0x68>)
 8006506:	b289      	uxth	r1, r1
 8006508:	1864      	adds	r4, r4, r1
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 800650a:	4a0b      	ldr	r2, [pc, #44]	; (8006538 <st_usbfs_ep_write_packet+0x6c>)
	USB_SET_EP_TX_COUNT(addr, len);
 800650c:	18e4      	adds	r4, r4, r3
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 800650e:	6833      	ldr	r3, [r6, #0]
	USB_SET_EP_TX_COUNT(addr, len);
 8006510:	8025      	strh	r5, [r4, #0]
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 8006512:	4013      	ands	r3, r2
 8006514:	2230      	movs	r2, #48	; 0x30
 8006516:	4053      	eors	r3, r2
 8006518:	4a08      	ldr	r2, [pc, #32]	; (800653c <st_usbfs_ep_write_packet+0x70>)
 800651a:	4313      	orrs	r3, r2
 800651c:	6033      	str	r3, [r6, #0]

	return len;
}
 800651e:	0028      	movs	r0, r5
 8006520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 8006522:	2500      	movs	r5, #0
 8006524:	e7fb      	b.n	800651e <st_usbfs_ep_write_packet+0x52>
 8006526:	46c0      	nop			; (mov r8, r8)
 8006528:	40005c00 	.word	0x40005c00
 800652c:	40006000 	.word	0x40006000
 8006530:	40005c50 	.word	0x40005c50
 8006534:	40006002 	.word	0x40006002
 8006538:	00008fbf 	.word	0x00008fbf
 800653c:	00008080 	.word	0x00008080

08006540 <st_usbfs_ep_read_packet>:

uint16_t st_usbfs_ep_read_packet(usbd_device *dev, uint8_t addr,
					 void *buf, uint16_t len)
{
 8006540:	0010      	movs	r0, r2
	(void)dev;
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 8006542:	22c0      	movs	r2, #192	; 0xc0
{
 8006544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006546:	001c      	movs	r4, r3
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 8006548:	4b1e      	ldr	r3, [pc, #120]	; (80065c4 <st_usbfs_ep_read_packet+0x84>)
 800654a:	008d      	lsls	r5, r1, #2
 800654c:	18ed      	adds	r5, r5, r3
 800654e:	682b      	ldr	r3, [r5, #0]
 8006550:	0192      	lsls	r2, r2, #6
{
 8006552:	000f      	movs	r7, r1
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 8006554:	4013      	ands	r3, r2
 8006556:	4293      	cmp	r3, r2
 8006558:	d032      	beq.n	80065c0 <st_usbfs_ep_read_packet+0x80>
		return 0;
	}

	len = MIN(USB_GET_EP_RX_COUNT(addr) & 0x3ff, len);
 800655a:	4a1b      	ldr	r2, [pc, #108]	; (80065c8 <st_usbfs_ep_read_packet+0x88>)
 800655c:	00ce      	lsls	r6, r1, #3
 800655e:	6813      	ldr	r3, [r2, #0]
 8006560:	491a      	ldr	r1, [pc, #104]	; (80065cc <st_usbfs_ep_read_packet+0x8c>)
 8006562:	b29b      	uxth	r3, r3
 8006564:	18f3      	adds	r3, r6, r3
 8006566:	185b      	adds	r3, r3, r1
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	059b      	lsls	r3, r3, #22
 800656c:	0d9b      	lsrs	r3, r3, #22
 800656e:	429c      	cmp	r4, r3
 8006570:	d906      	bls.n	8006580 <st_usbfs_ep_read_packet+0x40>
 8006572:	6813      	ldr	r3, [r2, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	18f3      	adds	r3, r6, r3
 8006578:	185b      	adds	r3, r3, r1
 800657a:	881c      	ldrh	r4, [r3, #0]
 800657c:	05a4      	lsls	r4, r4, #22
 800657e:	0da4      	lsrs	r4, r4, #22
	st_usbfs_copy_from_pm(buf, USB_GET_EP_RX_BUFF(addr), len);
 8006580:	6813      	ldr	r3, [r2, #0]
 8006582:	0022      	movs	r2, r4
 8006584:	b29b      	uxth	r3, r3
 8006586:	18f6      	adds	r6, r6, r3
 8006588:	4b11      	ldr	r3, [pc, #68]	; (80065d0 <st_usbfs_ep_read_packet+0x90>)
 800658a:	18f6      	adds	r6, r6, r3
 800658c:	8831      	ldrh	r1, [r6, #0]
 800658e:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <st_usbfs_ep_read_packet+0x94>)
 8006590:	18c9      	adds	r1, r1, r3
 8006592:	f000 f8e5 	bl	8006760 <st_usbfs_copy_from_pm>
	USB_CLR_EP_RX_CTR(addr);
 8006596:	682b      	ldr	r3, [r5, #0]
 8006598:	4a0f      	ldr	r2, [pc, #60]	; (80065d8 <st_usbfs_ep_read_packet+0x98>)
 800659a:	401a      	ands	r2, r3
 800659c:	2380      	movs	r3, #128	; 0x80
 800659e:	4313      	orrs	r3, r2
 80065a0:	602b      	str	r3, [r5, #0]

	if (!st_usbfs_force_nak[addr]) {
 80065a2:	4b0e      	ldr	r3, [pc, #56]	; (80065dc <st_usbfs_ep_read_packet+0x9c>)
 80065a4:	5ddb      	ldrb	r3, [r3, r7]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d108      	bne.n	80065bc <st_usbfs_ep_read_packet+0x7c>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 80065aa:	682b      	ldr	r3, [r5, #0]
 80065ac:	4a0c      	ldr	r2, [pc, #48]	; (80065e0 <st_usbfs_ep_read_packet+0xa0>)
 80065ae:	401a      	ands	r2, r3
 80065b0:	23c0      	movs	r3, #192	; 0xc0
 80065b2:	019b      	lsls	r3, r3, #6
 80065b4:	4053      	eors	r3, r2
 80065b6:	4a0b      	ldr	r2, [pc, #44]	; (80065e4 <st_usbfs_ep_read_packet+0xa4>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	602b      	str	r3, [r5, #0]
	}

	return len;
}
 80065bc:	0020      	movs	r0, r4
 80065be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 80065c0:	2400      	movs	r4, #0
 80065c2:	e7fb      	b.n	80065bc <st_usbfs_ep_read_packet+0x7c>
 80065c4:	40005c00 	.word	0x40005c00
 80065c8:	40005c50 	.word	0x40005c50
 80065cc:	40006006 	.word	0x40006006
 80065d0:	40006004 	.word	0x40006004
 80065d4:	40006000 	.word	0x40006000
 80065d8:	00000f0f 	.word	0x00000f0f
 80065dc:	20000568 	.word	0x20000568
 80065e0:	0000bf8f 	.word	0x0000bf8f
 80065e4:	00008080 	.word	0x00008080

080065e8 <st_usbfs_poll>:

void st_usbfs_poll(usbd_device *dev)
{
 80065e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t istr = *USB_ISTR_REG;
 80065ea:	4b35      	ldr	r3, [pc, #212]	; (80066c0 <st_usbfs_poll+0xd8>)
{
 80065ec:	0004      	movs	r4, r0
	uint16_t istr = *USB_ISTR_REG;
 80065ee:	681d      	ldr	r5, [r3, #0]

	if (istr & USB_ISTR_RESET) {
 80065f0:	001f      	movs	r7, r3
 80065f2:	b2aa      	uxth	r2, r5
 80065f4:	9201      	str	r2, [sp, #4]
 80065f6:	056a      	lsls	r2, r5, #21
 80065f8:	d506      	bpl.n	8006608 <st_usbfs_poll+0x20>
		USB_CLR_ISTR_RESET();
 80065fa:	4a32      	ldr	r2, [pc, #200]	; (80066c4 <st_usbfs_poll+0xdc>)
 80065fc:	601a      	str	r2, [r3, #0]
		dev->pm_top = USBD_PM_TOP;
 80065fe:	2340      	movs	r3, #64	; 0x40
 8006600:	8303      	strh	r3, [r0, #24]
		_usbd_reset(dev);
 8006602:	f7ff f8e0 	bl	80057c6 <_usbd_reset>
	if (dev->user_callback_sof) {
		*USB_CNTR_REG |= USB_CNTR_SOFM;
	} else {
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
	}
}
 8006606:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	if (istr & USB_ISTR_CTR) {
 8006608:	042b      	lsls	r3, r5, #16
 800660a:	d520      	bpl.n	800664e <st_usbfs_poll+0x66>
		uint8_t ep = istr & USB_ISTR_EP_ID;
 800660c:	230f      	movs	r3, #15
		if (istr & USB_ISTR_DIR) {
 800660e:	2210      	movs	r2, #16
		uint8_t ep = istr & USB_ISTR_EP_ID;
 8006610:	401d      	ands	r5, r3
		if (istr & USB_ISTR_DIR) {
 8006612:	4b2d      	ldr	r3, [pc, #180]	; (80066c8 <st_usbfs_poll+0xe0>)
 8006614:	00ae      	lsls	r6, r5, #2
 8006616:	18f6      	adds	r6, r6, r3
 8006618:	9901      	ldr	r1, [sp, #4]
 800661a:	9b01      	ldr	r3, [sp, #4]
 800661c:	4013      	ands	r3, r2
 800661e:	4211      	tst	r1, r2
 8006620:	d03a      	beq.n	8006698 <st_usbfs_poll+0xb0>
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
 8006622:	6833      	ldr	r3, [r6, #0]
				type = USB_TRANSACTION_OUT;
 8006624:	3a0f      	subs	r2, #15
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
 8006626:	051b      	lsls	r3, r3, #20
 8006628:	d506      	bpl.n	8006638 <st_usbfs_poll+0x50>
				st_usbfs_ep_read_packet(dev, ep, &dev->control_state.req, 8);
 800662a:	0002      	movs	r2, r0
 800662c:	2308      	movs	r3, #8
 800662e:	3230      	adds	r2, #48	; 0x30
 8006630:	0029      	movs	r1, r5
 8006632:	f7ff ff85 	bl	8006540 <st_usbfs_ep_read_packet>
				type = USB_TRANSACTION_SETUP;
 8006636:	2202      	movs	r2, #2
		if (dev->user_callback_ctr[ep][type]) {
 8006638:	2303      	movs	r3, #3
 800663a:	436b      	muls	r3, r5
 800663c:	189b      	adds	r3, r3, r2
 800663e:	331a      	adds	r3, #26
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	591b      	ldr	r3, [r3, r4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d030      	beq.n	80066aa <st_usbfs_poll+0xc2>
			dev->user_callback_ctr[ep][type] (dev, ep);
 8006648:	0029      	movs	r1, r5
 800664a:	0020      	movs	r0, r4
 800664c:	4798      	blx	r3
	if (istr & USB_ISTR_SUSP) {
 800664e:	9b01      	ldr	r3, [sp, #4]
 8006650:	051b      	lsls	r3, r3, #20
 8006652:	d505      	bpl.n	8006660 <st_usbfs_poll+0x78>
		USB_CLR_ISTR_SUSP();
 8006654:	4b1d      	ldr	r3, [pc, #116]	; (80066cc <st_usbfs_poll+0xe4>)
 8006656:	603b      	str	r3, [r7, #0]
		if (dev->user_callback_suspend) {
 8006658:	6a23      	ldr	r3, [r4, #32]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d000      	beq.n	8006660 <st_usbfs_poll+0x78>
			dev->user_callback_suspend();
 800665e:	4798      	blx	r3
	if (istr & USB_ISTR_WKUP) {
 8006660:	9b01      	ldr	r3, [sp, #4]
 8006662:	04db      	lsls	r3, r3, #19
 8006664:	d505      	bpl.n	8006672 <st_usbfs_poll+0x8a>
		USB_CLR_ISTR_WKUP();
 8006666:	4b1a      	ldr	r3, [pc, #104]	; (80066d0 <st_usbfs_poll+0xe8>)
 8006668:	603b      	str	r3, [r7, #0]
		if (dev->user_callback_resume) {
 800666a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800666c:	2b00      	cmp	r3, #0
 800666e:	d000      	beq.n	8006672 <st_usbfs_poll+0x8a>
			dev->user_callback_resume();
 8006670:	4798      	blx	r3
	if (istr & USB_ISTR_SOF) {
 8006672:	9b01      	ldr	r3, [sp, #4]
 8006674:	4d17      	ldr	r5, [pc, #92]	; (80066d4 <st_usbfs_poll+0xec>)
 8006676:	059b      	lsls	r3, r3, #22
 8006678:	d505      	bpl.n	8006686 <st_usbfs_poll+0x9e>
 800667a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		USB_CLR_ISTR_SOF();
 800667c:	4a16      	ldr	r2, [pc, #88]	; (80066d8 <st_usbfs_poll+0xf0>)
 800667e:	603a      	str	r2, [r7, #0]
		if (dev->user_callback_sof) {
 8006680:	2b00      	cmp	r3, #0
 8006682:	d019      	beq.n	80066b8 <st_usbfs_poll+0xd0>
			dev->user_callback_sof();
 8006684:	4798      	blx	r3
	if (dev->user_callback_sof) {
 8006686:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006688:	2b00      	cmp	r3, #0
 800668a:	d015      	beq.n	80066b8 <st_usbfs_poll+0xd0>
		*USB_CNTR_REG |= USB_CNTR_SOFM;
 800668c:	2380      	movs	r3, #128	; 0x80
 800668e:	682a      	ldr	r2, [r5, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4313      	orrs	r3, r2
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
 8006694:	602b      	str	r3, [r5, #0]
 8006696:	e7b6      	b.n	8006606 <st_usbfs_poll+0x1e>
			USB_CLR_EP_TX_CTR(ep);
 8006698:	6832      	ldr	r2, [r6, #0]
 800669a:	4910      	ldr	r1, [pc, #64]	; (80066dc <st_usbfs_poll+0xf4>)
 800669c:	400a      	ands	r2, r1
 800669e:	2180      	movs	r1, #128	; 0x80
 80066a0:	0209      	lsls	r1, r1, #8
 80066a2:	430a      	orrs	r2, r1
 80066a4:	6032      	str	r2, [r6, #0]
			type = USB_TRANSACTION_IN;
 80066a6:	001a      	movs	r2, r3
 80066a8:	e7c6      	b.n	8006638 <st_usbfs_poll+0x50>
			USB_CLR_EP_RX_CTR(ep);
 80066aa:	6833      	ldr	r3, [r6, #0]
 80066ac:	4a0b      	ldr	r2, [pc, #44]	; (80066dc <st_usbfs_poll+0xf4>)
 80066ae:	401a      	ands	r2, r3
 80066b0:	2380      	movs	r3, #128	; 0x80
 80066b2:	4313      	orrs	r3, r2
 80066b4:	6033      	str	r3, [r6, #0]
 80066b6:	e7ca      	b.n	800664e <st_usbfs_poll+0x66>
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
 80066b8:	682b      	ldr	r3, [r5, #0]
 80066ba:	4a09      	ldr	r2, [pc, #36]	; (80066e0 <st_usbfs_poll+0xf8>)
 80066bc:	4013      	ands	r3, r2
 80066be:	e7e9      	b.n	8006694 <st_usbfs_poll+0xac>
 80066c0:	40005c44 	.word	0x40005c44
 80066c4:	0000fbff 	.word	0x0000fbff
 80066c8:	40005c00 	.word	0x40005c00
 80066cc:	0000f7ff 	.word	0x0000f7ff
 80066d0:	0000efff 	.word	0x0000efff
 80066d4:	40005c40 	.word	0x40005c40
 80066d8:	0000fdff 	.word	0x0000fdff
 80066dc:	00000f0f 	.word	0x00000f0f
 80066e0:	fffffdff 	.word	0xfffffdff

080066e4 <st_usbfs_v2_disconnect>:
}

static void st_usbfs_v2_disconnect(usbd_device *usbd_dev, bool disconnected)
{
	(void)usbd_dev;
	uint16_t reg = GET_REG(USB_BCDR_REG);
 80066e4:	4805      	ldr	r0, [pc, #20]	; (80066fc <st_usbfs_v2_disconnect+0x18>)
 80066e6:	6803      	ldr	r3, [r0, #0]
	if (disconnected) {
 80066e8:	2900      	cmp	r1, #0
 80066ea:	d004      	beq.n	80066f6 <st_usbfs_v2_disconnect+0x12>
		SET_REG(USB_BCDR_REG, reg | USB_BCDR_DPPU);
 80066ec:	4a04      	ldr	r2, [pc, #16]	; (8006700 <st_usbfs_v2_disconnect+0x1c>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	b29b      	uxth	r3, r3
	} else {
		SET_REG(USB_BCDR_REG, reg & ~USB_BCDR_DPPU);
 80066f2:	6003      	str	r3, [r0, #0]
	}
}
 80066f4:	4770      	bx	lr
		SET_REG(USB_BCDR_REG, reg & ~USB_BCDR_DPPU);
 80066f6:	045b      	lsls	r3, r3, #17
 80066f8:	0c5b      	lsrs	r3, r3, #17
 80066fa:	e7fa      	b.n	80066f2 <st_usbfs_v2_disconnect+0xe>
 80066fc:	40005c58 	.word	0x40005c58
 8006700:	ffff8000 	.word	0xffff8000

08006704 <st_usbfs_v2_usbd_init>:
{
 8006704:	b510      	push	{r4, lr}
	rcc_periph_clock_enable(RCC_USB);
 8006706:	4809      	ldr	r0, [pc, #36]	; (800672c <st_usbfs_v2_usbd_init+0x28>)
 8006708:	f7fe ff5c 	bl	80055c4 <rcc_periph_clock_enable>
	SET_REG(USB_CNTR_REG, 0);
 800670c:	2300      	movs	r3, #0
 800670e:	4a08      	ldr	r2, [pc, #32]	; (8006730 <st_usbfs_v2_usbd_init+0x2c>)
	SET_REG(USB_BTABLE_REG, 0);
 8006710:	4908      	ldr	r1, [pc, #32]	; (8006734 <st_usbfs_v2_usbd_init+0x30>)
	SET_REG(USB_CNTR_REG, 0);
 8006712:	6013      	str	r3, [r2, #0]
	SET_REG(USB_BTABLE_REG, 0);
 8006714:	600b      	str	r3, [r1, #0]
	SET_REG(USB_ISTR_REG, 0);
 8006716:	4908      	ldr	r1, [pc, #32]	; (8006738 <st_usbfs_v2_usbd_init+0x34>)
}
 8006718:	4808      	ldr	r0, [pc, #32]	; (800673c <st_usbfs_v2_usbd_init+0x38>)
	SET_REG(USB_ISTR_REG, 0);
 800671a:	600b      	str	r3, [r1, #0]
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
 800671c:	239c      	movs	r3, #156	; 0x9c
 800671e:	021b      	lsls	r3, r3, #8
 8006720:	6013      	str	r3, [r2, #0]
	SET_REG(USB_BCDR_REG, USB_BCDR_DPPU);
 8006722:	2280      	movs	r2, #128	; 0x80
 8006724:	4b06      	ldr	r3, [pc, #24]	; (8006740 <st_usbfs_v2_usbd_init+0x3c>)
 8006726:	0212      	lsls	r2, r2, #8
 8006728:	601a      	str	r2, [r3, #0]
}
 800672a:	bd10      	pop	{r4, pc}
 800672c:	00000717 	.word	0x00000717
 8006730:	40005c40 	.word	0x40005c40
 8006734:	40005c50 	.word	0x40005c50
 8006738:	40005c44 	.word	0x40005c44
 800673c:	2000046c 	.word	0x2000046c
 8006740:	40005c58 	.word	0x40005c58

08006744 <st_usbfs_copy_to_pm>:
	for (i = 0; i < len; i += 2) {
 8006744:	2300      	movs	r3, #0
{
 8006746:	b5f0      	push	{r4, r5, r6, r7, lr}
		*PM++ = (uint16_t)lbuf[i+1] << 8 | lbuf[i];
 8006748:	1c4f      	adds	r7, r1, #1
 800674a:	18c6      	adds	r6, r0, r3
	for (i = 0; i < len; i += 2) {
 800674c:	429a      	cmp	r2, r3
 800674e:	d800      	bhi.n	8006752 <st_usbfs_copy_to_pm+0xe>
}
 8006750:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*PM++ = (uint16_t)lbuf[i+1] << 8 | lbuf[i];
 8006752:	5cfd      	ldrb	r5, [r7, r3]
 8006754:	5ccc      	ldrb	r4, [r1, r3]
 8006756:	022d      	lsls	r5, r5, #8
 8006758:	432c      	orrs	r4, r5
 800675a:	8034      	strh	r4, [r6, #0]
	for (i = 0; i < len; i += 2) {
 800675c:	3302      	adds	r3, #2
 800675e:	e7f4      	b.n	800674a <st_usbfs_copy_to_pm+0x6>

08006760 <st_usbfs_copy_from_pm>:
	uint8_t odd = len & 1;
 8006760:	2301      	movs	r3, #1
{
 8006762:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t odd = len & 1;
 8006764:	0014      	movs	r4, r2
	if (((uintptr_t) buf) & 0x01) {
 8006766:	0006      	movs	r6, r0
	len >>= 1;
 8006768:	40da      	lsrs	r2, r3
	uint8_t odd = len & 1;
 800676a:	401c      	ands	r4, r3
	if (((uintptr_t) buf) & 0x01) {
 800676c:	4218      	tst	r0, r3
 800676e:	d11e      	bne.n	80067ae <st_usbfs_copy_from_pm+0x4e>
	const volatile uint16_t *PM = vPM;
 8006770:	000e      	movs	r6, r1
	len >>= 1;
 8006772:	0013      	movs	r3, r2
 8006774:	0005      	movs	r5, r0
		for (; len; PM++, buf += 2, len--) {
 8006776:	2b00      	cmp	r3, #0
 8006778:	d011      	beq.n	800679e <st_usbfs_copy_from_pm+0x3e>
			*(uint16_t *) buf = *PM;
 800677a:	8837      	ldrh	r7, [r6, #0]
		for (; len; PM++, buf += 2, len--) {
 800677c:	3b01      	subs	r3, #1
			*(uint16_t *) buf = *PM;
 800677e:	802f      	strh	r7, [r5, #0]
		for (; len; PM++, buf += 2, len--) {
 8006780:	3602      	adds	r6, #2
 8006782:	3502      	adds	r5, #2
 8006784:	b29b      	uxth	r3, r3
 8006786:	e7f6      	b.n	8006776 <st_usbfs_copy_from_pm+0x16>
			uint16_t value = *PM;
 8006788:	883b      	ldrh	r3, [r7, #0]
		for (; len; PM++, len--) {
 800678a:	3d01      	subs	r5, #1
			uint16_t value = *PM;
 800678c:	b29b      	uxth	r3, r3
			*(uint8_t *) buf++ = value;
 800678e:	7033      	strb	r3, [r6, #0]
			*(uint8_t *) buf++ = value >> 8;
 8006790:	0a1b      	lsrs	r3, r3, #8
 8006792:	7073      	strb	r3, [r6, #1]
		for (; len; PM++, len--) {
 8006794:	3702      	adds	r7, #2
 8006796:	b2ad      	uxth	r5, r5
 8006798:	3602      	adds	r6, #2
 800679a:	2d00      	cmp	r5, #0
 800679c:	d1f4      	bne.n	8006788 <st_usbfs_copy_from_pm+0x28>
 800679e:	0052      	lsls	r2, r2, #1
 80067a0:	1880      	adds	r0, r0, r2
 80067a2:	188a      	adds	r2, r1, r2
	if (odd) {
 80067a4:	2c00      	cmp	r4, #0
 80067a6:	d001      	beq.n	80067ac <st_usbfs_copy_from_pm+0x4c>
		*(uint8_t *) buf = *(uint8_t *) PM;
 80067a8:	7813      	ldrb	r3, [r2, #0]
 80067aa:	7003      	strb	r3, [r0, #0]
}
 80067ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const volatile uint16_t *PM = vPM;
 80067ae:	000f      	movs	r7, r1
	len >>= 1;
 80067b0:	0015      	movs	r5, r2
 80067b2:	e7f2      	b.n	800679a <st_usbfs_copy_from_pm+0x3a>

080067b4 <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 80067b4:	e7fe      	b.n	80067b4 <blocking_handler>

080067b6 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 80067b6:	4770      	bx	lr

080067b8 <reset_handler>:
{
 80067b8:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 80067ba:	4b16      	ldr	r3, [pc, #88]	; (8006814 <reset_handler+0x5c>)
 80067bc:	4a16      	ldr	r2, [pc, #88]	; (8006818 <reset_handler+0x60>)
 80067be:	4917      	ldr	r1, [pc, #92]	; (800681c <reset_handler+0x64>)
 80067c0:	428b      	cmp	r3, r1
 80067c2:	d318      	bcc.n	80067f6 <reset_handler+0x3e>
		*dest++ = 0;
 80067c4:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 80067c6:	4a16      	ldr	r2, [pc, #88]	; (8006820 <reset_handler+0x68>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d317      	bcc.n	80067fc <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 80067cc:	2380      	movs	r3, #128	; 0x80
 80067ce:	4a15      	ldr	r2, [pc, #84]	; (8006824 <reset_handler+0x6c>)
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 80067d4:	4c14      	ldr	r4, [pc, #80]	; (8006828 <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 80067d6:	430b      	orrs	r3, r1
 80067d8:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 80067da:	4b14      	ldr	r3, [pc, #80]	; (800682c <reset_handler+0x74>)
 80067dc:	429c      	cmp	r4, r3
 80067de:	d30f      	bcc.n	8006800 <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 80067e0:	4c13      	ldr	r4, [pc, #76]	; (8006830 <reset_handler+0x78>)
 80067e2:	4b14      	ldr	r3, [pc, #80]	; (8006834 <reset_handler+0x7c>)
 80067e4:	429c      	cmp	r4, r3
 80067e6:	d30e      	bcc.n	8006806 <reset_handler+0x4e>
	(void)main();
 80067e8:	f7fd fe62 	bl	80044b0 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 80067ec:	4c12      	ldr	r4, [pc, #72]	; (8006838 <reset_handler+0x80>)
 80067ee:	4b13      	ldr	r3, [pc, #76]	; (800683c <reset_handler+0x84>)
 80067f0:	429c      	cmp	r4, r3
 80067f2:	d30b      	bcc.n	800680c <reset_handler+0x54>
}
 80067f4:	bd10      	pop	{r4, pc}
		*dest = *src;
 80067f6:	ca01      	ldmia	r2!, {r0}
 80067f8:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 80067fa:	e7e1      	b.n	80067c0 <reset_handler+0x8>
		*dest++ = 0;
 80067fc:	c302      	stmia	r3!, {r1}
 80067fe:	e7e3      	b.n	80067c8 <reset_handler+0x10>
		(*fp)();
 8006800:	cc08      	ldmia	r4!, {r3}
 8006802:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8006804:	e7e9      	b.n	80067da <reset_handler+0x22>
		(*fp)();
 8006806:	cc08      	ldmia	r4!, {r3}
 8006808:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 800680a:	e7ea      	b.n	80067e2 <reset_handler+0x2a>
		(*fp)();
 800680c:	cc08      	ldmia	r4!, {r3}
 800680e:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8006810:	e7ed      	b.n	80067ee <reset_handler+0x36>
 8006812:	46c0      	nop			; (mov r8, r8)
 8006814:	20000000 	.word	0x20000000
 8006818:	08007154 	.word	0x08007154
 800681c:	20000140 	.word	0x20000140
 8006820:	2000058c 	.word	0x2000058c
 8006824:	e000ed14 	.word	0xe000ed14
 8006828:	08007154 	.word	0x08007154
 800682c:	08007154 	.word	0x08007154
 8006830:	08007154 	.word	0x08007154
 8006834:	08007154 	.word	0x08007154
 8006838:	08007154 	.word	0x08007154
 800683c:	08007154 	.word	0x08007154

08006840 <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref CM3_nvic_defines_irqs
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 8006840:	4a04      	ldr	r2, [pc, #16]	; (8006854 <nvic_enable_irq+0x14>)
 8006842:	0943      	lsrs	r3, r0, #5
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	189b      	adds	r3, r3, r2
 8006848:	221f      	movs	r2, #31
 800684a:	4010      	ands	r0, r2
 800684c:	3a1e      	subs	r2, #30
 800684e:	4082      	lsls	r2, r0
 8006850:	601a      	str	r2, [r3, #0]
}
 8006852:	4770      	bx	lr
 8006854:	e000e100 	.word	0xe000e100

08006858 <nvic_set_priority>:
 * @param[in] irqn Interrupt number @ref CM3_nvic_defines_irqs
 * @param[in] priority Interrupt priority (0 ... 255 in steps of 16)
 */
#endif
void nvic_set_priority(uint8_t irqn, uint8_t priority)
{
 8006858:	b510      	push	{r4, lr}
	/* code from lpc43xx/nvic.c -- this is quite a hack and alludes to the
	 * negative interrupt numbers assigned to the system interrupts. better
	 * handling would mean signed integers. */
	if (irqn >= NVIC_IRQ_COUNT) {
 800685a:	281f      	cmp	r0, #31
 800685c:	d912      	bls.n	8006884 <nvic_set_priority+0x2c>
		/* Cortex-M  system interrupts */
#if defined(__ARM_ARCH_6M__)
		/* ARM6M supports only 32bit word access to SHPR registers */
		irqn = (irqn & 0xF) - 4;
 800685e:	230f      	movs	r3, #15
 8006860:	4018      	ands	r0, r3
 8006862:	3804      	subs	r0, #4
 8006864:	b2c0      	uxtb	r0, r0
		uint8_t shift = (irqn & 0x3) << 3;
		uint8_t reg = irqn >> 2;
		SCB_SHPR32(reg) = ((SCB_SHPR32(reg) & ~(0xFFUL << shift)) |
 8006866:	0883      	lsrs	r3, r0, #2
 8006868:	4a08      	ldr	r2, [pc, #32]	; (800688c <nvic_set_priority+0x34>)
 800686a:	009b      	lsls	r3, r3, #2
		/* Device specific interrupts */
#if defined(__ARM_ARCH_6M__)
		/* ARM6M supports only 32bit word access to IPR registers */
		uint8_t shift = (irqn & 0x3) << 3;
		uint8_t reg = irqn >> 2;
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 800686c:	2418      	movs	r4, #24
		uint8_t shift = (irqn & 0x3) << 3;
 800686e:	00c0      	lsls	r0, r0, #3
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 8006870:	4020      	ands	r0, r4
 8006872:	34e7      	adds	r4, #231	; 0xe7
 8006874:	4084      	lsls	r4, r0
				((uint32_t) priority) << shift);
 8006876:	4081      	lsls	r1, r0
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 8006878:	189b      	adds	r3, r3, r2
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	43a2      	bics	r2, r4
 800687e:	4311      	orrs	r1, r2
 8006880:	6019      	str	r1, [r3, #0]
#else
		NVIC_IPR(irqn) = priority;
#endif
	}
}
 8006882:	bd10      	pop	{r4, pc}
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 8006884:	0883      	lsrs	r3, r0, #2
 8006886:	4a02      	ldr	r2, [pc, #8]	; (8006890 <nvic_set_priority+0x38>)
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	e7ef      	b.n	800686c <nvic_set_priority+0x14>
 800688c:	e000ed18 	.word	0xe000ed18
 8006890:	e000e400 	.word	0xe000e400

08006894 <malloc>:
 8006894:	b510      	push	{r4, lr}
 8006896:	4b03      	ldr	r3, [pc, #12]	; (80068a4 <malloc+0x10>)
 8006898:	0001      	movs	r1, r0
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	f000 f80e 	bl	80068bc <_malloc_r>
 80068a0:	bd10      	pop	{r4, pc}
 80068a2:	46c0      	nop			; (mov r8, r8)
 80068a4:	200000dc 	.word	0x200000dc

080068a8 <memcpy>:
 80068a8:	2300      	movs	r3, #0
 80068aa:	b510      	push	{r4, lr}
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d100      	bne.n	80068b2 <memcpy+0xa>
 80068b0:	bd10      	pop	{r4, pc}
 80068b2:	5ccc      	ldrb	r4, [r1, r3]
 80068b4:	54c4      	strb	r4, [r0, r3]
 80068b6:	3301      	adds	r3, #1
 80068b8:	e7f8      	b.n	80068ac <memcpy+0x4>
	...

080068bc <_malloc_r>:
 80068bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068be:	2303      	movs	r3, #3
 80068c0:	1ccd      	adds	r5, r1, #3
 80068c2:	439d      	bics	r5, r3
 80068c4:	3508      	adds	r5, #8
 80068c6:	0006      	movs	r6, r0
 80068c8:	2d0c      	cmp	r5, #12
 80068ca:	d21f      	bcs.n	800690c <_malloc_r+0x50>
 80068cc:	250c      	movs	r5, #12
 80068ce:	42a9      	cmp	r1, r5
 80068d0:	d81e      	bhi.n	8006910 <_malloc_r+0x54>
 80068d2:	0030      	movs	r0, r6
 80068d4:	f000 f86a 	bl	80069ac <__malloc_lock>
 80068d8:	4925      	ldr	r1, [pc, #148]	; (8006970 <_malloc_r+0xb4>)
 80068da:	680a      	ldr	r2, [r1, #0]
 80068dc:	0014      	movs	r4, r2
 80068de:	2c00      	cmp	r4, #0
 80068e0:	d11a      	bne.n	8006918 <_malloc_r+0x5c>
 80068e2:	4f24      	ldr	r7, [pc, #144]	; (8006974 <_malloc_r+0xb8>)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d104      	bne.n	80068f4 <_malloc_r+0x38>
 80068ea:	0021      	movs	r1, r4
 80068ec:	0030      	movs	r0, r6
 80068ee:	f000 f843 	bl	8006978 <_sbrk_r>
 80068f2:	6038      	str	r0, [r7, #0]
 80068f4:	0029      	movs	r1, r5
 80068f6:	0030      	movs	r0, r6
 80068f8:	f000 f83e 	bl	8006978 <_sbrk_r>
 80068fc:	1c43      	adds	r3, r0, #1
 80068fe:	d12b      	bne.n	8006958 <_malloc_r+0x9c>
 8006900:	230c      	movs	r3, #12
 8006902:	0030      	movs	r0, r6
 8006904:	6033      	str	r3, [r6, #0]
 8006906:	f000 f859 	bl	80069bc <__malloc_unlock>
 800690a:	e003      	b.n	8006914 <_malloc_r+0x58>
 800690c:	2d00      	cmp	r5, #0
 800690e:	dade      	bge.n	80068ce <_malloc_r+0x12>
 8006910:	230c      	movs	r3, #12
 8006912:	6033      	str	r3, [r6, #0]
 8006914:	2000      	movs	r0, #0
 8006916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	1b5b      	subs	r3, r3, r5
 800691c:	d419      	bmi.n	8006952 <_malloc_r+0x96>
 800691e:	2b0b      	cmp	r3, #11
 8006920:	d903      	bls.n	800692a <_malloc_r+0x6e>
 8006922:	6023      	str	r3, [r4, #0]
 8006924:	18e4      	adds	r4, r4, r3
 8006926:	6025      	str	r5, [r4, #0]
 8006928:	e003      	b.n	8006932 <_malloc_r+0x76>
 800692a:	6863      	ldr	r3, [r4, #4]
 800692c:	42a2      	cmp	r2, r4
 800692e:	d10e      	bne.n	800694e <_malloc_r+0x92>
 8006930:	600b      	str	r3, [r1, #0]
 8006932:	0030      	movs	r0, r6
 8006934:	f000 f842 	bl	80069bc <__malloc_unlock>
 8006938:	0020      	movs	r0, r4
 800693a:	2207      	movs	r2, #7
 800693c:	300b      	adds	r0, #11
 800693e:	1d23      	adds	r3, r4, #4
 8006940:	4390      	bics	r0, r2
 8006942:	1ac2      	subs	r2, r0, r3
 8006944:	4298      	cmp	r0, r3
 8006946:	d0e6      	beq.n	8006916 <_malloc_r+0x5a>
 8006948:	1a1b      	subs	r3, r3, r0
 800694a:	50a3      	str	r3, [r4, r2]
 800694c:	e7e3      	b.n	8006916 <_malloc_r+0x5a>
 800694e:	6053      	str	r3, [r2, #4]
 8006950:	e7ef      	b.n	8006932 <_malloc_r+0x76>
 8006952:	0022      	movs	r2, r4
 8006954:	6864      	ldr	r4, [r4, #4]
 8006956:	e7c2      	b.n	80068de <_malloc_r+0x22>
 8006958:	2303      	movs	r3, #3
 800695a:	1cc4      	adds	r4, r0, #3
 800695c:	439c      	bics	r4, r3
 800695e:	42a0      	cmp	r0, r4
 8006960:	d0e1      	beq.n	8006926 <_malloc_r+0x6a>
 8006962:	1a21      	subs	r1, r4, r0
 8006964:	0030      	movs	r0, r6
 8006966:	f000 f807 	bl	8006978 <_sbrk_r>
 800696a:	1c43      	adds	r3, r0, #1
 800696c:	d1db      	bne.n	8006926 <_malloc_r+0x6a>
 800696e:	e7c7      	b.n	8006900 <_malloc_r+0x44>
 8006970:	20000570 	.word	0x20000570
 8006974:	20000574 	.word	0x20000574

08006978 <_sbrk_r>:
 8006978:	2300      	movs	r3, #0
 800697a:	b570      	push	{r4, r5, r6, lr}
 800697c:	4d06      	ldr	r5, [pc, #24]	; (8006998 <_sbrk_r+0x20>)
 800697e:	0004      	movs	r4, r0
 8006980:	0008      	movs	r0, r1
 8006982:	602b      	str	r3, [r5, #0]
 8006984:	f000 f9a4 	bl	8006cd0 <_sbrk>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	d103      	bne.n	8006994 <_sbrk_r+0x1c>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d000      	beq.n	8006994 <_sbrk_r+0x1c>
 8006992:	6023      	str	r3, [r4, #0]
 8006994:	bd70      	pop	{r4, r5, r6, pc}
 8006996:	46c0      	nop			; (mov r8, r8)
 8006998:	2000057c 	.word	0x2000057c

0800699c <strlen>:
 800699c:	2300      	movs	r3, #0
 800699e:	5cc2      	ldrb	r2, [r0, r3]
 80069a0:	3301      	adds	r3, #1
 80069a2:	2a00      	cmp	r2, #0
 80069a4:	d1fb      	bne.n	800699e <strlen+0x2>
 80069a6:	1e58      	subs	r0, r3, #1
 80069a8:	4770      	bx	lr
	...

080069ac <__malloc_lock>:
 80069ac:	b510      	push	{r4, lr}
 80069ae:	4802      	ldr	r0, [pc, #8]	; (80069b8 <__malloc_lock+0xc>)
 80069b0:	f000 f80c 	bl	80069cc <__retarget_lock_acquire_recursive>
 80069b4:	bd10      	pop	{r4, pc}
 80069b6:	46c0      	nop			; (mov r8, r8)
 80069b8:	20000584 	.word	0x20000584

080069bc <__malloc_unlock>:
 80069bc:	b510      	push	{r4, lr}
 80069be:	4802      	ldr	r0, [pc, #8]	; (80069c8 <__malloc_unlock+0xc>)
 80069c0:	f000 f805 	bl	80069ce <__retarget_lock_release_recursive>
 80069c4:	bd10      	pop	{r4, pc}
 80069c6:	46c0      	nop			; (mov r8, r8)
 80069c8:	20000584 	.word	0x20000584

080069cc <__retarget_lock_acquire_recursive>:
 80069cc:	4770      	bx	lr

080069ce <__retarget_lock_release_recursive>:
 80069ce:	4770      	bx	lr

080069d0 <__gnu_thumb1_case_uqi>:
 80069d0:	b402      	push	{r1}
 80069d2:	4671      	mov	r1, lr
 80069d4:	0849      	lsrs	r1, r1, #1
 80069d6:	0049      	lsls	r1, r1, #1
 80069d8:	5c09      	ldrb	r1, [r1, r0]
 80069da:	0049      	lsls	r1, r1, #1
 80069dc:	448e      	add	lr, r1
 80069de:	bc02      	pop	{r1}
 80069e0:	4770      	bx	lr
 80069e2:	46c0      	nop			; (mov r8, r8)

080069e4 <__udivsi3>:
 80069e4:	2200      	movs	r2, #0
 80069e6:	0843      	lsrs	r3, r0, #1
 80069e8:	428b      	cmp	r3, r1
 80069ea:	d374      	bcc.n	8006ad6 <__udivsi3+0xf2>
 80069ec:	0903      	lsrs	r3, r0, #4
 80069ee:	428b      	cmp	r3, r1
 80069f0:	d35f      	bcc.n	8006ab2 <__udivsi3+0xce>
 80069f2:	0a03      	lsrs	r3, r0, #8
 80069f4:	428b      	cmp	r3, r1
 80069f6:	d344      	bcc.n	8006a82 <__udivsi3+0x9e>
 80069f8:	0b03      	lsrs	r3, r0, #12
 80069fa:	428b      	cmp	r3, r1
 80069fc:	d328      	bcc.n	8006a50 <__udivsi3+0x6c>
 80069fe:	0c03      	lsrs	r3, r0, #16
 8006a00:	428b      	cmp	r3, r1
 8006a02:	d30d      	bcc.n	8006a20 <__udivsi3+0x3c>
 8006a04:	22ff      	movs	r2, #255	; 0xff
 8006a06:	0209      	lsls	r1, r1, #8
 8006a08:	ba12      	rev	r2, r2
 8006a0a:	0c03      	lsrs	r3, r0, #16
 8006a0c:	428b      	cmp	r3, r1
 8006a0e:	d302      	bcc.n	8006a16 <__udivsi3+0x32>
 8006a10:	1212      	asrs	r2, r2, #8
 8006a12:	0209      	lsls	r1, r1, #8
 8006a14:	d065      	beq.n	8006ae2 <__udivsi3+0xfe>
 8006a16:	0b03      	lsrs	r3, r0, #12
 8006a18:	428b      	cmp	r3, r1
 8006a1a:	d319      	bcc.n	8006a50 <__udivsi3+0x6c>
 8006a1c:	e000      	b.n	8006a20 <__udivsi3+0x3c>
 8006a1e:	0a09      	lsrs	r1, r1, #8
 8006a20:	0bc3      	lsrs	r3, r0, #15
 8006a22:	428b      	cmp	r3, r1
 8006a24:	d301      	bcc.n	8006a2a <__udivsi3+0x46>
 8006a26:	03cb      	lsls	r3, r1, #15
 8006a28:	1ac0      	subs	r0, r0, r3
 8006a2a:	4152      	adcs	r2, r2
 8006a2c:	0b83      	lsrs	r3, r0, #14
 8006a2e:	428b      	cmp	r3, r1
 8006a30:	d301      	bcc.n	8006a36 <__udivsi3+0x52>
 8006a32:	038b      	lsls	r3, r1, #14
 8006a34:	1ac0      	subs	r0, r0, r3
 8006a36:	4152      	adcs	r2, r2
 8006a38:	0b43      	lsrs	r3, r0, #13
 8006a3a:	428b      	cmp	r3, r1
 8006a3c:	d301      	bcc.n	8006a42 <__udivsi3+0x5e>
 8006a3e:	034b      	lsls	r3, r1, #13
 8006a40:	1ac0      	subs	r0, r0, r3
 8006a42:	4152      	adcs	r2, r2
 8006a44:	0b03      	lsrs	r3, r0, #12
 8006a46:	428b      	cmp	r3, r1
 8006a48:	d301      	bcc.n	8006a4e <__udivsi3+0x6a>
 8006a4a:	030b      	lsls	r3, r1, #12
 8006a4c:	1ac0      	subs	r0, r0, r3
 8006a4e:	4152      	adcs	r2, r2
 8006a50:	0ac3      	lsrs	r3, r0, #11
 8006a52:	428b      	cmp	r3, r1
 8006a54:	d301      	bcc.n	8006a5a <__udivsi3+0x76>
 8006a56:	02cb      	lsls	r3, r1, #11
 8006a58:	1ac0      	subs	r0, r0, r3
 8006a5a:	4152      	adcs	r2, r2
 8006a5c:	0a83      	lsrs	r3, r0, #10
 8006a5e:	428b      	cmp	r3, r1
 8006a60:	d301      	bcc.n	8006a66 <__udivsi3+0x82>
 8006a62:	028b      	lsls	r3, r1, #10
 8006a64:	1ac0      	subs	r0, r0, r3
 8006a66:	4152      	adcs	r2, r2
 8006a68:	0a43      	lsrs	r3, r0, #9
 8006a6a:	428b      	cmp	r3, r1
 8006a6c:	d301      	bcc.n	8006a72 <__udivsi3+0x8e>
 8006a6e:	024b      	lsls	r3, r1, #9
 8006a70:	1ac0      	subs	r0, r0, r3
 8006a72:	4152      	adcs	r2, r2
 8006a74:	0a03      	lsrs	r3, r0, #8
 8006a76:	428b      	cmp	r3, r1
 8006a78:	d301      	bcc.n	8006a7e <__udivsi3+0x9a>
 8006a7a:	020b      	lsls	r3, r1, #8
 8006a7c:	1ac0      	subs	r0, r0, r3
 8006a7e:	4152      	adcs	r2, r2
 8006a80:	d2cd      	bcs.n	8006a1e <__udivsi3+0x3a>
 8006a82:	09c3      	lsrs	r3, r0, #7
 8006a84:	428b      	cmp	r3, r1
 8006a86:	d301      	bcc.n	8006a8c <__udivsi3+0xa8>
 8006a88:	01cb      	lsls	r3, r1, #7
 8006a8a:	1ac0      	subs	r0, r0, r3
 8006a8c:	4152      	adcs	r2, r2
 8006a8e:	0983      	lsrs	r3, r0, #6
 8006a90:	428b      	cmp	r3, r1
 8006a92:	d301      	bcc.n	8006a98 <__udivsi3+0xb4>
 8006a94:	018b      	lsls	r3, r1, #6
 8006a96:	1ac0      	subs	r0, r0, r3
 8006a98:	4152      	adcs	r2, r2
 8006a9a:	0943      	lsrs	r3, r0, #5
 8006a9c:	428b      	cmp	r3, r1
 8006a9e:	d301      	bcc.n	8006aa4 <__udivsi3+0xc0>
 8006aa0:	014b      	lsls	r3, r1, #5
 8006aa2:	1ac0      	subs	r0, r0, r3
 8006aa4:	4152      	adcs	r2, r2
 8006aa6:	0903      	lsrs	r3, r0, #4
 8006aa8:	428b      	cmp	r3, r1
 8006aaa:	d301      	bcc.n	8006ab0 <__udivsi3+0xcc>
 8006aac:	010b      	lsls	r3, r1, #4
 8006aae:	1ac0      	subs	r0, r0, r3
 8006ab0:	4152      	adcs	r2, r2
 8006ab2:	08c3      	lsrs	r3, r0, #3
 8006ab4:	428b      	cmp	r3, r1
 8006ab6:	d301      	bcc.n	8006abc <__udivsi3+0xd8>
 8006ab8:	00cb      	lsls	r3, r1, #3
 8006aba:	1ac0      	subs	r0, r0, r3
 8006abc:	4152      	adcs	r2, r2
 8006abe:	0883      	lsrs	r3, r0, #2
 8006ac0:	428b      	cmp	r3, r1
 8006ac2:	d301      	bcc.n	8006ac8 <__udivsi3+0xe4>
 8006ac4:	008b      	lsls	r3, r1, #2
 8006ac6:	1ac0      	subs	r0, r0, r3
 8006ac8:	4152      	adcs	r2, r2
 8006aca:	0843      	lsrs	r3, r0, #1
 8006acc:	428b      	cmp	r3, r1
 8006ace:	d301      	bcc.n	8006ad4 <__udivsi3+0xf0>
 8006ad0:	004b      	lsls	r3, r1, #1
 8006ad2:	1ac0      	subs	r0, r0, r3
 8006ad4:	4152      	adcs	r2, r2
 8006ad6:	1a41      	subs	r1, r0, r1
 8006ad8:	d200      	bcs.n	8006adc <__udivsi3+0xf8>
 8006ada:	4601      	mov	r1, r0
 8006adc:	4152      	adcs	r2, r2
 8006ade:	4610      	mov	r0, r2
 8006ae0:	4770      	bx	lr
 8006ae2:	e7ff      	b.n	8006ae4 <__udivsi3+0x100>
 8006ae4:	b501      	push	{r0, lr}
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	f000 f8f0 	bl	8006ccc <__aeabi_idiv0>
 8006aec:	bd02      	pop	{r1, pc}
 8006aee:	46c0      	nop			; (mov r8, r8)

08006af0 <__aeabi_uidivmod>:
 8006af0:	2900      	cmp	r1, #0
 8006af2:	d0f7      	beq.n	8006ae4 <__udivsi3+0x100>
 8006af4:	e776      	b.n	80069e4 <__udivsi3>
 8006af6:	4770      	bx	lr

08006af8 <__divsi3>:
 8006af8:	4603      	mov	r3, r0
 8006afa:	430b      	orrs	r3, r1
 8006afc:	d47f      	bmi.n	8006bfe <__divsi3+0x106>
 8006afe:	2200      	movs	r2, #0
 8006b00:	0843      	lsrs	r3, r0, #1
 8006b02:	428b      	cmp	r3, r1
 8006b04:	d374      	bcc.n	8006bf0 <__divsi3+0xf8>
 8006b06:	0903      	lsrs	r3, r0, #4
 8006b08:	428b      	cmp	r3, r1
 8006b0a:	d35f      	bcc.n	8006bcc <__divsi3+0xd4>
 8006b0c:	0a03      	lsrs	r3, r0, #8
 8006b0e:	428b      	cmp	r3, r1
 8006b10:	d344      	bcc.n	8006b9c <__divsi3+0xa4>
 8006b12:	0b03      	lsrs	r3, r0, #12
 8006b14:	428b      	cmp	r3, r1
 8006b16:	d328      	bcc.n	8006b6a <__divsi3+0x72>
 8006b18:	0c03      	lsrs	r3, r0, #16
 8006b1a:	428b      	cmp	r3, r1
 8006b1c:	d30d      	bcc.n	8006b3a <__divsi3+0x42>
 8006b1e:	22ff      	movs	r2, #255	; 0xff
 8006b20:	0209      	lsls	r1, r1, #8
 8006b22:	ba12      	rev	r2, r2
 8006b24:	0c03      	lsrs	r3, r0, #16
 8006b26:	428b      	cmp	r3, r1
 8006b28:	d302      	bcc.n	8006b30 <__divsi3+0x38>
 8006b2a:	1212      	asrs	r2, r2, #8
 8006b2c:	0209      	lsls	r1, r1, #8
 8006b2e:	d065      	beq.n	8006bfc <__divsi3+0x104>
 8006b30:	0b03      	lsrs	r3, r0, #12
 8006b32:	428b      	cmp	r3, r1
 8006b34:	d319      	bcc.n	8006b6a <__divsi3+0x72>
 8006b36:	e000      	b.n	8006b3a <__divsi3+0x42>
 8006b38:	0a09      	lsrs	r1, r1, #8
 8006b3a:	0bc3      	lsrs	r3, r0, #15
 8006b3c:	428b      	cmp	r3, r1
 8006b3e:	d301      	bcc.n	8006b44 <__divsi3+0x4c>
 8006b40:	03cb      	lsls	r3, r1, #15
 8006b42:	1ac0      	subs	r0, r0, r3
 8006b44:	4152      	adcs	r2, r2
 8006b46:	0b83      	lsrs	r3, r0, #14
 8006b48:	428b      	cmp	r3, r1
 8006b4a:	d301      	bcc.n	8006b50 <__divsi3+0x58>
 8006b4c:	038b      	lsls	r3, r1, #14
 8006b4e:	1ac0      	subs	r0, r0, r3
 8006b50:	4152      	adcs	r2, r2
 8006b52:	0b43      	lsrs	r3, r0, #13
 8006b54:	428b      	cmp	r3, r1
 8006b56:	d301      	bcc.n	8006b5c <__divsi3+0x64>
 8006b58:	034b      	lsls	r3, r1, #13
 8006b5a:	1ac0      	subs	r0, r0, r3
 8006b5c:	4152      	adcs	r2, r2
 8006b5e:	0b03      	lsrs	r3, r0, #12
 8006b60:	428b      	cmp	r3, r1
 8006b62:	d301      	bcc.n	8006b68 <__divsi3+0x70>
 8006b64:	030b      	lsls	r3, r1, #12
 8006b66:	1ac0      	subs	r0, r0, r3
 8006b68:	4152      	adcs	r2, r2
 8006b6a:	0ac3      	lsrs	r3, r0, #11
 8006b6c:	428b      	cmp	r3, r1
 8006b6e:	d301      	bcc.n	8006b74 <__divsi3+0x7c>
 8006b70:	02cb      	lsls	r3, r1, #11
 8006b72:	1ac0      	subs	r0, r0, r3
 8006b74:	4152      	adcs	r2, r2
 8006b76:	0a83      	lsrs	r3, r0, #10
 8006b78:	428b      	cmp	r3, r1
 8006b7a:	d301      	bcc.n	8006b80 <__divsi3+0x88>
 8006b7c:	028b      	lsls	r3, r1, #10
 8006b7e:	1ac0      	subs	r0, r0, r3
 8006b80:	4152      	adcs	r2, r2
 8006b82:	0a43      	lsrs	r3, r0, #9
 8006b84:	428b      	cmp	r3, r1
 8006b86:	d301      	bcc.n	8006b8c <__divsi3+0x94>
 8006b88:	024b      	lsls	r3, r1, #9
 8006b8a:	1ac0      	subs	r0, r0, r3
 8006b8c:	4152      	adcs	r2, r2
 8006b8e:	0a03      	lsrs	r3, r0, #8
 8006b90:	428b      	cmp	r3, r1
 8006b92:	d301      	bcc.n	8006b98 <__divsi3+0xa0>
 8006b94:	020b      	lsls	r3, r1, #8
 8006b96:	1ac0      	subs	r0, r0, r3
 8006b98:	4152      	adcs	r2, r2
 8006b9a:	d2cd      	bcs.n	8006b38 <__divsi3+0x40>
 8006b9c:	09c3      	lsrs	r3, r0, #7
 8006b9e:	428b      	cmp	r3, r1
 8006ba0:	d301      	bcc.n	8006ba6 <__divsi3+0xae>
 8006ba2:	01cb      	lsls	r3, r1, #7
 8006ba4:	1ac0      	subs	r0, r0, r3
 8006ba6:	4152      	adcs	r2, r2
 8006ba8:	0983      	lsrs	r3, r0, #6
 8006baa:	428b      	cmp	r3, r1
 8006bac:	d301      	bcc.n	8006bb2 <__divsi3+0xba>
 8006bae:	018b      	lsls	r3, r1, #6
 8006bb0:	1ac0      	subs	r0, r0, r3
 8006bb2:	4152      	adcs	r2, r2
 8006bb4:	0943      	lsrs	r3, r0, #5
 8006bb6:	428b      	cmp	r3, r1
 8006bb8:	d301      	bcc.n	8006bbe <__divsi3+0xc6>
 8006bba:	014b      	lsls	r3, r1, #5
 8006bbc:	1ac0      	subs	r0, r0, r3
 8006bbe:	4152      	adcs	r2, r2
 8006bc0:	0903      	lsrs	r3, r0, #4
 8006bc2:	428b      	cmp	r3, r1
 8006bc4:	d301      	bcc.n	8006bca <__divsi3+0xd2>
 8006bc6:	010b      	lsls	r3, r1, #4
 8006bc8:	1ac0      	subs	r0, r0, r3
 8006bca:	4152      	adcs	r2, r2
 8006bcc:	08c3      	lsrs	r3, r0, #3
 8006bce:	428b      	cmp	r3, r1
 8006bd0:	d301      	bcc.n	8006bd6 <__divsi3+0xde>
 8006bd2:	00cb      	lsls	r3, r1, #3
 8006bd4:	1ac0      	subs	r0, r0, r3
 8006bd6:	4152      	adcs	r2, r2
 8006bd8:	0883      	lsrs	r3, r0, #2
 8006bda:	428b      	cmp	r3, r1
 8006bdc:	d301      	bcc.n	8006be2 <__divsi3+0xea>
 8006bde:	008b      	lsls	r3, r1, #2
 8006be0:	1ac0      	subs	r0, r0, r3
 8006be2:	4152      	adcs	r2, r2
 8006be4:	0843      	lsrs	r3, r0, #1
 8006be6:	428b      	cmp	r3, r1
 8006be8:	d301      	bcc.n	8006bee <__divsi3+0xf6>
 8006bea:	004b      	lsls	r3, r1, #1
 8006bec:	1ac0      	subs	r0, r0, r3
 8006bee:	4152      	adcs	r2, r2
 8006bf0:	1a41      	subs	r1, r0, r1
 8006bf2:	d200      	bcs.n	8006bf6 <__divsi3+0xfe>
 8006bf4:	4601      	mov	r1, r0
 8006bf6:	4152      	adcs	r2, r2
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	4770      	bx	lr
 8006bfc:	e05d      	b.n	8006cba <__divsi3+0x1c2>
 8006bfe:	0fca      	lsrs	r2, r1, #31
 8006c00:	d000      	beq.n	8006c04 <__divsi3+0x10c>
 8006c02:	4249      	negs	r1, r1
 8006c04:	1003      	asrs	r3, r0, #32
 8006c06:	d300      	bcc.n	8006c0a <__divsi3+0x112>
 8006c08:	4240      	negs	r0, r0
 8006c0a:	4053      	eors	r3, r2
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	469c      	mov	ip, r3
 8006c10:	0903      	lsrs	r3, r0, #4
 8006c12:	428b      	cmp	r3, r1
 8006c14:	d32d      	bcc.n	8006c72 <__divsi3+0x17a>
 8006c16:	0a03      	lsrs	r3, r0, #8
 8006c18:	428b      	cmp	r3, r1
 8006c1a:	d312      	bcc.n	8006c42 <__divsi3+0x14a>
 8006c1c:	22fc      	movs	r2, #252	; 0xfc
 8006c1e:	0189      	lsls	r1, r1, #6
 8006c20:	ba12      	rev	r2, r2
 8006c22:	0a03      	lsrs	r3, r0, #8
 8006c24:	428b      	cmp	r3, r1
 8006c26:	d30c      	bcc.n	8006c42 <__divsi3+0x14a>
 8006c28:	0189      	lsls	r1, r1, #6
 8006c2a:	1192      	asrs	r2, r2, #6
 8006c2c:	428b      	cmp	r3, r1
 8006c2e:	d308      	bcc.n	8006c42 <__divsi3+0x14a>
 8006c30:	0189      	lsls	r1, r1, #6
 8006c32:	1192      	asrs	r2, r2, #6
 8006c34:	428b      	cmp	r3, r1
 8006c36:	d304      	bcc.n	8006c42 <__divsi3+0x14a>
 8006c38:	0189      	lsls	r1, r1, #6
 8006c3a:	d03a      	beq.n	8006cb2 <__divsi3+0x1ba>
 8006c3c:	1192      	asrs	r2, r2, #6
 8006c3e:	e000      	b.n	8006c42 <__divsi3+0x14a>
 8006c40:	0989      	lsrs	r1, r1, #6
 8006c42:	09c3      	lsrs	r3, r0, #7
 8006c44:	428b      	cmp	r3, r1
 8006c46:	d301      	bcc.n	8006c4c <__divsi3+0x154>
 8006c48:	01cb      	lsls	r3, r1, #7
 8006c4a:	1ac0      	subs	r0, r0, r3
 8006c4c:	4152      	adcs	r2, r2
 8006c4e:	0983      	lsrs	r3, r0, #6
 8006c50:	428b      	cmp	r3, r1
 8006c52:	d301      	bcc.n	8006c58 <__divsi3+0x160>
 8006c54:	018b      	lsls	r3, r1, #6
 8006c56:	1ac0      	subs	r0, r0, r3
 8006c58:	4152      	adcs	r2, r2
 8006c5a:	0943      	lsrs	r3, r0, #5
 8006c5c:	428b      	cmp	r3, r1
 8006c5e:	d301      	bcc.n	8006c64 <__divsi3+0x16c>
 8006c60:	014b      	lsls	r3, r1, #5
 8006c62:	1ac0      	subs	r0, r0, r3
 8006c64:	4152      	adcs	r2, r2
 8006c66:	0903      	lsrs	r3, r0, #4
 8006c68:	428b      	cmp	r3, r1
 8006c6a:	d301      	bcc.n	8006c70 <__divsi3+0x178>
 8006c6c:	010b      	lsls	r3, r1, #4
 8006c6e:	1ac0      	subs	r0, r0, r3
 8006c70:	4152      	adcs	r2, r2
 8006c72:	08c3      	lsrs	r3, r0, #3
 8006c74:	428b      	cmp	r3, r1
 8006c76:	d301      	bcc.n	8006c7c <__divsi3+0x184>
 8006c78:	00cb      	lsls	r3, r1, #3
 8006c7a:	1ac0      	subs	r0, r0, r3
 8006c7c:	4152      	adcs	r2, r2
 8006c7e:	0883      	lsrs	r3, r0, #2
 8006c80:	428b      	cmp	r3, r1
 8006c82:	d301      	bcc.n	8006c88 <__divsi3+0x190>
 8006c84:	008b      	lsls	r3, r1, #2
 8006c86:	1ac0      	subs	r0, r0, r3
 8006c88:	4152      	adcs	r2, r2
 8006c8a:	d2d9      	bcs.n	8006c40 <__divsi3+0x148>
 8006c8c:	0843      	lsrs	r3, r0, #1
 8006c8e:	428b      	cmp	r3, r1
 8006c90:	d301      	bcc.n	8006c96 <__divsi3+0x19e>
 8006c92:	004b      	lsls	r3, r1, #1
 8006c94:	1ac0      	subs	r0, r0, r3
 8006c96:	4152      	adcs	r2, r2
 8006c98:	1a41      	subs	r1, r0, r1
 8006c9a:	d200      	bcs.n	8006c9e <__divsi3+0x1a6>
 8006c9c:	4601      	mov	r1, r0
 8006c9e:	4663      	mov	r3, ip
 8006ca0:	4152      	adcs	r2, r2
 8006ca2:	105b      	asrs	r3, r3, #1
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	d301      	bcc.n	8006cac <__divsi3+0x1b4>
 8006ca8:	4240      	negs	r0, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d500      	bpl.n	8006cb0 <__divsi3+0x1b8>
 8006cae:	4249      	negs	r1, r1
 8006cb0:	4770      	bx	lr
 8006cb2:	4663      	mov	r3, ip
 8006cb4:	105b      	asrs	r3, r3, #1
 8006cb6:	d300      	bcc.n	8006cba <__divsi3+0x1c2>
 8006cb8:	4240      	negs	r0, r0
 8006cba:	b501      	push	{r0, lr}
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	f000 f805 	bl	8006ccc <__aeabi_idiv0>
 8006cc2:	bd02      	pop	{r1, pc}

08006cc4 <__aeabi_idivmod>:
 8006cc4:	2900      	cmp	r1, #0
 8006cc6:	d0f8      	beq.n	8006cba <__divsi3+0x1c2>
 8006cc8:	e716      	b.n	8006af8 <__divsi3>
 8006cca:	4770      	bx	lr

08006ccc <__aeabi_idiv0>:
 8006ccc:	4770      	bx	lr
 8006cce:	46c0      	nop			; (mov r8, r8)

08006cd0 <_sbrk>:
 8006cd0:	4a04      	ldr	r2, [pc, #16]	; (8006ce4 <_sbrk+0x14>)
 8006cd2:	0003      	movs	r3, r0
 8006cd4:	6810      	ldr	r0, [r2, #0]
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d002      	beq.n	8006ce0 <_sbrk+0x10>
 8006cda:	18c3      	adds	r3, r0, r3
 8006cdc:	6013      	str	r3, [r2, #0]
 8006cde:	4770      	bx	lr
 8006ce0:	4801      	ldr	r0, [pc, #4]	; (8006ce8 <_sbrk+0x18>)
 8006ce2:	e7fa      	b.n	8006cda <_sbrk+0xa>
 8006ce4:	20000578 	.word	0x20000578
 8006ce8:	2000058c 	.word	0x2000058c
 8006cec:	00000000 	.word	0x00000000

08006cf0 <__mem_flash_do_page_erase_veneer>:
 8006cf0:	b401      	push	{r0}
 8006cf2:	4802      	ldr	r0, [pc, #8]	; (8006cfc <__mem_flash_do_page_erase_veneer+0xc>)
 8006cf4:	4684      	mov	ip, r0
 8006cf6:	bc01      	pop	{r0}
 8006cf8:	4760      	bx	ip
 8006cfa:	bf00      	nop
 8006cfc:	20000041 	.word	0x20000041

08006d00 <__mem_flash_do_write_half_page_veneer>:
 8006d00:	b401      	push	{r0}
 8006d02:	4802      	ldr	r0, [pc, #8]	; (8006d0c <__mem_flash_do_write_half_page_veneer+0xc>)
 8006d04:	4684      	mov	ip, r0
 8006d06:	bc01      	pop	{r0}
 8006d08:	4760      	bx	ip
 8006d0a:	bf00      	nop
 8006d0c:	20000081 	.word	0x20000081
 8006d10:	2074754f 	.word	0x2074754f
 8006d14:	6f706552 	.word	0x6f706552
 8006d18:	43207472 	.word	0x43207472
 8006d1c:	626c6c61 	.word	0x626c6c61
 8006d20:	0a6b6361 	.word	0x0a6b6361
 8006d24:	00000000 	.word	0x00000000
 8006d28:	6c6f6f43 	.word	0x6c6f6f43
 8006d2c:	65736145 	.word	0x65736145
 8006d30:	00000000 	.word	0x00000000
 8006d34:	6c6f6f43 	.word	0x6c6f6f43
 8006d38:	65736145 	.word	0x65736145
 8006d3c:	62754820 	.word	0x62754820
 8006d40:	00000000 	.word	0x00000000
 8006d44:	34333231 	.word	0x34333231
 8006d48:	00000035 	.word	0x00000035
 8006d4c:	74737543 	.word	0x74737543
 8006d50:	48206d6f 	.word	0x48206d6f
 8006d54:	43204449 	.word	0x43204449
 8006d58:	69666e6f 	.word	0x69666e6f
 8006d5c:	73754367 	.word	0x73754367
 8006d60:	206d6f74 	.word	0x206d6f74
 8006d64:	20444948 	.word	0x20444948
 8006d68:	65746e49 	.word	0x65746e49
 8006d6c:	63616672 	.word	0x63616672
 8006d70:	00000065 	.word	0x00000065

08006d74 <cfg_desc>:
 8006d74:	00000209 80040101 006df8c8 00000008     ..........m.....

08006d84 <dev_desc>:
 8006d84:	02000112 40000000 57500483 02010200     .......@..PW....
 8006d94:	00000103                                ....

08006d98 <hid_function>:
 8006d98:	01112109 19220100 00000000              .!....".....

08006da4 <hid_interface>:
 8006da4:	00000409 00000302 006dbc05 006d9808     ..........m...m.
 8006db4:	00000908 00000000                       ........

08006dbc <hid_interface_endpoints>:
 8006dbc:	03810507 00010040 00000000 07000000     ....@...........
 8006dcc:	40030105 00000100 00000000 00000000     ...@............

08006ddc <hid_report_descriptor>:
 8006ddc:	09ff0006 0901a101 26001501 087500ff     ...........&..u.
 8006dec:	02814095 02910109 000000c0              .@..........

08006df8 <interfaces>:
 8006df8:	00000000 00000001 00000000 08006da4     .............m..

08006e08 <usb_strings>:
 8006e08:	08006d28 08006d34 08006d44 08006d4c     (m..4m..Dm..Lm..
 8006e18:	20627548 72617453 00000a74 20627548     Hub Start...Hub 
 8006e28:	706f6f4c 00000a0a 0a696d6e 00000000     Loop....nmi.....
 8006e38:	64726168 75616620 000a746c 67756c50     hard fault..Plug
 8006e48:	20646567 0a74754f 00000000 67756c50     ged Out.....Plug
 8006e58:	20646567 000a6e49 65736552 65532074     ged In..Reset Se
 8006e68:	6e657571 000a6563 6f727245 44412072     quence..Error AD
 8006e78:	53492043 65442052 74756166 73614320     C ISR Defaut Cas
 8006e88:	00000a65 080045ae 080045c8 080045f4     e....E...E...E..
 8006e98:	0800462c 0800464c 206d654d 20676f4c     ,F..LF..Mem Log 
 8006ea8:	52504545 41204d4f 65726464 6f207373     EEPROM Address o
 8006eb8:	6f207475 6f622066 73646e75 0000000a     ut of bounds....
 8006ec8:	08004c52 08004c60 08004c60 08004c60     RL..`L..`L..`L..
 8006ed8:	08004c60 08004c60 08004c60 08004c60     `L..`L..`L..`L..
 8006ee8:	08004c60 08004c60 08004c60 08004c60     `L..`L..`L..`L..
 8006ef8:	08004c60 08004c60 08004c60 08004c60     `L..`L..`L..`L..
 8006f08:	08004c60 08004c60 08004c60 08004c60     `L..`L..`L..`L..
 8006f18:	08004c60 08004c60 08004c60 08004c60     `L..`L..`L..`L..
 8006f28:	08004c60 08004c60 08004c60 08004c60     `L..`L..`L..`L..
 8006f38:	08004c60 08004c60 08004c60 08004c60     `L..`L..`L..`L..
 8006f48:	08004c60 08004c60 08004c60 08004c60     `L..`L..`L..`L..
 8006f58:	08004c60 08004c60 08004c60 08004c60     `L..`L..`L..`L..
 8006f68:	08004c60 08004c60 08004c60 08004c60     `L..`L..`L..`L..
 8006f78:	08004c60 08004c60 08004c60 08004c60     `L..`L..`L..`L..
 8006f88:	08004c60 08004c60 08004c60 08004b86     `L..`L..`L...K..
 8006f98:	08004c60 08004c60 08004c60 08004c60     `L..`L..`L..`L..
 8006fa8:	08004c60 08004c60 08004c60 08004c60     `L..`L..`L..`L..
 8006fb8:	08004c60 08004b86 08004be8 08004b86     `L...K...K...K..
 8006fc8:	08004c60 08004c60 08004c60 08004c60     `L..`L..`L..`L..
 8006fd8:	08004b86 08004c60 08004c60 08004c60     .K..`L..`L..`L..
 8006fe8:	08004c60 08004c60 08004b86 08004c32     `L..`L...K..2L..
 8006ff8:	08004c60 08004c60 08004bfc 08004c60     `L..`L...K..`L..
 8007008:	08004b86 08004c60 08004c60 08004b86     .K..`L..`L...K..
 8007018:	204d4652 20495053 74697257 00000065     RFM SPI Write...
 8007028:	74736554 6d654d20 69725720 52206574     Test Mem Write R
 8007038:	0a646165 0000000a 52504545 53204d4f     ead.....EEPROM S
 8007048:	74726174 3025203a 3a207838 38302520     tart: %08x : %08
 8007058:	00000a78 676f7250 6d6d6172 3a676e69     x...Programming:
 8007068:	38302520 00000a78 52504545 45204d4f      %08x...EEPROM E
 8007078:	203a646e 78383025 25203a20 0a783830     nd: %08x : %08x.
 8007088:	0000000a 73616c46 72452068 0a657361     ....Flash Erase.
 8007098:	00000000 73616c46 74532068 3a747261     ....Flash Start:
 80070a8:	38302520 203a2078 78383025 3830250a      %08x : %08x.%08
 80070b8:	203a2078 78383025 0000000a 676f7250     x : %08x....Prog
 80070c8:	6d6d6172 20676e69 78383025 38302520     ramming %08x %08
 80070d8:	00000a78 73616c46 6e452068 25203a64     x...Flash End: %
 80070e8:	20783830 3025203a 250a7838 20783830     08x : %08x.%08x 
 80070f8:	3025203a 000a7838 656d6954 2074756f     : %08x..Timeout 
 8007108:	25207325 0a583830 00000000 20435452     %s %08X.....RTC 
 8007118:	0a525349 00000000                       ISR.....

08007120 <st_usbfs_v2_usb_driver>:
 8007120:	08006705 08006201 08006249 0800635d     .g...b..Ib..]c..
 8007130:	080063a1 08006481 08006445 080064cd     .c...d..Ed...d..
 8007140:	08006541 080065e9 080066e5 00000000     Ae...e...f......
 8007150:	00000000                                ....

Disassembly of section .data:

20000000 <hid_report_buf>:
20000000:	61666544 20746c75 6f706552 42207472     Default Report B
20000010:	65666675 00000072 00000000 00000000     uffer...........
	...

20000040 <mem_flash_do_page_erase>:
 * address: Page-aligned address to erase
 */
static _RAM bool mem_flash_do_page_erase(uint32_t address)
{
    //erase operation
    FLASH_PECR |= FLASH_PECR_ERASE | FLASH_PECR_PROG;
20000040:	4a0c      	ldr	r2, [pc, #48]	; (20000074 <mem_flash_do_page_erase+0x34>)
20000042:	6811      	ldr	r1, [r2, #0]
20000044:	2382      	movs	r3, #130	; 0x82
20000046:	009b      	lsls	r3, r3, #2
20000048:	430b      	orrs	r3, r1
2000004a:	6013      	str	r3, [r2, #0]
    MMIO32(address) = (uint32_t)0;
2000004c:	2300      	movs	r3, #0
2000004e:	6003      	str	r3, [r0, #0]
    //wait for completion
    while (FLASH_SR & FLASH_SR_BSY) { }
20000050:	4b09      	ldr	r3, [pc, #36]	; (20000078 <mem_flash_do_page_erase+0x38>)
20000052:	681b      	ldr	r3, [r3, #0]
20000054:	07db      	lsls	r3, r3, #31
20000056:	d4fb      	bmi.n	20000050 <mem_flash_do_page_erase+0x10>
    if (FLASH_SR & FLASH_SR_EOP)
20000058:	4b07      	ldr	r3, [pc, #28]	; (20000078 <mem_flash_do_page_erase+0x38>)
2000005a:	681b      	ldr	r3, [r3, #0]
2000005c:	079b      	lsls	r3, r3, #30
2000005e:	d504      	bpl.n	2000006a <mem_flash_do_page_erase+0x2a>
    {
        //completed without incident
        FLASH_SR = FLASH_SR_EOP;
20000060:	4b05      	ldr	r3, [pc, #20]	; (20000078 <mem_flash_do_page_erase+0x38>)
20000062:	2202      	movs	r2, #2
20000064:	601a      	str	r2, [r3, #0]
        return true;
20000066:	2001      	movs	r0, #1
    {
        //there was an error
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
        return false;
    }
}
20000068:	4770      	bx	lr
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
2000006a:	4b03      	ldr	r3, [pc, #12]	; (20000078 <mem_flash_do_page_erase+0x38>)
2000006c:	4a03      	ldr	r2, [pc, #12]	; (2000007c <mem_flash_do_page_erase+0x3c>)
2000006e:	601a      	str	r2, [r3, #0]
        return false;
20000070:	2000      	movs	r0, #0
20000072:	e7f9      	b.n	20000068 <mem_flash_do_page_erase+0x28>
20000074:	40022004 	.word	0x40022004
20000078:	40022018 	.word	0x40022018
2000007c:	00020300 	.word	0x00020300

20000080 <mem_flash_do_write_half_page>:
 *
 * address: Half-page aligned address to write
 * data: Array to 16 32-bit words to write
 */
static _RAM bool mem_flash_do_write_half_page(uint32_t address, uint32_t *data)
{
20000080:	b510      	push	{r4, lr}
    uint8_t i;

    //half-page program operation
    FLASH_PECR |= FLASH_PECR_PROG | FLASH_PECR_FPRG;
20000082:	4a10      	ldr	r2, [pc, #64]	; (200000c4 <mem_flash_do_write_half_page+0x44>)
20000084:	6814      	ldr	r4, [r2, #0]
20000086:	2381      	movs	r3, #129	; 0x81
20000088:	00db      	lsls	r3, r3, #3
2000008a:	4323      	orrs	r3, r4
2000008c:	6013      	str	r3, [r2, #0]
    for (i = 0; i < 16; i++)
2000008e:	2300      	movs	r3, #0
20000090:	2b0f      	cmp	r3, #15
20000092:	d805      	bhi.n	200000a0 <mem_flash_do_write_half_page+0x20>
    {
        MMIO32(address) = data[i]; //the actual address written is unimportant as these words will be queued
20000094:	009a      	lsls	r2, r3, #2
20000096:	5852      	ldr	r2, [r2, r1]
20000098:	6002      	str	r2, [r0, #0]
    for (i = 0; i < 16; i++)
2000009a:	3301      	adds	r3, #1
2000009c:	b2db      	uxtb	r3, r3
2000009e:	e7f7      	b.n	20000090 <mem_flash_do_write_half_page+0x10>
    }
    //wait for completion
    while (FLASH_SR & FLASH_SR_BSY) { }
200000a0:	4b09      	ldr	r3, [pc, #36]	; (200000c8 <mem_flash_do_write_half_page+0x48>)
200000a2:	681b      	ldr	r3, [r3, #0]
200000a4:	07db      	lsls	r3, r3, #31
200000a6:	d4fb      	bmi.n	200000a0 <mem_flash_do_write_half_page+0x20>
    if (FLASH_SR & FLASH_SR_EOP)
200000a8:	4b07      	ldr	r3, [pc, #28]	; (200000c8 <mem_flash_do_write_half_page+0x48>)
200000aa:	681b      	ldr	r3, [r3, #0]
200000ac:	079b      	lsls	r3, r3, #30
200000ae:	d504      	bpl.n	200000ba <mem_flash_do_write_half_page+0x3a>
    {
        //completed without incident
        FLASH_SR = FLASH_SR_EOP;
200000b0:	4b05      	ldr	r3, [pc, #20]	; (200000c8 <mem_flash_do_write_half_page+0x48>)
200000b2:	2202      	movs	r2, #2
200000b4:	601a      	str	r2, [r3, #0]
        return true;
200000b6:	2001      	movs	r0, #1
        //there was an error
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_NOTZEROERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
        return false;

    }
}
200000b8:	bd10      	pop	{r4, pc}
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_NOTZEROERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
200000ba:	4b03      	ldr	r3, [pc, #12]	; (200000c8 <mem_flash_do_write_half_page+0x48>)
200000bc:	4a03      	ldr	r2, [pc, #12]	; (200000cc <mem_flash_do_write_half_page+0x4c>)
200000be:	601a      	str	r2, [r3, #0]
        return false;
200000c0:	2000      	movs	r0, #0
200000c2:	e7f9      	b.n	200000b8 <mem_flash_do_write_half_page+0x38>
200000c4:	40022004 	.word	0x40022004
200000c8:	40022018 	.word	0x40022018
200000cc:	00030300 	.word	0x00030300

200000d0 <rcc_ahb_frequency>:
200000d0:	001fff68                                h...

200000d4 <rcc_apb1_frequency>:
200000d4:	001fff68                                h...

200000d8 <rcc_apb2_frequency>:
200000d8:	001fff68                                h...

200000dc <_impure_ptr>:
200000dc:	200000e0                                ... 

200000e0 <impure_data>:
	...
