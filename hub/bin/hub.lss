
hub/bin/hub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030f0  08004000  08004000  00000098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .preinit_array 00000000  080070f0  080070f0  000032c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .init_array   00000000  080070f0  080070f0  000032c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000000  080070f0  080070f0  000032c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000140  20000000  080070f0  00003188  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  5 .bss          0000044c  20000140  08007230  000032c8  2**2
                  ALLOC
  6 ._user_heap_stack 00001004  2000058c  08007230  000032c8  2**0
                  ALLOC
  7 .ARM.attributes 0000002a  00000000  00000000  000032c8  2**0
                  CONTENTS, READONLY
  8 .debug_info   00019269  00000000  00000000  000032f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000450e  00000000  00000000  0001c55b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00007451  00000000  00000000  00020a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001280  00000000  00000000  00027eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001390  00000000  00000000  0002913a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00006f4b  00000000  00000000  0002a4ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000ff4c  00000000  00000000  00031415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00023efb  00000000  00000000  00041361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      0000004c  00000000  00000000  0006525c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002c98  00000000  00000000  000652a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004000 <vector_table>:
 8004000:	00 20 00 20 31 67 00 08 f5 44 00 08 05 45 00 08     . . 1g...D...E..
	...
 800402c:	2f 67 00 08 00 00 00 00 00 00 00 00 2f 67 00 08     /g........../g..
 800403c:	2f 67 00 08 2d 67 00 08 2d 67 00 08 9d 50 00 08     /g..-g..-g...P..
 800404c:	2d 67 00 08 2d 67 00 08 2d 67 00 08 2d 67 00 08     -g..-g..-g..-g..
 800405c:	b5 4c 00 08 2d 67 00 08 2d 67 00 08 2d 67 00 08     .L..-g..-g..-g..
 800406c:	2d 67 00 08 4d 45 00 08 2d 67 00 08 2d 67 00 08     -g..ME..-g..-g..
 800407c:	2d 67 00 08 2d 67 00 08 2d 67 00 08 2d 67 00 08     -g..-g..-g..-g..
 800408c:	2d 67 00 08 2d 67 00 08 2d 67 00 08 2d 67 00 08     -g..-g..-g..-g..
 800409c:	2d 67 00 08 2d 67 00 08 2d 67 00 08 2d 67 00 08     -g..-g..-g..-g..
 80040ac:	2d 67 00 08 15 45 00 08 2d 67 00 08 2d 67 00 08     -g...E..-g..-g..
 80040bc:	69 43 00 08                                         iC..

080040c0 <hid_control_request>:
                                                          void (**complete)(usbd_device *, struct usb_setup_data *))
{
    (void)complete;
    (void)dev;

    if ((req->bmRequestType != 0x81) ||
 80040c0:	7808      	ldrb	r0, [r1, #0]
 80040c2:	2881      	cmp	r0, #129	; 0x81
 80040c4:	d110      	bne.n	80040e8 <hid_control_request+0x28>
        (req->bRequest != USB_REQ_GET_DESCRIPTOR) ||
 80040c6:	7848      	ldrb	r0, [r1, #1]
    if ((req->bmRequestType != 0x81) ||
 80040c8:	2806      	cmp	r0, #6
 80040ca:	d10f      	bne.n	80040ec <hid_control_request+0x2c>
        (req->wValue != 0x2200))
 80040cc:	7888      	ldrb	r0, [r1, #2]
 80040ce:	78c9      	ldrb	r1, [r1, #3]
 80040d0:	0209      	lsls	r1, r1, #8
 80040d2:	4301      	orrs	r1, r0
        (req->bRequest != USB_REQ_GET_DESCRIPTOR) ||
 80040d4:	2088      	movs	r0, #136	; 0x88
 80040d6:	0180      	lsls	r0, r0, #6
 80040d8:	4281      	cmp	r1, r0
 80040da:	d109      	bne.n	80040f0 <hid_control_request+0x30>
        return USBD_REQ_NOTSUPP;

    //  Handle the HID report descriptor.
    *buf = (uint8_t *)hid_report_descriptor;
 80040dc:	4905      	ldr	r1, [pc, #20]	; (80040f4 <hid_control_request+0x34>)
 80040de:	6011      	str	r1, [r2, #0]
    *len = sizeof(hid_report_descriptor);
 80040e0:	2219      	movs	r2, #25
 80040e2:	801a      	strh	r2, [r3, #0]

    return USBD_REQ_HANDLED;
 80040e4:	2001      	movs	r0, #1
 80040e6:	e000      	b.n	80040ea <hid_control_request+0x2a>
        return USBD_REQ_NOTSUPP;
 80040e8:	2000      	movs	r0, #0
}
 80040ea:	4770      	bx	lr
        return USBD_REQ_NOTSUPP;
 80040ec:	2000      	movs	r0, #0
 80040ee:	e7fc      	b.n	80040ea <hid_control_request+0x2a>
 80040f0:	2000      	movs	r0, #0
 80040f2:	e7fa      	b.n	80040ea <hid_control_request+0x2a>
 80040f4:	08006d58 	.word	0x08006d58

080040f8 <hid_set_config>:
{
 80040f8:	b510      	push	{r4, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	0004      	movs	r4, r0
    usbd_ep_setup(dev, ENDPOINT_HID_IN, USB_ENDPOINT_ATTR_INTERRUPT, 64, hid_in_report_callback);
 80040fe:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <hid_set_config+0x3c>)
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	2340      	movs	r3, #64	; 0x40
 8004104:	2203      	movs	r2, #3
 8004106:	2181      	movs	r1, #129	; 0x81
 8004108:	f001 fb10 	bl	800572c <usbd_ep_setup>
    usbd_ep_setup(dev, ENDPOINT_HID_OUT, USB_ENDPOINT_ATTR_INTERRUPT, 64, hid_out_report_callback);
 800410c:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <hid_set_config+0x40>)
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	2340      	movs	r3, #64	; 0x40
 8004112:	2203      	movs	r2, #3
 8004114:	2101      	movs	r1, #1
 8004116:	0020      	movs	r0, r4
 8004118:	f001 fb08 	bl	800572c <usbd_ep_setup>
    usbd_register_control_callback(
 800411c:	4b07      	ldr	r3, [pc, #28]	; (800413c <hid_set_config+0x44>)
 800411e:	227f      	movs	r2, #127	; 0x7f
 8004120:	2101      	movs	r1, #1
 8004122:	0020      	movs	r0, r4
 8004124:	f001 fbfd 	bl	8005922 <usbd_register_control_callback>
    usb_state = CONNECTED;
 8004128:	4b05      	ldr	r3, [pc, #20]	; (8004140 <hid_set_config+0x48>)
 800412a:	2201      	movs	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
}
 800412e:	b002      	add	sp, #8
 8004130:	bd10      	pop	{r4, pc}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	08004199 	.word	0x08004199
 8004138:	08004145 	.word	0x08004145
 800413c:	080040c1 	.word	0x080040c1
 8004140:	20000142 	.word	0x20000142

08004144 <hid_out_report_callback>:
        }
    }
}

static void hid_out_report_callback(usbd_device *dev, uint8_t ea)
{
 8004144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004146:	b087      	sub	sp, #28
 8004148:	0005      	movs	r5, r0
 800414a:	000e      	movs	r6, r1
    // serial_printf("G");

    // Have to write a packet back here to begin IN transactions
    uint8_t buf[] = "Out Report Callback\n";
 800414c:	466a      	mov	r2, sp
 800414e:	4b0f      	ldr	r3, [pc, #60]	; (800418c <hid_out_report_callback+0x48>)
 8004150:	0014      	movs	r4, r2
 8004152:	cb83      	ldmia	r3!, {r0, r1, r7}
 8004154:	c483      	stmia	r4!, {r0, r1, r7}
 8004156:	cb03      	ldmia	r3!, {r0, r1}
 8004158:	c403      	stmia	r4!, {r0, r1}
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	7023      	strb	r3, [r4, #0]
    usbd_ep_write_packet(dev, ea, buf, HID_REPORT_SIZE);
 800415e:	2340      	movs	r3, #64	; 0x40
 8004160:	0031      	movs	r1, r6
 8004162:	0028      	movs	r0, r5
 8004164:	f001 fb02 	bl	800576c <usbd_ep_write_packet>

    usbd_ep_read_packet(dev, ea, hid_report_buf, HID_REPORT_SIZE);
 8004168:	4c09      	ldr	r4, [pc, #36]	; (8004190 <hid_out_report_callback+0x4c>)
 800416a:	2340      	movs	r3, #64	; 0x40
 800416c:	0022      	movs	r2, r4
 800416e:	0031      	movs	r1, r6
 8004170:	0028      	movs	r0, r5
 8004172:	f001 fb02 	bl	800577a <usbd_ep_read_packet>
    uint8_t command = hid_report_buf[0];
 8004176:	7823      	ldrb	r3, [r4, #0]

    // serial_printf("Out Report command: %i data: %s\n", command, &hid_report_buf[4]);

    // Get Log
    if (command == 1)
 8004178:	2b01      	cmp	r3, #1
 800417a:	d001      	beq.n	8004180 <hid_out_report_callback+0x3c>
    {
        usb_state = GET_LOG;
        log_read_reset();
    }
}
 800417c:	b007      	add	sp, #28
 800417e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        usb_state = GET_LOG;
 8004180:	4b04      	ldr	r3, [pc, #16]	; (8004194 <hid_out_report_callback+0x50>)
 8004182:	2202      	movs	r2, #2
 8004184:	701a      	strb	r2, [r3, #0]
        log_read_reset();
 8004186:	f000 fb8b 	bl	80048a0 <log_read_reset>
}
 800418a:	e7f7      	b.n	800417c <hid_out_report_callback+0x38>
 800418c:	08006c88 	.word	0x08006c88
 8004190:	20000000 	.word	0x20000000
 8004194:	20000142 	.word	0x20000142

08004198 <hid_in_report_callback>:
{
 8004198:	b570      	push	{r4, r5, r6, lr}
 800419a:	0005      	movs	r5, r0
 800419c:	000e      	movs	r6, r1
    if (usb_state == GET_LOG)
 800419e:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <hid_in_report_callback+0x50>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d01d      	beq.n	80041e2 <hid_in_report_callback+0x4a>
}
 80041a6:	bd70      	pop	{r4, r5, r6, pc}
            hid_report_buf[i] = log_read();
 80041a8:	f000 fb62 	bl	8004870 <log_read>
 80041ac:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <hid_in_report_callback+0x54>)
 80041ae:	5518      	strb	r0, [r3, r4]
        for (uint16_t i = 0; i < HID_REPORT_SIZE; i++)
 80041b0:	3401      	adds	r4, #1
 80041b2:	b2a4      	uxth	r4, r4
 80041b4:	2c3f      	cmp	r4, #63	; 0x3f
 80041b6:	d9f7      	bls.n	80041a8 <hid_in_report_callback+0x10>
        bytes_sent += HID_REPORT_SIZE;
 80041b8:	4c0d      	ldr	r4, [pc, #52]	; (80041f0 <hid_in_report_callback+0x58>)
 80041ba:	8823      	ldrh	r3, [r4, #0]
 80041bc:	3340      	adds	r3, #64	; 0x40
 80041be:	8023      	strh	r3, [r4, #0]
        usbd_ep_write_packet(dev, ea, hid_report_buf, HID_REPORT_SIZE);
 80041c0:	2340      	movs	r3, #64	; 0x40
 80041c2:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <hid_in_report_callback+0x54>)
 80041c4:	0031      	movs	r1, r6
 80041c6:	0028      	movs	r0, r5
 80041c8:	f001 fad0 	bl	800576c <usbd_ep_write_packet>
        if(bytes_sent >= log_size())
 80041cc:	f000 fb72 	bl	80048b4 <log_size>
 80041d0:	8823      	ldrh	r3, [r4, #0]
 80041d2:	4298      	cmp	r0, r3
 80041d4:	d8e7      	bhi.n	80041a6 <hid_in_report_callback+0xe>
            usb_state = RESET;
 80041d6:	2300      	movs	r3, #0
 80041d8:	4a03      	ldr	r2, [pc, #12]	; (80041e8 <hid_in_report_callback+0x50>)
 80041da:	7013      	strb	r3, [r2, #0]
            bytes_sent = 0;
 80041dc:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <hid_in_report_callback+0x58>)
 80041de:	8013      	strh	r3, [r2, #0]
}
 80041e0:	e7e1      	b.n	80041a6 <hid_in_report_callback+0xe>
        for (uint16_t i = 0; i < HID_REPORT_SIZE; i++)
 80041e2:	2400      	movs	r4, #0
 80041e4:	e7e6      	b.n	80041b4 <hid_in_report_callback+0x1c>
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	20000142 	.word	0x20000142
 80041ec:	20000000 	.word	0x20000000
 80041f0:	20000140 	.word	0x20000140

080041f4 <cusb_clock_init>:
{
 80041f4:	b510      	push	{r4, lr}
    flash_set_ws(FLASH_ACR_LATENCY_0WS);
 80041f6:	2000      	movs	r0, #0
 80041f8:	f000 ff80 	bl	80050fc <flash_set_ws>
    rcc_osc_on(RCC_HSI16);
 80041fc:	2003      	movs	r0, #3
 80041fe:	f001 f889 	bl	8005314 <rcc_osc_on>
    rcc_wait_for_osc_ready(RCC_HSI16);
 8004202:	2003      	movs	r0, #3
 8004204:	f001 f90a 	bl	800541c <rcc_wait_for_osc_ready>
    rcc_set_sysclk_source(RCC_HSI16);
 8004208:	2003      	movs	r0, #3
 800420a:	f001 f919 	bl	8005440 <rcc_set_sysclk_source>
    RCC_CFGR |= RCC_CFGR_STOPWUCK_HSI16;
 800420e:	4a1f      	ldr	r2, [pc, #124]	; (800428c <cusb_clock_init+0x98>)
 8004210:	6811      	ldr	r1, [r2, #0]
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	430b      	orrs	r3, r1
 8004218:	6013      	str	r3, [r2, #0]
    rcc_set_hpre(RCC_CFGR_HPRE_NODIV);   //  AHB -> 16Mhz
 800421a:	2000      	movs	r0, #0
 800421c:	f001 f94e 	bl	80054bc <rcc_set_hpre>
    rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV); //  APB1 ->16Mhz
 8004220:	2000      	movs	r0, #0
 8004222:	f001 f933 	bl	800548c <rcc_set_ppre1>
    rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV); //  APB2 ->16Mhz
 8004226:	2000      	movs	r0, #0
 8004228:	f001 f93c 	bl	80054a4 <rcc_set_ppre2>
    rcc_ahb_frequency = 16000000;
 800422c:	4b18      	ldr	r3, [pc, #96]	; (8004290 <cusb_clock_init+0x9c>)
 800422e:	4a19      	ldr	r2, [pc, #100]	; (8004294 <cusb_clock_init+0xa0>)
 8004230:	6013      	str	r3, [r2, #0]
    rcc_apb1_frequency = 16000000;
 8004232:	4a19      	ldr	r2, [pc, #100]	; (8004298 <cusb_clock_init+0xa4>)
 8004234:	6013      	str	r3, [r2, #0]
    rcc_apb2_frequency = 16000000;
 8004236:	4a19      	ldr	r2, [pc, #100]	; (800429c <cusb_clock_init+0xa8>)
 8004238:	6013      	str	r3, [r2, #0]
    rcc_periph_clock_enable(RCC_SYSCFG);
 800423a:	20d0      	movs	r0, #208	; 0xd0
 800423c:	00c0      	lsls	r0, r0, #3
 800423e:	f001 f97d 	bl	800553c <rcc_periph_clock_enable>
    SYSCFG_CFGR3 |= 0x01;
 8004242:	4a17      	ldr	r2, [pc, #92]	; (80042a0 <cusb_clock_init+0xac>)
 8004244:	6813      	ldr	r3, [r2, #0]
 8004246:	2101      	movs	r1, #1
 8004248:	430b      	orrs	r3, r1
 800424a:	6013      	str	r3, [r2, #0]
    while (!(SYSCFG_CFGR3 & SYSCFG_CFGR3_VREFINT_RDYF))
 800424c:	4b14      	ldr	r3, [pc, #80]	; (80042a0 <cusb_clock_init+0xac>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	d5fb      	bpl.n	800424c <cusb_clock_init+0x58>
    SYSCFG_CFGR3 |= SYSCFG_CFGR3_ENREF_HSI48;
 8004254:	4a12      	ldr	r2, [pc, #72]	; (80042a0 <cusb_clock_init+0xac>)
 8004256:	6811      	ldr	r1, [r2, #0]
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	019b      	lsls	r3, r3, #6
 800425c:	430b      	orrs	r3, r1
 800425e:	6013      	str	r3, [r2, #0]
    while (!(SYSCFG_CFGR3 & SYSCFG_CFGR3_REF_HSI48_RDYF))
 8004260:	4b0f      	ldr	r3, [pc, #60]	; (80042a0 <cusb_clock_init+0xac>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	015b      	lsls	r3, r3, #5
 8004266:	d5fb      	bpl.n	8004260 <cusb_clock_init+0x6c>
    rcc_osc_on(RCC_HSI48);
 8004268:	2002      	movs	r0, #2
 800426a:	f001 f853 	bl	8005314 <rcc_osc_on>
    rcc_wait_for_osc_ready(RCC_HSI48);
 800426e:	2002      	movs	r0, #2
 8004270:	f001 f8d4 	bl	800541c <rcc_wait_for_osc_ready>
    rcc_periph_clock_enable(RCC_USB);
 8004274:	480b      	ldr	r0, [pc, #44]	; (80042a4 <cusb_clock_init+0xb0>)
 8004276:	f001 f961 	bl	800553c <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_CRS);
 800427a:	480b      	ldr	r0, [pc, #44]	; (80042a8 <cusb_clock_init+0xb4>)
 800427c:	f001 f95e 	bl	800553c <rcc_periph_clock_enable>
    rcc_set_hsi48_source_rc48();
 8004280:	f001 f8d4 	bl	800542c <rcc_set_hsi48_source_rc48>
    rcc_osc_off(RCC_MSI);
 8004284:	2004      	movs	r0, #4
 8004286:	f001 f86f 	bl	8005368 <rcc_osc_off>
}
 800428a:	bd10      	pop	{r4, pc}
 800428c:	4002100c 	.word	0x4002100c
 8004290:	00f42400 	.word	0x00f42400
 8004294:	200000d0 	.word	0x200000d0
 8004298:	200000d4 	.word	0x200000d4
 800429c:	200000d8 	.word	0x200000d8
 80042a0:	40010020 	.word	0x40010020
 80042a4:	00000717 	.word	0x00000717
 80042a8:	0000071b 	.word	0x0000071b

080042ac <cusb_init>:
{
 80042ac:	b510      	push	{r4, lr}
 80042ae:	b084      	sub	sp, #16
    cusb_clock_init();
 80042b0:	f7ff ffa0 	bl	80041f4 <cusb_clock_init>
    usb_state = RESET;
 80042b4:	2300      	movs	r3, #0
 80042b6:	4a13      	ldr	r2, [pc, #76]	; (8004304 <cusb_init+0x58>)
 80042b8:	7013      	strb	r3, [r2, #0]
    SET_REG(USB_CNTR_REG, USB_CNTR_FRES);
 80042ba:	4a13      	ldr	r2, [pc, #76]	; (8004308 <cusb_init+0x5c>)
 80042bc:	2101      	movs	r1, #1
 80042be:	6011      	str	r1, [r2, #0]
    SET_REG(USB_CNTR_REG, 0);
 80042c0:	6013      	str	r3, [r2, #0]
    SET_REG(USB_ISTR_REG, 0);
 80042c2:	4a12      	ldr	r2, [pc, #72]	; (800430c <cusb_init+0x60>)
 80042c4:	6013      	str	r3, [r2, #0]
    usbd_dev = usbd_init(&st_usbfs_v2_usb_driver, &dev_desc, &cfg_desc, usb_strings, sizeof(usb_strings) / sizeof(const char *), usbd_control_buffer, sizeof(usbd_control_buffer));
 80042c6:	3380      	adds	r3, #128	; 0x80
 80042c8:	9302      	str	r3, [sp, #8]
 80042ca:	4b11      	ldr	r3, [pc, #68]	; (8004310 <cusb_init+0x64>)
 80042cc:	9301      	str	r3, [sp, #4]
 80042ce:	2304      	movs	r3, #4
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	4b10      	ldr	r3, [pc, #64]	; (8004314 <cusb_init+0x68>)
 80042d4:	4a10      	ldr	r2, [pc, #64]	; (8004318 <cusb_init+0x6c>)
 80042d6:	4911      	ldr	r1, [pc, #68]	; (800431c <cusb_init+0x70>)
 80042d8:	4811      	ldr	r0, [pc, #68]	; (8004320 <cusb_init+0x74>)
 80042da:	f001 f9fb 	bl	80056d4 <usbd_init>
 80042de:	4c11      	ldr	r4, [pc, #68]	; (8004324 <cusb_init+0x78>)
 80042e0:	6020      	str	r0, [r4, #0]
    usbd_register_reset_callback(usbd_dev, cusb_reset_callback);
 80042e2:	4911      	ldr	r1, [pc, #68]	; (8004328 <cusb_init+0x7c>)
 80042e4:	f001 fa20 	bl	8005728 <usbd_register_reset_callback>
    usbd_register_set_config_callback(usbd_dev, hid_set_config);
 80042e8:	6820      	ldr	r0, [r4, #0]
 80042ea:	4910      	ldr	r1, [pc, #64]	; (800432c <cusb_init+0x80>)
 80042ec:	f001 feae 	bl	800604c <usbd_register_set_config_callback>
    nvic_enable_irq(NVIC_USB_IRQ);
 80042f0:	201f      	movs	r0, #31
 80042f2:	f002 fa61 	bl	80067b8 <nvic_enable_irq>
    nvic_set_priority(NVIC_USB_IRQ, 0);
 80042f6:	2100      	movs	r1, #0
 80042f8:	201f      	movs	r0, #31
 80042fa:	f002 fa69 	bl	80067d0 <nvic_set_priority>
}
 80042fe:	b004      	add	sp, #16
 8004300:	bd10      	pop	{r4, pc}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	20000142 	.word	0x20000142
 8004308:	40005c40 	.word	0x40005c40
 800430c:	40005c44 	.word	0x40005c44
 8004310:	20000144 	.word	0x20000144
 8004314:	08006d84 	.word	0x08006d84
 8004318:	08006cf0 	.word	0x08006cf0
 800431c:	08006d00 	.word	0x08006d00
 8004320:	080070bc 	.word	0x080070bc
 8004324:	200001c4 	.word	0x200001c4
 8004328:	08004355 	.word	0x08004355
 800432c:	080040f9 	.word	0x080040f9

08004330 <cusb_send>:
{
 8004330:	b500      	push	{lr}
 8004332:	b083      	sub	sp, #12
 8004334:	466b      	mov	r3, sp
 8004336:	1dda      	adds	r2, r3, #7
 8004338:	7010      	strb	r0, [r2, #0]
    usbd_ep_write_packet(usbd_dev, ENDPOINT_HID_IN, (const void *)&character, 1);
 800433a:	4b04      	ldr	r3, [pc, #16]	; (800434c <cusb_send+0x1c>)
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	2301      	movs	r3, #1
 8004340:	2181      	movs	r1, #129	; 0x81
 8004342:	f001 fa13 	bl	800576c <usbd_ep_write_packet>
}
 8004346:	b003      	add	sp, #12
 8004348:	bd00      	pop	{pc}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	200001c4 	.word	0x200001c4

08004350 <cusb_hook_reset>:

/*////////////////////////////////////////////////////////////////////////////*/
// Hook Function Weak Definitions
/*////////////////////////////////////////////////////////////////////////////*/

void __attribute__ ((weak)) cusb_hook_reset(void) {}
 8004350:	4770      	bx	lr
	...

08004354 <cusb_reset_callback>:
{
 8004354:	b510      	push	{r4, lr}
    usb_state = RESET;
 8004356:	4b03      	ldr	r3, [pc, #12]	; (8004364 <cusb_reset_callback+0x10>)
 8004358:	2200      	movs	r2, #0
 800435a:	701a      	strb	r2, [r3, #0]
    cusb_hook_reset();
 800435c:	f7ff fff8 	bl	8004350 <cusb_hook_reset>
}
 8004360:	bd10      	pop	{r4, pc}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	20000142 	.word	0x20000142

08004368 <usb_isr>:
/*////////////////////////////////////////////////////////////////////////////*/
// USB Interrupt
/*////////////////////////////////////////////////////////////////////////////*/

void usb_isr(void)
{
 8004368:	b570      	push	{r4, r5, r6, lr}
    // This print is definitley not the problem with hidapi write failing
    serial_printf("I");
 800436a:	4843      	ldr	r0, [pc, #268]	; (8004478 <usb_isr+0x110>)
 800436c:	f000 fa68 	bl	8004840 <serial_printf>

    uint16_t istr = *USB_ISTR_REG;
 8004370:	4b42      	ldr	r3, [pc, #264]	; (800447c <usb_isr+0x114>)
 8004372:	681b      	ldr	r3, [r3, #0]

    if (istr & USB_ISTR_RESET)
 8004374:	041a      	lsls	r2, r3, #16
 8004376:	0c15      	lsrs	r5, r2, #16
 8004378:	0152      	lsls	r2, r2, #5
 800437a:	d42e      	bmi.n	80043da <usb_isr+0x72>
        usbd_dev->pm_top = USBD_PM_TOP;
        _usbd_reset(usbd_dev);
        return;
    }

    if (istr & USB_ISTR_CTR)
 800437c:	041a      	lsls	r2, r3, #16
 800437e:	d436      	bmi.n	80043ee <usb_isr+0x86>
        {
            USB_CLR_EP_RX_CTR(ep);
        }
    }

    if (istr & USB_ISTR_SUSP)
 8004380:	052b      	lsls	r3, r5, #20
 8004382:	d508      	bpl.n	8004396 <usb_isr+0x2e>
    {
        USB_CLR_ISTR_SUSP();
 8004384:	4b3d      	ldr	r3, [pc, #244]	; (800447c <usb_isr+0x114>)
 8004386:	4a3e      	ldr	r2, [pc, #248]	; (8004480 <usb_isr+0x118>)
 8004388:	601a      	str	r2, [r3, #0]
        if (usbd_dev->user_callback_suspend)
 800438a:	4b3e      	ldr	r3, [pc, #248]	; (8004484 <usb_isr+0x11c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d000      	beq.n	8004396 <usb_isr+0x2e>
        {
            usbd_dev->user_callback_suspend();
 8004394:	4798      	blx	r3
        }
    }

    if (istr & USB_ISTR_WKUP)
 8004396:	04eb      	lsls	r3, r5, #19
 8004398:	d508      	bpl.n	80043ac <usb_isr+0x44>
    {
        USB_CLR_ISTR_WKUP();
 800439a:	4b38      	ldr	r3, [pc, #224]	; (800447c <usb_isr+0x114>)
 800439c:	4a3a      	ldr	r2, [pc, #232]	; (8004488 <usb_isr+0x120>)
 800439e:	601a      	str	r2, [r3, #0]
        if (usbd_dev->user_callback_resume)
 80043a0:	4b38      	ldr	r3, [pc, #224]	; (8004484 <usb_isr+0x11c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d000      	beq.n	80043ac <usb_isr+0x44>
        {
            usbd_dev->user_callback_resume();
 80043aa:	4798      	blx	r3
        }
    }

    if (istr & USB_ISTR_SOF)
 80043ac:	05ab      	lsls	r3, r5, #22
 80043ae:	d508      	bpl.n	80043c2 <usb_isr+0x5a>
    {
        USB_CLR_ISTR_SOF();
 80043b0:	4b32      	ldr	r3, [pc, #200]	; (800447c <usb_isr+0x114>)
 80043b2:	4a36      	ldr	r2, [pc, #216]	; (800448c <usb_isr+0x124>)
 80043b4:	601a      	str	r2, [r3, #0]
        if (usbd_dev->user_callback_sof)
 80043b6:	4b33      	ldr	r3, [pc, #204]	; (8004484 <usb_isr+0x11c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d000      	beq.n	80043c2 <usb_isr+0x5a>
        {
            usbd_dev->user_callback_sof();
 80043c0:	4798      	blx	r3
        }
    }

    if (usbd_dev->user_callback_sof)
 80043c2:	4b30      	ldr	r3, [pc, #192]	; (8004484 <usb_isr+0x11c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d04f      	beq.n	800446c <usb_isr+0x104>
    {
        *USB_CNTR_REG |= USB_CNTR_SOFM;
 80043cc:	4a30      	ldr	r2, [pc, #192]	; (8004490 <usb_isr+0x128>)
 80043ce:	6811      	ldr	r1, [r2, #0]
 80043d0:	2380      	movs	r3, #128	; 0x80
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	430b      	orrs	r3, r1
 80043d6:	6013      	str	r3, [r2, #0]
    }
    else
    {
        *USB_CNTR_REG &= ~USB_CNTR_SOFM;
    }
}
 80043d8:	bd70      	pop	{r4, r5, r6, pc}
        USB_CLR_ISTR_RESET();
 80043da:	4b28      	ldr	r3, [pc, #160]	; (800447c <usb_isr+0x114>)
 80043dc:	4a2d      	ldr	r2, [pc, #180]	; (8004494 <usb_isr+0x12c>)
 80043de:	601a      	str	r2, [r3, #0]
        usbd_dev->pm_top = USBD_PM_TOP;
 80043e0:	4b28      	ldr	r3, [pc, #160]	; (8004484 <usb_isr+0x11c>)
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	2340      	movs	r3, #64	; 0x40
 80043e6:	8303      	strh	r3, [r0, #24]
        _usbd_reset(usbd_dev);
 80043e8:	f001 f9a9 	bl	800573e <_usbd_reset>
        return;
 80043ec:	e7f4      	b.n	80043d8 <usb_isr+0x70>
        uint8_t ep = istr & USB_ISTR_EP_ID;
 80043ee:	240f      	movs	r4, #15
 80043f0:	401c      	ands	r4, r3
        if (istr & USB_ISTR_DIR)
 80043f2:	06eb      	lsls	r3, r5, #27
 80043f4:	d512      	bpl.n	800441c <usb_isr+0xb4>
            if (*USB_EP_REG(ep) & USB_EP_SETUP)
 80043f6:	00a3      	lsls	r3, r4, #2
 80043f8:	4a27      	ldr	r2, [pc, #156]	; (8004498 <usb_isr+0x130>)
 80043fa:	4694      	mov	ip, r2
 80043fc:	4463      	add	r3, ip
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	051b      	lsls	r3, r3, #20
 8004402:	d401      	bmi.n	8004408 <usb_isr+0xa0>
                type = USB_TRANSACTION_OUT;
 8004404:	2101      	movs	r1, #1
 8004406:	e016      	b.n	8004436 <usb_isr+0xce>
                st_usbfs_ep_read_packet(usbd_dev, ep, &usbd_dev->control_state.req, 8);
 8004408:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <usb_isr+0x11c>)
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	0002      	movs	r2, r0
 800440e:	3230      	adds	r2, #48	; 0x30
 8004410:	2308      	movs	r3, #8
 8004412:	0021      	movs	r1, r4
 8004414:	f002 f850 	bl	80064b8 <st_usbfs_ep_read_packet>
                type = USB_TRANSACTION_SETUP;
 8004418:	2102      	movs	r1, #2
 800441a:	e00c      	b.n	8004436 <usb_isr+0xce>
            USB_CLR_EP_TX_CTR(ep);
 800441c:	00a1      	lsls	r1, r4, #2
 800441e:	4b1e      	ldr	r3, [pc, #120]	; (8004498 <usb_isr+0x130>)
 8004420:	469c      	mov	ip, r3
 8004422:	4461      	add	r1, ip
 8004424:	680b      	ldr	r3, [r1, #0]
 8004426:	b21b      	sxth	r3, r3
 8004428:	4a1c      	ldr	r2, [pc, #112]	; (800449c <usb_isr+0x134>)
 800442a:	401a      	ands	r2, r3
 800442c:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <usb_isr+0x138>)
 800442e:	4313      	orrs	r3, r2
 8004430:	b29b      	uxth	r3, r3
 8004432:	600b      	str	r3, [r1, #0]
            type = USB_TRANSACTION_IN;
 8004434:	2100      	movs	r1, #0
        if (usbd_dev->user_callback_ctr[ep][type])
 8004436:	4a13      	ldr	r2, [pc, #76]	; (8004484 <usb_isr+0x11c>)
 8004438:	6810      	ldr	r0, [r2, #0]
 800443a:	0063      	lsls	r3, r4, #1
 800443c:	191b      	adds	r3, r3, r4
 800443e:	185b      	adds	r3, r3, r1
 8004440:	331a      	adds	r3, #26
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	581b      	ldr	r3, [r3, r0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <usb_isr+0xe8>
            usbd_dev->user_callback_ctr[ep][type](usbd_dev, ep);
 800444a:	0021      	movs	r1, r4
 800444c:	4798      	blx	r3
 800444e:	e797      	b.n	8004380 <usb_isr+0x18>
            USB_CLR_EP_RX_CTR(ep);
 8004450:	00a3      	lsls	r3, r4, #2
 8004452:	4a11      	ldr	r2, [pc, #68]	; (8004498 <usb_isr+0x130>)
 8004454:	4694      	mov	ip, r2
 8004456:	4463      	add	r3, ip
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	b212      	sxth	r2, r2
 800445c:	490f      	ldr	r1, [pc, #60]	; (800449c <usb_isr+0x134>)
 800445e:	400a      	ands	r2, r1
 8004460:	2180      	movs	r1, #128	; 0x80
 8004462:	430a      	orrs	r2, r1
 8004464:	b212      	sxth	r2, r2
 8004466:	b292      	uxth	r2, r2
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	e789      	b.n	8004380 <usb_isr+0x18>
        *USB_CNTR_REG &= ~USB_CNTR_SOFM;
 800446c:	4a08      	ldr	r2, [pc, #32]	; (8004490 <usb_isr+0x128>)
 800446e:	6813      	ldr	r3, [r2, #0]
 8004470:	490c      	ldr	r1, [pc, #48]	; (80044a4 <usb_isr+0x13c>)
 8004472:	400b      	ands	r3, r1
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e7af      	b.n	80043d8 <usb_isr+0x70>
 8004478:	08006ca0 	.word	0x08006ca0
 800447c:	40005c44 	.word	0x40005c44
 8004480:	0000f7ff 	.word	0x0000f7ff
 8004484:	200001c4 	.word	0x200001c4
 8004488:	0000efff 	.word	0x0000efff
 800448c:	0000fdff 	.word	0x0000fdff
 8004490:	40005c40 	.word	0x40005c40
 8004494:	0000fbff 	.word	0x0000fbff
 8004498:	40005c00 	.word	0x40005c00
 800449c:	00000f0f 	.word	0x00000f0f
 80044a0:	ffff8000 	.word	0xffff8000
 80044a4:	fffffdff 	.word	0xfffffdff

080044a8 <main>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

int main(void)
{
 80044a8:	b510      	push	{r4, lr}
	log_init();
 80044aa:	f000 f9a9 	bl	8004800 <log_init>
	timers_lptim_init();
 80044ae:	f000 fcd5 	bl	8004e5c <timers_lptim_init>
	timers_tim6_init();
 80044b2:	f000 fd19 	bl	8004ee8 <timers_tim6_init>
	// mem_init();
	// aes_init();
	// batt_init();

	#ifdef DEBUG
	for(int i = 0; i < 100000; i++){__asm__("nop");};
 80044b6:	2300      	movs	r3, #0
 80044b8:	e001      	b.n	80044be <main+0x16>
 80044ba:	46c0      	nop			; (mov r8, r8)
 80044bc:	3301      	adds	r3, #1
 80044be:	4a0a      	ldr	r2, [pc, #40]	; (80044e8 <main+0x40>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	ddfa      	ble.n	80044ba <main+0x12>
	#endif

	log_printf("Hub Start\n");
 80044c4:	4809      	ldr	r0, [pc, #36]	; (80044ec <main+0x44>)
 80044c6:	f000 f983 	bl	80047d0 <log_printf>
	flash_led(100, 5);
 80044ca:	2105      	movs	r1, #5
 80044cc:	2064      	movs	r0, #100	; 0x64
 80044ce:	f000 fc95 	bl	8004dfc <flash_led>

	test_mem_write_read();
 80044d2:	f000 fc35 	bl	8004d40 <test_mem_write_read>
	(void)test_hub2;


	for (;;)
	{
		log_printf("Hub Loop\n\n");
 80044d6:	4806      	ldr	r0, [pc, #24]	; (80044f0 <main+0x48>)
 80044d8:	f000 f97a 	bl	80047d0 <log_printf>
		timers_delay_milliseconds(1000);
 80044dc:	20fa      	movs	r0, #250	; 0xfa
 80044de:	0080      	lsls	r0, r0, #2
 80044e0:	f000 fd18 	bl	8004f14 <timers_delay_milliseconds>
	for (;;)
 80044e4:	e7f7      	b.n	80044d6 <main+0x2e>
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	0001869f 	.word	0x0001869f
 80044ec:	08006d94 	.word	0x08006d94
 80044f0:	08006da0 	.word	0x08006da0

080044f4 <nmi_handler>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void nmi_handler(void)
{
 80044f4:	b510      	push	{r4, lr}
  log_printf("nmi\n");
 80044f6:	4802      	ldr	r0, [pc, #8]	; (8004500 <nmi_handler+0xc>)
 80044f8:	f000 f96a 	bl	80047d0 <log_printf>
	while(1)
 80044fc:	e7fe      	b.n	80044fc <nmi_handler+0x8>
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	08006dac 	.word	0x08006dac

08004504 <hard_fault_handler>:
		
	}
}

void hard_fault_handler(void)
{
 8004504:	b510      	push	{r4, lr}
  log_printf("hard fault\n");
 8004506:	4802      	ldr	r0, [pc, #8]	; (8004510 <hard_fault_handler+0xc>)
 8004508:	f000 f962 	bl	80047d0 <log_printf>
	while(1)
 800450c:	e7fe      	b.n	800450c <hard_fault_handler+0x8>
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	08006db4 	.word	0x08006db4

08004514 <usart2_isr>:
}


// Interrupt routines
void usart2_isr(void)
{
 8004514:	b510      	push	{r4, lr}
	usart_send(SPF_USART, usart_recv(SIM_USART));
 8004516:	4c09      	ldr	r4, [pc, #36]	; (800453c <usart2_isr+0x28>)
 8004518:	0020      	movs	r0, r4
 800451a:	f001 f8cb 	bl	80056b4 <usart_recv>
 800451e:	0001      	movs	r1, r0
 8004520:	4807      	ldr	r0, [pc, #28]	; (8004540 <usart2_isr+0x2c>)
 8004522:	f001 f8c3 	bl	80056ac <usart_send>

	sim_rx_buf[sim_rx_head++] = usart_recv(SIM_USART);
 8004526:	0020      	movs	r0, r4
 8004528:	f001 f8c4 	bl	80056b4 <usart_recv>
 800452c:	4a05      	ldr	r2, [pc, #20]	; (8004544 <usart2_isr+0x30>)
 800452e:	7813      	ldrb	r3, [r2, #0]
 8004530:	1c59      	adds	r1, r3, #1
 8004532:	7011      	strb	r1, [r2, #0]
 8004534:	4a04      	ldr	r2, [pc, #16]	; (8004548 <usart2_isr+0x34>)
 8004536:	54d0      	strb	r0, [r2, r3]
}
 8004538:	bd10      	pop	{r4, pc}
 800453a:	46c0      	nop			; (mov r8, r8)
 800453c:	40004400 	.word	0x40004400
 8004540:	40013800 	.word	0x40013800
 8004544:	200002c8 	.word	0x200002c8
 8004548:	200001c8 	.word	0x200001c8

0800454c <adc_comp_isr>:

// ISRs
#ifdef _HUB
// For use with ADC1
void adc_comp_isr(void)
{
 800454c:	b570      	push	{r4, r5, r6, lr}
    // Takes about 150us to run

    // log_printf("ADC ISR %08X\n", ADC_ISR(ADC1));

    // Calculate batt_voltages
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 800454e:	2400      	movs	r4, #0
 8004550:	e014      	b.n	800457c <adc_comp_isr+0x30>
        batt_voltages[i] = ( (uint32_t)300 * ST_VREFINT_CAL * adc_vals[i + 1] ) / ( adc_vals[0] * 4095 ); }
 8004552:	4b4f      	ldr	r3, [pc, #316]	; (8004690 <adc_comp_isr+0x144>)
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	1c65      	adds	r5, r4, #1
 8004558:	4a4e      	ldr	r2, [pc, #312]	; (8004694 <adc_comp_isr+0x148>)
 800455a:	0069      	lsls	r1, r5, #1
 800455c:	5a88      	ldrh	r0, [r1, r2]
 800455e:	4343      	muls	r3, r0
 8004560:	0098      	lsls	r0, r3, #2
 8004562:	18c3      	adds	r3, r0, r3
 8004564:	0118      	lsls	r0, r3, #4
 8004566:	1ac0      	subs	r0, r0, r3
 8004568:	0080      	lsls	r0, r0, #2
 800456a:	8813      	ldrh	r3, [r2, #0]
 800456c:	0319      	lsls	r1, r3, #12
 800456e:	1ac9      	subs	r1, r1, r3
 8004570:	f002 f9f4 	bl	800695c <__udivsi3>
 8004574:	0064      	lsls	r4, r4, #1
 8004576:	4b48      	ldr	r3, [pc, #288]	; (8004698 <adc_comp_isr+0x14c>)
 8004578:	5318      	strh	r0, [r3, r4]
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 800457a:	b2ec      	uxtb	r4, r5
 800457c:	2c01      	cmp	r4, #1
 800457e:	d9e8      	bls.n	8004552 <adc_comp_isr+0x6>

    // For Hub : Measured voltage is half of actual
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 8004580:	2300      	movs	r3, #0
 8004582:	e006      	b.n	8004592 <adc_comp_isr+0x46>
        batt_voltages[i] = batt_voltages[i] * 2; }
 8004584:	4944      	ldr	r1, [pc, #272]	; (8004698 <adc_comp_isr+0x14c>)
 8004586:	0058      	lsls	r0, r3, #1
 8004588:	5a42      	ldrh	r2, [r0, r1]
 800458a:	0052      	lsls	r2, r2, #1
 800458c:	5242      	strh	r2, [r0, r1]
    for(uint8_t i = 0; i < NUM_VOLTAGES; i++){
 800458e:	3301      	adds	r3, #1
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b01      	cmp	r3, #1
 8004594:	d9f6      	bls.n	8004584 <adc_comp_isr+0x38>

    static uint16_t timer = 0;
    static uint8_t state = 0;
    switch(state)
 8004596:	4b41      	ldr	r3, [pc, #260]	; (800469c <adc_comp_isr+0x150>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b04      	cmp	r3, #4
 800459c:	d86e      	bhi.n	800467c <adc_comp_isr+0x130>
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4a3f      	ldr	r2, [pc, #252]	; (80046a0 <adc_comp_isr+0x154>)
 80045a2:	58d3      	ldr	r3, [r2, r3]
 80045a4:	469f      	mov	pc, r3
    {
        case 0:
            plugged_in = true;
            timer = timers_millis();
 80045a6:	f000 fccb 	bl	8004f40 <timers_millis>
 80045aa:	4b3e      	ldr	r3, [pc, #248]	; (80046a4 <adc_comp_isr+0x158>)
 80045ac:	8018      	strh	r0, [r3, #0]
            if(batt_voltages[PWR_VOLTAGE] < batt_voltages[BATT_VOLTAGE])
 80045ae:	4b3a      	ldr	r3, [pc, #232]	; (8004698 <adc_comp_isr+0x14c>)
 80045b0:	881a      	ldrh	r2, [r3, #0]
 80045b2:	885b      	ldrh	r3, [r3, #2]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d264      	bcs.n	8004682 <adc_comp_isr+0x136>
                state = 1;
 80045b8:	4b38      	ldr	r3, [pc, #224]	; (800469c <adc_comp_isr+0x150>)
 80045ba:	2201      	movs	r2, #1
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	e060      	b.n	8004682 <adc_comp_isr+0x136>
            break;

        case 1:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE])
 80045c0:	4b35      	ldr	r3, [pc, #212]	; (8004698 <adc_comp_isr+0x14c>)
 80045c2:	881a      	ldrh	r2, [r3, #0]
 80045c4:	885b      	ldrh	r3, [r3, #2]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d903      	bls.n	80045d2 <adc_comp_isr+0x86>
                state = 0;
 80045ca:	4b34      	ldr	r3, [pc, #208]	; (800469c <adc_comp_isr+0x150>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	e057      	b.n	8004682 <adc_comp_isr+0x136>
            else if(timers_millis() - timer > 1000)
 80045d2:	f000 fcb5 	bl	8004f40 <timers_millis>
 80045d6:	4b33      	ldr	r3, [pc, #204]	; (80046a4 <adc_comp_isr+0x158>)
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	1ac0      	subs	r0, r0, r3
 80045dc:	23fa      	movs	r3, #250	; 0xfa
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4298      	cmp	r0, r3
 80045e2:	dd4e      	ble.n	8004682 <adc_comp_isr+0x136>
                state = 2;
 80045e4:	4b2d      	ldr	r3, [pc, #180]	; (800469c <adc_comp_isr+0x150>)
 80045e6:	2202      	movs	r2, #2
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	e04a      	b.n	8004682 <adc_comp_isr+0x136>
            break;
        
        case 2:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE]){
 80045ec:	4b2a      	ldr	r3, [pc, #168]	; (8004698 <adc_comp_isr+0x14c>)
 80045ee:	881a      	ldrh	r2, [r3, #0]
 80045f0:	885b      	ldrh	r3, [r3, #2]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d907      	bls.n	8004606 <adc_comp_isr+0xba>
                timer = timers_millis(); 
 80045f6:	f000 fca3 	bl	8004f40 <timers_millis>
 80045fa:	4b2a      	ldr	r3, [pc, #168]	; (80046a4 <adc_comp_isr+0x158>)
 80045fc:	8018      	strh	r0, [r3, #0]
                state = 4;}
 80045fe:	4b27      	ldr	r3, [pc, #156]	; (800469c <adc_comp_isr+0x150>)
 8004600:	2204      	movs	r2, #4
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	e03d      	b.n	8004682 <adc_comp_isr+0x136>
            else if(timers_millis() - timer > 10000){
 8004606:	f000 fc9b 	bl	8004f40 <timers_millis>
 800460a:	4b26      	ldr	r3, [pc, #152]	; (80046a4 <adc_comp_isr+0x158>)
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	1ac0      	subs	r0, r0, r3
 8004610:	4b25      	ldr	r3, [pc, #148]	; (80046a8 <adc_comp_isr+0x15c>)
 8004612:	4298      	cmp	r0, r3
 8004614:	dd35      	ble.n	8004682 <adc_comp_isr+0x136>
                state = 3;
 8004616:	4b21      	ldr	r3, [pc, #132]	; (800469c <adc_comp_isr+0x150>)
 8004618:	2203      	movs	r2, #3
 800461a:	701a      	strb	r2, [r3, #0]
                plugged_in = false;
                log_printf("Plugged Out\n");}
 800461c:	4823      	ldr	r0, [pc, #140]	; (80046ac <adc_comp_isr+0x160>)
 800461e:	f000 f8d7 	bl	80047d0 <log_printf>
 8004622:	e02e      	b.n	8004682 <adc_comp_isr+0x136>
            break;
        
        case 3:
            if(batt_voltages[PWR_VOLTAGE] > batt_voltages[BATT_VOLTAGE]){
 8004624:	4b1c      	ldr	r3, [pc, #112]	; (8004698 <adc_comp_isr+0x14c>)
 8004626:	881a      	ldrh	r2, [r3, #0]
 8004628:	885b      	ldrh	r3, [r3, #2]
 800462a:	429a      	cmp	r2, r3
 800462c:	d929      	bls.n	8004682 <adc_comp_isr+0x136>
                timer = timers_millis();
 800462e:	f000 fc87 	bl	8004f40 <timers_millis>
 8004632:	4b1c      	ldr	r3, [pc, #112]	; (80046a4 <adc_comp_isr+0x158>)
 8004634:	8018      	strh	r0, [r3, #0]
                state = 0;
 8004636:	4b19      	ldr	r3, [pc, #100]	; (800469c <adc_comp_isr+0x150>)
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]
                log_printf("Plugged In\n");}
 800463c:	481c      	ldr	r0, [pc, #112]	; (80046b0 <adc_comp_isr+0x164>)
 800463e:	f000 f8c7 	bl	80047d0 <log_printf>
 8004642:	e01e      	b.n	8004682 <adc_comp_isr+0x136>
            break;

        case 4:
            if(batt_voltages[PWR_VOLTAGE] < batt_voltages[BATT_VOLTAGE]){
 8004644:	4b14      	ldr	r3, [pc, #80]	; (8004698 <adc_comp_isr+0x14c>)
 8004646:	881a      	ldrh	r2, [r3, #0]
 8004648:	885b      	ldrh	r3, [r3, #2]
 800464a:	429a      	cmp	r2, r3
 800464c:	d203      	bcs.n	8004656 <adc_comp_isr+0x10a>
                state = 2; }
 800464e:	4b13      	ldr	r3, [pc, #76]	; (800469c <adc_comp_isr+0x150>)
 8004650:	2202      	movs	r2, #2
 8004652:	701a      	strb	r2, [r3, #0]
 8004654:	e015      	b.n	8004682 <adc_comp_isr+0x136>
            else if(timers_millis() - timer > 1000){
 8004656:	f000 fc73 	bl	8004f40 <timers_millis>
 800465a:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <adc_comp_isr+0x158>)
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	1ac0      	subs	r0, r0, r3
 8004660:	23fa      	movs	r3, #250	; 0xfa
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4298      	cmp	r0, r3
 8004666:	dd0c      	ble.n	8004682 <adc_comp_isr+0x136>
                state = 0;
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <adc_comp_isr+0x150>)
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
                batt_rst_seq = true; 
 800466e:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <adc_comp_isr+0x168>)
 8004670:	3201      	adds	r2, #1
 8004672:	701a      	strb	r2, [r3, #0]
                log_printf("Reset Sequence\n"); }
 8004674:	4810      	ldr	r0, [pc, #64]	; (80046b8 <adc_comp_isr+0x16c>)
 8004676:	f000 f8ab 	bl	80047d0 <log_printf>
 800467a:	e002      	b.n	8004682 <adc_comp_isr+0x136>
            break;

        default:
            log_printf("Error ADC ISR Defaut Case\n");
 800467c:	480f      	ldr	r0, [pc, #60]	; (80046bc <adc_comp_isr+0x170>)
 800467e:	f000 f8a7 	bl	80047d0 <log_printf>
            break;
    }

    // log_printf("ADC ISR %u %u %u V\n",state, batt_voltages[0], batt_voltages[1]);

    ADC_ISR(ADC1) = 0xFFFFFFFF;
 8004682:	480f      	ldr	r0, [pc, #60]	; (80046c0 <adc_comp_isr+0x174>)
 8004684:	2301      	movs	r3, #1
 8004686:	425b      	negs	r3, r3
 8004688:	6003      	str	r3, [r0, #0]
    adc_start_conversion_regular(ADC1);
 800468a:	f000 fd2b 	bl	80050e4 <adc_start_conversion_regular>
}
 800468e:	bd70      	pop	{r4, r5, r6, pc}
 8004690:	1ff80078 	.word	0x1ff80078
 8004694:	200002cc 	.word	0x200002cc
 8004698:	200002d4 	.word	0x200002d4
 800469c:	200002d8 	.word	0x200002d8
 80046a0:	08006e08 	.word	0x08006e08
 80046a4:	200002da 	.word	0x200002da
 80046a8:	00002710 	.word	0x00002710
 80046ac:	08006dc0 	.word	0x08006dc0
 80046b0:	08006dd0 	.word	0x08006dd0
 80046b4:	200002d2 	.word	0x200002d2
 80046b8:	08006ddc 	.word	0x08006ddc
 80046bc:	08006dec 	.word	0x08006dec
 80046c0:	40012400 	.word	0x40012400

080046c4 <usart_setup>:
}

#ifdef DEBUG

static void usart_setup(void) 
{
 80046c4:	b570      	push	{r4, r5, r6, lr}
    rcc_periph_clock_enable(RCC_GPIOA);
 80046c6:	20b0      	movs	r0, #176	; 0xb0
 80046c8:	00c0      	lsls	r0, r0, #3
 80046ca:	f000 ff37 	bl	800553c <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOB);
 80046ce:	4826      	ldr	r0, [pc, #152]	; (8004768 <usart_setup+0xa4>)
 80046d0:	f000 ff34 	bl	800553c <rcc_periph_clock_enable>

	gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_TX);
 80046d4:	2580      	movs	r5, #128	; 0x80
 80046d6:	00ad      	lsls	r5, r5, #2
 80046d8:	24a0      	movs	r4, #160	; 0xa0
 80046da:	05e4      	lsls	r4, r4, #23
 80046dc:	002b      	movs	r3, r5
 80046de:	2200      	movs	r2, #0
 80046e0:	2102      	movs	r1, #2
 80046e2:	0020      	movs	r0, r4
 80046e4:	f000 fd65 	bl	80051b2 <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_RX);
 80046e8:	2680      	movs	r6, #128	; 0x80
 80046ea:	00f6      	lsls	r6, r6, #3
 80046ec:	0033      	movs	r3, r6
 80046ee:	2200      	movs	r2, #0
 80046f0:	2102      	movs	r1, #2
 80046f2:	0020      	movs	r0, r4
 80046f4:	f000 fd5d 	bl	80051b2 <gpio_mode_setup>
    
    gpio_set_output_options(SPF_USART_TX_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, SPF_USART_TX);
 80046f8:	002b      	movs	r3, r5
 80046fa:	2200      	movs	r2, #0
 80046fc:	2100      	movs	r1, #0
 80046fe:	0020      	movs	r0, r4
 8004700:	f000 fd77 	bl	80051f2 <gpio_set_output_options>

    gpio_set_af(SPF_USART_TX_PORT, SPF_USART_AF, SPF_USART_TX);
 8004704:	002a      	movs	r2, r5
 8004706:	2104      	movs	r1, #4
 8004708:	0020      	movs	r0, r4
 800470a:	f000 fd90 	bl	800522e <gpio_set_af>
    gpio_set_af(SPF_USART_RX_PORT, SPF_USART_AF, SPF_USART_RX);
 800470e:	0032      	movs	r2, r6
 8004710:	2104      	movs	r1, #4
 8004712:	0020      	movs	r0, r4
 8004714:	f000 fd8b 	bl	800522e <gpio_set_af>
    
	rcc_periph_clock_enable(SPF_USART_RCC);
 8004718:	4814      	ldr	r0, [pc, #80]	; (800476c <usart_setup+0xa8>)
 800471a:	f000 ff0f 	bl	800553c <rcc_periph_clock_enable>
    rcc_periph_reset_pulse(SPF_USART_RCC_RST);
 800471e:	4814      	ldr	r0, [pc, #80]	; (8004770 <usart_setup+0xac>)
 8004720:	f000 ff1a 	bl	8005558 <rcc_periph_reset_pulse>
	usart_disable(SPF_USART);
 8004724:	4c13      	ldr	r4, [pc, #76]	; (8004774 <usart_setup+0xb0>)
 8004726:	0020      	movs	r0, r4
 8004728:	f000 ffb1 	bl	800568e <usart_disable>
	usart_set_baudrate(SPF_USART, SPF_USART_BAUD);
 800472c:	21e1      	movs	r1, #225	; 0xe1
 800472e:	0249      	lsls	r1, r1, #9
 8004730:	0020      	movs	r0, r4
 8004732:	f000 ff4f 	bl	80055d4 <usart_set_baudrate>
	usart_set_databits(SPF_USART, 8);
 8004736:	2108      	movs	r1, #8
 8004738:	0020      	movs	r0, r4
 800473a:	f000 ff77 	bl	800562c <usart_set_databits>
	usart_set_stopbits(SPF_USART,USART_STOPBITS_1);
 800473e:	2100      	movs	r1, #0
 8004740:	0020      	movs	r0, r4
 8004742:	f000 ff81 	bl	8005648 <usart_set_stopbits>
	usart_set_mode(SPF_USART, USART_MODE_TX_RX);
 8004746:	210c      	movs	r1, #12
 8004748:	0020      	movs	r0, r4
 800474a:	f000 ff8d 	bl	8005668 <usart_set_mode>
	usart_set_parity(SPF_USART, USART_PARITY_NONE);
 800474e:	2100      	movs	r1, #0
 8004750:	0020      	movs	r0, r4
 8004752:	f000 ff81 	bl	8005658 <usart_set_parity>
	usart_set_flow_control(SPF_USART, USART_FLOWCONTROL_NONE);
 8004756:	2100      	movs	r1, #0
 8004758:	0020      	movs	r0, r4
 800475a:	f000 ff8b 	bl	8005674 <usart_set_flow_control>
	usart_enable(SPF_USART);
 800475e:	0020      	movs	r0, r4
 8004760:	f000 ff90 	bl	8005684 <usart_enable>
}
 8004764:	bd70      	pop	{r4, r5, r6, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	00000581 	.word	0x00000581
 800476c:	0000068e 	.word	0x0000068e
 8004770:	0000048e 	.word	0x0000048e
 8004774:	40013800 	.word	0x40013800

08004778 <_putchar_mem>:
{
 8004778:	b510      	push	{r4, lr}
 800477a:	0001      	movs	r1, r0
	mem_eeprom_write_byte((uint32_t)&(logger->log[write_index]), character);
 800477c:	4c06      	ldr	r4, [pc, #24]	; (8004798 <_putchar_mem+0x20>)
 800477e:	8820      	ldrh	r0, [r4, #0]
 8004780:	4b06      	ldr	r3, [pc, #24]	; (800479c <_putchar_mem+0x24>)
 8004782:	469c      	mov	ip, r3
 8004784:	4460      	add	r0, ip
 8004786:	f000 f8c5 	bl	8004914 <mem_eeprom_write_byte>
	write_index = (write_index + 1)%EEPROM_LOG_SIZE;
 800478a:	8823      	ldrh	r3, [r4, #0]
 800478c:	3301      	adds	r3, #1
 800478e:	059b      	lsls	r3, r3, #22
 8004790:	0d9b      	lsrs	r3, r3, #22
 8004792:	8023      	strh	r3, [r4, #0]
}
 8004794:	bd10      	pop	{r4, pc}
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	200002de 	.word	0x200002de
 800479c:	08080104 	.word	0x08080104

080047a0 <_putchar_spf>:

static void _putchar_spf(char character)
{
 80047a0:	b510      	push	{r4, lr}
	usart_send_blocking(SPF_USART, character);	
 80047a2:	0001      	movs	r1, r0
 80047a4:	4801      	ldr	r0, [pc, #4]	; (80047ac <_putchar_spf+0xc>)
 80047a6:	f000 ff77 	bl	8005698 <usart_send_blocking>
}
 80047aa:	bd10      	pop	{r4, pc}
 80047ac:	40013800 	.word	0x40013800

080047b0 <_putchar_usb>:

#ifdef _HUB
static void _putchar_usb(char character)
{
 80047b0:	b510      	push	{r4, lr}
	cusb_send(character);
 80047b2:	f7ff fdbd 	bl	8004330 <cusb_send>
}
 80047b6:	bd10      	pop	{r4, pc}

080047b8 <_putchar_main>:
{
 80047b8:	b510      	push	{r4, lr}
 80047ba:	0004      	movs	r4, r0
	_putchar_mem(character);
 80047bc:	f7ff ffdc 	bl	8004778 <_putchar_mem>
	_putchar_spf(character);
 80047c0:	0020      	movs	r0, r4
 80047c2:	f7ff ffed 	bl	80047a0 <_putchar_spf>
	_putchar_usb(character);
 80047c6:	0020      	movs	r0, r4
 80047c8:	f7ff fff2 	bl	80047b0 <_putchar_usb>
}
 80047cc:	bd10      	pop	{r4, pc}
	...

080047d0 <log_printf>:
{
 80047d0:	b40f      	push	{r0, r1, r2, r3}
 80047d2:	b500      	push	{lr}
 80047d4:	b083      	sub	sp, #12
 80047d6:	aa04      	add	r2, sp, #16
 80047d8:	ca02      	ldmia	r2!, {r1}
	va_start(va, format);
 80047da:	9201      	str	r2, [sp, #4]
	fnprintf(_putchar_main, format, va);
 80047dc:	4806      	ldr	r0, [pc, #24]	; (80047f8 <log_printf+0x28>)
 80047de:	f000 f963 	bl	8004aa8 <fnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {}
 80047e2:	2140      	movs	r1, #64	; 0x40
 80047e4:	4805      	ldr	r0, [pc, #20]	; (80047fc <log_printf+0x2c>)
 80047e6:	f000 ff6e 	bl	80056c6 <usart_get_flag>
 80047ea:	2800      	cmp	r0, #0
 80047ec:	d0f9      	beq.n	80047e2 <log_printf+0x12>
}
 80047ee:	b003      	add	sp, #12
 80047f0:	bc08      	pop	{r3}
 80047f2:	b004      	add	sp, #16
 80047f4:	4718      	bx	r3
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	080047b9 	.word	0x080047b9
 80047fc:	40013800 	.word	0x40013800

08004800 <log_init>:
{	
 8004800:	b510      	push	{r4, lr}
	write_index = logger->write_index;
 8004802:	4b0a      	ldr	r3, [pc, #40]	; (800482c <log_init+0x2c>)
 8004804:	885b      	ldrh	r3, [r3, #2]
 8004806:	4a0a      	ldr	r2, [pc, #40]	; (8004830 <log_init+0x30>)
 8004808:	8013      	strh	r3, [r2, #0]
	read_index 	= write_index;
 800480a:	4a0a      	ldr	r2, [pc, #40]	; (8004834 <log_init+0x34>)
 800480c:	8013      	strh	r3, [r2, #0]
	log_printf("\n\nLog Init\n----------------\n");
 800480e:	480a      	ldr	r0, [pc, #40]	; (8004838 <log_init+0x38>)
 8004810:	f7ff ffde 	bl	80047d0 <log_printf>
	cusb_init();
 8004814:	f7ff fd4a 	bl	80042ac <cusb_init>
    usart_setup();
 8004818:	f7ff ff54 	bl	80046c4 <usart_setup>
	for(int i = 0; i < 100000; i++){__asm__("nop");};
 800481c:	2300      	movs	r3, #0
 800481e:	4a07      	ldr	r2, [pc, #28]	; (800483c <log_init+0x3c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	dc02      	bgt.n	800482a <log_init+0x2a>
 8004824:	46c0      	nop			; (mov r8, r8)
 8004826:	3301      	adds	r3, #1
 8004828:	e7f9      	b.n	800481e <log_init+0x1e>
}
 800482a:	bd10      	pop	{r4, pc}
 800482c:	08080100 	.word	0x08080100
 8004830:	200002de 	.word	0x200002de
 8004834:	200002dc 	.word	0x200002dc
 8004838:	08006e1c 	.word	0x08006e1c
 800483c:	0001869f 	.word	0x0001869f

08004840 <serial_printf>:
{
 8004840:	b40f      	push	{r0, r1, r2, r3}
 8004842:	b500      	push	{lr}
 8004844:	b083      	sub	sp, #12
 8004846:	aa04      	add	r2, sp, #16
 8004848:	ca02      	ldmia	r2!, {r1}
	va_start(va, format);
 800484a:	9201      	str	r2, [sp, #4]
	fnprintf(_putchar_spf, format, va);
 800484c:	4806      	ldr	r0, [pc, #24]	; (8004868 <serial_printf+0x28>)
 800484e:	f000 f92b 	bl	8004aa8 <fnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {}
 8004852:	2140      	movs	r1, #64	; 0x40
 8004854:	4805      	ldr	r0, [pc, #20]	; (800486c <serial_printf+0x2c>)
 8004856:	f000 ff36 	bl	80056c6 <usart_get_flag>
 800485a:	2800      	cmp	r0, #0
 800485c:	d0f9      	beq.n	8004852 <serial_printf+0x12>
}
 800485e:	b003      	add	sp, #12
 8004860:	bc08      	pop	{r3}
 8004862:	b004      	add	sp, #16
 8004864:	4718      	bx	r3
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	080047a1 	.word	0x080047a1
 800486c:	40013800 	.word	0x40013800

08004870 <log_read>:
{
 8004870:	b570      	push	{r4, r5, r6, lr}
	read_index = (read_index + 1) % logger->size;
 8004872:	4d09      	ldr	r5, [pc, #36]	; (8004898 <log_read+0x28>)
 8004874:	8828      	ldrh	r0, [r5, #0]
 8004876:	3001      	adds	r0, #1
 8004878:	4c08      	ldr	r4, [pc, #32]	; (800489c <log_read+0x2c>)
 800487a:	8821      	ldrh	r1, [r4, #0]
 800487c:	f002 f9de 	bl	8006c3c <__aeabi_idivmod>
 8004880:	b289      	uxth	r1, r1
 8004882:	8029      	strh	r1, [r5, #0]
	if(read_index == logger->write_index)
 8004884:	8863      	ldrh	r3, [r4, #2]
 8004886:	4299      	cmp	r1, r3
 8004888:	d003      	beq.n	8004892 <log_read+0x22>
		byte = logger->log[read_index];
 800488a:	46a4      	mov	ip, r4
 800488c:	4461      	add	r1, ip
 800488e:	7908      	ldrb	r0, [r1, #4]
}
 8004890:	bd70      	pop	{r4, r5, r6, pc}
		byte = 0;
 8004892:	2000      	movs	r0, #0
 8004894:	e7fc      	b.n	8004890 <log_read+0x20>
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	200002dc 	.word	0x200002dc
 800489c:	08080100 	.word	0x08080100

080048a0 <log_read_reset>:
	read_index = logger->write_index;
 80048a0:	4b02      	ldr	r3, [pc, #8]	; (80048ac <log_read_reset+0xc>)
 80048a2:	885a      	ldrh	r2, [r3, #2]
 80048a4:	4b02      	ldr	r3, [pc, #8]	; (80048b0 <log_read_reset+0x10>)
 80048a6:	801a      	strh	r2, [r3, #0]
}
 80048a8:	4770      	bx	lr
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	08080100 	.word	0x08080100
 80048b0:	200002dc 	.word	0x200002dc

080048b4 <log_size>:
	return logger->size;
 80048b4:	4b01      	ldr	r3, [pc, #4]	; (80048bc <log_size+0x8>)
 80048b6:	8818      	ldrh	r0, [r3, #0]
}
 80048b8:	4770      	bx	lr
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	08080100 	.word	0x08080100

080048c0 <mem_eeprom_write_word>:
    // }
}


bool mem_eeprom_write_word(uint32_t address, uint32_t data)
{
 80048c0:	b570      	push	{r4, r5, r6, lr}
 80048c2:	0004      	movs	r4, r0
 80048c4:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 80048c6:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <mem_eeprom_write_word+0x44>)
 80048c8:	18c2      	adds	r2, r0, r3
 80048ca:	2380      	movs	r3, #128	; 0x80
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d301      	bcc.n	80048d6 <mem_eeprom_write_word+0x16>
        return false;
 80048d2:	2000      	movs	r0, #0
        FLASH_SR = FLASH_SR_EOP;

    flash_lock_pecr();

    return true;
}
 80048d4:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock_pecr();
 80048d6:	f000 fc27 	bl	8005128 <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 80048da:	4a0b      	ldr	r2, [pc, #44]	; (8004908 <mem_eeprom_write_word+0x48>)
 80048dc:	6813      	ldr	r3, [r2, #0]
 80048de:	490b      	ldr	r1, [pc, #44]	; (800490c <mem_eeprom_write_word+0x4c>)
 80048e0:	400b      	ands	r3, r1
 80048e2:	6013      	str	r3, [r2, #0]
    MMIO32(address) = data;
 80048e4:	6025      	str	r5, [r4, #0]
    while (FLASH_SR & FLASH_SR_BSY);
 80048e6:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <mem_eeprom_write_word+0x50>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	07db      	lsls	r3, r3, #31
 80048ec:	d4fb      	bmi.n	80048e6 <mem_eeprom_write_word+0x26>
    if (FLASH_SR & FLASH_SR_EOP)
 80048ee:	4b08      	ldr	r3, [pc, #32]	; (8004910 <mem_eeprom_write_word+0x50>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	079b      	lsls	r3, r3, #30
 80048f4:	d502      	bpl.n	80048fc <mem_eeprom_write_word+0x3c>
        FLASH_SR = FLASH_SR_EOP;
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <mem_eeprom_write_word+0x50>)
 80048f8:	2202      	movs	r2, #2
 80048fa:	601a      	str	r2, [r3, #0]
    flash_lock_pecr();
 80048fc:	f000 fc20 	bl	8005140 <flash_lock_pecr>
    return true;
 8004900:	2001      	movs	r0, #1
 8004902:	e7e7      	b.n	80048d4 <mem_eeprom_write_word+0x14>
 8004904:	f7f80000 	.word	0xf7f80000
 8004908:	40022004 	.word	0x40022004
 800490c:	fffffeff 	.word	0xfffffeff
 8004910:	40022018 	.word	0x40022018

08004914 <mem_eeprom_write_byte>:

    return true;
}

bool mem_eeprom_write_byte(uint32_t address, uint8_t data)
{
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	0004      	movs	r4, r0
 8004918:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 800491a:	4b11      	ldr	r3, [pc, #68]	; (8004960 <mem_eeprom_write_byte+0x4c>)
 800491c:	18c2      	adds	r2, r0, r3
 800491e:	2380      	movs	r3, #128	; 0x80
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	429a      	cmp	r2, r3
 8004924:	d216      	bcs.n	8004954 <mem_eeprom_write_byte+0x40>
    {
        serial_printf("Mem Log EEPROM Address out of bounds\n");
        return false;
    }

    flash_unlock_pecr();
 8004926:	f000 fbff 	bl	8005128 <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 800492a:	4a0e      	ldr	r2, [pc, #56]	; (8004964 <mem_eeprom_write_byte+0x50>)
 800492c:	6813      	ldr	r3, [r2, #0]
 800492e:	490e      	ldr	r1, [pc, #56]	; (8004968 <mem_eeprom_write_byte+0x54>)
 8004930:	400b      	ands	r3, r1
 8004932:	6013      	str	r3, [r2, #0]

    MMIO8(address) = data;
 8004934:	7025      	strb	r5, [r4, #0]

    while (FLASH_SR & FLASH_SR_BSY);
 8004936:	4b0d      	ldr	r3, [pc, #52]	; (800496c <mem_eeprom_write_byte+0x58>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	07db      	lsls	r3, r3, #31
 800493c:	d4fb      	bmi.n	8004936 <mem_eeprom_write_byte+0x22>
    if (FLASH_SR & FLASH_SR_EOP)
 800493e:	4b0b      	ldr	r3, [pc, #44]	; (800496c <mem_eeprom_write_byte+0x58>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	079b      	lsls	r3, r3, #30
 8004944:	d502      	bpl.n	800494c <mem_eeprom_write_byte+0x38>
        FLASH_SR = FLASH_SR_EOP;
 8004946:	4b09      	ldr	r3, [pc, #36]	; (800496c <mem_eeprom_write_byte+0x58>)
 8004948:	2202      	movs	r2, #2
 800494a:	601a      	str	r2, [r3, #0]

    flash_lock_pecr();
 800494c:	f000 fbf8 	bl	8005140 <flash_lock_pecr>

    return true;
 8004950:	2001      	movs	r0, #1
}
 8004952:	bd70      	pop	{r4, r5, r6, pc}
        serial_printf("Mem Log EEPROM Address out of bounds\n");
 8004954:	4806      	ldr	r0, [pc, #24]	; (8004970 <mem_eeprom_write_byte+0x5c>)
 8004956:	f7ff ff73 	bl	8004840 <serial_printf>
        return false;
 800495a:	2000      	movs	r0, #0
 800495c:	e7f9      	b.n	8004952 <mem_eeprom_write_byte+0x3e>
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	f7f80000 	.word	0xf7f80000
 8004964:	40022004 	.word	0x40022004
 8004968:	fffffeff 	.word	0xfffffeff
 800496c:	40022018 	.word	0x40022018
 8004970:	08006e3c 	.word	0x08006e3c

08004974 <mem_flash_erase_page>:


bool mem_flash_erase_page(uint32_t address)
{
 8004974:	b510      	push	{r4, lr}
 8004976:	0004      	movs	r4, r0
    bool result = false;

    // Check page aligned
    if (address & 0x7F)
 8004978:	0643      	lsls	r3, r0, #25
 800497a:	d002      	beq.n	8004982 <mem_flash_erase_page+0xe>
        return false; 
 800497c:	2400      	movs	r4, #0

    flash_unlock();
    result = mem_flash_do_page_erase(address);
    flash_lock();
    return result;
}
 800497e:	0020      	movs	r0, r4
 8004980:	bd10      	pop	{r4, pc}
    flash_unlock();
 8004982:	f000 fc01 	bl	8005188 <flash_unlock>
    result = mem_flash_do_page_erase(address);
 8004986:	0020      	movs	r0, r4
 8004988:	f002 f96e 	bl	8006c68 <__mem_flash_do_page_erase_veneer>
 800498c:	0004      	movs	r4, r0
    flash_lock();
 800498e:	f000 fc03 	bl	8005198 <flash_lock>
    return result;
 8004992:	e7f4      	b.n	800497e <mem_flash_erase_page+0xa>

08004994 <mem_flash_write_half_page>:

bool mem_flash_write_half_page(uint32_t address, uint32_t *data)
{
 8004994:	b570      	push	{r4, r5, r6, lr}
 8004996:	0004      	movs	r4, r0
 8004998:	000d      	movs	r5, r1
    bool result = false;

    if ((uint32_t)address & 0x3F)
 800499a:	0683      	lsls	r3, r0, #26
 800499c:	d002      	beq.n	80049a4 <mem_flash_write_half_page+0x10>
        return false; //not half-page aligned
 800499e:	2400      	movs	r4, #0

    flash_unlock();
    result = mem_flash_do_write_half_page(address, data);
    flash_lock();
    return result;
}
 80049a0:	0020      	movs	r0, r4
 80049a2:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock();
 80049a4:	f000 fbf0 	bl	8005188 <flash_unlock>
    result = mem_flash_do_write_half_page(address, data);
 80049a8:	0029      	movs	r1, r5
 80049aa:	0020      	movs	r0, r4
 80049ac:	f002 f964 	bl	8006c78 <__mem_flash_do_write_half_page_veneer>
 80049b0:	0004      	movs	r4, r0
    flash_lock();
 80049b2:	f000 fbf1 	bl	8005198 <flash_lock>
    return result;
 80049b6:	e7f3      	b.n	80049a0 <mem_flash_write_half_page+0xc>

080049b8 <_atoi>:
    return (ch >= '0') && (ch <= '9');
}

// internal ASCII string to uint32_t conversion
static uint32_t _atoi(const char **str)
{
 80049b8:	0001      	movs	r1, r0
    uint32_t i = 0U;
 80049ba:	2000      	movs	r0, #0
    while (_is_digit(**str))
 80049bc:	680a      	ldr	r2, [r1, #0]
 80049be:	7813      	ldrb	r3, [r2, #0]
    return (ch >= '0') && (ch <= '9');
 80049c0:	3b30      	subs	r3, #48	; 0x30
 80049c2:	b2db      	uxtb	r3, r3
    while (_is_digit(**str))
 80049c4:	2b09      	cmp	r3, #9
 80049c6:	d808      	bhi.n	80049da <_atoi+0x22>
    {
        i = i * 10U + (uint32_t)(*((*str)++) - '0');
 80049c8:	0083      	lsls	r3, r0, #2
 80049ca:	181b      	adds	r3, r3, r0
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	1c50      	adds	r0, r2, #1
 80049d0:	6008      	str	r0, [r1, #0]
 80049d2:	7810      	ldrb	r0, [r2, #0]
 80049d4:	18c0      	adds	r0, r0, r3
 80049d6:	3830      	subs	r0, #48	; 0x30
 80049d8:	e7f0      	b.n	80049bc <_atoi+0x4>
    }
    return i;
}
 80049da:	4770      	bx	lr

080049dc <_ntoa_format>:

// internal itoa format
static uint32_t _ntoa_format(out_fct_type out, uint32_t value, uint32_t base, uint32_t width, bool negative)
{
 80049dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049de:	46d6      	mov	lr, sl
 80049e0:	464f      	mov	r7, r9
 80049e2:	4646      	mov	r6, r8
 80049e4:	b5c0      	push	{r6, r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	4680      	mov	r8, r0
 80049ea:	000c      	movs	r4, r1
 80049ec:	0015      	movs	r5, r2
 80049ee:	469a      	mov	sl, r3
 80049f0:	ab10      	add	r3, sp, #64	; 0x40
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	4699      	mov	r9, r3
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    uint32_t len = 0;
 80049f6:	2600      	movs	r6, #0
 80049f8:	e00e      	b.n	8004a18 <_ntoa_format+0x3c>

    // Digits to char
    do
    {
        const char digit = (char)(value % base);
        buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 80049fa:	3130      	adds	r1, #48	; 0x30
 80049fc:	b2c9      	uxtb	r1, r1
 80049fe:	1c77      	adds	r7, r6, #1
 8004a00:	466b      	mov	r3, sp
 8004a02:	5599      	strb	r1, [r3, r6]
        value /= base;
 8004a04:	0029      	movs	r1, r5
 8004a06:	0020      	movs	r0, r4
 8004a08:	f001 ffa8 	bl	800695c <__udivsi3>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004a0c:	42ac      	cmp	r4, r5
 8004a0e:	d311      	bcc.n	8004a34 <_ntoa_format+0x58>
 8004a10:	2f1f      	cmp	r7, #31
 8004a12:	d80f      	bhi.n	8004a34 <_ntoa_format+0x58>
        buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 8004a14:	003e      	movs	r6, r7
        value /= base;
 8004a16:	0004      	movs	r4, r0
        const char digit = (char)(value % base);
 8004a18:	0029      	movs	r1, r5
 8004a1a:	0020      	movs	r0, r4
 8004a1c:	f002 f824 	bl	8006a68 <__aeabi_uidivmod>
 8004a20:	b2c9      	uxtb	r1, r1
        buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 8004a22:	2909      	cmp	r1, #9
 8004a24:	d9e9      	bls.n	80049fa <_ntoa_format+0x1e>
 8004a26:	3137      	adds	r1, #55	; 0x37
 8004a28:	b2c9      	uxtb	r1, r1
 8004a2a:	e7e8      	b.n	80049fe <_ntoa_format+0x22>

    // pad leading zeros
    while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
    {
        buf[len++] = '0';
 8004a2c:	2330      	movs	r3, #48	; 0x30
 8004a2e:	466a      	mov	r2, sp
 8004a30:	55d3      	strb	r3, [r2, r7]
 8004a32:	3701      	adds	r7, #1
    while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004a34:	4557      	cmp	r7, sl
 8004a36:	d201      	bcs.n	8004a3c <_ntoa_format+0x60>
 8004a38:	2f1f      	cmp	r7, #31
 8004a3a:	d9f7      	bls.n	8004a2c <_ntoa_format+0x50>
    }

    // Base specifier
    if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004a3c:	2d10      	cmp	r5, #16
 8004a3e:	d016      	beq.n	8004a6e <_ntoa_format+0x92>
    {
        buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004a40:	2d02      	cmp	r5, #2
 8004a42:	d01b      	beq.n	8004a7c <_ntoa_format+0xa0>
    {
        buf[len++] = 'b';
    }
    if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004a44:	2d10      	cmp	r5, #16
 8004a46:	d020      	beq.n	8004a8a <_ntoa_format+0xae>
 8004a48:	2d02      	cmp	r5, #2
 8004a4a:	d01e      	beq.n	8004a8a <_ntoa_format+0xae>
    {
        buf[len++] = '0';
    }

    if (negative && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004a4c:	464b      	mov	r3, r9
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d005      	beq.n	8004a5e <_ntoa_format+0x82>
 8004a52:	2f1f      	cmp	r7, #31
 8004a54:	d803      	bhi.n	8004a5e <_ntoa_format+0x82>
    {
        buf[len++] = '-';
 8004a56:	232d      	movs	r3, #45	; 0x2d
 8004a58:	466a      	mov	r2, sp
 8004a5a:	55d3      	strb	r3, [r2, r7]
 8004a5c:	3701      	adds	r7, #1
    }

    // reverse string and write out
    uint32_t i = len;
 8004a5e:	003c      	movs	r4, r7
    while (i)
 8004a60:	2c00      	cmp	r4, #0
 8004a62:	d019      	beq.n	8004a98 <_ntoa_format+0xbc>
    {
        out(buf[--i]);
 8004a64:	3c01      	subs	r4, #1
 8004a66:	466b      	mov	r3, sp
 8004a68:	5d18      	ldrb	r0, [r3, r4]
 8004a6a:	47c0      	blx	r8
 8004a6c:	e7f8      	b.n	8004a60 <_ntoa_format+0x84>
    if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004a6e:	2f1f      	cmp	r7, #31
 8004a70:	d8e6      	bhi.n	8004a40 <_ntoa_format+0x64>
        buf[len++] = 'X';
 8004a72:	2358      	movs	r3, #88	; 0x58
 8004a74:	466a      	mov	r2, sp
 8004a76:	55d3      	strb	r3, [r2, r7]
 8004a78:	3701      	adds	r7, #1
 8004a7a:	e7e3      	b.n	8004a44 <_ntoa_format+0x68>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004a7c:	2f1f      	cmp	r7, #31
 8004a7e:	d8e1      	bhi.n	8004a44 <_ntoa_format+0x68>
        buf[len++] = 'b';
 8004a80:	2362      	movs	r3, #98	; 0x62
 8004a82:	466a      	mov	r2, sp
 8004a84:	55d3      	strb	r3, [r2, r7]
 8004a86:	3701      	adds	r7, #1
 8004a88:	e7dc      	b.n	8004a44 <_ntoa_format+0x68>
    if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004a8a:	2f1f      	cmp	r7, #31
 8004a8c:	d8de      	bhi.n	8004a4c <_ntoa_format+0x70>
        buf[len++] = '0';
 8004a8e:	2330      	movs	r3, #48	; 0x30
 8004a90:	466a      	mov	r2, sp
 8004a92:	55d3      	strb	r3, [r2, r7]
 8004a94:	3701      	adds	r7, #1
 8004a96:	e7d9      	b.n	8004a4c <_ntoa_format+0x70>
    }
    return len;
}
 8004a98:	0038      	movs	r0, r7
 8004a9a:	b008      	add	sp, #32
 8004a9c:	bce0      	pop	{r5, r6, r7}
 8004a9e:	46ba      	mov	sl, r7
 8004aa0:	46b1      	mov	r9, r6
 8004aa2:	46a8      	mov	r8, r5
 8004aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004aa8 <fnprintf>:

uint32_t fnprintf(out_fct_type out, const char *format, va_list va)
{
 8004aa8:	b570      	push	{r4, r5, r6, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	0005      	movs	r5, r0
 8004aae:	9103      	str	r1, [sp, #12]
 8004ab0:	9202      	str	r2, [sp, #8]
    uint32_t width;
    uint32_t idx = 0U;
 8004ab2:	2400      	movs	r4, #0

    while (*format)
 8004ab4:	e004      	b.n	8004ac0 <fnprintf+0x18>
            format++;
        }
        else
        {
            // Just print char
            out(*format);
 8004ab6:	47a8      	blx	r5
            idx++;
 8004ab8:	3401      	adds	r4, #1
            format++;
 8004aba:	9b03      	ldr	r3, [sp, #12]
 8004abc:	3301      	adds	r3, #1
 8004abe:	9303      	str	r3, [sp, #12]
    while (*format)
 8004ac0:	9b03      	ldr	r3, [sp, #12]
 8004ac2:	7818      	ldrb	r0, [r3, #0]
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d100      	bne.n	8004aca <fnprintf+0x22>
 8004ac8:	e08c      	b.n	8004be4 <fnprintf+0x13c>
        if (*format == '%')
 8004aca:	2825      	cmp	r0, #37	; 0x25
 8004acc:	d1f3      	bne.n	8004ab6 <fnprintf+0xe>
            format++;
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	9203      	str	r2, [sp, #12]
            continue;
        }

        // evaluate width field
        width = 0U;
        if (_is_digit(*format))
 8004ad2:	785b      	ldrb	r3, [r3, #1]
    return (ch >= '0') && (ch <= '9');
 8004ad4:	3b30      	subs	r3, #48	; 0x30
 8004ad6:	b2db      	uxtb	r3, r3
        if (_is_digit(*format))
 8004ad8:	2b09      	cmp	r3, #9
 8004ada:	d90b      	bls.n	8004af4 <fnprintf+0x4c>
        width = 0U;
 8004adc:	2300      	movs	r3, #0
        {
            width = _atoi(&format);
        }

        // evaluate specifier
        switch (*format)
 8004ade:	9a03      	ldr	r2, [sp, #12]
 8004ae0:	7810      	ldrb	r0, [r2, #0]
 8004ae2:	0002      	movs	r2, r0
 8004ae4:	3a25      	subs	r2, #37	; 0x25
 8004ae6:	b2d1      	uxtb	r1, r2
 8004ae8:	2953      	cmp	r1, #83	; 0x53
 8004aea:	d875      	bhi.n	8004bd8 <fnprintf+0x130>
 8004aec:	008a      	lsls	r2, r1, #2
 8004aee:	493f      	ldr	r1, [pc, #252]	; (8004bec <fnprintf+0x144>)
 8004af0:	588a      	ldr	r2, [r1, r2]
 8004af2:	4697      	mov	pc, r2
            width = _atoi(&format);
 8004af4:	a803      	add	r0, sp, #12
 8004af6:	f7ff ff5f 	bl	80049b8 <_atoi>
 8004afa:	0003      	movs	r3, r0
 8004afc:	e7ef      	b.n	8004ade <fnprintf+0x36>
        case 'o':
        case 'b':
        {
            // set the base
            uint32_t base;
            if (*format == 'x' || *format == 'X')
 8004afe:	2878      	cmp	r0, #120	; 0x78
 8004b00:	d009      	beq.n	8004b16 <fnprintf+0x6e>
 8004b02:	2858      	cmp	r0, #88	; 0x58
 8004b04:	d01d      	beq.n	8004b42 <fnprintf+0x9a>
            {
                base = 16U;
            }
            else if (*format == 'o')
 8004b06:	286f      	cmp	r0, #111	; 0x6f
 8004b08:	d01d      	beq.n	8004b46 <fnprintf+0x9e>
            {
                base = 8U;
            }
            else if (*format == 'b')
 8004b0a:	2862      	cmp	r0, #98	; 0x62
 8004b0c:	d001      	beq.n	8004b12 <fnprintf+0x6a>
            {
                base = 2U;
            }
            else
            {
                base = 10U;
 8004b0e:	220a      	movs	r2, #10
 8004b10:	e002      	b.n	8004b18 <fnprintf+0x70>
                base = 2U;
 8004b12:	2202      	movs	r2, #2
 8004b14:	e000      	b.n	8004b18 <fnprintf+0x70>
                base = 16U;
 8004b16:	2210      	movs	r2, #16
            }

            // convert integer
            if ((*format == 'i') || (*format == 'd'))
 8004b18:	2869      	cmp	r0, #105	; 0x69
 8004b1a:	d001      	beq.n	8004b20 <fnprintf+0x78>
 8004b1c:	2864      	cmp	r0, #100	; 0x64
 8004b1e:	d114      	bne.n	8004b4a <fnprintf+0xa2>
            {
                int32_t val = (int32_t)va_arg(va, int);
 8004b20:	9902      	ldr	r1, [sp, #8]
 8004b22:	1d08      	adds	r0, r1, #4
 8004b24:	9002      	str	r0, [sp, #8]
 8004b26:	6808      	ldr	r0, [r1, #0]
                idx += _ntoa_format(out, (val < 0)? (0-val) : val, base, width, (val < 0)? true : false);
 8004b28:	17c6      	asrs	r6, r0, #31
 8004b2a:	1981      	adds	r1, r0, r6
 8004b2c:	4071      	eors	r1, r6
 8004b2e:	0fc0      	lsrs	r0, r0, #31
 8004b30:	9000      	str	r0, [sp, #0]
 8004b32:	0028      	movs	r0, r5
 8004b34:	f7ff ff52 	bl	80049dc <_ntoa_format>
 8004b38:	1824      	adds	r4, r4, r0
            }
            else
            {
                idx += _ntoa_format(out, va_arg(va, int), base, width, false);
            }
            format++;
 8004b3a:	9b03      	ldr	r3, [sp, #12]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	9303      	str	r3, [sp, #12]
            break;
 8004b40:	e7be      	b.n	8004ac0 <fnprintf+0x18>
                base = 16U;
 8004b42:	2210      	movs	r2, #16
 8004b44:	e7e8      	b.n	8004b18 <fnprintf+0x70>
                base = 8U;
 8004b46:	2208      	movs	r2, #8
 8004b48:	e7e6      	b.n	8004b18 <fnprintf+0x70>
                idx += _ntoa_format(out, va_arg(va, int), base, width, false);
 8004b4a:	9902      	ldr	r1, [sp, #8]
 8004b4c:	1d08      	adds	r0, r1, #4
 8004b4e:	9002      	str	r0, [sp, #8]
 8004b50:	6809      	ldr	r1, [r1, #0]
 8004b52:	2000      	movs	r0, #0
 8004b54:	9000      	str	r0, [sp, #0]
 8004b56:	0028      	movs	r0, r5
 8004b58:	f7ff ff40 	bl	80049dc <_ntoa_format>
 8004b5c:	1824      	adds	r4, r4, r0
 8004b5e:	e7ec      	b.n	8004b3a <fnprintf+0x92>
        }

        case 'c':
        {
            out((char)va_arg(va, int));
 8004b60:	9b02      	ldr	r3, [sp, #8]
 8004b62:	1d1a      	adds	r2, r3, #4
 8004b64:	9202      	str	r2, [sp, #8]
 8004b66:	7818      	ldrb	r0, [r3, #0]
 8004b68:	47a8      	blx	r5
            idx++;
 8004b6a:	3401      	adds	r4, #1
            format++;
 8004b6c:	9b03      	ldr	r3, [sp, #12]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	9303      	str	r3, [sp, #12]
            break;
 8004b72:	e7a5      	b.n	8004ac0 <fnprintf+0x18>
        }

        case 's':
        {
            const char *p = va_arg(va, char *);
 8004b74:	9b02      	ldr	r3, [sp, #8]
 8004b76:	1d1a      	adds	r2, r3, #4
 8004b78:	9202      	str	r2, [sp, #8]
 8004b7a:	681e      	ldr	r6, [r3, #0]
    for (s = str; *s && maxsize--; ++s)
 8004b7c:	0033      	movs	r3, r6
 8004b7e:	2280      	movs	r2, #128	; 0x80
 8004b80:	00d2      	lsls	r2, r2, #3
 8004b82:	e001      	b.n	8004b88 <fnprintf+0xe0>
 8004b84:	3301      	adds	r3, #1
 8004b86:	000a      	movs	r2, r1
 8004b88:	7819      	ldrb	r1, [r3, #0]
 8004b8a:	2900      	cmp	r1, #0
 8004b8c:	d002      	beq.n	8004b94 <fnprintf+0xec>
 8004b8e:	1e51      	subs	r1, r2, #1
 8004b90:	2a00      	cmp	r2, #0
 8004b92:	d1f7      	bne.n	8004b84 <fnprintf+0xdc>
            uint32_t l = _strnlen_s(p, PRINTF_MAX_STR_LEN);

            // string output
            while (*p != 0)
 8004b94:	7830      	ldrb	r0, [r6, #0]
 8004b96:	2800      	cmp	r0, #0
 8004b98:	d003      	beq.n	8004ba2 <fnprintf+0xfa>
            {
                out(*(p++));
 8004b9a:	3601      	adds	r6, #1
 8004b9c:	47a8      	blx	r5
                idx++;
 8004b9e:	3401      	adds	r4, #1
 8004ba0:	e7f8      	b.n	8004b94 <fnprintf+0xec>
            }
            format++;
 8004ba2:	9b03      	ldr	r3, [sp, #12]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	9303      	str	r3, [sp, #12]
            break;
 8004ba8:	e78a      	b.n	8004ac0 <fnprintf+0x18>
        }

        case 'p':
        {
            width = sizeof(void *) * 2U;
            idx += _ntoa_format(out, (int32_t)((uintptr_t)va_arg(va, void *)), 16U, width, false);
 8004baa:	9b02      	ldr	r3, [sp, #8]
 8004bac:	1d1a      	adds	r2, r3, #4
 8004bae:	9202      	str	r2, [sp, #8]
 8004bb0:	6819      	ldr	r1, [r3, #0]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	2210      	movs	r2, #16
 8004bba:	0028      	movs	r0, r5
 8004bbc:	f7ff ff0e 	bl	80049dc <_ntoa_format>
 8004bc0:	1824      	adds	r4, r4, r0
            format++;
 8004bc2:	9b03      	ldr	r3, [sp, #12]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	9303      	str	r3, [sp, #12]
            break;
 8004bc8:	e77a      	b.n	8004ac0 <fnprintf+0x18>
        }

        case '%':
        {
            out('%');
 8004bca:	2025      	movs	r0, #37	; 0x25
 8004bcc:	47a8      	blx	r5
            idx++;
 8004bce:	3401      	adds	r4, #1
            format++;
 8004bd0:	9b03      	ldr	r3, [sp, #12]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	9303      	str	r3, [sp, #12]
            break;
 8004bd6:	e773      	b.n	8004ac0 <fnprintf+0x18>
        }

        default:
        {
            out(*format);
 8004bd8:	47a8      	blx	r5
            idx++;
 8004bda:	3401      	adds	r4, #1
            format++;
 8004bdc:	9b03      	ldr	r3, [sp, #12]
 8004bde:	3301      	adds	r3, #1
 8004be0:	9303      	str	r3, [sp, #12]
            break;
 8004be2:	e76d      	b.n	8004ac0 <fnprintf+0x18>
        }
        }
    }
    // return written chars without terminating \0
    return idx;
}
 8004be4:	0020      	movs	r0, r4
 8004be6:	b004      	add	sp, #16
 8004be8:	bd70      	pop	{r4, r5, r6, pc}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	08006e64 	.word	0x08006e64

08004bf0 <spi_read_single>:
 * 
 * @param reg Register to read
 * @retval Value read from register
 */
static uint8_t spi_read_single(uint8_t reg)
{
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	0004      	movs	r4, r0
  spi_chip_select();
 8004bf4:	25a0      	movs	r5, #160	; 0xa0
 8004bf6:	05ed      	lsls	r5, r5, #23
 8004bf8:	2140      	movs	r1, #64	; 0x40
 8004bfa:	0028      	movs	r0, r5
 8004bfc:	f000 fad6 	bl	80051ac <gpio_clear>
  timers_delay_microseconds(1);
 8004c00:	2001      	movs	r0, #1
 8004c02:	f000 f953 	bl	8004eac <timers_delay_microseconds>

  spi_xfer(RFM_SPI, reg);                   
 8004c06:	b2a1      	uxth	r1, r4
 8004c08:	4c08      	ldr	r4, [pc, #32]	; (8004c2c <spi_read_single+0x3c>)
 8004c0a:	0020      	movs	r0, r4
 8004c0c:	f000 fccc 	bl	80055a8 <spi_xfer>
  uint8_t in =  spi_xfer(RFM_SPI, 0x00);                   
 8004c10:	2100      	movs	r1, #0
 8004c12:	0020      	movs	r0, r4
 8004c14:	f000 fcc8 	bl	80055a8 <spi_xfer>
 8004c18:	b2c4      	uxtb	r4, r0
    
  spi_chip_deselect(); 
 8004c1a:	2140      	movs	r1, #64	; 0x40
 8004c1c:	0028      	movs	r0, r5
 8004c1e:	f000 fac3 	bl	80051a8 <gpio_set>
  timers_delay_microseconds(1);
 8004c22:	2001      	movs	r0, #1
 8004c24:	f000 f942 	bl	8004eac <timers_delay_microseconds>

  return in;
}
 8004c28:	0020      	movs	r0, r4
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}
 8004c2c:	40003800 	.word	0x40003800

08004c30 <spi_write_single>:
  spi_chip_deselect();     
  timers_delay_microseconds(1);
}

static void spi_write_single(uint8_t reg, uint8_t data)
{
 8004c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c32:	0005      	movs	r5, r0
 8004c34:	000e      	movs	r6, r1
  // Set MSB for write operation
  uint8_t cmd = 0x80 | reg;
 8004c36:	2480      	movs	r4, #128	; 0x80
 8004c38:	4264      	negs	r4, r4
 8004c3a:	4304      	orrs	r4, r0
 8004c3c:	b2e4      	uxtb	r4, r4

  spi_chip_select();
 8004c3e:	27a0      	movs	r7, #160	; 0xa0
 8004c40:	05ff      	lsls	r7, r7, #23
 8004c42:	2140      	movs	r1, #64	; 0x40
 8004c44:	0038      	movs	r0, r7
 8004c46:	f000 fab1 	bl	80051ac <gpio_clear>
  timers_delay_microseconds(1);
 8004c4a:	2001      	movs	r0, #1
 8004c4c:	f000 f92e 	bl	8004eac <timers_delay_microseconds>

  spi_xfer(RFM_SPI, cmd);                 
 8004c50:	b2a1      	uxth	r1, r4
 8004c52:	4c15      	ldr	r4, [pc, #84]	; (8004ca8 <spi_write_single+0x78>)
 8004c54:	0020      	movs	r0, r4
 8004c56:	f000 fca7 	bl	80055a8 <spi_xfer>
  spi_xfer(RFM_SPI, data);             
 8004c5a:	b2b1      	uxth	r1, r6
 8004c5c:	0020      	movs	r0, r4
 8004c5e:	f000 fca3 	bl	80055a8 <spi_xfer>

  spi_chip_deselect(); 
 8004c62:	2140      	movs	r1, #64	; 0x40
 8004c64:	0038      	movs	r0, r7
 8004c66:	f000 fa9f 	bl	80051a8 <gpio_set>
  timers_delay_microseconds(1);
 8004c6a:	2001      	movs	r0, #1
 8004c6c:	f000 f91e 	bl	8004eac <timers_delay_microseconds>

  uint8_t curr_data = spi_read_single(reg);
 8004c70:	0028      	movs	r0, r5
 8004c72:	f7ff ffbd 	bl	8004bf0 <spi_read_single>
 8004c76:	0004      	movs	r4, r0

  // log_printf("%02x : %02x\n", reg, data);

  if(reg == RFM_REG_12_IRQ_FLAGS)    
 8004c78:	2d12      	cmp	r5, #18
 8004c7a:	d013      	beq.n	8004ca4 <spi_write_single+0x74>
    return;

  TIMEOUT(10000, "RFM SPI Write", ((reg << 16) | data), (curr_data == data), ;, timers_delay_microseconds(100); curr_data = spi_read_single(reg););
 8004c7c:	f000 f968 	bl	8004f50 <timeout_init>
 8004c80:	042a      	lsls	r2, r5, #16
 8004c82:	4332      	orrs	r2, r6
 8004c84:	4909      	ldr	r1, [pc, #36]	; (8004cac <spi_write_single+0x7c>)
 8004c86:	480a      	ldr	r0, [pc, #40]	; (8004cb0 <spi_write_single+0x80>)
 8004c88:	f000 f970 	bl	8004f6c <timeout>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	d109      	bne.n	8004ca4 <spi_write_single+0x74>
 8004c90:	42b4      	cmp	r4, r6
 8004c92:	d007      	beq.n	8004ca4 <spi_write_single+0x74>
 8004c94:	2064      	movs	r0, #100	; 0x64
 8004c96:	f000 f909 	bl	8004eac <timers_delay_microseconds>
 8004c9a:	0028      	movs	r0, r5
 8004c9c:	f7ff ffa8 	bl	8004bf0 <spi_read_single>
 8004ca0:	0004      	movs	r4, r0
 8004ca2:	e7ed      	b.n	8004c80 <spi_write_single+0x50>

  // log_printf("%02x : %02x : %02x\n", reg, data, curr_data);
}
 8004ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	40003800 	.word	0x40003800
 8004cac:	08006fb4 	.word	0x08006fb4
 8004cb0:	00002710 	.word	0x00002710

08004cb4 <exti4_15_isr>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void exti4_15_isr(void)
{
 8004cb4:	b570      	push	{r4, r5, r6, lr}
  uint16_t timer = timers_micros();
 8004cb6:	f000 f90f 	bl	8004ed8 <timers_micros>
  
  exti_reset_request(RFM_IO_0_EXTI);
 8004cba:	2480      	movs	r4, #128	; 0x80
 8004cbc:	00e4      	lsls	r4, r4, #3
 8004cbe:	0020      	movs	r0, r4
 8004cc0:	f000 fa16 	bl	80050f0 <exti_reset_request>
  exti_reset_request(RFM_IO_0_EXTI);
 8004cc4:	0020      	movs	r0, r4
 8004cc6:	f000 fa13 	bl	80050f0 <exti_reset_request>

  // Store IRQ Flags
  packets_buf[packets_head].flags = get_irq();
 8004cca:	4d1b      	ldr	r5, [pc, #108]	; (8004d38 <exti4_15_isr+0x84>)
 8004ccc:	782e      	ldrb	r6, [r5, #0]
  return spi_read_single(RFM_REG_12_IRQ_FLAGS);
 8004cce:	2012      	movs	r0, #18
 8004cd0:	f7ff ff8e 	bl	8004bf0 <spi_read_single>
  packets_buf[packets_head].flags = get_irq();
 8004cd4:	4c19      	ldr	r4, [pc, #100]	; (8004d3c <exti4_15_isr+0x88>)
 8004cd6:	0073      	lsls	r3, r6, #1
 8004cd8:	199b      	adds	r3, r3, r6
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	18e3      	adds	r3, r4, r3
 8004cde:	7418      	strb	r0, [r3, #16]
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 8004ce0:	21ff      	movs	r1, #255	; 0xff
 8004ce2:	2012      	movs	r0, #18
 8004ce4:	f7ff ffa4 	bl	8004c30 <spi_write_single>
 8004ce8:	21ff      	movs	r1, #255	; 0xff
 8004cea:	2012      	movs	r0, #18
 8004cec:	f7ff ffa0 	bl	8004c30 <spi_write_single>
  clear_irq(RFM_IRQ_ALL);
  clear_irq(RFM_IRQ_ALL);

  // Get signal strength
  packets_buf[packets_head].rssi = spi_read_single(RFM_REG_1A_PKT_RSSI_VALUE);
 8004cf0:	201a      	movs	r0, #26
 8004cf2:	f7ff ff7d 	bl	8004bf0 <spi_read_single>
 8004cf6:	782a      	ldrb	r2, [r5, #0]
 8004cf8:	b200      	sxth	r0, r0
  packets_buf[packets_head].rssi -= 137;
 8004cfa:	0053      	lsls	r3, r2, #1
 8004cfc:	189b      	adds	r3, r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	18e3      	adds	r3, r4, r3
 8004d02:	3889      	subs	r0, #137	; 0x89
 8004d04:	8298      	strh	r0, [r3, #20]
  packets_buf[packets_head].snr = spi_read_single(RFM_REG_19_PKT_SNR_VALUE) / 4;
 8004d06:	2019      	movs	r0, #25
 8004d08:	f7ff ff72 	bl	8004bf0 <spi_read_single>
 8004d0c:	782b      	ldrb	r3, [r5, #0]
 8004d0e:	005a      	lsls	r2, r3, #1
 8004d10:	18d2      	adds	r2, r2, r3
 8004d12:	00d2      	lsls	r2, r2, #3
 8004d14:	18a4      	adds	r4, r4, r2
 8004d16:	0880      	lsrs	r0, r0, #2
 8004d18:	74a0      	strb	r0, [r4, #18]

  // Check for CRC error
  packets_buf[packets_head].crc_ok = !(packets_buf[packets_head].flags & RFM_IRQ_PAYLOAD_CRC_ERROR);
 8004d1a:	7c22      	ldrb	r2, [r4, #16]
 8004d1c:	0952      	lsrs	r2, r2, #5
 8004d1e:	2101      	movs	r1, #1
 8004d20:	404a      	eors	r2, r1
 8004d22:	2101      	movs	r1, #1
 8004d24:	400a      	ands	r2, r1
 8004d26:	7462      	strb	r2, [r4, #17]

  packets_head = (packets_head + 1) % PACKETS_BUF_SIZE;
 8004d28:	3301      	adds	r3, #1
 8004d2a:	220f      	movs	r2, #15
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	702b      	strb	r3, [r5, #0]

  uint16_t time = timers_micros() - timer;
 8004d30:	f000 f8d2 	bl	8004ed8 <timers_micros>
  // log_printf("ISR %u %u %u\n", time, packets_head, packets_tail);
}
 8004d34:	bd70      	pop	{r4, r5, r6, pc}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	20000460 	.word	0x20000460
 8004d3c:	200002e0 	.word	0x200002e0

08004d40 <test_mem_write_read>:
/*////////////////////////////////////////////////////////////////////////////*/
// Memory tests
/*////////////////////////////////////////////////////////////////////////////*/

void test_mem_write_read(void)
{
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	b082      	sub	sp, #8
    uint32_t eeprom_address = EEPROM_END - EEPROM_PAGE_SIZE;
    uint32_t eeprom_word    = 0x12345678;

    uint32_t flash_address = FLASH_END - FLASH_PAGE_SIZE;
    uint32_t *flash_data   = (uint32_t*)malloc(64); 
 8004d44:	2040      	movs	r0, #64	; 0x40
 8004d46:	f001 fd61 	bl	800680c <malloc>
 8004d4a:	0004      	movs	r4, r0
    flash_data[0] = 0x12345678;
 8004d4c:	4e1e      	ldr	r6, [pc, #120]	; (8004dc8 <test_mem_write_read+0x88>)
 8004d4e:	6006      	str	r6, [r0, #0]
    flash_data[1] = 0x24681234;
 8004d50:	4b1e      	ldr	r3, [pc, #120]	; (8004dcc <test_mem_write_read+0x8c>)
 8004d52:	6043      	str	r3, [r0, #4]

    log_printf("Test Mem Write Read\n\n");
 8004d54:	481e      	ldr	r0, [pc, #120]	; (8004dd0 <test_mem_write_read+0x90>)
 8004d56:	f7ff fd3b 	bl	80047d0 <log_printf>

    log_printf("EEPROM Start: %08x : %08x\n", eeprom_address, MMIO32(eeprom_address));
 8004d5a:	4d1e      	ldr	r5, [pc, #120]	; (8004dd4 <test_mem_write_read+0x94>)
 8004d5c:	682a      	ldr	r2, [r5, #0]
 8004d5e:	0029      	movs	r1, r5
 8004d60:	481d      	ldr	r0, [pc, #116]	; (8004dd8 <test_mem_write_read+0x98>)
 8004d62:	f7ff fd35 	bl	80047d0 <log_printf>
    log_printf("Programming: %08x\n", eeprom_word); mem_eeprom_write_word(eeprom_address, eeprom_word);
 8004d66:	0031      	movs	r1, r6
 8004d68:	481c      	ldr	r0, [pc, #112]	; (8004ddc <test_mem_write_read+0x9c>)
 8004d6a:	f7ff fd31 	bl	80047d0 <log_printf>
 8004d6e:	0031      	movs	r1, r6
 8004d70:	0028      	movs	r0, r5
 8004d72:	f7ff fda5 	bl	80048c0 <mem_eeprom_write_word>
    log_printf("EEPROM End: %08x : %08x\n\n", eeprom_address, MMIO32(eeprom_address));
 8004d76:	682a      	ldr	r2, [r5, #0]
 8004d78:	0029      	movs	r1, r5
 8004d7a:	4819      	ldr	r0, [pc, #100]	; (8004de0 <test_mem_write_read+0xa0>)
 8004d7c:	f7ff fd28 	bl	80047d0 <log_printf>

    log_printf("Flash Erase\n"); mem_flash_erase_page(flash_address);
 8004d80:	4818      	ldr	r0, [pc, #96]	; (8004de4 <test_mem_write_read+0xa4>)
 8004d82:	f7ff fd25 	bl	80047d0 <log_printf>
 8004d86:	4d18      	ldr	r5, [pc, #96]	; (8004de8 <test_mem_write_read+0xa8>)
 8004d88:	0028      	movs	r0, r5
 8004d8a:	f7ff fdf3 	bl	8004974 <mem_flash_erase_page>
    log_printf("Flash Start: %08x : %08x\n%08x : %08x\n", flash_address, MMIO32(flash_address), flash_address+4, MMIO32(flash_address+4));
 8004d8e:	682a      	ldr	r2, [r5, #0]
 8004d90:	4e16      	ldr	r6, [pc, #88]	; (8004dec <test_mem_write_read+0xac>)
 8004d92:	6833      	ldr	r3, [r6, #0]
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	0033      	movs	r3, r6
 8004d98:	0029      	movs	r1, r5
 8004d9a:	4815      	ldr	r0, [pc, #84]	; (8004df0 <test_mem_write_read+0xb0>)
 8004d9c:	f7ff fd18 	bl	80047d0 <log_printf>
    log_printf("Programming %08x %08x\n", flash_data[0], flash_data[1]); mem_flash_write_half_page(flash_address, flash_data);
 8004da0:	6862      	ldr	r2, [r4, #4]
 8004da2:	6821      	ldr	r1, [r4, #0]
 8004da4:	4813      	ldr	r0, [pc, #76]	; (8004df4 <test_mem_write_read+0xb4>)
 8004da6:	f7ff fd13 	bl	80047d0 <log_printf>
 8004daa:	0021      	movs	r1, r4
 8004dac:	0028      	movs	r0, r5
 8004dae:	f7ff fdf1 	bl	8004994 <mem_flash_write_half_page>
    // log_printf("Programming %08x\n", flash_data[1]); mem_flash_write_word(flash_address, flash_data[1]);
    log_printf("Flash End: %08x : %08x\n%08x : %08x\n", flash_address, MMIO32(flash_address), flash_address+4, MMIO32(flash_address+4));
 8004db2:	682a      	ldr	r2, [r5, #0]
 8004db4:	6833      	ldr	r3, [r6, #0]
 8004db6:	9300      	str	r3, [sp, #0]
 8004db8:	0033      	movs	r3, r6
 8004dba:	0029      	movs	r1, r5
 8004dbc:	480e      	ldr	r0, [pc, #56]	; (8004df8 <test_mem_write_read+0xb8>)
 8004dbe:	f7ff fd07 	bl	80047d0 <log_printf>
}
 8004dc2:	b002      	add	sp, #8
 8004dc4:	bd70      	pop	{r4, r5, r6, pc}
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	12345678 	.word	0x12345678
 8004dcc:	24681234 	.word	0x24681234
 8004dd0:	08006fc4 	.word	0x08006fc4
 8004dd4:	080807fc 	.word	0x080807fc
 8004dd8:	08006fdc 	.word	0x08006fdc
 8004ddc:	08006ff8 	.word	0x08006ff8
 8004de0:	0800700c 	.word	0x0800700c
 8004de4:	08007028 	.word	0x08007028
 8004de8:	0800ff80 	.word	0x0800ff80
 8004dec:	0800ff84 	.word	0x0800ff84
 8004df0:	08007038 	.word	0x08007038
 8004df4:	08007060 	.word	0x08007060
 8004df8:	08007078 	.word	0x08007078

08004dfc <flash_led>:
    serial_printf("Checksum value: %8x %8x\n", crc, ~crc);
}


void flash_led(uint16_t milliseconds, uint8_t num_flashes)
{
 8004dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dfe:	46c6      	mov	lr, r8
 8004e00:	b500      	push	{lr}
 8004e02:	0005      	movs	r5, r0
 8004e04:	4688      	mov	r8, r1
	gpio_mode_setup(LED_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, LED);
 8004e06:	2680      	movs	r6, #128	; 0x80
 8004e08:	0076      	lsls	r6, r6, #1
 8004e0a:	4c13      	ldr	r4, [pc, #76]	; (8004e58 <flash_led+0x5c>)
 8004e0c:	0033      	movs	r3, r6
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2101      	movs	r1, #1
 8004e12:	0020      	movs	r0, r4
 8004e14:	f000 f9cd 	bl	80051b2 <gpio_mode_setup>
	gpio_clear(LED_PORT, LED);
 8004e18:	0031      	movs	r1, r6
 8004e1a:	0020      	movs	r0, r4
 8004e1c:	f000 f9c6 	bl	80051ac <gpio_clear>
	for(uint8_t i = 0; i < num_flashes; i++)
 8004e20:	2400      	movs	r4, #0
 8004e22:	4544      	cmp	r4, r8
 8004e24:	d215      	bcs.n	8004e52 <flash_led+0x56>
	{
		gpio_set(LED_PORT, LED);
 8004e26:	2780      	movs	r7, #128	; 0x80
 8004e28:	007f      	lsls	r7, r7, #1
 8004e2a:	4e0b      	ldr	r6, [pc, #44]	; (8004e58 <flash_led+0x5c>)
 8004e2c:	0039      	movs	r1, r7
 8004e2e:	0030      	movs	r0, r6
 8004e30:	f000 f9ba 	bl	80051a8 <gpio_set>
		timers_delay_milliseconds(milliseconds / 4);
 8004e34:	08a8      	lsrs	r0, r5, #2
 8004e36:	f000 f86d 	bl	8004f14 <timers_delay_milliseconds>
		gpio_clear(LED_PORT, LED);
 8004e3a:	0039      	movs	r1, r7
 8004e3c:	0030      	movs	r0, r6
 8004e3e:	f000 f9b5 	bl	80051ac <gpio_clear>
		timers_delay_milliseconds(3 * milliseconds / 4);
 8004e42:	0068      	lsls	r0, r5, #1
 8004e44:	1828      	adds	r0, r5, r0
 8004e46:	1080      	asrs	r0, r0, #2
 8004e48:	f000 f864 	bl	8004f14 <timers_delay_milliseconds>
	for(uint8_t i = 0; i < num_flashes; i++)
 8004e4c:	3401      	adds	r4, #1
 8004e4e:	b2e4      	uxtb	r4, r4
 8004e50:	e7e7      	b.n	8004e22 <flash_led+0x26>
	}
}
 8004e52:	bc80      	pop	{r7}
 8004e54:	46b8      	mov	r8, r7
 8004e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e58:	50000400 	.word	0x50000400

08004e5c <timers_lptim_init>:
}


// Setup lptim1 as approx. microsecond counter
void timers_lptim_init(void)
{
 8004e5c:	b510      	push	{r4, lr}
    // Input clock is 2.097Mhz
    rcc_set_peripheral_clk_sel(LPTIM1, RCC_CCIPR_LPTIM1SEL_APB);
 8004e5e:	4c10      	ldr	r4, [pc, #64]	; (8004ea0 <timers_lptim_init+0x44>)
 8004e60:	2100      	movs	r1, #0
 8004e62:	0020      	movs	r0, r4
 8004e64:	f000 fb34 	bl	80054d0 <rcc_set_peripheral_clk_sel>
 
    rcc_periph_clock_enable(RCC_LPTIM1);
 8004e68:	480e      	ldr	r0, [pc, #56]	; (8004ea4 <timers_lptim_init+0x48>)
 8004e6a:	f000 fb67 	bl	800553c <rcc_periph_clock_enable>
    
    lptimer_set_internal_clock_source(LPTIM1);
 8004e6e:	0020      	movs	r0, r4
 8004e70:	f000 fa26 	bl	80052c0 <lptimer_set_internal_clock_source>
    lptimer_enable_trigger(LPTIM1, LPTIM_CFGR_TRIGEN_SW);
 8004e74:	2100      	movs	r1, #0
 8004e76:	0020      	movs	r0, r4
 8004e78:	f000 fa18 	bl	80052ac <lptimer_enable_trigger>
    lptimer_set_prescaler(LPTIM1, LPTIM_CFGR_PRESC_2);
 8004e7c:	2180      	movs	r1, #128	; 0x80
 8004e7e:	0089      	lsls	r1, r1, #2
 8004e80:	0020      	movs	r0, r4
 8004e82:	f000 fa0b 	bl	800529c <lptimer_set_prescaler>
    
    lptimer_enable(LPTIM1);
 8004e86:	0020      	movs	r0, r4
 8004e88:	f000 f9fe 	bl	8005288 <lptimer_enable>
    
    lptimer_set_period(LPTIM1, 0xffff);
 8004e8c:	4906      	ldr	r1, [pc, #24]	; (8004ea8 <timers_lptim_init+0x4c>)
 8004e8e:	0020      	movs	r0, r4
 8004e90:	f000 fa14 	bl	80052bc <lptimer_set_period>
    
    lptimer_start_counter(LPTIM1, LPTIM_CR_CNTSTRT);
 8004e94:	2104      	movs	r1, #4
 8004e96:	0020      	movs	r0, r4
 8004e98:	f000 f9fb 	bl	8005292 <lptimer_start_counter>
}
 8004e9c:	bd10      	pop	{r4, pc}
 8004e9e:	46c0      	nop			; (mov r8, r8)
 8004ea0:	40007c00 	.word	0x40007c00
 8004ea4:	0000071f 	.word	0x0000071f
 8004ea8:	0000ffff 	.word	0x0000ffff

08004eac <timers_delay_microseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_microseconds(uint32_t delay_microseconds)
{
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	0004      	movs	r4, r0
    uint32_t curr_time = lptimer_get_counter(LPTIM1);
 8004eb0:	4807      	ldr	r0, [pc, #28]	; (8004ed0 <timers_delay_microseconds+0x24>)
 8004eb2:	f000 f9e6 	bl	8005282 <lptimer_get_counter>
 8004eb6:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_microseconds > 65000)
 8004eb8:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <timers_delay_microseconds+0x28>)
 8004eba:	429c      	cmp	r4, r3
 8004ebc:	d900      	bls.n	8004ec0 <timers_delay_microseconds+0x14>
        delay_microseconds = 65000;
 8004ebe:	001c      	movs	r4, r3

    while (lptimer_get_counter(LPTIM1) - curr_time < delay_microseconds);
 8004ec0:	4803      	ldr	r0, [pc, #12]	; (8004ed0 <timers_delay_microseconds+0x24>)
 8004ec2:	f000 f9de 	bl	8005282 <lptimer_get_counter>
 8004ec6:	1b40      	subs	r0, r0, r5
 8004ec8:	42a0      	cmp	r0, r4
 8004eca:	d3f9      	bcc.n	8004ec0 <timers_delay_microseconds+0x14>
}
 8004ecc:	bd70      	pop	{r4, r5, r6, pc}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	40007c00 	.word	0x40007c00
 8004ed4:	0000fde8 	.word	0x0000fde8

08004ed8 <timers_micros>:
}
*/

// Returns value of microsecond counter
uint16_t timers_micros(void)
{
 8004ed8:	b510      	push	{r4, lr}
    return (uint16_t)lptimer_get_counter(LPTIM1);
 8004eda:	4802      	ldr	r0, [pc, #8]	; (8004ee4 <timers_micros+0xc>)
 8004edc:	f000 f9d1 	bl	8005282 <lptimer_get_counter>
}
 8004ee0:	bd10      	pop	{r4, pc}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	40007c00 	.word	0x40007c00

08004ee8 <timers_tim6_init>:


// Setup TIM6 as millisecond counter. Clocked by APB1
void timers_tim6_init(void)
{
 8004ee8:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_TIM6);
 8004eea:	4808      	ldr	r0, [pc, #32]	; (8004f0c <timers_tim6_init+0x24>)
 8004eec:	f000 fb26 	bl	800553c <rcc_periph_clock_enable>
    timer_disable_counter(TIM6);
 8004ef0:	4c07      	ldr	r4, [pc, #28]	; (8004f10 <timers_tim6_init+0x28>)
 8004ef2:	0020      	movs	r0, r4
 8004ef4:	f000 fb65 	bl	80055c2 <timer_disable_counter>
    timer_set_prescaler(TIM6, (2097 - 1));
 8004ef8:	2183      	movs	r1, #131	; 0x83
 8004efa:	0109      	lsls	r1, r1, #4
 8004efc:	0020      	movs	r0, r4
 8004efe:	f000 fb65 	bl	80055cc <timer_set_prescaler>
    timer_enable_counter(TIM6);
 8004f02:	0020      	movs	r0, r4
 8004f04:	f000 fb58 	bl	80055b8 <timer_enable_counter>
}
 8004f08:	bd10      	pop	{r4, pc}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	00000704 	.word	0x00000704
 8004f10:	40001000 	.word	0x40001000

08004f14 <timers_delay_milliseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_milliseconds(uint32_t delay_milliseconds)
{
 8004f14:	b570      	push	{r4, r5, r6, lr}
 8004f16:	0004      	movs	r4, r0
    uint32_t curr_time = timer_get_counter(TIM6);
 8004f18:	4807      	ldr	r0, [pc, #28]	; (8004f38 <timers_delay_milliseconds+0x24>)
 8004f1a:	f000 fb59 	bl	80055d0 <timer_get_counter>
 8004f1e:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_milliseconds > 65000)
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <timers_delay_milliseconds+0x28>)
 8004f22:	429c      	cmp	r4, r3
 8004f24:	d900      	bls.n	8004f28 <timers_delay_milliseconds+0x14>
        delay_milliseconds = 65000;
 8004f26:	001c      	movs	r4, r3

    while (timer_get_counter(TIM6) - curr_time < delay_milliseconds);
 8004f28:	4803      	ldr	r0, [pc, #12]	; (8004f38 <timers_delay_milliseconds+0x24>)
 8004f2a:	f000 fb51 	bl	80055d0 <timer_get_counter>
 8004f2e:	1b40      	subs	r0, r0, r5
 8004f30:	42a0      	cmp	r0, r4
 8004f32:	d3f9      	bcc.n	8004f28 <timers_delay_milliseconds+0x14>
}
 8004f34:	bd70      	pop	{r4, r5, r6, pc}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	40001000 	.word	0x40001000
 8004f3c:	0000fde8 	.word	0x0000fde8

08004f40 <timers_millis>:

// Returns value of millisecond counter
uint16_t timers_millis(void)
{
 8004f40:	b510      	push	{r4, lr}
    return timer_get_counter(TIM6);
 8004f42:	4802      	ldr	r0, [pc, #8]	; (8004f4c <timers_millis+0xc>)
 8004f44:	f000 fb44 	bl	80055d0 <timer_get_counter>
 8004f48:	b280      	uxth	r0, r0
}
 8004f4a:	bd10      	pop	{r4, pc}
 8004f4c:	40001000 	.word	0x40001000

08004f50 <timeout_init>:
}


// Timout functions
void timeout_init(void)
{
 8004f50:	b510      	push	{r4, lr}
    timeout_counter     = 0; 
 8004f52:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <timeout_init+0x14>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
    // timeout_counter     = 2140483648; 
    timeout_timer       = timers_micros(); 
 8004f58:	f7ff ffbe 	bl	8004ed8 <timers_micros>
 8004f5c:	4b02      	ldr	r3, [pc, #8]	; (8004f68 <timeout_init+0x18>)
 8004f5e:	8018      	strh	r0, [r3, #0]
}
 8004f60:	bd10      	pop	{r4, pc}
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	20000464 	.word	0x20000464
 8004f68:	20000468 	.word	0x20000468

08004f6c <timeout>:

bool timeout(uint32_t time_microseconds, char *msg, uint32_t data)
{
 8004f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	0006      	movs	r6, r0
 8004f72:	9101      	str	r1, [sp, #4]
 8004f74:	0015      	movs	r5, r2
    timeout_counter    += (uint16_t)(timers_micros() - timeout_timer);
 8004f76:	f7ff ffaf 	bl	8004ed8 <timers_micros>
 8004f7a:	4c0c      	ldr	r4, [pc, #48]	; (8004fac <timeout+0x40>)
 8004f7c:	8823      	ldrh	r3, [r4, #0]
 8004f7e:	1ac3      	subs	r3, r0, r3
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	4f0b      	ldr	r7, [pc, #44]	; (8004fb0 <timeout+0x44>)
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	4694      	mov	ip, r2
 8004f88:	4463      	add	r3, ip
 8004f8a:	603b      	str	r3, [r7, #0]
    timeout_timer       = timers_micros();
 8004f8c:	f7ff ffa4 	bl	8004ed8 <timers_micros>
 8004f90:	8020      	strh	r0, [r4, #0]

    // log_printf("%u\n", timeout_counter);

    if(timeout_counter > time_microseconds)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	42b3      	cmp	r3, r6
 8004f96:	d802      	bhi.n	8004f9e <timeout+0x32>
    {
        log_printf("Timeout %s %08X\n", msg, data);
        return true;
    }
    else    
        return false;
 8004f98:	2000      	movs	r0, #0
}
 8004f9a:	b003      	add	sp, #12
 8004f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        log_printf("Timeout %s %08X\n", msg, data);
 8004f9e:	002a      	movs	r2, r5
 8004fa0:	9901      	ldr	r1, [sp, #4]
 8004fa2:	4804      	ldr	r0, [pc, #16]	; (8004fb4 <timeout+0x48>)
 8004fa4:	f7ff fc14 	bl	80047d0 <log_printf>
        return true;
 8004fa8:	2001      	movs	r0, #1
 8004faa:	e7f6      	b.n	8004f9a <timeout+0x2e>
 8004fac:	20000468 	.word	0x20000468
 8004fb0:	20000464 	.word	0x20000464
 8004fb4:	0800709c 	.word	0x0800709c

08004fb8 <set_gpio_for_standby>:

void set_gpio_for_standby(void)
{   
 8004fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    // Common
    // LED
    gpio_mode_setup(LED_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, LED);
 8004fba:	2680      	movs	r6, #128	; 0x80
 8004fbc:	0076      	lsls	r6, r6, #1
 8004fbe:	4c36      	ldr	r4, [pc, #216]	; (8005098 <set_gpio_for_standby+0xe0>)
 8004fc0:	0033      	movs	r3, r6
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2103      	movs	r1, #3
 8004fc6:	0020      	movs	r0, r4
 8004fc8:	f000 f8f3 	bl	80051b2 <gpio_mode_setup>
    gpio_set(LED_PORT, LED);
 8004fcc:	0031      	movs	r1, r6
 8004fce:	0020      	movs	r0, r4
 8004fd0:	f000 f8ea 	bl	80051a8 <gpio_set>

    // Serial Print
    gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, SPF_USART_TX);
 8004fd4:	2380      	movs	r3, #128	; 0x80
 8004fd6:	25a0      	movs	r5, #160	; 0xa0
 8004fd8:	05ed      	lsls	r5, r5, #23
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	2201      	movs	r2, #1
 8004fde:	2100      	movs	r1, #0
 8004fe0:	0028      	movs	r0, r5
 8004fe2:	f000 f8e6 	bl	80051b2 <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE,  SPF_USART_RX);
 8004fe6:	2780      	movs	r7, #128	; 0x80
 8004fe8:	00ff      	lsls	r7, r7, #3
 8004fea:	003b      	movs	r3, r7
 8004fec:	2200      	movs	r2, #0
 8004fee:	2101      	movs	r1, #1
 8004ff0:	0028      	movs	r0, r5
 8004ff2:	f000 f8de 	bl	80051b2 <gpio_mode_setup>
	gpio_set(SPF_USART_RX_PORT, SPF_USART_RX);
 8004ff6:	0039      	movs	r1, r7
 8004ff8:	0028      	movs	r0, r5
 8004ffa:	f000 f8d5 	bl	80051a8 <gpio_set>

    // Batt Sense
    gpio_mode_setup(BATT_SENS_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, BATT_SENS);
 8004ffe:	2301      	movs	r3, #1
 8005000:	2200      	movs	r2, #0
 8005002:	2103      	movs	r1, #3
 8005004:	0028      	movs	r0, r5
 8005006:	f000 f8d4 	bl	80051b2 <gpio_mode_setup>
    
    // RFM
    // SPI
    gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_ANALOG,   GPIO_PUPD_NONE,       RFM_SPI_MISO);
 800500a:	2380      	movs	r3, #128	; 0x80
 800500c:	01db      	lsls	r3, r3, #7
 800500e:	2200      	movs	r2, #0
 8005010:	2103      	movs	r1, #3
 8005012:	0020      	movs	r0, r4
 8005014:	f000 f8cd 	bl	80051b2 <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_SCK_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_SCK);
 8005018:	2380      	movs	r3, #128	; 0x80
 800501a:	019b      	lsls	r3, r3, #6
 800501c:	2202      	movs	r2, #2
 800501e:	2100      	movs	r1, #0
 8005020:	0020      	movs	r0, r4
 8005022:	f000 f8c6 	bl	80051b2 <gpio_mode_setup>
    gpio_mode_setup(RFM_SPI_MOSI_PORT,  GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_MOSI);
 8005026:	2380      	movs	r3, #128	; 0x80
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	2202      	movs	r2, #2
 800502c:	2100      	movs	r1, #0
 800502e:	0020      	movs	r0, r4
 8005030:	f000 f8bf 	bl	80051b2 <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_NSS_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_SPI_NSS);
 8005034:	2340      	movs	r3, #64	; 0x40
 8005036:	2201      	movs	r2, #1
 8005038:	2100      	movs	r1, #0
 800503a:	0028      	movs	r0, r5
 800503c:	f000 f8b9 	bl	80051b2 <gpio_mode_setup>
    gpio_mode_setup(RFM_RESET_PORT,     GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_RESET);
 8005040:	2310      	movs	r3, #16
 8005042:	2201      	movs	r2, #1
 8005044:	2100      	movs	r1, #0
 8005046:	0028      	movs	r0, r5
 8005048:	f000 f8b3 	bl	80051b2 <gpio_mode_setup>

    // DIO
    gpio_mode_setup(RFM_IO_0_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_0);
 800504c:	003b      	movs	r3, r7
 800504e:	2200      	movs	r2, #0
 8005050:	2103      	movs	r1, #3
 8005052:	0020      	movs	r0, r4
 8005054:	f000 f8ad 	bl	80051b2 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_1_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_1);
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	2200      	movs	r2, #0
 800505e:	2103      	movs	r1, #3
 8005060:	0020      	movs	r0, r4
 8005062:	f000 f8a6 	bl	80051b2 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_2_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_2);
 8005066:	0033      	movs	r3, r6
 8005068:	2200      	movs	r2, #0
 800506a:	2103      	movs	r1, #3
 800506c:	0028      	movs	r0, r5
 800506e:	f000 f8a0 	bl	80051b2 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_3_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_3);
 8005072:	2302      	movs	r3, #2
 8005074:	2200      	movs	r2, #0
 8005076:	2103      	movs	r1, #3
 8005078:	0020      	movs	r0, r4
 800507a:	f000 f89a 	bl	80051b2 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_4_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_4);
 800507e:	2304      	movs	r3, #4
 8005080:	2200      	movs	r2, #0
 8005082:	2103      	movs	r1, #3
 8005084:	0020      	movs	r0, r4
 8005086:	f000 f894 	bl	80051b2 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_5_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_5);
 800508a:	2301      	movs	r3, #1
 800508c:	2200      	movs	r2, #0
 800508e:	2103      	movs	r1, #3
 8005090:	0020      	movs	r0, r4
 8005092:	f000 f88e 	bl	80051b2 <gpio_mode_setup>
    gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
	gpio_mode_setup(TEMP_I2C_SDA_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SDA);

    #endif

}
 8005096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005098:	50000400 	.word	0x50000400

0800509c <rtc_isr>:

// Override default rtc interrupt handler
void rtc_isr(void)
{ 
 800509c:	b510      	push	{r4, lr}
    exti_reset_request(EXTI20);
 800509e:	2080      	movs	r0, #128	; 0x80
 80050a0:	0340      	lsls	r0, r0, #13
 80050a2:	f000 f825 	bl	80050f0 <exti_reset_request>

    // scb_reset_system();

    log_init();
 80050a6:	f7ff fbab 	bl	8004800 <log_init>
    log_printf("RTC ISR\n");
 80050aa:	480c      	ldr	r0, [pc, #48]	; (80050dc <rtc_isr+0x40>)
 80050ac:	f7ff fb90 	bl	80047d0 <log_printf>

    if(RTC_ISR & RTC_ISR_WUTF)
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <rtc_isr+0x44>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	055b      	lsls	r3, r3, #21
 80050b6:	d400      	bmi.n	80050ba <rtc_isr+0x1e>
        pwr_clear_standby_flag();
        rtc_lock();
	    pwr_enable_backup_domain_write_protect();
        set_gpio_for_standby();
    }
}
 80050b8:	bd10      	pop	{r4, pc}
        pwr_disable_backup_domain_write_protect();
 80050ba:	f000 f907 	bl	80052cc <pwr_disable_backup_domain_write_protect>
        rtc_unlock();
 80050be:	f000 fa5b 	bl	8005578 <rtc_unlock>
	    rtc_clear_wakeup_flag();
 80050c2:	f000 fa67 	bl	8005594 <rtc_clear_wakeup_flag>
        pwr_clear_wakeup_flag();
 80050c6:	f000 f91d 	bl	8005304 <pwr_clear_wakeup_flag>
        pwr_clear_standby_flag();
 80050ca:	f000 f913 	bl	80052f4 <pwr_clear_standby_flag>
        rtc_lock();
 80050ce:	f000 fa5b 	bl	8005588 <rtc_lock>
	    pwr_enable_backup_domain_write_protect();
 80050d2:	f000 f905 	bl	80052e0 <pwr_enable_backup_domain_write_protect>
        set_gpio_for_standby();
 80050d6:	f7ff ff6f 	bl	8004fb8 <set_gpio_for_standby>
}
 80050da:	e7ed      	b.n	80050b8 <rtc_isr+0x1c>
 80050dc:	080070b0 	.word	0x080070b0
 80050e0:	4000280c 	.word	0x4000280c

080050e4 <adc_start_conversion_regular>:
 * @param[in] adc ADC block register address base @ref adc_reg_base
 */
void adc_start_conversion_regular(uint32_t adc)
{
	/* Start conversion on regular channels. */
	ADC_CR(adc) |= ADC_CR_ADSTART;
 80050e4:	2304      	movs	r3, #4
 80050e6:	6882      	ldr	r2, [r0, #8]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	6083      	str	r3, [r0, #8]
}
 80050ec:	4770      	bx	lr
	...

080050f0 <exti_reset_request>:
{
#if defined(EXTI_RPR1) && defined(EXTI_FPR1)
	EXTI_RPR1 = extis;
	EXTI_FPR1 = extis;
#else
	EXTI_PR = extis;
 80050f0:	4b01      	ldr	r3, [pc, #4]	; (80050f8 <exti_reset_request+0x8>)
 80050f2:	6018      	str	r0, [r3, #0]
#endif
}
 80050f4:	4770      	bx	lr
 80050f6:	46c0      	nop			; (mov r8, r8)
 80050f8:	40010414 	.word	0x40010414

080050fc <flash_set_ws>:
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 80050fc:	2101      	movs	r1, #1
	reg32 = FLASH_ACR;
 80050fe:	4a03      	ldr	r2, [pc, #12]	; (800510c <flash_set_ws+0x10>)
 8005100:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8005102:	438b      	bics	r3, r1
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 8005104:	4303      	orrs	r3, r0
	FLASH_ACR = reg32;
 8005106:	6013      	str	r3, [r2, #0]
}
 8005108:	4770      	bx	lr
 800510a:	46c0      	nop			; (mov r8, r8)
 800510c:	40022000 	.word	0x40022000

08005110 <flash_unlock_option_bytes>:

void flash_unlock_option_bytes(void)
{
	FLASH_OPTKEYR = FLASH_OPTKEYR_KEY1;
 8005110:	4b02      	ldr	r3, [pc, #8]	; (800511c <flash_unlock_option_bytes+0xc>)
 8005112:	4a03      	ldr	r2, [pc, #12]	; (8005120 <flash_unlock_option_bytes+0x10>)
 8005114:	601a      	str	r2, [r3, #0]
	FLASH_OPTKEYR = FLASH_OPTKEYR_KEY2;
 8005116:	4a03      	ldr	r2, [pc, #12]	; (8005124 <flash_unlock_option_bytes+0x14>)
 8005118:	601a      	str	r2, [r3, #0]
}
 800511a:	4770      	bx	lr
 800511c:	40022014 	.word	0x40022014
 8005120:	fbead9c8 	.word	0xfbead9c8
 8005124:	24252627 	.word	0x24252627

08005128 <flash_unlock_pecr>:
 * yourself.
 * @sa flash_unlock
 */
void flash_unlock_pecr(void)
{
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY1;
 8005128:	4b02      	ldr	r3, [pc, #8]	; (8005134 <flash_unlock_pecr+0xc>)
 800512a:	4a03      	ldr	r2, [pc, #12]	; (8005138 <flash_unlock_pecr+0x10>)
 800512c:	601a      	str	r2, [r3, #0]
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY2;
 800512e:	4a03      	ldr	r2, [pc, #12]	; (800513c <flash_unlock_pecr+0x14>)
 8005130:	601a      	str	r2, [r3, #0]
}
 8005132:	4770      	bx	lr
 8005134:	4002200c 	.word	0x4002200c
 8005138:	89abcdef 	.word	0x89abcdef
 800513c:	02030405 	.word	0x02030405

08005140 <flash_lock_pecr>:

void flash_lock_pecr(void)
{
	FLASH_PECR |= FLASH_PECR_PELOCK;
 8005140:	2301      	movs	r3, #1
 8005142:	4a02      	ldr	r2, [pc, #8]	; (800514c <flash_lock_pecr+0xc>)
 8005144:	6811      	ldr	r1, [r2, #0]
 8005146:	430b      	orrs	r3, r1
 8005148:	6013      	str	r3, [r2, #0]
}
 800514a:	4770      	bx	lr
 800514c:	40022004 	.word	0x40022004

08005150 <flash_unlock_progmem>:
 * you must have already unlocked access to this register!
 * @sa flash_unlock_pecr
 */
void flash_unlock_progmem(void)
{
	FLASH_PRGKEYR = FLASH_PRGKEYR_PRGKEY1;
 8005150:	4b02      	ldr	r3, [pc, #8]	; (800515c <flash_unlock_progmem+0xc>)
 8005152:	4a03      	ldr	r2, [pc, #12]	; (8005160 <flash_unlock_progmem+0x10>)
 8005154:	601a      	str	r2, [r3, #0]
	FLASH_PRGKEYR = FLASH_PRGKEYR_PRGKEY2;
 8005156:	4a03      	ldr	r2, [pc, #12]	; (8005164 <flash_unlock_progmem+0x14>)
 8005158:	601a      	str	r2, [r3, #0]
}
 800515a:	4770      	bx	lr
 800515c:	40022010 	.word	0x40022010
 8005160:	8c9daebf 	.word	0x8c9daebf
 8005164:	13141516 	.word	0x13141516

08005168 <flash_lock_progmem>:

void flash_lock_progmem(void)
{
	FLASH_PECR |= FLASH_PECR_PRGLOCK;
 8005168:	2302      	movs	r3, #2
 800516a:	4a02      	ldr	r2, [pc, #8]	; (8005174 <flash_lock_progmem+0xc>)
 800516c:	6811      	ldr	r1, [r2, #0]
 800516e:	430b      	orrs	r3, r1
 8005170:	6013      	str	r3, [r2, #0]
}
 8005172:	4770      	bx	lr
 8005174:	40022004 	.word	0x40022004

08005178 <flash_lock_option_bytes>:

void flash_lock_option_bytes(void)
{
	FLASH_PECR |= FLASH_PECR_OPTLOCK;
 8005178:	2304      	movs	r3, #4
 800517a:	4a02      	ldr	r2, [pc, #8]	; (8005184 <flash_lock_option_bytes+0xc>)
 800517c:	6811      	ldr	r1, [r2, #0]
 800517e:	430b      	orrs	r3, r1
 8005180:	6013      	str	r3, [r2, #0]
}
 8005182:	4770      	bx	lr
 8005184:	40022004 	.word	0x40022004

08005188 <flash_unlock>:

/** @brief Unlock all segments of flash
 *
 */
void flash_unlock(void)
{
 8005188:	b510      	push	{r4, lr}
	flash_unlock_pecr();
 800518a:	f7ff ffcd 	bl	8005128 <flash_unlock_pecr>
	flash_unlock_progmem();
 800518e:	f7ff ffdf 	bl	8005150 <flash_unlock_progmem>
	flash_unlock_option_bytes();
 8005192:	f7ff ffbd 	bl	8005110 <flash_unlock_option_bytes>
}
 8005196:	bd10      	pop	{r4, pc}

08005198 <flash_lock>:

/** @brief Lock all segments of flash
 *
 */
void flash_lock(void)
{
 8005198:	b510      	push	{r4, lr}
	flash_lock_option_bytes();
 800519a:	f7ff ffed 	bl	8005178 <flash_lock_option_bytes>
	flash_lock_progmem();
 800519e:	f7ff ffe3 	bl	8005168 <flash_lock_progmem>
	flash_lock_pecr();
 80051a2:	f7ff ffcd 	bl	8005140 <flash_lock_pecr>
}
 80051a6:	bd10      	pop	{r4, pc}

080051a8 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 80051a8:	6181      	str	r1, [r0, #24]
}
 80051aa:	4770      	bx	lr

080051ac <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 80051ac:	0409      	lsls	r1, r1, #16
 80051ae:	6181      	str	r1, [r0, #24]
}
 80051b0:	4770      	bx	lr

080051b2 <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 80051b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051b4:	b085      	sub	sp, #20
 80051b6:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 80051b8:	2703      	movs	r7, #3
	pupd = GPIO_PUPDR(gpioport);
 80051ba:	2100      	movs	r1, #0
{
 80051bc:	9202      	str	r2, [sp, #8]
 80051be:	9303      	str	r3, [sp, #12]
	moder = GPIO_MODER(gpioport);
 80051c0:	6802      	ldr	r2, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 80051c2:	68c3      	ldr	r3, [r0, #12]
		if (!((1 << i) & gpios)) {
 80051c4:	9c03      	ldr	r4, [sp, #12]
 80051c6:	2501      	movs	r5, #1
 80051c8:	410c      	asrs	r4, r1
 80051ca:	422c      	tst	r4, r5
 80051cc:	d00a      	beq.n	80051e4 <gpio_mode_setup+0x32>
		moder &= ~GPIO_MODE_MASK(i);
 80051ce:	003d      	movs	r5, r7
 80051d0:	004c      	lsls	r4, r1, #1
 80051d2:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 80051d4:	9e01      	ldr	r6, [sp, #4]
		moder &= ~GPIO_MODE_MASK(i);
 80051d6:	43aa      	bics	r2, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 80051d8:	43ab      	bics	r3, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 80051da:	9d02      	ldr	r5, [sp, #8]
		moder |= GPIO_MODE(i, mode);
 80051dc:	40a6      	lsls	r6, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 80051de:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 80051e0:	4332      	orrs	r2, r6
		pupd |= GPIO_PUPD(i, pull_up_down);
 80051e2:	432b      	orrs	r3, r5
	for (i = 0; i < 16; i++) {
 80051e4:	3101      	adds	r1, #1
 80051e6:	2910      	cmp	r1, #16
 80051e8:	d1ec      	bne.n	80051c4 <gpio_mode_setup+0x12>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 80051ea:	6002      	str	r2, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 80051ec:	60c3      	str	r3, [r0, #12]
}
 80051ee:	b005      	add	sp, #20
 80051f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051f2 <gpio_set_output_options>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_output_options(uint32_t gpioport, uint8_t otype, uint8_t speed,
			     uint16_t gpios)
{
 80051f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051f4:	9201      	str	r2, [sp, #4]
	uint16_t i;
	uint32_t ospeedr;

	if (otype == 0x1) {
 80051f6:	2901      	cmp	r1, #1
 80051f8:	d116      	bne.n	8005228 <gpio_set_output_options+0x36>
		GPIO_OTYPER(gpioport) |= gpios;
 80051fa:	6841      	ldr	r1, [r0, #4]
 80051fc:	4319      	orrs	r1, r3
	} else {
		GPIO_OTYPER(gpioport) &= ~gpios;
	}

	ospeedr = GPIO_OSPEEDR(gpioport);
 80051fe:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8005200:	2601      	movs	r6, #1
			continue;
		}
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8005202:	2703      	movs	r7, #3
		GPIO_OTYPER(gpioport) &= ~gpios;
 8005204:	6041      	str	r1, [r0, #4]
	ospeedr = GPIO_OSPEEDR(gpioport);
 8005206:	6881      	ldr	r1, [r0, #8]
		if (!((1 << i) & gpios)) {
 8005208:	001d      	movs	r5, r3
 800520a:	4125      	asrs	r5, r4
 800520c:	4235      	tst	r5, r6
 800520e:	d006      	beq.n	800521e <gpio_set_output_options+0x2c>
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8005210:	003a      	movs	r2, r7
 8005212:	0065      	lsls	r5, r4, #1
 8005214:	40aa      	lsls	r2, r5
 8005216:	4391      	bics	r1, r2
		ospeedr |= GPIO_OSPEED(i, speed);
 8005218:	9a01      	ldr	r2, [sp, #4]
 800521a:	40aa      	lsls	r2, r5
 800521c:	4311      	orrs	r1, r2
	for (i = 0; i < 16; i++) {
 800521e:	3401      	adds	r4, #1
 8005220:	2c10      	cmp	r4, #16
 8005222:	d1f1      	bne.n	8005208 <gpio_set_output_options+0x16>
	}

	GPIO_OSPEEDR(gpioport) = ospeedr;
 8005224:	6081      	str	r1, [r0, #8]
}
 8005226:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		GPIO_OTYPER(gpioport) &= ~gpios;
 8005228:	6841      	ldr	r1, [r0, #4]
 800522a:	4399      	bics	r1, r3
 800522c:	e7e7      	b.n	80051fe <gpio_set_output_options+0xc>

0800522e <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 800522e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);
 8005230:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 8005232:	2601      	movs	r6, #1
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 8005234:	270f      	movs	r7, #15
	afrl = GPIO_AFRL(gpioport);
 8005236:	6a04      	ldr	r4, [r0, #32]
{
 8005238:	9100      	str	r1, [sp, #0]
	afrh = GPIO_AFRH(gpioport);
 800523a:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 800523c:	9201      	str	r2, [sp, #4]
		if (!((1 << i) & gpios)) {
 800523e:	9d01      	ldr	r5, [sp, #4]
 8005240:	411d      	asrs	r5, r3
 8005242:	4235      	tst	r5, r6
 8005244:	d006      	beq.n	8005254 <gpio_set_af+0x26>
		afrl &= ~GPIO_AFR_MASK(i);
 8005246:	003a      	movs	r2, r7
 8005248:	009d      	lsls	r5, r3, #2
 800524a:	40aa      	lsls	r2, r5
 800524c:	4394      	bics	r4, r2
		afrl |= GPIO_AFR(i, alt_func_num);
 800524e:	9a00      	ldr	r2, [sp, #0]
 8005250:	40aa      	lsls	r2, r5
 8005252:	4314      	orrs	r4, r2
	for (i = 0; i < 8; i++) {
 8005254:	3301      	adds	r3, #1
 8005256:	2b08      	cmp	r3, #8
 8005258:	d1f1      	bne.n	800523e <gpio_set_af+0x10>
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 800525a:	2601      	movs	r6, #1
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 800525c:	270f      	movs	r7, #15
		if (!((1 << i) & gpios)) {
 800525e:	9a01      	ldr	r2, [sp, #4]
 8005260:	411a      	asrs	r2, r3
 8005262:	4232      	tst	r2, r6
 8005264:	d007      	beq.n	8005276 <gpio_set_af+0x48>
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8005266:	003a      	movs	r2, r7
 8005268:	009d      	lsls	r5, r3, #2
 800526a:	3d20      	subs	r5, #32
 800526c:	40aa      	lsls	r2, r5
 800526e:	4391      	bics	r1, r2
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 8005270:	9a00      	ldr	r2, [sp, #0]
 8005272:	40aa      	lsls	r2, r5
 8005274:	4311      	orrs	r1, r2
	for (i = 8; i < 16; i++) {
 8005276:	3301      	adds	r3, #1
 8005278:	2b10      	cmp	r3, #16
 800527a:	d1f0      	bne.n	800525e <gpio_set_af+0x30>
	}

	GPIO_AFRL(gpioport) = afrl;
 800527c:	6204      	str	r4, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 800527e:	6241      	str	r1, [r0, #36]	; 0x24
}
 8005280:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08005282 <lptimer_get_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @returns Counter value.
 */
uint16_t lptimer_get_counter(uint32_t lptimer_peripheral)
{
	return LPTIM_CNT(lptimer_peripheral);
 8005282:	69c0      	ldr	r0, [r0, #28]
 8005284:	b280      	uxth	r0, r0
}
 8005286:	4770      	bx	lr

08005288 <lptimer_enable>:
 *
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 */
void lptimer_enable(uint32_t lptimer_peripheral)
{
	LPTIM_CR(lptimer_peripheral) |= LPTIM_CR_ENABLE;
 8005288:	2301      	movs	r3, #1
 800528a:	6902      	ldr	r2, [r0, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	6103      	str	r3, [r0, #16]
}
 8005290:	4770      	bx	lr

08005292 <lptimer_start_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] mode lptimer start mode (@ref LPTIM_CR_SNGSTRT or @ref LPTIM_CR_CNTSTRT)
 */
void lptimer_start_counter(uint32_t lptimer_peripheral, uint32_t mode)
{
	LPTIM_CR(lptimer_peripheral) |= mode;
 8005292:	6903      	ldr	r3, [r0, #16]
 8005294:	430b      	orrs	r3, r1
 8005296:	6103      	str	r3, [r0, #16]
}
 8005298:	4770      	bx	lr
	...

0800529c <lptimer_set_prescaler>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] prescaler Clock prescaler (@ref lptim_cfgr_presc)
 */
void lptimer_set_prescaler(uint32_t lptimer_peripheral, uint32_t prescaler)
{
	uint32_t reg32 = LPTIM_CFGR(lptimer_peripheral);
 800529c:	68c3      	ldr	r3, [r0, #12]
	reg32 &= ~(LPTIM_CFGR_PRESC_MASK << LPTIM_CFGR_PRESC_SHIFT);
 800529e:	4a02      	ldr	r2, [pc, #8]	; (80052a8 <lptimer_set_prescaler+0xc>)
 80052a0:	4013      	ands	r3, r2
	LPTIM_CFGR(lptimer_peripheral) = reg32 | prescaler;
 80052a2:	430b      	orrs	r3, r1
 80052a4:	60c3      	str	r3, [r0, #12]
}
 80052a6:	4770      	bx	lr
 80052a8:	fffff1ff 	.word	0xfffff1ff

080052ac <lptimer_enable_trigger>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] trigen Enable Trigger
 */
void lptimer_enable_trigger(uint32_t lptimer_peripheral, uint32_t trigen)
{
	uint32_t reg32 = LPTIM_CFGR(lptimer_peripheral);
 80052ac:	68c3      	ldr	r3, [r0, #12]
	reg32 &= ~(LPTIM_CFGR_TRIGEN_MASK << LPTIM_CFGR_TRIGEN_SHIFT);
 80052ae:	4a02      	ldr	r2, [pc, #8]	; (80052b8 <lptimer_enable_trigger+0xc>)
 80052b0:	4013      	ands	r3, r2
	LPTIM_CFGR(lptimer_peripheral) = reg32 | trigen;
 80052b2:	430b      	orrs	r3, r1
 80052b4:	60c3      	str	r3, [r0, #12]
}
 80052b6:	4770      	bx	lr
 80052b8:	fff1ffff 	.word	0xfff1ffff

080052bc <lptimer_set_period>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @param[in] period_value Autoreload value. Must be greater that CMP value.
 */
void lptimer_set_period(uint32_t lptimer_peripheral, uint16_t period_value)
{
	LPTIM_ARR(lptimer_peripheral) = period_value;
 80052bc:	6181      	str	r1, [r0, #24]
}
 80052be:	4770      	bx	lr

080052c0 <lptimer_set_internal_clock_source>:
 *
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 */
void lptimer_set_internal_clock_source(uint32_t lptimer_peripheral)
{
	LPTIM_CFGR(lptimer_peripheral) &= ~LPTIM_CFGR_CKSEL;
 80052c0:	2201      	movs	r2, #1
 80052c2:	68c3      	ldr	r3, [r0, #12]
 80052c4:	4393      	bics	r3, r2
 80052c6:	60c3      	str	r3, [r0, #12]
}
 80052c8:	4770      	bx	lr
	...

080052cc <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	4a03      	ldr	r2, [pc, #12]	; (80052dc <pwr_disable_backup_domain_write_protect+0x10>)
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	6811      	ldr	r1, [r2, #0]
 80052d4:	430b      	orrs	r3, r1
 80052d6:	6013      	str	r3, [r2, #0]
}
 80052d8:	4770      	bx	lr
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	40007000 	.word	0x40007000

080052e0 <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 80052e0:	4a02      	ldr	r2, [pc, #8]	; (80052ec <pwr_enable_backup_domain_write_protect+0xc>)
 80052e2:	4903      	ldr	r1, [pc, #12]	; (80052f0 <pwr_enable_backup_domain_write_protect+0x10>)
 80052e4:	6813      	ldr	r3, [r2, #0]
 80052e6:	400b      	ands	r3, r1
 80052e8:	6013      	str	r3, [r2, #0]
}
 80052ea:	4770      	bx	lr
 80052ec:	40007000 	.word	0x40007000
 80052f0:	fffffeff 	.word	0xfffffeff

080052f4 <pwr_clear_standby_flag>:
This is set when the processor returns from a standby mode.
*/

void pwr_clear_standby_flag(void)
{
	PWR_CR |= PWR_CR_CSBF;
 80052f4:	2308      	movs	r3, #8
 80052f6:	4a02      	ldr	r2, [pc, #8]	; (8005300 <pwr_clear_standby_flag+0xc>)
 80052f8:	6811      	ldr	r1, [r2, #0]
 80052fa:	430b      	orrs	r3, r1
 80052fc:	6013      	str	r3, [r2, #0]
}
 80052fe:	4770      	bx	lr
 8005300:	40007000 	.word	0x40007000

08005304 <pwr_clear_wakeup_flag>:
This is set when the processor receives a wakeup signal.
*/

void pwr_clear_wakeup_flag(void)
{
	PWR_CR |= PWR_CR_CWUF;
 8005304:	2304      	movs	r3, #4
 8005306:	4a02      	ldr	r2, [pc, #8]	; (8005310 <pwr_clear_wakeup_flag+0xc>)
 8005308:	6811      	ldr	r1, [r2, #0]
 800530a:	430b      	orrs	r3, r1
 800530c:	6013      	str	r3, [r2, #0]
}
 800530e:	4770      	bx	lr
 8005310:	40007000 	.word	0x40007000

08005314 <rcc_osc_on>:
uint32_t rcc_ahb_frequency = 2097000;
uint32_t rcc_apb1_frequency = 2097000;
uint32_t rcc_apb2_frequency = 2097000;

void rcc_osc_on(enum rcc_osc osc)
{
 8005314:	b500      	push	{lr}
 8005316:	2806      	cmp	r0, #6
 8005318:	d80b      	bhi.n	8005332 <rcc_osc_on+0x1e>
 800531a:	f001 fb15 	bl	8006948 <__gnu_thumb1_case_uqi>
 800531e:	1004      	.short	0x1004
 8005320:	1b0b1915 	.word	0x1b0b1915
 8005324:	1d          	.byte	0x1d
 8005325:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 8005326:	2380      	movs	r3, #128	; 0x80
 8005328:	4a0c      	ldr	r2, [pc, #48]	; (800535c <rcc_osc_on+0x48>)
 800532a:	045b      	lsls	r3, r3, #17
 800532c:	6811      	ldr	r1, [r2, #0]
		break;
	case RCC_LSE:
		RCC_CSR |= RCC_CSR_LSEON;
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
 800532e:	430b      	orrs	r3, r1
 8005330:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8005332:	bd00      	pop	{pc}
		RCC_CR |= RCC_CR_MSION;
 8005334:	4a09      	ldr	r2, [pc, #36]	; (800535c <rcc_osc_on+0x48>)
		RCC_CSR |= RCC_CSR_LSEON;
 8005336:	2380      	movs	r3, #128	; 0x80
 8005338:	6811      	ldr	r1, [r2, #0]
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	e7f7      	b.n	800532e <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSEON;
 800533e:	2380      	movs	r3, #128	; 0x80
 8005340:	4a06      	ldr	r2, [pc, #24]	; (800535c <rcc_osc_on+0x48>)
 8005342:	025b      	lsls	r3, r3, #9
 8005344:	6811      	ldr	r1, [r2, #0]
 8005346:	e7f2      	b.n	800532e <rcc_osc_on+0x1a>
		RCC_CRRCR |= RCC_CRRCR_HSI48ON;
 8005348:	4a05      	ldr	r2, [pc, #20]	; (8005360 <rcc_osc_on+0x4c>)
		RCC_CSR |= RCC_CSR_LSION;
 800534a:	2301      	movs	r3, #1
 800534c:	6811      	ldr	r1, [r2, #0]
 800534e:	e7ee      	b.n	800532e <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSI16ON;
 8005350:	4a02      	ldr	r2, [pc, #8]	; (800535c <rcc_osc_on+0x48>)
 8005352:	e7fa      	b.n	800534a <rcc_osc_on+0x36>
		RCC_CSR |= RCC_CSR_LSEON;
 8005354:	4a03      	ldr	r2, [pc, #12]	; (8005364 <rcc_osc_on+0x50>)
 8005356:	e7ee      	b.n	8005336 <rcc_osc_on+0x22>
		RCC_CSR |= RCC_CSR_LSION;
 8005358:	4a02      	ldr	r2, [pc, #8]	; (8005364 <rcc_osc_on+0x50>)
 800535a:	e7f6      	b.n	800534a <rcc_osc_on+0x36>
 800535c:	40021000 	.word	0x40021000
 8005360:	40021008 	.word	0x40021008
 8005364:	40021050 	.word	0x40021050

08005368 <rcc_osc_off>:

void rcc_osc_off(enum rcc_osc osc)
{
 8005368:	b500      	push	{lr}
 800536a:	2806      	cmp	r0, #6
 800536c:	d80a      	bhi.n	8005384 <rcc_osc_off+0x1c>
 800536e:	f001 faeb 	bl	8006948 <__gnu_thumb1_case_uqi>
 8005372:	0e04      	.short	0x0e04
 8005374:	190a1712 	.word	0x190a1712
 8005378:	1b          	.byte	0x1b
 8005379:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR &= ~RCC_CR_PLLON;
 800537a:	4a0c      	ldr	r2, [pc, #48]	; (80053ac <rcc_osc_off+0x44>)
 800537c:	490c      	ldr	r1, [pc, #48]	; (80053b0 <rcc_osc_off+0x48>)
 800537e:	6813      	ldr	r3, [r2, #0]
		break;
	case RCC_HSI16:
		RCC_CR &= ~RCC_CR_HSI16ON;
		break;
	case RCC_LSE:
		RCC_CSR &= ~RCC_CSR_LSEON;
 8005380:	400b      	ands	r3, r1
		break;
	case RCC_LSI:
		RCC_CSR &= ~RCC_CSR_LSION;
 8005382:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8005384:	bd00      	pop	{pc}
		RCC_CR &= ~RCC_CR_MSION;
 8005386:	4a09      	ldr	r2, [pc, #36]	; (80053ac <rcc_osc_off+0x44>)
		RCC_CSR &= ~RCC_CSR_LSEON;
 8005388:	6813      	ldr	r3, [r2, #0]
 800538a:	490a      	ldr	r1, [pc, #40]	; (80053b4 <rcc_osc_off+0x4c>)
 800538c:	e7f8      	b.n	8005380 <rcc_osc_off+0x18>
		RCC_CR &= ~RCC_CR_HSEON;
 800538e:	4a07      	ldr	r2, [pc, #28]	; (80053ac <rcc_osc_off+0x44>)
 8005390:	4909      	ldr	r1, [pc, #36]	; (80053b8 <rcc_osc_off+0x50>)
 8005392:	6813      	ldr	r3, [r2, #0]
 8005394:	e7f4      	b.n	8005380 <rcc_osc_off+0x18>
		RCC_CRRCR &= ~RCC_CRRCR_HSI48ON;
 8005396:	4a09      	ldr	r2, [pc, #36]	; (80053bc <rcc_osc_off+0x54>)
		RCC_CSR &= ~RCC_CSR_LSION;
 8005398:	2101      	movs	r1, #1
 800539a:	6813      	ldr	r3, [r2, #0]
 800539c:	438b      	bics	r3, r1
 800539e:	e7f0      	b.n	8005382 <rcc_osc_off+0x1a>
		RCC_CR &= ~RCC_CR_HSI16ON;
 80053a0:	4a02      	ldr	r2, [pc, #8]	; (80053ac <rcc_osc_off+0x44>)
 80053a2:	e7f9      	b.n	8005398 <rcc_osc_off+0x30>
		RCC_CSR &= ~RCC_CSR_LSEON;
 80053a4:	4a06      	ldr	r2, [pc, #24]	; (80053c0 <rcc_osc_off+0x58>)
 80053a6:	e7ef      	b.n	8005388 <rcc_osc_off+0x20>
		RCC_CSR &= ~RCC_CSR_LSION;
 80053a8:	4a05      	ldr	r2, [pc, #20]	; (80053c0 <rcc_osc_off+0x58>)
 80053aa:	e7f5      	b.n	8005398 <rcc_osc_off+0x30>
 80053ac:	40021000 	.word	0x40021000
 80053b0:	feffffff 	.word	0xfeffffff
 80053b4:	fffffeff 	.word	0xfffffeff
 80053b8:	fffeffff 	.word	0xfffeffff
 80053bc:	40021008 	.word	0x40021008
 80053c0:	40021050 	.word	0x40021050

080053c4 <rcc_is_osc_ready>:
	cm3_assert_not_reached();
}


bool rcc_is_osc_ready(enum rcc_osc osc)
{
 80053c4:	2300      	movs	r3, #0
 80053c6:	b500      	push	{lr}
 80053c8:	2806      	cmp	r0, #6
 80053ca:	d80a      	bhi.n	80053e2 <rcc_is_osc_ready+0x1e>
 80053cc:	3301      	adds	r3, #1
 80053ce:	f001 fabb 	bl	8006948 <__gnu_thumb1_case_uqi>
 80053d2:	0a04      	.short	0x0a04
 80053d4:	1a160e12 	.word	0x1a160e12
 80053d8:	1c          	.byte	0x1c
 80053d9:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 80053da:	4a0d      	ldr	r2, [pc, #52]	; (8005410 <rcc_is_osc_ready+0x4c>)
 80053dc:	6810      	ldr	r0, [r2, #0]
 80053de:	0e40      	lsrs	r0, r0, #25
	case RCC_MSI:
		return RCC_CR & RCC_CR_MSIRDY;
	case RCC_LSE:
		return RCC_CSR & RCC_CSR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 80053e0:	4003      	ands	r3, r0
	}
	return false;
}
 80053e2:	0018      	movs	r0, r3
 80053e4:	bd00      	pop	{pc}
		return RCC_CR & RCC_CR_HSERDY;
 80053e6:	4a0a      	ldr	r2, [pc, #40]	; (8005410 <rcc_is_osc_ready+0x4c>)
 80053e8:	6810      	ldr	r0, [r2, #0]
 80053ea:	0c40      	lsrs	r0, r0, #17
 80053ec:	e7f8      	b.n	80053e0 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_HSI16RDY;
 80053ee:	4a08      	ldr	r2, [pc, #32]	; (8005410 <rcc_is_osc_ready+0x4c>)
 80053f0:	6810      	ldr	r0, [r2, #0]
 80053f2:	0880      	lsrs	r0, r0, #2
 80053f4:	e7f4      	b.n	80053e0 <rcc_is_osc_ready+0x1c>
		return RCC_CRRCR & RCC_CRRCR_HSI48RDY;
 80053f6:	4a07      	ldr	r2, [pc, #28]	; (8005414 <rcc_is_osc_ready+0x50>)
		return RCC_CSR & RCC_CSR_LSIRDY;
 80053f8:	6810      	ldr	r0, [r2, #0]
 80053fa:	0840      	lsrs	r0, r0, #1
 80053fc:	e7f0      	b.n	80053e0 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_MSIRDY;
 80053fe:	4a04      	ldr	r2, [pc, #16]	; (8005410 <rcc_is_osc_ready+0x4c>)
		return RCC_CSR & RCC_CSR_LSERDY;
 8005400:	6810      	ldr	r0, [r2, #0]
 8005402:	0a40      	lsrs	r0, r0, #9
 8005404:	e7ec      	b.n	80053e0 <rcc_is_osc_ready+0x1c>
 8005406:	4a04      	ldr	r2, [pc, #16]	; (8005418 <rcc_is_osc_ready+0x54>)
 8005408:	e7fa      	b.n	8005400 <rcc_is_osc_ready+0x3c>
		return RCC_CSR & RCC_CSR_LSIRDY;
 800540a:	4a03      	ldr	r2, [pc, #12]	; (8005418 <rcc_is_osc_ready+0x54>)
 800540c:	e7f4      	b.n	80053f8 <rcc_is_osc_ready+0x34>
 800540e:	46c0      	nop			; (mov r8, r8)
 8005410:	40021000 	.word	0x40021000
 8005414:	40021008 	.word	0x40021008
 8005418:	40021050 	.word	0x40021050

0800541c <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 800541c:	b510      	push	{r4, lr}
 800541e:	0004      	movs	r4, r0
	while (!rcc_is_osc_ready(osc));
 8005420:	0020      	movs	r0, r4
 8005422:	f7ff ffcf 	bl	80053c4 <rcc_is_osc_ready>
 8005426:	2800      	cmp	r0, #0
 8005428:	d0fa      	beq.n	8005420 <rcc_wait_for_osc_ready+0x4>
}
 800542a:	bd10      	pop	{r4, pc}

0800542c <rcc_set_hsi48_source_rc48>:
/*---------------------------------------------------------------------------*/
/** @brief RCC Set HSI48 clock source to the RC48 (CRS)
 */
void rcc_set_hsi48_source_rc48(void)
{
	RCC_CCIPR |= RCC_CCIPR_HSI48SEL;
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	4a03      	ldr	r2, [pc, #12]	; (800543c <rcc_set_hsi48_source_rc48+0x10>)
 8005430:	04db      	lsls	r3, r3, #19
 8005432:	6811      	ldr	r1, [r2, #0]
 8005434:	430b      	orrs	r3, r1
 8005436:	6013      	str	r3, [r2, #0]
}
 8005438:	4770      	bx	lr
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	4002104c 	.word	0x4002104c

08005440 <rcc_set_sysclk_source>:
 *
 * @param[in] osc Oscillator ID. Only HSE, HSI16, MSI and PLL have effect.
 */

void rcc_set_sysclk_source(enum rcc_osc osc)
{
 8005440:	b500      	push	{lr}
 8005442:	2804      	cmp	r0, #4
 8005444:	d812      	bhi.n	800546c <rcc_set_sysclk_source+0x2c>
 8005446:	f001 fa7f 	bl	8006948 <__gnu_thumb1_case_uqi>
 800544a:	0903      	.short	0x0903
 800544c:	1211      	.short	0x1211
 800544e:	19          	.byte	0x19
 800544f:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CFGR |=  RCC_CFGR_SW_PLL;
 8005450:	2303      	movs	r3, #3
 8005452:	4a0d      	ldr	r2, [pc, #52]	; (8005488 <rcc_set_sysclk_source+0x48>)
 8005454:	6811      	ldr	r1, [r2, #0]
 8005456:	430b      	orrs	r3, r1
		break;
	case RCC_HSI16:
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_HSI16;
		break;
	case RCC_MSI:
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_MSI;
 8005458:	6013      	str	r3, [r2, #0]
	case RCC_HSI48:
	case RCC_LSE:
	case RCC_LSI:
		break;
	}
}
 800545a:	e007      	b.n	800546c <rcc_set_sysclk_source+0x2c>
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_HSE;
 800545c:	2203      	movs	r2, #3
 800545e:	490a      	ldr	r1, [pc, #40]	; (8005488 <rcc_set_sysclk_source+0x48>)
 8005460:	680b      	ldr	r3, [r1, #0]
 8005462:	4393      	bics	r3, r2
 8005464:	001a      	movs	r2, r3
 8005466:	2302      	movs	r3, #2
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_HSI16;
 8005468:	4313      	orrs	r3, r2
 800546a:	600b      	str	r3, [r1, #0]
}
 800546c:	bd00      	pop	{pc}
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_HSI16;
 800546e:	2203      	movs	r2, #3
 8005470:	4905      	ldr	r1, [pc, #20]	; (8005488 <rcc_set_sysclk_source+0x48>)
 8005472:	680b      	ldr	r3, [r1, #0]
 8005474:	4393      	bics	r3, r2
 8005476:	001a      	movs	r2, r3
 8005478:	2301      	movs	r3, #1
 800547a:	e7f5      	b.n	8005468 <rcc_set_sysclk_source+0x28>
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_MSI;
 800547c:	2103      	movs	r1, #3
 800547e:	4a02      	ldr	r2, [pc, #8]	; (8005488 <rcc_set_sysclk_source+0x48>)
 8005480:	6813      	ldr	r3, [r2, #0]
 8005482:	438b      	bics	r3, r1
 8005484:	e7e8      	b.n	8005458 <rcc_set_sysclk_source+0x18>
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	4002100c 	.word	0x4002100c

0800548c <rcc_set_ppre1>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb1pre
 */

void rcc_set_ppre1(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 800548c:	4a03      	ldr	r2, [pc, #12]	; (800549c <rcc_set_ppre1+0x10>)
 800548e:	4904      	ldr	r1, [pc, #16]	; (80054a0 <rcc_set_ppre1+0x14>)
 8005490:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE1_MASK << RCC_CFGR_PPRE1_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8005492:	0200      	lsls	r0, r0, #8
	uint32_t reg = RCC_CFGR
 8005494:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8005496:	4318      	orrs	r0, r3
 8005498:	6010      	str	r0, [r2, #0]
}
 800549a:	4770      	bx	lr
 800549c:	4002100c 	.word	0x4002100c
 80054a0:	fffff8ff 	.word	0xfffff8ff

080054a4 <rcc_set_ppre2>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb2pre
 */

void rcc_set_ppre2(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 80054a4:	4a03      	ldr	r2, [pc, #12]	; (80054b4 <rcc_set_ppre2+0x10>)
 80054a6:	4904      	ldr	r1, [pc, #16]	; (80054b8 <rcc_set_ppre2+0x14>)
 80054a8:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE2_MASK << RCC_CFGR_PPRE2_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 80054aa:	02c0      	lsls	r0, r0, #11
	uint32_t reg = RCC_CFGR
 80054ac:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 80054ae:	4318      	orrs	r0, r3
 80054b0:	6010      	str	r0, [r2, #0]
}
 80054b2:	4770      	bx	lr
 80054b4:	4002100c 	.word	0x4002100c
 80054b8:	ffffc7ff 	.word	0xffffc7ff

080054bc <rcc_set_hpre>:
 * @param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
 */

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 80054bc:	21f0      	movs	r1, #240	; 0xf0
 80054be:	4a03      	ldr	r2, [pc, #12]	; (80054cc <rcc_set_hpre+0x10>)
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 80054c0:	0100      	lsls	r0, r0, #4
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 80054c2:	6813      	ldr	r3, [r2, #0]
 80054c4:	438b      	bics	r3, r1
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 80054c6:	4318      	orrs	r0, r3
 80054c8:	6010      	str	r0, [r2, #0]
}
 80054ca:	4770      	bx	lr
 80054cc:	4002100c 	.word	0x4002100c

080054d0 <rcc_set_peripheral_clk_sel>:
void rcc_set_peripheral_clk_sel(uint32_t periph, uint32_t sel)
{
	uint8_t shift;
	uint32_t mask;

	switch (periph) {
 80054d0:	4b13      	ldr	r3, [pc, #76]	; (8005520 <rcc_set_peripheral_clk_sel+0x50>)
{
 80054d2:	000a      	movs	r2, r1
 80054d4:	b510      	push	{r4, lr}
	switch (periph) {
 80054d6:	4298      	cmp	r0, r3
 80054d8:	d01c      	beq.n	8005514 <rcc_set_peripheral_clk_sel+0x44>
 80054da:	d80b      	bhi.n	80054f4 <rcc_set_peripheral_clk_sel+0x24>
 80054dc:	4b11      	ldr	r3, [pc, #68]	; (8005524 <rcc_set_peripheral_clk_sel+0x54>)
 80054de:	4298      	cmp	r0, r3
 80054e0:	d01a      	beq.n	8005518 <rcc_set_peripheral_clk_sel+0x48>
 80054e2:	4911      	ldr	r1, [pc, #68]	; (8005528 <rcc_set_peripheral_clk_sel+0x58>)
			shift = RCC_CCIPR_I2C3SEL_SHIFT;
			mask = RCC_CCIPR_I2C3SEL_MASK;
			break;

		case I2C1_BASE:
			shift = RCC_CCIPR_I2C1SEL_SHIFT;
 80054e4:	230c      	movs	r3, #12
	switch (periph) {
 80054e6:	4288      	cmp	r0, r1
 80054e8:	d00b      	beq.n	8005502 <rcc_set_peripheral_clk_sel+0x32>
 80054ea:	4910      	ldr	r1, [pc, #64]	; (800552c <rcc_set_peripheral_clk_sel+0x5c>)
			shift = RCC_CCIPR_LPUART1SEL_SHIFT;
			mask = RCC_CCIPR_LPUART1SEL_MASK;
			break;

		case USART2_BASE:
			shift = RCC_CCIPR_USART2SEL_SHIFT;
 80054ec:	3b0a      	subs	r3, #10
	switch (periph) {
 80054ee:	4288      	cmp	r0, r1
 80054f0:	d007      	beq.n	8005502 <rcc_set_peripheral_clk_sel+0x32>
			return;
	}

	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
	RCC_CCIPR = reg32 | (sel << shift);
}
 80054f2:	bd10      	pop	{r4, pc}
	switch (periph) {
 80054f4:	4b0e      	ldr	r3, [pc, #56]	; (8005530 <rcc_set_peripheral_clk_sel+0x60>)
 80054f6:	4298      	cmp	r0, r3
 80054f8:	d010      	beq.n	800551c <rcc_set_peripheral_clk_sel+0x4c>
 80054fa:	4b0e      	ldr	r3, [pc, #56]	; (8005534 <rcc_set_peripheral_clk_sel+0x64>)
 80054fc:	4298      	cmp	r0, r3
 80054fe:	d1f8      	bne.n	80054f2 <rcc_set_peripheral_clk_sel+0x22>
			shift = RCC_CCIPR_USART1SEL_SHIFT;
 8005500:	2300      	movs	r3, #0
	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
 8005502:	2003      	movs	r0, #3
 8005504:	4098      	lsls	r0, r3
	RCC_CCIPR = reg32 | (sel << shift);
 8005506:	409a      	lsls	r2, r3
	uint32_t reg32 = RCC_CCIPR & ~(mask << shift);
 8005508:	4c0b      	ldr	r4, [pc, #44]	; (8005538 <rcc_set_peripheral_clk_sel+0x68>)
 800550a:	6821      	ldr	r1, [r4, #0]
 800550c:	4381      	bics	r1, r0
	RCC_CCIPR = reg32 | (sel << shift);
 800550e:	4311      	orrs	r1, r2
 8005510:	6021      	str	r1, [r4, #0]
 8005512:	e7ee      	b.n	80054f2 <rcc_set_peripheral_clk_sel+0x22>
	switch (periph) {
 8005514:	2310      	movs	r3, #16
 8005516:	e7f4      	b.n	8005502 <rcc_set_peripheral_clk_sel+0x32>
			shift = RCC_CCIPR_LPUART1SEL_SHIFT;
 8005518:	230a      	movs	r3, #10
 800551a:	e7f2      	b.n	8005502 <rcc_set_peripheral_clk_sel+0x32>
			shift = RCC_CCIPR_LPTIM1SEL_SHIFT;
 800551c:	2312      	movs	r3, #18
 800551e:	e7f0      	b.n	8005502 <rcc_set_peripheral_clk_sel+0x32>
 8005520:	40007800 	.word	0x40007800
 8005524:	40004800 	.word	0x40004800
 8005528:	40005400 	.word	0x40005400
 800552c:	40004400 	.word	0x40004400
 8005530:	40007c00 	.word	0x40007c00
 8005534:	40013800 	.word	0x40013800
 8005538:	4002104c 	.word	0x4002104c

0800553c <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 800553c:	4b05      	ldr	r3, [pc, #20]	; (8005554 <rcc_periph_clock_enable+0x18>)
 800553e:	0942      	lsrs	r2, r0, #5
 8005540:	18d2      	adds	r2, r2, r3
 8005542:	231f      	movs	r3, #31
 8005544:	4018      	ands	r0, r3
 8005546:	3b1e      	subs	r3, #30
 8005548:	4083      	lsls	r3, r0
 800554a:	6811      	ldr	r1, [r2, #0]
 800554c:	430b      	orrs	r3, r1
 800554e:	6013      	str	r3, [r2, #0]
}
 8005550:	4770      	bx	lr
 8005552:	46c0      	nop			; (mov r8, r8)
 8005554:	40021000 	.word	0x40021000

08005558 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8005558:	4a06      	ldr	r2, [pc, #24]	; (8005574 <rcc_periph_reset_pulse+0x1c>)
 800555a:	0943      	lsrs	r3, r0, #5
 800555c:	189b      	adds	r3, r3, r2
 800555e:	221f      	movs	r2, #31
 8005560:	4010      	ands	r0, r2
 8005562:	3a1e      	subs	r2, #30
 8005564:	4082      	lsls	r2, r0
 8005566:	6819      	ldr	r1, [r3, #0]
 8005568:	4311      	orrs	r1, r2
 800556a:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 800556c:	6819      	ldr	r1, [r3, #0]
 800556e:	4391      	bics	r1, r2
 8005570:	6019      	str	r1, [r3, #0]
}
 8005572:	4770      	bx	lr
 8005574:	40021000 	.word	0x40021000

08005578 <rtc_unlock>:
/** @brief Unlock write access to the RTC registers

*/
void rtc_unlock(void)
{
	RTC_WPR = 0xca;
 8005578:	22ca      	movs	r2, #202	; 0xca
 800557a:	4b02      	ldr	r3, [pc, #8]	; (8005584 <rtc_unlock+0xc>)
 800557c:	601a      	str	r2, [r3, #0]
	RTC_WPR = 0x53;
 800557e:	3a77      	subs	r2, #119	; 0x77
 8005580:	601a      	str	r2, [r3, #0]
}
 8005582:	4770      	bx	lr
 8005584:	40002824 	.word	0x40002824

08005588 <rtc_lock>:
/** @brief Lock write access to the RTC registers

*/
void rtc_lock(void)
{
	RTC_WPR = 0xff;
 8005588:	22ff      	movs	r2, #255	; 0xff
 800558a:	4b01      	ldr	r3, [pc, #4]	; (8005590 <rtc_lock+0x8>)
 800558c:	601a      	str	r2, [r3, #0]
}
 800558e:	4770      	bx	lr
 8005590:	40002824 	.word	0x40002824

08005594 <rtc_clear_wakeup_flag>:

@details This function should be called first in the rtc_wkup_isr()
*/
void rtc_clear_wakeup_flag(void)
{
	RTC_ISR &= ~RTC_ISR_WUTF;
 8005594:	4a02      	ldr	r2, [pc, #8]	; (80055a0 <rtc_clear_wakeup_flag+0xc>)
 8005596:	4903      	ldr	r1, [pc, #12]	; (80055a4 <rtc_clear_wakeup_flag+0x10>)
 8005598:	6813      	ldr	r3, [r2, #0]
 800559a:	400b      	ands	r3, r1
 800559c:	6013      	str	r3, [r2, #0]
}
 800559e:	4770      	bx	lr
 80055a0:	4000280c 	.word	0x4000280c
 80055a4:	fffffbff 	.word	0xfffffbff

080055a8 <spi_xfer>:
uint16_t spi_xfer(uint32_t spi, uint16_t data)
{
	spi_write(spi, data);

	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 80055a8:	2301      	movs	r3, #1
	SPI_DR(spi) = data;
 80055aa:	60c1      	str	r1, [r0, #12]
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 80055ac:	6882      	ldr	r2, [r0, #8]
 80055ae:	421a      	tst	r2, r3
 80055b0:	d0fc      	beq.n	80055ac <spi_xfer+0x4>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 80055b2:	68c0      	ldr	r0, [r0, #12]
 80055b4:	b280      	uxth	r0, r0
}
 80055b6:	4770      	bx	lr

080055b8 <timer_enable_counter>:
tim_reg_base
*/

void timer_enable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) |= TIM_CR1_CEN;
 80055b8:	2301      	movs	r3, #1
 80055ba:	6802      	ldr	r2, [r0, #0]
 80055bc:	4313      	orrs	r3, r2
 80055be:	6003      	str	r3, [r0, #0]
}
 80055c0:	4770      	bx	lr

080055c2 <timer_disable_counter>:
tim_reg_base
*/

void timer_disable_counter(uint32_t timer_peripheral)
{
	TIM_CR1(timer_peripheral) &= ~TIM_CR1_CEN;
 80055c2:	2201      	movs	r2, #1
 80055c4:	6803      	ldr	r3, [r0, #0]
 80055c6:	4393      	bics	r3, r2
 80055c8:	6003      	str	r3, [r0, #0]
}
 80055ca:	4770      	bx	lr

080055cc <timer_set_prescaler>:
@param[in] value Unsigned int32. Prescaler values 0...0xFFFF.
*/

void timer_set_prescaler(uint32_t timer_peripheral, uint32_t value)
{
	TIM_PSC(timer_peripheral) = value;
 80055cc:	6281      	str	r1, [r0, #40]	; 0x28
}
 80055ce:	4770      	bx	lr

080055d0 <timer_get_counter>:
@returns Unsigned int32. Counter value.
*/

uint32_t timer_get_counter(uint32_t timer_peripheral)
{
	return TIM_CNT(timer_peripheral);
 80055d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 80055d2:	4770      	bx	lr

080055d4 <usart_set_baudrate>:
void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;

#if defined USART1
	if ((usart == USART1)
 80055d4:	4b10      	ldr	r3, [pc, #64]	; (8005618 <usart_set_baudrate+0x44>)
{
 80055d6:	b570      	push	{r4, r5, r6, lr}
 80055d8:	0005      	movs	r5, r0
 80055da:	000c      	movs	r4, r1
 80055dc:	084e      	lsrs	r6, r1, #1
	if ((usart == USART1)
 80055de:	4298      	cmp	r0, r3
 80055e0:	d107      	bne.n	80055f2 <usart_set_baudrate+0x1e>
#if defined USART6
		|| (usart == USART6)
#endif
		) {
		clock = rcc_apb2_frequency;
 80055e2:	4b0e      	ldr	r3, [pc, #56]	; (800561c <usart_set_baudrate+0x48>)
 80055e4:	6818      	ldr	r0, [r3, #0]
			+ ((clock % baud) * 256 + baud / 2) / baud;
		return;
	}
#endif

	USART_BRR(usart) = (clock + baud / 2) / baud;
 80055e6:	0021      	movs	r1, r4
 80055e8:	1830      	adds	r0, r6, r0
 80055ea:	f001 f9b7 	bl	800695c <__udivsi3>
 80055ee:	60e8      	str	r0, [r5, #12]
 80055f0:	e010      	b.n	8005614 <usart_set_baudrate+0x40>
	uint32_t clock = rcc_apb1_frequency;
 80055f2:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <usart_set_baudrate+0x4c>)
 80055f4:	6818      	ldr	r0, [r3, #0]
	if (usart == LPUART1) {
 80055f6:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <usart_set_baudrate+0x50>)
 80055f8:	429d      	cmp	r5, r3
 80055fa:	d1f4      	bne.n	80055e6 <usart_set_baudrate+0x12>
		USART_BRR(usart) = (clock / baud) * 256
 80055fc:	f001 fa34 	bl	8006a68 <__aeabi_uidivmod>
 8005600:	0005      	movs	r5, r0
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8005602:	0208      	lsls	r0, r1, #8
 8005604:	1980      	adds	r0, r0, r6
 8005606:	0021      	movs	r1, r4
 8005608:	f001 f9a8 	bl	800695c <__udivsi3>
		USART_BRR(usart) = (clock / baud) * 256
 800560c:	022d      	lsls	r5, r5, #8
 800560e:	4b06      	ldr	r3, [pc, #24]	; (8005628 <usart_set_baudrate+0x54>)
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8005610:	1940      	adds	r0, r0, r5
		USART_BRR(usart) = (clock / baud) * 256
 8005612:	6018      	str	r0, [r3, #0]
}
 8005614:	bd70      	pop	{r4, r5, r6, pc}
 8005616:	46c0      	nop			; (mov r8, r8)
 8005618:	40013800 	.word	0x40013800
 800561c:	200000d8 	.word	0x200000d8
 8005620:	200000d4 	.word	0x200000d4
 8005624:	40004800 	.word	0x40004800
 8005628:	4000480c 	.word	0x4000480c

0800562c <usart_set_databits>:
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
 800562c:	2908      	cmp	r1, #8
 800562e:	d104      	bne.n	800563a <usart_set_databits+0xe>
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 8005630:	6803      	ldr	r3, [r0, #0]
 8005632:	4a04      	ldr	r2, [pc, #16]	; (8005644 <usart_set_databits+0x18>)
 8005634:	4013      	ands	r3, r2
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8005636:	6003      	str	r3, [r0, #0]
	}
}
 8005638:	4770      	bx	lr
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 800563a:	2380      	movs	r3, #128	; 0x80
 800563c:	6802      	ldr	r2, [r0, #0]
 800563e:	015b      	lsls	r3, r3, #5
 8005640:	4313      	orrs	r3, r2
 8005642:	e7f8      	b.n	8005636 <usart_set_databits+0xa>
 8005644:	ffffefff 	.word	0xffffefff

08005648 <usart_set_stopbits>:

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 8005648:	6843      	ldr	r3, [r0, #4]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 800564a:	4a02      	ldr	r2, [pc, #8]	; (8005654 <usart_set_stopbits+0xc>)
 800564c:	4013      	ands	r3, r2
 800564e:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 8005650:	6043      	str	r3, [r0, #4]
}
 8005652:	4770      	bx	lr
 8005654:	ffffcfff 	.word	0xffffcfff

08005658 <usart_set_parity>:

void usart_set_parity(uint32_t usart, uint32_t parity)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 8005658:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 800565a:	4a02      	ldr	r2, [pc, #8]	; (8005664 <usart_set_parity+0xc>)
 800565c:	4013      	ands	r3, r2
 800565e:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8005660:	6003      	str	r3, [r0, #0]
}
 8005662:	4770      	bx	lr
 8005664:	fffff9ff 	.word	0xfffff9ff

08005668 <usart_set_mode>:
void usart_set_mode(uint32_t usart, uint32_t mode)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8005668:	220c      	movs	r2, #12
	reg32 = USART_CR1(usart);
 800566a:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 800566c:	4393      	bics	r3, r2
 800566e:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8005670:	6003      	str	r3, [r0, #0]
}
 8005672:	4770      	bx	lr

08005674 <usart_set_flow_control>:

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 8005674:	6883      	ldr	r3, [r0, #8]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 8005676:	4a02      	ldr	r2, [pc, #8]	; (8005680 <usart_set_flow_control+0xc>)
 8005678:	4013      	ands	r3, r2
 800567a:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 800567c:	6083      	str	r3, [r0, #8]
}
 800567e:	4770      	bx	lr
 8005680:	fffffcff 	.word	0xfffffcff

08005684 <usart_enable>:
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 8005684:	2301      	movs	r3, #1
 8005686:	6802      	ldr	r2, [r0, #0]
 8005688:	4313      	orrs	r3, r2
 800568a:	6003      	str	r3, [r0, #0]
}
 800568c:	4770      	bx	lr

0800568e <usart_disable>:
usart_reg_base
*/

void usart_disable(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_UE;
 800568e:	2201      	movs	r2, #1
 8005690:	6803      	ldr	r3, [r0, #0]
 8005692:	4393      	bics	r3, r2
 8005694:	6003      	str	r3, [r0, #0]
}
 8005696:	4770      	bx	lr

08005698 <usart_send_blocking>:
usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(uint32_t usart, uint16_t data)
{
 8005698:	b570      	push	{r4, r5, r6, lr}
 800569a:	000d      	movs	r5, r1
 800569c:	0004      	movs	r4, r0
	usart_wait_send_ready(usart);
 800569e:	f000 f80d 	bl	80056bc <usart_wait_send_ready>
	usart_send(usart, data);
 80056a2:	0029      	movs	r1, r5
 80056a4:	0020      	movs	r0, r4
 80056a6:	f000 f801 	bl	80056ac <usart_send>
}
 80056aa:	bd70      	pop	{r4, r5, r6, pc}

080056ac <usart_send>:
 */

void usart_send(uint32_t usart, uint16_t data)
{
	/* Send data. */
	USART_TDR(usart) = (data & USART_TDR_MASK);
 80056ac:	05c9      	lsls	r1, r1, #23
 80056ae:	0dc9      	lsrs	r1, r1, #23
 80056b0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80056b2:	4770      	bx	lr

080056b4 <usart_recv>:
 */

uint16_t usart_recv(uint32_t usart)
{
	/* Receive data. */
	return USART_RDR(usart) & USART_RDR_MASK;
 80056b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80056b6:	05c0      	lsls	r0, r0, #23
 80056b8:	0dc0      	lsrs	r0, r0, #23
}
 80056ba:	4770      	bx	lr

080056bc <usart_wait_send_ready>:
 */

void usart_wait_send_ready(uint32_t usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_ISR(usart) & USART_ISR_TXE) == 0);
 80056bc:	2380      	movs	r3, #128	; 0x80
 80056be:	69c2      	ldr	r2, [r0, #28]
 80056c0:	421a      	tst	r2, r3
 80056c2:	d0fc      	beq.n	80056be <usart_wait_send_ready+0x2>
}
 80056c4:	4770      	bx	lr

080056c6 <usart_get_flag>:
 * @returns boolean: flag set.
 */

bool usart_get_flag(uint32_t usart, uint32_t flag)
{
	return ((USART_ISR(usart) & flag) != 0);
 80056c6:	69c0      	ldr	r0, [r0, #28]
 80056c8:	4008      	ands	r0, r1
 80056ca:	1e41      	subs	r1, r0, #1
 80056cc:	4188      	sbcs	r0, r1
 80056ce:	b2c0      	uxtb	r0, r0
}
 80056d0:	4770      	bx	lr
	...

080056d4 <usbd_init>:
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char * const *strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 80056d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056d6:	001d      	movs	r5, r3
 80056d8:	ab0a      	add	r3, sp, #40	; 0x28
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	0016      	movs	r6, r2
 80056de:	9301      	str	r3, [sp, #4]
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 80056e0:	6803      	ldr	r3, [r0, #0]
{
 80056e2:	000f      	movs	r7, r1
 80056e4:	0004      	movs	r4, r0
	usbd_dev = driver->init();
 80056e6:	4798      	blx	r3

	usbd_dev->driver = driver;
 80056e8:	0003      	movs	r3, r0
 80056ea:	33dc      	adds	r3, #220	; 0xdc
 80056ec:	601c      	str	r4, [r3, #0]
	usbd_dev->desc = dev;
	usbd_dev->config = conf;
	usbd_dev->strings = strings;
	usbd_dev->num_strings = num_strings;
 80056ee:	9b08      	ldr	r3, [sp, #32]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
	    _usbd_control_in;

	int i;
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
		usbd_dev->user_callback_set_config[i] = NULL;
 80056f0:	0002      	movs	r2, r0
	usbd_dev->num_strings = num_strings;
 80056f2:	60c3      	str	r3, [r0, #12]
	usbd_dev->ctrl_buf = control_buffer;
 80056f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
		usbd_dev->user_callback_set_config[i] = NULL;
 80056f6:	32c8      	adds	r2, #200	; 0xc8
	usbd_dev->ctrl_buf = control_buffer;
 80056f8:	6103      	str	r3, [r0, #16]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 80056fa:	9b01      	ldr	r3, [sp, #4]
	usbd_dev->desc = dev;
 80056fc:	6007      	str	r7, [r0, #0]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 80056fe:	8283      	strh	r3, [r0, #20]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 8005700:	4b06      	ldr	r3, [pc, #24]	; (800571c <usbd_init+0x48>)
	usbd_dev->config = conf;
 8005702:	6046      	str	r6, [r0, #4]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 8005704:	6703      	str	r3, [r0, #112]	; 0x70
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 8005706:	4b06      	ldr	r3, [pc, #24]	; (8005720 <usbd_init+0x4c>)
	usbd_dev->strings = strings;
 8005708:	6085      	str	r5, [r0, #8]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 800570a:	66c3      	str	r3, [r0, #108]	; 0x6c
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <usbd_init+0x50>)
 800570e:	6683      	str	r3, [r0, #104]	; 0x68
		usbd_dev->user_callback_set_config[i] = NULL;
 8005710:	2300      	movs	r3, #0
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	6053      	str	r3, [r2, #4]
 8005716:	6093      	str	r3, [r2, #8]
 8005718:	60d3      	str	r3, [r2, #12]
	}

	return usbd_dev;
}
 800571a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800571c:	08005953 	.word	0x08005953
 8005720:	080059bd 	.word	0x080059bd
 8005724:	08005a3f 	.word	0x08005a3f

08005728 <usbd_register_reset_callback>:

void usbd_register_reset_callback(usbd_device *usbd_dev, void (*callback)(void))
{
	usbd_dev->user_callback_reset = callback;
 8005728:	61c1      	str	r1, [r0, #28]
}
 800572a:	4770      	bx	lr

0800572c <usbd_ep_setup>:
	}
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size, usbd_endpoint_callback callback)
{
 800572c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 800572e:	0004      	movs	r4, r0
 8005730:	9d06      	ldr	r5, [sp, #24]
 8005732:	34dc      	adds	r4, #220	; 0xdc
 8005734:	6824      	ldr	r4, [r4, #0]
 8005736:	9500      	str	r5, [sp, #0]
 8005738:	68a4      	ldr	r4, [r4, #8]
 800573a:	47a0      	blx	r4
}
 800573c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

0800573e <_usbd_reset>:
{
 800573e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	usbd_dev->current_address = 0;
 8005740:	2500      	movs	r5, #0
{
 8005742:	0004      	movs	r4, r0
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 8005744:	6803      	ldr	r3, [r0, #0]
	usbd_dev->current_address = 0;
 8005746:	82c5      	strh	r5, [r0, #22]
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 8005748:	79db      	ldrb	r3, [r3, #7]
 800574a:	002a      	movs	r2, r5
 800574c:	0029      	movs	r1, r5
 800574e:	9500      	str	r5, [sp, #0]
 8005750:	f7ff ffec 	bl	800572c <usbd_ep_setup>
	usbd_dev->driver->set_address(usbd_dev, 0);
 8005754:	0023      	movs	r3, r4
 8005756:	33dc      	adds	r3, #220	; 0xdc
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	0029      	movs	r1, r5
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	0020      	movs	r0, r4
 8005760:	4798      	blx	r3
	if (usbd_dev->user_callback_reset) {
 8005762:	69e3      	ldr	r3, [r4, #28]
 8005764:	42ab      	cmp	r3, r5
 8005766:	d000      	beq.n	800576a <_usbd_reset+0x2c>
		usbd_dev->user_callback_reset();
 8005768:	4798      	blx	r3
}
 800576a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

0800576c <usbd_ep_write_packet>:

uint16_t usbd_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			 const void *buf, uint16_t len)
{
 800576c:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 800576e:	0004      	movs	r4, r0
 8005770:	34dc      	adds	r4, #220	; 0xdc
 8005772:	6824      	ldr	r4, [r4, #0]
 8005774:	69e4      	ldr	r4, [r4, #28]
 8005776:	47a0      	blx	r4
}
 8005778:	bd10      	pop	{r4, pc}

0800577a <usbd_ep_read_packet>:

uint16_t usbd_ep_read_packet(usbd_device *usbd_dev, uint8_t addr, void *buf,
			     uint16_t len)
{
 800577a:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 800577c:	0004      	movs	r4, r0
 800577e:	34dc      	adds	r4, #220	; 0xdc
 8005780:	6824      	ldr	r4, [r4, #0]
 8005782:	6a24      	ldr	r4, [r4, #32]
 8005784:	47a0      	blx	r4
}
 8005786:	bd10      	pop	{r4, pc}

08005788 <usbd_ep_stall_set>:

void usbd_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 8005788:	0003      	movs	r3, r0
{
 800578a:	b510      	push	{r4, lr}
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 800578c:	33dc      	adds	r3, #220	; 0xdc
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	4798      	blx	r3
}
 8005794:	bd10      	pop	{r4, pc}

08005796 <usbd_ep_stall_get>:

uint8_t usbd_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 8005796:	0003      	movs	r3, r0
{
 8005798:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 800579a:	33dc      	adds	r3, #220	; 0xdc
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	4798      	blx	r3
}
 80057a2:	bd10      	pop	{r4, pc}

080057a4 <usbd_ep_nak_set>:

void usbd_ep_nak_set(usbd_device *usbd_dev, uint8_t addr, uint8_t nak)
{
	usbd_dev->driver->ep_nak_set(usbd_dev, addr, nak);
 80057a4:	0003      	movs	r3, r0
{
 80057a6:	b510      	push	{r4, lr}
	usbd_dev->driver->ep_nak_set(usbd_dev, addr, nak);
 80057a8:	33dc      	adds	r3, #220	; 0xdc
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	4798      	blx	r3
}
 80057b0:	bd10      	pop	{r4, pc}

080057b2 <usb_control_send_chunk>:

	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
 80057b2:	b570      	push	{r4, r5, r6, lr}
 80057b4:	0005      	movs	r5, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
 80057b6:	6803      	ldr	r3, [r0, #0]
{
 80057b8:	0004      	movs	r4, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
 80057ba:	79d9      	ldrb	r1, [r3, #7]
			usbd_dev->control_state.ctrl_len) {
 80057bc:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 80057be:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80057c0:	352c      	adds	r5, #44	; 0x2c
	if (usbd_dev->desc->bMaxPacketSize0 <
 80057c2:	4299      	cmp	r1, r3
 80057c4:	d20e      	bcs.n	80057e4 <usb_control_send_chunk+0x32>
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 80057c6:	000b      	movs	r3, r1
 80057c8:	2100      	movs	r1, #0
 80057ca:	f7ff ffcf 	bl	800576c <usbd_ep_write_packet>
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->desc->bMaxPacketSize0);
		usbd_dev->control_state.state = DATA_IN;
 80057ce:	2302      	movs	r3, #2
 80057d0:	702b      	strb	r3, [r5, #0]
		usbd_dev->control_state.ctrl_buf +=
			usbd_dev->desc->bMaxPacketSize0;
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	79d9      	ldrb	r1, [r3, #7]
		usbd_dev->control_state.ctrl_buf +=
 80057d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057d8:	185a      	adds	r2, r3, r1
		usbd_dev->control_state.ctrl_len -=
 80057da:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf +=
 80057dc:	63a2      	str	r2, [r4, #56]	; 0x38
		usbd_dev->control_state.ctrl_len -=
 80057de:	1a5b      	subs	r3, r3, r1
 80057e0:	87a3      	strh	r3, [r4, #60]	; 0x3c
			DATA_IN : LAST_DATA_IN;
		usbd_dev->control_state.needs_zlp = false;
		usbd_dev->control_state.ctrl_len = 0;
		usbd_dev->control_state.ctrl_buf = NULL;
	}
}
 80057e2:	bd70      	pop	{r4, r5, r6, pc}
		usbd_ep_write_packet(usbd_dev, 0,
 80057e4:	2100      	movs	r1, #0
 80057e6:	f7ff ffc1 	bl	800576c <usbd_ep_write_packet>
			usbd_dev->control_state.needs_zlp ?
 80057ea:	0022      	movs	r2, r4
 80057ec:	3244      	adds	r2, #68	; 0x44
			DATA_IN : LAST_DATA_IN;
 80057ee:	7813      	ldrb	r3, [r2, #0]
 80057f0:	4259      	negs	r1, r3
 80057f2:	414b      	adcs	r3, r1
 80057f4:	3302      	adds	r3, #2
		usbd_dev->control_state.state =
 80057f6:	702b      	strb	r3, [r5, #0]
		usbd_dev->control_state.needs_zlp = false;
 80057f8:	2300      	movs	r3, #0
 80057fa:	7013      	strb	r3, [r2, #0]
		usbd_dev->control_state.ctrl_len = 0;
 80057fc:	87a3      	strh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf = NULL;
 80057fe:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005800:	e7ef      	b.n	80057e2 <usb_control_send_chunk+0x30>

08005802 <usb_control_request_dispatch>:
{
	int i, result = 0;
	struct user_control_callback *cb = usbd_dev->user_control_callback;

	/* Call user command hook function. */
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8005802:	0003      	movs	r3, r0
{
 8005804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005806:	0005      	movs	r5, r0
 8005808:	0004      	movs	r4, r0
 800580a:	000e      	movs	r6, r1
 800580c:	b087      	sub	sp, #28
 800580e:	3368      	adds	r3, #104	; 0x68
 8005810:	3548      	adds	r5, #72	; 0x48
 8005812:	9305      	str	r3, [sp, #20]
		if (cb[i].cb == NULL) {
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	0027      	movs	r7, r4
 8005818:	469c      	mov	ip, r3
 800581a:	0023      	movs	r3, r4
 800581c:	3338      	adds	r3, #56	; 0x38
 800581e:	9304      	str	r3, [sp, #16]
 8005820:	4663      	mov	r3, ip
 8005822:	373c      	adds	r7, #60	; 0x3c
 8005824:	9703      	str	r7, [sp, #12]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d107      	bne.n	800583a <usb_control_request_dispatch+0x38>
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 800582a:	0031      	movs	r1, r6
 800582c:	0020      	movs	r0, r4
 800582e:	9b03      	ldr	r3, [sp, #12]
 8005830:	9a04      	ldr	r2, [sp, #16]
 8005832:	f000 fc85 	bl	8006140 <_usbd_standard_request>
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 8005836:	b007      	add	sp, #28
 8005838:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
 800583a:	7831      	ldrb	r1, [r6, #0]
 800583c:	796b      	ldrb	r3, [r5, #5]
 800583e:	792a      	ldrb	r2, [r5, #4]
 8005840:	400b      	ands	r3, r1
 8005842:	429a      	cmp	r2, r3
 8005844:	d004      	beq.n	8005850 <usb_control_request_dispatch+0x4e>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8005846:	9b05      	ldr	r3, [sp, #20]
 8005848:	3508      	adds	r5, #8
 800584a:	429d      	cmp	r5, r3
 800584c:	d1e2      	bne.n	8005814 <usb_control_request_dispatch+0x12>
 800584e:	e7ec      	b.n	800582a <usb_control_request_dispatch+0x28>
			result = cb[i].cb(usbd_dev, req,
 8005850:	0023      	movs	r3, r4
 8005852:	3340      	adds	r3, #64	; 0x40
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	0031      	movs	r1, r6
 8005858:	0020      	movs	r0, r4
 800585a:	4667      	mov	r7, ip
 800585c:	9b03      	ldr	r3, [sp, #12]
 800585e:	9a04      	ldr	r2, [sp, #16]
 8005860:	47b8      	blx	r7
			if (result == USBD_REQ_HANDLED ||
 8005862:	2801      	cmp	r0, #1
 8005864:	d8ef      	bhi.n	8005846 <usb_control_request_dispatch+0x44>
 8005866:	e7e6      	b.n	8005836 <usb_control_request_dispatch+0x34>

08005868 <stall_transaction>:
{
 8005868:	b510      	push	{r4, lr}
	usbd_ep_stall_set(usbd_dev, 0, 1);
 800586a:	2201      	movs	r2, #1
{
 800586c:	0004      	movs	r4, r0
	usbd_ep_stall_set(usbd_dev, 0, 1);
 800586e:	2100      	movs	r1, #0
 8005870:	f7ff ff8a 	bl	8005788 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8005874:	2300      	movs	r3, #0
 8005876:	342c      	adds	r4, #44	; 0x2c
 8005878:	7023      	strb	r3, [r4, #0]
}
 800587a:	bd10      	pop	{r4, pc}

0800587c <usb_control_recv_chunk>:
{
 800587c:	b570      	push	{r4, r5, r6, lr}
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 800587e:	6803      	ldr	r3, [r0, #0]
 8005880:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8005882:	8ec5      	ldrh	r5, [r0, #54]	; 0x36
 8005884:	79db      	ldrb	r3, [r3, #7]
{
 8005886:	0004      	movs	r4, r0
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8005888:	1aad      	subs	r5, r5, r2
 800588a:	429d      	cmp	r5, r3
 800588c:	dd00      	ble.n	8005890 <usb_control_recv_chunk+0x14>
 800588e:	001d      	movs	r5, r3
				       usbd_dev->control_state.ctrl_buf +
 8005890:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8005892:	b2ae      	uxth	r6, r5
				       usbd_dev->control_state.ctrl_buf +
 8005894:	189a      	adds	r2, r3, r2
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8005896:	2100      	movs	r1, #0
 8005898:	0033      	movs	r3, r6
 800589a:	0020      	movs	r0, r4
 800589c:	f7ff ff6d 	bl	800577a <usbd_ep_read_packet>
	if (size != packetsize) {
 80058a0:	4286      	cmp	r6, r0
 80058a2:	d005      	beq.n	80058b0 <usb_control_recv_chunk+0x34>
		stall_transaction(usbd_dev);
 80058a4:	0020      	movs	r0, r4
 80058a6:	f7ff ffdf 	bl	8005868 <stall_transaction>
		return -1;
 80058aa:	2001      	movs	r0, #1
 80058ac:	4240      	negs	r0, r0
}
 80058ae:	bd70      	pop	{r4, r5, r6, pc}
	usbd_dev->control_state.ctrl_len += size;
 80058b0:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 80058b2:	b2a8      	uxth	r0, r5
 80058b4:	18f6      	adds	r6, r6, r3
 80058b6:	87a6      	strh	r6, [r4, #60]	; 0x3c
	return packetsize;
 80058b8:	e7f9      	b.n	80058ae <usb_control_recv_chunk+0x32>

080058ba <usb_control_setup_read>:

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 80058ba:	b570      	push	{r4, r5, r6, lr}
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 80058bc:	6903      	ldr	r3, [r0, #16]
{
 80058be:	0004      	movs	r4, r0
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 80058c0:	6383      	str	r3, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = req->wLength;
 80058c2:	79cb      	ldrb	r3, [r1, #7]
 80058c4:	798a      	ldrb	r2, [r1, #6]
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	4313      	orrs	r3, r2
 80058ca:	8783      	strh	r3, [r0, #60]	; 0x3c
{
 80058cc:	000d      	movs	r5, r1

	if (usb_control_request_dispatch(usbd_dev, req)) {
 80058ce:	f7ff ff98 	bl	8005802 <usb_control_request_dispatch>
 80058d2:	2800      	cmp	r0, #0
 80058d4:	d021      	beq.n	800591a <usb_control_setup_read+0x60>
		if (req->wLength) {
 80058d6:	79eb      	ldrb	r3, [r5, #7]
 80058d8:	79aa      	ldrb	r2, [r5, #6]
 80058da:	021b      	lsls	r3, r3, #8
 80058dc:	4313      	orrs	r3, r2
 80058de:	d013      	beq.n	8005908 <usb_control_setup_read+0x4e>
			usbd_dev->control_state.needs_zlp =
				needs_zlp(usbd_dev->control_state.ctrl_len,
 80058e0:	6822      	ldr	r2, [r4, #0]
 80058e2:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 80058e4:	79d1      	ldrb	r1, [r2, #7]
	return false;
 80058e6:	2200      	movs	r2, #0
	if (len < wLength) {
 80058e8:	4283      	cmp	r3, r0
 80058ea:	d906      	bls.n	80058fa <usb_control_setup_read+0x40>
		if (len && (len % ep_size == 0)) {
 80058ec:	4290      	cmp	r0, r2
 80058ee:	d004      	beq.n	80058fa <usb_control_setup_read+0x40>
 80058f0:	f001 f9a4 	bl	8006c3c <__aeabi_idivmod>
 80058f4:	424a      	negs	r2, r1
 80058f6:	414a      	adcs	r2, r1
 80058f8:	b2d2      	uxtb	r2, r2
			usbd_dev->control_state.needs_zlp =
 80058fa:	0023      	movs	r3, r4
 80058fc:	3344      	adds	r3, #68	; 0x44
					req->wLength,
					usbd_dev->desc->bMaxPacketSize0);
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 80058fe:	0020      	movs	r0, r4
			usbd_dev->control_state.needs_zlp =
 8005900:	701a      	strb	r2, [r3, #0]
			usb_control_send_chunk(usbd_dev);
 8005902:	f7ff ff56 	bl	80057b2 <usb_control_send_chunk>
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
	}
}
 8005906:	bd70      	pop	{r4, r5, r6, pc}
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8005908:	001a      	movs	r2, r3
 800590a:	0019      	movs	r1, r3
 800590c:	0020      	movs	r0, r4
 800590e:	f7ff ff2d 	bl	800576c <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8005912:	2304      	movs	r3, #4
 8005914:	342c      	adds	r4, #44	; 0x2c
 8005916:	7023      	strb	r3, [r4, #0]
}
 8005918:	e7f5      	b.n	8005906 <usb_control_setup_read+0x4c>
		stall_transaction(usbd_dev);
 800591a:	0020      	movs	r0, r4
 800591c:	f7ff ffa4 	bl	8005868 <stall_transaction>
}
 8005920:	e7f1      	b.n	8005906 <usb_control_setup_read+0x4c>

08005922 <usbd_register_control_callback>:
{
 8005922:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (usbd_dev->user_control_callback[i].cb) {
 8005924:	0007      	movs	r7, r0
{
 8005926:	0004      	movs	r4, r0
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8005928:	2500      	movs	r5, #0
		if (usbd_dev->user_control_callback[i].cb) {
 800592a:	3748      	adds	r7, #72	; 0x48
 800592c:	00ee      	lsls	r6, r5, #3
 800592e:	59b8      	ldr	r0, [r7, r6]
 8005930:	2800      	cmp	r0, #0
 8005932:	d005      	beq.n	8005940 <usbd_register_control_callback+0x1e>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8005934:	3501      	adds	r5, #1
 8005936:	2d04      	cmp	r5, #4
 8005938:	d1f8      	bne.n	800592c <usbd_register_control_callback+0xa>
	return -1;
 800593a:	2001      	movs	r0, #1
 800593c:	4240      	negs	r0, r0
}
 800593e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		usbd_dev->user_control_callback[i].type = type;
 8005940:	19a4      	adds	r4, r4, r6
 8005942:	0025      	movs	r5, r4
 8005944:	354c      	adds	r5, #76	; 0x4c
 8005946:	7029      	strb	r1, [r5, #0]
		usbd_dev->user_control_callback[i].type_mask = type_mask;
 8005948:	0021      	movs	r1, r4
 800594a:	314d      	adds	r1, #77	; 0x4d
 800594c:	700a      	strb	r2, [r1, #0]
		usbd_dev->user_control_callback[i].cb = callback;
 800594e:	64a3      	str	r3, [r4, #72]	; 0x48
		return 0;
 8005950:	e7f5      	b.n	800593e <usbd_register_control_callback+0x1c>

08005952 <_usbd_control_setup>:

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 8005952:	b570      	push	{r4, r5, r6, lr}
	struct usb_setup_data *req = &usbd_dev->control_state.req;
	(void)ea;

	usbd_dev->control_state.complete = NULL;
 8005954:	2500      	movs	r5, #0
{
 8005956:	0004      	movs	r4, r0

	usbd_ep_nak_set(usbd_dev, 0, 1);
 8005958:	2201      	movs	r2, #1
 800595a:	0029      	movs	r1, r5
	usbd_dev->control_state.complete = NULL;
 800595c:	6405      	str	r5, [r0, #64]	; 0x40
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 800595e:	0006      	movs	r6, r0
	usbd_ep_nak_set(usbd_dev, 0, 1);
 8005960:	f7ff ff20 	bl	80057a4 <usbd_ep_nak_set>

	if (req->wLength == 0) {
 8005964:	0023      	movs	r3, r4
 8005966:	3336      	adds	r3, #54	; 0x36
 8005968:	781a      	ldrb	r2, [r3, #0]
 800596a:	3301      	adds	r3, #1
 800596c:	781b      	ldrb	r3, [r3, #0]
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 800596e:	3630      	adds	r6, #48	; 0x30
	if (req->wLength == 0) {
 8005970:	021b      	lsls	r3, r3, #8
 8005972:	4313      	orrs	r3, r2
 8005974:	42ab      	cmp	r3, r5
 8005976:	d104      	bne.n	8005982 <_usbd_control_setup+0x30>
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
		usb_control_setup_read(usbd_dev, req);
 8005978:	0031      	movs	r1, r6
 800597a:	0020      	movs	r0, r4
 800597c:	f7ff ff9d 	bl	80058ba <usb_control_setup_read>
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 8005980:	bd70      	pop	{r4, r5, r6, pc}
	} else if (req->bmRequestType & 0x80) {
 8005982:	7832      	ldrb	r2, [r6, #0]
 8005984:	2a7f      	cmp	r2, #127	; 0x7f
 8005986:	d8f7      	bhi.n	8005978 <_usbd_control_setup+0x26>
	if (req->wLength > usbd_dev->ctrl_buf_len) {
 8005988:	8aa2      	ldrh	r2, [r4, #20]
 800598a:	429a      	cmp	r2, r3
 800598c:	d203      	bcs.n	8005996 <_usbd_control_setup+0x44>
		stall_transaction(usbd_dev);
 800598e:	0020      	movs	r0, r4
 8005990:	f7ff ff6a 	bl	8005868 <stall_transaction>
		return;
 8005994:	e7f4      	b.n	8005980 <_usbd_control_setup+0x2e>
		usbd_dev->control_state.state = LAST_DATA_OUT;
 8005996:	0029      	movs	r1, r5
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8005998:	6922      	ldr	r2, [r4, #16]
	usbd_dev->control_state.ctrl_len = 0;
 800599a:	87a5      	strh	r5, [r4, #60]	; 0x3c
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 800599c:	63a2      	str	r2, [r4, #56]	; 0x38
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 800599e:	6822      	ldr	r2, [r4, #0]
	usbd_ep_nak_set(usbd_dev, 0, 0);
 80059a0:	0020      	movs	r0, r4
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 80059a2:	79d2      	ldrb	r2, [r2, #7]
		usbd_dev->control_state.state = LAST_DATA_OUT;
 80059a4:	429a      	cmp	r2, r3
 80059a6:	4169      	adcs	r1, r5
 80059a8:	0022      	movs	r2, r4
 80059aa:	000b      	movs	r3, r1
 80059ac:	322c      	adds	r2, #44	; 0x2c
 80059ae:	3305      	adds	r3, #5
 80059b0:	7013      	strb	r3, [r2, #0]
	usbd_ep_nak_set(usbd_dev, 0, 0);
 80059b2:	0029      	movs	r1, r5
 80059b4:	002a      	movs	r2, r5
 80059b6:	f7ff fef5 	bl	80057a4 <usbd_ep_nak_set>
}
 80059ba:	e7e1      	b.n	8005980 <_usbd_control_setup+0x2e>

080059bc <_usbd_control_out>:

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
 80059bc:	b570      	push	{r4, r5, r6, lr}
	(void)ea;

	switch (usbd_dev->control_state.state) {
 80059be:	0005      	movs	r5, r0
 80059c0:	352c      	adds	r5, #44	; 0x2c
 80059c2:	782b      	ldrb	r3, [r5, #0]
{
 80059c4:	0004      	movs	r4, r0
	switch (usbd_dev->control_state.state) {
 80059c6:	2b06      	cmp	r3, #6
 80059c8:	d011      	beq.n	80059ee <_usbd_control_out+0x32>
 80059ca:	2b07      	cmp	r3, #7
 80059cc:	d026      	beq.n	8005a1c <_usbd_control_out+0x60>
 80059ce:	2b05      	cmp	r3, #5
 80059d0:	d121      	bne.n	8005a16 <_usbd_control_out+0x5a>
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 80059d2:	f7ff ff53 	bl	800587c <usb_control_recv_chunk>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	db08      	blt.n	80059ec <_usbd_control_out+0x30>
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
					usbd_dev->control_state.ctrl_len) <=
 80059da:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
		if ((usbd_dev->control_state.req.wLength -
 80059dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80059de:	1a9b      	subs	r3, r3, r2
					usbd_dev->desc->bMaxPacketSize0) {
 80059e0:	6822      	ldr	r2, [r4, #0]
 80059e2:	79d2      	ldrb	r2, [r2, #7]
		if ((usbd_dev->control_state.req.wLength -
 80059e4:	4293      	cmp	r3, r2
 80059e6:	dc01      	bgt.n	80059ec <_usbd_control_out+0x30>
			usbd_dev->control_state.state = LAST_DATA_OUT;
 80059e8:	2306      	movs	r3, #6
		 */
		if (usb_control_request_dispatch(usbd_dev,
					&(usbd_dev->control_state.req))) {
			/* Go to status stage on success. */
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
			usbd_dev->control_state.state = STATUS_IN;
 80059ea:	702b      	strb	r3, [r5, #0]
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 80059ec:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 80059ee:	f7ff ff45 	bl	800587c <usb_control_recv_chunk>
 80059f2:	2800      	cmp	r0, #0
 80059f4:	dbfa      	blt.n	80059ec <_usbd_control_out+0x30>
		if (usb_control_request_dispatch(usbd_dev,
 80059f6:	0021      	movs	r1, r4
 80059f8:	0020      	movs	r0, r4
 80059fa:	3130      	adds	r1, #48	; 0x30
 80059fc:	f7ff ff01 	bl	8005802 <usb_control_request_dispatch>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d007      	beq.n	8005a14 <_usbd_control_out+0x58>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8005a04:	2300      	movs	r3, #0
 8005a06:	0020      	movs	r0, r4
 8005a08:	001a      	movs	r2, r3
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	f7ff feae 	bl	800576c <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8005a10:	2304      	movs	r3, #4
 8005a12:	e7ea      	b.n	80059ea <_usbd_control_out+0x2e>
			stall_transaction(usbd_dev);
 8005a14:	0020      	movs	r0, r4
		stall_transaction(usbd_dev);
 8005a16:	f7ff ff27 	bl	8005868 <stall_transaction>
}
 8005a1a:	e7e7      	b.n	80059ec <_usbd_control_out+0x30>
		usbd_ep_read_packet(usbd_dev, 0, NULL, 0);
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	001a      	movs	r2, r3
 8005a20:	0019      	movs	r1, r3
 8005a22:	f7ff feaa 	bl	800577a <usbd_ep_read_packet>
		usbd_dev->control_state.state = IDLE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	702b      	strb	r3, [r5, #0]
		if (usbd_dev->control_state.complete) {
 8005a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <_usbd_control_out+0x7c>
			usbd_dev->control_state.complete(usbd_dev,
 8005a30:	0021      	movs	r1, r4
 8005a32:	0020      	movs	r0, r4
 8005a34:	3130      	adds	r1, #48	; 0x30
 8005a36:	4798      	blx	r3
		usbd_dev->control_state.complete = NULL;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8005a3c:	e7d6      	b.n	80059ec <_usbd_control_out+0x30>

08005a3e <_usbd_control_in>:

void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
 8005a3e:	b570      	push	{r4, r5, r6, lr}
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8005a40:	0005      	movs	r5, r0
 8005a42:	352c      	adds	r5, #44	; 0x2c
 8005a44:	782b      	ldrb	r3, [r5, #0]
{
 8005a46:	0004      	movs	r4, r0
	switch (usbd_dev->control_state.state) {
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d006      	beq.n	8005a5a <_usbd_control_in+0x1c>
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d00b      	beq.n	8005a68 <_usbd_control_in+0x2a>
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d121      	bne.n	8005a98 <_usbd_control_in+0x5a>
	case DATA_IN:
		usb_control_send_chunk(usbd_dev);
 8005a54:	f7ff fead 	bl	80057b2 <usb_control_send_chunk>
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8005a58:	bd70      	pop	{r4, r5, r6, pc}
		usbd_dev->control_state.state = STATUS_OUT;
 8005a5a:	2307      	movs	r3, #7
		usbd_ep_nak_set(usbd_dev, 0, 0);
 8005a5c:	2200      	movs	r2, #0
		usbd_dev->control_state.state = STATUS_OUT;
 8005a5e:	702b      	strb	r3, [r5, #0]
		usbd_ep_nak_set(usbd_dev, 0, 0);
 8005a60:	0011      	movs	r1, r2
 8005a62:	f7ff fe9f 	bl	80057a4 <usbd_ep_nak_set>
		break;
 8005a66:	e7f7      	b.n	8005a58 <_usbd_control_in+0x1a>
		if (usbd_dev->control_state.complete) {
 8005a68:	0006      	movs	r6, r0
 8005a6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005a6c:	3630      	adds	r6, #48	; 0x30
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <_usbd_control_in+0x38>
			usbd_dev->control_state.complete(usbd_dev,
 8005a72:	0031      	movs	r1, r6
 8005a74:	4798      	blx	r3
		if ((req->bmRequestType == 0) &&
 8005a76:	7833      	ldrb	r3, [r6, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <_usbd_control_in+0x54>
 8005a7c:	7873      	ldrb	r3, [r6, #1]
 8005a7e:	2b05      	cmp	r3, #5
 8005a80:	d107      	bne.n	8005a92 <_usbd_control_in+0x54>
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8005a82:	0023      	movs	r3, r4
 8005a84:	3332      	adds	r3, #50	; 0x32
 8005a86:	7819      	ldrb	r1, [r3, #0]
 8005a88:	33aa      	adds	r3, #170	; 0xaa
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	0020      	movs	r0, r4
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	4798      	blx	r3
		usbd_dev->control_state.state = IDLE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	702b      	strb	r3, [r5, #0]
		break;
 8005a96:	e7df      	b.n	8005a58 <_usbd_control_in+0x1a>
		stall_transaction(usbd_dev);
 8005a98:	f7ff fee6 	bl	8005868 <stall_transaction>
}
 8005a9c:	e7dc      	b.n	8005a58 <_usbd_control_in+0x1a>

08005a9e <usb_standard_set_address>:

static enum usbd_request_return_codes
usb_standard_set_address(usbd_device *usbd_dev,
			 struct usb_setup_data *req, uint8_t **buf,
			 uint16_t *len)
{
 8005a9e:	b510      	push	{r4, lr}
	(void)req;
	(void)buf;
	(void)len;

	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 8005aa0:	780c      	ldrb	r4, [r1, #0]
 8005aa2:	2c00      	cmp	r4, #0
 8005aa4:	d114      	bne.n	8005ad0 <usb_standard_set_address+0x32>
 8005aa6:	78cb      	ldrb	r3, [r1, #3]
 8005aa8:	788a      	ldrb	r2, [r1, #2]
 8005aaa:	021b      	lsls	r3, r3, #8
 8005aac:	4313      	orrs	r3, r2
 8005aae:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab0:	d80c      	bhi.n	8005acc <usb_standard_set_address+0x2e>
		return USBD_REQ_NOTSUPP;
	}

	usbd_dev->current_address = req->wValue;
 8005ab2:	7583      	strb	r3, [r0, #22]

	/*
	 * Special workaround for STM32F10[57] that require the address
	 * to be set here. This is undocumented!
	 */
	if (usbd_dev->driver->set_address_before_status) {
 8005ab4:	0003      	movs	r3, r0
 8005ab6:	33dc      	adds	r3, #220	; 0xdc
 8005ab8:	681b      	ldr	r3, [r3, #0]
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
	}

	return USBD_REQ_HANDLED;
 8005aba:	3401      	adds	r4, #1
	if (usbd_dev->driver->set_address_before_status) {
 8005abc:	001a      	movs	r2, r3
 8005abe:	3230      	adds	r2, #48	; 0x30
 8005ac0:	7812      	ldrb	r2, [r2, #0]
 8005ac2:	2a00      	cmp	r2, #0
 8005ac4:	d002      	beq.n	8005acc <usb_standard_set_address+0x2e>
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8005ac6:	7889      	ldrb	r1, [r1, #2]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	4798      	blx	r3
}
 8005acc:	0020      	movs	r0, r4
 8005ace:	bd10      	pop	{r4, pc}
		return USBD_REQ_NOTSUPP;
 8005ad0:	2400      	movs	r4, #0
 8005ad2:	e7fb      	b.n	8005acc <usb_standard_set_address+0x2e>

08005ad4 <usb_standard_set_configuration>:

static enum usbd_request_return_codes
usb_standard_set_configuration(usbd_device *usbd_dev,
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
 8005ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	(void)req;
	(void)buf;
	(void)len;

	if (req->wValue > 0) {
 8005ad6:	78ca      	ldrb	r2, [r1, #3]
 8005ad8:	788b      	ldrb	r3, [r1, #2]
 8005ada:	0212      	lsls	r2, r2, #8
{
 8005adc:	0004      	movs	r4, r0
 8005ade:	000d      	movs	r5, r1
	if (req->wValue > 0) {
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	d010      	beq.n	8005b06 <usb_standard_set_configuration+0x32>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8005ae4:	6803      	ldr	r3, [r0, #0]
			if (req->wValue
			    == usbd_dev->config[i].bConfigurationValue) {
 8005ae6:	260d      	movs	r6, #13
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8005ae8:	7c58      	ldrb	r0, [r3, #17]
 8005aea:	2300      	movs	r3, #0
 8005aec:	4298      	cmp	r0, r3
 8005aee:	d801      	bhi.n	8005af4 <usb_standard_set_configuration+0x20>
				found_index = i;
				break;
			}
		}
		if (found_index < 0) {
			return USBD_REQ_NOTSUPP;
 8005af0:	2000      	movs	r0, #0
			}
		}
	}

	return USBD_REQ_HANDLED;
}
 8005af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			    == usbd_dev->config[i].bConfigurationValue) {
 8005af4:	0031      	movs	r1, r6
 8005af6:	4359      	muls	r1, r3
 8005af8:	6867      	ldr	r7, [r4, #4]
 8005afa:	1879      	adds	r1, r7, r1
			if (req->wValue
 8005afc:	7949      	ldrb	r1, [r1, #5]
 8005afe:	4291      	cmp	r1, r2
 8005b00:	d003      	beq.n	8005b0a <usb_standard_set_configuration+0x36>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8005b02:	3301      	adds	r3, #1
 8005b04:	e7f2      	b.n	8005aec <usb_standard_set_configuration+0x18>
	int found_index = -1;
 8005b06:	2301      	movs	r3, #1
 8005b08:	425b      	negs	r3, r3
	usbd_dev->current_config = found_index + 1;
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	75e3      	strb	r3, [r4, #23]
	if (usbd_dev->current_config > 0) {
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10c      	bne.n	8005b2e <usb_standard_set_configuration+0x5a>
	usbd_dev->driver->ep_reset(usbd_dev);
 8005b14:	0023      	movs	r3, r4
	if (usbd_dev->user_callback_set_config[0]) {
 8005b16:	0026      	movs	r6, r4
	usbd_dev->driver->ep_reset(usbd_dev);
 8005b18:	33dc      	adds	r3, #220	; 0xdc
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	0020      	movs	r0, r4
 8005b1e:	68db      	ldr	r3, [r3, #12]
	if (usbd_dev->user_callback_set_config[0]) {
 8005b20:	36c8      	adds	r6, #200	; 0xc8
	usbd_dev->driver->ep_reset(usbd_dev);
 8005b22:	4798      	blx	r3
	if (usbd_dev->user_callback_set_config[0]) {
 8005b24:	6833      	ldr	r3, [r6, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d11c      	bne.n	8005b64 <usb_standard_set_configuration+0x90>
	return USBD_REQ_HANDLED;
 8005b2a:	2001      	movs	r0, #1
 8005b2c:	e7e1      	b.n	8005af2 <usb_standard_set_configuration+0x1e>
		cfg = &usbd_dev->config[usbd_dev->current_config - 1];
 8005b2e:	220d      	movs	r2, #13
 8005b30:	4353      	muls	r3, r2
 8005b32:	6862      	ldr	r2, [r4, #4]
 8005b34:	3b0d      	subs	r3, #13
 8005b36:	18d3      	adds	r3, r2, r3
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8005b38:	2200      	movs	r2, #0
				*cfg->interface[i].cur_altsetting = 0;
 8005b3a:	0016      	movs	r6, r2
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8005b3c:	7919      	ldrb	r1, [r3, #4]
 8005b3e:	4291      	cmp	r1, r2
 8005b40:	d9e8      	bls.n	8005b14 <usb_standard_set_configuration+0x40>
			if (cfg->interface[i].cur_altsetting) {
 8005b42:	7a98      	ldrb	r0, [r3, #10]
 8005b44:	7a59      	ldrb	r1, [r3, #9]
 8005b46:	0200      	lsls	r0, r0, #8
 8005b48:	4308      	orrs	r0, r1
 8005b4a:	7ad9      	ldrb	r1, [r3, #11]
 8005b4c:	0409      	lsls	r1, r1, #16
 8005b4e:	4308      	orrs	r0, r1
 8005b50:	7b19      	ldrb	r1, [r3, #12]
 8005b52:	0609      	lsls	r1, r1, #24
 8005b54:	4301      	orrs	r1, r0
 8005b56:	0110      	lsls	r0, r2, #4
 8005b58:	5841      	ldr	r1, [r0, r1]
 8005b5a:	2900      	cmp	r1, #0
 8005b5c:	d000      	beq.n	8005b60 <usb_standard_set_configuration+0x8c>
				*cfg->interface[i].cur_altsetting = 0;
 8005b5e:	700e      	strb	r6, [r1, #0]
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8005b60:	3201      	adds	r2, #1
 8005b62:	e7eb      	b.n	8005b3c <usb_standard_set_configuration+0x68>
			usbd_dev->user_control_callback[i].cb = NULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	0027      	movs	r7, r4
 8005b68:	64a3      	str	r3, [r4, #72]	; 0x48
 8005b6a:	6523      	str	r3, [r4, #80]	; 0x50
 8005b6c:	65a3      	str	r3, [r4, #88]	; 0x58
 8005b6e:	6623      	str	r3, [r4, #96]	; 0x60
		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8005b70:	37d8      	adds	r7, #216	; 0xd8
			if (usbd_dev->user_callback_set_config[i]) {
 8005b72:	6833      	ldr	r3, [r6, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <usb_standard_set_configuration+0xb0>
				usbd_dev->user_callback_set_config[i](usbd_dev,
 8005b78:	78e9      	ldrb	r1, [r5, #3]
 8005b7a:	78aa      	ldrb	r2, [r5, #2]
 8005b7c:	0209      	lsls	r1, r1, #8
 8005b7e:	0020      	movs	r0, r4
 8005b80:	4311      	orrs	r1, r2
 8005b82:	4798      	blx	r3
		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8005b84:	3604      	adds	r6, #4
 8005b86:	42b7      	cmp	r7, r6
 8005b88:	d1f3      	bne.n	8005b72 <usb_standard_set_configuration+0x9e>
 8005b8a:	e7ce      	b.n	8005b2a <usb_standard_set_configuration+0x56>

08005b8c <usb_standard_get_configuration>:
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
	(void)req;

	if (*len > 1) {
 8005b8c:	8819      	ldrh	r1, [r3, #0]
{
 8005b8e:	b510      	push	{r4, lr}
	if (*len > 1) {
 8005b90:	2901      	cmp	r1, #1
 8005b92:	d901      	bls.n	8005b98 <usb_standard_get_configuration+0xc>
		*len = 1;
 8005b94:	2101      	movs	r1, #1
 8005b96:	8019      	strh	r1, [r3, #0]
	}
	if (usbd_dev->current_config > 0) {
 8005b98:	7dc1      	ldrb	r1, [r0, #23]
 8005b9a:	6814      	ldr	r4, [r2, #0]
 8005b9c:	2900      	cmp	r1, #0
 8005b9e:	d008      	beq.n	8005bb2 <usb_standard_get_configuration+0x26>
		const struct usb_config_descriptor *cfg =
			&usbd_dev->config[usbd_dev->current_config - 1];
		(*buf)[0] = cfg->bConfigurationValue;
 8005ba0:	220d      	movs	r2, #13
 8005ba2:	4351      	muls	r1, r2
 8005ba4:	6843      	ldr	r3, [r0, #4]
 8005ba6:	185b      	adds	r3, r3, r1
 8005ba8:	3b0d      	subs	r3, #13
 8005baa:	795b      	ldrb	r3, [r3, #5]
 8005bac:	7023      	strb	r3, [r4, #0]
	} else {
		(*buf)[0] = 0;
	}

	return USBD_REQ_HANDLED;
}
 8005bae:	2001      	movs	r0, #1
 8005bb0:	bd10      	pop	{r4, pc}
		(*buf)[0] = 0;
 8005bb2:	7021      	strb	r1, [r4, #0]
 8005bb4:	e7fb      	b.n	8005bae <usb_standard_get_configuration+0x22>

08005bb6 <usb_standard_get_interface>:

static enum usbd_request_return_codes
usb_standard_get_interface(usbd_device *usbd_dev,
			   struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 8005bb6:	b570      	push	{r4, r5, r6, lr}
	uint8_t *cur_altsetting;
	const struct usb_config_descriptor *cfx =
		&usbd_dev->config[usbd_dev->current_config - 1];
 8005bb8:	240d      	movs	r4, #13
 8005bba:	7dc5      	ldrb	r5, [r0, #23]
	const struct usb_config_descriptor *cfx =
 8005bbc:	6840      	ldr	r0, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 8005bbe:	436c      	muls	r4, r5
 8005bc0:	3c0d      	subs	r4, #13
	const struct usb_config_descriptor *cfx =
 8005bc2:	1904      	adds	r4, r0, r4

	if (req->wIndex >= cfx->bNumInterfaces) {
 8005bc4:	794d      	ldrb	r5, [r1, #5]
 8005bc6:	7908      	ldrb	r0, [r1, #4]
 8005bc8:	7926      	ldrb	r6, [r4, #4]
 8005bca:	022d      	lsls	r5, r5, #8
 8005bcc:	4305      	orrs	r5, r0
		return USBD_REQ_NOTSUPP;
 8005bce:	2000      	movs	r0, #0
	if (req->wIndex >= cfx->bNumInterfaces) {
 8005bd0:	42ae      	cmp	r6, r5
 8005bd2:	d917      	bls.n	8005c04 <usb_standard_get_interface+0x4e>
	}

	*len = 1;
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	8018      	strh	r0, [r3, #0]
	cur_altsetting = cfx->interface[req->wIndex].cur_altsetting;
 8005bd8:	7aa3      	ldrb	r3, [r4, #10]
 8005bda:	7a60      	ldrb	r0, [r4, #9]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	4303      	orrs	r3, r0
 8005be0:	7ae0      	ldrb	r0, [r4, #11]
 8005be2:	0400      	lsls	r0, r0, #16
 8005be4:	4303      	orrs	r3, r0
 8005be6:	7b20      	ldrb	r0, [r4, #12]
 8005be8:	790c      	ldrb	r4, [r1, #4]
 8005bea:	0600      	lsls	r0, r0, #24
 8005bec:	4318      	orrs	r0, r3
 8005bee:	794b      	ldrb	r3, [r1, #5]
 8005bf0:	021b      	lsls	r3, r3, #8
 8005bf2:	4323      	orrs	r3, r4
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	581b      	ldr	r3, [r3, r0]
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 8005bf8:	1e19      	subs	r1, r3, #0
 8005bfa:	d000      	beq.n	8005bfe <usb_standard_get_interface+0x48>
 8005bfc:	7819      	ldrb	r1, [r3, #0]

	return USBD_REQ_HANDLED;
 8005bfe:	2001      	movs	r0, #1
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 8005c00:	6813      	ldr	r3, [r2, #0]
 8005c02:	7019      	strb	r1, [r3, #0]
}
 8005c04:	bd70      	pop	{r4, r5, r6, pc}

08005c06 <usb_standard_device_get_status>:
	(void)usbd_dev;
	(void)req;

	/* bit 0: self powered */
	/* bit 1: remote wakeup */
	if (*len > 2) {
 8005c06:	8819      	ldrh	r1, [r3, #0]
 8005c08:	2902      	cmp	r1, #2
 8005c0a:	d901      	bls.n	8005c10 <usb_standard_device_get_status+0xa>
		*len = 2;
 8005c0c:	2102      	movs	r1, #2
 8005c0e:	8019      	strh	r1, [r3, #0]
	}
	(*buf)[0] = 0;
 8005c10:	2300      	movs	r3, #0
 8005c12:	6811      	ldr	r1, [r2, #0]
	(*buf)[1] = 0;

	return USBD_REQ_HANDLED;
}
 8005c14:	2001      	movs	r0, #1
	(*buf)[0] = 0;
 8005c16:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	7053      	strb	r3, [r2, #1]
}
 8005c1c:	4770      	bx	lr

08005c1e <usb_standard_endpoint_get_status>:

static enum usbd_request_return_codes
usb_standard_endpoint_get_status(usbd_device *usbd_dev,
				 struct usb_setup_data *req,
				 uint8_t **buf, uint16_t *len)
{
 8005c1e:	b510      	push	{r4, lr}
 8005c20:	0014      	movs	r4, r2
	(void)req;

	if (*len > 2) {
 8005c22:	881a      	ldrh	r2, [r3, #0]
 8005c24:	2a02      	cmp	r2, #2
 8005c26:	d901      	bls.n	8005c2c <usb_standard_endpoint_get_status+0xe>
		*len = 2;
 8005c28:	2202      	movs	r2, #2
 8005c2a:	801a      	strh	r2, [r3, #0]
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8005c2c:	7909      	ldrb	r1, [r1, #4]
 8005c2e:	f7ff fdb2 	bl	8005796 <usbd_ep_stall_get>
 8005c32:	1e43      	subs	r3, r0, #1
 8005c34:	4198      	sbcs	r0, r3
	(*buf)[1] = 0;
 8005c36:	2200      	movs	r2, #0
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	7018      	strb	r0, [r3, #0]
	(*buf)[1] = 0;
 8005c3c:	6823      	ldr	r3, [r4, #0]

	return USBD_REQ_HANDLED;
}
 8005c3e:	2001      	movs	r0, #1
	(*buf)[1] = 0;
 8005c40:	705a      	strb	r2, [r3, #1]
}
 8005c42:	bd10      	pop	{r4, pc}

08005c44 <usb_standard_endpoint_stall>:

static enum usbd_request_return_codes
usb_standard_endpoint_stall(usbd_device *usbd_dev,
			    struct usb_setup_data *req,
			    uint8_t **buf, uint16_t *len)
{
 8005c44:	b510      	push	{r4, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 1);
 8005c46:	2201      	movs	r2, #1
 8005c48:	7909      	ldrb	r1, [r1, #4]
 8005c4a:	f7ff fd9d 	bl	8005788 <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 8005c4e:	2001      	movs	r0, #1
 8005c50:	bd10      	pop	{r4, pc}

08005c52 <usb_standard_endpoint_unstall>:

static enum usbd_request_return_codes
usb_standard_endpoint_unstall(usbd_device *usbd_dev,
			      struct usb_setup_data *req,
			      uint8_t **buf, uint16_t *len)
{
 8005c52:	b510      	push	{r4, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 0);
 8005c54:	2200      	movs	r2, #0
 8005c56:	7909      	ldrb	r1, [r1, #4]
 8005c58:	f7ff fd96 	bl	8005788 <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 8005c5c:	2001      	movs	r0, #1
 8005c5e:	bd10      	pop	{r4, pc}

08005c60 <usb_standard_set_interface>:
{
 8005c60:	b570      	push	{r4, r5, r6, lr}
		&usbd_dev->config[usbd_dev->current_config - 1];
 8005c62:	260d      	movs	r6, #13
{
 8005c64:	001d      	movs	r5, r3
		&usbd_dev->config[usbd_dev->current_config - 1];
 8005c66:	7dc3      	ldrb	r3, [r0, #23]
	if (req->wIndex >= cfx->bNumInterfaces) {
 8005c68:	794c      	ldrb	r4, [r1, #5]
		&usbd_dev->config[usbd_dev->current_config - 1];
 8005c6a:	435e      	muls	r6, r3
	const struct usb_config_descriptor *cfx =
 8005c6c:	6843      	ldr	r3, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 8005c6e:	3e0d      	subs	r6, #13
	const struct usb_config_descriptor *cfx =
 8005c70:	199e      	adds	r6, r3, r6
	if (req->wIndex >= cfx->bNumInterfaces) {
 8005c72:	790b      	ldrb	r3, [r1, #4]
 8005c74:	0224      	lsls	r4, r4, #8
 8005c76:	431c      	orrs	r4, r3
 8005c78:	7933      	ldrb	r3, [r6, #4]
		return USBD_REQ_NOTSUPP;
 8005c7a:	2200      	movs	r2, #0
	if (req->wIndex >= cfx->bNumInterfaces) {
 8005c7c:	42a3      	cmp	r3, r4
 8005c7e:	d92b      	bls.n	8005cd8 <usb_standard_set_interface+0x78>
	iface = &cfx->interface[req->wIndex];
 8005c80:	7ab2      	ldrb	r2, [r6, #10]
 8005c82:	7a73      	ldrb	r3, [r6, #9]
 8005c84:	0212      	lsls	r2, r2, #8
 8005c86:	431a      	orrs	r2, r3
 8005c88:	7af3      	ldrb	r3, [r6, #11]
 8005c8a:	0124      	lsls	r4, r4, #4
 8005c8c:	041b      	lsls	r3, r3, #16
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	7b33      	ldrb	r3, [r6, #12]
 8005c92:	061b      	lsls	r3, r3, #24
 8005c94:	4313      	orrs	r3, r2
 8005c96:	191b      	adds	r3, r3, r4
	if (req->wValue >= iface->num_altsetting) {
 8005c98:	78cc      	ldrb	r4, [r1, #3]
 8005c9a:	788a      	ldrb	r2, [r1, #2]
 8005c9c:	791e      	ldrb	r6, [r3, #4]
 8005c9e:	0224      	lsls	r4, r4, #8
 8005ca0:	4314      	orrs	r4, r2
		return USBD_REQ_NOTSUPP;
 8005ca2:	2200      	movs	r2, #0
	if (req->wValue >= iface->num_altsetting) {
 8005ca4:	42a6      	cmp	r6, r4
 8005ca6:	d917      	bls.n	8005cd8 <usb_standard_set_interface+0x78>
	if (iface->cur_altsetting) {
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	2a00      	cmp	r2, #0
 8005cac:	d012      	beq.n	8005cd4 <usb_standard_set_interface+0x74>
		*iface->cur_altsetting = req->wValue;
 8005cae:	7014      	strb	r4, [r2, #0]
	if (usbd_dev->user_callback_set_altsetting) {
 8005cb0:	0003      	movs	r3, r0
 8005cb2:	33d8      	adds	r3, #216	; 0xd8
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d008      	beq.n	8005ccc <usb_standard_set_interface+0x6c>
			usbd_dev->user_callback_set_altsetting(usbd_dev,
 8005cba:	78ca      	ldrb	r2, [r1, #3]
 8005cbc:	788c      	ldrb	r4, [r1, #2]
 8005cbe:	0212      	lsls	r2, r2, #8
 8005cc0:	4322      	orrs	r2, r4
 8005cc2:	790c      	ldrb	r4, [r1, #4]
 8005cc4:	7949      	ldrb	r1, [r1, #5]
 8005cc6:	0209      	lsls	r1, r1, #8
 8005cc8:	4321      	orrs	r1, r4
 8005cca:	4798      	blx	r3
	*len = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2201      	movs	r2, #1
 8005cd0:	802b      	strh	r3, [r5, #0]
	return USBD_REQ_HANDLED;
 8005cd2:	e001      	b.n	8005cd8 <usb_standard_set_interface+0x78>
	} else if (req->wValue > 0) {
 8005cd4:	2c00      	cmp	r4, #0
 8005cd6:	d0eb      	beq.n	8005cb0 <usb_standard_set_interface+0x50>
}
 8005cd8:	0010      	movs	r0, r2
 8005cda:	bd70      	pop	{r4, r5, r6, pc}

08005cdc <usb_standard_get_descriptor>:
{
 8005cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cde:	b08f      	sub	sp, #60	; 0x3c
 8005ce0:	9305      	str	r3, [sp, #20]
 8005ce2:	0014      	movs	r4, r2
	descr_idx = usb_descriptor_index(req->wValue);
 8005ce4:	78ca      	ldrb	r2, [r1, #3]
 8005ce6:	788b      	ldrb	r3, [r1, #2]
 8005ce8:	0212      	lsls	r2, r2, #8
 8005cea:	4313      	orrs	r3, r2
{
 8005cec:	0006      	movs	r6, r0
	return wValue >> 8;
 8005cee:	0a12      	lsrs	r2, r2, #8
	switch (usb_descriptor_type(req->wValue)) {
 8005cf0:	2a02      	cmp	r2, #2
 8005cf2:	d013      	beq.n	8005d1c <usb_standard_get_descriptor+0x40>
 8005cf4:	2a03      	cmp	r2, #3
 8005cf6:	d100      	bne.n	8005cfa <usb_standard_get_descriptor+0x1e>
 8005cf8:	e152      	b.n	8005fa0 <usb_standard_get_descriptor+0x2c4>
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	2a01      	cmp	r2, #1
 8005cfe:	d10b      	bne.n	8005d18 <usb_standard_get_descriptor+0x3c>
		*buf = (uint8_t *) usbd_dev->desc;
 8005d00:	6833      	ldr	r3, [r6, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 8005d02:	7819      	ldrb	r1, [r3, #0]
		*buf = (uint8_t *) usbd_dev->desc;
 8005d04:	6023      	str	r3, [r4, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 8005d06:	9b05      	ldr	r3, [sp, #20]
 8005d08:	881a      	ldrh	r2, [r3, #0]
 8005d0a:	1c0b      	adds	r3, r1, #0
 8005d0c:	4291      	cmp	r1, r2
 8005d0e:	d900      	bls.n	8005d12 <usb_standard_get_descriptor+0x36>
 8005d10:	1c13      	adds	r3, r2, #0
 8005d12:	9a05      	ldr	r2, [sp, #20]
 8005d14:	8013      	strh	r3, [r2, #0]
		return USBD_REQ_HANDLED;
 8005d16:	2001      	movs	r0, #1
}
 8005d18:	b00f      	add	sp, #60	; 0x3c
 8005d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*buf = usbd_dev->ctrl_buf;
 8005d1c:	6902      	ldr	r2, [r0, #16]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8005d1e:	b2db      	uxtb	r3, r3
		*buf = usbd_dev->ctrl_buf;
 8005d20:	6022      	str	r2, [r4, #0]
 8005d22:	9206      	str	r2, [sp, #24]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8005d24:	9a05      	ldr	r2, [sp, #20]
 8005d26:	8814      	ldrh	r4, [r2, #0]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8005d28:	220d      	movs	r2, #13
 8005d2a:	4353      	muls	r3, r2
 8005d2c:	6842      	ldr	r2, [r0, #4]
 8005d2e:	18d1      	adds	r1, r2, r3
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8005d30:	5cd3      	ldrb	r3, [r2, r3]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8005d32:	9104      	str	r1, [sp, #16]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8005d34:	1c1f      	adds	r7, r3, #0
 8005d36:	42a3      	cmp	r3, r4
 8005d38:	d900      	bls.n	8005d3c <usb_standard_get_descriptor+0x60>
 8005d3a:	1c27      	adds	r7, r4, #0
 8005d3c:	b2bb      	uxth	r3, r7
 8005d3e:	001a      	movs	r2, r3
 8005d40:	9904      	ldr	r1, [sp, #16]
 8005d42:	9806      	ldr	r0, [sp, #24]
 8005d44:	9303      	str	r3, [sp, #12]
 8005d46:	f000 fd6b 	bl	8006820 <memcpy>
	buf += count;
 8005d4a:	9a03      	ldr	r2, [sp, #12]
 8005d4c:	9b06      	ldr	r3, [sp, #24]
 8005d4e:	4694      	mov	ip, r2
	len -= count;
 8005d50:	1aa4      	subs	r4, r4, r2
	buf += count;
 8005d52:	4463      	add	r3, ip
 8005d54:	9302      	str	r3, [sp, #8]
	len -= count;
 8005d56:	b2a3      	uxth	r3, r4
 8005d58:	9301      	str	r3, [sp, #4]
	totallen += cfg->bLength;
 8005d5a:	9b04      	ldr	r3, [sp, #16]
 8005d5c:	781a      	ldrb	r2, [r3, #0]
 8005d5e:	ab0c      	add	r3, sp, #48	; 0x30
 8005d60:	80da      	strh	r2, [r3, #6]
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8005d62:	2300      	movs	r3, #0
 8005d64:	9307      	str	r3, [sp, #28]
 8005d66:	9b04      	ldr	r3, [sp, #16]
 8005d68:	791a      	ldrb	r2, [r3, #4]
 8005d6a:	466b      	mov	r3, sp
 8005d6c:	8b9b      	ldrh	r3, [r3, #28]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d80a      	bhi.n	8005d88 <usb_standard_get_descriptor+0xac>
	memcpy((tmpbuf + 2), &totallen, sizeof(uint16_t));
 8005d72:	9806      	ldr	r0, [sp, #24]
 8005d74:	ab0c      	add	r3, sp, #48	; 0x30
 8005d76:	2202      	movs	r2, #2
 8005d78:	1d99      	adds	r1, r3, #6
 8005d7a:	3002      	adds	r0, #2
 8005d7c:	f000 fd50 	bl	8006820 <memcpy>
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8005d80:	9b05      	ldr	r3, [sp, #20]
 8005d82:	9a03      	ldr	r2, [sp, #12]
 8005d84:	801a      	strh	r2, [r3, #0]
		return USBD_REQ_HANDLED;
 8005d86:	e7c6      	b.n	8005d16 <usb_standard_get_descriptor+0x3a>
		if (cfg->interface[i].iface_assoc) {
 8005d88:	9b07      	ldr	r3, [sp, #28]
 8005d8a:	9a04      	ldr	r2, [sp, #16]
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d90:	9b04      	ldr	r3, [sp, #16]
 8005d92:	7a92      	ldrb	r2, [r2, #10]
 8005d94:	7a5b      	ldrb	r3, [r3, #9]
 8005d96:	0212      	lsls	r2, r2, #8
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	9b04      	ldr	r3, [sp, #16]
 8005d9c:	7adb      	ldrb	r3, [r3, #11]
 8005d9e:	041b      	lsls	r3, r3, #16
 8005da0:	431a      	orrs	r2, r3
 8005da2:	9b04      	ldr	r3, [sp, #16]
 8005da4:	7b1b      	ldrb	r3, [r3, #12]
 8005da6:	061b      	lsls	r3, r3, #24
 8005da8:	4313      	orrs	r3, r2
 8005daa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005dac:	189b      	adds	r3, r3, r2
 8005dae:	689c      	ldr	r4, [r3, #8]
 8005db0:	2c00      	cmp	r4, #0
 8005db2:	d01d      	beq.n	8005df0 <usb_standard_get_descriptor+0x114>
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 8005db4:	7823      	ldrb	r3, [r4, #0]
 8005db6:	9a01      	ldr	r2, [sp, #4]
 8005db8:	1c1f      	adds	r7, r3, #0
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d901      	bls.n	8005dc2 <usb_standard_get_descriptor+0xe6>
 8005dbe:	466b      	mov	r3, sp
 8005dc0:	889f      	ldrh	r7, [r3, #4]
 8005dc2:	b2bf      	uxth	r7, r7
 8005dc4:	003a      	movs	r2, r7
 8005dc6:	0021      	movs	r1, r4
 8005dc8:	9802      	ldr	r0, [sp, #8]
 8005dca:	f000 fd29 	bl	8006820 <memcpy>
			buf += count;
 8005dce:	9b02      	ldr	r3, [sp, #8]
 8005dd0:	19db      	adds	r3, r3, r7
 8005dd2:	9302      	str	r3, [sp, #8]
			len -= count;
 8005dd4:	9b01      	ldr	r3, [sp, #4]
 8005dd6:	1bdb      	subs	r3, r3, r7
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	9301      	str	r3, [sp, #4]
			total += count;
 8005ddc:	9b03      	ldr	r3, [sp, #12]
 8005dde:	18ff      	adds	r7, r7, r3
 8005de0:	b2bb      	uxth	r3, r7
 8005de2:	9303      	str	r3, [sp, #12]
			totallen += assoc->bLength;
 8005de4:	ab0c      	add	r3, sp, #48	; 0x30
 8005de6:	1d9a      	adds	r2, r3, #6
 8005de8:	8811      	ldrh	r1, [r2, #0]
 8005dea:	7823      	ldrb	r3, [r4, #0]
 8005dec:	185b      	adds	r3, r3, r1
 8005dee:	8013      	strh	r3, [r2, #0]
{
 8005df0:	2300      	movs	r3, #0
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 8005df2:	9a04      	ldr	r2, [sp, #16]
 8005df4:	9308      	str	r3, [sp, #32]
 8005df6:	9b04      	ldr	r3, [sp, #16]
 8005df8:	7a92      	ldrb	r2, [r2, #10]
 8005dfa:	7a5b      	ldrb	r3, [r3, #9]
 8005dfc:	0212      	lsls	r2, r2, #8
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	9b04      	ldr	r3, [sp, #16]
 8005e02:	7adb      	ldrb	r3, [r3, #11]
 8005e04:	041b      	lsls	r3, r3, #16
 8005e06:	431a      	orrs	r2, r3
 8005e08:	9b04      	ldr	r3, [sp, #16]
 8005e0a:	7b1b      	ldrb	r3, [r3, #12]
 8005e0c:	061b      	lsls	r3, r3, #24
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e12:	189b      	adds	r3, r3, r2
 8005e14:	466a      	mov	r2, sp
 8005e16:	7919      	ldrb	r1, [r3, #4]
 8005e18:	8c12      	ldrh	r2, [r2, #32]
 8005e1a:	4291      	cmp	r1, r2
 8005e1c:	d802      	bhi.n	8005e24 <usb_standard_get_descriptor+0x148>
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8005e1e:	9b07      	ldr	r3, [sp, #28]
 8005e20:	3301      	adds	r3, #1
 8005e22:	e79f      	b.n	8005d64 <usb_standard_get_descriptor+0x88>
			const struct usb_interface_descriptor *iface =
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	2315      	movs	r3, #21
 8005e28:	9908      	ldr	r1, [sp, #32]
 8005e2a:	434b      	muls	r3, r1
 8005e2c:	18d4      	adds	r4, r2, r3
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8005e2e:	5cd3      	ldrb	r3, [r2, r3]
 8005e30:	9a01      	ldr	r2, [sp, #4]
 8005e32:	1c1f      	adds	r7, r3, #0
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d901      	bls.n	8005e3c <usb_standard_get_descriptor+0x160>
 8005e38:	466b      	mov	r3, sp
 8005e3a:	889f      	ldrh	r7, [r3, #4]
 8005e3c:	b2bf      	uxth	r7, r7
 8005e3e:	003a      	movs	r2, r7
 8005e40:	0021      	movs	r1, r4
 8005e42:	9802      	ldr	r0, [sp, #8]
 8005e44:	f000 fcec 	bl	8006820 <memcpy>
			buf += count;
 8005e48:	9b02      	ldr	r3, [sp, #8]
			totallen += iface->bLength;
 8005e4a:	7826      	ldrb	r6, [r4, #0]
			buf += count;
 8005e4c:	19db      	adds	r3, r3, r7
 8005e4e:	9302      	str	r3, [sp, #8]
			len -= count;
 8005e50:	9b01      	ldr	r3, [sp, #4]
 8005e52:	1bdb      	subs	r3, r3, r7
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	9301      	str	r3, [sp, #4]
			total += count;
 8005e58:	9b03      	ldr	r3, [sp, #12]
 8005e5a:	18ff      	adds	r7, r7, r3
 8005e5c:	b2bb      	uxth	r3, r7
 8005e5e:	9303      	str	r3, [sp, #12]
			totallen += iface->bLength;
 8005e60:	ab0c      	add	r3, sp, #48	; 0x30
 8005e62:	88da      	ldrh	r2, [r3, #6]
 8005e64:	18b6      	adds	r6, r6, r2
 8005e66:	b2b6      	uxth	r6, r6
 8005e68:	80de      	strh	r6, [r3, #6]
			if (iface->extra) {
 8005e6a:	7ba3      	ldrb	r3, [r4, #14]
 8005e6c:	7b61      	ldrb	r1, [r4, #13]
 8005e6e:	021b      	lsls	r3, r3, #8
 8005e70:	430b      	orrs	r3, r1
 8005e72:	7be1      	ldrb	r1, [r4, #15]
 8005e74:	0409      	lsls	r1, r1, #16
 8005e76:	430b      	orrs	r3, r1
 8005e78:	7c21      	ldrb	r1, [r4, #16]
 8005e7a:	0609      	lsls	r1, r1, #24
 8005e7c:	4319      	orrs	r1, r3
 8005e7e:	d024      	beq.n	8005eca <usb_standard_get_descriptor+0x1ee>
				       count = MIN(len, iface->extralen));
 8005e80:	7ca3      	ldrb	r3, [r4, #18]
 8005e82:	7c65      	ldrb	r5, [r4, #17]
 8005e84:	021b      	lsls	r3, r3, #8
 8005e86:	432b      	orrs	r3, r5
 8005e88:	7ce5      	ldrb	r5, [r4, #19]
 8005e8a:	042d      	lsls	r5, r5, #16
 8005e8c:	432b      	orrs	r3, r5
 8005e8e:	7d25      	ldrb	r5, [r4, #20]
 8005e90:	062d      	lsls	r5, r5, #24
 8005e92:	431d      	orrs	r5, r3
 8005e94:	9b01      	ldr	r3, [sp, #4]
 8005e96:	429d      	cmp	r5, r3
 8005e98:	dd00      	ble.n	8005e9c <usb_standard_get_descriptor+0x1c0>
 8005e9a:	001d      	movs	r5, r3
 8005e9c:	b2af      	uxth	r7, r5
				memcpy(buf, iface->extra,
 8005e9e:	003a      	movs	r2, r7
 8005ea0:	9802      	ldr	r0, [sp, #8]
 8005ea2:	f000 fcbd 	bl	8006820 <memcpy>
				buf += count;
 8005ea6:	9b02      	ldr	r3, [sp, #8]
 8005ea8:	19db      	adds	r3, r3, r7
 8005eaa:	9302      	str	r3, [sp, #8]
				len -= count;
 8005eac:	9b01      	ldr	r3, [sp, #4]
 8005eae:	1bdb      	subs	r3, r3, r7
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	9301      	str	r3, [sp, #4]
				total += count;
 8005eb4:	9b03      	ldr	r3, [sp, #12]
 8005eb6:	19df      	adds	r7, r3, r7
 8005eb8:	b2bb      	uxth	r3, r7
 8005eba:	9303      	str	r3, [sp, #12]
				totallen += iface->extralen;
 8005ebc:	7ca3      	ldrb	r3, [r4, #18]
 8005ebe:	7c62      	ldrb	r2, [r4, #17]
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	199e      	adds	r6, r3, r6
 8005ec6:	ab0c      	add	r3, sp, #48	; 0x30
 8005ec8:	80de      	strh	r6, [r3, #6]
{
 8005eca:	2300      	movs	r3, #0
 8005ecc:	9309      	str	r3, [sp, #36]	; 0x24
			for (k = 0; k < iface->bNumEndpoints; k++) {
 8005ece:	466b      	mov	r3, sp
 8005ed0:	7922      	ldrb	r2, [r4, #4]
 8005ed2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d802      	bhi.n	8005ede <usb_standard_get_descriptor+0x202>
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 8005ed8:	9b08      	ldr	r3, [sp, #32]
 8005eda:	3301      	adds	r3, #1
 8005edc:	e789      	b.n	8005df2 <usb_standard_get_descriptor+0x116>
				    &iface->endpoint[k];
 8005ede:	7aa2      	ldrb	r2, [r4, #10]
 8005ee0:	7a63      	ldrb	r3, [r4, #9]
 8005ee2:	0212      	lsls	r2, r2, #8
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	7ae3      	ldrb	r3, [r4, #11]
				const struct usb_endpoint_descriptor *ep =
 8005ee8:	9909      	ldr	r1, [sp, #36]	; 0x24
				    &iface->endpoint[k];
 8005eea:	041b      	lsls	r3, r3, #16
 8005eec:	431a      	orrs	r2, r3
 8005eee:	7b23      	ldrb	r3, [r4, #12]
 8005ef0:	061b      	lsls	r3, r3, #24
 8005ef2:	4313      	orrs	r3, r2
				const struct usb_endpoint_descriptor *ep =
 8005ef4:	220f      	movs	r2, #15
 8005ef6:	434a      	muls	r2, r1
 8005ef8:	189d      	adds	r5, r3, r2
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 8005efa:	5c9b      	ldrb	r3, [r3, r2]
 8005efc:	9a01      	ldr	r2, [sp, #4]
 8005efe:	1c1f      	adds	r7, r3, #0
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d901      	bls.n	8005f08 <usb_standard_get_descriptor+0x22c>
 8005f04:	466b      	mov	r3, sp
 8005f06:	889f      	ldrh	r7, [r3, #4]
 8005f08:	b2bf      	uxth	r7, r7
 8005f0a:	003a      	movs	r2, r7
 8005f0c:	0029      	movs	r1, r5
 8005f0e:	9802      	ldr	r0, [sp, #8]
 8005f10:	f000 fc86 	bl	8006820 <memcpy>
				buf += count;
 8005f14:	9b02      	ldr	r3, [sp, #8]
				totallen += ep->bLength;
 8005f16:	aa0c      	add	r2, sp, #48	; 0x30
				buf += count;
 8005f18:	19db      	adds	r3, r3, r7
 8005f1a:	9302      	str	r3, [sp, #8]
				len -= count;
 8005f1c:	9b01      	ldr	r3, [sp, #4]
				totallen += ep->bLength;
 8005f1e:	88d1      	ldrh	r1, [r2, #6]
				len -= count;
 8005f20:	1bdb      	subs	r3, r3, r7
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	9301      	str	r3, [sp, #4]
				total += count;
 8005f26:	9b03      	ldr	r3, [sp, #12]
 8005f28:	18ff      	adds	r7, r7, r3
 8005f2a:	b2bb      	uxth	r3, r7
 8005f2c:	9303      	str	r3, [sp, #12]
				totallen += ep->bLength;
 8005f2e:	782b      	ldrb	r3, [r5, #0]
 8005f30:	185b      	adds	r3, r3, r1
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	930a      	str	r3, [sp, #40]	; 0x28
 8005f36:	80d3      	strh	r3, [r2, #6]
				if (ep->extra) {
 8005f38:	7a2b      	ldrb	r3, [r5, #8]
 8005f3a:	79e9      	ldrb	r1, [r5, #7]
 8005f3c:	021b      	lsls	r3, r3, #8
 8005f3e:	430b      	orrs	r3, r1
 8005f40:	7a69      	ldrb	r1, [r5, #9]
 8005f42:	0409      	lsls	r1, r1, #16
 8005f44:	430b      	orrs	r3, r1
 8005f46:	7aa9      	ldrb	r1, [r5, #10]
 8005f48:	0609      	lsls	r1, r1, #24
 8005f4a:	4319      	orrs	r1, r3
 8005f4c:	d025      	beq.n	8005f9a <usb_standard_get_descriptor+0x2be>
					       count = MIN(len, ep->extralen));
 8005f4e:	7b2b      	ldrb	r3, [r5, #12]
 8005f50:	7aee      	ldrb	r6, [r5, #11]
 8005f52:	021b      	lsls	r3, r3, #8
 8005f54:	4333      	orrs	r3, r6
 8005f56:	7b6e      	ldrb	r6, [r5, #13]
 8005f58:	0436      	lsls	r6, r6, #16
 8005f5a:	4333      	orrs	r3, r6
 8005f5c:	7bae      	ldrb	r6, [r5, #14]
 8005f5e:	0636      	lsls	r6, r6, #24
 8005f60:	431e      	orrs	r6, r3
 8005f62:	9b01      	ldr	r3, [sp, #4]
 8005f64:	429e      	cmp	r6, r3
 8005f66:	dd00      	ble.n	8005f6a <usb_standard_get_descriptor+0x28e>
 8005f68:	001e      	movs	r6, r3
 8005f6a:	b2b7      	uxth	r7, r6
					memcpy(buf, ep->extra,
 8005f6c:	003a      	movs	r2, r7
 8005f6e:	9802      	ldr	r0, [sp, #8]
 8005f70:	f000 fc56 	bl	8006820 <memcpy>
					buf += count;
 8005f74:	9b02      	ldr	r3, [sp, #8]
 8005f76:	19db      	adds	r3, r3, r7
 8005f78:	9302      	str	r3, [sp, #8]
					len -= count;
 8005f7a:	9b01      	ldr	r3, [sp, #4]
 8005f7c:	1bdb      	subs	r3, r3, r7
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	9301      	str	r3, [sp, #4]
					total += count;
 8005f82:	9b03      	ldr	r3, [sp, #12]
 8005f84:	19df      	adds	r7, r3, r7
 8005f86:	b2bb      	uxth	r3, r7
 8005f88:	9303      	str	r3, [sp, #12]
					totallen += ep->extralen;
 8005f8a:	7b2b      	ldrb	r3, [r5, #12]
 8005f8c:	7aea      	ldrb	r2, [r5, #11]
 8005f8e:	021b      	lsls	r3, r3, #8
 8005f90:	4313      	orrs	r3, r2
 8005f92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f94:	189b      	adds	r3, r3, r2
 8005f96:	aa0c      	add	r2, sp, #48	; 0x30
 8005f98:	80d3      	strh	r3, [r2, #6]
			for (k = 0; k < iface->bNumEndpoints; k++) {
 8005f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	e795      	b.n	8005ecc <usb_standard_get_descriptor+0x1f0>
 8005fa0:	b2db      	uxtb	r3, r3
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;
 8005fa2:	6905      	ldr	r5, [r0, #16]
		if (descr_idx == 0) {
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d110      	bne.n	8005fca <usb_standard_get_descriptor+0x2ee>
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 8005fa8:	3309      	adds	r3, #9
 8005faa:	70ab      	strb	r3, [r5, #2]
 8005fac:	3b05      	subs	r3, #5
 8005fae:	70eb      	strb	r3, [r5, #3]
			*len = MIN(*len, sd->bLength);
 8005fb0:	9a05      	ldr	r2, [sp, #20]
			sd->bLength = sizeof(sd->bLength) +
 8005fb2:	702b      	strb	r3, [r5, #0]
			*len = MIN(*len, sd->bLength);
 8005fb4:	8811      	ldrh	r1, [r2, #0]
 8005fb6:	1c0a      	adds	r2, r1, #0
 8005fb8:	4299      	cmp	r1, r3
 8005fba:	d900      	bls.n	8005fbe <usb_standard_get_descriptor+0x2e2>
 8005fbc:	1c1a      	adds	r2, r3, #0
 8005fbe:	9b05      	ldr	r3, [sp, #20]
 8005fc0:	801a      	strh	r2, [r3, #0]
		sd->bDescriptorType = USB_DT_STRING;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	706b      	strb	r3, [r5, #1]
		*buf = (uint8_t *)sd;
 8005fc6:	6025      	str	r5, [r4, #0]
 8005fc8:	e6a5      	b.n	8005d16 <usb_standard_get_descriptor+0x3a>
			if (!usbd_dev->strings) {
 8005fca:	6887      	ldr	r7, [r0, #8]
			array_idx = descr_idx - 1;
 8005fcc:	3b01      	subs	r3, #1
				return USBD_REQ_NOTSUPP;
 8005fce:	1e38      	subs	r0, r7, #0
			if (!usbd_dev->strings) {
 8005fd0:	d100      	bne.n	8005fd4 <usb_standard_get_descriptor+0x2f8>
 8005fd2:	e6a1      	b.n	8005d18 <usb_standard_get_descriptor+0x3c>
			if (array_idx >= usbd_dev->num_strings) {
 8005fd4:	68f2      	ldr	r2, [r6, #12]
				return USBD_REQ_NOTSUPP;
 8005fd6:	2000      	movs	r0, #0
			if (array_idx >= usbd_dev->num_strings) {
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	dc00      	bgt.n	8005fde <usb_standard_get_descriptor+0x302>
 8005fdc:	e69c      	b.n	8005d18 <usb_standard_get_descriptor+0x3c>
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 8005fde:	794a      	ldrb	r2, [r1, #5]
 8005fe0:	7908      	ldrb	r0, [r1, #4]
 8005fe2:	4913      	ldr	r1, [pc, #76]	; (8006030 <usb_standard_get_descriptor+0x354>)
 8005fe4:	0212      	lsls	r2, r2, #8
 8005fe6:	4302      	orrs	r2, r0
				return USBD_REQ_NOTSUPP;
 8005fe8:	2000      	movs	r0, #0
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 8005fea:	428a      	cmp	r2, r1
 8005fec:	d000      	beq.n	8005ff0 <usb_standard_get_descriptor+0x314>
 8005fee:	e693      	b.n	8005d18 <usb_standard_get_descriptor+0x3c>
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	59de      	ldr	r6, [r3, r7]
 8005ff4:	0030      	movs	r0, r6
 8005ff6:	f000 fc8d 	bl	8006914 <strlen>
				      sizeof(sd->bLength) +
 8005ffa:	3001      	adds	r0, #1
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8005ffc:	0040      	lsls	r0, r0, #1
			*len = MIN(*len, sd->bLength);
 8005ffe:	9b05      	ldr	r3, [sp, #20]
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8006000:	b2c0      	uxtb	r0, r0
 8006002:	7028      	strb	r0, [r5, #0]
			*len = MIN(*len, sd->bLength);
 8006004:	881a      	ldrh	r2, [r3, #0]
 8006006:	1c13      	adds	r3, r2, #0
 8006008:	4282      	cmp	r2, r0
 800600a:	d900      	bls.n	800600e <usb_standard_get_descriptor+0x332>
 800600c:	1c03      	adds	r3, r0, #0
 800600e:	9a05      	ldr	r2, [sp, #20]
 8006010:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < (*len / 2) - 1; i++) {
 8006012:	2300      	movs	r3, #0
 8006014:	9a05      	ldr	r2, [sp, #20]
 8006016:	8812      	ldrh	r2, [r2, #0]
 8006018:	0852      	lsrs	r2, r2, #1
 800601a:	3a01      	subs	r2, #1
 800601c:	429a      	cmp	r2, r3
 800601e:	ddd0      	ble.n	8005fc2 <usb_standard_get_descriptor+0x2e6>
				sd->wData[i] =
 8006020:	5cf1      	ldrb	r1, [r6, r3]
 8006022:	005a      	lsls	r2, r3, #1
 8006024:	18aa      	adds	r2, r5, r2
 8006026:	7091      	strb	r1, [r2, #2]
 8006028:	2100      	movs	r1, #0
			for (i = 0; i < (*len / 2) - 1; i++) {
 800602a:	3301      	adds	r3, #1
				sd->wData[i] =
 800602c:	70d1      	strb	r1, [r2, #3]
			for (i = 0; i < (*len / 2) - 1; i++) {
 800602e:	e7f1      	b.n	8006014 <usb_standard_get_descriptor+0x338>
 8006030:	00000409 	.word	0x00000409

08006034 <usb_standard_interface_get_status>:
 8006034:	8819      	ldrh	r1, [r3, #0]
 8006036:	2902      	cmp	r1, #2
 8006038:	d901      	bls.n	800603e <usb_standard_interface_get_status+0xa>
 800603a:	2102      	movs	r1, #2
 800603c:	8019      	strh	r1, [r3, #0]
 800603e:	2300      	movs	r3, #0
 8006040:	6811      	ldr	r1, [r2, #0]
 8006042:	2001      	movs	r0, #1
 8006044:	700b      	strb	r3, [r1, #0]
 8006046:	6812      	ldr	r2, [r2, #0]
 8006048:	7053      	strb	r3, [r2, #1]
 800604a:	4770      	bx	lr

0800604c <usbd_register_set_config_callback>:
{
 800604c:	b510      	push	{r4, lr}
		if (usbd_dev->user_callback_set_config[i]) {
 800604e:	0004      	movs	r4, r0
{
 8006050:	0002      	movs	r2, r0
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8006052:	2300      	movs	r3, #0
		if (usbd_dev->user_callback_set_config[i]) {
 8006054:	34c8      	adds	r4, #200	; 0xc8
 8006056:	0098      	lsls	r0, r3, #2
 8006058:	5820      	ldr	r0, [r4, r0]
 800605a:	2800      	cmp	r0, #0
 800605c:	d007      	beq.n	800606e <usbd_register_set_config_callback+0x22>
			if (usbd_dev->user_callback_set_config[i] == callback) {
 800605e:	4288      	cmp	r0, r1
 8006060:	d009      	beq.n	8006076 <usbd_register_set_config_callback+0x2a>
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8006062:	3301      	adds	r3, #1
 8006064:	2b04      	cmp	r3, #4
 8006066:	d1f6      	bne.n	8006056 <usbd_register_set_config_callback+0xa>
	return -1;
 8006068:	2001      	movs	r0, #1
 800606a:	4240      	negs	r0, r0
}
 800606c:	bd10      	pop	{r4, pc}
		usbd_dev->user_callback_set_config[i] = callback;
 800606e:	3332      	adds	r3, #50	; 0x32
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	5099      	str	r1, [r3, r2]
		return 0;
 8006074:	e7fa      	b.n	800606c <usbd_register_set_config_callback+0x20>
				return 0;
 8006076:	2000      	movs	r0, #0
 8006078:	e7f8      	b.n	800606c <usbd_register_set_config_callback+0x20>
	...

0800607c <_usbd_standard_request_device>:

enum usbd_request_return_codes
_usbd_standard_request_device(usbd_device *usbd_dev,
			      struct usb_setup_data *req, uint8_t **buf,
			      uint16_t *len)
{
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	0005      	movs	r5, r0
 8006080:	7848      	ldrb	r0, [r1, #1]
 8006082:	2809      	cmp	r0, #9
 8006084:	d812      	bhi.n	80060ac <_usbd_standard_request_device+0x30>
 8006086:	f000 fc5f 	bl	8006948 <__gnu_thumb1_case_uqi>
 800608a:	110d      	.short	0x110d
 800608c:	0f111111 	.word	0x0f111111
 8006090:	0509110b 	.word	0x0509110b
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8006094:	4c06      	ldr	r4, [pc, #24]	; (80060b0 <_usbd_standard_request_device+0x34>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 8006096:	0028      	movs	r0, r5
 8006098:	47a0      	blx	r4
}
 800609a:	bd70      	pop	{r4, r5, r6, pc}
		command = usb_standard_get_configuration;
 800609c:	4c05      	ldr	r4, [pc, #20]	; (80060b4 <_usbd_standard_request_device+0x38>)
		break;
 800609e:	e7fa      	b.n	8006096 <_usbd_standard_request_device+0x1a>
		command = usb_standard_get_descriptor;
 80060a0:	4c05      	ldr	r4, [pc, #20]	; (80060b8 <_usbd_standard_request_device+0x3c>)
		break;
 80060a2:	e7f8      	b.n	8006096 <_usbd_standard_request_device+0x1a>
		command = usb_standard_device_get_status;
 80060a4:	4c05      	ldr	r4, [pc, #20]	; (80060bc <_usbd_standard_request_device+0x40>)
		break;
 80060a6:	e7f6      	b.n	8006096 <_usbd_standard_request_device+0x1a>
		command = usb_standard_set_address;
 80060a8:	4c05      	ldr	r4, [pc, #20]	; (80060c0 <_usbd_standard_request_device+0x44>)
 80060aa:	e7f4      	b.n	8006096 <_usbd_standard_request_device+0x1a>
	switch (req->bRequest) {
 80060ac:	2000      	movs	r0, #0
 80060ae:	e7f4      	b.n	800609a <_usbd_standard_request_device+0x1e>
 80060b0:	08005ad5 	.word	0x08005ad5
 80060b4:	08005b8d 	.word	0x08005b8d
 80060b8:	08005cdd 	.word	0x08005cdd
 80060bc:	08005c07 	.word	0x08005c07
 80060c0:	08005a9f 	.word	0x08005a9f

080060c4 <_usbd_standard_request_interface>:

enum usbd_request_return_codes
_usbd_standard_request_interface(usbd_device *usbd_dev,
				 struct usb_setup_data *req, uint8_t **buf,
				 uint16_t *len)
{
 80060c4:	b570      	push	{r4, r5, r6, lr}
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 80060c6:	784c      	ldrb	r4, [r1, #1]
{
 80060c8:	0005      	movs	r5, r0
	switch (req->bRequest) {
 80060ca:	2c0a      	cmp	r4, #10
 80060cc:	d008      	beq.n	80060e0 <_usbd_standard_request_interface+0x1c>
 80060ce:	2c0b      	cmp	r4, #11
 80060d0:	d008      	beq.n	80060e4 <_usbd_standard_request_interface+0x20>
 80060d2:	2000      	movs	r0, #0
 80060d4:	4284      	cmp	r4, r0
 80060d6:	d102      	bne.n	80060de <_usbd_standard_request_interface+0x1a>
		break;
	case USB_REQ_SET_INTERFACE:
		command = usb_standard_set_interface;
		break;
	case USB_REQ_GET_STATUS:
		command = usb_standard_interface_get_status;
 80060d8:	4c03      	ldr	r4, [pc, #12]	; (80060e8 <_usbd_standard_request_interface+0x24>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 80060da:	0028      	movs	r0, r5
 80060dc:	47a0      	blx	r4
}
 80060de:	bd70      	pop	{r4, r5, r6, pc}
		command = usb_standard_get_interface;
 80060e0:	4c02      	ldr	r4, [pc, #8]	; (80060ec <_usbd_standard_request_interface+0x28>)
 80060e2:	e7fa      	b.n	80060da <_usbd_standard_request_interface+0x16>
	switch (req->bRequest) {
 80060e4:	4c02      	ldr	r4, [pc, #8]	; (80060f0 <_usbd_standard_request_interface+0x2c>)
 80060e6:	e7f8      	b.n	80060da <_usbd_standard_request_interface+0x16>
 80060e8:	08006035 	.word	0x08006035
 80060ec:	08005bb7 	.word	0x08005bb7
 80060f0:	08005c61 	.word	0x08005c61

080060f4 <_usbd_standard_request_endpoint>:

enum usbd_request_return_codes
_usbd_standard_request_endpoint(usbd_device *usbd_dev,
				struct usb_setup_data *req, uint8_t **buf,
				uint16_t *len)
{
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	0005      	movs	r5, r0
	enum usbd_request_return_codes (*command) (usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 80060f8:	7848      	ldrb	r0, [r1, #1]
 80060fa:	2801      	cmp	r0, #1
 80060fc:	d005      	beq.n	800610a <_usbd_standard_request_endpoint+0x16>
 80060fe:	2803      	cmp	r0, #3
 8006100:	d00c      	beq.n	800611c <_usbd_standard_request_endpoint+0x28>
 8006102:	2800      	cmp	r0, #0
 8006104:	d013      	beq.n	800612e <_usbd_standard_request_endpoint+0x3a>
		 */
		break;
	}

	if (!command) {
		return USBD_REQ_NOTSUPP;
 8006106:	2000      	movs	r0, #0
	}

	return command(usbd_dev, req, buf, len);
}
 8006108:	bd70      	pop	{r4, r5, r6, pc}
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 800610a:	78c8      	ldrb	r0, [r1, #3]
 800610c:	788c      	ldrb	r4, [r1, #2]
 800610e:	0200      	lsls	r0, r0, #8
 8006110:	4320      	orrs	r0, r4
			command = usb_standard_endpoint_unstall;
 8006112:	4c08      	ldr	r4, [pc, #32]	; (8006134 <_usbd_standard_request_endpoint+0x40>)
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8006114:	d1f7      	bne.n	8006106 <_usbd_standard_request_endpoint+0x12>
	return command(usbd_dev, req, buf, len);
 8006116:	0028      	movs	r0, r5
 8006118:	47a0      	blx	r4
 800611a:	e7f5      	b.n	8006108 <_usbd_standard_request_endpoint+0x14>
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 800611c:	78cc      	ldrb	r4, [r1, #3]
 800611e:	7888      	ldrb	r0, [r1, #2]
 8006120:	0224      	lsls	r4, r4, #8
 8006122:	4304      	orrs	r4, r0
		return USBD_REQ_NOTSUPP;
 8006124:	2000      	movs	r0, #0
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8006126:	4284      	cmp	r4, r0
 8006128:	d1ee      	bne.n	8006108 <_usbd_standard_request_endpoint+0x14>
			command = usb_standard_endpoint_stall;
 800612a:	4c03      	ldr	r4, [pc, #12]	; (8006138 <_usbd_standard_request_endpoint+0x44>)
 800612c:	e7f3      	b.n	8006116 <_usbd_standard_request_endpoint+0x22>
	switch (req->bRequest) {
 800612e:	4c03      	ldr	r4, [pc, #12]	; (800613c <_usbd_standard_request_endpoint+0x48>)
 8006130:	e7f1      	b.n	8006116 <_usbd_standard_request_endpoint+0x22>
 8006132:	46c0      	nop			; (mov r8, r8)
 8006134:	08005c53 	.word	0x08005c53
 8006138:	08005c45 	.word	0x08005c45
 800613c:	08005c1f 	.word	0x08005c1f

08006140 <_usbd_standard_request>:

enum usbd_request_return_codes
_usbd_standard_request(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len)
{
 8006140:	b570      	push	{r4, r5, r6, lr}
	/* FIXME: Have class/vendor requests as well. */
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) {
 8006142:	780d      	ldrb	r5, [r1, #0]
 8006144:	2660      	movs	r6, #96	; 0x60
 8006146:	002c      	movs	r4, r5
 8006148:	4034      	ands	r4, r6
 800614a:	4235      	tst	r5, r6
 800614c:	d112      	bne.n	8006174 <_usbd_standard_request+0x34>
		return USBD_REQ_NOTSUPP;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
 800614e:	3e41      	subs	r6, #65	; 0x41
 8006150:	4035      	ands	r5, r6
 8006152:	2d01      	cmp	r5, #1
 8006154:	d008      	beq.n	8006168 <_usbd_standard_request+0x28>
 8006156:	2d02      	cmp	r5, #2
 8006158:	d009      	beq.n	800616e <_usbd_standard_request+0x2e>
 800615a:	2d00      	cmp	r5, #0
 800615c:	d102      	bne.n	8006164 <_usbd_standard_request+0x24>
	case USB_REQ_TYPE_DEVICE:
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
 800615e:	f7ff ff8d 	bl	800607c <_usbd_standard_request_device>
	case USB_REQ_TYPE_INTERFACE:
		return _usbd_standard_request_interface(usbd_dev, req,
							buf, len);
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 8006162:	0004      	movs	r4, r0
	default:
		return USBD_REQ_NOTSUPP;
	}
}
 8006164:	0020      	movs	r0, r4
 8006166:	bd70      	pop	{r4, r5, r6, pc}
		return _usbd_standard_request_interface(usbd_dev, req,
 8006168:	f7ff ffac 	bl	80060c4 <_usbd_standard_request_interface>
 800616c:	e7f9      	b.n	8006162 <_usbd_standard_request+0x22>
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 800616e:	f7ff ffc1 	bl	80060f4 <_usbd_standard_request_endpoint>
 8006172:	e7f6      	b.n	8006162 <_usbd_standard_request+0x22>
		return USBD_REQ_NOTSUPP;
 8006174:	2400      	movs	r4, #0
 8006176:	e7f5      	b.n	8006164 <_usbd_standard_request+0x24>

08006178 <st_usbfs_set_address>:

void st_usbfs_set_address(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	/* Set device address and enable. */
	SET_REG(USB_DADDR_REG, (addr & USB_DADDR_ADDR) | USB_DADDR_EF);
 8006178:	2380      	movs	r3, #128	; 0x80
 800617a:	4319      	orrs	r1, r3
 800617c:	4b01      	ldr	r3, [pc, #4]	; (8006184 <st_usbfs_set_address+0xc>)
 800617e:	6019      	str	r1, [r3, #0]
}
 8006180:	4770      	bx	lr
 8006182:	46c0      	nop			; (mov r8, r8)
 8006184:	40005c4c 	.word	0x40005c4c

08006188 <st_usbfs_set_ep_rx_bufsize>:
	 *	0		0		0			??? "Not allowed" according to RM0091, RM0008
	 *	1		0		1			2
	 *	61		0		31			62
	 *	63		1		1			64
	 */
	if (size > 62) {
 8006188:	2a3e      	cmp	r2, #62	; 0x3e
 800618a:	d910      	bls.n	80061ae <st_usbfs_set_ep_rx_bufsize+0x26>
		/* Round up, div by 32 and sub 1 == (size + 31)/32 - 1 == (size-1)/32)*/
		size = ((size - 1) >> 5) & 0x1F;
		realsize = (size + 1) << 5;
		/* Set BL_SIZE bit (no macro for this) */
		size |= (1<<5);
 800618c:	2320      	movs	r3, #32
		size = ((size - 1) >> 5) & 0x1F;
 800618e:	3a01      	subs	r2, #1
 8006190:	0592      	lsls	r2, r2, #22
 8006192:	0ed2      	lsrs	r2, r2, #27
		realsize = (size + 1) << 5;
 8006194:	0150      	lsls	r0, r2, #5
 8006196:	3020      	adds	r0, #32
		size |= (1<<5);
 8006198:	431a      	orrs	r2, r3
		/* round up and div by 2 */
		size = (size + 1) >> 1;
		realsize = size << 1;
	}
	/* write to the BL_SIZE and NUM_BLOCK fields */
	USB_SET_EP_RX_COUNT(ep, size << 10);
 800619a:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <st_usbfs_set_ep_rx_bufsize+0x30>)
 800619c:	00c9      	lsls	r1, r1, #3
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	0292      	lsls	r2, r2, #10
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	18c9      	adds	r1, r1, r3
 80061a6:	4b05      	ldr	r3, [pc, #20]	; (80061bc <st_usbfs_set_ep_rx_bufsize+0x34>)
 80061a8:	18c9      	adds	r1, r1, r3
 80061aa:	800a      	strh	r2, [r1, #0]
	return realsize;
}
 80061ac:	4770      	bx	lr
		size = (size + 1) >> 1;
 80061ae:	3201      	adds	r2, #1
 80061b0:	0852      	lsrs	r2, r2, #1
		realsize = size << 1;
 80061b2:	0050      	lsls	r0, r2, #1
 80061b4:	b280      	uxth	r0, r0
 80061b6:	e7f0      	b.n	800619a <st_usbfs_set_ep_rx_bufsize+0x12>
 80061b8:	40005c50 	.word	0x40005c50
 80061bc:	40006006 	.word	0x40006006

080061c0 <st_usbfs_ep_setup>:

void st_usbfs_ep_setup(usbd_device *dev, uint8_t addr, uint8_t type,
		uint16_t max_size,
		void (*callback) (usbd_device *usbd_dev,
		uint8_t ep))
{
 80061c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061c2:	0005      	movs	r5, r0
	/* Translate USB standard type codes to STM32. */
	const uint16_t typelookup[] = {
 80061c4:	4837      	ldr	r0, [pc, #220]	; (80062a4 <st_usbfs_ep_setup+0xe4>)
{
 80061c6:	b085      	sub	sp, #20
	const uint16_t typelookup[] = {
 80061c8:	9002      	str	r0, [sp, #8]
 80061ca:	20c0      	movs	r0, #192	; 0xc0
		[USB_ENDPOINT_ATTR_ISOCHRONOUS] = USB_EP_TYPE_ISO,
		[USB_ENDPOINT_ATTR_BULK] = USB_EP_TYPE_BULK,
		[USB_ENDPOINT_ATTR_INTERRUPT] = USB_EP_TYPE_INTERRUPT,
	};
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;
 80061cc:	267f      	movs	r6, #127	; 0x7f
	const uint16_t typelookup[] = {
 80061ce:	04c0      	lsls	r0, r0, #19
 80061d0:	9003      	str	r0, [sp, #12]
	addr &= 0x7f;
 80061d2:	400e      	ands	r6, r1

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
 80061d4:	4834      	ldr	r0, [pc, #208]	; (80062a8 <st_usbfs_ep_setup+0xe8>)
 80061d6:	00b4      	lsls	r4, r6, #2
 80061d8:	1824      	adds	r4, r4, r0
 80061da:	6820      	ldr	r0, [r4, #0]
 80061dc:	4f33      	ldr	r7, [pc, #204]	; (80062ac <st_usbfs_ep_setup+0xec>)
	USB_SET_EP_TYPE(addr, typelookup[type]);
 80061de:	0052      	lsls	r2, r2, #1
	USB_SET_EP_ADDR(addr, addr);
 80061e0:	4038      	ands	r0, r7
 80061e2:	4330      	orrs	r0, r6
 80061e4:	b280      	uxth	r0, r0
 80061e6:	6020      	str	r0, [r4, #0]
	USB_SET_EP_TYPE(addr, typelookup[type]);
 80061e8:	6827      	ldr	r7, [r4, #0]
 80061ea:	4831      	ldr	r0, [pc, #196]	; (80062b0 <st_usbfs_ep_setup+0xf0>)
 80061ec:	4038      	ands	r0, r7
 80061ee:	af02      	add	r7, sp, #8
 80061f0:	5bd2      	ldrh	r2, [r2, r7]
 80061f2:	4f30      	ldr	r7, [pc, #192]	; (80062b4 <st_usbfs_ep_setup+0xf4>)
 80061f4:	4310      	orrs	r0, r2
 80061f6:	b280      	uxth	r0, r0
 80061f8:	b24a      	sxtb	r2, r1
 80061fa:	6020      	str	r0, [r4, #0]

	if (dir || (addr == 0)) {
 80061fc:	4694      	mov	ip, r2
 80061fe:	482e      	ldr	r0, [pc, #184]	; (80062b8 <st_usbfs_ep_setup+0xf8>)
 8006200:	2a00      	cmp	r2, #0
 8006202:	db22      	blt.n	800624a <st_usbfs_ep_setup+0x8a>
 8006204:	2e00      	cmp	r6, #0
 8006206:	d020      	beq.n	800624a <st_usbfs_ep_setup+0x8a>
		dev->pm_top += max_size;
	}

	if (!dir) {
		uint16_t realsize;
		USB_SET_EP_RX_ADDR(addr, dev->pm_top);
 8006208:	6800      	ldr	r0, [r0, #0]
 800620a:	00f2      	lsls	r2, r6, #3
 800620c:	b280      	uxth	r0, r0
 800620e:	1812      	adds	r2, r2, r0
 8006210:	482a      	ldr	r0, [pc, #168]	; (80062bc <st_usbfs_ep_setup+0xfc>)
 8006212:	8b29      	ldrh	r1, [r5, #24]
 8006214:	1812      	adds	r2, r2, r0
 8006216:	8011      	strh	r1, [r2, #0]
		realsize = st_usbfs_set_ep_rx_bufsize(dev, addr, max_size);
 8006218:	0028      	movs	r0, r5
 800621a:	001a      	movs	r2, r3
 800621c:	0031      	movs	r1, r6
 800621e:	f7ff ffb3 	bl	8006188 <st_usbfs_set_ep_rx_bufsize>
		if (callback) {
 8006222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006224:	2b00      	cmp	r3, #0
 8006226:	d136      	bne.n	8006296 <st_usbfs_ep_setup+0xd6>
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
			    (void *)callback;
		}
		USB_CLR_EP_RX_DTOG(addr);
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	4a25      	ldr	r2, [pc, #148]	; (80062c0 <st_usbfs_ep_setup+0x100>)
 800622c:	4013      	ands	r3, r2
 800622e:	6023      	str	r3, [r4, #0]
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	4a24      	ldr	r2, [pc, #144]	; (80062c4 <st_usbfs_ep_setup+0x104>)
 8006234:	401a      	ands	r2, r3
 8006236:	23c0      	movs	r3, #192	; 0xc0
 8006238:	019b      	lsls	r3, r3, #6
 800623a:	4053      	eors	r3, r2
 800623c:	433b      	orrs	r3, r7
 800623e:	b29b      	uxth	r3, r3
 8006240:	6023      	str	r3, [r4, #0]
		dev->pm_top += realsize;
 8006242:	8b2b      	ldrh	r3, [r5, #24]
 8006244:	18c0      	adds	r0, r0, r3
 8006246:	8328      	strh	r0, [r5, #24]
	}
}
 8006248:	e023      	b.n	8006292 <st_usbfs_ep_setup+0xd2>
		USB_SET_EP_TX_ADDR(addr, dev->pm_top);
 800624a:	6802      	ldr	r2, [r0, #0]
 800624c:	8b29      	ldrh	r1, [r5, #24]
 800624e:	b292      	uxth	r2, r2
 8006250:	9101      	str	r1, [sp, #4]
 8006252:	00f1      	lsls	r1, r6, #3
 8006254:	1889      	adds	r1, r1, r2
 8006256:	4a1c      	ldr	r2, [pc, #112]	; (80062c8 <st_usbfs_ep_setup+0x108>)
 8006258:	1889      	adds	r1, r1, r2
 800625a:	9a01      	ldr	r2, [sp, #4]
 800625c:	800a      	strh	r2, [r1, #0]
		if (callback) {
 800625e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006260:	2a00      	cmp	r2, #0
 8006262:	d004      	beq.n	800626e <st_usbfs_ep_setup+0xae>
			dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
 8006264:	220c      	movs	r2, #12
 8006266:	4372      	muls	r2, r6
 8006268:	990a      	ldr	r1, [sp, #40]	; 0x28
 800626a:	18aa      	adds	r2, r5, r2
 800626c:	6691      	str	r1, [r2, #104]	; 0x68
		USB_CLR_EP_TX_DTOG(addr);
 800626e:	6822      	ldr	r2, [r4, #0]
 8006270:	4916      	ldr	r1, [pc, #88]	; (80062cc <st_usbfs_ep_setup+0x10c>)
 8006272:	400a      	ands	r2, r1
 8006274:	6022      	str	r2, [r4, #0]
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 8006276:	6822      	ldr	r2, [r4, #0]
 8006278:	4915      	ldr	r1, [pc, #84]	; (80062d0 <st_usbfs_ep_setup+0x110>)
 800627a:	4011      	ands	r1, r2
 800627c:	2220      	movs	r2, #32
 800627e:	404a      	eors	r2, r1
 8006280:	433a      	orrs	r2, r7
 8006282:	b292      	uxth	r2, r2
 8006284:	6022      	str	r2, [r4, #0]
		dev->pm_top += max_size;
 8006286:	8b2a      	ldrh	r2, [r5, #24]
 8006288:	189a      	adds	r2, r3, r2
 800628a:	832a      	strh	r2, [r5, #24]
	if (!dir) {
 800628c:	4662      	mov	r2, ip
 800628e:	2a00      	cmp	r2, #0
 8006290:	daba      	bge.n	8006208 <st_usbfs_ep_setup+0x48>
}
 8006292:	b005      	add	sp, #20
 8006294:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
 8006296:	230c      	movs	r3, #12
 8006298:	435e      	muls	r6, r3
 800629a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800629c:	19ae      	adds	r6, r5, r6
 800629e:	66f3      	str	r3, [r6, #108]	; 0x6c
 80062a0:	e7c2      	b.n	8006228 <st_usbfs_ep_setup+0x68>
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	04000200 	.word	0x04000200
 80062a8:	40005c00 	.word	0x40005c00
 80062ac:	ffff8f80 	.word	0xffff8f80
 80062b0:	ffff898f 	.word	0xffff898f
 80062b4:	ffff8080 	.word	0xffff8080
 80062b8:	40005c50 	.word	0x40005c50
 80062bc:	40006004 	.word	0x40006004
 80062c0:	0000cf8f 	.word	0x0000cf8f
 80062c4:	0000bf8f 	.word	0x0000bf8f
 80062c8:	40006000 	.word	0x40006000
 80062cc:	00008fcf 	.word	0x00008fcf
 80062d0:	00008fbf 	.word	0x00008fbf

080062d4 <st_usbfs_endpoints_reset>:

void st_usbfs_endpoints_reset(usbd_device *dev)
{
 80062d4:	b570      	push	{r4, r5, r6, lr}
 80062d6:	4a0b      	ldr	r2, [pc, #44]	; (8006304 <st_usbfs_endpoints_reset+0x30>)
	int i;

	/* Reset all endpoints. */
	for (i = 1; i < 8; i++) {
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 80062d8:	4e0b      	ldr	r6, [pc, #44]	; (8006308 <st_usbfs_endpoints_reset+0x34>)
 80062da:	490c      	ldr	r1, [pc, #48]	; (800630c <st_usbfs_endpoints_reset+0x38>)
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 80062dc:	4d0c      	ldr	r5, [pc, #48]	; (8006310 <st_usbfs_endpoints_reset+0x3c>)
	for (i = 1; i < 8; i++) {
 80062de:	4c0d      	ldr	r4, [pc, #52]	; (8006314 <st_usbfs_endpoints_reset+0x40>)
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 80062e0:	6813      	ldr	r3, [r2, #0]
 80062e2:	4033      	ands	r3, r6
 80062e4:	430b      	orrs	r3, r1
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	6013      	str	r3, [r2, #0]
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 80062ea:	6813      	ldr	r3, [r2, #0]
 80062ec:	402b      	ands	r3, r5
 80062ee:	430b      	orrs	r3, r1
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	c208      	stmia	r2!, {r3}
	for (i = 1; i < 8; i++) {
 80062f4:	42a2      	cmp	r2, r4
 80062f6:	d1f3      	bne.n	80062e0 <st_usbfs_endpoints_reset+0xc>
	}
	dev->pm_top = USBD_PM_TOP + (2 * dev->desc->bMaxPacketSize0);
 80062f8:	6803      	ldr	r3, [r0, #0]
 80062fa:	79db      	ldrb	r3, [r3, #7]
 80062fc:	3320      	adds	r3, #32
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	8303      	strh	r3, [r0, #24]
}
 8006302:	bd70      	pop	{r4, r5, r6, pc}
 8006304:	40005c04 	.word	0x40005c04
 8006308:	ffff8fbf 	.word	0xffff8fbf
 800630c:	ffff8080 	.word	0xffff8080
 8006310:	ffffbf8f 	.word	0xffffbf8f
 8006314:	40005c20 	.word	0x40005c20

08006318 <st_usbfs_ep_stall_set>:

void st_usbfs_ep_stall_set(usbd_device *dev, uint8_t addr,
				   uint8_t stall)
{
 8006318:	b530      	push	{r4, r5, lr}
 800631a:	4822      	ldr	r0, [pc, #136]	; (80063a4 <st_usbfs_ep_stall_set+0x8c>)
	(void)dev;
	if (addr == 0) {
 800631c:	2900      	cmp	r1, #0
 800631e:	d126      	bne.n	800636e <st_usbfs_ep_stall_set+0x56>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8006320:	4c21      	ldr	r4, [pc, #132]	; (80063a8 <st_usbfs_ep_stall_set+0x90>)
 8006322:	4d22      	ldr	r5, [pc, #136]	; (80063ac <st_usbfs_ep_stall_set+0x94>)
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	401d      	ands	r5, r3
 8006328:	2310      	movs	r3, #16
 800632a:	2a00      	cmp	r2, #0
 800632c:	d100      	bne.n	8006330 <st_usbfs_ep_stall_set+0x18>
 800632e:	18db      	adds	r3, r3, r3
 8006330:	406b      	eors	r3, r5
 8006332:	b21b      	sxth	r3, r3
 8006334:	4303      	orrs	r3, r0
 8006336:	b29b      	uxth	r3, r3
 8006338:	6023      	str	r3, [r4, #0]
		if (!stall) {
			USB_CLR_EP_TX_DTOG(addr);
		}
	} else {
		/* Reset to DATA0 if clearing stall condition. */
		if (!stall) {
 800633a:	4b1b      	ldr	r3, [pc, #108]	; (80063a8 <st_usbfs_ep_stall_set+0x90>)
 800633c:	0089      	lsls	r1, r1, #2
 800633e:	18c9      	adds	r1, r1, r3
 8006340:	2a00      	cmp	r2, #0
 8006342:	d103      	bne.n	800634c <st_usbfs_ep_stall_set+0x34>
			USB_CLR_EP_RX_DTOG(addr);
 8006344:	680b      	ldr	r3, [r1, #0]
 8006346:	4c1a      	ldr	r4, [pc, #104]	; (80063b0 <st_usbfs_ep_stall_set+0x98>)
 8006348:	4023      	ands	r3, r4
 800634a:	600b      	str	r3, [r1, #0]
		}

		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 800634c:	680c      	ldr	r4, [r1, #0]
 800634e:	4b19      	ldr	r3, [pc, #100]	; (80063b4 <st_usbfs_ep_stall_set+0x9c>)
 8006350:	401c      	ands	r4, r3
 8006352:	0013      	movs	r3, r2
 8006354:	1e5a      	subs	r2, r3, #1
 8006356:	4193      	sbcs	r3, r2
 8006358:	425a      	negs	r2, r3
 800635a:	23c0      	movs	r3, #192	; 0xc0
 800635c:	0352      	lsls	r2, r2, #13
 800635e:	019b      	lsls	r3, r3, #6
 8006360:	18d2      	adds	r2, r2, r3
 8006362:	4062      	eors	r2, r4
 8006364:	b212      	sxth	r2, r2
 8006366:	4302      	orrs	r2, r0
 8006368:	b292      	uxth	r2, r2
 800636a:	600a      	str	r2, [r1, #0]
				   USB_EP_RX_STAT_VALID);
	}
}
 800636c:	e019      	b.n	80063a2 <st_usbfs_ep_stall_set+0x8a>
	if (addr & 0x80) {
 800636e:	b24b      	sxtb	r3, r1
 8006370:	2b00      	cmp	r3, #0
 8006372:	dae2      	bge.n	800633a <st_usbfs_ep_stall_set+0x22>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8006374:	237f      	movs	r3, #127	; 0x7f
 8006376:	4019      	ands	r1, r3
 8006378:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <st_usbfs_ep_stall_set+0x90>)
 800637a:	0089      	lsls	r1, r1, #2
 800637c:	18c9      	adds	r1, r1, r3
 800637e:	680b      	ldr	r3, [r1, #0]
 8006380:	4c0a      	ldr	r4, [pc, #40]	; (80063ac <st_usbfs_ep_stall_set+0x94>)
 8006382:	401c      	ands	r4, r3
 8006384:	2310      	movs	r3, #16
 8006386:	2a00      	cmp	r2, #0
 8006388:	d100      	bne.n	800638c <st_usbfs_ep_stall_set+0x74>
 800638a:	18db      	adds	r3, r3, r3
 800638c:	4063      	eors	r3, r4
 800638e:	b21b      	sxth	r3, r3
 8006390:	4318      	orrs	r0, r3
 8006392:	b280      	uxth	r0, r0
 8006394:	6008      	str	r0, [r1, #0]
		if (!stall) {
 8006396:	2a00      	cmp	r2, #0
 8006398:	d103      	bne.n	80063a2 <st_usbfs_ep_stall_set+0x8a>
			USB_CLR_EP_TX_DTOG(addr);
 800639a:	680b      	ldr	r3, [r1, #0]
 800639c:	4a06      	ldr	r2, [pc, #24]	; (80063b8 <st_usbfs_ep_stall_set+0xa0>)
 800639e:	4013      	ands	r3, r2
 80063a0:	600b      	str	r3, [r1, #0]
}
 80063a2:	bd30      	pop	{r4, r5, pc}
 80063a4:	ffff8080 	.word	0xffff8080
 80063a8:	40005c00 	.word	0x40005c00
 80063ac:	00008fbf 	.word	0x00008fbf
 80063b0:	0000cf8f 	.word	0x0000cf8f
 80063b4:	0000bf8f 	.word	0x0000bf8f
 80063b8:	00008fcf 	.word	0x00008fcf

080063bc <st_usbfs_ep_stall_get>:

uint8_t st_usbfs_ep_stall_get(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	if (addr & 0x80) {
 80063bc:	b24b      	sxtb	r3, r1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	da0c      	bge.n	80063dc <st_usbfs_ep_stall_get+0x20>
		if ((*USB_EP_REG(addr & 0x7F) & USB_EP_TX_STAT) ==
 80063c2:	237f      	movs	r3, #127	; 0x7f
 80063c4:	4019      	ands	r1, r3
 80063c6:	4b0a      	ldr	r3, [pc, #40]	; (80063f0 <st_usbfs_ep_stall_get+0x34>)
 80063c8:	0089      	lsls	r1, r1, #2
 80063ca:	18c9      	adds	r1, r1, r3
 80063cc:	2330      	movs	r3, #48	; 0x30
 80063ce:	6808      	ldr	r0, [r1, #0]
 80063d0:	4018      	ands	r0, r3
 80063d2:	3810      	subs	r0, #16
		    USB_EP_TX_STAT_STALL) {
			return 1;
		}
	} else {
		if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) ==
 80063d4:	4243      	negs	r3, r0
 80063d6:	4158      	adcs	r0, r3
			return 1;
 80063d8:	b2c0      	uxtb	r0, r0
		    USB_EP_RX_STAT_STALL) {
			return 1;
		}
	}
	return 0;
}
 80063da:	4770      	bx	lr
		if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) ==
 80063dc:	4b04      	ldr	r3, [pc, #16]	; (80063f0 <st_usbfs_ep_stall_get+0x34>)
 80063de:	0089      	lsls	r1, r1, #2
 80063e0:	18c9      	adds	r1, r1, r3
 80063e2:	23c0      	movs	r3, #192	; 0xc0
 80063e4:	6808      	ldr	r0, [r1, #0]
 80063e6:	019b      	lsls	r3, r3, #6
 80063e8:	4018      	ands	r0, r3
 80063ea:	4b02      	ldr	r3, [pc, #8]	; (80063f4 <st_usbfs_ep_stall_get+0x38>)
 80063ec:	18c0      	adds	r0, r0, r3
 80063ee:	e7f1      	b.n	80063d4 <st_usbfs_ep_stall_get+0x18>
 80063f0:	40005c00 	.word	0x40005c00
 80063f4:	fffff000 	.word	0xfffff000

080063f8 <st_usbfs_ep_nak_set>:

void st_usbfs_ep_nak_set(usbd_device *dev, uint8_t addr, uint8_t nak)
{
	(void)dev;
	/* It does not make sense to force NAK on IN endpoints. */
	if (addr & 0x80) {
 80063f8:	b24b      	sxtb	r3, r1
{
 80063fa:	b510      	push	{r4, lr}
	if (addr & 0x80) {
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	db11      	blt.n	8006424 <st_usbfs_ep_nak_set+0x2c>
		return;
	}

	st_usbfs_force_nak[addr] = nak;
 8006400:	4b0c      	ldr	r3, [pc, #48]	; (8006434 <st_usbfs_ep_nak_set+0x3c>)
 8006402:	4c0d      	ldr	r4, [pc, #52]	; (8006438 <st_usbfs_ep_nak_set+0x40>)
 8006404:	545a      	strb	r2, [r3, r1]

	if (nak) {
 8006406:	4b0d      	ldr	r3, [pc, #52]	; (800643c <st_usbfs_ep_nak_set+0x44>)
 8006408:	0089      	lsls	r1, r1, #2
 800640a:	480d      	ldr	r0, [pc, #52]	; (8006440 <st_usbfs_ep_nak_set+0x48>)
 800640c:	18c9      	adds	r1, r1, r3
 800640e:	2a00      	cmp	r2, #0
 8006410:	d009      	beq.n	8006426 <st_usbfs_ep_nak_set+0x2e>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_NAK);
 8006412:	2380      	movs	r3, #128	; 0x80
 8006414:	680a      	ldr	r2, [r1, #0]
 8006416:	019b      	lsls	r3, r3, #6
 8006418:	4022      	ands	r2, r4
 800641a:	b292      	uxth	r2, r2
	} else {
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 800641c:	4053      	eors	r3, r2
 800641e:	4303      	orrs	r3, r0
 8006420:	b29b      	uxth	r3, r3
 8006422:	600b      	str	r3, [r1, #0]
	}
}
 8006424:	bd10      	pop	{r4, pc}
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8006426:	22c0      	movs	r2, #192	; 0xc0
 8006428:	680b      	ldr	r3, [r1, #0]
 800642a:	0192      	lsls	r2, r2, #6
 800642c:	4023      	ands	r3, r4
 800642e:	b29b      	uxth	r3, r3
 8006430:	e7f4      	b.n	800641c <st_usbfs_ep_nak_set+0x24>
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	20000568 	.word	0x20000568
 8006438:	ffffbf8f 	.word	0xffffbf8f
 800643c:	40005c00 	.word	0x40005c00
 8006440:	ffff8080 	.word	0xffff8080

08006444 <st_usbfs_ep_write_packet>:

uint16_t st_usbfs_ep_write_packet(usbd_device *dev, uint8_t addr,
				     const void *buf, uint16_t len)
{
 8006444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006446:	000c      	movs	r4, r1
 8006448:	001d      	movs	r5, r3
	(void)dev;
	addr &= 0x7F;
 800644a:	237f      	movs	r3, #127	; 0x7f
{
 800644c:	0011      	movs	r1, r2

	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 800644e:	2230      	movs	r2, #48	; 0x30
	addr &= 0x7F;
 8006450:	401c      	ands	r4, r3
	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 8006452:	4b13      	ldr	r3, [pc, #76]	; (80064a0 <st_usbfs_ep_write_packet+0x5c>)
 8006454:	00a6      	lsls	r6, r4, #2
 8006456:	18f6      	adds	r6, r6, r3
 8006458:	6833      	ldr	r3, [r6, #0]
 800645a:	4013      	ands	r3, r2
 800645c:	4293      	cmp	r3, r2
 800645e:	d01c      	beq.n	800649a <st_usbfs_ep_write_packet+0x56>
		return 0;
	}

	st_usbfs_copy_to_pm(USB_GET_EP_TX_BUFF(addr), buf, len);
 8006460:	4810      	ldr	r0, [pc, #64]	; (80064a4 <st_usbfs_ep_write_packet+0x60>)
 8006462:	4f11      	ldr	r7, [pc, #68]	; (80064a8 <st_usbfs_ep_write_packet+0x64>)
 8006464:	0002      	movs	r2, r0
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	00e4      	lsls	r4, r4, #3
 800646a:	b29b      	uxth	r3, r3
 800646c:	18e3      	adds	r3, r4, r3
 800646e:	181b      	adds	r3, r3, r0
 8006470:	8818      	ldrh	r0, [r3, #0]
 8006472:	1880      	adds	r0, r0, r2
 8006474:	002a      	movs	r2, r5
 8006476:	f000 f921 	bl	80066bc <st_usbfs_copy_to_pm>
	USB_SET_EP_TX_COUNT(addr, len);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	4b0b      	ldr	r3, [pc, #44]	; (80064ac <st_usbfs_ep_write_packet+0x68>)
 800647e:	b289      	uxth	r1, r1
 8006480:	1864      	adds	r4, r4, r1
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 8006482:	4a0b      	ldr	r2, [pc, #44]	; (80064b0 <st_usbfs_ep_write_packet+0x6c>)
	USB_SET_EP_TX_COUNT(addr, len);
 8006484:	18e4      	adds	r4, r4, r3
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 8006486:	6833      	ldr	r3, [r6, #0]
	USB_SET_EP_TX_COUNT(addr, len);
 8006488:	8025      	strh	r5, [r4, #0]
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 800648a:	4013      	ands	r3, r2
 800648c:	2230      	movs	r2, #48	; 0x30
 800648e:	4053      	eors	r3, r2
 8006490:	4a08      	ldr	r2, [pc, #32]	; (80064b4 <st_usbfs_ep_write_packet+0x70>)
 8006492:	4313      	orrs	r3, r2
 8006494:	6033      	str	r3, [r6, #0]

	return len;
}
 8006496:	0028      	movs	r0, r5
 8006498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 800649a:	2500      	movs	r5, #0
 800649c:	e7fb      	b.n	8006496 <st_usbfs_ep_write_packet+0x52>
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	40005c00 	.word	0x40005c00
 80064a4:	40006000 	.word	0x40006000
 80064a8:	40005c50 	.word	0x40005c50
 80064ac:	40006002 	.word	0x40006002
 80064b0:	00008fbf 	.word	0x00008fbf
 80064b4:	00008080 	.word	0x00008080

080064b8 <st_usbfs_ep_read_packet>:

uint16_t st_usbfs_ep_read_packet(usbd_device *dev, uint8_t addr,
					 void *buf, uint16_t len)
{
 80064b8:	0010      	movs	r0, r2
	(void)dev;
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 80064ba:	22c0      	movs	r2, #192	; 0xc0
{
 80064bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064be:	001c      	movs	r4, r3
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 80064c0:	4b1e      	ldr	r3, [pc, #120]	; (800653c <st_usbfs_ep_read_packet+0x84>)
 80064c2:	008d      	lsls	r5, r1, #2
 80064c4:	18ed      	adds	r5, r5, r3
 80064c6:	682b      	ldr	r3, [r5, #0]
 80064c8:	0192      	lsls	r2, r2, #6
{
 80064ca:	000f      	movs	r7, r1
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 80064cc:	4013      	ands	r3, r2
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d032      	beq.n	8006538 <st_usbfs_ep_read_packet+0x80>
		return 0;
	}

	len = MIN(USB_GET_EP_RX_COUNT(addr) & 0x3ff, len);
 80064d2:	4a1b      	ldr	r2, [pc, #108]	; (8006540 <st_usbfs_ep_read_packet+0x88>)
 80064d4:	00ce      	lsls	r6, r1, #3
 80064d6:	6813      	ldr	r3, [r2, #0]
 80064d8:	491a      	ldr	r1, [pc, #104]	; (8006544 <st_usbfs_ep_read_packet+0x8c>)
 80064da:	b29b      	uxth	r3, r3
 80064dc:	18f3      	adds	r3, r6, r3
 80064de:	185b      	adds	r3, r3, r1
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	059b      	lsls	r3, r3, #22
 80064e4:	0d9b      	lsrs	r3, r3, #22
 80064e6:	429c      	cmp	r4, r3
 80064e8:	d906      	bls.n	80064f8 <st_usbfs_ep_read_packet+0x40>
 80064ea:	6813      	ldr	r3, [r2, #0]
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	18f3      	adds	r3, r6, r3
 80064f0:	185b      	adds	r3, r3, r1
 80064f2:	881c      	ldrh	r4, [r3, #0]
 80064f4:	05a4      	lsls	r4, r4, #22
 80064f6:	0da4      	lsrs	r4, r4, #22
	st_usbfs_copy_from_pm(buf, USB_GET_EP_RX_BUFF(addr), len);
 80064f8:	6813      	ldr	r3, [r2, #0]
 80064fa:	0022      	movs	r2, r4
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	18f6      	adds	r6, r6, r3
 8006500:	4b11      	ldr	r3, [pc, #68]	; (8006548 <st_usbfs_ep_read_packet+0x90>)
 8006502:	18f6      	adds	r6, r6, r3
 8006504:	8831      	ldrh	r1, [r6, #0]
 8006506:	4b11      	ldr	r3, [pc, #68]	; (800654c <st_usbfs_ep_read_packet+0x94>)
 8006508:	18c9      	adds	r1, r1, r3
 800650a:	f000 f8e5 	bl	80066d8 <st_usbfs_copy_from_pm>
	USB_CLR_EP_RX_CTR(addr);
 800650e:	682b      	ldr	r3, [r5, #0]
 8006510:	4a0f      	ldr	r2, [pc, #60]	; (8006550 <st_usbfs_ep_read_packet+0x98>)
 8006512:	401a      	ands	r2, r3
 8006514:	2380      	movs	r3, #128	; 0x80
 8006516:	4313      	orrs	r3, r2
 8006518:	602b      	str	r3, [r5, #0]

	if (!st_usbfs_force_nak[addr]) {
 800651a:	4b0e      	ldr	r3, [pc, #56]	; (8006554 <st_usbfs_ep_read_packet+0x9c>)
 800651c:	5ddb      	ldrb	r3, [r3, r7]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d108      	bne.n	8006534 <st_usbfs_ep_read_packet+0x7c>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8006522:	682b      	ldr	r3, [r5, #0]
 8006524:	4a0c      	ldr	r2, [pc, #48]	; (8006558 <st_usbfs_ep_read_packet+0xa0>)
 8006526:	401a      	ands	r2, r3
 8006528:	23c0      	movs	r3, #192	; 0xc0
 800652a:	019b      	lsls	r3, r3, #6
 800652c:	4053      	eors	r3, r2
 800652e:	4a0b      	ldr	r2, [pc, #44]	; (800655c <st_usbfs_ep_read_packet+0xa4>)
 8006530:	4313      	orrs	r3, r2
 8006532:	602b      	str	r3, [r5, #0]
	}

	return len;
}
 8006534:	0020      	movs	r0, r4
 8006536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 8006538:	2400      	movs	r4, #0
 800653a:	e7fb      	b.n	8006534 <st_usbfs_ep_read_packet+0x7c>
 800653c:	40005c00 	.word	0x40005c00
 8006540:	40005c50 	.word	0x40005c50
 8006544:	40006006 	.word	0x40006006
 8006548:	40006004 	.word	0x40006004
 800654c:	40006000 	.word	0x40006000
 8006550:	00000f0f 	.word	0x00000f0f
 8006554:	20000568 	.word	0x20000568
 8006558:	0000bf8f 	.word	0x0000bf8f
 800655c:	00008080 	.word	0x00008080

08006560 <st_usbfs_poll>:

void st_usbfs_poll(usbd_device *dev)
{
 8006560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t istr = *USB_ISTR_REG;
 8006562:	4b35      	ldr	r3, [pc, #212]	; (8006638 <st_usbfs_poll+0xd8>)
{
 8006564:	0004      	movs	r4, r0
	uint16_t istr = *USB_ISTR_REG;
 8006566:	681d      	ldr	r5, [r3, #0]

	if (istr & USB_ISTR_RESET) {
 8006568:	001f      	movs	r7, r3
 800656a:	b2aa      	uxth	r2, r5
 800656c:	9201      	str	r2, [sp, #4]
 800656e:	056a      	lsls	r2, r5, #21
 8006570:	d506      	bpl.n	8006580 <st_usbfs_poll+0x20>
		USB_CLR_ISTR_RESET();
 8006572:	4a32      	ldr	r2, [pc, #200]	; (800663c <st_usbfs_poll+0xdc>)
 8006574:	601a      	str	r2, [r3, #0]
		dev->pm_top = USBD_PM_TOP;
 8006576:	2340      	movs	r3, #64	; 0x40
 8006578:	8303      	strh	r3, [r0, #24]
		_usbd_reset(dev);
 800657a:	f7ff f8e0 	bl	800573e <_usbd_reset>
	if (dev->user_callback_sof) {
		*USB_CNTR_REG |= USB_CNTR_SOFM;
	} else {
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
	}
}
 800657e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	if (istr & USB_ISTR_CTR) {
 8006580:	042b      	lsls	r3, r5, #16
 8006582:	d520      	bpl.n	80065c6 <st_usbfs_poll+0x66>
		uint8_t ep = istr & USB_ISTR_EP_ID;
 8006584:	230f      	movs	r3, #15
		if (istr & USB_ISTR_DIR) {
 8006586:	2210      	movs	r2, #16
		uint8_t ep = istr & USB_ISTR_EP_ID;
 8006588:	401d      	ands	r5, r3
		if (istr & USB_ISTR_DIR) {
 800658a:	4b2d      	ldr	r3, [pc, #180]	; (8006640 <st_usbfs_poll+0xe0>)
 800658c:	00ae      	lsls	r6, r5, #2
 800658e:	18f6      	adds	r6, r6, r3
 8006590:	9901      	ldr	r1, [sp, #4]
 8006592:	9b01      	ldr	r3, [sp, #4]
 8006594:	4013      	ands	r3, r2
 8006596:	4211      	tst	r1, r2
 8006598:	d03a      	beq.n	8006610 <st_usbfs_poll+0xb0>
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
 800659a:	6833      	ldr	r3, [r6, #0]
				type = USB_TRANSACTION_OUT;
 800659c:	3a0f      	subs	r2, #15
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
 800659e:	051b      	lsls	r3, r3, #20
 80065a0:	d506      	bpl.n	80065b0 <st_usbfs_poll+0x50>
				st_usbfs_ep_read_packet(dev, ep, &dev->control_state.req, 8);
 80065a2:	0002      	movs	r2, r0
 80065a4:	2308      	movs	r3, #8
 80065a6:	3230      	adds	r2, #48	; 0x30
 80065a8:	0029      	movs	r1, r5
 80065aa:	f7ff ff85 	bl	80064b8 <st_usbfs_ep_read_packet>
				type = USB_TRANSACTION_SETUP;
 80065ae:	2202      	movs	r2, #2
		if (dev->user_callback_ctr[ep][type]) {
 80065b0:	2303      	movs	r3, #3
 80065b2:	436b      	muls	r3, r5
 80065b4:	189b      	adds	r3, r3, r2
 80065b6:	331a      	adds	r3, #26
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	591b      	ldr	r3, [r3, r4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d030      	beq.n	8006622 <st_usbfs_poll+0xc2>
			dev->user_callback_ctr[ep][type] (dev, ep);
 80065c0:	0029      	movs	r1, r5
 80065c2:	0020      	movs	r0, r4
 80065c4:	4798      	blx	r3
	if (istr & USB_ISTR_SUSP) {
 80065c6:	9b01      	ldr	r3, [sp, #4]
 80065c8:	051b      	lsls	r3, r3, #20
 80065ca:	d505      	bpl.n	80065d8 <st_usbfs_poll+0x78>
		USB_CLR_ISTR_SUSP();
 80065cc:	4b1d      	ldr	r3, [pc, #116]	; (8006644 <st_usbfs_poll+0xe4>)
 80065ce:	603b      	str	r3, [r7, #0]
		if (dev->user_callback_suspend) {
 80065d0:	6a23      	ldr	r3, [r4, #32]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d000      	beq.n	80065d8 <st_usbfs_poll+0x78>
			dev->user_callback_suspend();
 80065d6:	4798      	blx	r3
	if (istr & USB_ISTR_WKUP) {
 80065d8:	9b01      	ldr	r3, [sp, #4]
 80065da:	04db      	lsls	r3, r3, #19
 80065dc:	d505      	bpl.n	80065ea <st_usbfs_poll+0x8a>
		USB_CLR_ISTR_WKUP();
 80065de:	4b1a      	ldr	r3, [pc, #104]	; (8006648 <st_usbfs_poll+0xe8>)
 80065e0:	603b      	str	r3, [r7, #0]
		if (dev->user_callback_resume) {
 80065e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d000      	beq.n	80065ea <st_usbfs_poll+0x8a>
			dev->user_callback_resume();
 80065e8:	4798      	blx	r3
	if (istr & USB_ISTR_SOF) {
 80065ea:	9b01      	ldr	r3, [sp, #4]
 80065ec:	4d17      	ldr	r5, [pc, #92]	; (800664c <st_usbfs_poll+0xec>)
 80065ee:	059b      	lsls	r3, r3, #22
 80065f0:	d505      	bpl.n	80065fe <st_usbfs_poll+0x9e>
 80065f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		USB_CLR_ISTR_SOF();
 80065f4:	4a16      	ldr	r2, [pc, #88]	; (8006650 <st_usbfs_poll+0xf0>)
 80065f6:	603a      	str	r2, [r7, #0]
		if (dev->user_callback_sof) {
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d019      	beq.n	8006630 <st_usbfs_poll+0xd0>
			dev->user_callback_sof();
 80065fc:	4798      	blx	r3
	if (dev->user_callback_sof) {
 80065fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006600:	2b00      	cmp	r3, #0
 8006602:	d015      	beq.n	8006630 <st_usbfs_poll+0xd0>
		*USB_CNTR_REG |= USB_CNTR_SOFM;
 8006604:	2380      	movs	r3, #128	; 0x80
 8006606:	682a      	ldr	r2, [r5, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4313      	orrs	r3, r2
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
 800660c:	602b      	str	r3, [r5, #0]
 800660e:	e7b6      	b.n	800657e <st_usbfs_poll+0x1e>
			USB_CLR_EP_TX_CTR(ep);
 8006610:	6832      	ldr	r2, [r6, #0]
 8006612:	4910      	ldr	r1, [pc, #64]	; (8006654 <st_usbfs_poll+0xf4>)
 8006614:	400a      	ands	r2, r1
 8006616:	2180      	movs	r1, #128	; 0x80
 8006618:	0209      	lsls	r1, r1, #8
 800661a:	430a      	orrs	r2, r1
 800661c:	6032      	str	r2, [r6, #0]
			type = USB_TRANSACTION_IN;
 800661e:	001a      	movs	r2, r3
 8006620:	e7c6      	b.n	80065b0 <st_usbfs_poll+0x50>
			USB_CLR_EP_RX_CTR(ep);
 8006622:	6833      	ldr	r3, [r6, #0]
 8006624:	4a0b      	ldr	r2, [pc, #44]	; (8006654 <st_usbfs_poll+0xf4>)
 8006626:	401a      	ands	r2, r3
 8006628:	2380      	movs	r3, #128	; 0x80
 800662a:	4313      	orrs	r3, r2
 800662c:	6033      	str	r3, [r6, #0]
 800662e:	e7ca      	b.n	80065c6 <st_usbfs_poll+0x66>
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
 8006630:	682b      	ldr	r3, [r5, #0]
 8006632:	4a09      	ldr	r2, [pc, #36]	; (8006658 <st_usbfs_poll+0xf8>)
 8006634:	4013      	ands	r3, r2
 8006636:	e7e9      	b.n	800660c <st_usbfs_poll+0xac>
 8006638:	40005c44 	.word	0x40005c44
 800663c:	0000fbff 	.word	0x0000fbff
 8006640:	40005c00 	.word	0x40005c00
 8006644:	0000f7ff 	.word	0x0000f7ff
 8006648:	0000efff 	.word	0x0000efff
 800664c:	40005c40 	.word	0x40005c40
 8006650:	0000fdff 	.word	0x0000fdff
 8006654:	00000f0f 	.word	0x00000f0f
 8006658:	fffffdff 	.word	0xfffffdff

0800665c <st_usbfs_v2_disconnect>:
}

static void st_usbfs_v2_disconnect(usbd_device *usbd_dev, bool disconnected)
{
	(void)usbd_dev;
	uint16_t reg = GET_REG(USB_BCDR_REG);
 800665c:	4805      	ldr	r0, [pc, #20]	; (8006674 <st_usbfs_v2_disconnect+0x18>)
 800665e:	6803      	ldr	r3, [r0, #0]
	if (disconnected) {
 8006660:	2900      	cmp	r1, #0
 8006662:	d004      	beq.n	800666e <st_usbfs_v2_disconnect+0x12>
		SET_REG(USB_BCDR_REG, reg | USB_BCDR_DPPU);
 8006664:	4a04      	ldr	r2, [pc, #16]	; (8006678 <st_usbfs_v2_disconnect+0x1c>)
 8006666:	4313      	orrs	r3, r2
 8006668:	b29b      	uxth	r3, r3
	} else {
		SET_REG(USB_BCDR_REG, reg & ~USB_BCDR_DPPU);
 800666a:	6003      	str	r3, [r0, #0]
	}
}
 800666c:	4770      	bx	lr
		SET_REG(USB_BCDR_REG, reg & ~USB_BCDR_DPPU);
 800666e:	045b      	lsls	r3, r3, #17
 8006670:	0c5b      	lsrs	r3, r3, #17
 8006672:	e7fa      	b.n	800666a <st_usbfs_v2_disconnect+0xe>
 8006674:	40005c58 	.word	0x40005c58
 8006678:	ffff8000 	.word	0xffff8000

0800667c <st_usbfs_v2_usbd_init>:
{
 800667c:	b510      	push	{r4, lr}
	rcc_periph_clock_enable(RCC_USB);
 800667e:	4809      	ldr	r0, [pc, #36]	; (80066a4 <st_usbfs_v2_usbd_init+0x28>)
 8006680:	f7fe ff5c 	bl	800553c <rcc_periph_clock_enable>
	SET_REG(USB_CNTR_REG, 0);
 8006684:	2300      	movs	r3, #0
 8006686:	4a08      	ldr	r2, [pc, #32]	; (80066a8 <st_usbfs_v2_usbd_init+0x2c>)
	SET_REG(USB_BTABLE_REG, 0);
 8006688:	4908      	ldr	r1, [pc, #32]	; (80066ac <st_usbfs_v2_usbd_init+0x30>)
	SET_REG(USB_CNTR_REG, 0);
 800668a:	6013      	str	r3, [r2, #0]
	SET_REG(USB_BTABLE_REG, 0);
 800668c:	600b      	str	r3, [r1, #0]
	SET_REG(USB_ISTR_REG, 0);
 800668e:	4908      	ldr	r1, [pc, #32]	; (80066b0 <st_usbfs_v2_usbd_init+0x34>)
}
 8006690:	4808      	ldr	r0, [pc, #32]	; (80066b4 <st_usbfs_v2_usbd_init+0x38>)
	SET_REG(USB_ISTR_REG, 0);
 8006692:	600b      	str	r3, [r1, #0]
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
 8006694:	239c      	movs	r3, #156	; 0x9c
 8006696:	021b      	lsls	r3, r3, #8
 8006698:	6013      	str	r3, [r2, #0]
	SET_REG(USB_BCDR_REG, USB_BCDR_DPPU);
 800669a:	2280      	movs	r2, #128	; 0x80
 800669c:	4b06      	ldr	r3, [pc, #24]	; (80066b8 <st_usbfs_v2_usbd_init+0x3c>)
 800669e:	0212      	lsls	r2, r2, #8
 80066a0:	601a      	str	r2, [r3, #0]
}
 80066a2:	bd10      	pop	{r4, pc}
 80066a4:	00000717 	.word	0x00000717
 80066a8:	40005c40 	.word	0x40005c40
 80066ac:	40005c50 	.word	0x40005c50
 80066b0:	40005c44 	.word	0x40005c44
 80066b4:	2000046c 	.word	0x2000046c
 80066b8:	40005c58 	.word	0x40005c58

080066bc <st_usbfs_copy_to_pm>:
	for (i = 0; i < len; i += 2) {
 80066bc:	2300      	movs	r3, #0
{
 80066be:	b5f0      	push	{r4, r5, r6, r7, lr}
		*PM++ = (uint16_t)lbuf[i+1] << 8 | lbuf[i];
 80066c0:	1c4f      	adds	r7, r1, #1
 80066c2:	18c6      	adds	r6, r0, r3
	for (i = 0; i < len; i += 2) {
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d800      	bhi.n	80066ca <st_usbfs_copy_to_pm+0xe>
}
 80066c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*PM++ = (uint16_t)lbuf[i+1] << 8 | lbuf[i];
 80066ca:	5cfd      	ldrb	r5, [r7, r3]
 80066cc:	5ccc      	ldrb	r4, [r1, r3]
 80066ce:	022d      	lsls	r5, r5, #8
 80066d0:	432c      	orrs	r4, r5
 80066d2:	8034      	strh	r4, [r6, #0]
	for (i = 0; i < len; i += 2) {
 80066d4:	3302      	adds	r3, #2
 80066d6:	e7f4      	b.n	80066c2 <st_usbfs_copy_to_pm+0x6>

080066d8 <st_usbfs_copy_from_pm>:
	uint8_t odd = len & 1;
 80066d8:	2301      	movs	r3, #1
{
 80066da:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t odd = len & 1;
 80066dc:	0014      	movs	r4, r2
	if (((uintptr_t) buf) & 0x01) {
 80066de:	0006      	movs	r6, r0
	len >>= 1;
 80066e0:	40da      	lsrs	r2, r3
	uint8_t odd = len & 1;
 80066e2:	401c      	ands	r4, r3
	if (((uintptr_t) buf) & 0x01) {
 80066e4:	4218      	tst	r0, r3
 80066e6:	d11e      	bne.n	8006726 <st_usbfs_copy_from_pm+0x4e>
	const volatile uint16_t *PM = vPM;
 80066e8:	000e      	movs	r6, r1
	len >>= 1;
 80066ea:	0013      	movs	r3, r2
 80066ec:	0005      	movs	r5, r0
		for (; len; PM++, buf += 2, len--) {
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d011      	beq.n	8006716 <st_usbfs_copy_from_pm+0x3e>
			*(uint16_t *) buf = *PM;
 80066f2:	8837      	ldrh	r7, [r6, #0]
		for (; len; PM++, buf += 2, len--) {
 80066f4:	3b01      	subs	r3, #1
			*(uint16_t *) buf = *PM;
 80066f6:	802f      	strh	r7, [r5, #0]
		for (; len; PM++, buf += 2, len--) {
 80066f8:	3602      	adds	r6, #2
 80066fa:	3502      	adds	r5, #2
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	e7f6      	b.n	80066ee <st_usbfs_copy_from_pm+0x16>
			uint16_t value = *PM;
 8006700:	883b      	ldrh	r3, [r7, #0]
		for (; len; PM++, len--) {
 8006702:	3d01      	subs	r5, #1
			uint16_t value = *PM;
 8006704:	b29b      	uxth	r3, r3
			*(uint8_t *) buf++ = value;
 8006706:	7033      	strb	r3, [r6, #0]
			*(uint8_t *) buf++ = value >> 8;
 8006708:	0a1b      	lsrs	r3, r3, #8
 800670a:	7073      	strb	r3, [r6, #1]
		for (; len; PM++, len--) {
 800670c:	3702      	adds	r7, #2
 800670e:	b2ad      	uxth	r5, r5
 8006710:	3602      	adds	r6, #2
 8006712:	2d00      	cmp	r5, #0
 8006714:	d1f4      	bne.n	8006700 <st_usbfs_copy_from_pm+0x28>
 8006716:	0052      	lsls	r2, r2, #1
 8006718:	1880      	adds	r0, r0, r2
 800671a:	188a      	adds	r2, r1, r2
	if (odd) {
 800671c:	2c00      	cmp	r4, #0
 800671e:	d001      	beq.n	8006724 <st_usbfs_copy_from_pm+0x4c>
		*(uint8_t *) buf = *(uint8_t *) PM;
 8006720:	7813      	ldrb	r3, [r2, #0]
 8006722:	7003      	strb	r3, [r0, #0]
}
 8006724:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const volatile uint16_t *PM = vPM;
 8006726:	000f      	movs	r7, r1
	len >>= 1;
 8006728:	0015      	movs	r5, r2
 800672a:	e7f2      	b.n	8006712 <st_usbfs_copy_from_pm+0x3a>

0800672c <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 800672c:	e7fe      	b.n	800672c <blocking_handler>

0800672e <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 800672e:	4770      	bx	lr

08006730 <reset_handler>:
{
 8006730:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 8006732:	4b16      	ldr	r3, [pc, #88]	; (800678c <reset_handler+0x5c>)
 8006734:	4a16      	ldr	r2, [pc, #88]	; (8006790 <reset_handler+0x60>)
 8006736:	4917      	ldr	r1, [pc, #92]	; (8006794 <reset_handler+0x64>)
 8006738:	428b      	cmp	r3, r1
 800673a:	d318      	bcc.n	800676e <reset_handler+0x3e>
		*dest++ = 0;
 800673c:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 800673e:	4a16      	ldr	r2, [pc, #88]	; (8006798 <reset_handler+0x68>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d317      	bcc.n	8006774 <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 8006744:	2380      	movs	r3, #128	; 0x80
 8006746:	4a15      	ldr	r2, [pc, #84]	; (800679c <reset_handler+0x6c>)
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 800674c:	4c14      	ldr	r4, [pc, #80]	; (80067a0 <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 800674e:	430b      	orrs	r3, r1
 8006750:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8006752:	4b14      	ldr	r3, [pc, #80]	; (80067a4 <reset_handler+0x74>)
 8006754:	429c      	cmp	r4, r3
 8006756:	d30f      	bcc.n	8006778 <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8006758:	4c13      	ldr	r4, [pc, #76]	; (80067a8 <reset_handler+0x78>)
 800675a:	4b14      	ldr	r3, [pc, #80]	; (80067ac <reset_handler+0x7c>)
 800675c:	429c      	cmp	r4, r3
 800675e:	d30e      	bcc.n	800677e <reset_handler+0x4e>
	(void)main();
 8006760:	f7fd fea2 	bl	80044a8 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8006764:	4c12      	ldr	r4, [pc, #72]	; (80067b0 <reset_handler+0x80>)
 8006766:	4b13      	ldr	r3, [pc, #76]	; (80067b4 <reset_handler+0x84>)
 8006768:	429c      	cmp	r4, r3
 800676a:	d30b      	bcc.n	8006784 <reset_handler+0x54>
}
 800676c:	bd10      	pop	{r4, pc}
		*dest = *src;
 800676e:	ca01      	ldmia	r2!, {r0}
 8006770:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 8006772:	e7e1      	b.n	8006738 <reset_handler+0x8>
		*dest++ = 0;
 8006774:	c302      	stmia	r3!, {r1}
 8006776:	e7e3      	b.n	8006740 <reset_handler+0x10>
		(*fp)();
 8006778:	cc08      	ldmia	r4!, {r3}
 800677a:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 800677c:	e7e9      	b.n	8006752 <reset_handler+0x22>
		(*fp)();
 800677e:	cc08      	ldmia	r4!, {r3}
 8006780:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8006782:	e7ea      	b.n	800675a <reset_handler+0x2a>
		(*fp)();
 8006784:	cc08      	ldmia	r4!, {r3}
 8006786:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8006788:	e7ed      	b.n	8006766 <reset_handler+0x36>
 800678a:	46c0      	nop			; (mov r8, r8)
 800678c:	20000000 	.word	0x20000000
 8006790:	080070f0 	.word	0x080070f0
 8006794:	20000140 	.word	0x20000140
 8006798:	2000058c 	.word	0x2000058c
 800679c:	e000ed14 	.word	0xe000ed14
 80067a0:	080070f0 	.word	0x080070f0
 80067a4:	080070f0 	.word	0x080070f0
 80067a8:	080070f0 	.word	0x080070f0
 80067ac:	080070f0 	.word	0x080070f0
 80067b0:	080070f0 	.word	0x080070f0
 80067b4:	080070f0 	.word	0x080070f0

080067b8 <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref CM3_nvic_defines_irqs
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 80067b8:	4a04      	ldr	r2, [pc, #16]	; (80067cc <nvic_enable_irq+0x14>)
 80067ba:	0943      	lsrs	r3, r0, #5
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	189b      	adds	r3, r3, r2
 80067c0:	221f      	movs	r2, #31
 80067c2:	4010      	ands	r0, r2
 80067c4:	3a1e      	subs	r2, #30
 80067c6:	4082      	lsls	r2, r0
 80067c8:	601a      	str	r2, [r3, #0]
}
 80067ca:	4770      	bx	lr
 80067cc:	e000e100 	.word	0xe000e100

080067d0 <nvic_set_priority>:
 * @param[in] irqn Interrupt number @ref CM3_nvic_defines_irqs
 * @param[in] priority Interrupt priority (0 ... 255 in steps of 16)
 */
#endif
void nvic_set_priority(uint8_t irqn, uint8_t priority)
{
 80067d0:	b510      	push	{r4, lr}
	/* code from lpc43xx/nvic.c -- this is quite a hack and alludes to the
	 * negative interrupt numbers assigned to the system interrupts. better
	 * handling would mean signed integers. */
	if (irqn >= NVIC_IRQ_COUNT) {
 80067d2:	281f      	cmp	r0, #31
 80067d4:	d912      	bls.n	80067fc <nvic_set_priority+0x2c>
		/* Cortex-M  system interrupts */
#if defined(__ARM_ARCH_6M__)
		/* ARM6M supports only 32bit word access to SHPR registers */
		irqn = (irqn & 0xF) - 4;
 80067d6:	230f      	movs	r3, #15
 80067d8:	4018      	ands	r0, r3
 80067da:	3804      	subs	r0, #4
 80067dc:	b2c0      	uxtb	r0, r0
		uint8_t shift = (irqn & 0x3) << 3;
		uint8_t reg = irqn >> 2;
		SCB_SHPR32(reg) = ((SCB_SHPR32(reg) & ~(0xFFUL << shift)) |
 80067de:	0883      	lsrs	r3, r0, #2
 80067e0:	4a08      	ldr	r2, [pc, #32]	; (8006804 <nvic_set_priority+0x34>)
 80067e2:	009b      	lsls	r3, r3, #2
		/* Device specific interrupts */
#if defined(__ARM_ARCH_6M__)
		/* ARM6M supports only 32bit word access to IPR registers */
		uint8_t shift = (irqn & 0x3) << 3;
		uint8_t reg = irqn >> 2;
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 80067e4:	2418      	movs	r4, #24
		uint8_t shift = (irqn & 0x3) << 3;
 80067e6:	00c0      	lsls	r0, r0, #3
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 80067e8:	4020      	ands	r0, r4
 80067ea:	34e7      	adds	r4, #231	; 0xe7
 80067ec:	4084      	lsls	r4, r0
				((uint32_t) priority) << shift);
 80067ee:	4081      	lsls	r1, r0
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 80067f0:	189b      	adds	r3, r3, r2
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	43a2      	bics	r2, r4
 80067f6:	4311      	orrs	r1, r2
 80067f8:	6019      	str	r1, [r3, #0]
#else
		NVIC_IPR(irqn) = priority;
#endif
	}
}
 80067fa:	bd10      	pop	{r4, pc}
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 80067fc:	0883      	lsrs	r3, r0, #2
 80067fe:	4a02      	ldr	r2, [pc, #8]	; (8006808 <nvic_set_priority+0x38>)
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	e7ef      	b.n	80067e4 <nvic_set_priority+0x14>
 8006804:	e000ed18 	.word	0xe000ed18
 8006808:	e000e400 	.word	0xe000e400

0800680c <malloc>:
 800680c:	b510      	push	{r4, lr}
 800680e:	4b03      	ldr	r3, [pc, #12]	; (800681c <malloc+0x10>)
 8006810:	0001      	movs	r1, r0
 8006812:	6818      	ldr	r0, [r3, #0]
 8006814:	f000 f80e 	bl	8006834 <_malloc_r>
 8006818:	bd10      	pop	{r4, pc}
 800681a:	46c0      	nop			; (mov r8, r8)
 800681c:	200000dc 	.word	0x200000dc

08006820 <memcpy>:
 8006820:	2300      	movs	r3, #0
 8006822:	b510      	push	{r4, lr}
 8006824:	429a      	cmp	r2, r3
 8006826:	d100      	bne.n	800682a <memcpy+0xa>
 8006828:	bd10      	pop	{r4, pc}
 800682a:	5ccc      	ldrb	r4, [r1, r3]
 800682c:	54c4      	strb	r4, [r0, r3]
 800682e:	3301      	adds	r3, #1
 8006830:	e7f8      	b.n	8006824 <memcpy+0x4>
	...

08006834 <_malloc_r>:
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	2303      	movs	r3, #3
 8006838:	1ccd      	adds	r5, r1, #3
 800683a:	439d      	bics	r5, r3
 800683c:	3508      	adds	r5, #8
 800683e:	0006      	movs	r6, r0
 8006840:	2d0c      	cmp	r5, #12
 8006842:	d21f      	bcs.n	8006884 <_malloc_r+0x50>
 8006844:	250c      	movs	r5, #12
 8006846:	42a9      	cmp	r1, r5
 8006848:	d81e      	bhi.n	8006888 <_malloc_r+0x54>
 800684a:	0030      	movs	r0, r6
 800684c:	f000 f86a 	bl	8006924 <__malloc_lock>
 8006850:	4925      	ldr	r1, [pc, #148]	; (80068e8 <_malloc_r+0xb4>)
 8006852:	680a      	ldr	r2, [r1, #0]
 8006854:	0014      	movs	r4, r2
 8006856:	2c00      	cmp	r4, #0
 8006858:	d11a      	bne.n	8006890 <_malloc_r+0x5c>
 800685a:	4f24      	ldr	r7, [pc, #144]	; (80068ec <_malloc_r+0xb8>)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d104      	bne.n	800686c <_malloc_r+0x38>
 8006862:	0021      	movs	r1, r4
 8006864:	0030      	movs	r0, r6
 8006866:	f000 f843 	bl	80068f0 <_sbrk_r>
 800686a:	6038      	str	r0, [r7, #0]
 800686c:	0029      	movs	r1, r5
 800686e:	0030      	movs	r0, r6
 8006870:	f000 f83e 	bl	80068f0 <_sbrk_r>
 8006874:	1c43      	adds	r3, r0, #1
 8006876:	d12b      	bne.n	80068d0 <_malloc_r+0x9c>
 8006878:	230c      	movs	r3, #12
 800687a:	0030      	movs	r0, r6
 800687c:	6033      	str	r3, [r6, #0]
 800687e:	f000 f859 	bl	8006934 <__malloc_unlock>
 8006882:	e003      	b.n	800688c <_malloc_r+0x58>
 8006884:	2d00      	cmp	r5, #0
 8006886:	dade      	bge.n	8006846 <_malloc_r+0x12>
 8006888:	230c      	movs	r3, #12
 800688a:	6033      	str	r3, [r6, #0]
 800688c:	2000      	movs	r0, #0
 800688e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	1b5b      	subs	r3, r3, r5
 8006894:	d419      	bmi.n	80068ca <_malloc_r+0x96>
 8006896:	2b0b      	cmp	r3, #11
 8006898:	d903      	bls.n	80068a2 <_malloc_r+0x6e>
 800689a:	6023      	str	r3, [r4, #0]
 800689c:	18e4      	adds	r4, r4, r3
 800689e:	6025      	str	r5, [r4, #0]
 80068a0:	e003      	b.n	80068aa <_malloc_r+0x76>
 80068a2:	6863      	ldr	r3, [r4, #4]
 80068a4:	42a2      	cmp	r2, r4
 80068a6:	d10e      	bne.n	80068c6 <_malloc_r+0x92>
 80068a8:	600b      	str	r3, [r1, #0]
 80068aa:	0030      	movs	r0, r6
 80068ac:	f000 f842 	bl	8006934 <__malloc_unlock>
 80068b0:	0020      	movs	r0, r4
 80068b2:	2207      	movs	r2, #7
 80068b4:	300b      	adds	r0, #11
 80068b6:	1d23      	adds	r3, r4, #4
 80068b8:	4390      	bics	r0, r2
 80068ba:	1ac2      	subs	r2, r0, r3
 80068bc:	4298      	cmp	r0, r3
 80068be:	d0e6      	beq.n	800688e <_malloc_r+0x5a>
 80068c0:	1a1b      	subs	r3, r3, r0
 80068c2:	50a3      	str	r3, [r4, r2]
 80068c4:	e7e3      	b.n	800688e <_malloc_r+0x5a>
 80068c6:	6053      	str	r3, [r2, #4]
 80068c8:	e7ef      	b.n	80068aa <_malloc_r+0x76>
 80068ca:	0022      	movs	r2, r4
 80068cc:	6864      	ldr	r4, [r4, #4]
 80068ce:	e7c2      	b.n	8006856 <_malloc_r+0x22>
 80068d0:	2303      	movs	r3, #3
 80068d2:	1cc4      	adds	r4, r0, #3
 80068d4:	439c      	bics	r4, r3
 80068d6:	42a0      	cmp	r0, r4
 80068d8:	d0e1      	beq.n	800689e <_malloc_r+0x6a>
 80068da:	1a21      	subs	r1, r4, r0
 80068dc:	0030      	movs	r0, r6
 80068de:	f000 f807 	bl	80068f0 <_sbrk_r>
 80068e2:	1c43      	adds	r3, r0, #1
 80068e4:	d1db      	bne.n	800689e <_malloc_r+0x6a>
 80068e6:	e7c7      	b.n	8006878 <_malloc_r+0x44>
 80068e8:	20000570 	.word	0x20000570
 80068ec:	20000574 	.word	0x20000574

080068f0 <_sbrk_r>:
 80068f0:	2300      	movs	r3, #0
 80068f2:	b570      	push	{r4, r5, r6, lr}
 80068f4:	4d06      	ldr	r5, [pc, #24]	; (8006910 <_sbrk_r+0x20>)
 80068f6:	0004      	movs	r4, r0
 80068f8:	0008      	movs	r0, r1
 80068fa:	602b      	str	r3, [r5, #0]
 80068fc:	f000 f9a4 	bl	8006c48 <_sbrk>
 8006900:	1c43      	adds	r3, r0, #1
 8006902:	d103      	bne.n	800690c <_sbrk_r+0x1c>
 8006904:	682b      	ldr	r3, [r5, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d000      	beq.n	800690c <_sbrk_r+0x1c>
 800690a:	6023      	str	r3, [r4, #0]
 800690c:	bd70      	pop	{r4, r5, r6, pc}
 800690e:	46c0      	nop			; (mov r8, r8)
 8006910:	2000057c 	.word	0x2000057c

08006914 <strlen>:
 8006914:	2300      	movs	r3, #0
 8006916:	5cc2      	ldrb	r2, [r0, r3]
 8006918:	3301      	adds	r3, #1
 800691a:	2a00      	cmp	r2, #0
 800691c:	d1fb      	bne.n	8006916 <strlen+0x2>
 800691e:	1e58      	subs	r0, r3, #1
 8006920:	4770      	bx	lr
	...

08006924 <__malloc_lock>:
 8006924:	b510      	push	{r4, lr}
 8006926:	4802      	ldr	r0, [pc, #8]	; (8006930 <__malloc_lock+0xc>)
 8006928:	f000 f80c 	bl	8006944 <__retarget_lock_acquire_recursive>
 800692c:	bd10      	pop	{r4, pc}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	20000584 	.word	0x20000584

08006934 <__malloc_unlock>:
 8006934:	b510      	push	{r4, lr}
 8006936:	4802      	ldr	r0, [pc, #8]	; (8006940 <__malloc_unlock+0xc>)
 8006938:	f000 f805 	bl	8006946 <__retarget_lock_release_recursive>
 800693c:	bd10      	pop	{r4, pc}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	20000584 	.word	0x20000584

08006944 <__retarget_lock_acquire_recursive>:
 8006944:	4770      	bx	lr

08006946 <__retarget_lock_release_recursive>:
 8006946:	4770      	bx	lr

08006948 <__gnu_thumb1_case_uqi>:
 8006948:	b402      	push	{r1}
 800694a:	4671      	mov	r1, lr
 800694c:	0849      	lsrs	r1, r1, #1
 800694e:	0049      	lsls	r1, r1, #1
 8006950:	5c09      	ldrb	r1, [r1, r0]
 8006952:	0049      	lsls	r1, r1, #1
 8006954:	448e      	add	lr, r1
 8006956:	bc02      	pop	{r1}
 8006958:	4770      	bx	lr
 800695a:	46c0      	nop			; (mov r8, r8)

0800695c <__udivsi3>:
 800695c:	2200      	movs	r2, #0
 800695e:	0843      	lsrs	r3, r0, #1
 8006960:	428b      	cmp	r3, r1
 8006962:	d374      	bcc.n	8006a4e <__udivsi3+0xf2>
 8006964:	0903      	lsrs	r3, r0, #4
 8006966:	428b      	cmp	r3, r1
 8006968:	d35f      	bcc.n	8006a2a <__udivsi3+0xce>
 800696a:	0a03      	lsrs	r3, r0, #8
 800696c:	428b      	cmp	r3, r1
 800696e:	d344      	bcc.n	80069fa <__udivsi3+0x9e>
 8006970:	0b03      	lsrs	r3, r0, #12
 8006972:	428b      	cmp	r3, r1
 8006974:	d328      	bcc.n	80069c8 <__udivsi3+0x6c>
 8006976:	0c03      	lsrs	r3, r0, #16
 8006978:	428b      	cmp	r3, r1
 800697a:	d30d      	bcc.n	8006998 <__udivsi3+0x3c>
 800697c:	22ff      	movs	r2, #255	; 0xff
 800697e:	0209      	lsls	r1, r1, #8
 8006980:	ba12      	rev	r2, r2
 8006982:	0c03      	lsrs	r3, r0, #16
 8006984:	428b      	cmp	r3, r1
 8006986:	d302      	bcc.n	800698e <__udivsi3+0x32>
 8006988:	1212      	asrs	r2, r2, #8
 800698a:	0209      	lsls	r1, r1, #8
 800698c:	d065      	beq.n	8006a5a <__udivsi3+0xfe>
 800698e:	0b03      	lsrs	r3, r0, #12
 8006990:	428b      	cmp	r3, r1
 8006992:	d319      	bcc.n	80069c8 <__udivsi3+0x6c>
 8006994:	e000      	b.n	8006998 <__udivsi3+0x3c>
 8006996:	0a09      	lsrs	r1, r1, #8
 8006998:	0bc3      	lsrs	r3, r0, #15
 800699a:	428b      	cmp	r3, r1
 800699c:	d301      	bcc.n	80069a2 <__udivsi3+0x46>
 800699e:	03cb      	lsls	r3, r1, #15
 80069a0:	1ac0      	subs	r0, r0, r3
 80069a2:	4152      	adcs	r2, r2
 80069a4:	0b83      	lsrs	r3, r0, #14
 80069a6:	428b      	cmp	r3, r1
 80069a8:	d301      	bcc.n	80069ae <__udivsi3+0x52>
 80069aa:	038b      	lsls	r3, r1, #14
 80069ac:	1ac0      	subs	r0, r0, r3
 80069ae:	4152      	adcs	r2, r2
 80069b0:	0b43      	lsrs	r3, r0, #13
 80069b2:	428b      	cmp	r3, r1
 80069b4:	d301      	bcc.n	80069ba <__udivsi3+0x5e>
 80069b6:	034b      	lsls	r3, r1, #13
 80069b8:	1ac0      	subs	r0, r0, r3
 80069ba:	4152      	adcs	r2, r2
 80069bc:	0b03      	lsrs	r3, r0, #12
 80069be:	428b      	cmp	r3, r1
 80069c0:	d301      	bcc.n	80069c6 <__udivsi3+0x6a>
 80069c2:	030b      	lsls	r3, r1, #12
 80069c4:	1ac0      	subs	r0, r0, r3
 80069c6:	4152      	adcs	r2, r2
 80069c8:	0ac3      	lsrs	r3, r0, #11
 80069ca:	428b      	cmp	r3, r1
 80069cc:	d301      	bcc.n	80069d2 <__udivsi3+0x76>
 80069ce:	02cb      	lsls	r3, r1, #11
 80069d0:	1ac0      	subs	r0, r0, r3
 80069d2:	4152      	adcs	r2, r2
 80069d4:	0a83      	lsrs	r3, r0, #10
 80069d6:	428b      	cmp	r3, r1
 80069d8:	d301      	bcc.n	80069de <__udivsi3+0x82>
 80069da:	028b      	lsls	r3, r1, #10
 80069dc:	1ac0      	subs	r0, r0, r3
 80069de:	4152      	adcs	r2, r2
 80069e0:	0a43      	lsrs	r3, r0, #9
 80069e2:	428b      	cmp	r3, r1
 80069e4:	d301      	bcc.n	80069ea <__udivsi3+0x8e>
 80069e6:	024b      	lsls	r3, r1, #9
 80069e8:	1ac0      	subs	r0, r0, r3
 80069ea:	4152      	adcs	r2, r2
 80069ec:	0a03      	lsrs	r3, r0, #8
 80069ee:	428b      	cmp	r3, r1
 80069f0:	d301      	bcc.n	80069f6 <__udivsi3+0x9a>
 80069f2:	020b      	lsls	r3, r1, #8
 80069f4:	1ac0      	subs	r0, r0, r3
 80069f6:	4152      	adcs	r2, r2
 80069f8:	d2cd      	bcs.n	8006996 <__udivsi3+0x3a>
 80069fa:	09c3      	lsrs	r3, r0, #7
 80069fc:	428b      	cmp	r3, r1
 80069fe:	d301      	bcc.n	8006a04 <__udivsi3+0xa8>
 8006a00:	01cb      	lsls	r3, r1, #7
 8006a02:	1ac0      	subs	r0, r0, r3
 8006a04:	4152      	adcs	r2, r2
 8006a06:	0983      	lsrs	r3, r0, #6
 8006a08:	428b      	cmp	r3, r1
 8006a0a:	d301      	bcc.n	8006a10 <__udivsi3+0xb4>
 8006a0c:	018b      	lsls	r3, r1, #6
 8006a0e:	1ac0      	subs	r0, r0, r3
 8006a10:	4152      	adcs	r2, r2
 8006a12:	0943      	lsrs	r3, r0, #5
 8006a14:	428b      	cmp	r3, r1
 8006a16:	d301      	bcc.n	8006a1c <__udivsi3+0xc0>
 8006a18:	014b      	lsls	r3, r1, #5
 8006a1a:	1ac0      	subs	r0, r0, r3
 8006a1c:	4152      	adcs	r2, r2
 8006a1e:	0903      	lsrs	r3, r0, #4
 8006a20:	428b      	cmp	r3, r1
 8006a22:	d301      	bcc.n	8006a28 <__udivsi3+0xcc>
 8006a24:	010b      	lsls	r3, r1, #4
 8006a26:	1ac0      	subs	r0, r0, r3
 8006a28:	4152      	adcs	r2, r2
 8006a2a:	08c3      	lsrs	r3, r0, #3
 8006a2c:	428b      	cmp	r3, r1
 8006a2e:	d301      	bcc.n	8006a34 <__udivsi3+0xd8>
 8006a30:	00cb      	lsls	r3, r1, #3
 8006a32:	1ac0      	subs	r0, r0, r3
 8006a34:	4152      	adcs	r2, r2
 8006a36:	0883      	lsrs	r3, r0, #2
 8006a38:	428b      	cmp	r3, r1
 8006a3a:	d301      	bcc.n	8006a40 <__udivsi3+0xe4>
 8006a3c:	008b      	lsls	r3, r1, #2
 8006a3e:	1ac0      	subs	r0, r0, r3
 8006a40:	4152      	adcs	r2, r2
 8006a42:	0843      	lsrs	r3, r0, #1
 8006a44:	428b      	cmp	r3, r1
 8006a46:	d301      	bcc.n	8006a4c <__udivsi3+0xf0>
 8006a48:	004b      	lsls	r3, r1, #1
 8006a4a:	1ac0      	subs	r0, r0, r3
 8006a4c:	4152      	adcs	r2, r2
 8006a4e:	1a41      	subs	r1, r0, r1
 8006a50:	d200      	bcs.n	8006a54 <__udivsi3+0xf8>
 8006a52:	4601      	mov	r1, r0
 8006a54:	4152      	adcs	r2, r2
 8006a56:	4610      	mov	r0, r2
 8006a58:	4770      	bx	lr
 8006a5a:	e7ff      	b.n	8006a5c <__udivsi3+0x100>
 8006a5c:	b501      	push	{r0, lr}
 8006a5e:	2000      	movs	r0, #0
 8006a60:	f000 f8f0 	bl	8006c44 <__aeabi_idiv0>
 8006a64:	bd02      	pop	{r1, pc}
 8006a66:	46c0      	nop			; (mov r8, r8)

08006a68 <__aeabi_uidivmod>:
 8006a68:	2900      	cmp	r1, #0
 8006a6a:	d0f7      	beq.n	8006a5c <__udivsi3+0x100>
 8006a6c:	e776      	b.n	800695c <__udivsi3>
 8006a6e:	4770      	bx	lr

08006a70 <__divsi3>:
 8006a70:	4603      	mov	r3, r0
 8006a72:	430b      	orrs	r3, r1
 8006a74:	d47f      	bmi.n	8006b76 <__divsi3+0x106>
 8006a76:	2200      	movs	r2, #0
 8006a78:	0843      	lsrs	r3, r0, #1
 8006a7a:	428b      	cmp	r3, r1
 8006a7c:	d374      	bcc.n	8006b68 <__divsi3+0xf8>
 8006a7e:	0903      	lsrs	r3, r0, #4
 8006a80:	428b      	cmp	r3, r1
 8006a82:	d35f      	bcc.n	8006b44 <__divsi3+0xd4>
 8006a84:	0a03      	lsrs	r3, r0, #8
 8006a86:	428b      	cmp	r3, r1
 8006a88:	d344      	bcc.n	8006b14 <__divsi3+0xa4>
 8006a8a:	0b03      	lsrs	r3, r0, #12
 8006a8c:	428b      	cmp	r3, r1
 8006a8e:	d328      	bcc.n	8006ae2 <__divsi3+0x72>
 8006a90:	0c03      	lsrs	r3, r0, #16
 8006a92:	428b      	cmp	r3, r1
 8006a94:	d30d      	bcc.n	8006ab2 <__divsi3+0x42>
 8006a96:	22ff      	movs	r2, #255	; 0xff
 8006a98:	0209      	lsls	r1, r1, #8
 8006a9a:	ba12      	rev	r2, r2
 8006a9c:	0c03      	lsrs	r3, r0, #16
 8006a9e:	428b      	cmp	r3, r1
 8006aa0:	d302      	bcc.n	8006aa8 <__divsi3+0x38>
 8006aa2:	1212      	asrs	r2, r2, #8
 8006aa4:	0209      	lsls	r1, r1, #8
 8006aa6:	d065      	beq.n	8006b74 <__divsi3+0x104>
 8006aa8:	0b03      	lsrs	r3, r0, #12
 8006aaa:	428b      	cmp	r3, r1
 8006aac:	d319      	bcc.n	8006ae2 <__divsi3+0x72>
 8006aae:	e000      	b.n	8006ab2 <__divsi3+0x42>
 8006ab0:	0a09      	lsrs	r1, r1, #8
 8006ab2:	0bc3      	lsrs	r3, r0, #15
 8006ab4:	428b      	cmp	r3, r1
 8006ab6:	d301      	bcc.n	8006abc <__divsi3+0x4c>
 8006ab8:	03cb      	lsls	r3, r1, #15
 8006aba:	1ac0      	subs	r0, r0, r3
 8006abc:	4152      	adcs	r2, r2
 8006abe:	0b83      	lsrs	r3, r0, #14
 8006ac0:	428b      	cmp	r3, r1
 8006ac2:	d301      	bcc.n	8006ac8 <__divsi3+0x58>
 8006ac4:	038b      	lsls	r3, r1, #14
 8006ac6:	1ac0      	subs	r0, r0, r3
 8006ac8:	4152      	adcs	r2, r2
 8006aca:	0b43      	lsrs	r3, r0, #13
 8006acc:	428b      	cmp	r3, r1
 8006ace:	d301      	bcc.n	8006ad4 <__divsi3+0x64>
 8006ad0:	034b      	lsls	r3, r1, #13
 8006ad2:	1ac0      	subs	r0, r0, r3
 8006ad4:	4152      	adcs	r2, r2
 8006ad6:	0b03      	lsrs	r3, r0, #12
 8006ad8:	428b      	cmp	r3, r1
 8006ada:	d301      	bcc.n	8006ae0 <__divsi3+0x70>
 8006adc:	030b      	lsls	r3, r1, #12
 8006ade:	1ac0      	subs	r0, r0, r3
 8006ae0:	4152      	adcs	r2, r2
 8006ae2:	0ac3      	lsrs	r3, r0, #11
 8006ae4:	428b      	cmp	r3, r1
 8006ae6:	d301      	bcc.n	8006aec <__divsi3+0x7c>
 8006ae8:	02cb      	lsls	r3, r1, #11
 8006aea:	1ac0      	subs	r0, r0, r3
 8006aec:	4152      	adcs	r2, r2
 8006aee:	0a83      	lsrs	r3, r0, #10
 8006af0:	428b      	cmp	r3, r1
 8006af2:	d301      	bcc.n	8006af8 <__divsi3+0x88>
 8006af4:	028b      	lsls	r3, r1, #10
 8006af6:	1ac0      	subs	r0, r0, r3
 8006af8:	4152      	adcs	r2, r2
 8006afa:	0a43      	lsrs	r3, r0, #9
 8006afc:	428b      	cmp	r3, r1
 8006afe:	d301      	bcc.n	8006b04 <__divsi3+0x94>
 8006b00:	024b      	lsls	r3, r1, #9
 8006b02:	1ac0      	subs	r0, r0, r3
 8006b04:	4152      	adcs	r2, r2
 8006b06:	0a03      	lsrs	r3, r0, #8
 8006b08:	428b      	cmp	r3, r1
 8006b0a:	d301      	bcc.n	8006b10 <__divsi3+0xa0>
 8006b0c:	020b      	lsls	r3, r1, #8
 8006b0e:	1ac0      	subs	r0, r0, r3
 8006b10:	4152      	adcs	r2, r2
 8006b12:	d2cd      	bcs.n	8006ab0 <__divsi3+0x40>
 8006b14:	09c3      	lsrs	r3, r0, #7
 8006b16:	428b      	cmp	r3, r1
 8006b18:	d301      	bcc.n	8006b1e <__divsi3+0xae>
 8006b1a:	01cb      	lsls	r3, r1, #7
 8006b1c:	1ac0      	subs	r0, r0, r3
 8006b1e:	4152      	adcs	r2, r2
 8006b20:	0983      	lsrs	r3, r0, #6
 8006b22:	428b      	cmp	r3, r1
 8006b24:	d301      	bcc.n	8006b2a <__divsi3+0xba>
 8006b26:	018b      	lsls	r3, r1, #6
 8006b28:	1ac0      	subs	r0, r0, r3
 8006b2a:	4152      	adcs	r2, r2
 8006b2c:	0943      	lsrs	r3, r0, #5
 8006b2e:	428b      	cmp	r3, r1
 8006b30:	d301      	bcc.n	8006b36 <__divsi3+0xc6>
 8006b32:	014b      	lsls	r3, r1, #5
 8006b34:	1ac0      	subs	r0, r0, r3
 8006b36:	4152      	adcs	r2, r2
 8006b38:	0903      	lsrs	r3, r0, #4
 8006b3a:	428b      	cmp	r3, r1
 8006b3c:	d301      	bcc.n	8006b42 <__divsi3+0xd2>
 8006b3e:	010b      	lsls	r3, r1, #4
 8006b40:	1ac0      	subs	r0, r0, r3
 8006b42:	4152      	adcs	r2, r2
 8006b44:	08c3      	lsrs	r3, r0, #3
 8006b46:	428b      	cmp	r3, r1
 8006b48:	d301      	bcc.n	8006b4e <__divsi3+0xde>
 8006b4a:	00cb      	lsls	r3, r1, #3
 8006b4c:	1ac0      	subs	r0, r0, r3
 8006b4e:	4152      	adcs	r2, r2
 8006b50:	0883      	lsrs	r3, r0, #2
 8006b52:	428b      	cmp	r3, r1
 8006b54:	d301      	bcc.n	8006b5a <__divsi3+0xea>
 8006b56:	008b      	lsls	r3, r1, #2
 8006b58:	1ac0      	subs	r0, r0, r3
 8006b5a:	4152      	adcs	r2, r2
 8006b5c:	0843      	lsrs	r3, r0, #1
 8006b5e:	428b      	cmp	r3, r1
 8006b60:	d301      	bcc.n	8006b66 <__divsi3+0xf6>
 8006b62:	004b      	lsls	r3, r1, #1
 8006b64:	1ac0      	subs	r0, r0, r3
 8006b66:	4152      	adcs	r2, r2
 8006b68:	1a41      	subs	r1, r0, r1
 8006b6a:	d200      	bcs.n	8006b6e <__divsi3+0xfe>
 8006b6c:	4601      	mov	r1, r0
 8006b6e:	4152      	adcs	r2, r2
 8006b70:	4610      	mov	r0, r2
 8006b72:	4770      	bx	lr
 8006b74:	e05d      	b.n	8006c32 <__divsi3+0x1c2>
 8006b76:	0fca      	lsrs	r2, r1, #31
 8006b78:	d000      	beq.n	8006b7c <__divsi3+0x10c>
 8006b7a:	4249      	negs	r1, r1
 8006b7c:	1003      	asrs	r3, r0, #32
 8006b7e:	d300      	bcc.n	8006b82 <__divsi3+0x112>
 8006b80:	4240      	negs	r0, r0
 8006b82:	4053      	eors	r3, r2
 8006b84:	2200      	movs	r2, #0
 8006b86:	469c      	mov	ip, r3
 8006b88:	0903      	lsrs	r3, r0, #4
 8006b8a:	428b      	cmp	r3, r1
 8006b8c:	d32d      	bcc.n	8006bea <__divsi3+0x17a>
 8006b8e:	0a03      	lsrs	r3, r0, #8
 8006b90:	428b      	cmp	r3, r1
 8006b92:	d312      	bcc.n	8006bba <__divsi3+0x14a>
 8006b94:	22fc      	movs	r2, #252	; 0xfc
 8006b96:	0189      	lsls	r1, r1, #6
 8006b98:	ba12      	rev	r2, r2
 8006b9a:	0a03      	lsrs	r3, r0, #8
 8006b9c:	428b      	cmp	r3, r1
 8006b9e:	d30c      	bcc.n	8006bba <__divsi3+0x14a>
 8006ba0:	0189      	lsls	r1, r1, #6
 8006ba2:	1192      	asrs	r2, r2, #6
 8006ba4:	428b      	cmp	r3, r1
 8006ba6:	d308      	bcc.n	8006bba <__divsi3+0x14a>
 8006ba8:	0189      	lsls	r1, r1, #6
 8006baa:	1192      	asrs	r2, r2, #6
 8006bac:	428b      	cmp	r3, r1
 8006bae:	d304      	bcc.n	8006bba <__divsi3+0x14a>
 8006bb0:	0189      	lsls	r1, r1, #6
 8006bb2:	d03a      	beq.n	8006c2a <__divsi3+0x1ba>
 8006bb4:	1192      	asrs	r2, r2, #6
 8006bb6:	e000      	b.n	8006bba <__divsi3+0x14a>
 8006bb8:	0989      	lsrs	r1, r1, #6
 8006bba:	09c3      	lsrs	r3, r0, #7
 8006bbc:	428b      	cmp	r3, r1
 8006bbe:	d301      	bcc.n	8006bc4 <__divsi3+0x154>
 8006bc0:	01cb      	lsls	r3, r1, #7
 8006bc2:	1ac0      	subs	r0, r0, r3
 8006bc4:	4152      	adcs	r2, r2
 8006bc6:	0983      	lsrs	r3, r0, #6
 8006bc8:	428b      	cmp	r3, r1
 8006bca:	d301      	bcc.n	8006bd0 <__divsi3+0x160>
 8006bcc:	018b      	lsls	r3, r1, #6
 8006bce:	1ac0      	subs	r0, r0, r3
 8006bd0:	4152      	adcs	r2, r2
 8006bd2:	0943      	lsrs	r3, r0, #5
 8006bd4:	428b      	cmp	r3, r1
 8006bd6:	d301      	bcc.n	8006bdc <__divsi3+0x16c>
 8006bd8:	014b      	lsls	r3, r1, #5
 8006bda:	1ac0      	subs	r0, r0, r3
 8006bdc:	4152      	adcs	r2, r2
 8006bde:	0903      	lsrs	r3, r0, #4
 8006be0:	428b      	cmp	r3, r1
 8006be2:	d301      	bcc.n	8006be8 <__divsi3+0x178>
 8006be4:	010b      	lsls	r3, r1, #4
 8006be6:	1ac0      	subs	r0, r0, r3
 8006be8:	4152      	adcs	r2, r2
 8006bea:	08c3      	lsrs	r3, r0, #3
 8006bec:	428b      	cmp	r3, r1
 8006bee:	d301      	bcc.n	8006bf4 <__divsi3+0x184>
 8006bf0:	00cb      	lsls	r3, r1, #3
 8006bf2:	1ac0      	subs	r0, r0, r3
 8006bf4:	4152      	adcs	r2, r2
 8006bf6:	0883      	lsrs	r3, r0, #2
 8006bf8:	428b      	cmp	r3, r1
 8006bfa:	d301      	bcc.n	8006c00 <__divsi3+0x190>
 8006bfc:	008b      	lsls	r3, r1, #2
 8006bfe:	1ac0      	subs	r0, r0, r3
 8006c00:	4152      	adcs	r2, r2
 8006c02:	d2d9      	bcs.n	8006bb8 <__divsi3+0x148>
 8006c04:	0843      	lsrs	r3, r0, #1
 8006c06:	428b      	cmp	r3, r1
 8006c08:	d301      	bcc.n	8006c0e <__divsi3+0x19e>
 8006c0a:	004b      	lsls	r3, r1, #1
 8006c0c:	1ac0      	subs	r0, r0, r3
 8006c0e:	4152      	adcs	r2, r2
 8006c10:	1a41      	subs	r1, r0, r1
 8006c12:	d200      	bcs.n	8006c16 <__divsi3+0x1a6>
 8006c14:	4601      	mov	r1, r0
 8006c16:	4663      	mov	r3, ip
 8006c18:	4152      	adcs	r2, r2
 8006c1a:	105b      	asrs	r3, r3, #1
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	d301      	bcc.n	8006c24 <__divsi3+0x1b4>
 8006c20:	4240      	negs	r0, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d500      	bpl.n	8006c28 <__divsi3+0x1b8>
 8006c26:	4249      	negs	r1, r1
 8006c28:	4770      	bx	lr
 8006c2a:	4663      	mov	r3, ip
 8006c2c:	105b      	asrs	r3, r3, #1
 8006c2e:	d300      	bcc.n	8006c32 <__divsi3+0x1c2>
 8006c30:	4240      	negs	r0, r0
 8006c32:	b501      	push	{r0, lr}
 8006c34:	2000      	movs	r0, #0
 8006c36:	f000 f805 	bl	8006c44 <__aeabi_idiv0>
 8006c3a:	bd02      	pop	{r1, pc}

08006c3c <__aeabi_idivmod>:
 8006c3c:	2900      	cmp	r1, #0
 8006c3e:	d0f8      	beq.n	8006c32 <__divsi3+0x1c2>
 8006c40:	e716      	b.n	8006a70 <__divsi3>
 8006c42:	4770      	bx	lr

08006c44 <__aeabi_idiv0>:
 8006c44:	4770      	bx	lr
 8006c46:	46c0      	nop			; (mov r8, r8)

08006c48 <_sbrk>:
 8006c48:	4a04      	ldr	r2, [pc, #16]	; (8006c5c <_sbrk+0x14>)
 8006c4a:	0003      	movs	r3, r0
 8006c4c:	6810      	ldr	r0, [r2, #0]
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d002      	beq.n	8006c58 <_sbrk+0x10>
 8006c52:	18c3      	adds	r3, r0, r3
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	4770      	bx	lr
 8006c58:	4801      	ldr	r0, [pc, #4]	; (8006c60 <_sbrk+0x18>)
 8006c5a:	e7fa      	b.n	8006c52 <_sbrk+0xa>
 8006c5c:	20000578 	.word	0x20000578
 8006c60:	2000058c 	.word	0x2000058c
 8006c64:	00000000 	.word	0x00000000

08006c68 <__mem_flash_do_page_erase_veneer>:
 8006c68:	b401      	push	{r0}
 8006c6a:	4802      	ldr	r0, [pc, #8]	; (8006c74 <__mem_flash_do_page_erase_veneer+0xc>)
 8006c6c:	4684      	mov	ip, r0
 8006c6e:	bc01      	pop	{r0}
 8006c70:	4760      	bx	ip
 8006c72:	bf00      	nop
 8006c74:	20000041 	.word	0x20000041

08006c78 <__mem_flash_do_write_half_page_veneer>:
 8006c78:	b401      	push	{r0}
 8006c7a:	4802      	ldr	r0, [pc, #8]	; (8006c84 <__mem_flash_do_write_half_page_veneer+0xc>)
 8006c7c:	4684      	mov	ip, r0
 8006c7e:	bc01      	pop	{r0}
 8006c80:	4760      	bx	ip
 8006c82:	bf00      	nop
 8006c84:	20000081 	.word	0x20000081
 8006c88:	2074754f 	.word	0x2074754f
 8006c8c:	6f706552 	.word	0x6f706552
 8006c90:	43207472 	.word	0x43207472
 8006c94:	626c6c61 	.word	0x626c6c61
 8006c98:	0a6b6361 	.word	0x0a6b6361
 8006c9c:	00000000 	.word	0x00000000
 8006ca0:	00000049 	.word	0x00000049
 8006ca4:	6c6f6f43 	.word	0x6c6f6f43
 8006ca8:	65736145 	.word	0x65736145
 8006cac:	00000000 	.word	0x00000000
 8006cb0:	6c6f6f43 	.word	0x6c6f6f43
 8006cb4:	65736145 	.word	0x65736145
 8006cb8:	62754820 	.word	0x62754820
 8006cbc:	00000000 	.word	0x00000000
 8006cc0:	34333231 	.word	0x34333231
 8006cc4:	00000035 	.word	0x00000035
 8006cc8:	74737543 	.word	0x74737543
 8006ccc:	48206d6f 	.word	0x48206d6f
 8006cd0:	43204449 	.word	0x43204449
 8006cd4:	69666e6f 	.word	0x69666e6f
 8006cd8:	73754367 	.word	0x73754367
 8006cdc:	206d6f74 	.word	0x206d6f74
 8006ce0:	20444948 	.word	0x20444948
 8006ce4:	65746e49 	.word	0x65746e49
 8006ce8:	63616672 	.word	0x63616672
 8006cec:	00000065 	.word	0x00000065

08006cf0 <cfg_desc>:
 8006cf0:	00000209 80040101 006d74c8 00000008     .........tm.....

08006d00 <dev_desc>:
 8006d00:	02000112 40000000 57500483 02010200     .......@..PW....
 8006d10:	00000103                                ....

08006d14 <hid_function>:
 8006d14:	01112109 19220100 00000000              .!....".....

08006d20 <hid_interface>:
 8006d20:	00000409 00000302 006d3805 006d1408     .........8m...m.
 8006d30:	00000908 00000000                       ........

08006d38 <hid_interface_endpoints>:
 8006d38:	03810507 00010040 00000000 07000000     ....@...........
 8006d48:	40030105 00000100 00000000 00000000     ...@............

08006d58 <hid_report_descriptor>:
 8006d58:	09ff0006 0901a101 26001501 087500ff     ...........&..u.
 8006d68:	02814095 02910109 000000c0              .@..........

08006d74 <interfaces>:
 8006d74:	00000000 00000001 00000000 08006d20     ............ m..

08006d84 <usb_strings>:
 8006d84:	08006ca4 08006cb0 08006cc0 08006cc8     .l...l...l...l..
 8006d94:	20627548 72617453 00000a74 20627548     Hub Start...Hub 
 8006da4:	706f6f4c 00000a0a 0a696d6e 00000000     Loop....nmi.....
 8006db4:	64726168 75616620 000a746c 67756c50     hard fault..Plug
 8006dc4:	20646567 0a74754f 00000000 67756c50     ged Out.....Plug
 8006dd4:	20646567 000a6e49 65736552 65532074     ged In..Reset Se
 8006de4:	6e657571 000a6563 6f727245 44412072     quence..Error AD
 8006df4:	53492043 65442052 74756166 73614320     C ISR Defaut Cas
 8006e04:	00000a65 080045a6 080045c0 080045ec     e....E...E...E..
 8006e14:	08004624 08004644 6f4c0a0a 6e492067     $F..DF....Log In
 8006e24:	2d0a7469 2d2d2d2d 2d2d2d2d 2d2d2d2d     it.-------------
 8006e34:	0a2d2d2d 00000000 206d654d 20676f4c     ---.....Mem Log 
 8006e44:	52504545 41204d4f 65726464 6f207373     EEPROM Address o
 8006e54:	6f207475 6f622066 73646e75 0000000a     ut of bounds....
 8006e64:	08004bca 08004bd8 08004bd8 08004bd8     .K...K...K...K..
 8006e74:	08004bd8 08004bd8 08004bd8 08004bd8     .K...K...K...K..
 8006e84:	08004bd8 08004bd8 08004bd8 08004bd8     .K...K...K...K..
 8006e94:	08004bd8 08004bd8 08004bd8 08004bd8     .K...K...K...K..
 8006ea4:	08004bd8 08004bd8 08004bd8 08004bd8     .K...K...K...K..
 8006eb4:	08004bd8 08004bd8 08004bd8 08004bd8     .K...K...K...K..
 8006ec4:	08004bd8 08004bd8 08004bd8 08004bd8     .K...K...K...K..
 8006ed4:	08004bd8 08004bd8 08004bd8 08004bd8     .K...K...K...K..
 8006ee4:	08004bd8 08004bd8 08004bd8 08004bd8     .K...K...K...K..
 8006ef4:	08004bd8 08004bd8 08004bd8 08004bd8     .K...K...K...K..
 8006f04:	08004bd8 08004bd8 08004bd8 08004bd8     .K...K...K...K..
 8006f14:	08004bd8 08004bd8 08004bd8 08004bd8     .K...K...K...K..
 8006f24:	08004bd8 08004bd8 08004bd8 08004afe     .K...K...K...J..
 8006f34:	08004bd8 08004bd8 08004bd8 08004bd8     .K...K...K...K..
 8006f44:	08004bd8 08004bd8 08004bd8 08004bd8     .K...K...K...K..
 8006f54:	08004bd8 08004afe 08004b60 08004afe     .K...J..`K...J..
 8006f64:	08004bd8 08004bd8 08004bd8 08004bd8     .K...K...K...K..
 8006f74:	08004afe 08004bd8 08004bd8 08004bd8     .J...K...K...K..
 8006f84:	08004bd8 08004bd8 08004afe 08004baa     .K...K...J...K..
 8006f94:	08004bd8 08004bd8 08004b74 08004bd8     .K...K..tK...K..
 8006fa4:	08004afe 08004bd8 08004bd8 08004afe     .J...K...K...J..
 8006fb4:	204d4652 20495053 74697257 00000065     RFM SPI Write...
 8006fc4:	74736554 6d654d20 69725720 52206574     Test Mem Write R
 8006fd4:	0a646165 0000000a 52504545 53204d4f     ead.....EEPROM S
 8006fe4:	74726174 3025203a 3a207838 38302520     tart: %08x : %08
 8006ff4:	00000a78 676f7250 6d6d6172 3a676e69     x...Programming:
 8007004:	38302520 00000a78 52504545 45204d4f      %08x...EEPROM E
 8007014:	203a646e 78383025 25203a20 0a783830     nd: %08x : %08x.
 8007024:	0000000a 73616c46 72452068 0a657361     ....Flash Erase.
 8007034:	00000000 73616c46 74532068 3a747261     ....Flash Start:
 8007044:	38302520 203a2078 78383025 3830250a      %08x : %08x.%08
 8007054:	203a2078 78383025 0000000a 676f7250     x : %08x....Prog
 8007064:	6d6d6172 20676e69 78383025 38302520     ramming %08x %08
 8007074:	00000a78 73616c46 6e452068 25203a64     x...Flash End: %
 8007084:	20783830 3025203a 250a7838 20783830     08x : %08x.%08x 
 8007094:	3025203a 000a7838 656d6954 2074756f     : %08x..Timeout 
 80070a4:	25207325 0a583830 00000000 20435452     %s %08X.....RTC 
 80070b4:	0a525349 00000000                       ISR.....

080070bc <st_usbfs_v2_usb_driver>:
 80070bc:	0800667d 08006179 080061c1 080062d5     }f..ya...a...b..
 80070cc:	08006319 080063f9 080063bd 08006445     .c...c...c..Ed..
 80070dc:	080064b9 08006561 0800665d 00000000     .d..ae..]f......
 80070ec:	00000000                                ....

Disassembly of section .data:

20000000 <hid_report_buf>:
20000000:	61666544 20746c75 6f706552 42207472     Default Report B
20000010:	65666675 00000072 00000000 00000000     uffer...........
	...

20000040 <mem_flash_do_page_erase>:
 * address: Page-aligned address to erase
 */
static _RAM bool mem_flash_do_page_erase(uint32_t address)
{
    //erase operation
    FLASH_PECR |= FLASH_PECR_ERASE | FLASH_PECR_PROG;
20000040:	4a0c      	ldr	r2, [pc, #48]	; (20000074 <mem_flash_do_page_erase+0x34>)
20000042:	6811      	ldr	r1, [r2, #0]
20000044:	2382      	movs	r3, #130	; 0x82
20000046:	009b      	lsls	r3, r3, #2
20000048:	430b      	orrs	r3, r1
2000004a:	6013      	str	r3, [r2, #0]
    MMIO32(address) = (uint32_t)0;
2000004c:	2300      	movs	r3, #0
2000004e:	6003      	str	r3, [r0, #0]
    //wait for completion
    while (FLASH_SR & FLASH_SR_BSY) { }
20000050:	4b09      	ldr	r3, [pc, #36]	; (20000078 <mem_flash_do_page_erase+0x38>)
20000052:	681b      	ldr	r3, [r3, #0]
20000054:	07db      	lsls	r3, r3, #31
20000056:	d4fb      	bmi.n	20000050 <mem_flash_do_page_erase+0x10>
    if (FLASH_SR & FLASH_SR_EOP)
20000058:	4b07      	ldr	r3, [pc, #28]	; (20000078 <mem_flash_do_page_erase+0x38>)
2000005a:	681b      	ldr	r3, [r3, #0]
2000005c:	079b      	lsls	r3, r3, #30
2000005e:	d504      	bpl.n	2000006a <mem_flash_do_page_erase+0x2a>
    {
        //completed without incident
        FLASH_SR = FLASH_SR_EOP;
20000060:	4b05      	ldr	r3, [pc, #20]	; (20000078 <mem_flash_do_page_erase+0x38>)
20000062:	2202      	movs	r2, #2
20000064:	601a      	str	r2, [r3, #0]
        return true;
20000066:	2001      	movs	r0, #1
    {
        //there was an error
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
        return false;
    }
}
20000068:	4770      	bx	lr
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
2000006a:	4b03      	ldr	r3, [pc, #12]	; (20000078 <mem_flash_do_page_erase+0x38>)
2000006c:	4a03      	ldr	r2, [pc, #12]	; (2000007c <mem_flash_do_page_erase+0x3c>)
2000006e:	601a      	str	r2, [r3, #0]
        return false;
20000070:	2000      	movs	r0, #0
20000072:	e7f9      	b.n	20000068 <mem_flash_do_page_erase+0x28>
20000074:	40022004 	.word	0x40022004
20000078:	40022018 	.word	0x40022018
2000007c:	00020300 	.word	0x00020300

20000080 <mem_flash_do_write_half_page>:
 *
 * address: Half-page aligned address to write
 * data: Array to 16 32-bit words to write
 */
static _RAM bool mem_flash_do_write_half_page(uint32_t address, uint32_t *data)
{
20000080:	b510      	push	{r4, lr}
    uint8_t i;

    //half-page program operation
    FLASH_PECR |= FLASH_PECR_PROG | FLASH_PECR_FPRG;
20000082:	4a10      	ldr	r2, [pc, #64]	; (200000c4 <mem_flash_do_write_half_page+0x44>)
20000084:	6814      	ldr	r4, [r2, #0]
20000086:	2381      	movs	r3, #129	; 0x81
20000088:	00db      	lsls	r3, r3, #3
2000008a:	4323      	orrs	r3, r4
2000008c:	6013      	str	r3, [r2, #0]
    for (i = 0; i < 16; i++)
2000008e:	2300      	movs	r3, #0
20000090:	2b0f      	cmp	r3, #15
20000092:	d805      	bhi.n	200000a0 <mem_flash_do_write_half_page+0x20>
    {
        MMIO32(address) = data[i]; //the actual address written is unimportant as these words will be queued
20000094:	009a      	lsls	r2, r3, #2
20000096:	5852      	ldr	r2, [r2, r1]
20000098:	6002      	str	r2, [r0, #0]
    for (i = 0; i < 16; i++)
2000009a:	3301      	adds	r3, #1
2000009c:	b2db      	uxtb	r3, r3
2000009e:	e7f7      	b.n	20000090 <mem_flash_do_write_half_page+0x10>
    }
    //wait for completion
    while (FLASH_SR & FLASH_SR_BSY) { }
200000a0:	4b09      	ldr	r3, [pc, #36]	; (200000c8 <mem_flash_do_write_half_page+0x48>)
200000a2:	681b      	ldr	r3, [r3, #0]
200000a4:	07db      	lsls	r3, r3, #31
200000a6:	d4fb      	bmi.n	200000a0 <mem_flash_do_write_half_page+0x20>
    if (FLASH_SR & FLASH_SR_EOP)
200000a8:	4b07      	ldr	r3, [pc, #28]	; (200000c8 <mem_flash_do_write_half_page+0x48>)
200000aa:	681b      	ldr	r3, [r3, #0]
200000ac:	079b      	lsls	r3, r3, #30
200000ae:	d504      	bpl.n	200000ba <mem_flash_do_write_half_page+0x3a>
    {
        //completed without incident
        FLASH_SR = FLASH_SR_EOP;
200000b0:	4b05      	ldr	r3, [pc, #20]	; (200000c8 <mem_flash_do_write_half_page+0x48>)
200000b2:	2202      	movs	r2, #2
200000b4:	601a      	str	r2, [r3, #0]
        return true;
200000b6:	2001      	movs	r0, #1
        //there was an error
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_NOTZEROERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
        return false;

    }
}
200000b8:	bd10      	pop	{r4, pc}
        FLASH_SR = FLASH_SR_FWWERR | FLASH_SR_NOTZEROERR | FLASH_SR_PGAERR | FLASH_SR_WRPERR;
200000ba:	4b03      	ldr	r3, [pc, #12]	; (200000c8 <mem_flash_do_write_half_page+0x48>)
200000bc:	4a03      	ldr	r2, [pc, #12]	; (200000cc <mem_flash_do_write_half_page+0x4c>)
200000be:	601a      	str	r2, [r3, #0]
        return false;
200000c0:	2000      	movs	r0, #0
200000c2:	e7f9      	b.n	200000b8 <mem_flash_do_write_half_page+0x38>
200000c4:	40022004 	.word	0x40022004
200000c8:	40022018 	.word	0x40022018
200000cc:	00030300 	.word	0x00030300

200000d0 <rcc_ahb_frequency>:
200000d0:	001fff68                                h...

200000d4 <rcc_apb1_frequency>:
200000d4:	001fff68                                h...

200000d8 <rcc_apb2_frequency>:
200000d8:	001fff68                                h...

200000dc <_impure_ptr>:
200000dc:	200000e0                                ... 

200000e0 <impure_data>:
	...
