
../build/sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000387c  08000000  08000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .preinit_array 00000000  0800387c  0800387c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .init_array   00000000  0800387c  0800387c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000000  0800387c  0800387c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000010  20000000  0800387c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000240  20000010  0800388c  00020010  2**2
                  ALLOC
  6 .debug_info   0001120c  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033cb  00000000  00000000  0003121c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000732a  00000000  00000000  000345e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001030  00000000  00000000  0003b911  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001558  00000000  00000000  0003c941  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00008cae  00000000  00000000  0003de99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ede3  00000000  00000000  00046b47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000212d5  00000000  00000000  0005592a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      000000c5  00000000  00000000  00076bff  2**0
                  CONTENTS, READONLY
 15 .ARM.attributes 0000002c  00000000  00000000  00076cc4  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002670  00000000  00000000  00076cf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 20 00 20 45 22 00 08 41 22 00 08 3f 22 00 08     . . E"..A"..?"..
	...
 800002c:	41 22 00 08 00 00 00 00 00 00 00 00 41 22 00 08     A"..........A"..
 800003c:	41 22 00 08 3f 22 00 08 3f 22 00 08 69 1a 00 08     A"..?"..?"..i...
 800004c:	3f 22 00 08 3f 22 00 08 3f 22 00 08 3f 22 00 08     ?"..?"..?"..?"..
 800005c:	65 15 00 08 3f 22 00 08 3f 22 00 08 3f 22 00 08     e...?"..?"..?"..
 800006c:	3f 22 00 08 3f 22 00 08 3f 22 00 08 3f 22 00 08     ?"..?"..?"..?"..
 800007c:	3f 22 00 08 3f 22 00 08 3f 22 00 08 3f 22 00 08     ?"..?"..?"..?"..
 800008c:	3f 22 00 08 3f 22 00 08 3f 22 00 08 3f 22 00 08     ?"..?"..?"..?"..
 800009c:	3f 22 00 08 3f 22 00 08 3f 22 00 08 3f 22 00 08     ?"..?"..?"..?"..
 80000ac:	3f 22 00 08 3f 22 00 08 3f 22 00 08 3f 22 00 08     ?"..?"..?"..?"..
 80000bc:	3f 22 00 08                                         ?"..

080000c0 <main>:
#include "coolease/testing.h"
#include "coolease/timers.h"
#include "coolease/tmp112.h"

int main(void) 
{
 80000c0:	b510      	push	{r4, lr}
	gpio_init();
 80000c2:	f000 f979 	bl	80003b8 <gpio_init>
	spf_init();
 80000c6:	f001 fa8b 	bl	80015e0 <spf_init>
	mem_init();
 80000ca:	f000 f9fb 	bl	80004c4 <mem_init>
	aes_init();
 80000ce:	f000 f94f 	bl	8000370 <aes_init>
	batt_init();
 80000d2:	f000 f95f 	bl	8000394 <batt_init>
	timers_lptim_init();
 80000d6:	f001 fba7 	bl	8001828 <timers_lptim_init>
	timers_tim6_init();
 80000da:	f001 fbeb 	bl	80018b4 <timers_tim6_init>
 80000de:	4b0f      	ldr	r3, [pc, #60]	; (800011c <main+0x5c>)

	for(int i = 0; i < 100000; i++){__asm__("nop");};
 80000e0:	46c0      	nop			; (mov r8, r8)
 80000e2:	3b01      	subs	r3, #1
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d1fb      	bne.n	80000e0 <main+0x20>


	spf_serial_printf("Sensor Start\n");
 80000e8:	480d      	ldr	r0, [pc, #52]	; (8000120 <main+0x60>)
 80000ea:	f001 faf3 	bl	80016d4 <spf_serial_printf>

	for (;;)
	{
		// testing_sensor(DEV_NUM_CHIP);
		spf_serial_printf("Loop\n");
		timers_delay_milliseconds(1000);
 80000ee:	24fa      	movs	r4, #250	; 0xfa
	flash_led(100, 5);
 80000f0:	2105      	movs	r1, #5
 80000f2:	2064      	movs	r0, #100	; 0x64
 80000f4:	f001 fb0e 	bl	8001714 <flash_led>
	rfm_init();
 80000f8:	f000 ffd4 	bl	80010a4 <rfm_init>
	rfm_end();
 80000fc:	f001 f8a8 	bl	8001250 <rfm_end>
	tmp112_init();
 8000100:	f000 f88a 	bl	8000218 <tmp112_init>
	tmp112_end();
 8000104:	f000 f910 	bl	8000328 <tmp112_end>
	testing_rf();
 8000108:	f001 fb34 	bl	8001774 <testing_rf>
		timers_delay_milliseconds(1000);
 800010c:	00a4      	lsls	r4, r4, #2
		spf_serial_printf("Loop\n");
 800010e:	4805      	ldr	r0, [pc, #20]	; (8000124 <main+0x64>)
 8000110:	f001 fae0 	bl	80016d4 <spf_serial_printf>
		timers_delay_milliseconds(1000);
 8000114:	0020      	movs	r0, r4
 8000116:	f001 fbe3 	bl	80018e0 <timers_delay_milliseconds>
	for (;;)
 800011a:	e7f8      	b.n	800010e <main+0x4e>
 800011c:	000186a0 	.word	0x000186a0
 8000120:	080036a4 	.word	0x080036a4
 8000124:	080036b2 	.word	0x080036b2

08000128 <i2c_transfer.constprop.0>:
    i2c_set_data_hold_time(TEMP_I2C, 1); // 0.5usecs
    i2c_set_data_setup_time(TEMP_I2C, 2-1); // 1usecs
	i2c_peripheral_enable(TEMP_I2C);
}

static void i2c_transfer(uint32_t i2c, uint8_t addr, uint8_t *w, size_t wn, uint8_t *r, size_t rn)
 8000128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800012a:	9e08      	ldr	r6, [sp, #32]
 800012c:	0007      	movs	r7, r0
 800012e:	000d      	movs	r5, r1
 8000130:	1e14      	subs	r4, r2, #0
 8000132:	9301      	str	r3, [sp, #4]
 {
    /*  waiting for busy is unnecessary. read the RM */
    if (wn) 
 8000134:	d065      	beq.n	8000202 <i2c_transfer.constprop.0+0xda>
	{
        i2c_set_7bit_address(i2c, addr);
 8000136:	0001      	movs	r1, r0
 8000138:	4833      	ldr	r0, [pc, #204]	; (8000208 <i2c_transfer.constprop.0+0xe0>)
 800013a:	f001 fe47 	bl	8001dcc <i2c_set_7bit_address>
        i2c_set_write_transfer_dir(i2c);
 800013e:	4832      	ldr	r0, [pc, #200]	; (8000208 <i2c_transfer.constprop.0+0xe0>)
 8000140:	f001 fe4e 	bl	8001de0 <i2c_set_write_transfer_dir>
        i2c_set_bytes_to_transfer(i2c, wn);
 8000144:	4830      	ldr	r0, [pc, #192]	; (8000208 <i2c_transfer.constprop.0+0xe0>)
 8000146:	0021      	movs	r1, r4
 8000148:	f001 fe58 	bl	8001dfc <i2c_set_bytes_to_transfer>

        if (rn) 
		{
            i2c_disable_autoend(i2c);
 800014c:	482e      	ldr	r0, [pc, #184]	; (8000208 <i2c_transfer.constprop.0+0xe0>)
        if (rn) 
 800014e:	2e00      	cmp	r6, #0
 8000150:	d039      	beq.n	80001c6 <i2c_transfer.constprop.0+0x9e>
            i2c_disable_autoend(i2c);
 8000152:	f001 fe63 	bl	8001e1c <i2c_disable_autoend>
		else 
		{
            i2c_enable_autoend(i2c);
        }
            
		i2c_send_start(i2c);
 8000156:	482c      	ldr	r0, [pc, #176]	; (8000208 <i2c_transfer.constprop.0+0xe0>)
 8000158:	f001 fdf6 	bl	8001d48 <i2c_send_start>

        while (wn--) 
 800015c:	3c01      	subs	r4, #1
 800015e:	d235      	bcs.n	80001cc <i2c_transfer.constprop.0+0xa4>
        }

        /* not entirely sure this is really necessary.
         * RM implies it will stall until it can write out the later bits
         */
        if (rn) 
 8000160:	2e00      	cmp	r6, #0
 8000162:	d050      	beq.n	8000206 <i2c_transfer.constprop.0+0xde>
		{
            while (!i2c_transfer_complete(i2c));
 8000164:	4828      	ldr	r0, [pc, #160]	; (8000208 <i2c_transfer.constprop.0+0xe0>)
 8000166:	f001 fe65 	bl	8001e34 <i2c_transfer_complete>
 800016a:	2800      	cmp	r0, #0
 800016c:	d0fa      	beq.n	8000164 <i2c_transfer.constprop.0+0x3c>
    }

    if (rn) 
	{
        /* Setting transfer properties */
        i2c_set_7bit_address(i2c, addr);
 800016e:	0039      	movs	r1, r7
 8000170:	4825      	ldr	r0, [pc, #148]	; (8000208 <i2c_transfer.constprop.0+0xe0>)
 8000172:	f001 fe2b 	bl	8001dcc <i2c_set_7bit_address>
        i2c_set_read_transfer_dir(i2c);
 8000176:	4824      	ldr	r0, [pc, #144]	; (8000208 <i2c_transfer.constprop.0+0xe0>)
 8000178:	f001 fe3a 	bl	8001df0 <i2c_set_read_transfer_dir>
        i2c_set_bytes_to_transfer(i2c, rn);
 800017c:	0031      	movs	r1, r6
 800017e:	4822      	ldr	r0, [pc, #136]	; (8000208 <i2c_transfer.constprop.0+0xe0>)
 8000180:	f001 fe3c 	bl	8001dfc <i2c_set_bytes_to_transfer>
        /* start transfer */
        i2c_send_start(i2c);
 8000184:	4820      	ldr	r0, [pc, #128]	; (8000208 <i2c_transfer.constprop.0+0xe0>)
 8000186:	f001 fddf 	bl	8001d48 <i2c_send_start>
        /* important to do it afterwards to do a proper repeated start! */
        i2c_enable_autoend(i2c);
 800018a:	481f      	ldr	r0, [pc, #124]	; (8000208 <i2c_transfer.constprop.0+0xe0>)
 800018c:	f001 fe40 	bl	8001e10 <i2c_enable_autoend>

        for (size_t i = 0; i < rn; i++) 
 8000190:	2400      	movs	r4, #0
 8000192:	2701      	movs	r7, #1
		{
			TIMEOUT(100000, "TMP I2C Recv:", (rn << 16), i2c_received_data(i2c), ;, ;);
 8000194:	0435      	lsls	r5, r6, #16
 8000196:	f001 fbb9 	bl	800190c <timeout_init>
 800019a:	002a      	movs	r2, r5
 800019c:	491b      	ldr	r1, [pc, #108]	; (800020c <i2c_transfer.constprop.0+0xe4>)
 800019e:	481c      	ldr	r0, [pc, #112]	; (8000210 <i2c_transfer.constprop.0+0xe8>)
 80001a0:	f001 fbc2 	bl	8001928 <timeout>
 80001a4:	2800      	cmp	r0, #0
 80001a6:	d104      	bne.n	80001b2 <i2c_transfer.constprop.0+0x8a>
 80001a8:	4817      	ldr	r0, [pc, #92]	; (8000208 <i2c_transfer.constprop.0+0xe0>)
 80001aa:	f001 fe47 	bl	8001e3c <i2c_received_data>
 80001ae:	2800      	cmp	r0, #0
 80001b0:	d0f3      	beq.n	800019a <i2c_transfer.constprop.0+0x72>
            r[i] = i2c_get_data(i2c);
 80001b2:	4815      	ldr	r0, [pc, #84]	; (8000208 <i2c_transfer.constprop.0+0xe0>)
 80001b4:	f001 fddb 	bl	8001d6e <i2c_get_data>
 80001b8:	9b01      	ldr	r3, [sp, #4]
 80001ba:	5518      	strb	r0, [r3, r4]
        for (size_t i = 0; i < rn; i++) 
 80001bc:	1c63      	adds	r3, r4, #1
 80001be:	003c      	movs	r4, r7
 80001c0:	429e      	cmp	r6, r3
 80001c2:	d8e8      	bhi.n	8000196 <i2c_transfer.constprop.0+0x6e>
 80001c4:	e01f      	b.n	8000206 <i2c_transfer.constprop.0+0xde>
            i2c_enable_autoend(i2c);
 80001c6:	f001 fe23 	bl	8001e10 <i2c_enable_autoend>
 80001ca:	e7c4      	b.n	8000156 <i2c_transfer.constprop.0+0x2e>
			timers_delay_microseconds(1);
 80001cc:	2001      	movs	r0, #1
 80001ce:	f001 fb53 	bl	8001878 <timers_delay_microseconds>
			TIMEOUT(100000, "TMP I2C:", ((wn << 16) | *w), i2c_transmit_int_status(i2c), ;, ;);
 80001d2:	f001 fb9b 	bl	800190c <timeout_init>
 80001d6:	0423      	lsls	r3, r4, #16
 80001d8:	9300      	str	r3, [sp, #0]
 80001da:	782a      	ldrb	r2, [r5, #0]
 80001dc:	9b00      	ldr	r3, [sp, #0]
 80001de:	490d      	ldr	r1, [pc, #52]	; (8000214 <i2c_transfer.constprop.0+0xec>)
 80001e0:	480b      	ldr	r0, [pc, #44]	; (8000210 <i2c_transfer.constprop.0+0xe8>)
 80001e2:	431a      	orrs	r2, r3
 80001e4:	f001 fba0 	bl	8001928 <timeout>
 80001e8:	2800      	cmp	r0, #0
 80001ea:	d104      	bne.n	80001f6 <i2c_transfer.constprop.0+0xce>
 80001ec:	4806      	ldr	r0, [pc, #24]	; (8000208 <i2c_transfer.constprop.0+0xe0>)
 80001ee:	f001 fe1d 	bl	8001e2c <i2c_transmit_int_status>
 80001f2:	2800      	cmp	r0, #0
 80001f4:	d0f1      	beq.n	80001da <i2c_transfer.constprop.0+0xb2>
            i2c_send_data(i2c, *w++);
 80001f6:	7829      	ldrb	r1, [r5, #0]
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <i2c_transfer.constprop.0+0xe0>)
 80001fa:	f001 fdb6 	bl	8001d6a <i2c_send_data>
 80001fe:	3501      	adds	r5, #1
 8000200:	e7ac      	b.n	800015c <i2c_transfer.constprop.0+0x34>
    if (rn) 
 8000202:	2e00      	cmp	r6, #0
 8000204:	d1b3      	bne.n	800016e <i2c_transfer.constprop.0+0x46>
        }
    }
 }
 8000206:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8000208:	40005800 	.word	0x40005800
 800020c:	080036c1 	.word	0x080036c1
 8000210:	000186a0 	.word	0x000186a0
 8000214:	080036b8 	.word	0x080036b8

08000218 <tmp112_init>:
{
 8000218:	b570      	push	{r4, r5, r6, lr}
	rcc_osc_on(RCC_MSI);
 800021a:	2004      	movs	r0, #4
 800021c:	f001 fe5a 	bl	8001ed4 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_MSI);
 8000220:	2004      	movs	r0, #4
 8000222:	f001 fead 	bl	8001f80 <rcc_wait_for_osc_ready>
	rcc_set_msi_range(5);
 8000226:	2005      	movs	r0, #5
 8000228:	f001 fed4 	bl	8001fd4 <rcc_set_msi_range>
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);				// AHB -> 2.097Mhz
 800022c:	2000      	movs	r0, #0
 800022e:	f001 fec7 	bl	8001fc0 <rcc_set_hpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);			// APB1 -> 2.097Mhz
 8000232:	2000      	movs	r0, #0
 8000234:	f001 feac 	bl	8001f90 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);			// APB2 -> 2.097Mhz
 8000238:	2000      	movs	r0, #0
 800023a:	f001 feb5 	bl	8001fa8 <rcc_set_ppre2>
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 800023e:	2000      	movs	r0, #0
 8000240:	f001 fcb2 	bl	8001ba8 <flash_set_ws>
	rcc_periph_clock_enable(RCC_GPIOA);
 8000244:	20b0      	movs	r0, #176	; 0xb0
	gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_AF, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
 8000246:	2680      	movs	r6, #128	; 0x80
	gpio_mode_setup(TEMP_I2C_SDA_PORT, GPIO_MODE_AF, GPIO_PUPD_PULLUP, TEMP_I2C_SDA);
 8000248:	2580      	movs	r5, #128	; 0x80
	rcc_ahb_frequency = 2097000;
 800024a:	4b2d      	ldr	r3, [pc, #180]	; (8000300 <tmp112_init+0xe8>)
 800024c:	4a2d      	ldr	r2, [pc, #180]	; (8000304 <tmp112_init+0xec>)
	rcc_periph_clock_enable(RCC_GPIOA);
 800024e:	00c0      	lsls	r0, r0, #3
	rcc_ahb_frequency = 2097000;
 8000250:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 2097000;
 8000252:	4a2d      	ldr	r2, [pc, #180]	; (8000308 <tmp112_init+0xf0>)
	gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_AF, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
 8000254:	4c2d      	ldr	r4, [pc, #180]	; (800030c <tmp112_init+0xf4>)
	rcc_apb1_frequency = 2097000;
 8000256:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = 2097000;
 8000258:	4a2d      	ldr	r2, [pc, #180]	; (8000310 <tmp112_init+0xf8>)
	gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_AF, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
 800025a:	01b6      	lsls	r6, r6, #6
	rcc_apb2_frequency = 2097000;
 800025c:	6013      	str	r3, [r2, #0]
	rcc_periph_clock_enable(RCC_GPIOA);
 800025e:	f001 fefb 	bl	8002058 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOB);
 8000262:	482c      	ldr	r0, [pc, #176]	; (8000314 <tmp112_init+0xfc>)
 8000264:	f001 fef8 	bl	8002058 <rcc_periph_clock_enable>
  	rcc_periph_clock_enable(TEMP_I2C_RCC);
 8000268:	482b      	ldr	r0, [pc, #172]	; (8000318 <tmp112_init+0x100>)
 800026a:	f001 fef5 	bl	8002058 <rcc_periph_clock_enable>
	gpio_mode_setup(TEMP_I2C_SDA_PORT, GPIO_MODE_AF, GPIO_PUPD_PULLUP, TEMP_I2C_SDA);
 800026e:	01ed      	lsls	r5, r5, #7
	gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_AF, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
 8000270:	0033      	movs	r3, r6
 8000272:	0020      	movs	r0, r4
 8000274:	2201      	movs	r2, #1
 8000276:	2102      	movs	r1, #2
 8000278:	f001 fcf4 	bl	8001c64 <gpio_mode_setup>
	gpio_mode_setup(TEMP_I2C_SDA_PORT, GPIO_MODE_AF, GPIO_PUPD_PULLUP, TEMP_I2C_SDA);
 800027c:	002b      	movs	r3, r5
 800027e:	0020      	movs	r0, r4
 8000280:	2201      	movs	r2, #1
 8000282:	2102      	movs	r1, #2
 8000284:	f001 fcee 	bl	8001c64 <gpio_mode_setup>
	gpio_set_output_options(TEMP_I2C_SCL_PORT, GPIO_OTYPE_OD, GPIO_OSPEED_2MHZ, TEMP_I2C_SCL);
 8000288:	0033      	movs	r3, r6
 800028a:	0020      	movs	r0, r4
 800028c:	2200      	movs	r2, #0
 800028e:	2101      	movs	r1, #1
 8000290:	f001 fd08 	bl	8001ca4 <gpio_set_output_options>
	gpio_set_output_options(TEMP_I2C_SDA_PORT, GPIO_OTYPE_OD, GPIO_OSPEED_2MHZ, TEMP_I2C_SDA);
 8000294:	002b      	movs	r3, r5
 8000296:	0020      	movs	r0, r4
 8000298:	2200      	movs	r2, #0
 800029a:	2101      	movs	r1, #1
 800029c:	f001 fd02 	bl	8001ca4 <gpio_set_output_options>
	gpio_set_af(TEMP_I2C_SCL_PORT, TEMP_I2C_AF, TEMP_I2C_SCL);
 80002a0:	0032      	movs	r2, r6
 80002a2:	0020      	movs	r0, r4
 80002a4:	2105      	movs	r1, #5
 80002a6:	f001 fd1b 	bl	8001ce0 <gpio_set_af>
	gpio_set_af(TEMP_I2C_SDA_PORT, TEMP_I2C_AF, TEMP_I2C_SDA);
 80002aa:	002a      	movs	r2, r5
 80002ac:	2105      	movs	r1, #5
 80002ae:	0020      	movs	r0, r4
	i2c_peripheral_disable(TEMP_I2C);
 80002b0:	4c1a      	ldr	r4, [pc, #104]	; (800031c <tmp112_init+0x104>)
	gpio_set_af(TEMP_I2C_SDA_PORT, TEMP_I2C_AF, TEMP_I2C_SDA);
 80002b2:	f001 fd15 	bl	8001ce0 <gpio_set_af>
	rcc_periph_reset_pulse(TEMP_I2C_RCC_RST);
 80002b6:	481a      	ldr	r0, [pc, #104]	; (8000320 <tmp112_init+0x108>)
 80002b8:	f001 feea 	bl	8002090 <rcc_periph_reset_pulse>
	i2c_peripheral_disable(TEMP_I2C);
 80002bc:	0020      	movs	r0, r4
 80002be:	f001 fd3e 	bl	8001d3e <i2c_peripheral_disable>
	i2c_clear_stop(TEMP_I2C);
 80002c2:	0020      	movs	r0, r4
 80002c4:	f001 fd4c 	bl	8001d60 <i2c_clear_stop>
    i2c_set_prescaler(TEMP_I2C, 0);
 80002c8:	0020      	movs	r0, r4
 80002ca:	2100      	movs	r1, #0
 80002cc:	f001 fd52 	bl	8001d74 <i2c_set_prescaler>
    i2c_set_scl_low_period(TEMP_I2C, 10-1); // 5usecs
 80002d0:	0020      	movs	r0, r4
 80002d2:	2109      	movs	r1, #9
 80002d4:	f001 fd74 	bl	8001dc0 <i2c_set_scl_low_period>
    i2c_set_scl_high_period(TEMP_I2C, 8-1); // 4usecs
 80002d8:	0020      	movs	r0, r4
 80002da:	2107      	movs	r1, #7
 80002dc:	f001 fd66 	bl	8001dac <i2c_set_scl_high_period>
    i2c_set_data_hold_time(TEMP_I2C, 1); // 0.5usecs
 80002e0:	0020      	movs	r0, r4
 80002e2:	2101      	movs	r1, #1
 80002e4:	f001 fd58 	bl	8001d98 <i2c_set_data_hold_time>
    i2c_set_data_setup_time(TEMP_I2C, 2-1); // 1usecs
 80002e8:	2101      	movs	r1, #1
 80002ea:	0020      	movs	r0, r4
 80002ec:	f001 fd4a 	bl	8001d84 <i2c_set_data_setup_time>
	i2c_peripheral_enable(TEMP_I2C);
 80002f0:	0020      	movs	r0, r4
 80002f2:	f001 fd1f 	bl	8001d34 <i2c_peripheral_enable>
	spf_serial_printf("TMP Init Done\n");
 80002f6:	480b      	ldr	r0, [pc, #44]	; (8000324 <tmp112_init+0x10c>)
 80002f8:	f001 f9ec 	bl	80016d4 <spf_serial_printf>
}
 80002fc:	bd70      	pop	{r4, r5, r6, pc}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	001fff68 	.word	0x001fff68
 8000304:	20000004 	.word	0x20000004
 8000308:	20000008 	.word	0x20000008
 800030c:	50000400 	.word	0x50000400
 8000310:	2000000c 	.word	0x2000000c
 8000314:	00000581 	.word	0x00000581
 8000318:	00000716 	.word	0x00000716
 800031c:	40005800 	.word	0x40005800
 8000320:	00000516 	.word	0x00000516
 8000324:	080036cf 	.word	0x080036cf

08000328 <tmp112_end>:
{
 8000328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t config[3] = {TMP112_SEL_CONFIG_REG, TMP112_CONFIG_OS_MSB, TMP112_CONFIG_OS_LSB};
 800032a:	2403      	movs	r4, #3
 800032c:	490c      	ldr	r1, [pc, #48]	; (8000360 <tmp112_end+0x38>)
 800032e:	0022      	movs	r2, r4
 8000330:	a803      	add	r0, sp, #12
 8000332:	f002 f801 	bl	8002338 <memcpy>
	i2c_transfer(TEMP_I2C, TMP112_I2C_ADDRESS, config, 3, NULL, 0);
 8000336:	2300      	movs	r3, #0
 8000338:	0022      	movs	r2, r4
	i2c_send_stop(TEMP_I2C);
 800033a:	4c0a      	ldr	r4, [pc, #40]	; (8000364 <tmp112_end+0x3c>)
	i2c_transfer(TEMP_I2C, TMP112_I2C_ADDRESS, config, 3, NULL, 0);
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	a903      	add	r1, sp, #12
 8000340:	2049      	movs	r0, #73	; 0x49
 8000342:	f7ff fef1 	bl	8000128 <i2c_transfer.constprop.0>
	i2c_send_stop(TEMP_I2C);
 8000346:	0020      	movs	r0, r4
 8000348:	f001 fd04 	bl	8001d54 <i2c_send_stop>
	i2c_peripheral_disable(TEMP_I2C);
 800034c:	0020      	movs	r0, r4
 800034e:	f001 fcf6 	bl	8001d3e <i2c_peripheral_disable>
	rcc_periph_clock_disable(TEMP_I2C_RCC);
 8000352:	4805      	ldr	r0, [pc, #20]	; (8000368 <tmp112_end+0x40>)
 8000354:	f001 fe8e 	bl	8002074 <rcc_periph_clock_disable>
	spf_serial_printf("TMP End Done\n");
 8000358:	4804      	ldr	r0, [pc, #16]	; (800036c <tmp112_end+0x44>)
 800035a:	f001 f9bb 	bl	80016d4 <spf_serial_printf>
}
 800035e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8000360:	080036ec 	.word	0x080036ec
 8000364:	40005800 	.word	0x40005800
 8000368:	00000716 	.word	0x00000716
 800036c:	080036de 	.word	0x080036de

08000370 <aes_init>:
/*****************************************************************************/
/* Public functions:                                                         */
/*****************************************************************************/

void aes_init(void)
{
 8000370:	b500      	push	{lr}
 8000372:	b0ad      	sub	sp, #180	; 0xb4
  uint8_t tmp[AES_KEY_EXP_SIZE];
  mem_get_aes_key_exp(tmp);
 8000374:	4668      	mov	r0, sp
 8000376:	f000 f85b 	bl	8000430 <mem_get_aes_key_exp>

  for(int i = 0; i < AES_KEY_EXP_SIZE; i++)
 800037a:	2300      	movs	r3, #0
  {
    round_key[i] = tmp[i];
 800037c:	4a04      	ldr	r2, [pc, #16]	; (8000390 <aes_init+0x20>)
 800037e:	4669      	mov	r1, sp
 8000380:	5cc9      	ldrb	r1, [r1, r3]
 8000382:	54d1      	strb	r1, [r2, r3]
  for(int i = 0; i < AES_KEY_EXP_SIZE; i++)
 8000384:	3301      	adds	r3, #1
 8000386:	2bb0      	cmp	r3, #176	; 0xb0
 8000388:	d1f9      	bne.n	800037e <aes_init+0xe>
  }
}
 800038a:	b02d      	add	sp, #180	; 0xb4
 800038c:	bd00      	pop	{pc}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	20000010 	.word	0x20000010

08000394 <batt_init>:
static uint16_t adc_vals[3] = {0,0,0};
static bool     plugged_in  = true;


void batt_init(void)
{
 8000394:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_PWR);
 8000396:	4806      	ldr	r0, [pc, #24]	; (80003b0 <batt_init+0x1c>)
 8000398:	f001 fe5e 	bl	8002058 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_SYSCFG);
 800039c:	20d0      	movs	r0, #208	; 0xd0
 800039e:	00c0      	lsls	r0, r0, #3
 80003a0:	f001 fe5a 	bl	8002058 <rcc_periph_clock_enable>

    // Wait for voltage reference to start
    while(!( PWR_CSR & PWR_CSR_VREFINTRDYF ));
 80003a4:	2308      	movs	r3, #8
 80003a6:	4903      	ldr	r1, [pc, #12]	; (80003b4 <batt_init+0x20>)
 80003a8:	680a      	ldr	r2, [r1, #0]
 80003aa:	421a      	tst	r2, r3
 80003ac:	d0fc      	beq.n	80003a8 <batt_init+0x14>

    // Enable Ultra Low Power for VFREFINT
    // PWR_CR |= PWR_CR_ULP;
}
 80003ae:	bd10      	pop	{r4, pc}
 80003b0:	0000071c 	.word	0x0000071c
 80003b4:	40007004 	.word	0x40007004

080003b8 <gpio_init>:
	return sensor;
}

void gpio_init(void)
{
	rcc_periph_clock_enable(RCC_GPIOA);
 80003b8:	20b0      	movs	r0, #176	; 0xb0
{
 80003ba:	b510      	push	{r4, lr}
	rcc_periph_clock_enable(RCC_GPIOA);
 80003bc:	00c0      	lsls	r0, r0, #3
 80003be:	f001 fe4b 	bl	8002058 <rcc_periph_clock_enable>
  	rcc_periph_clock_enable(RCC_GPIOB);
 80003c2:	4808      	ldr	r0, [pc, #32]	; (80003e4 <gpio_init+0x2c>)
 80003c4:	f001 fe48 	bl	8002058 <rcc_periph_clock_enable>
	// Input Mode 	00
	// Output 		01
	// Analog 		11
	// GPIO_MODER(GPIOA) = 0x00000000; GPIO_MODER(GPIOB) = 0x00000000;
	// GPIO_MODER(GPIOA) = 0x55555555; GPIO_MODER(GPIOB) = 0x55555555;
	GPIO_MODER(GPIOA) = 0xFFFFFFFF; GPIO_MODER(GPIOB) = 0xFFFFFFFF;
 80003c8:	2301      	movs	r3, #1
 80003ca:	22a0      	movs	r2, #160	; 0xa0
 80003cc:	425b      	negs	r3, r3
 80003ce:	05d2      	lsls	r2, r2, #23
 80003d0:	6013      	str	r3, [r2, #0]
 80003d2:	4a05      	ldr	r2, [pc, #20]	; (80003e8 <gpio_init+0x30>)
 80003d4:	6013      	str	r3, [r2, #0]
    // GPIO_ODR(GPIOA) = 0xFFFFFFFF; GPIO_ODR(GPIOB) = 0xFFFFFFFF;

	// None 		00
	// Pullup		01
	// PullDown		10       
    GPIO_PUPDR(GPIOA) = 0x00000000; GPIO_PUPDR(GPIOB) = 0x00000000;
 80003d6:	2300      	movs	r3, #0
 80003d8:	4a04      	ldr	r2, [pc, #16]	; (80003ec <gpio_init+0x34>)
 80003da:	6013      	str	r3, [r2, #0]
 80003dc:	4a04      	ldr	r2, [pc, #16]	; (80003f0 <gpio_init+0x38>)
 80003de:	6013      	str	r3, [r2, #0]
    // GPIO_PUPDR(GPIOA) = 0x55555555; GPIO_PUPDR(GPIOB) = 0x55555555;
    // GPIO_PUPDR(GPIOA) = 0xAAAAAAAA; GPIO_PUPDR(GPIOB) = 0xAAAAAAAA;
 80003e0:	bd10      	pop	{r4, pc}
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	00000581 	.word	0x00000581
 80003e8:	50000400 	.word	0x50000400
 80003ec:	5000000c 	.word	0x5000000c
 80003f0:	5000040c 	.word	0x5000040c

080003f4 <mem_program_word>:
    }
}


void        mem_program_word(uint32_t address, uint32_t data)
{
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	000d      	movs	r5, r1
 80003f8:	0004      	movs	r4, r0
    flash_unlock();
 80003fa:	f001 fc1b 	bl	8001c34 <flash_unlock>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 80003fe:	4a09      	ldr	r2, [pc, #36]	; (8000424 <mem_program_word+0x30>)
 8000400:	4909      	ldr	r1, [pc, #36]	; (8000428 <mem_program_word+0x34>)
 8000402:	6813      	ldr	r3, [r2, #0]
 8000404:	400b      	ands	r3, r1
 8000406:	6013      	str	r3, [r2, #0]

    MMIO32(address) = data;

    while (FLASH_SR & FLASH_SR_BSY);
 8000408:	2201      	movs	r2, #1
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <mem_program_word+0x38>)
    MMIO32(address) = data;
 800040c:	6025      	str	r5, [r4, #0]
    while (FLASH_SR & FLASH_SR_BSY);
 800040e:	6819      	ldr	r1, [r3, #0]
 8000410:	4211      	tst	r1, r2
 8000412:	d1fc      	bne.n	800040e <mem_program_word+0x1a>
    if (FLASH_SR & FLASH_SR_EOP)
 8000414:	2202      	movs	r2, #2
 8000416:	6819      	ldr	r1, [r3, #0]
 8000418:	4211      	tst	r1, r2
 800041a:	d000      	beq.n	800041e <mem_program_word+0x2a>
        FLASH_SR = FLASH_SR_EOP;
 800041c:	601a      	str	r2, [r3, #0]

    flash_lock();
 800041e:	f001 fc11 	bl	8001c44 <flash_lock>
}
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	40022004 	.word	0x40022004
 8000428:	fffffeff 	.word	0xfffffeff
 800042c:	40022018 	.word	0x40022018

08000430 <mem_get_aes_key_exp>:

void        mem_get_aes_key_exp(uint8_t *aes_key_exp)
{
    uint32_t tmp;

    for(int i = 0; i < 44; i++)
 8000430:	0001      	movs	r1, r0
{
 8000432:	b510      	push	{r4, lr}
 8000434:	4a07      	ldr	r2, [pc, #28]	; (8000454 <mem_get_aes_key_exp+0x24>)
 8000436:	31b0      	adds	r1, #176	; 0xb0
 8000438:	1a12      	subs	r2, r2, r0
    {
        tmp = MMIO32(aes_key_exp_add + (i * 4));
 800043a:	1813      	adds	r3, r2, r0
 800043c:	681b      	ldr	r3, [r3, #0]

        aes_key_exp[i * 4]          = tmp;
        aes_key_exp[(i * 4) + 1]    = tmp >> 8;
 800043e:	0a1c      	lsrs	r4, r3, #8
        aes_key_exp[i * 4]          = tmp;
 8000440:	7003      	strb	r3, [r0, #0]
        aes_key_exp[(i * 4) + 1]    = tmp >> 8;
 8000442:	7044      	strb	r4, [r0, #1]
        aes_key_exp[(i * 4) + 2]    = tmp >> 16;
 8000444:	0c1c      	lsrs	r4, r3, #16
        aes_key_exp[(i * 4) + 3]    = tmp >> 24;
 8000446:	0e1b      	lsrs	r3, r3, #24
        aes_key_exp[(i * 4) + 2]    = tmp >> 16;
 8000448:	7084      	strb	r4, [r0, #2]
        aes_key_exp[(i * 4) + 3]    = tmp >> 24;
 800044a:	70c3      	strb	r3, [r0, #3]
    for(int i = 0; i < 44; i++)
 800044c:	3004      	adds	r0, #4
 800044e:	4288      	cmp	r0, r1
 8000450:	d1f3      	bne.n	800043a <mem_get_aes_key_exp+0xa>
    } 
}
 8000452:	bd10      	pop	{r4, pc}
 8000454:	08080200 	.word	0x08080200

08000458 <mem_wipe_readings>:
        tmp = 0;
    } 
}

void        mem_wipe_readings(void)
{
 8000458:	b570      	push	{r4, r5, r6, lr}
    spf_serial_printf("Mem Wipe Readings\n");
 800045a:	4813      	ldr	r0, [pc, #76]	; (80004a8 <mem_wipe_readings+0x50>)

static void flash_erase_page(uint32_t add)
{
    flash_unlock();

    FLASH_PECR |= FLASH_PECR_ERASE | FLASH_PECR_PROG; 
 800045c:	2582      	movs	r5, #130	; 0x82
    spf_serial_printf("Mem Wipe Readings\n");
 800045e:	f001 f939 	bl	80016d4 <spf_serial_printf>
    
    MMIO32(add) = (uint32_t)0;

    while ((FLASH_SR & FLASH_SR_BSY) != 0);
 8000462:	2601      	movs	r6, #1
    uint32_t page_add = READINGS_START;
 8000464:	4c11      	ldr	r4, [pc, #68]	; (80004ac <mem_wipe_readings+0x54>)
    FLASH_PECR |= FLASH_PECR_ERASE | FLASH_PECR_PROG; 
 8000466:	00ad      	lsls	r5, r5, #2
    flash_unlock();
 8000468:	f001 fbe4 	bl	8001c34 <flash_unlock>
    FLASH_PECR |= FLASH_PECR_ERASE | FLASH_PECR_PROG; 
 800046c:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <mem_wipe_readings+0x58>)
 800046e:	681a      	ldr	r2, [r3, #0]
 8000470:	432a      	orrs	r2, r5
 8000472:	601a      	str	r2, [r3, #0]
    MMIO32(add) = (uint32_t)0;
 8000474:	2200      	movs	r2, #0
 8000476:	6022      	str	r2, [r4, #0]
    while ((FLASH_SR & FLASH_SR_BSY) != 0);
 8000478:	4a0e      	ldr	r2, [pc, #56]	; (80004b4 <mem_wipe_readings+0x5c>)
 800047a:	6811      	ldr	r1, [r2, #0]
 800047c:	4231      	tst	r1, r6
 800047e:	d1fc      	bne.n	800047a <mem_wipe_readings+0x22>

    if ((FLASH_SR & FLASH_SR_EOP) != 0) {
 8000480:	2102      	movs	r1, #2
 8000482:	6810      	ldr	r0, [r2, #0]
 8000484:	4208      	tst	r0, r1
 8000486:	d000      	beq.n	800048a <mem_wipe_readings+0x32>
        FLASH_SR = FLASH_SR_EOP; }
 8000488:	6011      	str	r1, [r2, #0]

    FLASH_PECR &= ~(FLASH_PECR_ERASE | FLASH_PECR_PROG);
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	490a      	ldr	r1, [pc, #40]	; (80004b8 <mem_wipe_readings+0x60>)
        page_add += FLASH_PAGE_SIZE;
 800048e:	3480      	adds	r4, #128	; 0x80
    FLASH_PECR &= ~(FLASH_PECR_ERASE | FLASH_PECR_PROG);
 8000490:	400a      	ands	r2, r1
 8000492:	601a      	str	r2, [r3, #0]

    flash_lock();
 8000494:	f001 fbd6 	bl	8001c44 <flash_lock>
    while( page_add < FLASH_END )
 8000498:	4b08      	ldr	r3, [pc, #32]	; (80004bc <mem_wipe_readings+0x64>)
 800049a:	429c      	cmp	r4, r3
 800049c:	d1e4      	bne.n	8000468 <mem_wipe_readings+0x10>
    spf_serial_printf("Done\n", page_add);
 800049e:	0021      	movs	r1, r4
 80004a0:	4807      	ldr	r0, [pc, #28]	; (80004c0 <mem_wipe_readings+0x68>)
 80004a2:	f001 f917 	bl	80016d4 <spf_serial_printf>
}
 80004a6:	bd70      	pop	{r4, r5, r6, pc}
 80004a8:	080036f0 	.word	0x080036f0
 80004ac:	0800e000 	.word	0x0800e000
 80004b0:	40022004 	.word	0x40022004
 80004b4:	40022018 	.word	0x40022018
 80004b8:	fffffdf7 	.word	0xfffffdf7
 80004bc:	08010000 	.word	0x08010000
 80004c0:	080037d0 	.word	0x080037d0

080004c4 <mem_init>:
    rcc_periph_clock_enable(RCC_MIF);
 80004c4:	20c1      	movs	r0, #193	; 0xc1
{
 80004c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(!MMIO32(dev_state_add))
 80004c8:	4c10      	ldr	r4, [pc, #64]	; (800050c <mem_init+0x48>)
    rcc_periph_clock_enable(RCC_MIF);
 80004ca:	00c0      	lsls	r0, r0, #3
 80004cc:	f001 fdc4 	bl	8002058 <rcc_periph_clock_enable>
    if(!MMIO32(dev_state_add))
 80004d0:	6823      	ldr	r3, [r4, #0]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d105      	bne.n	80004e2 <mem_init+0x1e>
        mem_wipe_readings();
 80004d6:	f7ff ffbf 	bl	8000458 <mem_wipe_readings>
        mem_program_word(dev_state_add, 0x11111111);
 80004da:	0020      	movs	r0, r4
 80004dc:	490c      	ldr	r1, [pc, #48]	; (8000510 <mem_init+0x4c>)
 80004de:	f7ff ff89 	bl	80003f4 <mem_program_word>
    while(MMIO32(next_reading_add) != 0x00000000)
 80004e2:	2400      	movs	r4, #0
        next_reading_add += 4;
 80004e4:	2701      	movs	r7, #1
    msg_num = MMIO32(msg_num_add);
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <mem_init+0x50>)
 80004e8:	490b      	ldr	r1, [pc, #44]	; (8000518 <mem_init+0x54>)
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	480b      	ldr	r0, [pc, #44]	; (800051c <mem_init+0x58>)
 80004ee:	680b      	ldr	r3, [r1, #0]
 80004f0:	6002      	str	r2, [r0, #0]
    while(MMIO32(next_reading_add) != 0x00000000)
 80004f2:	681d      	ldr	r5, [r3, #0]
 80004f4:	1c56      	adds	r6, r2, #1
 80004f6:	2d00      	cmp	r5, #0
 80004f8:	d104      	bne.n	8000504 <mem_init+0x40>
 80004fa:	2c00      	cmp	r4, #0
 80004fc:	d001      	beq.n	8000502 <mem_init+0x3e>
 80004fe:	6002      	str	r2, [r0, #0]
 8000500:	600b      	str	r3, [r1, #0]
}
 8000502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        next_reading_add += 4;
 8000504:	0032      	movs	r2, r6
 8000506:	003c      	movs	r4, r7
 8000508:	3304      	adds	r3, #4
 800050a:	e7f2      	b.n	80004f2 <mem_init+0x2e>
 800050c:	08080000 	.word	0x08080000
 8000510:	11111111 	.word	0x11111111
 8000514:	08080300 	.word	0x08080300
 8000518:	20000000 	.word	0x20000000
 800051c:	200000c0 	.word	0x200000c0

08000520 <_out_char_spf>:
}


// internal _putchar wrapper
static inline void _out_char_spf(char character, void* buffer, size_t idx, size_t maxlen)
{
 8000520:	b510      	push	{r4, lr}
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8000522:	2800      	cmp	r0, #0
 8000524:	d001      	beq.n	800052a <_out_char_spf+0xa>
    _putchar_spf(character);
 8000526:	f001 f8ed 	bl	8001704 <_putchar_spf>
  }
}
 800052a:	bd10      	pop	{r4, pc}

0800052c <_out_rev.constprop.0>:
  return i;
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
 800052c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052e:	b085      	sub	sp, #20
 8000530:	9303      	str	r3, [sp, #12]
{
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8000532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
 8000534:	0016      	movs	r6, r2
 8000536:	0017      	movs	r7, r2
 8000538:	9001      	str	r0, [sp, #4]
 800053a:	9102      	str	r1, [sp, #8]
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800053c:	079b      	lsls	r3, r3, #30
 800053e:	d115      	bne.n	800056c <_out_rev.constprop.0+0x40>
    for (size_t i = len; i < width; i++) {
      out(' ', buffer, idx++, maxlen);
 8000540:	2501      	movs	r5, #1
    for (size_t i = len; i < width; i++) {
 8000542:	9c0a      	ldr	r4, [sp, #40]	; 0x28
      out(' ', buffer, idx++, maxlen);
 8000544:	426d      	negs	r5, r5
 8000546:	e005      	b.n	8000554 <_out_rev.constprop.0+0x28>
 8000548:	002b      	movs	r3, r5
 800054a:	2020      	movs	r0, #32
 800054c:	9902      	ldr	r1, [sp, #8]
 800054e:	9f01      	ldr	r7, [sp, #4]
 8000550:	47b8      	blx	r7
    for (size_t i = len; i < width; i++) {
 8000552:	3401      	adds	r4, #1
 8000554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000556:	1af2      	subs	r2, r6, r3
 8000558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800055a:	1912      	adds	r2, r2, r4
 800055c:	429c      	cmp	r4, r3
 800055e:	d3f3      	bcc.n	8000548 <_out_rev.constprop.0+0x1c>
 8000560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000562:	2700      	movs	r7, #0
 8000564:	4293      	cmp	r3, r2
 8000566:	d300      	bcc.n	800056a <_out_rev.constprop.0+0x3e>
 8000568:	1a9f      	subs	r7, r3, r2
 800056a:	19bf      	adds	r7, r7, r6
 800056c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800056e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000570:	19dc      	adds	r4, r3, r7
 8000572:	1b62      	subs	r2, r4, r5
    }
  }

  // reverse string
  while (len) {
 8000574:	2d00      	cmp	r5, #0
 8000576:	d113      	bne.n	80005a0 <_out_rev.constprop.0+0x74>
    out(buf[--len], buffer, idx++, maxlen);
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8000578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800057a:	079b      	lsls	r3, r3, #30
 800057c:	d50d      	bpl.n	800059a <_out_rev.constprop.0+0x6e>
 800057e:	1ba3      	subs	r3, r4, r6
 8000580:	001d      	movs	r5, r3
 8000582:	9303      	str	r3, [sp, #12]
    while (idx - start_idx < width) {
 8000584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000586:	1972      	adds	r2, r6, r5
 8000588:	42ab      	cmp	r3, r5
 800058a:	d812      	bhi.n	80005b2 <_out_rev.constprop.0+0x86>
 800058c:	9903      	ldr	r1, [sp, #12]
 800058e:	2200      	movs	r2, #0
 8000590:	428b      	cmp	r3, r1
 8000592:	d301      	bcc.n	8000598 <_out_rev.constprop.0+0x6c>
 8000594:	199a      	adds	r2, r3, r6
 8000596:	1b12      	subs	r2, r2, r4
 8000598:	18a4      	adds	r4, r4, r2
      out(' ', buffer, idx++, maxlen);
    }
  }

  return idx;
}
 800059a:	0020      	movs	r0, r4
 800059c:	b005      	add	sp, #20
 800059e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    out(buf[--len], buffer, idx++, maxlen);
 80005a0:	9b03      	ldr	r3, [sp, #12]
 80005a2:	3d01      	subs	r5, #1
 80005a4:	5d58      	ldrb	r0, [r3, r5]
 80005a6:	2301      	movs	r3, #1
 80005a8:	9902      	ldr	r1, [sp, #8]
 80005aa:	9c01      	ldr	r4, [sp, #4]
 80005ac:	425b      	negs	r3, r3
 80005ae:	47a0      	blx	r4
 80005b0:	e7dd      	b.n	800056e <_out_rev.constprop.0+0x42>
      out(' ', buffer, idx++, maxlen);
 80005b2:	2301      	movs	r3, #1
 80005b4:	2020      	movs	r0, #32
 80005b6:	9902      	ldr	r1, [sp, #8]
 80005b8:	9f01      	ldr	r7, [sp, #4]
 80005ba:	425b      	negs	r3, r3
 80005bc:	47b8      	blx	r7
 80005be:	3501      	adds	r5, #1
 80005c0:	e7e0      	b.n	8000584 <_out_rev.constprop.0+0x58>

080005c2 <_ntoa_long.constprop.0>:
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
 80005c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c4:	b093      	sub	sp, #76	; 0x4c
 80005c6:	9208      	str	r2, [sp, #32]
 80005c8:	aa18      	add	r2, sp, #96	; 0x60
 80005ca:	7812      	ldrb	r2, [r2, #0]
 80005cc:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80005ce:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80005d0:	9006      	str	r0, [sp, #24]
 80005d2:	9107      	str	r1, [sp, #28]
 80005d4:	9204      	str	r2, [sp, #16]
{
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d101      	bne.n	80005de <_ntoa_long.constprop.0+0x1c>
    flags &= ~FLAGS_HASH;
 80005da:	2210      	movs	r2, #16
 80005dc:	4394      	bics	r4, r2
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	0021      	movs	r1, r4
 80005e2:	00d2      	lsls	r2, r2, #3
 80005e4:	4011      	ands	r1, r2
 80005e6:	9105      	str	r1, [sp, #20]
 80005e8:	4214      	tst	r4, r2
 80005ea:	d001      	beq.n	80005f0 <_ntoa_long.constprop.0+0x2e>
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d01f      	beq.n	8000630 <_ntoa_long.constprop.0+0x6e>
 80005f0:	2261      	movs	r2, #97	; 0x61
 80005f2:	06a1      	lsls	r1, r4, #26
 80005f4:	d500      	bpl.n	80005f8 <_ntoa_long.constprop.0+0x36>
 80005f6:	2241      	movs	r2, #65	; 0x41
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80005f8:	001d      	movs	r5, r3
 80005fa:	2600      	movs	r6, #0
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	3a0a      	subs	r2, #10
 8000600:	9209      	str	r2, [sp, #36]	; 0x24
      const char digit = (char)(value % base);
 8000602:	0028      	movs	r0, r5
 8000604:	9919      	ldr	r1, [sp, #100]	; 0x64
 8000606:	f001 ff3b 	bl	8002480 <__aeabi_uidivmod>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800060a:	9a09      	ldr	r2, [sp, #36]	; 0x24
      const char digit = (char)(value % base);
 800060c:	b2cb      	uxtb	r3, r1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800060e:	189a      	adds	r2, r3, r2
 8000610:	4684      	mov	ip, r0
 8000612:	b2d2      	uxtb	r2, r2
 8000614:	2909      	cmp	r1, #9
 8000616:	d801      	bhi.n	800061c <_ntoa_long.constprop.0+0x5a>
 8000618:	3330      	adds	r3, #48	; 0x30
 800061a:	b2da      	uxtb	r2, r3
 800061c:	2010      	movs	r0, #16
 800061e:	a906      	add	r1, sp, #24
 8000620:	1809      	adds	r1, r1, r0
 8000622:	558a      	strb	r2, [r1, r6]
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8000624:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8000626:	1c73      	adds	r3, r6, #1
 8000628:	4295      	cmp	r5, r2
 800062a:	d301      	bcc.n	8000630 <_ntoa_long.constprop.0+0x6e>
 800062c:	2b20      	cmp	r3, #32
 800062e:	d111      	bne.n	8000654 <_ntoa_long.constprop.0+0x92>
  if (!(flags & FLAGS_LEFT)) {
 8000630:	07a2      	lsls	r2, r4, #30
 8000632:	d421      	bmi.n	8000678 <_ntoa_long.constprop.0+0xb6>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8000634:	2201      	movs	r2, #1
 8000636:	4022      	ands	r2, r4
 8000638:	2f00      	cmp	r7, #0
 800063a:	d008      	beq.n	800064e <_ntoa_long.constprop.0+0x8c>
 800063c:	2a00      	cmp	r2, #0
 800063e:	d006      	beq.n	800064e <_ntoa_long.constprop.0+0x8c>
 8000640:	9904      	ldr	r1, [sp, #16]
 8000642:	2900      	cmp	r1, #0
 8000644:	d102      	bne.n	800064c <_ntoa_long.constprop.0+0x8a>
 8000646:	310c      	adds	r1, #12
 8000648:	420c      	tst	r4, r1
 800064a:	d000      	beq.n	800064e <_ntoa_long.constprop.0+0x8c>
      width--;
 800064c:	3f01      	subs	r7, #1
      buf[len++] = '0';
 800064e:	2030      	movs	r0, #48	; 0x30
 8000650:	a90a      	add	r1, sp, #40	; 0x28
 8000652:	e004      	b.n	800065e <_ntoa_long.constprop.0+0x9c>
 8000654:	001e      	movs	r6, r3
      value /= base;
 8000656:	4665      	mov	r5, ip
 8000658:	e7d3      	b.n	8000602 <_ntoa_long.constprop.0+0x40>
      buf[len++] = '0';
 800065a:	5458      	strb	r0, [r3, r1]
 800065c:	3301      	adds	r3, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800065e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8000660:	429d      	cmp	r5, r3
 8000662:	d901      	bls.n	8000668 <_ntoa_long.constprop.0+0xa6>
 8000664:	2b20      	cmp	r3, #32
 8000666:	d1f8      	bne.n	800065a <_ntoa_long.constprop.0+0x98>
      buf[len++] = '0';
 8000668:	2030      	movs	r0, #48	; 0x30
 800066a:	a90a      	add	r1, sp, #40	; 0x28
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800066c:	2a00      	cmp	r2, #0
 800066e:	d003      	beq.n	8000678 <_ntoa_long.constprop.0+0xb6>
 8000670:	42bb      	cmp	r3, r7
 8000672:	d201      	bcs.n	8000678 <_ntoa_long.constprop.0+0xb6>
 8000674:	2b1f      	cmp	r3, #31
 8000676:	d91b      	bls.n	80006b0 <_ntoa_long.constprop.0+0xee>
  if (flags & FLAGS_HASH) {
 8000678:	06e2      	lsls	r2, r4, #27
 800067a:	d53c      	bpl.n	80006f6 <_ntoa_long.constprop.0+0x134>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800067c:	9a05      	ldr	r2, [sp, #20]
 800067e:	2a00      	cmp	r2, #0
 8000680:	d11a      	bne.n	80006b8 <_ntoa_long.constprop.0+0xf6>
 8000682:	2b00      	cmp	r3, #0
 8000684:	d018      	beq.n	80006b8 <_ntoa_long.constprop.0+0xf6>
 8000686:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8000688:	429a      	cmp	r2, r3
 800068a:	d001      	beq.n	8000690 <_ntoa_long.constprop.0+0xce>
 800068c:	42bb      	cmp	r3, r7
 800068e:	d113      	bne.n	80006b8 <_ntoa_long.constprop.0+0xf6>
      len--;
 8000690:	1e5a      	subs	r2, r3, #1
      if (len && (base == 16U)) {
 8000692:	2b01      	cmp	r3, #1
 8000694:	d00f      	beq.n	80006b6 <_ntoa_long.constprop.0+0xf4>
 8000696:	9919      	ldr	r1, [sp, #100]	; 0x64
        len--;
 8000698:	3b02      	subs	r3, #2
      if (len && (base == 16U)) {
 800069a:	2910      	cmp	r1, #16
 800069c:	d00f      	beq.n	80006be <_ntoa_long.constprop.0+0xfc>
 800069e:	0013      	movs	r3, r2
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80006a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80006a2:	2a02      	cmp	r2, #2
 80006a4:	d121      	bne.n	80006ea <_ntoa_long.constprop.0+0x128>
 80006a6:	2b1f      	cmp	r3, #31
 80006a8:	d80f      	bhi.n	80006ca <_ntoa_long.constprop.0+0x108>
      buf[len++] = 'b';
 80006aa:	2162      	movs	r1, #98	; 0x62
 80006ac:	aa0a      	add	r2, sp, #40	; 0x28
 80006ae:	e01a      	b.n	80006e6 <_ntoa_long.constprop.0+0x124>
      buf[len++] = '0';
 80006b0:	5458      	strb	r0, [r3, r1]
 80006b2:	3301      	adds	r3, #1
 80006b4:	e7da      	b.n	800066c <_ntoa_long.constprop.0+0xaa>
 80006b6:	0013      	movs	r3, r2
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80006b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80006ba:	2a10      	cmp	r2, #16
 80006bc:	d1f0      	bne.n	80006a0 <_ntoa_long.constprop.0+0xde>
 80006be:	aa0a      	add	r2, sp, #40	; 0x28
 80006c0:	06a1      	lsls	r1, r4, #26
 80006c2:	d40d      	bmi.n	80006e0 <_ntoa_long.constprop.0+0x11e>
      buf[len++] = 'x';
 80006c4:	2178      	movs	r1, #120	; 0x78
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80006c6:	2b1f      	cmp	r3, #31
 80006c8:	d90d      	bls.n	80006e6 <_ntoa_long.constprop.0+0x124>
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	9a08      	ldr	r2, [sp, #32]
 80006ce:	9907      	ldr	r1, [sp, #28]
 80006d0:	9806      	ldr	r0, [sp, #24]
 80006d2:	9402      	str	r4, [sp, #8]
 80006d4:	9701      	str	r7, [sp, #4]
 80006d6:	ab0a      	add	r3, sp, #40	; 0x28
 80006d8:	f7ff ff28 	bl	800052c <_out_rev.constprop.0>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
}
 80006dc:	b013      	add	sp, #76	; 0x4c
 80006de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      buf[len++] = 'X';
 80006e0:	2158      	movs	r1, #88	; 0x58
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80006e2:	2b1f      	cmp	r3, #31
 80006e4:	d8f1      	bhi.n	80006ca <_ntoa_long.constprop.0+0x108>
      buf[len++] = 'b';
 80006e6:	54d1      	strb	r1, [r2, r3]
 80006e8:	3301      	adds	r3, #1
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80006ea:	2b1f      	cmp	r3, #31
 80006ec:	d8ed      	bhi.n	80006ca <_ntoa_long.constprop.0+0x108>
      buf[len++] = '0';
 80006ee:	2130      	movs	r1, #48	; 0x30
 80006f0:	aa0a      	add	r2, sp, #40	; 0x28
 80006f2:	54d1      	strb	r1, [r2, r3]
 80006f4:	3301      	adds	r3, #1
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80006f6:	2b1f      	cmp	r3, #31
 80006f8:	d8e7      	bhi.n	80006ca <_ntoa_long.constprop.0+0x108>
    if (negative) {
 80006fa:	9904      	ldr	r1, [sp, #16]
 80006fc:	aa0a      	add	r2, sp, #40	; 0x28
 80006fe:	2900      	cmp	r1, #0
 8000700:	d003      	beq.n	800070a <_ntoa_long.constprop.0+0x148>
      buf[len++] = '-';
 8000702:	212d      	movs	r1, #45	; 0x2d
      buf[len++] = ' ';
 8000704:	54d1      	strb	r1, [r2, r3]
 8000706:	3301      	adds	r3, #1
 8000708:	e7df      	b.n	80006ca <_ntoa_long.constprop.0+0x108>
    else if (flags & FLAGS_PLUS) {
 800070a:	0761      	lsls	r1, r4, #29
 800070c:	d501      	bpl.n	8000712 <_ntoa_long.constprop.0+0x150>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800070e:	212b      	movs	r1, #43	; 0x2b
 8000710:	e7f8      	b.n	8000704 <_ntoa_long.constprop.0+0x142>
    else if (flags & FLAGS_SPACE) {
 8000712:	0721      	lsls	r1, r4, #28
 8000714:	d5d9      	bpl.n	80006ca <_ntoa_long.constprop.0+0x108>
      buf[len++] = ' ';
 8000716:	2120      	movs	r1, #32
 8000718:	e7f4      	b.n	8000704 <_ntoa_long.constprop.0+0x142>
	...

0800071c <_vsnprintf.constprop.0>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
 800071c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071e:	b09d      	sub	sp, #116	; 0x74
 8000720:	900a      	str	r0, [sp, #40]	; 0x28
 8000722:	910b      	str	r1, [sp, #44]	; 0x2c
 8000724:	9207      	str	r2, [sp, #28]
 8000726:	9308      	str	r3, [sp, #32]
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
 8000728:	2700      	movs	r7, #0
  while (*format)
 800072a:	9b07      	ldr	r3, [sp, #28]
 800072c:	7818      	ldrb	r0, [r3, #0]
 800072e:	2800      	cmp	r0, #0
 8000730:	d10d      	bne.n	800074e <_vsnprintf.constprop.0+0x32>
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8000732:	003a      	movs	r2, r7
 8000734:	1cbb      	adds	r3, r7, #2
 8000736:	d901      	bls.n	800073c <_vsnprintf.constprop.0+0x20>
 8000738:	2202      	movs	r2, #2
 800073a:	4252      	negs	r2, r2
 800073c:	2301      	movs	r3, #1
 800073e:	2000      	movs	r0, #0
 8000740:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000742:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8000744:	425b      	negs	r3, r3
 8000746:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
}
 8000748:	0038      	movs	r0, r7
 800074a:	b01d      	add	sp, #116	; 0x74
 800074c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (*format != '%') {
 800074e:	9b07      	ldr	r3, [sp, #28]
 8000750:	3301      	adds	r3, #1
 8000752:	9307      	str	r3, [sp, #28]
 8000754:	2825      	cmp	r0, #37	; 0x25
 8000756:	d008      	beq.n	800076a <_vsnprintf.constprop.0+0x4e>
      out(*format, buffer, idx++, maxlen);
 8000758:	2301      	movs	r3, #1
 800075a:	003a      	movs	r2, r7
 800075c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800075e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8000760:	425b      	negs	r3, r3
 8000762:	1c7c      	adds	r4, r7, #1
 8000764:	47a8      	blx	r5
    return 0U;
 8000766:	0027      	movs	r7, r4
        break;
 8000768:	e7df      	b.n	800072a <_vsnprintf.constprop.0+0xe>
    flags = 0U;
 800076a:	2600      	movs	r6, #0
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800076c:	2504      	movs	r5, #4
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800076e:	2102      	movs	r1, #2
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8000770:	2001      	movs	r0, #1
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8000772:	2408      	movs	r4, #8
 8000774:	e005      	b.n	8000782 <_vsnprintf.constprop.0+0x66>
      switch (*format) {
 8000776:	2b2d      	cmp	r3, #45	; 0x2d
 8000778:	d016      	beq.n	80007a8 <_vsnprintf.constprop.0+0x8c>
 800077a:	2b30      	cmp	r3, #48	; 0x30
 800077c:	d10c      	bne.n	8000798 <_vsnprintf.constprop.0+0x7c>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800077e:	4306      	orrs	r6, r0
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
 8000780:	9207      	str	r2, [sp, #28]
      switch (*format) {
 8000782:	9b07      	ldr	r3, [sp, #28]
 8000784:	9a07      	ldr	r2, [sp, #28]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	3201      	adds	r2, #1
 800078a:	2b2b      	cmp	r3, #43	; 0x2b
 800078c:	d00e      	beq.n	80007ac <_vsnprintf.constprop.0+0x90>
 800078e:	d8f2      	bhi.n	8000776 <_vsnprintf.constprop.0+0x5a>
 8000790:	2b20      	cmp	r3, #32
 8000792:	d00d      	beq.n	80007b0 <_vsnprintf.constprop.0+0x94>
 8000794:	2b23      	cmp	r3, #35	; 0x23
 8000796:	d00d      	beq.n	80007b4 <_vsnprintf.constprop.0+0x98>
    if (_is_digit(*format)) {
 8000798:	0019      	movs	r1, r3
 800079a:	3930      	subs	r1, #48	; 0x30
 800079c:	2909      	cmp	r1, #9
 800079e:	d82d      	bhi.n	80007fc <_vsnprintf.constprop.0+0xe0>
  unsigned int i = 0U;
 80007a0:	2300      	movs	r3, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80007a2:	200a      	movs	r0, #10
  unsigned int i = 0U;
 80007a4:	9306      	str	r3, [sp, #24]
 80007a6:	e00e      	b.n	80007c6 <_vsnprintf.constprop.0+0xaa>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80007a8:	430e      	orrs	r6, r1
    } while (n);
 80007aa:	e7e9      	b.n	8000780 <_vsnprintf.constprop.0+0x64>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80007ac:	432e      	orrs	r6, r5
    } while (n);
 80007ae:	e7e7      	b.n	8000780 <_vsnprintf.constprop.0+0x64>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80007b0:	4326      	orrs	r6, r4
    } while (n);
 80007b2:	e7e5      	b.n	8000780 <_vsnprintf.constprop.0+0x64>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80007b4:	2310      	movs	r3, #16
 80007b6:	431e      	orrs	r6, r3
    } while (n);
 80007b8:	e7e2      	b.n	8000780 <_vsnprintf.constprop.0+0x64>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80007ba:	9b06      	ldr	r3, [sp, #24]
 80007bc:	9107      	str	r1, [sp, #28]
 80007be:	4343      	muls	r3, r0
 80007c0:	3b30      	subs	r3, #48	; 0x30
 80007c2:	18d3      	adds	r3, r2, r3
 80007c4:	9306      	str	r3, [sp, #24]
  while (_is_digit(**str)) {
 80007c6:	9b07      	ldr	r3, [sp, #28]
 80007c8:	781a      	ldrb	r2, [r3, #0]
  return (ch >= '0') && (ch <= '9');
 80007ca:	1c59      	adds	r1, r3, #1
  while (_is_digit(**str)) {
 80007cc:	0013      	movs	r3, r2
 80007ce:	3b30      	subs	r3, #48	; 0x30
 80007d0:	2b09      	cmp	r3, #9
 80007d2:	d9f2      	bls.n	80007ba <_vsnprintf.constprop.0+0x9e>
    precision = 0U;
 80007d4:	2200      	movs	r2, #0
    if (*format == '.') {
 80007d6:	9b07      	ldr	r3, [sp, #28]
    precision = 0U;
 80007d8:	9209      	str	r2, [sp, #36]	; 0x24
    if (*format == '.') {
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b2e      	cmp	r3, #46	; 0x2e
 80007de:	d12b      	bne.n	8000838 <_vsnprintf.constprop.0+0x11c>
      flags |= FLAGS_PRECISION;
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	00d2      	lsls	r2, r2, #3
 80007e4:	4316      	orrs	r6, r2
      if (_is_digit(*format)) {
 80007e6:	9a07      	ldr	r2, [sp, #28]
 80007e8:	9b07      	ldr	r3, [sp, #28]
 80007ea:	7852      	ldrb	r2, [r2, #1]
 80007ec:	3301      	adds	r3, #1
 80007ee:	0011      	movs	r1, r2
 80007f0:	3930      	subs	r1, #48	; 0x30
 80007f2:	2909      	cmp	r1, #9
 80007f4:	d842      	bhi.n	800087c <_vsnprintf.constprop.0+0x160>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80007f6:	200a      	movs	r0, #10
      format++;
 80007f8:	9307      	str	r3, [sp, #28]
 80007fa:	e016      	b.n	800082a <_vsnprintf.constprop.0+0x10e>
    width = 0U;
 80007fc:	2100      	movs	r1, #0
 80007fe:	9106      	str	r1, [sp, #24]
    else if (*format == '*') {
 8000800:	2b2a      	cmp	r3, #42	; 0x2a
 8000802:	d1e7      	bne.n	80007d4 <_vsnprintf.constprop.0+0xb8>
      const int w = va_arg(va, int);
 8000804:	9d08      	ldr	r5, [sp, #32]
 8000806:	cd08      	ldmia	r5!, {r3}
 8000808:	9306      	str	r3, [sp, #24]
      if (w < 0) {
 800080a:	428b      	cmp	r3, r1
 800080c:	da04      	bge.n	8000818 <_vsnprintf.constprop.0+0xfc>
        flags |= FLAGS_LEFT;    // reverse padding
 800080e:	2302      	movs	r3, #2
 8000810:	431e      	orrs	r6, r3
        width = (unsigned int)-w;
 8000812:	9b06      	ldr	r3, [sp, #24]
 8000814:	425b      	negs	r3, r3
 8000816:	9306      	str	r3, [sp, #24]
      const int w = va_arg(va, int);
 8000818:	9508      	str	r5, [sp, #32]
 800081a:	9207      	str	r2, [sp, #28]
 800081c:	e7da      	b.n	80007d4 <_vsnprintf.constprop.0+0xb8>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800081e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000820:	9107      	str	r1, [sp, #28]
 8000822:	4343      	muls	r3, r0
 8000824:	3b30      	subs	r3, #48	; 0x30
 8000826:	18d3      	adds	r3, r2, r3
 8000828:	9309      	str	r3, [sp, #36]	; 0x24
  while (_is_digit(**str)) {
 800082a:	9b07      	ldr	r3, [sp, #28]
 800082c:	781a      	ldrb	r2, [r3, #0]
  return (ch >= '0') && (ch <= '9');
 800082e:	1c59      	adds	r1, r3, #1
  while (_is_digit(**str)) {
 8000830:	0013      	movs	r3, r2
 8000832:	3b30      	subs	r3, #48	; 0x30
 8000834:	2b09      	cmp	r3, #9
 8000836:	d9f2      	bls.n	800081e <_vsnprintf.constprop.0+0x102>
    switch (*format) {
 8000838:	9b07      	ldr	r3, [sp, #28]
 800083a:	781a      	ldrb	r2, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	2a6c      	cmp	r2, #108	; 0x6c
 8000840:	d032      	beq.n	80008a8 <_vsnprintf.constprop.0+0x18c>
 8000842:	d82c      	bhi.n	800089e <_vsnprintf.constprop.0+0x182>
 8000844:	2a68      	cmp	r2, #104	; 0x68
 8000846:	d039      	beq.n	80008bc <_vsnprintf.constprop.0+0x1a0>
 8000848:	2a6a      	cmp	r2, #106	; 0x6a
 800084a:	d040      	beq.n	80008ce <_vsnprintf.constprop.0+0x1b2>
 800084c:	9b07      	ldr	r3, [sp, #28]
    switch (*format) {
 800084e:	781c      	ldrb	r4, [r3, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	9307      	str	r3, [sp, #28]
 8000854:	2c78      	cmp	r4, #120	; 0x78
 8000856:	d808      	bhi.n	800086a <_vsnprintf.constprop.0+0x14e>
 8000858:	2c57      	cmp	r4, #87	; 0x57
 800085a:	d83b      	bhi.n	80008d4 <_vsnprintf.constprop.0+0x1b8>
 800085c:	2c25      	cmp	r4, #37	; 0x25
 800085e:	d004      	beq.n	800086a <_vsnprintf.constprop.0+0x14e>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8000860:	2320      	movs	r3, #32
 8000862:	431e      	orrs	r6, r3
    switch (*format) {
 8000864:	2c46      	cmp	r4, #70	; 0x46
 8000866:	d100      	bne.n	800086a <_vsnprintf.constprop.0+0x14e>
 8000868:	e0c1      	b.n	80009ee <_vsnprintf.constprop.0+0x2d2>
        out(*format, buffer, idx++, maxlen);
 800086a:	2301      	movs	r3, #1
 800086c:	0020      	movs	r0, r4
 800086e:	003a      	movs	r2, r7
 8000870:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000872:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8000874:	425b      	negs	r3, r3
 8000876:	1c7d      	adds	r5, r7, #1
 8000878:	47a0      	blx	r4
 800087a:	e2e9      	b.n	8000e50 <_vsnprintf.constprop.0+0x734>
      else if (*format == '*') {
 800087c:	2a2a      	cmp	r2, #42	; 0x2a
 800087e:	d10c      	bne.n	800089a <_vsnprintf.constprop.0+0x17e>
        const int prec = (int)va_arg(va, int);
 8000880:	9d08      	ldr	r5, [sp, #32]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8000882:	cd08      	ldmia	r5!, {r3}
 8000884:	9309      	str	r3, [sp, #36]	; 0x24
 8000886:	43db      	mvns	r3, r3
 8000888:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800088a:	17db      	asrs	r3, r3, #31
 800088c:	401a      	ands	r2, r3
        format++;
 800088e:	9b07      	ldr	r3, [sp, #28]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8000890:	9209      	str	r2, [sp, #36]	; 0x24
        format++;
 8000892:	3302      	adds	r3, #2
 8000894:	9307      	str	r3, [sp, #28]
        const int prec = (int)va_arg(va, int);
 8000896:	9508      	str	r5, [sp, #32]
 8000898:	e7ce      	b.n	8000838 <_vsnprintf.constprop.0+0x11c>
      format++;
 800089a:	9307      	str	r3, [sp, #28]
 800089c:	e7cc      	b.n	8000838 <_vsnprintf.constprop.0+0x11c>
    switch (*format) {
 800089e:	2a7a      	cmp	r2, #122	; 0x7a
 80008a0:	d1d4      	bne.n	800084c <_vsnprintf.constprop.0+0x130>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	0052      	lsls	r2, r2, #1
 80008a6:	e00e      	b.n	80008c6 <_vsnprintf.constprop.0+0x1aa>
        if (*format == 'l') {
 80008a8:	9a07      	ldr	r2, [sp, #28]
 80008aa:	7852      	ldrb	r2, [r2, #1]
 80008ac:	2a6c      	cmp	r2, #108	; 0x6c
 80008ae:	d1f8      	bne.n	80008a2 <_vsnprintf.constprop.0+0x186>
          flags |= FLAGS_LONG_LONG;
 80008b0:	23c0      	movs	r3, #192	; 0xc0
 80008b2:	009b      	lsls	r3, r3, #2
          flags |= FLAGS_CHAR;
 80008b4:	431e      	orrs	r6, r3
          format++;
 80008b6:	9b07      	ldr	r3, [sp, #28]
 80008b8:	3302      	adds	r3, #2
 80008ba:	e7c8      	b.n	800084e <_vsnprintf.constprop.0+0x132>
        if (*format == 'h') {
 80008bc:	9a07      	ldr	r2, [sp, #28]
 80008be:	7852      	ldrb	r2, [r2, #1]
 80008c0:	2a68      	cmp	r2, #104	; 0x68
 80008c2:	d002      	beq.n	80008ca <_vsnprintf.constprop.0+0x1ae>
        flags |= FLAGS_SHORT;
 80008c4:	2280      	movs	r2, #128	; 0x80
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80008c6:	4316      	orrs	r6, r2
        break;
 80008c8:	e7c1      	b.n	800084e <_vsnprintf.constprop.0+0x132>
          flags |= FLAGS_CHAR;
 80008ca:	23c0      	movs	r3, #192	; 0xc0
 80008cc:	e7f2      	b.n	80008b4 <_vsnprintf.constprop.0+0x198>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	0092      	lsls	r2, r2, #2
 80008d2:	e7f8      	b.n	80008c6 <_vsnprintf.constprop.0+0x1aa>
 80008d4:	0020      	movs	r0, r4
 80008d6:	3858      	subs	r0, #88	; 0x58
 80008d8:	2820      	cmp	r0, #32
 80008da:	d8c6      	bhi.n	800086a <_vsnprintf.constprop.0+0x14e>
 80008dc:	f001 fd40 	bl	8002360 <__gnu_thumb1_case_shi>
 80008e0:	ffc50021 	.word	0xffc50021
 80008e4:	ffc5ffc5 	.word	0xffc5ffc5
 80008e8:	ffc5ffc5 	.word	0xffc5ffc5
 80008ec:	ffc5ffc5 	.word	0xffc5ffc5
 80008f0:	ffc5ffc5 	.word	0xffc5ffc5
 80008f4:	01ed0021 	.word	0x01ed0021
 80008f8:	ffc50021 	.word	0xffc50021
 80008fc:	ffc50087 	.word	0xffc50087
 8000900:	0021ffc5 	.word	0x0021ffc5
 8000904:	ffc5ffc5 	.word	0xffc5ffc5
 8000908:	ffc5ffc5 	.word	0xffc5ffc5
 800090c:	0021ffc5 	.word	0x0021ffc5
 8000910:	ffc502ba 	.word	0xffc502ba
 8000914:	0249ffc5 	.word	0x0249ffc5
 8000918:	0021ffc5 	.word	0x0021ffc5
 800091c:	ffc5ffc5 	.word	0xffc5ffc5
 8000920:	0021      	.short	0x0021
        if (*format == 'x' || *format == 'X') {
 8000922:	2c78      	cmp	r4, #120	; 0x78
 8000924:	d100      	bne.n	8000928 <_vsnprintf.constprop.0+0x20c>
 8000926:	e2ac      	b.n	8000e82 <_vsnprintf.constprop.0+0x766>
 8000928:	2c58      	cmp	r4, #88	; 0x58
 800092a:	d100      	bne.n	800092e <_vsnprintf.constprop.0+0x212>
 800092c:	e2a7      	b.n	8000e7e <_vsnprintf.constprop.0+0x762>
        else if (*format == 'o') {
 800092e:	2c6f      	cmp	r4, #111	; 0x6f
 8000930:	d100      	bne.n	8000934 <_vsnprintf.constprop.0+0x218>
 8000932:	e2a8      	b.n	8000e86 <_vsnprintf.constprop.0+0x76a>
        else if (*format == 'b') {
 8000934:	2c62      	cmp	r4, #98	; 0x62
 8000936:	d100      	bne.n	800093a <_vsnprintf.constprop.0+0x21e>
 8000938:	e2a7      	b.n	8000e8a <_vsnprintf.constprop.0+0x76e>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800093a:	2310      	movs	r3, #16
          base = 10U;
 800093c:	210a      	movs	r1, #10
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800093e:	439e      	bics	r6, r3
        if ((*format != 'i') && (*format != 'd')) {
 8000940:	2c69      	cmp	r4, #105	; 0x69
 8000942:	d003      	beq.n	800094c <_vsnprintf.constprop.0+0x230>
 8000944:	2c64      	cmp	r4, #100	; 0x64
 8000946:	d001      	beq.n	800094c <_vsnprintf.constprop.0+0x230>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8000948:	230c      	movs	r3, #12
 800094a:	439e      	bics	r6, r3
        if (flags & FLAGS_PRECISION) {
 800094c:	0573      	lsls	r3, r6, #21
 800094e:	d501      	bpl.n	8000954 <_vsnprintf.constprop.0+0x238>
          flags &= ~FLAGS_ZEROPAD;
 8000950:	2301      	movs	r3, #1
 8000952:	439e      	bics	r6, r3
        if ((*format == 'i') || (*format == 'd')) {
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	4033      	ands	r3, r6
 800095a:	2c69      	cmp	r4, #105	; 0x69
 800095c:	d001      	beq.n	8000962 <_vsnprintf.constprop.0+0x246>
 800095e:	2c64      	cmp	r4, #100	; 0x64
 8000960:	d11c      	bne.n	800099c <_vsnprintf.constprop.0+0x280>
          if (flags & FLAGS_LONG_LONG) {
 8000962:	2b00      	cmp	r3, #0
 8000964:	d000      	beq.n	8000968 <_vsnprintf.constprop.0+0x24c>
 8000966:	e6e0      	b.n	800072a <_vsnprintf.constprop.0+0xe>
          else if (flags & FLAGS_LONG) {
 8000968:	9b08      	ldr	r3, [sp, #32]
 800096a:	1d1c      	adds	r4, r3, #4
            const long value = va_arg(va, long);
 800096c:	9b08      	ldr	r3, [sp, #32]
 800096e:	681a      	ldr	r2, [r3, #0]
          else if (flags & FLAGS_LONG) {
 8000970:	05f3      	lsls	r3, r6, #23
 8000972:	d50b      	bpl.n	800098c <_vsnprintf.constprop.0+0x270>
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8000974:	17d0      	asrs	r0, r2, #31
 8000976:	1813      	adds	r3, r2, r0
 8000978:	4043      	eors	r3, r0
 800097a:	9806      	ldr	r0, [sp, #24]
 800097c:	9604      	str	r6, [sp, #16]
 800097e:	9003      	str	r0, [sp, #12]
 8000980:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000982:	9101      	str	r1, [sp, #4]
 8000984:	9002      	str	r0, [sp, #8]
 8000986:	0fd2      	lsrs	r2, r2, #31
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8000988:	9200      	str	r2, [sp, #0]
 800098a:	e017      	b.n	80009bc <_vsnprintf.constprop.0+0x2a0>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800098c:	0673      	lsls	r3, r6, #25
 800098e:	d501      	bpl.n	8000994 <_vsnprintf.constprop.0+0x278>
 8000990:	b2d2      	uxtb	r2, r2
 8000992:	e7ef      	b.n	8000974 <_vsnprintf.constprop.0+0x258>
 8000994:	0633      	lsls	r3, r6, #24
 8000996:	d5ed      	bpl.n	8000974 <_vsnprintf.constprop.0+0x258>
 8000998:	b212      	sxth	r2, r2
 800099a:	e7eb      	b.n	8000974 <_vsnprintf.constprop.0+0x258>
          if (flags & FLAGS_LONG_LONG) {
 800099c:	2b00      	cmp	r3, #0
 800099e:	d000      	beq.n	80009a2 <_vsnprintf.constprop.0+0x286>
 80009a0:	e6c3      	b.n	800072a <_vsnprintf.constprop.0+0xe>
          else if (flags & FLAGS_LONG) {
 80009a2:	9a08      	ldr	r2, [sp, #32]
 80009a4:	1d14      	adds	r4, r2, #4
 80009a6:	05f2      	lsls	r2, r6, #23
 80009a8:	d510      	bpl.n	80009cc <_vsnprintf.constprop.0+0x2b0>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80009aa:	9a06      	ldr	r2, [sp, #24]
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	9203      	str	r2, [sp, #12]
 80009b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80009b2:	9b08      	ldr	r3, [sp, #32]
 80009b4:	9604      	str	r6, [sp, #16]
 80009b6:	9202      	str	r2, [sp, #8]
 80009b8:	9101      	str	r1, [sp, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	003a      	movs	r2, r7
 80009be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80009c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80009c2:	f7ff fdfe 	bl	80005c2 <_ntoa_long.constprop.0>
 80009c6:	9408      	str	r4, [sp, #32]
 80009c8:	0007      	movs	r7, r0
 80009ca:	e6ae      	b.n	800072a <_vsnprintf.constprop.0+0xe>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80009cc:	9b08      	ldr	r3, [sp, #32]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	0672      	lsls	r2, r6, #25
 80009d2:	d508      	bpl.n	80009e6 <_vsnprintf.constprop.0+0x2ca>
 80009d4:	b2db      	uxtb	r3, r3
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80009d6:	9a06      	ldr	r2, [sp, #24]
 80009d8:	9604      	str	r6, [sp, #16]
 80009da:	9203      	str	r2, [sp, #12]
 80009dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80009de:	9101      	str	r1, [sp, #4]
 80009e0:	9202      	str	r2, [sp, #8]
 80009e2:	2200      	movs	r2, #0
 80009e4:	e7d0      	b.n	8000988 <_vsnprintf.constprop.0+0x26c>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80009e6:	0632      	lsls	r2, r6, #24
 80009e8:	d5f5      	bpl.n	80009d6 <_vsnprintf.constprop.0+0x2ba>
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	e7f3      	b.n	80009d6 <_vsnprintf.constprop.0+0x2ba>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80009ee:	2307      	movs	r3, #7
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	3507      	adds	r5, #7
 80009f4:	439d      	bics	r5, r3
 80009f6:	002a      	movs	r2, r5
 80009f8:	ca18      	ldmia	r2!, {r3, r4}
 80009fa:	9208      	str	r2, [sp, #32]
  if (value != value)
 80009fc:	001a      	movs	r2, r3
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80009fe:	930c      	str	r3, [sp, #48]	; 0x30
 8000a00:	940d      	str	r4, [sp, #52]	; 0x34
  if (value != value)
 8000a02:	0010      	movs	r0, r2
 8000a04:	0023      	movs	r3, r4
 8000a06:	0021      	movs	r1, r4
 8000a08:	f001 fe3a 	bl	8002680 <__aeabi_dcmpeq>
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	d10c      	bne.n	8000a2a <_vsnprintf.constprop.0+0x30e>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8000a10:	9b06      	ldr	r3, [sp, #24]
 8000a12:	9602      	str	r6, [sp, #8]
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	2303      	movs	r3, #3
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	4bc1      	ldr	r3, [pc, #772]	; (8000d20 <_vsnprintf.constprop.0+0x604>)
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8000a1c:	003a      	movs	r2, r7
 8000a1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000a20:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000a22:	f7ff fd83 	bl	800052c <_out_rev.constprop.0>
 8000a26:	0007      	movs	r7, r0
 8000a28:	e67f      	b.n	800072a <_vsnprintf.constprop.0+0xe>
  if (value < -DBL_MAX)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000a2e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8000a30:	4bbc      	ldr	r3, [pc, #752]	; (8000d24 <_vsnprintf.constprop.0+0x608>)
 8000a32:	4252      	negs	r2, r2
 8000a34:	f001 fe2a 	bl	800268c <__aeabi_dcmplt>
 8000a38:	2800      	cmp	r0, #0
 8000a3a:	d006      	beq.n	8000a4a <_vsnprintf.constprop.0+0x32e>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8000a3c:	9b06      	ldr	r3, [sp, #24]
 8000a3e:	9602      	str	r6, [sp, #8]
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	2304      	movs	r3, #4
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	4bb8      	ldr	r3, [pc, #736]	; (8000d28 <_vsnprintf.constprop.0+0x60c>)
 8000a48:	e7e8      	b.n	8000a1c <_vsnprintf.constprop.0+0x300>
  if (value > DBL_MAX)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000a4e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8000a50:	4bb6      	ldr	r3, [pc, #728]	; (8000d2c <_vsnprintf.constprop.0+0x610>)
 8000a52:	4252      	negs	r2, r2
 8000a54:	f001 fe2e 	bl	80026b4 <__aeabi_dcmpgt>
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	d00a      	beq.n	8000a72 <_vsnprintf.constprop.0+0x356>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	4bb4      	ldr	r3, [pc, #720]	; (8000d30 <_vsnprintf.constprop.0+0x614>)
 8000a60:	4216      	tst	r6, r2
 8000a62:	d101      	bne.n	8000a68 <_vsnprintf.constprop.0+0x34c>
 8000a64:	4bb3      	ldr	r3, [pc, #716]	; (8000d34 <_vsnprintf.constprop.0+0x618>)
 8000a66:	3a01      	subs	r2, #1
 8000a68:	9906      	ldr	r1, [sp, #24]
 8000a6a:	9602      	str	r6, [sp, #8]
 8000a6c:	9101      	str	r1, [sp, #4]
 8000a6e:	9200      	str	r2, [sp, #0]
 8000a70:	e7d4      	b.n	8000a1c <_vsnprintf.constprop.0+0x300>
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8000a72:	2200      	movs	r2, #0
 8000a74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000a76:	990d      	ldr	r1, [sp, #52]	; 0x34
 8000a78:	4baf      	ldr	r3, [pc, #700]	; (8000d38 <_vsnprintf.constprop.0+0x61c>)
 8000a7a:	f001 fe1b 	bl	80026b4 <__aeabi_dcmpgt>
 8000a7e:	1e04      	subs	r4, r0, #0
 8000a80:	d000      	beq.n	8000a84 <_vsnprintf.constprop.0+0x368>
 8000a82:	e651      	b.n	8000728 <_vsnprintf.constprop.0+0xc>
 8000a84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000a86:	990d      	ldr	r1, [sp, #52]	; 0x34
 8000a88:	2200      	movs	r2, #0
 8000a8a:	4bac      	ldr	r3, [pc, #688]	; (8000d3c <_vsnprintf.constprop.0+0x620>)
 8000a8c:	f001 fdfe 	bl	800268c <__aeabi_dcmplt>
 8000a90:	2800      	cmp	r0, #0
 8000a92:	d000      	beq.n	8000a96 <_vsnprintf.constprop.0+0x37a>
 8000a94:	e667      	b.n	8000766 <_vsnprintf.constprop.0+0x4a>
  if (value < 0) {
 8000a96:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000a98:	990d      	ldr	r1, [sp, #52]	; 0x34
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f001 fdf5 	bl	800268c <__aeabi_dcmplt>
 8000aa2:	2800      	cmp	r0, #0
 8000aa4:	d100      	bne.n	8000aa8 <_vsnprintf.constprop.0+0x38c>
 8000aa6:	e080      	b.n	8000baa <_vsnprintf.constprop.0+0x48e>
    value = 0 - value;
 8000aa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8000aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000aac:	2000      	movs	r0, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f002 f9bc 	bl	8002e2c <__aeabi_dsub>
    negative = true;
 8000ab4:	2301      	movs	r3, #1
    value = 0 - value;
 8000ab6:	900c      	str	r0, [sp, #48]	; 0x30
 8000ab8:	910d      	str	r1, [sp, #52]	; 0x34
    negative = true;
 8000aba:	930f      	str	r3, [sp, #60]	; 0x3c
  if (!(flags & FLAGS_PRECISION)) {
 8000abc:	0573      	lsls	r3, r6, #21
 8000abe:	d576      	bpl.n	8000bae <_vsnprintf.constprop.0+0x492>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8000ac0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000ac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ac4:	910e      	str	r1, [sp, #56]	; 0x38
    buf[len++] = '0';
 8000ac6:	2130      	movs	r1, #48	; 0x30
 8000ac8:	ab14      	add	r3, sp, #80	; 0x50
 8000aca:	3a20      	subs	r2, #32
 8000acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ace:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8000ad0:	1b05      	subs	r5, r0, r4
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8000ad2:	2c09      	cmp	r4, #9
 8000ad4:	d907      	bls.n	8000ae6 <_vsnprintf.constprop.0+0x3ca>
    prec--;
 8000ad6:	980e      	ldr	r0, [sp, #56]	; 0x38
    buf[len++] = '0';
 8000ad8:	7019      	strb	r1, [r3, #0]
    prec--;
 8000ada:	3801      	subs	r0, #1
 8000adc:	900e      	str	r0, [sp, #56]	; 0x38
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8000ade:	3301      	adds	r3, #1
 8000ae0:	4282      	cmp	r2, r0
 8000ae2:	d1f3      	bne.n	8000acc <_vsnprintf.constprop.0+0x3b0>
 8000ae4:	2520      	movs	r5, #32
  int whole = (int)value;
 8000ae6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000ae8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8000aea:	f002 fd31 	bl	8003550 <__aeabi_d2iz>
  double tmp = (value - whole) * pow10[prec];
 8000aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  int whole = (int)value;
 8000af0:	9009      	str	r0, [sp, #36]	; 0x24
  double tmp = (value - whole) * pow10[prec];
 8000af2:	00da      	lsls	r2, r3, #3
 8000af4:	4b92      	ldr	r3, [pc, #584]	; (8000d40 <_vsnprintf.constprop.0+0x624>)
 8000af6:	189b      	adds	r3, r3, r2
 8000af8:	685c      	ldr	r4, [r3, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	9310      	str	r3, [sp, #64]	; 0x40
 8000afe:	9411      	str	r4, [sp, #68]	; 0x44
 8000b00:	f002 fd5c 	bl	80035bc <__aeabi_i2d>
 8000b04:	0002      	movs	r2, r0
 8000b06:	000b      	movs	r3, r1
 8000b08:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000b0a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8000b0c:	f002 f98e 	bl	8002e2c <__aeabi_dsub>
 8000b10:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8000b12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000b14:	f001 ff1e 	bl	8002954 <__aeabi_dmul>
 8000b18:	9012      	str	r0, [sp, #72]	; 0x48
 8000b1a:	9113      	str	r1, [sp, #76]	; 0x4c
  unsigned long frac = (unsigned long)tmp;
 8000b1c:	f001 fdde 	bl	80026dc <__aeabi_d2uiz>
 8000b20:	0004      	movs	r4, r0
  diff = tmp - frac;
 8000b22:	f002 fd7b 	bl	800361c <__aeabi_ui2d>
 8000b26:	0002      	movs	r2, r0
 8000b28:	000b      	movs	r3, r1
 8000b2a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8000b2c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8000b2e:	f002 f97d 	bl	8002e2c <__aeabi_dsub>
  if (diff > 0.5) {
 8000b32:	2200      	movs	r2, #0
 8000b34:	4b83      	ldr	r3, [pc, #524]	; (8000d44 <_vsnprintf.constprop.0+0x628>)
  diff = tmp - frac;
 8000b36:	9012      	str	r0, [sp, #72]	; 0x48
 8000b38:	9113      	str	r1, [sp, #76]	; 0x4c
  if (diff > 0.5) {
 8000b3a:	f001 fdbb 	bl	80026b4 <__aeabi_dcmpgt>
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	d038      	beq.n	8000bb4 <_vsnprintf.constprop.0+0x498>
    ++frac;
 8000b42:	3401      	adds	r4, #1
    if (frac >= pow10[prec]) {
 8000b44:	0020      	movs	r0, r4
 8000b46:	f002 fd69 	bl	800361c <__aeabi_ui2d>
 8000b4a:	0002      	movs	r2, r0
 8000b4c:	000b      	movs	r3, r1
 8000b4e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8000b50:	9911      	ldr	r1, [sp, #68]	; 0x44
 8000b52:	f001 fda5 	bl	80026a0 <__aeabi_dcmple>
 8000b56:	2800      	cmp	r0, #0
 8000b58:	d003      	beq.n	8000b62 <_vsnprintf.constprop.0+0x446>
      frac = 0;
 8000b5a:	2400      	movs	r4, #0
      ++whole;
 8000b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000b5e:	3301      	adds	r3, #1
 8000b60:	9309      	str	r3, [sp, #36]	; 0x24
  if (prec == 0U) {
 8000b62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d159      	bne.n	8000c1c <_vsnprintf.constprop.0+0x500>
    diff = value - (double)whole;
 8000b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000b6a:	f002 fd27 	bl	80035bc <__aeabi_i2d>
 8000b6e:	0002      	movs	r2, r0
 8000b70:	000b      	movs	r3, r1
 8000b72:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000b74:	990d      	ldr	r1, [sp, #52]	; 0x34
 8000b76:	f002 f959 	bl	8002e2c <__aeabi_dsub>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	4b71      	ldr	r3, [pc, #452]	; (8000d44 <_vsnprintf.constprop.0+0x628>)
    diff = value - (double)whole;
 8000b7e:	900c      	str	r0, [sp, #48]	; 0x30
 8000b80:	910d      	str	r1, [sp, #52]	; 0x34
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8000b82:	f001 fd83 	bl	800268c <__aeabi_dcmplt>
 8000b86:	2800      	cmp	r0, #0
 8000b88:	d007      	beq.n	8000b9a <_vsnprintf.constprop.0+0x47e>
 8000b8a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000b8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8000b8e:	2200      	movs	r2, #0
 8000b90:	4b6c      	ldr	r3, [pc, #432]	; (8000d44 <_vsnprintf.constprop.0+0x628>)
 8000b92:	f001 fd8f 	bl	80026b4 <__aeabi_dcmpgt>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	d004      	beq.n	8000ba4 <_vsnprintf.constprop.0+0x488>
      ++whole;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	18d3      	adds	r3, r2, r3
 8000ba2:	9309      	str	r3, [sp, #36]	; 0x24
    buf[len++] = (char)(48 + (whole % 10));
 8000ba4:	240a      	movs	r4, #10
      buf[len++] = '.';
 8000ba6:	950c      	str	r5, [sp, #48]	; 0x30
 8000ba8:	e063      	b.n	8000c72 <_vsnprintf.constprop.0+0x556>
  bool negative = false;
 8000baa:	900f      	str	r0, [sp, #60]	; 0x3c
 8000bac:	e786      	b.n	8000abc <_vsnprintf.constprop.0+0x3a0>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8000bae:	2306      	movs	r3, #6
 8000bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8000bb2:	e785      	b.n	8000ac0 <_vsnprintf.constprop.0+0x3a4>
  else if (diff < 0.5) {
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8000bb8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8000bba:	4b62      	ldr	r3, [pc, #392]	; (8000d44 <_vsnprintf.constprop.0+0x628>)
 8000bbc:	f001 fd66 	bl	800268c <__aeabi_dcmplt>
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	d1ce      	bne.n	8000b62 <_vsnprintf.constprop.0+0x446>
  else if ((frac == 0U) || (frac & 1U)) {
 8000bc4:	2c00      	cmp	r4, #0
 8000bc6:	d001      	beq.n	8000bcc <_vsnprintf.constprop.0+0x4b0>
 8000bc8:	07e3      	lsls	r3, r4, #31
 8000bca:	d5ca      	bpl.n	8000b62 <_vsnprintf.constprop.0+0x446>
    ++frac;
 8000bcc:	3401      	adds	r4, #1
 8000bce:	e7c8      	b.n	8000b62 <_vsnprintf.constprop.0+0x446>
      --count;
 8000bd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      buf[len++] = (char)(48U + (frac % 10U));
 8000bd2:	210a      	movs	r1, #10
      --count;
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	930e      	str	r3, [sp, #56]	; 0x38
      buf[len++] = (char)(48U + (frac % 10U));
 8000bd8:	0020      	movs	r0, r4
 8000bda:	1c6b      	adds	r3, r5, #1
 8000bdc:	930c      	str	r3, [sp, #48]	; 0x30
 8000bde:	f001 fc4f 	bl	8002480 <__aeabi_uidivmod>
 8000be2:	2218      	movs	r2, #24
 8000be4:	ab0e      	add	r3, sp, #56	; 0x38
 8000be6:	3130      	adds	r1, #48	; 0x30
 8000be8:	189b      	adds	r3, r3, r2
 8000bea:	5559      	strb	r1, [r3, r5]
      if (!(frac /= 10U)) {
 8000bec:	0020      	movs	r0, r4
 8000bee:	210a      	movs	r1, #10
 8000bf0:	f001 fbc0 	bl	8002374 <__udivsi3>
 8000bf4:	2c09      	cmp	r4, #9
 8000bf6:	d80f      	bhi.n	8000c18 <_vsnprintf.constprop.0+0x4fc>
 8000bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      buf[len++] = '0';
 8000bfa:	2030      	movs	r0, #48	; 0x30
 8000bfc:	4694      	mov	ip, r2
      buf[len++] = (char)(48U + (frac % 10U));
 8000bfe:	0015      	movs	r5, r2
 8000c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000c02:	a914      	add	r1, sp, #80	; 0x50
 8000c04:	4463      	add	r3, ip
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8000c06:	2d20      	cmp	r5, #32
 8000c08:	d00a      	beq.n	8000c20 <_vsnprintf.constprop.0+0x504>
 8000c0a:	1c6a      	adds	r2, r5, #1
 8000c0c:	429d      	cmp	r5, r3
 8000c0e:	d11a      	bne.n	8000c46 <_vsnprintf.constprop.0+0x52a>
      buf[len++] = '.';
 8000c10:	232e      	movs	r3, #46	; 0x2e
 8000c12:	554b      	strb	r3, [r1, r5]
 8000c14:	0015      	movs	r5, r2
 8000c16:	e7c5      	b.n	8000ba4 <_vsnprintf.constprop.0+0x488>
      if (!(frac /= 10U)) {
 8000c18:	0004      	movs	r4, r0
      buf[len++] = (char)(48U + (frac % 10U));
 8000c1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8000c1c:	2d20      	cmp	r5, #32
 8000c1e:	d1d7      	bne.n	8000bd0 <_vsnprintf.constprop.0+0x4b4>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8000c20:	2303      	movs	r3, #3
 8000c22:	4033      	ands	r3, r6
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d134      	bne.n	8000c92 <_vsnprintf.constprop.0+0x576>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8000c28:	9b06      	ldr	r3, [sp, #24]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d031      	beq.n	8000c92 <_vsnprintf.constprop.0+0x576>
 8000c2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_vsnprintf.constprop.0+0x51e>
 8000c34:	330c      	adds	r3, #12
 8000c36:	421e      	tst	r6, r3
 8000c38:	d002      	beq.n	8000c40 <_vsnprintf.constprop.0+0x524>
      width--;
 8000c3a:	9b06      	ldr	r3, [sp, #24]
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	9306      	str	r3, [sp, #24]
      buf[len++] = '0';
 8000c40:	2230      	movs	r2, #48	; 0x30
 8000c42:	ab14      	add	r3, sp, #80	; 0x50
 8000c44:	e01a      	b.n	8000c7c <_vsnprintf.constprop.0+0x560>
      buf[len++] = '0';
 8000c46:	5548      	strb	r0, [r1, r5]
 8000c48:	0015      	movs	r5, r2
 8000c4a:	e7dc      	b.n	8000c06 <_vsnprintf.constprop.0+0x4ea>
    buf[len++] = (char)(48 + (whole % 10));
 8000c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c4e:	0021      	movs	r1, r4
 8000c50:	f001 fd00 	bl	8002654 <__aeabi_idivmod>
 8000c54:	2018      	movs	r0, #24
 8000c56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8000c58:	ab0e      	add	r3, sp, #56	; 0x38
 8000c5a:	181b      	adds	r3, r3, r0
 8000c5c:	3130      	adds	r1, #48	; 0x30
    if (!(whole /= 10)) {
 8000c5e:	9809      	ldr	r0, [sp, #36]	; 0x24
    buf[len++] = (char)(48 + (whole % 10));
 8000c60:	5499      	strb	r1, [r3, r2]
    if (!(whole /= 10)) {
 8000c62:	0021      	movs	r1, r4
 8000c64:	f001 fc10 	bl	8002488 <__divsi3>
    buf[len++] = (char)(48 + (whole % 10));
 8000c68:	3501      	adds	r5, #1
    if (!(whole /= 10)) {
 8000c6a:	9009      	str	r0, [sp, #36]	; 0x24
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	d0d7      	beq.n	8000c20 <_vsnprintf.constprop.0+0x504>
    buf[len++] = (char)(48 + (whole % 10));
 8000c70:	950c      	str	r5, [sp, #48]	; 0x30
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8000c72:	2d20      	cmp	r5, #32
 8000c74:	d1ea      	bne.n	8000c4c <_vsnprintf.constprop.0+0x530>
 8000c76:	e7d3      	b.n	8000c20 <_vsnprintf.constprop.0+0x504>
      buf[len++] = '0';
 8000c78:	54ea      	strb	r2, [r5, r3]
 8000c7a:	3501      	adds	r5, #1
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8000c7c:	9906      	ldr	r1, [sp, #24]
 8000c7e:	42a9      	cmp	r1, r5
 8000c80:	d907      	bls.n	8000c92 <_vsnprintf.constprop.0+0x576>
 8000c82:	2d20      	cmp	r5, #32
 8000c84:	d1f8      	bne.n	8000c78 <_vsnprintf.constprop.0+0x55c>
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8000c86:	9b06      	ldr	r3, [sp, #24]
 8000c88:	9602      	str	r6, [sp, #8]
 8000c8a:	9301      	str	r3, [sp, #4]
 8000c8c:	9500      	str	r5, [sp, #0]
 8000c8e:	ab14      	add	r3, sp, #80	; 0x50
 8000c90:	e6c4      	b.n	8000a1c <_vsnprintf.constprop.0+0x300>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8000c92:	2d20      	cmp	r5, #32
 8000c94:	d0f7      	beq.n	8000c86 <_vsnprintf.constprop.0+0x56a>
    if (negative) {
 8000c96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d004      	beq.n	8000ca6 <_vsnprintf.constprop.0+0x58a>
      buf[len++] = '-';
 8000c9c:	222d      	movs	r2, #45	; 0x2d
 8000c9e:	ab14      	add	r3, sp, #80	; 0x50
      buf[len++] = ' ';
 8000ca0:	555a      	strb	r2, [r3, r5]
 8000ca2:	3501      	adds	r5, #1
 8000ca4:	e7ef      	b.n	8000c86 <_vsnprintf.constprop.0+0x56a>
    else if (flags & FLAGS_PLUS) {
 8000ca6:	0773      	lsls	r3, r6, #29
 8000ca8:	d502      	bpl.n	8000cb0 <_vsnprintf.constprop.0+0x594>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8000caa:	222b      	movs	r2, #43	; 0x2b
 8000cac:	ab14      	add	r3, sp, #80	; 0x50
 8000cae:	e7f7      	b.n	8000ca0 <_vsnprintf.constprop.0+0x584>
    else if (flags & FLAGS_SPACE) {
 8000cb0:	0733      	lsls	r3, r6, #28
 8000cb2:	d5e8      	bpl.n	8000c86 <_vsnprintf.constprop.0+0x56a>
      buf[len++] = ' ';
 8000cb4:	2220      	movs	r2, #32
 8000cb6:	ab14      	add	r3, sp, #80	; 0x50
 8000cb8:	e7f2      	b.n	8000ca0 <_vsnprintf.constprop.0+0x584>
        if (!(flags & FLAGS_LEFT)) {
 8000cba:	2302      	movs	r3, #2
 8000cbc:	0032      	movs	r2, r6
 8000cbe:	401a      	ands	r2, r3
        unsigned int l = 1U;
 8000cc0:	2401      	movs	r4, #1
        if (!(flags & FLAGS_LEFT)) {
 8000cc2:	9209      	str	r2, [sp, #36]	; 0x24
 8000cc4:	421e      	tst	r6, r3
 8000cc6:	d119      	bne.n	8000cfc <_vsnprintf.constprop.0+0x5e0>
            out(' ', buffer, idx++, maxlen);
 8000cc8:	2501      	movs	r5, #1
 8000cca:	003a      	movs	r2, r7
 8000ccc:	426d      	negs	r5, r5
 8000cce:	e005      	b.n	8000cdc <_vsnprintf.constprop.0+0x5c0>
 8000cd0:	002b      	movs	r3, r5
 8000cd2:	2020      	movs	r0, #32
 8000cd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000cd6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8000cd8:	47b0      	blx	r6
 8000cda:	0022      	movs	r2, r4
          while (l++ < width) {
 8000cdc:	9906      	ldr	r1, [sp, #24]
 8000cde:	1c54      	adds	r4, r2, #1
 8000ce0:	1be3      	subs	r3, r4, r7
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d3f4      	bcc.n	8000cd0 <_vsnprintf.constprop.0+0x5b4>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d001      	beq.n	8000cf0 <_vsnprintf.constprop.0+0x5d4>
 8000cec:	000b      	movs	r3, r1
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	18ff      	adds	r7, r7, r3
 8000cf2:	9b06      	ldr	r3, [sp, #24]
 8000cf4:	2402      	movs	r4, #2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d000      	beq.n	8000cfc <_vsnprintf.constprop.0+0x5e0>
 8000cfa:	1c5c      	adds	r4, r3, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8000cfc:	9b08      	ldr	r3, [sp, #32]
 8000cfe:	003a      	movs	r2, r7
 8000d00:	cb01      	ldmia	r3!, {r0}
 8000d02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000d04:	9308      	str	r3, [sp, #32]
 8000d06:	2301      	movs	r3, #1
 8000d08:	1c7e      	adds	r6, r7, #1
 8000d0a:	425b      	negs	r3, r3
 8000d0c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8000d0e:	b2c0      	uxtb	r0, r0
 8000d10:	47b8      	blx	r7
        if (flags & FLAGS_LEFT) {
 8000d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d02a      	beq.n	8000d6e <_vsnprintf.constprop.0+0x652>
 8000d18:	0027      	movs	r7, r4
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8000d1a:	0032      	movs	r2, r6
 8000d1c:	e01e      	b.n	8000d5c <_vsnprintf.constprop.0+0x640>
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	0800370c 	.word	0x0800370c
 8000d24:	ffefffff 	.word	0xffefffff
 8000d28:	08003710 	.word	0x08003710
 8000d2c:	7fefffff 	.word	0x7fefffff
 8000d30:	08003703 	.word	0x08003703
 8000d34:	08003708 	.word	0x08003708
 8000d38:	41cdcd65 	.word	0x41cdcd65
 8000d3c:	c1cdcd65 	.word	0xc1cdcd65
 8000d40:	08003718 	.word	0x08003718
 8000d44:	3fe00000 	.word	0x3fe00000
            out(' ', buffer, idx++, maxlen);
 8000d48:	1c53      	adds	r3, r2, #1
 8000d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	2020      	movs	r0, #32
 8000d50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000d52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8000d54:	425b      	negs	r3, r3
 8000d56:	47a8      	blx	r5
 8000d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d5a:	3701      	adds	r7, #1
          while (l++ < width) {
 8000d5c:	9b06      	ldr	r3, [sp, #24]
 8000d5e:	429f      	cmp	r7, r3
 8000d60:	d3f2      	bcc.n	8000d48 <_vsnprintf.constprop.0+0x62c>
 8000d62:	9a06      	ldr	r2, [sp, #24]
 8000d64:	2300      	movs	r3, #0
 8000d66:	42a2      	cmp	r2, r4
 8000d68:	d300      	bcc.n	8000d6c <_vsnprintf.constprop.0+0x650>
 8000d6a:	1b13      	subs	r3, r2, r4
 8000d6c:	18f6      	adds	r6, r6, r3
        break;
 8000d6e:	0037      	movs	r7, r6
 8000d70:	e4db      	b.n	800072a <_vsnprintf.constprop.0+0xe>
        const char* p = va_arg(va, char*);
 8000d72:	9b08      	ldr	r3, [sp, #32]
 8000d74:	cb04      	ldmia	r3!, {r2}
 8000d76:	930c      	str	r3, [sp, #48]	; 0x30
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8000d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
        const char* p = va_arg(va, char*);
 8000d7a:	9208      	str	r2, [sp, #32]
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d101      	bne.n	8000d84 <_vsnprintf.constprop.0+0x668>
 8000d80:	2301      	movs	r3, #1
 8000d82:	425b      	negs	r3, r3
 8000d84:	9a08      	ldr	r2, [sp, #32]
 8000d86:	0014      	movs	r4, r2
 8000d88:	18d3      	adds	r3, r2, r3
 8000d8a:	e000      	b.n	8000d8e <_vsnprintf.constprop.0+0x672>
  for (s = str; *s && maxsize--; ++s);
 8000d8c:	3401      	adds	r4, #1
 8000d8e:	7822      	ldrb	r2, [r4, #0]
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	d001      	beq.n	8000d98 <_vsnprintf.constprop.0+0x67c>
 8000d94:	42a3      	cmp	r3, r4
 8000d96:	d1f9      	bne.n	8000d8c <_vsnprintf.constprop.0+0x670>
  return (unsigned int)(s - str);
 8000d98:	9b08      	ldr	r3, [sp, #32]
        if (flags & FLAGS_PRECISION) {
 8000d9a:	0032      	movs	r2, r6
  return (unsigned int)(s - str);
 8000d9c:	1ae4      	subs	r4, r4, r3
        if (flags & FLAGS_PRECISION) {
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	401a      	ands	r2, r3
 8000da4:	920e      	str	r2, [sp, #56]	; 0x38
 8000da6:	421e      	tst	r6, r3
 8000da8:	d003      	beq.n	8000db2 <_vsnprintf.constprop.0+0x696>
          l = (l < precision ? l : precision);
 8000daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000dac:	429c      	cmp	r4, r3
 8000dae:	d900      	bls.n	8000db2 <_vsnprintf.constprop.0+0x696>
 8000db0:	001c      	movs	r4, r3
        if (!(flags & FLAGS_LEFT)) {
 8000db2:	2302      	movs	r3, #2
 8000db4:	0032      	movs	r2, r6
 8000db6:	401a      	ands	r2, r3
 8000db8:	920f      	str	r2, [sp, #60]	; 0x3c
 8000dba:	421e      	tst	r6, r3
 8000dbc:	d115      	bne.n	8000dea <_vsnprintf.constprop.0+0x6ce>
 8000dbe:	003a      	movs	r2, r7
 8000dc0:	e007      	b.n	8000dd2 <_vsnprintf.constprop.0+0x6b6>
            out(' ', buffer, idx++, maxlen);
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	1c56      	adds	r6, r2, #1
 8000dc6:	2020      	movs	r0, #32
 8000dc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000dca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8000dcc:	425b      	negs	r3, r3
 8000dce:	47a8      	blx	r5
 8000dd0:	0032      	movs	r2, r6
          while (l++ < width) {
 8000dd2:	1be3      	subs	r3, r4, r7
 8000dd4:	9906      	ldr	r1, [sp, #24]
 8000dd6:	18d3      	adds	r3, r2, r3
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d8f2      	bhi.n	8000dc2 <_vsnprintf.constprop.0+0x6a6>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	42a1      	cmp	r1, r4
 8000de0:	d300      	bcc.n	8000de4 <_vsnprintf.constprop.0+0x6c8>
 8000de2:	1b0b      	subs	r3, r1, r4
 8000de4:	3401      	adds	r4, #1
 8000de6:	18ff      	adds	r7, r7, r3
 8000de8:	18e4      	adds	r4, r4, r3
          out(*(p++), buffer, idx++, maxlen);
 8000dea:	2601      	movs	r6, #1
 8000dec:	003d      	movs	r5, r7
 8000dee:	4276      	negs	r6, r6
 8000df0:	e008      	b.n	8000e04 <_vsnprintf.constprop.0+0x6e8>
 8000df2:	9309      	str	r3, [sp, #36]	; 0x24
 8000df4:	1c6b      	adds	r3, r5, #1
 8000df6:	002a      	movs	r2, r5
 8000df8:	9310      	str	r3, [sp, #64]	; 0x40
 8000dfa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8000dfc:	0033      	movs	r3, r6
 8000dfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000e00:	47a8      	blx	r5
 8000e02:	9d10      	ldr	r5, [sp, #64]	; 0x40
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8000e04:	9b08      	ldr	r3, [sp, #32]
 8000e06:	1bdb      	subs	r3, r3, r7
 8000e08:	5d58      	ldrb	r0, [r3, r5]
 8000e0a:	2800      	cmp	r0, #0
 8000e0c:	d007      	beq.n	8000e1e <_vsnprintf.constprop.0+0x702>
 8000e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0ef      	beq.n	8000df4 <_vsnprintf.constprop.0+0x6d8>
 8000e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	2a00      	cmp	r2, #0
 8000e1c:	d1e9      	bne.n	8000df2 <_vsnprintf.constprop.0+0x6d6>
        if (flags & FLAGS_LEFT) {
 8000e1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d013      	beq.n	8000e4c <_vsnprintf.constprop.0+0x730>
 8000e24:	002a      	movs	r2, r5
 8000e26:	e007      	b.n	8000e38 <_vsnprintf.constprop.0+0x71c>
            out(' ', buffer, idx++, maxlen);
 8000e28:	2301      	movs	r3, #1
 8000e2a:	1c57      	adds	r7, r2, #1
 8000e2c:	2020      	movs	r0, #32
 8000e2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000e30:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8000e32:	425b      	negs	r3, r3
 8000e34:	47b0      	blx	r6
 8000e36:	003a      	movs	r2, r7
          while (l++ < width) {
 8000e38:	1b63      	subs	r3, r4, r5
 8000e3a:	9906      	ldr	r1, [sp, #24]
 8000e3c:	18d3      	adds	r3, r2, r3
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d3f2      	bcc.n	8000e28 <_vsnprintf.constprop.0+0x70c>
 8000e42:	2300      	movs	r3, #0
 8000e44:	42a1      	cmp	r1, r4
 8000e46:	d300      	bcc.n	8000e4a <_vsnprintf.constprop.0+0x72e>
 8000e48:	1b0b      	subs	r3, r1, r4
 8000e4a:	18ed      	adds	r5, r5, r3
        const char* p = va_arg(va, char*);
 8000e4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000e4e:	9308      	str	r3, [sp, #32]
        out(*format, buffer, idx++, maxlen);
 8000e50:	002f      	movs	r7, r5
        break;
 8000e52:	e46a      	b.n	800072a <_vsnprintf.constprop.0+0xe>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8000e54:	2321      	movs	r3, #33	; 0x21
 8000e56:	4333      	orrs	r3, r6
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8000e58:	9304      	str	r3, [sp, #16]
 8000e5a:	2308      	movs	r3, #8
 8000e5c:	9303      	str	r3, [sp, #12]
 8000e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e60:	9d08      	ldr	r5, [sp, #32]
 8000e62:	9302      	str	r3, [sp, #8]
 8000e64:	2310      	movs	r3, #16
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	2300      	movs	r3, #0
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	003a      	movs	r2, r7
 8000e6e:	cd08      	ldmia	r5!, {r3}
 8000e70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000e72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8000e74:	f7ff fba5 	bl	80005c2 <_ntoa_long.constprop.0>
 8000e78:	9508      	str	r5, [sp, #32]
 8000e7a:	0007      	movs	r7, r0
        break;
 8000e7c:	e455      	b.n	800072a <_vsnprintf.constprop.0+0xe>
          flags |= FLAGS_UPPERCASE;
 8000e7e:	2320      	movs	r3, #32
 8000e80:	431e      	orrs	r6, r3
          base = 16U;
 8000e82:	2110      	movs	r1, #16
 8000e84:	e560      	b.n	8000948 <_vsnprintf.constprop.0+0x22c>
          base =  8U;
 8000e86:	2108      	movs	r1, #8
 8000e88:	e55e      	b.n	8000948 <_vsnprintf.constprop.0+0x22c>
          base =  2U;
 8000e8a:	2102      	movs	r1, #2
        if ((*format != 'i') && (*format != 'd')) {
 8000e8c:	e55c      	b.n	8000948 <_vsnprintf.constprop.0+0x22c>
 8000e8e:	46c0      	nop			; (mov r8, r8)

08000e90 <vprintf_spf>:

///////////////////////////////////////////////////////////////////////////////

int  vprintf_spf(const char* format, va_list va)
{
 8000e90:	b507      	push	{r0, r1, r2, lr}
 8000e92:	000b      	movs	r3, r1
 8000e94:	0002      	movs	r2, r0
  char buffer[1];
  return _vsnprintf(_out_char_spf, buffer, (size_t)-1, format, va);
 8000e96:	a901      	add	r1, sp, #4
 8000e98:	4801      	ldr	r0, [pc, #4]	; (8000ea0 <vprintf_spf+0x10>)
 8000e9a:	f7ff fc3f 	bl	800071c <_vsnprintf.constprop.0>
}
 8000e9e:	bd0e      	pop	{r1, r2, r3, pc}
 8000ea0:	08000521 	.word	0x08000521

08000ea4 <spi_read_single>:
 * 
 * @param reg Register to read
 * @retval Value read from register
 */
static uint8_t spi_read_single(uint8_t reg)
{
 8000ea4:	b570      	push	{r4, r5, r6, lr}
  spi_chip_select();
 8000ea6:	25a0      	movs	r5, #160	; 0xa0
{
 8000ea8:	0004      	movs	r4, r0
  spi_chip_select();
 8000eaa:	05ed      	lsls	r5, r5, #23
 8000eac:	0028      	movs	r0, r5
 8000eae:	2110      	movs	r1, #16
 8000eb0:	f000 fed2 	bl	8001c58 <gpio_clear>
  timers_delay_microseconds(1);
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f000 fcdf 	bl	8001878 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, reg);                   
 8000eba:	b2a1      	uxth	r1, r4
 8000ebc:	4c08      	ldr	r4, [pc, #32]	; (8000ee0 <spi_read_single+0x3c>)
 8000ebe:	0020      	movs	r0, r4
 8000ec0:	f001 f918 	bl	80020f4 <spi_xfer>
  uint8_t in =  spi_xfer(RFM_SPI, 0x00);                   
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	0020      	movs	r0, r4
 8000ec8:	f001 f914 	bl	80020f4 <spi_xfer>
 8000ecc:	0004      	movs	r4, r0
    
  spi_chip_deselect(); 
 8000ece:	2110      	movs	r1, #16
 8000ed0:	0028      	movs	r0, r5
 8000ed2:	f000 febf 	bl	8001c54 <gpio_set>
  timers_delay_microseconds(1);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f000 fcce 	bl	8001878 <timers_delay_microseconds>

  return in;
 8000edc:	b2e0      	uxtb	r0, r4
}
 8000ede:	bd70      	pop	{r4, r5, r6, pc}
 8000ee0:	40013000 	.word	0x40013000

08000ee4 <spi_write_single>:
  spi_chip_deselect();     
  timers_delay_microseconds(1);
}

static void spi_write_single(uint8_t reg, uint8_t data)
{
 8000ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee6:	0004      	movs	r4, r0
  // Set MSB for write operation
  uint8_t cmd = 0x80 | reg;

  spi_chip_select();
 8000ee8:	20a0      	movs	r0, #160	; 0xa0
{
 8000eea:	000e      	movs	r6, r1
  spi_chip_select();
 8000eec:	05c0      	lsls	r0, r0, #23
 8000eee:	2110      	movs	r1, #16
 8000ef0:	f000 feb2 	bl	8001c58 <gpio_clear>
  timers_delay_microseconds(1);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f000 fcbf 	bl	8001878 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, cmd);                 
 8000efa:	2180      	movs	r1, #128	; 0x80
 8000efc:	4815      	ldr	r0, [pc, #84]	; (8000f54 <spi_write_single+0x70>)
 8000efe:	4321      	orrs	r1, r4
 8000f00:	f001 f8f8 	bl	80020f4 <spi_xfer>
  spi_xfer(RFM_SPI, data);             
 8000f04:	b2b1      	uxth	r1, r6
 8000f06:	4813      	ldr	r0, [pc, #76]	; (8000f54 <spi_write_single+0x70>)
 8000f08:	f001 f8f4 	bl	80020f4 <spi_xfer>

  spi_chip_deselect(); 
 8000f0c:	20a0      	movs	r0, #160	; 0xa0
 8000f0e:	2110      	movs	r1, #16
 8000f10:	05c0      	lsls	r0, r0, #23
 8000f12:	f000 fe9f 	bl	8001c54 <gpio_set>
  timers_delay_microseconds(1);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f000 fcae 	bl	8001878 <timers_delay_microseconds>

  uint8_t curr_data = spi_read_single(reg);
 8000f1c:	0020      	movs	r0, r4
 8000f1e:	f7ff ffc1 	bl	8000ea4 <spi_read_single>
 8000f22:	0005      	movs	r5, r0

  // spf_serial_printf("%02x : %02x\n", reg, data);

  if(reg == RFM_REG_12_IRQ_FLAGS)    
 8000f24:	2c12      	cmp	r4, #18
 8000f26:	d00a      	beq.n	8000f3e <spi_write_single+0x5a>
    return;

  TIMEOUT(10000, "RFM SPI Write", ((reg << 16) | data), (curr_data == data), ;, timers_delay_microseconds(100); curr_data = spi_read_single(reg););
 8000f28:	f000 fcf0 	bl	800190c <timeout_init>
 8000f2c:	0427      	lsls	r7, r4, #16
 8000f2e:	4337      	orrs	r7, r6
 8000f30:	003a      	movs	r2, r7
 8000f32:	4909      	ldr	r1, [pc, #36]	; (8000f58 <spi_write_single+0x74>)
 8000f34:	4809      	ldr	r0, [pc, #36]	; (8000f5c <spi_write_single+0x78>)
 8000f36:	f000 fcf7 	bl	8001928 <timeout>
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d000      	beq.n	8000f40 <spi_write_single+0x5c>

  // spf_serial_printf("%02x : %02x : %02x\n", reg, data, curr_data);
}
 8000f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TIMEOUT(10000, "RFM SPI Write", ((reg << 16) | data), (curr_data == data), ;, timers_delay_microseconds(100); curr_data = spi_read_single(reg););
 8000f40:	42b5      	cmp	r5, r6
 8000f42:	d0fc      	beq.n	8000f3e <spi_write_single+0x5a>
 8000f44:	2064      	movs	r0, #100	; 0x64
 8000f46:	f000 fc97 	bl	8001878 <timers_delay_microseconds>
 8000f4a:	0020      	movs	r0, r4
 8000f4c:	f7ff ffaa 	bl	8000ea4 <spi_read_single>
 8000f50:	0005      	movs	r5, r0
 8000f52:	e7ed      	b.n	8000f30 <spi_write_single+0x4c>
 8000f54:	40013000 	.word	0x40013000
 8000f58:	08003768 	.word	0x08003768
 8000f5c:	00002710 	.word	0x00002710

08000f60 <set_sleep_mode>:
{
  spi_write_single(RFM_REG_01_OP_MODE, (spi_read_single(RFM_REG_01_OP_MODE) & ~RFM_MODE) | RFM_MODE_STDBY);
}

static inline void set_sleep_mode(void)
{
 8000f60:	b510      	push	{r4, lr}
  spi_write_single(RFM_REG_01_OP_MODE, (spi_read_single(RFM_REG_01_OP_MODE) & ~RFM_MODE) |  RFM_MODE_SLEEP);
 8000f62:	2001      	movs	r0, #1
 8000f64:	f7ff ff9e 	bl	8000ea4 <spi_read_single>
 8000f68:	21f8      	movs	r1, #248	; 0xf8
 8000f6a:	4001      	ands	r1, r0
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff ffb9 	bl	8000ee4 <spi_write_single>
}
 8000f72:	bd10      	pop	{r4, pc}

08000f74 <set_standby_mode>:
{
 8000f74:	b510      	push	{r4, lr}
  spi_write_single(RFM_REG_01_OP_MODE, (spi_read_single(RFM_REG_01_OP_MODE) & ~RFM_MODE) | RFM_MODE_STDBY);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff ff94 	bl	8000ea4 <spi_read_single>
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	0001      	movs	r1, r0
 8000f80:	2001      	movs	r0, #1
 8000f82:	4399      	bics	r1, r3
 8000f84:	4301      	orrs	r1, r0
 8000f86:	b2c9      	uxtb	r1, r1
 8000f88:	f7ff ffac 	bl	8000ee4 <spi_write_single>
}
 8000f8c:	bd10      	pop	{r4, pc}

08000f8e <clear_buffer>:
{
 8000f8e:	b510      	push	{r4, lr}
    spi_write_single(RFM_REG_0D_FIFO_ADDR_PTR, 0);
 8000f90:	2100      	movs	r1, #0
 8000f92:	200d      	movs	r0, #13
 8000f94:	f7ff ffa6 	bl	8000ee4 <spi_write_single>
    spi_write_single(RFM_REG_0E_FIFO_TX_BASE_ADDR, 0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	200e      	movs	r0, #14
 8000f9c:	f7ff ffa2 	bl	8000ee4 <spi_write_single>
    spi_write_single(RFM_REG_0F_FIFO_RX_BASE_ADDR, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f7ff ff9e 	bl	8000ee4 <spi_write_single>
}
 8000fa8:	bd10      	pop	{r4, pc}

08000faa <set_rx_mode>:
{
 8000faa:	b510      	push	{r4, lr}
  spi_write_single(RFM_REG_01_OP_MODE, (spi_read_single(RFM_REG_01_OP_MODE) & ~RFM_MODE) | RFM_MODE_RXCONTINUOUS);
 8000fac:	2001      	movs	r0, #1
 8000fae:	f7ff ff79 	bl	8000ea4 <spi_read_single>
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	2105      	movs	r1, #5
 8000fb6:	4398      	bics	r0, r3
 8000fb8:	4301      	orrs	r1, r0
 8000fba:	b2c9      	uxtb	r1, r1
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f7ff ff91 	bl	8000ee4 <spi_write_single>
}
 8000fc2:	bd10      	pop	{r4, pc}

08000fc4 <set_tx_mode>:
{ 
 8000fc4:	b510      	push	{r4, lr}
  spi_write_single(RFM_REG_01_OP_MODE, (spi_read_single(RFM_REG_01_OP_MODE) & ~RFM_MODE) | RFM_MODE_TX);
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f7ff ff6c 	bl	8000ea4 <spi_read_single>
 8000fcc:	2307      	movs	r3, #7
 8000fce:	2103      	movs	r1, #3
 8000fd0:	4398      	bics	r0, r3
 8000fd2:	4301      	orrs	r1, r0
 8000fd4:	b2c9      	uxtb	r1, r1
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f7ff ff84 	bl	8000ee4 <spi_write_single>
}
 8000fdc:	bd10      	pop	{r4, pc}
	...

08000fe0 <spi_write_burst.constprop.0>:
static void spi_write_burst(uint8_t reg, uint8_t *buf, uint8_t len)
 8000fe0:	b570      	push	{r4, r5, r6, lr}
 8000fe2:	0004      	movs	r4, r0
  spi_chip_select();
 8000fe4:	20a0      	movs	r0, #160	; 0xa0
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	05c0      	lsls	r0, r0, #23
 8000fea:	f000 fe35 	bl	8001c58 <gpio_clear>
  timers_delay_microseconds(1);
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f000 fc42 	bl	8001878 <timers_delay_microseconds>
  spi_xfer(RFM_SPI, cmd);  
 8000ff4:	0025      	movs	r5, r4
 8000ff6:	2180      	movs	r1, #128	; 0x80
 8000ff8:	4809      	ldr	r0, [pc, #36]	; (8001020 <spi_write_burst.constprop.0+0x40>)
 8000ffa:	f001 f87b 	bl	80020f4 <spi_xfer>
  for(int i = 0; i < len; i++)
 8000ffe:	3510      	adds	r5, #16
    spi_xfer(RFM_SPI, buf[i]); 
 8001000:	7821      	ldrb	r1, [r4, #0]
 8001002:	4807      	ldr	r0, [pc, #28]	; (8001020 <spi_write_burst.constprop.0+0x40>)
 8001004:	3401      	adds	r4, #1
 8001006:	f001 f875 	bl	80020f4 <spi_xfer>
  for(int i = 0; i < len; i++)
 800100a:	42ac      	cmp	r4, r5
 800100c:	d1f8      	bne.n	8001000 <spi_write_burst.constprop.0+0x20>
  spi_chip_deselect();     
 800100e:	20a0      	movs	r0, #160	; 0xa0
 8001010:	2110      	movs	r1, #16
 8001012:	05c0      	lsls	r0, r0, #23
 8001014:	f000 fe1e 	bl	8001c54 <gpio_set>
  timers_delay_microseconds(1);
 8001018:	2001      	movs	r0, #1
 800101a:	f000 fc2d 	bl	8001878 <timers_delay_microseconds>
}
 800101e:	bd70      	pop	{r4, r5, r6, pc}
 8001020:	40013000 	.word	0x40013000

08001024 <mask_irq.constprop.0>:
static inline void mask_irq(uint8_t irq)
 8001024:	b510      	push	{r4, lr}
  spi_write_single(RFM_REG_11_IRQ_FLAGS_MASK, spi_read_single(RFM_REG_11_IRQ_FLAGS_MASK) | irq); 
 8001026:	2011      	movs	r0, #17
 8001028:	f7ff ff3c 	bl	8000ea4 <spi_read_single>
 800102c:	21ff      	movs	r1, #255	; 0xff
 800102e:	2011      	movs	r0, #17
 8001030:	f7ff ff58 	bl	8000ee4 <spi_write_single>
}
 8001034:	bd10      	pop	{r4, pc}
	...

08001038 <rfm_reset>:
{
 8001038:	b530      	push	{r4, r5, lr}
  gpio_clear(RFM_RESET_PORT, RFM_RESET);
 800103a:	2101      	movs	r1, #1
{
 800103c:	b08b      	sub	sp, #44	; 0x2c
  gpio_clear(RFM_RESET_PORT, RFM_RESET);
 800103e:	4815      	ldr	r0, [pc, #84]	; (8001094 <rfm_reset+0x5c>)
 8001040:	f000 fe0a 	bl	8001c58 <gpio_clear>
  timers_delay_milliseconds(1);
 8001044:	2001      	movs	r0, #1
 8001046:	f000 fc4b 	bl	80018e0 <timers_delay_milliseconds>
  gpio_set(RFM_RESET_PORT, RFM_RESET);
 800104a:	2101      	movs	r1, #1
 800104c:	4811      	ldr	r0, [pc, #68]	; (8001094 <rfm_reset+0x5c>)
 800104e:	f000 fe01 	bl	8001c54 <gpio_set>
  timers_delay_milliseconds(1);
 8001052:	2001      	movs	r0, #1
 8001054:	f000 fc44 	bl	80018e0 <timers_delay_milliseconds>
  timers_delay_milliseconds(10);
 8001058:	200a      	movs	r0, #10
 800105a:	f000 fc41 	bl	80018e0 <timers_delay_milliseconds>
  uint8_t registers[] = { 0x01, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x014, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x4b, 0x4d};
 800105e:	2225      	movs	r2, #37	; 0x25
 8001060:	4668      	mov	r0, sp
 8001062:	490d      	ldr	r1, [pc, #52]	; (8001098 <rfm_reset+0x60>)
 8001064:	f001 f968 	bl	8002338 <memcpy>
 8001068:	2400      	movs	r4, #0
	  spf_serial_printf("%02x : %02x\n", registers[i], spi_read_single(registers[i]));
 800106a:	466b      	mov	r3, sp
 800106c:	5d1d      	ldrb	r5, [r3, r4]
 800106e:	3401      	adds	r4, #1
 8001070:	0028      	movs	r0, r5
 8001072:	f7ff ff17 	bl	8000ea4 <spi_read_single>
 8001076:	0029      	movs	r1, r5
 8001078:	0002      	movs	r2, r0
 800107a:	4808      	ldr	r0, [pc, #32]	; (800109c <rfm_reset+0x64>)
 800107c:	f000 fb2a 	bl	80016d4 <spf_serial_printf>
  for (i = 0; i < sizeof(registers); i++)
 8001080:	2c25      	cmp	r4, #37	; 0x25
 8001082:	d1f2      	bne.n	800106a <rfm_reset+0x32>
  set_sleep_mode();
 8001084:	f7ff ff6c 	bl	8000f60 <set_sleep_mode>
  spf_serial_printf("RFM Reset Done\n");
 8001088:	4805      	ldr	r0, [pc, #20]	; (80010a0 <rfm_reset+0x68>)
 800108a:	f000 fb23 	bl	80016d4 <spf_serial_printf>
}
 800108e:	b00b      	add	sp, #44	; 0x2c
 8001090:	bd30      	pop	{r4, r5, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	50000400 	.word	0x50000400
 8001098:	08003793 	.word	0x08003793
 800109c:	08003776 	.word	0x08003776
 80010a0:	08003783 	.word	0x08003783

080010a4 <rfm_init>:
{ 
 80010a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  rcc_periph_clock_enable(RCC_GPIOA);
 80010a6:	20b0      	movs	r0, #176	; 0xb0
 80010a8:	00c0      	lsls	r0, r0, #3
 80010aa:	f000 ffd5 	bl	8002058 <rcc_periph_clock_enable>
  rcc_periph_clock_enable(RCC_GPIOB);
 80010ae:	485e      	ldr	r0, [pc, #376]	; (8001228 <rfm_init+0x184>)
 80010b0:	f000 ffd2 	bl	8002058 <rcc_periph_clock_enable>
  rcc_periph_clock_enable(RCC_SYSCFG);
 80010b4:	20d0      	movs	r0, #208	; 0xd0
  gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_AF,     GPIO_PUPD_NONE,   RFM_SPI_MISO);
 80010b6:	25a0      	movs	r5, #160	; 0xa0
  spi_init_master(RFM_SPI, SPI_CR1_BAUDRATE_FPCLK_DIV_8,
 80010b8:	2400      	movs	r4, #0
  rcc_periph_clock_enable(RCC_SYSCFG);
 80010ba:	00c0      	lsls	r0, r0, #3
 80010bc:	f000 ffcc 	bl	8002058 <rcc_periph_clock_enable>
	rcc_osc_on(RCC_MSI);
 80010c0:	2004      	movs	r0, #4
 80010c2:	f000 ff07 	bl	8001ed4 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_MSI);
 80010c6:	2004      	movs	r0, #4
 80010c8:	f000 ff5a 	bl	8001f80 <rcc_wait_for_osc_ready>
	rcc_set_msi_range(5);
 80010cc:	2005      	movs	r0, #5
 80010ce:	f000 ff81 	bl	8001fd4 <rcc_set_msi_range>
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);				// AHB -> 2.097Mhz
 80010d2:	2000      	movs	r0, #0
 80010d4:	f000 ff74 	bl	8001fc0 <rcc_set_hpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);			// APB1 -> 2.097Mhz
 80010d8:	2000      	movs	r0, #0
 80010da:	f000 ff59 	bl	8001f90 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);			// APB2 -> 2.097Mhz
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 ff62 	bl	8001fa8 <rcc_set_ppre2>
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f000 fd5f 	bl	8001ba8 <flash_set_ws>
	rcc_ahb_frequency = 2097000;
 80010ea:	4b50      	ldr	r3, [pc, #320]	; (800122c <rfm_init+0x188>)
 80010ec:	4a50      	ldr	r2, [pc, #320]	; (8001230 <rfm_init+0x18c>)
  gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_AF,     GPIO_PUPD_NONE,   RFM_SPI_MISO);
 80010ee:	05ed      	lsls	r5, r5, #23
	rcc_ahb_frequency = 2097000;
 80010f0:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 2097000;
 80010f2:	4a50      	ldr	r2, [pc, #320]	; (8001234 <rfm_init+0x190>)
  gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_AF,     GPIO_PUPD_NONE,   RFM_SPI_MISO);
 80010f4:	0028      	movs	r0, r5
	rcc_apb1_frequency = 2097000;
 80010f6:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = 2097000;
 80010f8:	4a4f      	ldr	r2, [pc, #316]	; (8001238 <rfm_init+0x194>)
  gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_AF,     GPIO_PUPD_NONE,   RFM_SPI_MISO);
 80010fa:	2102      	movs	r1, #2
	rcc_apb2_frequency = 2097000;
 80010fc:	6013      	str	r3, [r2, #0]
  gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_AF,     GPIO_PUPD_NONE,   RFM_SPI_MISO);
 80010fe:	2340      	movs	r3, #64	; 0x40
 8001100:	2200      	movs	r2, #0
 8001102:	f000 fdaf 	bl	8001c64 <gpio_mode_setup>
  gpio_mode_setup(RFM_SPI_SCK_PORT,   GPIO_MODE_AF,     GPIO_PUPD_NONE,   RFM_SPI_SCK);
 8001106:	0028      	movs	r0, r5
 8001108:	2320      	movs	r3, #32
 800110a:	2200      	movs	r2, #0
 800110c:	2102      	movs	r1, #2
 800110e:	f000 fda9 	bl	8001c64 <gpio_mode_setup>
  gpio_mode_setup(RFM_SPI_MOSI_PORT,  GPIO_MODE_AF,     GPIO_PUPD_NONE,   RFM_SPI_MOSI);
 8001112:	0028      	movs	r0, r5
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	2200      	movs	r2, #0
 8001118:	2102      	movs	r1, #2
 800111a:	f000 fda3 	bl	8001c64 <gpio_mode_setup>
  gpio_mode_setup(RFM_SPI_NSS_PORT,   GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, RFM_SPI_NSS);
 800111e:	0028      	movs	r0, r5
 8001120:	2310      	movs	r3, #16
 8001122:	2200      	movs	r2, #0
 8001124:	2101      	movs	r1, #1
 8001126:	f000 fd9d 	bl	8001c64 <gpio_mode_setup>
  gpio_set_output_options(RFM_SPI_SCK_PORT,   GPIO_OTYPE_PP, GPIO_OSPEED_25MHZ, RFM_SPI_SCK);
 800112a:	0028      	movs	r0, r5
 800112c:	2320      	movs	r3, #32
 800112e:	2201      	movs	r2, #1
 8001130:	2100      	movs	r1, #0
 8001132:	f000 fdb7 	bl	8001ca4 <gpio_set_output_options>
  gpio_set_output_options(RFM_SPI_MOSI_PORT,  GPIO_OTYPE_PP, GPIO_OSPEED_25MHZ, RFM_SPI_MOSI);
 8001136:	0028      	movs	r0, r5
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	2201      	movs	r2, #1
 800113c:	2100      	movs	r1, #0
 800113e:	f000 fdb1 	bl	8001ca4 <gpio_set_output_options>
  gpio_set_output_options(RFM_SPI_NSS_PORT,   GPIO_OTYPE_PP, GPIO_OSPEED_25MHZ, RFM_SPI_NSS);
 8001142:	2310      	movs	r3, #16
 8001144:	0028      	movs	r0, r5
 8001146:	2201      	movs	r2, #1
 8001148:	2100      	movs	r1, #0
 800114a:	f000 fdab 	bl	8001ca4 <gpio_set_output_options>
  gpio_set(RFM_SPI_NSS_PORT, RFM_SPI_NSS);
 800114e:	0028      	movs	r0, r5
 8001150:	2110      	movs	r1, #16
 8001152:	f000 fd7f 	bl	8001c54 <gpio_set>
  gpio_set_af(RFM_SPI_MISO_PORT,  RFM_SPI_AF, RFM_SPI_MISO);
 8001156:	0028      	movs	r0, r5
 8001158:	2240      	movs	r2, #64	; 0x40
 800115a:	2100      	movs	r1, #0
 800115c:	f000 fdc0 	bl	8001ce0 <gpio_set_af>
  gpio_set_af(RFM_SPI_SCK_PORT,   RFM_SPI_AF, RFM_SPI_SCK);
 8001160:	0028      	movs	r0, r5
 8001162:	2220      	movs	r2, #32
 8001164:	2100      	movs	r1, #0
 8001166:	f000 fdbb 	bl	8001ce0 <gpio_set_af>
  gpio_set_af(RFM_SPI_MOSI_PORT,  RFM_SPI_AF, RFM_SPI_MOSI);
 800116a:	2280      	movs	r2, #128	; 0x80
 800116c:	2100      	movs	r1, #0
 800116e:	0028      	movs	r0, r5
 8001170:	f000 fdb6 	bl	8001ce0 <gpio_set_af>
  spi_disable(RFM_SPI);
 8001174:	4e31      	ldr	r6, [pc, #196]	; (800123c <rfm_init+0x198>)
  rcc_periph_clock_enable(RFM_SPI_RCC);
 8001176:	4832      	ldr	r0, [pc, #200]	; (8001240 <rfm_init+0x19c>)
 8001178:	f000 ff6e 	bl	8002058 <rcc_periph_clock_enable>
  rcc_periph_reset_pulse(RFM_SPI_RST); 
 800117c:	4831      	ldr	r0, [pc, #196]	; (8001244 <rfm_init+0x1a0>)
 800117e:	f000 ff87 	bl	8002090 <rcc_periph_reset_pulse>
  spi_disable(RFM_SPI);
 8001182:	0030      	movs	r0, r6
 8001184:	f000 ffb1 	bl	80020ea <spi_disable>
  spi_init_master(RFM_SPI, SPI_CR1_BAUDRATE_FPCLK_DIV_8,
 8001188:	0023      	movs	r3, r4
 800118a:	0022      	movs	r2, r4
 800118c:	2110      	movs	r1, #16
 800118e:	0030      	movs	r0, r6
 8001190:	9401      	str	r4, [sp, #4]
 8001192:	9400      	str	r4, [sp, #0]
 8001194:	f000 ffb6 	bl	8002104 <spi_init_master>
  spi_enable(RFM_SPI);
 8001198:	0030      	movs	r0, r6
 800119a:	f000 ffa1 	bl	80020e0 <spi_enable>
  gpio_mode_setup(RFM_IO_0_PORT, GPIO_MODE_INPUT, GPIO_PUPD_NONE, RFM_IO_0);
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	4e29      	ldr	r6, [pc, #164]	; (8001248 <rfm_init+0x1a4>)
 80011a2:	0022      	movs	r2, r4
 80011a4:	0030      	movs	r0, r6
 80011a6:	0021      	movs	r1, r4
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	f000 fd5b 	bl	8001c64 <gpio_mode_setup>
  gpio_mode_setup(RFM_IO_1_PORT, GPIO_MODE_INPUT, GPIO_PUPD_NONE, RFM_IO_1);
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	0030      	movs	r0, r6
 80011b2:	0022      	movs	r2, r4
 80011b4:	0021      	movs	r1, r4
 80011b6:	015b      	lsls	r3, r3, #5
 80011b8:	f000 fd54 	bl	8001c64 <gpio_mode_setup>
  gpio_mode_setup(RFM_IO_2_PORT, GPIO_MODE_INPUT, GPIO_PUPD_NONE, RFM_IO_2);
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	0030      	movs	r0, r6
 80011c0:	0022      	movs	r2, r4
 80011c2:	0021      	movs	r1, r4
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	f000 fd4d 	bl	8001c64 <gpio_mode_setup>
  gpio_mode_setup(RFM_IO_3_PORT, GPIO_MODE_INPUT, GPIO_PUPD_NONE, RFM_IO_3);
 80011ca:	0030      	movs	r0, r6
 80011cc:	0022      	movs	r2, r4
 80011ce:	0021      	movs	r1, r4
 80011d0:	2304      	movs	r3, #4
 80011d2:	f000 fd47 	bl	8001c64 <gpio_mode_setup>
  gpio_mode_setup(RFM_IO_4_PORT, GPIO_MODE_INPUT, GPIO_PUPD_NONE, RFM_IO_4);
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	0030      	movs	r0, r6
 80011da:	0022      	movs	r2, r4
 80011dc:	0021      	movs	r1, r4
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	f000 fd40 	bl	8001c64 <gpio_mode_setup>
  gpio_mode_setup(RFM_IO_5_PORT, GPIO_MODE_INPUT, GPIO_PUPD_NONE, RFM_IO_5);
 80011e4:	0030      	movs	r0, r6
 80011e6:	0022      	movs	r2, r4
 80011e8:	0021      	movs	r1, r4
 80011ea:	2302      	movs	r3, #2
 80011ec:	f000 fd3a 	bl	8001c64 <gpio_mode_setup>
  gpio_mode_setup(RFM_RESET_PORT,         GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, RFM_RESET);  
 80011f0:	2301      	movs	r3, #1
 80011f2:	0030      	movs	r0, r6
 80011f4:	0022      	movs	r2, r4
 80011f6:	0019      	movs	r1, r3
 80011f8:	f000 fd34 	bl	8001c64 <gpio_mode_setup>
  gpio_set_output_options(RFM_RESET_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, RFM_RESET);
 80011fc:	2301      	movs	r3, #1
 80011fe:	0022      	movs	r2, r4
 8001200:	0030      	movs	r0, r6
 8001202:	0021      	movs	r1, r4
 8001204:	f000 fd4e 	bl	8001ca4 <gpio_set_output_options>
  gpio_set(RFM_RESET_PORT, RFM_RESET);
 8001208:	0030      	movs	r0, r6
 800120a:	2101      	movs	r1, #1
 800120c:	f000 fd22 	bl	8001c54 <gpio_set>
  spi_chip_deselect();
 8001210:	0028      	movs	r0, r5
 8001212:	2110      	movs	r1, #16
 8001214:	f000 fd1e 	bl	8001c54 <gpio_set>
  set_sleep_mode();
 8001218:	f7ff fea2 	bl	8000f60 <set_sleep_mode>
  rfm_reset();
 800121c:	f7ff ff0c 	bl	8001038 <rfm_reset>
  spf_serial_printf("RFM Init Done\n");
 8001220:	480a      	ldr	r0, [pc, #40]	; (800124c <rfm_init+0x1a8>)
 8001222:	f000 fa57 	bl	80016d4 <spf_serial_printf>
}
 8001226:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8001228:	00000581 	.word	0x00000581
 800122c:	001fff68 	.word	0x001fff68
 8001230:	20000004 	.word	0x20000004
 8001234:	20000008 	.word	0x20000008
 8001238:	2000000c 	.word	0x2000000c
 800123c:	40013000 	.word	0x40013000
 8001240:	0000068c 	.word	0x0000068c
 8001244:	0000048c 	.word	0x0000048c
 8001248:	50000400 	.word	0x50000400
 800124c:	080037b9 	.word	0x080037b9

08001250 <rfm_end>:
{
 8001250:	b510      	push	{r4, lr}
  set_standby_mode();
 8001252:	f7ff fe8f 	bl	8000f74 <set_standby_mode>
  set_sleep_mode();
 8001256:	f7ff fe83 	bl	8000f60 <set_sleep_mode>
  spi_disable(RFM_SPI);
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <rfm_end+0x20>)
 800125c:	f000 ff45 	bl	80020ea <spi_disable>
  rcc_periph_clock_disable(RFM_SPI_RCC);
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <rfm_end+0x24>)
 8001262:	f000 ff07 	bl	8002074 <rcc_periph_clock_disable>
  spf_serial_printf("RFM End Done\n");
 8001266:	4804      	ldr	r0, [pc, #16]	; (8001278 <rfm_end+0x28>)
 8001268:	f000 fa34 	bl	80016d4 <spf_serial_printf>
}
 800126c:	bd10      	pop	{r4, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	40013000 	.word	0x40013000
 8001274:	0000068c 	.word	0x0000068c
 8001278:	080037c8 	.word	0x080037c8

0800127c <rfm_set_power>:
{
 800127c:	b570      	push	{r4, r5, r6, lr}
 800127e:	0005      	movs	r5, r0
  spi_write_single(RFM_REG_4D_PA_DAC, (spi_read_single(RFM_REG_4D_PA_DAC) & ~RFM_PA_DAC_MASK) | RFM_PA_DAC_DISABLE);
 8001280:	204d      	movs	r0, #77	; 0x4d
{
 8001282:	000c      	movs	r4, r1
  spi_write_single(RFM_REG_4D_PA_DAC, (spi_read_single(RFM_REG_4D_PA_DAC) & ~RFM_PA_DAC_MASK) | RFM_PA_DAC_DISABLE);
 8001284:	f7ff fe0e 	bl	8000ea4 <spi_read_single>
 8001288:	2307      	movs	r3, #7
 800128a:	2104      	movs	r1, #4
 800128c:	4398      	bics	r0, r3
 800128e:	4301      	orrs	r1, r0
 8001290:	b2c9      	uxtb	r1, r1
 8001292:	204d      	movs	r0, #77	; 0x4d
 8001294:	f7ff fe26 	bl	8000ee4 <spi_write_single>
	spi_write_single(RFM_REG_09_PA_CONFIG, RFM_PA_SELECT | RFM_MAX_POWER | (power-2));
 8001298:	1c2b      	adds	r3, r5, #0
 800129a:	2d14      	cmp	r5, #20
 800129c:	dd00      	ble.n	80012a0 <rfm_set_power+0x24>
 800129e:	2314      	movs	r3, #20
 80012a0:	2110      	movs	r1, #16
 80012a2:	3b02      	subs	r3, #2
 80012a4:	4249      	negs	r1, r1
 80012a6:	4319      	orrs	r1, r3
 80012a8:	b2c9      	uxtb	r1, r1
 80012aa:	2009      	movs	r0, #9
 80012ac:	f7ff fe1a 	bl	8000ee4 <spi_write_single>
  spi_write_single(RFM_REG_0A_PA_RAMP, (spi_read_single(RFM_REG_0A_PA_RAMP) & ~RFM_PA_RAMP_MASK) | ramp_time);
 80012b0:	200a      	movs	r0, #10
 80012b2:	f7ff fdf7 	bl	8000ea4 <spi_read_single>
 80012b6:	230f      	movs	r3, #15
 80012b8:	0001      	movs	r1, r0
 80012ba:	1c20      	adds	r0, r4, #0
 80012bc:	4399      	bics	r1, r3
 80012be:	429c      	cmp	r4, r3
 80012c0:	d900      	bls.n	80012c4 <rfm_set_power+0x48>
 80012c2:	1c18      	adds	r0, r3, #0
 80012c4:	4301      	orrs	r1, r0
 80012c6:	b2c9      	uxtb	r1, r1
 80012c8:	200a      	movs	r0, #10
 80012ca:	f7ff fe0b 	bl	8000ee4 <spi_write_single>
}
 80012ce:	bd70      	pop	{r4, r5, r6, pc}

080012d0 <rfm_config_for_lora>:
{
 80012d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012d2:	2700      	movs	r7, #0
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	ab08      	add	r3, sp, #32
 80012d8:	0015      	movs	r5, r2
 80012da:	57df      	ldrsb	r7, [r3, r7]
 80012dc:	0004      	movs	r4, r0
 80012de:	000e      	movs	r6, r1
  set_sleep_mode();
 80012e0:	f7ff fe3e 	bl	8000f60 <set_sleep_mode>
  spi_write_single(RFM_REG_01_OP_MODE, RFM_MODE_SLEEP | RFM_LONG_RANGE_MODE);
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	2001      	movs	r0, #1
 80012e8:	f7ff fdfc 	bl	8000ee4 <spi_write_single>
  set_standby_mode();
 80012ec:	f7ff fe42 	bl	8000f74 <set_standby_mode>
    spi_write_single(RFM_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 80012f0:	21d9      	movs	r1, #217	; 0xd9
 80012f2:	2006      	movs	r0, #6
 80012f4:	f7ff fdf6 	bl	8000ee4 <spi_write_single>
    spi_write_single(RFM_REG_07_FRF_MID, (frf >> 8) & 0xff);
 80012f8:	2100      	movs	r1, #0
 80012fa:	2007      	movs	r0, #7
 80012fc:	f7ff fdf2 	bl	8000ee4 <spi_write_single>
    spi_write_single(RFM_REG_08_FRF_LSB, frf & 0xff);
 8001300:	2100      	movs	r1, #0
 8001302:	2008      	movs	r0, #8
 8001304:	f7ff fdee 	bl	8000ee4 <spi_write_single>
  rfm_set_power(power, RFM_PA_RAMP_40US);
 8001308:	2109      	movs	r1, #9
 800130a:	0038      	movs	r0, r7
 800130c:	f7ff ffb6 	bl	800127c <rfm_set_power>
  spi_write_single(RFM_REG_1F_SYMB_TIMEOUT_LSB, 0x64);
 8001310:	2164      	movs	r1, #100	; 0x64
 8001312:	201f      	movs	r0, #31
 8001314:	f7ff fde6 	bl	8000ee4 <spi_write_single>
    spi_write_single(RFM_REG_20_PREAMBLE_MSB, num_sym >> 8);
 8001318:	2100      	movs	r1, #0
 800131a:	2020      	movs	r0, #32
 800131c:	f7ff fde2 	bl	8000ee4 <spi_write_single>
    spi_write_single(RFM_REG_21_PREAMBLE_LSB, num_sym & 0xff);
 8001320:	2106      	movs	r1, #6
 8001322:	2021      	movs	r0, #33	; 0x21
 8001324:	f7ff fdde 	bl	8000ee4 <spi_write_single>
  spi_write_single(RFM_REG_1D_MODEM_CONFIG1, BW | CR | 1);
 8001328:	2101      	movs	r1, #1
 800132a:	4334      	orrs	r4, r6
 800132c:	201d      	movs	r0, #29
 800132e:	4321      	orrs	r1, r4
 8001330:	f7ff fdd8 	bl	8000ee4 <spi_write_single>
  spi_write_single(RFM_REG_1E_MODEM_CONFIG2, SF | (crc_turn_on << 2));
 8001334:	9b01      	ldr	r3, [sp, #4]
 8001336:	201e      	movs	r0, #30
 8001338:	0099      	lsls	r1, r3, #2
 800133a:	4329      	orrs	r1, r5
 800133c:	b2c9      	uxtb	r1, r1
 800133e:	f7ff fdd1 	bl	8000ee4 <spi_write_single>
  if(SF == RFM_SPREADING_FACTOR_64CPS)
 8001342:	2d60      	cmp	r5, #96	; 0x60
 8001344:	d10d      	bne.n	8001362 <rfm_config_for_lora+0x92>
    spi_write_single(0x31, (spi_read_single(0x31) & ~0xF8) | 0x05);
 8001346:	2031      	movs	r0, #49	; 0x31
 8001348:	f7ff fdac 	bl	8000ea4 <spi_read_single>
 800134c:	2102      	movs	r1, #2
 800134e:	4008      	ands	r0, r1
 8001350:	3103      	adds	r1, #3
 8001352:	4301      	orrs	r1, r0
 8001354:	2031      	movs	r0, #49	; 0x31
 8001356:	f7ff fdc5 	bl	8000ee4 <spi_write_single>
    spi_write_single(0x37, 0x0C);
 800135a:	210c      	movs	r1, #12
 800135c:	2037      	movs	r0, #55	; 0x37
 800135e:	f7ff fdc1 	bl	8000ee4 <spi_write_single>
  spi_write_single(RFM_REG_22_PAYLOAD_LENGTH, RFM_PACKET_LENGTH);
 8001362:	2110      	movs	r1, #16
 8001364:	2022      	movs	r0, #34	; 0x22
 8001366:	f7ff fdbd 	bl	8000ee4 <spi_write_single>
  set_sleep_mode();
 800136a:	f7ff fdf9 	bl	8000f60 <set_sleep_mode>
}
 800136e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001370 <rfm_start_listening>:
{
 8001370:	b510      	push	{r4, lr}
  set_standby_mode();       
 8001372:	f7ff fdff 	bl	8000f74 <set_standby_mode>
  clear_buffer();
 8001376:	f7ff fe0a 	bl	8000f8e <clear_buffer>
  spi_write_single(RFM_REG_40_DIO_MAPPING1, io0_3);
 800137a:	2102      	movs	r1, #2
 800137c:	2040      	movs	r0, #64	; 0x40
 800137e:	f7ff fdb1 	bl	8000ee4 <spi_write_single>
  spi_write_single(RFM_REG_41_DIO_MAPPING2, io4_5);
 8001382:	2100      	movs	r1, #0
 8001384:	2041      	movs	r0, #65	; 0x41
 8001386:	f7ff fdad 	bl	8000ee4 <spi_write_single>
  mask_irq(RFM_IRQ_ALL);
 800138a:	f7ff fe4b 	bl	8001024 <mask_irq.constprop.0>
  spi_write_single(RFM_REG_11_IRQ_FLAGS_MASK, spi_read_single(RFM_REG_11_IRQ_FLAGS_MASK) & ~irq); 
 800138e:	2011      	movs	r0, #17
 8001390:	f7ff fd88 	bl	8000ea4 <spi_read_single>
 8001394:	210f      	movs	r1, #15
  exti_reset_request(RFM_IO_0_EXTI);
 8001396:	2480      	movs	r4, #128	; 0x80
  spi_write_single(RFM_REG_11_IRQ_FLAGS_MASK, spi_read_single(RFM_REG_11_IRQ_FLAGS_MASK) & ~irq); 
 8001398:	4001      	ands	r1, r0
 800139a:	2011      	movs	r0, #17
  exti_reset_request(RFM_IO_0_EXTI);
 800139c:	0224      	lsls	r4, r4, #8
  spi_write_single(RFM_REG_11_IRQ_FLAGS_MASK, spi_read_single(RFM_REG_11_IRQ_FLAGS_MASK) & ~irq); 
 800139e:	f7ff fda1 	bl	8000ee4 <spi_write_single>
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 80013a2:	21ff      	movs	r1, #255	; 0xff
 80013a4:	2012      	movs	r0, #18
 80013a6:	f7ff fd9d 	bl	8000ee4 <spi_write_single>
  exti_reset_request(RFM_IO_0_EXTI);
 80013aa:	0020      	movs	r0, r4
 80013ac:	f000 fbbc 	bl	8001b28 <exti_reset_request>
  exti_select_source(RFM_IO_0_EXTI, RFM_IO_0_PORT);
 80013b0:	0020      	movs	r0, r4
 80013b2:	490a      	ldr	r1, [pc, #40]	; (80013dc <rfm_start_listening+0x6c>)
 80013b4:	f000 fbbe 	bl	8001b34 <exti_select_source>
	exti_set_trigger(RFM_IO_0_EXTI, EXTI_TRIGGER_RISING);
 80013b8:	2100      	movs	r1, #0
 80013ba:	0020      	movs	r0, r4
 80013bc:	f000 fb78 	bl	8001ab0 <exti_set_trigger>
	exti_enable_request(RFM_IO_0_EXTI);
 80013c0:	0020      	movs	r0, r4
 80013c2:	f000 fb95 	bl	8001af0 <exti_enable_request>
	nvic_enable_irq(RFM_IO_0_NVIC);
 80013c6:	2007      	movs	r0, #7
 80013c8:	f000 ff80 	bl	80022cc <nvic_enable_irq>
  nvic_set_priority(RFM_IO_0_NVIC, 0);
 80013cc:	2100      	movs	r1, #0
 80013ce:	2007      	movs	r0, #7
 80013d0:	f000 ff94 	bl	80022fc <nvic_set_priority>
  set_rx_mode();
 80013d4:	f7ff fde9 	bl	8000faa <set_rx_mode>
}
 80013d8:	bd10      	pop	{r4, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	50000400 	.word	0x50000400

080013e0 <rfm_get_packets>:
{
 80013e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(packets_tail != packets_head)
 80013e2:	4d1f      	ldr	r5, [pc, #124]	; (8001460 <rfm_get_packets+0x80>)
 80013e4:	4e1f      	ldr	r6, [pc, #124]	; (8001464 <rfm_get_packets+0x84>)
 80013e6:	782a      	ldrb	r2, [r5, #0]
 80013e8:	7833      	ldrb	r3, [r6, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d00b      	beq.n	8001406 <rfm_get_packets+0x26>
    set_standby_mode();
 80013ee:	f7ff fdc1 	bl	8000f74 <set_standby_mode>
    clear_buffer();
 80013f2:	f7ff fdcc 	bl	8000f8e <clear_buffer>
    while(packets_tail != packets_head)
 80013f6:	782a      	ldrb	r2, [r5, #0]
 80013f8:	7831      	ldrb	r1, [r6, #0]
 80013fa:	4291      	cmp	r1, r2
 80013fc:	d104      	bne.n	8001408 <rfm_get_packets+0x28>
    clear_buffer();
 80013fe:	f7ff fdc6 	bl	8000f8e <clear_buffer>
    set_rx_mode();
 8001402:	f7ff fdd2 	bl	8000faa <set_rx_mode>
}
 8001406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      spf_serial_printf("Get %u %u\n", packets_head, packets_tail);
 8001408:	4817      	ldr	r0, [pc, #92]	; (8001468 <rfm_get_packets+0x88>)
 800140a:	f000 f963 	bl	80016d4 <spf_serial_printf>
      spi_read_burst(RFM_REG_00_FIFO, packets_buf[packets_tail].data.buffer, RFM_PACKET_LENGTH);
 800140e:	2318      	movs	r3, #24
  spi_chip_select();
 8001410:	20a0      	movs	r0, #160	; 0xa0
      spi_read_burst(RFM_REG_00_FIFO, packets_buf[packets_tail].data.buffer, RFM_PACKET_LENGTH);
 8001412:	782c      	ldrb	r4, [r5, #0]
  spi_chip_select();
 8001414:	2110      	movs	r1, #16
      spi_read_burst(RFM_REG_00_FIFO, packets_buf[packets_tail].data.buffer, RFM_PACKET_LENGTH);
 8001416:	435c      	muls	r4, r3
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <rfm_get_packets+0x8c>)
  spi_chip_select();
 800141a:	05c0      	lsls	r0, r0, #23
      spi_read_burst(RFM_REG_00_FIFO, packets_buf[packets_tail].data.buffer, RFM_PACKET_LENGTH);
 800141c:	18e4      	adds	r4, r4, r3
  spi_chip_select();
 800141e:	f000 fc1b 	bl	8001c58 <gpio_clear>
  timers_delay_microseconds(1);
 8001422:	2001      	movs	r0, #1
 8001424:	f000 fa28 	bl	8001878 <timers_delay_microseconds>
  spi_xfer(RFM_SPI, reg);
 8001428:	0027      	movs	r7, r4
 800142a:	2100      	movs	r1, #0
 800142c:	4810      	ldr	r0, [pc, #64]	; (8001470 <rfm_get_packets+0x90>)
 800142e:	f000 fe61 	bl	80020f4 <spi_xfer>
  for(int i = 0; i < len; i++)
 8001432:	3710      	adds	r7, #16
    buf[i] =  spi_xfer(RFM_SPI, 0x00);  
 8001434:	2100      	movs	r1, #0
 8001436:	480e      	ldr	r0, [pc, #56]	; (8001470 <rfm_get_packets+0x90>)
 8001438:	f000 fe5c 	bl	80020f4 <spi_xfer>
 800143c:	7020      	strb	r0, [r4, #0]
  for(int i = 0; i < len; i++)
 800143e:	3401      	adds	r4, #1
 8001440:	42bc      	cmp	r4, r7
 8001442:	d1f7      	bne.n	8001434 <rfm_get_packets+0x54>
  spi_chip_deselect();     
 8001444:	20a0      	movs	r0, #160	; 0xa0
 8001446:	2110      	movs	r1, #16
 8001448:	05c0      	lsls	r0, r0, #23
 800144a:	f000 fc03 	bl	8001c54 <gpio_set>
  timers_delay_microseconds(1);
 800144e:	2001      	movs	r0, #1
 8001450:	f000 fa12 	bl	8001878 <timers_delay_microseconds>
      packets_tail = (packets_tail + 1) % PACKETS_BUF_SIZE;
 8001454:	220f      	movs	r2, #15
 8001456:	782b      	ldrb	r3, [r5, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	4013      	ands	r3, r2
 800145c:	702b      	strb	r3, [r5, #0]
 800145e:	e7ca      	b.n	80013f6 <rfm_get_packets+0x16>
 8001460:	20000246 	.word	0x20000246
 8001464:	20000244 	.word	0x20000244
 8001468:	080037d6 	.word	0x080037d6
 800146c:	200000c4 	.word	0x200000c4
 8001470:	40013000 	.word	0x40013000

08001474 <rfm_get_next_packet>:
{
 8001474:	b510      	push	{r4, lr}
  rfm_get_packets();
 8001476:	f7ff ffb3 	bl	80013e0 <rfm_get_packets>
  spf_serial_printf("Read %u\n", packets_read);
 800147a:	4c07      	ldr	r4, [pc, #28]	; (8001498 <rfm_get_next_packet+0x24>)
 800147c:	4807      	ldr	r0, [pc, #28]	; (800149c <rfm_get_next_packet+0x28>)
 800147e:	7821      	ldrb	r1, [r4, #0]
 8001480:	f000 f928 	bl	80016d4 <spf_serial_printf>
  rfm_packet_t *packet = &packets_buf[packets_read];
 8001484:	2018      	movs	r0, #24
  packets_read = (packets_read + 1) % PACKETS_BUF_SIZE;
 8001486:	210f      	movs	r1, #15
  rfm_packet_t *packet = &packets_buf[packets_read];
 8001488:	7822      	ldrb	r2, [r4, #0]
 800148a:	4350      	muls	r0, r2
  packets_read = (packets_read + 1) % PACKETS_BUF_SIZE;
 800148c:	1c53      	adds	r3, r2, #1
 800148e:	400b      	ands	r3, r1
 8001490:	7023      	strb	r3, [r4, #0]
  rfm_packet_t *packet = &packets_buf[packets_read];
 8001492:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <rfm_get_next_packet+0x2c>)
 8001494:	18c0      	adds	r0, r0, r3
}
 8001496:	bd10      	pop	{r4, pc}
 8001498:	20000245 	.word	0x20000245
 800149c:	080037e1 	.word	0x080037e1
 80014a0:	200000c4 	.word	0x200000c4

080014a4 <rfm_get_num_packets>:
  return ((uint16_t)(PACKETS_BUF_SIZE + packets_head - packets_read)) % PACKETS_BUF_SIZE;
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <rfm_get_num_packets+0x10>)
 80014a6:	7818      	ldrb	r0, [r3, #0]
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <rfm_get_num_packets+0x14>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	1ac0      	subs	r0, r0, r3
 80014ae:	230f      	movs	r3, #15
 80014b0:	4018      	ands	r0, r3
}
 80014b2:	4770      	bx	lr
 80014b4:	20000244 	.word	0x20000244
 80014b8:	20000245 	.word	0x20000245

080014bc <rfm_transmit_packet>:
{
 80014bc:	b084      	sub	sp, #16
 80014be:	b510      	push	{r4, lr}
 80014c0:	9204      	str	r2, [sp, #16]
 80014c2:	9305      	str	r3, [sp, #20]
 80014c4:	9103      	str	r1, [sp, #12]
 80014c6:	9002      	str	r0, [sp, #8]
  set_standby_mode(); 
 80014c8:	f7ff fd54 	bl	8000f74 <set_standby_mode>
  clear_buffer();       
 80014cc:	f7ff fd5f 	bl	8000f8e <clear_buffer>
  exti_disable_request(RFM_IO_0_EXTI);
 80014d0:	2080      	movs	r0, #128	; 0x80
 80014d2:	0200      	lsls	r0, r0, #8
 80014d4:	f000 fb1a 	bl	8001b0c <exti_disable_request>
	nvic_disable_irq(RFM_IO_0_NVIC);
 80014d8:	2007      	movs	r0, #7
 80014da:	f000 ff03 	bl	80022e4 <nvic_disable_irq>
  spi_write_single(RFM_REG_40_DIO_MAPPING1, io0_3);
 80014de:	2142      	movs	r1, #66	; 0x42
 80014e0:	2040      	movs	r0, #64	; 0x40
 80014e2:	f7ff fcff 	bl	8000ee4 <spi_write_single>
  spi_write_single(RFM_REG_41_DIO_MAPPING2, io4_5);
 80014e6:	2100      	movs	r1, #0
 80014e8:	2041      	movs	r0, #65	; 0x41
 80014ea:	f7ff fcfb 	bl	8000ee4 <spi_write_single>
  mask_irq(RFM_IRQ_ALL);
 80014ee:	f7ff fd99 	bl	8001024 <mask_irq.constprop.0>
  spi_write_single(RFM_REG_11_IRQ_FLAGS_MASK, spi_read_single(RFM_REG_11_IRQ_FLAGS_MASK) & ~irq); 
 80014f2:	2011      	movs	r0, #17
 80014f4:	f7ff fcd6 	bl	8000ea4 <spi_read_single>
 80014f8:	21f7      	movs	r1, #247	; 0xf7
 80014fa:	4001      	ands	r1, r0
 80014fc:	2011      	movs	r0, #17
 80014fe:	f7ff fcf1 	bl	8000ee4 <spi_write_single>
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 8001502:	21ff      	movs	r1, #255	; 0xff
 8001504:	2012      	movs	r0, #18
 8001506:	f7ff fced 	bl	8000ee4 <spi_write_single>
  spi_write_burst(RFM_REG_00_FIFO, packet.data.buffer, RFM_PACKET_LENGTH);
 800150a:	a802      	add	r0, sp, #8
 800150c:	f7ff fd68 	bl	8000fe0 <spi_write_burst.constprop.0>
  set_tx_mode();
 8001510:	f7ff fd58 	bl	8000fc4 <set_tx_mode>
  TIMEOUT(100000, "RFM TX", 0, gpio_get(RFM_IO_0_PORT, RFM_IO_0), sent = true;, ;);
 8001514:	f000 f9fa 	bl	800190c <timeout_init>
 8001518:	2200      	movs	r2, #0
 800151a:	490f      	ldr	r1, [pc, #60]	; (8001558 <rfm_transmit_packet+0x9c>)
 800151c:	480f      	ldr	r0, [pc, #60]	; (800155c <rfm_transmit_packet+0xa0>)
 800151e:	f000 fa03 	bl	8001928 <timeout>
 8001522:	2800      	cmp	r0, #0
 8001524:	d00f      	beq.n	8001546 <rfm_transmit_packet+0x8a>
  bool sent = false;
 8001526:	2400      	movs	r4, #0
  mask_irq(RFM_IRQ_ALL);
 8001528:	f7ff fd7c 	bl	8001024 <mask_irq.constprop.0>
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 800152c:	21ff      	movs	r1, #255	; 0xff
 800152e:	2012      	movs	r0, #18
 8001530:	f7ff fcd8 	bl	8000ee4 <spi_write_single>
  clear_buffer(); 
 8001534:	f7ff fd2b 	bl	8000f8e <clear_buffer>
  set_sleep_mode(); 
 8001538:	f7ff fd12 	bl	8000f60 <set_sleep_mode>
}
 800153c:	0020      	movs	r0, r4
 800153e:	bc10      	pop	{r4}
 8001540:	bc08      	pop	{r3}
 8001542:	b004      	add	sp, #16
 8001544:	4718      	bx	r3
  TIMEOUT(100000, "RFM TX", 0, gpio_get(RFM_IO_0_PORT, RFM_IO_0), sent = true;, ;);
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <rfm_transmit_packet+0xa4>)
 800154a:	0209      	lsls	r1, r1, #8
 800154c:	f000 fb87 	bl	8001c5e <gpio_get>
 8001550:	2800      	cmp	r0, #0
 8001552:	d0e1      	beq.n	8001518 <rfm_transmit_packet+0x5c>
 8001554:	2401      	movs	r4, #1
 8001556:	e7e7      	b.n	8001528 <rfm_transmit_packet+0x6c>
 8001558:	080037ea 	.word	0x080037ea
 800155c:	000186a0 	.word	0x000186a0
 8001560:	50000400 	.word	0x50000400

08001564 <exti4_15_isr>:

/** @addtogroup  RFM_API
 *  @{
 */
void exti4_15_isr(void)
{
 8001564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t timer = timers_micros();
  
  exti_reset_request(RFM_IO_0_EXTI);
 8001566:	2480      	movs	r4, #128	; 0x80
  exti_reset_request(RFM_IO_0_EXTI);

  // Store IRQ Flags
  packets_buf[packets_head].flags = get_irq();
 8001568:	2618      	movs	r6, #24
  exti_reset_request(RFM_IO_0_EXTI);
 800156a:	0224      	lsls	r4, r4, #8
  uint16_t timer = timers_micros();
 800156c:	f000 f99a 	bl	80018a4 <timers_micros>
  exti_reset_request(RFM_IO_0_EXTI);
 8001570:	0020      	movs	r0, r4
 8001572:	f000 fad9 	bl	8001b28 <exti_reset_request>
  exti_reset_request(RFM_IO_0_EXTI);
 8001576:	0020      	movs	r0, r4
 8001578:	f000 fad6 	bl	8001b28 <exti_reset_request>
  packets_buf[packets_head].flags = get_irq();
 800157c:	4d16      	ldr	r5, [pc, #88]	; (80015d8 <exti4_15_isr+0x74>)
  return spi_read_single(RFM_REG_12_IRQ_FLAGS);
 800157e:	2012      	movs	r0, #18
  packets_buf[packets_head].flags = get_irq();
 8001580:	782f      	ldrb	r7, [r5, #0]
  return spi_read_single(RFM_REG_12_IRQ_FLAGS);
 8001582:	f7ff fc8f 	bl	8000ea4 <spi_read_single>
  packets_buf[packets_head].flags = get_irq();
 8001586:	4377      	muls	r7, r6
 8001588:	4c14      	ldr	r4, [pc, #80]	; (80015dc <exti4_15_isr+0x78>)
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 800158a:	21ff      	movs	r1, #255	; 0xff
  packets_buf[packets_head].flags = get_irq();
 800158c:	19e7      	adds	r7, r4, r7
 800158e:	7438      	strb	r0, [r7, #16]
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 8001590:	2012      	movs	r0, #18
 8001592:	f7ff fca7 	bl	8000ee4 <spi_write_single>
 8001596:	21ff      	movs	r1, #255	; 0xff
 8001598:	2012      	movs	r0, #18
 800159a:	f7ff fca3 	bl	8000ee4 <spi_write_single>
  clear_irq(RFM_IRQ_ALL);
  clear_irq(RFM_IRQ_ALL);

  // Get signal strength
  packets_buf[packets_head].rssi = spi_read_single(RFM_REG_1A_PKT_RSSI_VALUE);
 800159e:	201a      	movs	r0, #26
 80015a0:	f7ff fc80 	bl	8000ea4 <spi_read_single>
 80015a4:	782b      	ldrb	r3, [r5, #0]
  packets_buf[packets_head].rssi -= 137;
 80015a6:	3889      	subs	r0, #137	; 0x89
 80015a8:	4373      	muls	r3, r6
 80015aa:	18e3      	adds	r3, r4, r3
 80015ac:	8298      	strh	r0, [r3, #20]
  packets_buf[packets_head].snr = spi_read_single(RFM_REG_19_PKT_SNR_VALUE) / 4;
 80015ae:	2019      	movs	r0, #25
 80015b0:	f7ff fc78 	bl	8000ea4 <spi_read_single>

  // Check for CRC error
  packets_buf[packets_head].crc_ok = !(packets_buf[packets_head].flags & RFM_IRQ_PAYLOAD_CRC_ERROR);
 80015b4:	2201      	movs	r2, #1
  packets_buf[packets_head].snr = spi_read_single(RFM_REG_19_PKT_SNR_VALUE) / 4;
 80015b6:	782b      	ldrb	r3, [r5, #0]
 80015b8:	0880      	lsrs	r0, r0, #2
 80015ba:	435e      	muls	r6, r3
 80015bc:	19a4      	adds	r4, r4, r6
  packets_buf[packets_head].crc_ok = !(packets_buf[packets_head].flags & RFM_IRQ_PAYLOAD_CRC_ERROR);
 80015be:	7c21      	ldrb	r1, [r4, #16]

  packets_head = (packets_head + 1) % PACKETS_BUF_SIZE;
 80015c0:	3301      	adds	r3, #1
  packets_buf[packets_head].crc_ok = !(packets_buf[packets_head].flags & RFM_IRQ_PAYLOAD_CRC_ERROR);
 80015c2:	0949      	lsrs	r1, r1, #5
 80015c4:	438a      	bics	r2, r1
 80015c6:	7462      	strb	r2, [r4, #17]
  packets_head = (packets_head + 1) % PACKETS_BUF_SIZE;
 80015c8:	220f      	movs	r2, #15
  packets_buf[packets_head].snr = spi_read_single(RFM_REG_19_PKT_SNR_VALUE) / 4;
 80015ca:	74a0      	strb	r0, [r4, #18]
  packets_head = (packets_head + 1) % PACKETS_BUF_SIZE;
 80015cc:	4013      	ands	r3, r2
 80015ce:	702b      	strb	r3, [r5, #0]

  uint16_t time = timers_micros() - timer;
 80015d0:	f000 f968 	bl	80018a4 <timers_micros>
  // spf_serial_printf("ISR %u %u %u\n", time, packets_head, packets_tail);
}
 80015d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	20000244 	.word	0x20000244
 80015dc:	200000c4 	.word	0x200000c4

080015e0 <spf_init>:

//  Global Function Definitions

void spf_init(void)
{
	rcc_periph_clock_enable(RCC_GPIOA);
 80015e0:	20b0      	movs	r0, #176	; 0xb0
{
 80015e2:	b510      	push	{r4, lr}

static void usart_setup(void) 
{
	rcc_periph_clock_enable(SPF_USART_RCC);

	gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_TX);
 80015e4:	24a0      	movs	r4, #160	; 0xa0
	rcc_periph_clock_enable(RCC_GPIOA);
 80015e6:	00c0      	lsls	r0, r0, #3
 80015e8:	f000 fd36 	bl	8002058 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOB);
 80015ec:	4831      	ldr	r0, [pc, #196]	; (80016b4 <spf_init+0xd4>)
 80015ee:	f000 fd33 	bl	8002058 <rcc_periph_clock_enable>
	rcc_osc_on(RCC_MSI);
 80015f2:	2004      	movs	r0, #4
 80015f4:	f000 fc6e 	bl	8001ed4 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_MSI);
 80015f8:	2004      	movs	r0, #4
 80015fa:	f000 fcc1 	bl	8001f80 <rcc_wait_for_osc_ready>
	rcc_set_msi_range(5);
 80015fe:	2005      	movs	r0, #5
 8001600:	f000 fce8 	bl	8001fd4 <rcc_set_msi_range>
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);				// AHB -> 2.097Mhz
 8001604:	2000      	movs	r0, #0
 8001606:	f000 fcdb 	bl	8001fc0 <rcc_set_hpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);			// APB1 -> 2.097Mhz
 800160a:	2000      	movs	r0, #0
 800160c:	f000 fcc0 	bl	8001f90 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);			// APB2 -> 2.097Mhz
 8001610:	2000      	movs	r0, #0
 8001612:	f000 fcc9 	bl	8001fa8 <rcc_set_ppre2>
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 8001616:	2000      	movs	r0, #0
 8001618:	f000 fac6 	bl	8001ba8 <flash_set_ws>
	rcc_ahb_frequency = 2097000;
 800161c:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <spf_init+0xd8>)
 800161e:	4a27      	ldr	r2, [pc, #156]	; (80016bc <spf_init+0xdc>)
	gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_TX);
 8001620:	05e4      	lsls	r4, r4, #23
	rcc_ahb_frequency = 2097000;
 8001622:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 2097000;
 8001624:	4a26      	ldr	r2, [pc, #152]	; (80016c0 <spf_init+0xe0>)
	rcc_periph_clock_enable(SPF_USART_RCC);
 8001626:	4827      	ldr	r0, [pc, #156]	; (80016c4 <spf_init+0xe4>)
	rcc_apb1_frequency = 2097000;
 8001628:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = 2097000;
 800162a:	4a27      	ldr	r2, [pc, #156]	; (80016c8 <spf_init+0xe8>)
 800162c:	6013      	str	r3, [r2, #0]
	rcc_periph_clock_enable(SPF_USART_RCC);
 800162e:	f000 fd13 	bl	8002058 <rcc_periph_clock_enable>
	gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_TX);
 8001632:	0020      	movs	r0, r4
 8001634:	2304      	movs	r3, #4
 8001636:	2200      	movs	r2, #0
 8001638:	2102      	movs	r1, #2
 800163a:	f000 fb13 	bl	8001c64 <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_RX);
 800163e:	0020      	movs	r0, r4
 8001640:	2308      	movs	r3, #8
 8001642:	2200      	movs	r2, #0
 8001644:	2102      	movs	r1, #2
 8001646:	f000 fb0d 	bl	8001c64 <gpio_mode_setup>
    
    gpio_set_output_options(SPF_USART_TX_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, SPF_USART_TX);
 800164a:	2200      	movs	r2, #0
 800164c:	2304      	movs	r3, #4
 800164e:	0011      	movs	r1, r2
 8001650:	0020      	movs	r0, r4
 8001652:	f000 fb27 	bl	8001ca4 <gpio_set_output_options>

    gpio_set_af(SPF_USART_TX_PORT, SPF_USART_AF, SPF_USART_TX);
 8001656:	2204      	movs	r2, #4
 8001658:	0020      	movs	r0, r4
 800165a:	0011      	movs	r1, r2
 800165c:	f000 fb40 	bl	8001ce0 <gpio_set_af>
    gpio_set_af(SPF_USART_RX_PORT, SPF_USART_AF, SPF_USART_RX);
 8001660:	2208      	movs	r2, #8
 8001662:	2104      	movs	r1, #4
 8001664:	0020      	movs	r0, r4
    
    rcc_periph_reset_pulse(SPF_USART_RCC_RST);
	usart_disable(SPF_USART);
 8001666:	4c19      	ldr	r4, [pc, #100]	; (80016cc <spf_init+0xec>)
    gpio_set_af(SPF_USART_RX_PORT, SPF_USART_AF, SPF_USART_RX);
 8001668:	f000 fb3a 	bl	8001ce0 <gpio_set_af>
    rcc_periph_reset_pulse(SPF_USART_RCC_RST);
 800166c:	4818      	ldr	r0, [pc, #96]	; (80016d0 <spf_init+0xf0>)
 800166e:	f000 fd0f 	bl	8002090 <rcc_periph_reset_pulse>
	usart_disable(SPF_USART);
 8001672:	0020      	movs	r0, r4
 8001674:	f000 fdc5 	bl	8002202 <usart_disable>
	usart_set_baudrate(SPF_USART, SPF_USART_BAUD);
 8001678:	21e1      	movs	r1, #225	; 0xe1
 800167a:	0020      	movs	r0, r4
 800167c:	0249      	lsls	r1, r1, #9
 800167e:	f000 fd63 	bl	8002148 <usart_set_baudrate>
	usart_set_databits(SPF_USART, 8);
 8001682:	0020      	movs	r0, r4
 8001684:	2108      	movs	r1, #8
 8001686:	f000 fd8b 	bl	80021a0 <usart_set_databits>
	usart_set_stopbits(SPF_USART,USART_STOPBITS_1);
 800168a:	0020      	movs	r0, r4
 800168c:	2100      	movs	r1, #0
 800168e:	f000 fd95 	bl	80021bc <usart_set_stopbits>
	usart_set_mode(SPF_USART, USART_MODE_TX_RX);
 8001692:	0020      	movs	r0, r4
 8001694:	210c      	movs	r1, #12
 8001696:	f000 fda1 	bl	80021dc <usart_set_mode>
	usart_set_parity(SPF_USART, USART_PARITY_NONE);
 800169a:	0020      	movs	r0, r4
 800169c:	2100      	movs	r1, #0
 800169e:	f000 fd95 	bl	80021cc <usart_set_parity>
	usart_set_flow_control(SPF_USART, USART_FLOWCONTROL_NONE);
 80016a2:	2100      	movs	r1, #0
 80016a4:	0020      	movs	r0, r4
 80016a6:	f000 fd9f 	bl	80021e8 <usart_set_flow_control>
	usart_enable(SPF_USART);
 80016aa:	0020      	movs	r0, r4
 80016ac:	f000 fda4 	bl	80021f8 <usart_enable>
}
 80016b0:	bd10      	pop	{r4, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	00000581 	.word	0x00000581
 80016b8:	001fff68 	.word	0x001fff68
 80016bc:	20000004 	.word	0x20000004
 80016c0:	20000008 	.word	0x20000008
 80016c4:	00000711 	.word	0x00000711
 80016c8:	2000000c 	.word	0x2000000c
 80016cc:	40004400 	.word	0x40004400
 80016d0:	00000511 	.word	0x00000511

080016d4 <spf_serial_printf>:
{	
 80016d4:	b40f      	push	{r0, r1, r2, r3}
 80016d6:	b513      	push	{r0, r1, r4, lr}
 80016d8:	a904      	add	r1, sp, #16
 80016da:	c901      	ldmia	r1!, {r0}
  	va_start(va, format);
 80016dc:	9101      	str	r1, [sp, #4]
  	const int ret = vprintf_spf(format, va);
 80016de:	f7ff fbd7 	bl	8000e90 <vprintf_spf>
 80016e2:	0004      	movs	r4, r0
	while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {__asm__("nop");}
 80016e4:	2140      	movs	r1, #64	; 0x40
 80016e6:	4806      	ldr	r0, [pc, #24]	; (8001700 <spf_serial_printf+0x2c>)
 80016e8:	f000 fda3 	bl	8002232 <usart_get_flag>
 80016ec:	2800      	cmp	r0, #0
 80016ee:	d004      	beq.n	80016fa <spf_serial_printf+0x26>
}
 80016f0:	0020      	movs	r0, r4
 80016f2:	bc16      	pop	{r1, r2, r4}
 80016f4:	bc08      	pop	{r3}
 80016f6:	b004      	add	sp, #16
 80016f8:	4718      	bx	r3
	while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {__asm__("nop");}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	e7f2      	b.n	80016e4 <spf_serial_printf+0x10>
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	40004400 	.word	0x40004400

08001704 <_putchar_spf>:
{
 8001704:	b510      	push	{r4, lr}
	usart_send_blocking(SPF_USART, character);
 8001706:	0001      	movs	r1, r0
 8001708:	4801      	ldr	r0, [pc, #4]	; (8001710 <_putchar_spf+0xc>)
 800170a:	f000 fd7f 	bl	800220c <usart_send_blocking>
}
 800170e:	bd10      	pop	{r4, pc}
 8001710:	40004400 	.word	0x40004400

08001714 <flash_led>:
	#include "coolease/sim.h"
	#include "coolease/timers.h"
	#include "coolease/tmp112.h"

void flash_led(uint16_t milliseconds, uint8_t num_flashes)
{
 8001714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	gpio_mode_setup(LED_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, LED);
 8001716:	2380      	movs	r3, #128	; 0x80
{
 8001718:	0004      	movs	r4, r0
	gpio_mode_setup(LED_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, LED);
 800171a:	20a0      	movs	r0, #160	; 0xa0
 800171c:	01db      	lsls	r3, r3, #7
 800171e:	2200      	movs	r2, #0
{
 8001720:	9101      	str	r1, [sp, #4]
	gpio_mode_setup(LED_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE, LED);
 8001722:	05c0      	lsls	r0, r0, #23
 8001724:	2101      	movs	r1, #1
 8001726:	f000 fa9d 	bl	8001c64 <gpio_mode_setup>
	gpio_clear(LED_PORT, LED);
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	20a0      	movs	r0, #160	; 0xa0
 800172e:	01c9      	lsls	r1, r1, #7
 8001730:	05c0      	lsls	r0, r0, #23
 8001732:	f000 fa91 	bl	8001c58 <gpio_clear>
	for(uint8_t i = 0; i < num_flashes; i++)
	{
		gpio_set(LED_PORT, LED);
		timers_delay_milliseconds(milliseconds / 4);
		gpio_clear(LED_PORT, LED);
		timers_delay_milliseconds(3 * milliseconds / 4);
 8001736:	2003      	movs	r0, #3
		gpio_set(LED_PORT, LED);
 8001738:	2680      	movs	r6, #128	; 0x80
 800173a:	27a0      	movs	r7, #160	; 0xa0
	for(uint8_t i = 0; i < num_flashes; i++)
 800173c:	2500      	movs	r5, #0
		timers_delay_milliseconds(milliseconds / 4);
 800173e:	08a3      	lsrs	r3, r4, #2
		timers_delay_milliseconds(3 * milliseconds / 4);
 8001740:	4344      	muls	r4, r0
		timers_delay_milliseconds(milliseconds / 4);
 8001742:	9300      	str	r3, [sp, #0]
		timers_delay_milliseconds(3 * milliseconds / 4);
 8001744:	10a4      	asrs	r4, r4, #2
		gpio_set(LED_PORT, LED);
 8001746:	01f6      	lsls	r6, r6, #7
 8001748:	05ff      	lsls	r7, r7, #23
	for(uint8_t i = 0; i < num_flashes; i++)
 800174a:	9b01      	ldr	r3, [sp, #4]
 800174c:	429d      	cmp	r5, r3
 800174e:	d100      	bne.n	8001752 <flash_led+0x3e>
	}
}
 8001750:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		gpio_set(LED_PORT, LED);
 8001752:	0031      	movs	r1, r6
 8001754:	0038      	movs	r0, r7
 8001756:	f000 fa7d 	bl	8001c54 <gpio_set>
		timers_delay_milliseconds(milliseconds / 4);
 800175a:	9800      	ldr	r0, [sp, #0]
 800175c:	f000 f8c0 	bl	80018e0 <timers_delay_milliseconds>
		gpio_clear(LED_PORT, LED);
 8001760:	0031      	movs	r1, r6
 8001762:	0038      	movs	r0, r7
 8001764:	f000 fa78 	bl	8001c58 <gpio_clear>
		timers_delay_milliseconds(3 * milliseconds / 4);
 8001768:	0020      	movs	r0, r4
 800176a:	f000 f8b9 	bl	80018e0 <timers_delay_milliseconds>
	for(uint8_t i = 0; i < num_flashes; i++)
 800176e:	3501      	adds	r5, #1
 8001770:	e7eb      	b.n	800174a <flash_led+0x36>
	...

08001774 <testing_rf>:
	spf_serial_printf("Entering Standby\n");
	timers_enter_standby();
}

void testing_rf(void)
{
 8001774:	b570      	push	{r4, r5, r6, lr}
	spf_serial_printf("Testing RF\n");
 8001776:	4825      	ldr	r0, [pc, #148]	; (800180c <testing_rf+0x98>)
{
 8001778:	b088      	sub	sp, #32
	spf_serial_printf("Testing RF\n");
 800177a:	f7ff ffab 	bl	80016d4 <spf_serial_printf>

	rfm_init();
 800177e:	f7ff fc91 	bl	80010a4 <rfm_init>
	rfm_config_for_lora(RFM_BW_125KHZ, RFM_CODING_RATE_4_5, RFM_SPREADING_FACTOR_128CPS, true, 0);
 8001782:	2300      	movs	r3, #0
 8001784:	2270      	movs	r2, #112	; 0x70
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2102      	movs	r1, #2
 800178a:	3301      	adds	r3, #1
 800178c:	0010      	movs	r0, r2
 800178e:	f7ff fd9f 	bl	80012d0 <rfm_config_for_lora>
    rfm_packet_t *packet_received;
    rfm_packet_t packet_send;

	char msg[16] = {'H', 'E', 'L', 'L', '0', '\n', 0};

	packet_send.data.buffer[0] = msg[0];
 8001792:	2348      	movs	r3, #72	; 0x48
 8001794:	ad02      	add	r5, sp, #8
 8001796:	702b      	strb	r3, [r5, #0]

    for (;;)
	{
		rfm_transmit_packet(packet_send);
 8001798:	466a      	mov	r2, sp
 800179a:	ab06      	add	r3, sp, #24
 800179c:	cb03      	ldmia	r3!, {r0, r1}
 800179e:	c203      	stmia	r2!, {r0, r1}
 80017a0:	68eb      	ldr	r3, [r5, #12]
 80017a2:	6869      	ldr	r1, [r5, #4]
 80017a4:	68aa      	ldr	r2, [r5, #8]
 80017a6:	6828      	ldr	r0, [r5, #0]
 80017a8:	f7ff fe88 	bl	80014bc <rfm_transmit_packet>
		spf_serial_printf("Sent\n");
 80017ac:	4818      	ldr	r0, [pc, #96]	; (8001810 <testing_rf+0x9c>)
 80017ae:	f7ff ff91 	bl	80016d4 <spf_serial_printf>

		rfm_start_listening();
 80017b2:	f7ff fddd 	bl	8001370 <rfm_start_listening>
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <testing_rf+0xa0>)
		for (int i = 0; i < 300000; i++) __asm__("nop");
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	3b01      	subs	r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1fb      	bne.n	80017b8 <testing_rf+0x44>
		if(rfm_get_num_packets())
 80017c0:	f7ff fe70 	bl	80014a4 <rfm_get_num_packets>
 80017c4:	2800      	cmp	r0, #0
 80017c6:	d01b      	beq.n	8001800 <testing_rf+0x8c>
		{
			uint16_t timer = timers_micros();
 80017c8:	f000 f86c 	bl	80018a4 <timers_micros>
 80017cc:	0006      	movs	r6, r0
			packet_received = rfm_get_next_packet();
 80017ce:	f7ff fe51 	bl	8001474 <rfm_get_next_packet>
 80017d2:	0004      	movs	r4, r0
			uint16_t timer2 = timers_micros();
 80017d4:	f000 f866 	bl	80018a4 <timers_micros>
			spf_serial_printf("%i us\n", (uint16_t)(timer2 - timer));
 80017d8:	1b81      	subs	r1, r0, r6
 80017da:	b289      	uxth	r1, r1
 80017dc:	480e      	ldr	r0, [pc, #56]	; (8001818 <testing_rf+0xa4>)
 80017de:	f7ff ff79 	bl	80016d4 <spf_serial_printf>

			spf_serial_printf("Packet Received\n");
 80017e2:	0026      	movs	r6, r4
 80017e4:	480d      	ldr	r0, [pc, #52]	; (800181c <testing_rf+0xa8>)
 80017e6:	f7ff ff75 	bl	80016d4 <spf_serial_printf>

			for(int i = 0; i < RFM_PACKET_LENGTH; i++)
 80017ea:	3610      	adds	r6, #16
				spf_serial_printf("%02x, ", packet_received->data.buffer[i]);
 80017ec:	7821      	ldrb	r1, [r4, #0]
 80017ee:	480c      	ldr	r0, [pc, #48]	; (8001820 <testing_rf+0xac>)
 80017f0:	3401      	adds	r4, #1
 80017f2:	f7ff ff6f 	bl	80016d4 <spf_serial_printf>
			for(int i = 0; i < RFM_PACKET_LENGTH; i++)
 80017f6:	42b4      	cmp	r4, r6
 80017f8:	d1f8      	bne.n	80017ec <testing_rf+0x78>

			spf_serial_printf("\n");
 80017fa:	480a      	ldr	r0, [pc, #40]	; (8001824 <testing_rf+0xb0>)
 80017fc:	f7ff ff6a 	bl	80016d4 <spf_serial_printf>
		rfm_start_listening();
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <testing_rf+0xa0>)
		}

		for (int i = 0; i < 300000; i++) __asm__("nop");
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	3b01      	subs	r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1fb      	bne.n	8001802 <testing_rf+0x8e>
 800180a:	e7c5      	b.n	8001798 <testing_rf+0x24>
 800180c:	080037f1 	.word	0x080037f1
 8001810:	080037fd 	.word	0x080037fd
 8001814:	000493e0 	.word	0x000493e0
 8001818:	08003803 	.word	0x08003803
 800181c:	0800380a 	.word	0x0800380a
 8001820:	0800381b 	.word	0x0800381b
 8001824:	080037fb 	.word	0x080037fb

08001828 <timers_lptim_init>:
}


// Setup lptim1 as approx. microsecond counter
void timers_lptim_init(void)
{
 8001828:	b510      	push	{r4, lr}
    // Input clock is 2.097Mhz
    rcc_set_peripheral_clk_sel(LPTIM1, RCC_CCIPR_LPTIM1SEL_APB);
 800182a:	4c10      	ldr	r4, [pc, #64]	; (800186c <timers_lptim_init+0x44>)
 800182c:	2100      	movs	r1, #0
 800182e:	0020      	movs	r0, r4
 8001830:	f000 fbdc 	bl	8001fec <rcc_set_peripheral_clk_sel>
 
    rcc_periph_clock_enable(RCC_LPTIM1);
 8001834:	480e      	ldr	r0, [pc, #56]	; (8001870 <timers_lptim_init+0x48>)
 8001836:	f000 fc0f 	bl	8002058 <rcc_periph_clock_enable>
    
    lptimer_set_internal_clock_source(LPTIM1);
 800183a:	0020      	movs	r0, r4
 800183c:	f000 fb20 	bl	8001e80 <lptimer_set_internal_clock_source>
    lptimer_enable_trigger(LPTIM1, LPTIM_CFGR_TRIGEN_SW);
 8001840:	0020      	movs	r0, r4
 8001842:	2100      	movs	r1, #0
 8001844:	f000 fb12 	bl	8001e6c <lptimer_enable_trigger>
    lptimer_set_prescaler(LPTIM1, LPTIM_CFGR_PRESC_2);
 8001848:	2180      	movs	r1, #128	; 0x80
 800184a:	0020      	movs	r0, r4
 800184c:	0089      	lsls	r1, r1, #2
 800184e:	f000 fb05 	bl	8001e5c <lptimer_set_prescaler>
    
    lptimer_enable(LPTIM1);
 8001852:	0020      	movs	r0, r4
 8001854:	f000 faf9 	bl	8001e4a <lptimer_enable>
    
    lptimer_set_period(LPTIM1, 0xffff);
 8001858:	0020      	movs	r0, r4
 800185a:	4906      	ldr	r1, [pc, #24]	; (8001874 <timers_lptim_init+0x4c>)
 800185c:	f000 fb0e 	bl	8001e7c <lptimer_set_period>
    
    lptimer_start_counter(LPTIM1, LPTIM_CR_CNTSTRT);
 8001860:	2104      	movs	r1, #4
 8001862:	0020      	movs	r0, r4
 8001864:	f000 faf6 	bl	8001e54 <lptimer_start_counter>
}
 8001868:	bd10      	pop	{r4, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	40007c00 	.word	0x40007c00
 8001870:	0000071f 	.word	0x0000071f
 8001874:	0000ffff 	.word	0x0000ffff

08001878 <timers_delay_microseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_microseconds(uint32_t delay_microseconds)
{
 8001878:	b570      	push	{r4, r5, r6, lr}
 800187a:	0004      	movs	r4, r0
    uint32_t curr_time = lptimer_get_counter(LPTIM1);
 800187c:	4807      	ldr	r0, [pc, #28]	; (800189c <timers_delay_microseconds+0x24>)
 800187e:	f000 fae1 	bl	8001e44 <lptimer_get_counter>
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <timers_delay_microseconds+0x28>)
 8001884:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_microseconds > 65000)
 8001886:	429c      	cmp	r4, r3
 8001888:	d900      	bls.n	800188c <timers_delay_microseconds+0x14>
 800188a:	001c      	movs	r4, r3
        delay_microseconds = 65000;

    while (lptimer_get_counter(LPTIM1) - curr_time < delay_microseconds);
 800188c:	4803      	ldr	r0, [pc, #12]	; (800189c <timers_delay_microseconds+0x24>)
 800188e:	f000 fad9 	bl	8001e44 <lptimer_get_counter>
 8001892:	1b40      	subs	r0, r0, r5
 8001894:	42a0      	cmp	r0, r4
 8001896:	d3f9      	bcc.n	800188c <timers_delay_microseconds+0x14>
}
 8001898:	bd70      	pop	{r4, r5, r6, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	40007c00 	.word	0x40007c00
 80018a0:	0000fde8 	.word	0x0000fde8

080018a4 <timers_micros>:
}
*/

// Returns value of microsecond counter
uint16_t timers_micros(void)
{
 80018a4:	b510      	push	{r4, lr}
    return (uint16_t)lptimer_get_counter(LPTIM1);
 80018a6:	4802      	ldr	r0, [pc, #8]	; (80018b0 <timers_micros+0xc>)
 80018a8:	f000 facc 	bl	8001e44 <lptimer_get_counter>
}
 80018ac:	bd10      	pop	{r4, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	40007c00 	.word	0x40007c00

080018b4 <timers_tim6_init>:


// Setup TIM6 as millisecond counter. Clocked by APB1
void timers_tim6_init(void)
{
 80018b4:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_TIM6);
    timer_disable_counter(TIM6);
 80018b6:	4c08      	ldr	r4, [pc, #32]	; (80018d8 <timers_tim6_init+0x24>)
    rcc_periph_clock_enable(RCC_TIM6);
 80018b8:	4808      	ldr	r0, [pc, #32]	; (80018dc <timers_tim6_init+0x28>)
 80018ba:	f000 fbcd 	bl	8002058 <rcc_periph_clock_enable>
    timer_disable_counter(TIM6);
 80018be:	0020      	movs	r0, r4
 80018c0:	f000 fc39 	bl	8002136 <timer_disable_counter>
    timer_set_prescaler(TIM6, (2097 - 1));
 80018c4:	2183      	movs	r1, #131	; 0x83
 80018c6:	0020      	movs	r0, r4
 80018c8:	0109      	lsls	r1, r1, #4
 80018ca:	f000 fc39 	bl	8002140 <timer_set_prescaler>
    timer_enable_counter(TIM6);
 80018ce:	0020      	movs	r0, r4
 80018d0:	f000 fc2c 	bl	800212c <timer_enable_counter>
}
 80018d4:	bd10      	pop	{r4, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	40001000 	.word	0x40001000
 80018dc:	00000704 	.word	0x00000704

080018e0 <timers_delay_milliseconds>:

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_milliseconds(uint32_t delay_milliseconds)
{
 80018e0:	b570      	push	{r4, r5, r6, lr}
 80018e2:	0004      	movs	r4, r0
    uint32_t curr_time = timer_get_counter(TIM6);
 80018e4:	4807      	ldr	r0, [pc, #28]	; (8001904 <timers_delay_milliseconds+0x24>)
 80018e6:	f000 fc2d 	bl	8002144 <timer_get_counter>
 80018ea:	4b07      	ldr	r3, [pc, #28]	; (8001908 <timers_delay_milliseconds+0x28>)
 80018ec:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_milliseconds > 65000)
 80018ee:	429c      	cmp	r4, r3
 80018f0:	d900      	bls.n	80018f4 <timers_delay_milliseconds+0x14>
 80018f2:	001c      	movs	r4, r3
        delay_milliseconds = 65000;

    while (timer_get_counter(TIM6) - curr_time < delay_milliseconds);
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <timers_delay_milliseconds+0x24>)
 80018f6:	f000 fc25 	bl	8002144 <timer_get_counter>
 80018fa:	1b40      	subs	r0, r0, r5
 80018fc:	42a0      	cmp	r0, r4
 80018fe:	d3f9      	bcc.n	80018f4 <timers_delay_milliseconds+0x14>
}
 8001900:	bd70      	pop	{r4, r5, r6, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	40001000 	.word	0x40001000
 8001908:	0000fde8 	.word	0x0000fde8

0800190c <timeout_init>:


// Timout functions
void timeout_init(void)
{
    timeout_counter     = 0; 
 800190c:	2200      	movs	r2, #0
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <timeout_init+0x14>)
{
 8001910:	b510      	push	{r4, lr}
    timeout_counter     = 0; 
 8001912:	601a      	str	r2, [r3, #0]
    // timeout_counter     = 2140483648; 
    timeout_timer       = timers_micros(); 
 8001914:	f7ff ffc6 	bl	80018a4 <timers_micros>
 8001918:	4b02      	ldr	r3, [pc, #8]	; (8001924 <timeout_init+0x18>)
 800191a:	8018      	strh	r0, [r3, #0]
}
 800191c:	bd10      	pop	{r4, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	20000248 	.word	0x20000248
 8001924:	2000024c 	.word	0x2000024c

08001928 <timeout>:

bool timeout(uint32_t time_microseconds, char *msg, uint32_t data)
{
 8001928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800192a:	0015      	movs	r5, r2
 800192c:	000c      	movs	r4, r1
 800192e:	9001      	str	r0, [sp, #4]
    timeout_counter    += (uint16_t)(timers_micros() - timeout_timer);
 8001930:	f7ff ffb8 	bl	80018a4 <timers_micros>
 8001934:	4f0b      	ldr	r7, [pc, #44]	; (8001964 <timeout+0x3c>)
 8001936:	4e0c      	ldr	r6, [pc, #48]	; (8001968 <timeout+0x40>)
 8001938:	883b      	ldrh	r3, [r7, #0]
 800193a:	1ac0      	subs	r0, r0, r3
 800193c:	6833      	ldr	r3, [r6, #0]
 800193e:	b280      	uxth	r0, r0
 8001940:	18c0      	adds	r0, r0, r3
 8001942:	6030      	str	r0, [r6, #0]
    timeout_timer       = timers_micros();
 8001944:	f7ff ffae 	bl	80018a4 <timers_micros>

    // spf_serial_printf("%u\n", timeout_counter);

    if(timeout_counter > time_microseconds)
 8001948:	6833      	ldr	r3, [r6, #0]
 800194a:	9a01      	ldr	r2, [sp, #4]
    timeout_timer       = timers_micros();
 800194c:	8038      	strh	r0, [r7, #0]
    {
        spf_serial_printf("Timeout %s %08X\n", msg, data);
        return true;
    }
    else    
        return false;
 800194e:	2000      	movs	r0, #0
    if(timeout_counter > time_microseconds)
 8001950:	4293      	cmp	r3, r2
 8001952:	d905      	bls.n	8001960 <timeout+0x38>
        spf_serial_printf("Timeout %s %08X\n", msg, data);
 8001954:	002a      	movs	r2, r5
 8001956:	0021      	movs	r1, r4
 8001958:	4804      	ldr	r0, [pc, #16]	; (800196c <timeout+0x44>)
 800195a:	f7ff febb 	bl	80016d4 <spf_serial_printf>
        return true;
 800195e:	2001      	movs	r0, #1
}
 8001960:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	2000024c 	.word	0x2000024c
 8001968:	20000248 	.word	0x20000248
 800196c:	08003822 	.word	0x08003822

08001970 <set_gpio_for_standby>:

void set_gpio_for_standby(void)
{   
 8001970:	b570      	push	{r4, r5, r6, lr}
    // Common
    // LED
    gpio_mode_setup(LED_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, LED);
 8001972:	2580      	movs	r5, #128	; 0x80
 8001974:	24a0      	movs	r4, #160	; 0xa0
 8001976:	01ed      	lsls	r5, r5, #7
 8001978:	05e4      	lsls	r4, r4, #23
 800197a:	002b      	movs	r3, r5
 800197c:	2200      	movs	r2, #0
 800197e:	0020      	movs	r0, r4
 8001980:	2103      	movs	r1, #3
 8001982:	f000 f96f 	bl	8001c64 <gpio_mode_setup>
    gpio_set(LED_PORT, LED);
 8001986:	0029      	movs	r1, r5
 8001988:	0020      	movs	r0, r4
 800198a:	f000 f963 	bl	8001c54 <gpio_set>

    // Serial Print
    gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, SPF_USART_TX);
 800198e:	0020      	movs	r0, r4
 8001990:	2304      	movs	r3, #4
 8001992:	2201      	movs	r2, #1
 8001994:	2100      	movs	r1, #0
 8001996:	f000 f965 	bl	8001c64 <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE,  SPF_USART_RX);
 800199a:	2308      	movs	r3, #8
 800199c:	2200      	movs	r2, #0
 800199e:	0020      	movs	r0, r4
 80019a0:	2101      	movs	r1, #1
 80019a2:	f000 f95f 	bl	8001c64 <gpio_mode_setup>
	gpio_set(SPF_USART_RX_PORT, SPF_USART_RX);
 80019a6:	0020      	movs	r0, r4
 80019a8:	2108      	movs	r1, #8
 80019aa:	f000 f953 	bl	8001c54 <gpio_set>

    // Batt Sense
    gpio_mode_setup(BATT_SENS_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, BATT_SENS);
 80019ae:	0020      	movs	r0, r4
 80019b0:	2301      	movs	r3, #1
 80019b2:	2200      	movs	r2, #0
 80019b4:	2103      	movs	r1, #3
 80019b6:	f000 f955 	bl	8001c64 <gpio_mode_setup>
    
    // RFM
    // SPI
    gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_ANALOG,   GPIO_PUPD_NONE,       RFM_SPI_MISO);
 80019ba:	0020      	movs	r0, r4
 80019bc:	2340      	movs	r3, #64	; 0x40
 80019be:	2200      	movs	r2, #0
 80019c0:	2103      	movs	r1, #3
 80019c2:	f000 f94f 	bl	8001c64 <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_SCK_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_SCK);
 80019c6:	0020      	movs	r0, r4
 80019c8:	2320      	movs	r3, #32
 80019ca:	2202      	movs	r2, #2
 80019cc:	2100      	movs	r1, #0
 80019ce:	f000 f949 	bl	8001c64 <gpio_mode_setup>
    gpio_mode_setup(RFM_SPI_MOSI_PORT,  GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_MOSI);
 80019d2:	0020      	movs	r0, r4
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	2202      	movs	r2, #2
 80019d8:	2100      	movs	r1, #0
 80019da:	f000 f943 	bl	8001c64 <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_NSS_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_SPI_NSS);
 80019de:	0020      	movs	r0, r4
 80019e0:	2310      	movs	r3, #16
 80019e2:	2201      	movs	r2, #1
 80019e4:	2100      	movs	r1, #0
 80019e6:	f000 f93d 	bl	8001c64 <gpio_mode_setup>
    gpio_mode_setup(RFM_RESET_PORT,     GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_RESET);
 80019ea:	2301      	movs	r3, #1
 80019ec:	4c1d      	ldr	r4, [pc, #116]	; (8001a64 <set_gpio_for_standby+0xf4>)
 80019ee:	001a      	movs	r2, r3
 80019f0:	0020      	movs	r0, r4
 80019f2:	2100      	movs	r1, #0
 80019f4:	f000 f936 	bl	8001c64 <gpio_mode_setup>

    // DIO
    gpio_mode_setup(RFM_IO_0_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_0);
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	0020      	movs	r0, r4
 80019fc:	2200      	movs	r2, #0
 80019fe:	2103      	movs	r1, #3
 8001a00:	021b      	lsls	r3, r3, #8
 8001a02:	f000 f92f 	bl	8001c64 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_1_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_1);
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	0020      	movs	r0, r4
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2103      	movs	r1, #3
 8001a0e:	015b      	lsls	r3, r3, #5
 8001a10:	f000 f928 	bl	8001c64 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_2_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_2);
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	0020      	movs	r0, r4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2103      	movs	r1, #3
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	f000 f921 	bl	8001c64 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_3_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_3);
 8001a22:	0020      	movs	r0, r4
 8001a24:	2304      	movs	r3, #4
 8001a26:	2200      	movs	r2, #0
 8001a28:	2103      	movs	r1, #3
 8001a2a:	f000 f91b 	bl	8001c64 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_4_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_4);
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	0020      	movs	r0, r4
 8001a32:	2200      	movs	r2, #0
 8001a34:	2103      	movs	r1, #3
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	f000 f914 	bl	8001c64 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_5_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_5);
 8001a3c:	0020      	movs	r0, r4
 8001a3e:	2302      	movs	r3, #2
 8001a40:	2200      	movs	r2, #0
 8001a42:	2103      	movs	r1, #3
 8001a44:	f000 f90e 	bl	8001c64 <gpio_mode_setup>

    #ifdef _HUB
    #else

    // TMP
    gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	0020      	movs	r0, r4
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2100      	movs	r1, #0
 8001a50:	019b      	lsls	r3, r3, #6
 8001a52:	f000 f907 	bl	8001c64 <gpio_mode_setup>
	gpio_mode_setup(TEMP_I2C_SDA_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SDA);
 8001a56:	002b      	movs	r3, r5
 8001a58:	2201      	movs	r2, #1
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	0020      	movs	r0, r4
 8001a5e:	f000 f901 	bl	8001c64 <gpio_mode_setup>

    #endif

}
 8001a62:	bd70      	pop	{r4, r5, r6, pc}
 8001a64:	50000400 	.word	0x50000400

08001a68 <rtc_isr>:

// Override default rtc interrupt handler
void rtc_isr(void)
{ 
    exti_reset_request(EXTI20);
 8001a68:	2080      	movs	r0, #128	; 0x80
{ 
 8001a6a:	b510      	push	{r4, lr}
    exti_reset_request(EXTI20);
 8001a6c:	0340      	lsls	r0, r0, #13
 8001a6e:	f000 f85b 	bl	8001b28 <exti_reset_request>

    // scb_reset_system();

    spf_init();
 8001a72:	f7ff fdb5 	bl	80015e0 <spf_init>
    spf_serial_printf("RTC ISR\n");
 8001a76:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <rtc_isr+0x40>)
 8001a78:	f7ff fe2c 	bl	80016d4 <spf_serial_printf>

    if(RTC_ISR & RTC_ISR_WUTF)
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <rtc_isr+0x44>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	055b      	lsls	r3, r3, #21
 8001a82:	d50f      	bpl.n	8001aa4 <rtc_isr+0x3c>
    { 
        pwr_disable_backup_domain_write_protect();
 8001a84:	f000 fa02 	bl	8001e8c <pwr_disable_backup_domain_write_protect>
        rtc_unlock();
 8001a88:	f000 fb12 	bl	80020b0 <rtc_unlock>
	    rtc_clear_wakeup_flag();
 8001a8c:	f000 fb1e 	bl	80020cc <rtc_clear_wakeup_flag>
        pwr_clear_wakeup_flag();
 8001a90:	f000 fa18 	bl	8001ec4 <pwr_clear_wakeup_flag>
        pwr_clear_standby_flag();
 8001a94:	f000 fa0e 	bl	8001eb4 <pwr_clear_standby_flag>
        rtc_lock();
 8001a98:	f000 fb12 	bl	80020c0 <rtc_lock>
	    pwr_enable_backup_domain_write_protect();
 8001a9c:	f000 fa00 	bl	8001ea0 <pwr_enable_backup_domain_write_protect>
        set_gpio_for_standby();
 8001aa0:	f7ff ff66 	bl	8001970 <set_gpio_for_standby>
    }
}
 8001aa4:	bd10      	pop	{r4, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	08003833 	.word	0x08003833
 8001aac:	4000280c 	.word	0x4000280c

08001ab0 <exti_set_trigger>:
 8001ab0:	2901      	cmp	r1, #1
 8001ab2:	d00c      	beq.n	8001ace <exti_set_trigger+0x1e>
 8001ab4:	2902      	cmp	r1, #2
 8001ab6:	d013      	beq.n	8001ae0 <exti_set_trigger+0x30>
 8001ab8:	2900      	cmp	r1, #0
 8001aba:	d107      	bne.n	8001acc <exti_set_trigger+0x1c>
 8001abc:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <exti_set_trigger+0x38>)
 8001abe:	6813      	ldr	r3, [r2, #0]
 8001ac0:	4303      	orrs	r3, r0
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4a09      	ldr	r2, [pc, #36]	; (8001aec <exti_set_trigger+0x3c>)
 8001ac6:	6813      	ldr	r3, [r2, #0]
 8001ac8:	4383      	bics	r3, r0
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4770      	bx	lr
 8001ace:	4a06      	ldr	r2, [pc, #24]	; (8001ae8 <exti_set_trigger+0x38>)
 8001ad0:	6813      	ldr	r3, [r2, #0]
 8001ad2:	4383      	bics	r3, r0
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <exti_set_trigger+0x3c>)
 8001ad8:	6813      	ldr	r3, [r2, #0]
 8001ada:	4318      	orrs	r0, r3
 8001adc:	6010      	str	r0, [r2, #0]
 8001ade:	e7f5      	b.n	8001acc <exti_set_trigger+0x1c>
 8001ae0:	4a01      	ldr	r2, [pc, #4]	; (8001ae8 <exti_set_trigger+0x38>)
 8001ae2:	6813      	ldr	r3, [r2, #0]
 8001ae4:	4303      	orrs	r3, r0
 8001ae6:	e7f5      	b.n	8001ad4 <exti_set_trigger+0x24>
 8001ae8:	40010408 	.word	0x40010408
 8001aec:	4001040c 	.word	0x4001040c

08001af0 <exti_enable_request>:
 8001af0:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <exti_enable_request+0x14>)
 8001af2:	6813      	ldr	r3, [r2, #0]
 8001af4:	4303      	orrs	r3, r0
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	4a03      	ldr	r2, [pc, #12]	; (8001b08 <exti_enable_request+0x18>)
 8001afa:	6813      	ldr	r3, [r2, #0]
 8001afc:	4318      	orrs	r0, r3
 8001afe:	6010      	str	r0, [r2, #0]
 8001b00:	4770      	bx	lr
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	40010400 	.word	0x40010400
 8001b08:	40010404 	.word	0x40010404

08001b0c <exti_disable_request>:
 8001b0c:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <exti_disable_request+0x14>)
 8001b0e:	6813      	ldr	r3, [r2, #0]
 8001b10:	4383      	bics	r3, r0
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4a03      	ldr	r2, [pc, #12]	; (8001b24 <exti_disable_request+0x18>)
 8001b16:	6813      	ldr	r3, [r2, #0]
 8001b18:	4383      	bics	r3, r0
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4770      	bx	lr
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	40010400 	.word	0x40010400
 8001b24:	40010404 	.word	0x40010404

08001b28 <exti_reset_request>:
 8001b28:	4b01      	ldr	r3, [pc, #4]	; (8001b30 <exti_reset_request+0x8>)
 8001b2a:	6018      	str	r0, [r3, #0]
 8001b2c:	4770      	bx	lr
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	40010414 	.word	0x40010414

08001b34 <exti_select_source>:
 8001b34:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <exti_select_source+0x60>)
 8001b36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001b38:	18ce      	adds	r6, r1, r3
 8001b3a:	4273      	negs	r3, r6
 8001b3c:	415e      	adcs	r6, r3
 8001b3e:	2200      	movs	r2, #0
 8001b40:	9001      	str	r0, [sp, #4]
 8001b42:	0076      	lsls	r6, r6, #1
 8001b44:	2401      	movs	r4, #1
 8001b46:	0023      	movs	r3, r4
 8001b48:	4093      	lsls	r3, r2
 8001b4a:	9801      	ldr	r0, [sp, #4]
 8001b4c:	4218      	tst	r0, r3
 8001b4e:	d017      	beq.n	8001b80 <exti_select_source+0x4c>
 8001b50:	4d11      	ldr	r5, [pc, #68]	; (8001b98 <exti_select_source+0x64>)
 8001b52:	2303      	movs	r3, #3
 8001b54:	42a9      	cmp	r1, r5
 8001b56:	d005      	beq.n	8001b64 <exti_select_source+0x30>
 8001b58:	d816      	bhi.n	8001b88 <exti_select_source+0x54>
 8001b5a:	4d10      	ldr	r5, [pc, #64]	; (8001b9c <exti_select_source+0x68>)
 8001b5c:	0023      	movs	r3, r4
 8001b5e:	42a9      	cmp	r1, r5
 8001b60:	d000      	beq.n	8001b64 <exti_select_source+0x30>
 8001b62:	0033      	movs	r3, r6
 8001b64:	480e      	ldr	r0, [pc, #56]	; (8001ba0 <exti_select_source+0x6c>)
 8001b66:	2503      	movs	r5, #3
 8001b68:	0894      	lsrs	r4, r2, #2
 8001b6a:	1824      	adds	r4, r4, r0
 8001b6c:	200f      	movs	r0, #15
 8001b6e:	4015      	ands	r5, r2
 8001b70:	00ad      	lsls	r5, r5, #2
 8001b72:	40a8      	lsls	r0, r5
 8001b74:	40ab      	lsls	r3, r5
 8001b76:	00a4      	lsls	r4, r4, #2
 8001b78:	6827      	ldr	r7, [r4, #0]
 8001b7a:	4387      	bics	r7, r0
 8001b7c:	433b      	orrs	r3, r7
 8001b7e:	6023      	str	r3, [r4, #0]
 8001b80:	3201      	adds	r2, #1
 8001b82:	2a10      	cmp	r2, #16
 8001b84:	d1de      	bne.n	8001b44 <exti_select_source+0x10>
 8001b86:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001b88:	4c06      	ldr	r4, [pc, #24]	; (8001ba4 <exti_select_source+0x70>)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	42a1      	cmp	r1, r4
 8001b8e:	d1e9      	bne.n	8001b64 <exti_select_source+0x30>
 8001b90:	3307      	adds	r3, #7
 8001b92:	e7e7      	b.n	8001b64 <exti_select_source+0x30>
 8001b94:	affff800 	.word	0xaffff800
 8001b98:	50000c00 	.word	0x50000c00
 8001b9c:	50000400 	.word	0x50000400
 8001ba0:	10004002 	.word	0x10004002
 8001ba4:	50001c00 	.word	0x50001c00

08001ba8 <flash_set_ws>:
 8001ba8:	2101      	movs	r1, #1
 8001baa:	4a03      	ldr	r2, [pc, #12]	; (8001bb8 <flash_set_ws+0x10>)
 8001bac:	6813      	ldr	r3, [r2, #0]
 8001bae:	438b      	bics	r3, r1
 8001bb0:	4303      	orrs	r3, r0
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	4770      	bx	lr
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	40022000 	.word	0x40022000

08001bbc <flash_unlock_option_bytes>:
 8001bbc:	4b02      	ldr	r3, [pc, #8]	; (8001bc8 <flash_unlock_option_bytes+0xc>)
 8001bbe:	4a03      	ldr	r2, [pc, #12]	; (8001bcc <flash_unlock_option_bytes+0x10>)
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	4a03      	ldr	r2, [pc, #12]	; (8001bd0 <flash_unlock_option_bytes+0x14>)
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	4770      	bx	lr
 8001bc8:	40022014 	.word	0x40022014
 8001bcc:	fbead9c8 	.word	0xfbead9c8
 8001bd0:	24252627 	.word	0x24252627

08001bd4 <flash_unlock_pecr>:
 8001bd4:	4b02      	ldr	r3, [pc, #8]	; (8001be0 <flash_unlock_pecr+0xc>)
 8001bd6:	4a03      	ldr	r2, [pc, #12]	; (8001be4 <flash_unlock_pecr+0x10>)
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	4a03      	ldr	r2, [pc, #12]	; (8001be8 <flash_unlock_pecr+0x14>)
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	4770      	bx	lr
 8001be0:	4002200c 	.word	0x4002200c
 8001be4:	89abcdef 	.word	0x89abcdef
 8001be8:	02030405 	.word	0x02030405

08001bec <flash_lock_pecr>:
 8001bec:	2301      	movs	r3, #1
 8001bee:	4a02      	ldr	r2, [pc, #8]	; (8001bf8 <flash_lock_pecr+0xc>)
 8001bf0:	6811      	ldr	r1, [r2, #0]
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	4770      	bx	lr
 8001bf8:	40022004 	.word	0x40022004

08001bfc <flash_unlock_progmem>:
 8001bfc:	4b02      	ldr	r3, [pc, #8]	; (8001c08 <flash_unlock_progmem+0xc>)
 8001bfe:	4a03      	ldr	r2, [pc, #12]	; (8001c0c <flash_unlock_progmem+0x10>)
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	4a03      	ldr	r2, [pc, #12]	; (8001c10 <flash_unlock_progmem+0x14>)
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	4770      	bx	lr
 8001c08:	40022010 	.word	0x40022010
 8001c0c:	8c9daebf 	.word	0x8c9daebf
 8001c10:	13141516 	.word	0x13141516

08001c14 <flash_lock_progmem>:
 8001c14:	2302      	movs	r3, #2
 8001c16:	4a02      	ldr	r2, [pc, #8]	; (8001c20 <flash_lock_progmem+0xc>)
 8001c18:	6811      	ldr	r1, [r2, #0]
 8001c1a:	430b      	orrs	r3, r1
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	4770      	bx	lr
 8001c20:	40022004 	.word	0x40022004

08001c24 <flash_lock_option_bytes>:
 8001c24:	2304      	movs	r3, #4
 8001c26:	4a02      	ldr	r2, [pc, #8]	; (8001c30 <flash_lock_option_bytes+0xc>)
 8001c28:	6811      	ldr	r1, [r2, #0]
 8001c2a:	430b      	orrs	r3, r1
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4770      	bx	lr
 8001c30:	40022004 	.word	0x40022004

08001c34 <flash_unlock>:
 8001c34:	b510      	push	{r4, lr}
 8001c36:	f7ff ffcd 	bl	8001bd4 <flash_unlock_pecr>
 8001c3a:	f7ff ffdf 	bl	8001bfc <flash_unlock_progmem>
 8001c3e:	f7ff ffbd 	bl	8001bbc <flash_unlock_option_bytes>
 8001c42:	bd10      	pop	{r4, pc}

08001c44 <flash_lock>:
 8001c44:	b510      	push	{r4, lr}
 8001c46:	f7ff ffed 	bl	8001c24 <flash_lock_option_bytes>
 8001c4a:	f7ff ffe3 	bl	8001c14 <flash_lock_progmem>
 8001c4e:	f7ff ffcd 	bl	8001bec <flash_lock_pecr>
 8001c52:	bd10      	pop	{r4, pc}

08001c54 <gpio_set>:
 8001c54:	6181      	str	r1, [r0, #24]
 8001c56:	4770      	bx	lr

08001c58 <gpio_clear>:
 8001c58:	0409      	lsls	r1, r1, #16
 8001c5a:	6181      	str	r1, [r0, #24]
 8001c5c:	4770      	bx	lr

08001c5e <gpio_get>:
 8001c5e:	6900      	ldr	r0, [r0, #16]
 8001c60:	4008      	ands	r0, r1
 8001c62:	4770      	bx	lr

08001c64 <gpio_mode_setup>:
 8001c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c66:	b085      	sub	sp, #20
 8001c68:	9101      	str	r1, [sp, #4]
 8001c6a:	2703      	movs	r7, #3
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	9202      	str	r2, [sp, #8]
 8001c70:	9303      	str	r3, [sp, #12]
 8001c72:	6802      	ldr	r2, [r0, #0]
 8001c74:	68c3      	ldr	r3, [r0, #12]
 8001c76:	9c03      	ldr	r4, [sp, #12]
 8001c78:	2501      	movs	r5, #1
 8001c7a:	410c      	asrs	r4, r1
 8001c7c:	422c      	tst	r4, r5
 8001c7e:	d00a      	beq.n	8001c96 <gpio_mode_setup+0x32>
 8001c80:	003d      	movs	r5, r7
 8001c82:	004c      	lsls	r4, r1, #1
 8001c84:	40a5      	lsls	r5, r4
 8001c86:	9e01      	ldr	r6, [sp, #4]
 8001c88:	43aa      	bics	r2, r5
 8001c8a:	43ab      	bics	r3, r5
 8001c8c:	9d02      	ldr	r5, [sp, #8]
 8001c8e:	40a6      	lsls	r6, r4
 8001c90:	40a5      	lsls	r5, r4
 8001c92:	4332      	orrs	r2, r6
 8001c94:	432b      	orrs	r3, r5
 8001c96:	3101      	adds	r1, #1
 8001c98:	2910      	cmp	r1, #16
 8001c9a:	d1ec      	bne.n	8001c76 <gpio_mode_setup+0x12>
 8001c9c:	6002      	str	r2, [r0, #0]
 8001c9e:	60c3      	str	r3, [r0, #12]
 8001ca0:	b005      	add	sp, #20
 8001ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ca4 <gpio_set_output_options>:
 8001ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ca6:	9201      	str	r2, [sp, #4]
 8001ca8:	2901      	cmp	r1, #1
 8001caa:	d116      	bne.n	8001cda <gpio_set_output_options+0x36>
 8001cac:	6841      	ldr	r1, [r0, #4]
 8001cae:	4319      	orrs	r1, r3
 8001cb0:	2400      	movs	r4, #0
 8001cb2:	2601      	movs	r6, #1
 8001cb4:	2703      	movs	r7, #3
 8001cb6:	6041      	str	r1, [r0, #4]
 8001cb8:	6881      	ldr	r1, [r0, #8]
 8001cba:	001d      	movs	r5, r3
 8001cbc:	4125      	asrs	r5, r4
 8001cbe:	4235      	tst	r5, r6
 8001cc0:	d006      	beq.n	8001cd0 <gpio_set_output_options+0x2c>
 8001cc2:	003a      	movs	r2, r7
 8001cc4:	0065      	lsls	r5, r4, #1
 8001cc6:	40aa      	lsls	r2, r5
 8001cc8:	4391      	bics	r1, r2
 8001cca:	9a01      	ldr	r2, [sp, #4]
 8001ccc:	40aa      	lsls	r2, r5
 8001cce:	4311      	orrs	r1, r2
 8001cd0:	3401      	adds	r4, #1
 8001cd2:	2c10      	cmp	r4, #16
 8001cd4:	d1f1      	bne.n	8001cba <gpio_set_output_options+0x16>
 8001cd6:	6081      	str	r1, [r0, #8]
 8001cd8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001cda:	6841      	ldr	r1, [r0, #4]
 8001cdc:	4399      	bics	r1, r3
 8001cde:	e7e7      	b.n	8001cb0 <gpio_set_output_options+0xc>

08001ce0 <gpio_set_af>:
 8001ce0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	2601      	movs	r6, #1
 8001ce6:	270f      	movs	r7, #15
 8001ce8:	6a04      	ldr	r4, [r0, #32]
 8001cea:	9100      	str	r1, [sp, #0]
 8001cec:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001cee:	9201      	str	r2, [sp, #4]
 8001cf0:	9d01      	ldr	r5, [sp, #4]
 8001cf2:	411d      	asrs	r5, r3
 8001cf4:	4235      	tst	r5, r6
 8001cf6:	d006      	beq.n	8001d06 <gpio_set_af+0x26>
 8001cf8:	003a      	movs	r2, r7
 8001cfa:	009d      	lsls	r5, r3, #2
 8001cfc:	40aa      	lsls	r2, r5
 8001cfe:	4394      	bics	r4, r2
 8001d00:	9a00      	ldr	r2, [sp, #0]
 8001d02:	40aa      	lsls	r2, r5
 8001d04:	4314      	orrs	r4, r2
 8001d06:	3301      	adds	r3, #1
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d1f1      	bne.n	8001cf0 <gpio_set_af+0x10>
 8001d0c:	2601      	movs	r6, #1
 8001d0e:	270f      	movs	r7, #15
 8001d10:	9a01      	ldr	r2, [sp, #4]
 8001d12:	411a      	asrs	r2, r3
 8001d14:	4232      	tst	r2, r6
 8001d16:	d007      	beq.n	8001d28 <gpio_set_af+0x48>
 8001d18:	003a      	movs	r2, r7
 8001d1a:	009d      	lsls	r5, r3, #2
 8001d1c:	3d20      	subs	r5, #32
 8001d1e:	40aa      	lsls	r2, r5
 8001d20:	4391      	bics	r1, r2
 8001d22:	9a00      	ldr	r2, [sp, #0]
 8001d24:	40aa      	lsls	r2, r5
 8001d26:	4311      	orrs	r1, r2
 8001d28:	3301      	adds	r3, #1
 8001d2a:	2b10      	cmp	r3, #16
 8001d2c:	d1f0      	bne.n	8001d10 <gpio_set_af+0x30>
 8001d2e:	6204      	str	r4, [r0, #32]
 8001d30:	6241      	str	r1, [r0, #36]	; 0x24
 8001d32:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001d34 <i2c_peripheral_enable>:
 * @param[in] i2c Unsigned int32. I2C register base address @ref i2c_reg_base.
 */

void i2c_peripheral_enable(uint32_t i2c)
{
	I2C_CR1(i2c) |= I2C_CR1_PE;
 8001d34:	2301      	movs	r3, #1
 8001d36:	6802      	ldr	r2, [r0, #0]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	6003      	str	r3, [r0, #0]
}
 8001d3c:	4770      	bx	lr

08001d3e <i2c_peripheral_disable>:
 * @param[in] i2c Unsigned int32. I2C register base address @ref i2c_reg_base.
 */

void i2c_peripheral_disable(uint32_t i2c)
{
	I2C_CR1(i2c) &= ~I2C_CR1_PE;
 8001d3e:	2201      	movs	r2, #1
 8001d40:	6803      	ldr	r3, [r0, #0]
 8001d42:	4393      	bics	r3, r2
 8001d44:	6003      	str	r3, [r0, #0]
}
 8001d46:	4770      	bx	lr

08001d48 <i2c_send_start>:
 * @param[in] i2c Unsigned int32. I2C register base address @ref i2c_reg_base.
 */

void i2c_send_start(uint32_t i2c)
{
	I2C_CR2(i2c) |= I2C_CR2_START;
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	6842      	ldr	r2, [r0, #4]
 8001d4c:	019b      	lsls	r3, r3, #6
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	6043      	str	r3, [r0, #4]
}
 8001d52:	4770      	bx	lr

08001d54 <i2c_send_stop>:
 * @param[in] i2c Unsigned int32. I2C register base address @ref i2c_reg_base.
 */

void i2c_send_stop(uint32_t i2c)
{
	I2C_CR2(i2c) |= I2C_CR2_STOP;
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	6842      	ldr	r2, [r0, #4]
 8001d58:	01db      	lsls	r3, r3, #7
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	6043      	str	r3, [r0, #4]
}
 8001d5e:	4770      	bx	lr

08001d60 <i2c_clear_stop>:
 *
 * @param[in] i2c Unsigned int32. I2C register base address @ref i2c_reg_base.
 */
void i2c_clear_stop(uint32_t i2c)
{
	I2C_ICR(i2c) |= I2C_ICR_STOPCF;
 8001d60:	2320      	movs	r3, #32
 8001d62:	69c2      	ldr	r2, [r0, #28]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61c3      	str	r3, [r0, #28]
}
 8001d68:	4770      	bx	lr

08001d6a <i2c_send_data>:
 * @param[in] data Unsigned int8. Byte to send.
 */

void i2c_send_data(uint32_t i2c, uint8_t data)
{
	I2C_TXDR(i2c) = data;
 8001d6a:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001d6c:	4770      	bx	lr

08001d6e <i2c_get_data>:
 *
 * @param[in] i2c Unsigned int32. I2C register base address @ref i2c_reg_base.
 */
uint8_t i2c_get_data(uint32_t i2c)
{
	return I2C_RXDR(i2c) & 0xff;
 8001d6e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001d70:	b2c0      	uxtb	r0, r0
}
 8001d72:	4770      	bx	lr

08001d74 <i2c_set_prescaler>:
}

/* t_presc= (presc+1)*t_i2cclk */
void i2c_set_prescaler(uint32_t i2c, uint8_t presc)
{
	I2C_TIMINGR(i2c) = (I2C_TIMINGR(i2c) & ~I2C_TIMINGR_PRESC_MASK) |
 8001d74:	6903      	ldr	r3, [r0, #16]
			   (presc << I2C_TIMINGR_PRESC_SHIFT);
 8001d76:	0709      	lsls	r1, r1, #28
	I2C_TIMINGR(i2c) = (I2C_TIMINGR(i2c) & ~I2C_TIMINGR_PRESC_MASK) |
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	6103      	str	r3, [r0, #16]
}
 8001d80:	4770      	bx	lr
	...

08001d84 <i2c_set_data_setup_time>:

void i2c_set_data_setup_time(uint32_t i2c, uint8_t s_time)
{
	I2C_TIMINGR(i2c) = (I2C_TIMINGR(i2c) & ~I2C_TIMINGR_SCLDEL_MASK) |
 8001d84:	6903      	ldr	r3, [r0, #16]
 8001d86:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <i2c_set_data_setup_time+0x10>)
			   (s_time << I2C_TIMINGR_SCLDEL_SHIFT);
 8001d88:	0509      	lsls	r1, r1, #20
	I2C_TIMINGR(i2c) = (I2C_TIMINGR(i2c) & ~I2C_TIMINGR_SCLDEL_MASK) |
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	6103      	str	r3, [r0, #16]
}
 8001d90:	4770      	bx	lr
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	ff0fffff 	.word	0xff0fffff

08001d98 <i2c_set_data_hold_time>:

void i2c_set_data_hold_time(uint32_t i2c, uint8_t h_time)
{
	I2C_TIMINGR(i2c) = (I2C_TIMINGR(i2c) & ~I2C_TIMINGR_SDADEL_MASK) |
 8001d98:	6903      	ldr	r3, [r0, #16]
 8001d9a:	4a03      	ldr	r2, [pc, #12]	; (8001da8 <i2c_set_data_hold_time+0x10>)
			   (h_time << I2C_TIMINGR_SDADEL_SHIFT);
 8001d9c:	0409      	lsls	r1, r1, #16
	I2C_TIMINGR(i2c) = (I2C_TIMINGR(i2c) & ~I2C_TIMINGR_SDADEL_MASK) |
 8001d9e:	4013      	ands	r3, r2
 8001da0:	430b      	orrs	r3, r1
 8001da2:	6103      	str	r3, [r0, #16]
}
 8001da4:	4770      	bx	lr
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	fff0ffff 	.word	0xfff0ffff

08001dac <i2c_set_scl_high_period>:

void i2c_set_scl_high_period(uint32_t i2c, uint8_t period)
{
	I2C_TIMINGR(i2c) = (I2C_TIMINGR(i2c) & ~I2C_TIMINGR_SCLH_MASK) |
 8001dac:	6903      	ldr	r3, [r0, #16]
 8001dae:	4a03      	ldr	r2, [pc, #12]	; (8001dbc <i2c_set_scl_high_period+0x10>)
			   (period << I2C_TIMINGR_SCLH_SHIFT);
 8001db0:	0209      	lsls	r1, r1, #8
	I2C_TIMINGR(i2c) = (I2C_TIMINGR(i2c) & ~I2C_TIMINGR_SCLH_MASK) |
 8001db2:	4013      	ands	r3, r2
 8001db4:	430b      	orrs	r3, r1
 8001db6:	6103      	str	r3, [r0, #16]
}
 8001db8:	4770      	bx	lr
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	ffff00ff 	.word	0xffff00ff

08001dc0 <i2c_set_scl_low_period>:

void i2c_set_scl_low_period(uint32_t i2c, uint8_t period)
{
	I2C_TIMINGR(i2c) = (I2C_TIMINGR(i2c) & ~I2C_TIMINGR_SCLL_MASK) |
 8001dc0:	22ff      	movs	r2, #255	; 0xff
 8001dc2:	6903      	ldr	r3, [r0, #16]
 8001dc4:	4393      	bics	r3, r2
 8001dc6:	430b      	orrs	r3, r1
 8001dc8:	6103      	str	r3, [r0, #16]
			   (period << I2C_TIMINGR_SCLL_SHIFT);
}
 8001dca:	4770      	bx	lr

08001dcc <i2c_set_7bit_address>:
}

void i2c_set_7bit_address(uint32_t i2c, uint8_t addr)
{
	I2C_CR2(i2c) = (I2C_CR2(i2c) & ~I2C_CR2_SADD_7BIT_MASK) |
		       ((addr & 0x7F) << I2C_CR2_SADD_7BIT_SHIFT);
 8001dcc:	22ff      	movs	r2, #255	; 0xff
	I2C_CR2(i2c) = (I2C_CR2(i2c) & ~I2C_CR2_SADD_7BIT_MASK) |
 8001dce:	6843      	ldr	r3, [r0, #4]
		       ((addr & 0x7F) << I2C_CR2_SADD_7BIT_SHIFT);
 8001dd0:	0049      	lsls	r1, r1, #1
 8001dd2:	4011      	ands	r1, r2
	I2C_CR2(i2c) = (I2C_CR2(i2c) & ~I2C_CR2_SADD_7BIT_MASK) |
 8001dd4:	3a01      	subs	r2, #1
 8001dd6:	4393      	bics	r3, r2
 8001dd8:	4319      	orrs	r1, r3
 8001dda:	6041      	str	r1, [r0, #4]
}
 8001ddc:	4770      	bx	lr
	...

08001de0 <i2c_set_write_transfer_dir>:
		       ((addr & 0x3FF) << I2C_CR2_SADD_10BIT_SHIFT);
}

void i2c_set_write_transfer_dir(uint32_t i2c)
{
	I2C_CR2(i2c) &= ~I2C_CR2_RD_WRN;
 8001de0:	6843      	ldr	r3, [r0, #4]
 8001de2:	4a02      	ldr	r2, [pc, #8]	; (8001dec <i2c_set_write_transfer_dir+0xc>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	6043      	str	r3, [r0, #4]
}
 8001de8:	4770      	bx	lr
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	fffffbff 	.word	0xfffffbff

08001df0 <i2c_set_read_transfer_dir>:

void i2c_set_read_transfer_dir(uint32_t i2c)
{
	I2C_CR2(i2c) |= I2C_CR2_RD_WRN;
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	6842      	ldr	r2, [r0, #4]
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4313      	orrs	r3, r2
 8001df8:	6043      	str	r3, [r0, #4]
}
 8001dfa:	4770      	bx	lr

08001dfc <i2c_set_bytes_to_transfer>:

void i2c_set_bytes_to_transfer(uint32_t i2c, uint32_t n_bytes)
{
	I2C_CR2(i2c) = (I2C_CR2(i2c) & ~I2C_CR2_NBYTES_MASK) |
 8001dfc:	6843      	ldr	r3, [r0, #4]
 8001dfe:	4a03      	ldr	r2, [pc, #12]	; (8001e0c <i2c_set_bytes_to_transfer+0x10>)
		       (n_bytes << I2C_CR2_NBYTES_SHIFT);
 8001e00:	0409      	lsls	r1, r1, #16
	I2C_CR2(i2c) = (I2C_CR2(i2c) & ~I2C_CR2_NBYTES_MASK) |
 8001e02:	4013      	ands	r3, r2
 8001e04:	430b      	orrs	r3, r1
 8001e06:	6043      	str	r3, [r0, #4]
}
 8001e08:	4770      	bx	lr
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	ff00ffff 	.word	0xff00ffff

08001e10 <i2c_enable_autoend>:
	return (I2C_CR2(i2c) & I2C_CR2_START);
}

void i2c_enable_autoend(uint32_t i2c)
{
	I2C_CR2(i2c) |= I2C_CR2_AUTOEND;
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	6842      	ldr	r2, [r0, #4]
 8001e14:	049b      	lsls	r3, r3, #18
 8001e16:	4313      	orrs	r3, r2
 8001e18:	6043      	str	r3, [r0, #4]
}
 8001e1a:	4770      	bx	lr

08001e1c <i2c_disable_autoend>:

void i2c_disable_autoend(uint32_t i2c)
{
	I2C_CR2(i2c) &= ~I2C_CR2_AUTOEND;
 8001e1c:	6843      	ldr	r3, [r0, #4]
 8001e1e:	4a02      	ldr	r2, [pc, #8]	; (8001e28 <i2c_disable_autoend+0xc>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	6043      	str	r3, [r0, #4]
}
 8001e24:	4770      	bx	lr
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	fdffffff 	.word	0xfdffffff

08001e2c <i2c_transmit_int_status>:
	return (I2C_ISR(i2c) & I2C_ISR_BUSY);
}

bool i2c_transmit_int_status(uint32_t i2c)
{
	return (I2C_ISR(i2c) & I2C_ISR_TXIS);
 8001e2c:	6980      	ldr	r0, [r0, #24]
 8001e2e:	0780      	lsls	r0, r0, #30
 8001e30:	0fc0      	lsrs	r0, r0, #31
}
 8001e32:	4770      	bx	lr

08001e34 <i2c_transfer_complete>:

bool i2c_transfer_complete(uint32_t i2c)
{
	return (I2C_ISR(i2c) & I2C_ISR_TC);
 8001e34:	6980      	ldr	r0, [r0, #24]
 8001e36:	0640      	lsls	r0, r0, #25
 8001e38:	0fc0      	lsrs	r0, r0, #31
}
 8001e3a:	4770      	bx	lr

08001e3c <i2c_received_data>:

bool i2c_received_data(uint32_t i2c)
{
	return (I2C_ISR(i2c) & I2C_ISR_RXNE);
 8001e3c:	6980      	ldr	r0, [r0, #24]
 8001e3e:	0740      	lsls	r0, r0, #29
 8001e40:	0fc0      	lsrs	r0, r0, #31
}
 8001e42:	4770      	bx	lr

08001e44 <lptimer_get_counter>:
 8001e44:	69c0      	ldr	r0, [r0, #28]
 8001e46:	b280      	uxth	r0, r0
 8001e48:	4770      	bx	lr

08001e4a <lptimer_enable>:
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	6902      	ldr	r2, [r0, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	6103      	str	r3, [r0, #16]
 8001e52:	4770      	bx	lr

08001e54 <lptimer_start_counter>:
 8001e54:	6903      	ldr	r3, [r0, #16]
 8001e56:	430b      	orrs	r3, r1
 8001e58:	6103      	str	r3, [r0, #16]
 8001e5a:	4770      	bx	lr

08001e5c <lptimer_set_prescaler>:
 8001e5c:	68c3      	ldr	r3, [r0, #12]
 8001e5e:	4a02      	ldr	r2, [pc, #8]	; (8001e68 <lptimer_set_prescaler+0xc>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	430b      	orrs	r3, r1
 8001e64:	60c3      	str	r3, [r0, #12]
 8001e66:	4770      	bx	lr
 8001e68:	fffff1ff 	.word	0xfffff1ff

08001e6c <lptimer_enable_trigger>:
 8001e6c:	68c3      	ldr	r3, [r0, #12]
 8001e6e:	4a02      	ldr	r2, [pc, #8]	; (8001e78 <lptimer_enable_trigger+0xc>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	430b      	orrs	r3, r1
 8001e74:	60c3      	str	r3, [r0, #12]
 8001e76:	4770      	bx	lr
 8001e78:	fff1ffff 	.word	0xfff1ffff

08001e7c <lptimer_set_period>:
 8001e7c:	6181      	str	r1, [r0, #24]
 8001e7e:	4770      	bx	lr

08001e80 <lptimer_set_internal_clock_source>:
 8001e80:	2201      	movs	r2, #1
 8001e82:	68c3      	ldr	r3, [r0, #12]
 8001e84:	4393      	bics	r3, r2
 8001e86:	60c3      	str	r3, [r0, #12]
 8001e88:	4770      	bx	lr
	...

08001e8c <pwr_disable_backup_domain_write_protect>:
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	4a03      	ldr	r2, [pc, #12]	; (8001e9c <pwr_disable_backup_domain_write_protect+0x10>)
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	6811      	ldr	r1, [r2, #0]
 8001e94:	430b      	orrs	r3, r1
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4770      	bx	lr
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	40007000 	.word	0x40007000

08001ea0 <pwr_enable_backup_domain_write_protect>:
 8001ea0:	4a02      	ldr	r2, [pc, #8]	; (8001eac <pwr_enable_backup_domain_write_protect+0xc>)
 8001ea2:	4903      	ldr	r1, [pc, #12]	; (8001eb0 <pwr_enable_backup_domain_write_protect+0x10>)
 8001ea4:	6813      	ldr	r3, [r2, #0]
 8001ea6:	400b      	ands	r3, r1
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4770      	bx	lr
 8001eac:	40007000 	.word	0x40007000
 8001eb0:	fffffeff 	.word	0xfffffeff

08001eb4 <pwr_clear_standby_flag>:
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	4a02      	ldr	r2, [pc, #8]	; (8001ec0 <pwr_clear_standby_flag+0xc>)
 8001eb8:	6811      	ldr	r1, [r2, #0]
 8001eba:	430b      	orrs	r3, r1
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	4770      	bx	lr
 8001ec0:	40007000 	.word	0x40007000

08001ec4 <pwr_clear_wakeup_flag>:
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	4a02      	ldr	r2, [pc, #8]	; (8001ed0 <pwr_clear_wakeup_flag+0xc>)
 8001ec8:	6811      	ldr	r1, [r2, #0]
 8001eca:	430b      	orrs	r3, r1
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4770      	bx	lr
 8001ed0:	40007000 	.word	0x40007000

08001ed4 <rcc_osc_on>:
 8001ed4:	b500      	push	{lr}
 8001ed6:	2806      	cmp	r0, #6
 8001ed8:	d80b      	bhi.n	8001ef2 <rcc_osc_on+0x1e>
 8001eda:	f000 fa37 	bl	800234c <__gnu_thumb1_case_uqi>
 8001ede:	1004      	.short	0x1004
 8001ee0:	1b0b1915 	.word	0x1b0b1915
 8001ee4:	1d          	.byte	0x1d
 8001ee5:	00          	.byte	0x00
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <rcc_osc_on+0x48>)
 8001eea:	045b      	lsls	r3, r3, #17
 8001eec:	6811      	ldr	r1, [r2, #0]
 8001eee:	430b      	orrs	r3, r1
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	bd00      	pop	{pc}
 8001ef4:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <rcc_osc_on+0x48>)
 8001ef6:	2380      	movs	r3, #128	; 0x80
 8001ef8:	6811      	ldr	r1, [r2, #0]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	e7f7      	b.n	8001eee <rcc_osc_on+0x1a>
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	4a06      	ldr	r2, [pc, #24]	; (8001f1c <rcc_osc_on+0x48>)
 8001f02:	025b      	lsls	r3, r3, #9
 8001f04:	6811      	ldr	r1, [r2, #0]
 8001f06:	e7f2      	b.n	8001eee <rcc_osc_on+0x1a>
 8001f08:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <rcc_osc_on+0x4c>)
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	6811      	ldr	r1, [r2, #0]
 8001f0e:	e7ee      	b.n	8001eee <rcc_osc_on+0x1a>
 8001f10:	4a02      	ldr	r2, [pc, #8]	; (8001f1c <rcc_osc_on+0x48>)
 8001f12:	e7fa      	b.n	8001f0a <rcc_osc_on+0x36>
 8001f14:	4a03      	ldr	r2, [pc, #12]	; (8001f24 <rcc_osc_on+0x50>)
 8001f16:	e7ee      	b.n	8001ef6 <rcc_osc_on+0x22>
 8001f18:	4a02      	ldr	r2, [pc, #8]	; (8001f24 <rcc_osc_on+0x50>)
 8001f1a:	e7f6      	b.n	8001f0a <rcc_osc_on+0x36>
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40021008 	.word	0x40021008
 8001f24:	40021050 	.word	0x40021050

08001f28 <rcc_is_osc_ready>:
 8001f28:	2300      	movs	r3, #0
 8001f2a:	b500      	push	{lr}
 8001f2c:	2806      	cmp	r0, #6
 8001f2e:	d80a      	bhi.n	8001f46 <rcc_is_osc_ready+0x1e>
 8001f30:	3301      	adds	r3, #1
 8001f32:	f000 fa0b 	bl	800234c <__gnu_thumb1_case_uqi>
 8001f36:	0a04      	.short	0x0a04
 8001f38:	1a160e12 	.word	0x1a160e12
 8001f3c:	1c          	.byte	0x1c
 8001f3d:	00          	.byte	0x00
 8001f3e:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <rcc_is_osc_ready+0x4c>)
 8001f40:	6810      	ldr	r0, [r2, #0]
 8001f42:	0e40      	lsrs	r0, r0, #25
 8001f44:	4003      	ands	r3, r0
 8001f46:	0018      	movs	r0, r3
 8001f48:	bd00      	pop	{pc}
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <rcc_is_osc_ready+0x4c>)
 8001f4c:	6810      	ldr	r0, [r2, #0]
 8001f4e:	0c40      	lsrs	r0, r0, #17
 8001f50:	e7f8      	b.n	8001f44 <rcc_is_osc_ready+0x1c>
 8001f52:	4a08      	ldr	r2, [pc, #32]	; (8001f74 <rcc_is_osc_ready+0x4c>)
 8001f54:	6810      	ldr	r0, [r2, #0]
 8001f56:	0880      	lsrs	r0, r0, #2
 8001f58:	e7f4      	b.n	8001f44 <rcc_is_osc_ready+0x1c>
 8001f5a:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <rcc_is_osc_ready+0x50>)
 8001f5c:	6810      	ldr	r0, [r2, #0]
 8001f5e:	0840      	lsrs	r0, r0, #1
 8001f60:	e7f0      	b.n	8001f44 <rcc_is_osc_ready+0x1c>
 8001f62:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <rcc_is_osc_ready+0x4c>)
 8001f64:	6810      	ldr	r0, [r2, #0]
 8001f66:	0a40      	lsrs	r0, r0, #9
 8001f68:	e7ec      	b.n	8001f44 <rcc_is_osc_ready+0x1c>
 8001f6a:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <rcc_is_osc_ready+0x54>)
 8001f6c:	e7fa      	b.n	8001f64 <rcc_is_osc_ready+0x3c>
 8001f6e:	4a03      	ldr	r2, [pc, #12]	; (8001f7c <rcc_is_osc_ready+0x54>)
 8001f70:	e7f4      	b.n	8001f5c <rcc_is_osc_ready+0x34>
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40021008 	.word	0x40021008
 8001f7c:	40021050 	.word	0x40021050

08001f80 <rcc_wait_for_osc_ready>:
 8001f80:	b510      	push	{r4, lr}
 8001f82:	0004      	movs	r4, r0
 8001f84:	0020      	movs	r0, r4
 8001f86:	f7ff ffcf 	bl	8001f28 <rcc_is_osc_ready>
 8001f8a:	2800      	cmp	r0, #0
 8001f8c:	d0fa      	beq.n	8001f84 <rcc_wait_for_osc_ready+0x4>
 8001f8e:	bd10      	pop	{r4, pc}

08001f90 <rcc_set_ppre1>:
 8001f90:	4a03      	ldr	r2, [pc, #12]	; (8001fa0 <rcc_set_ppre1+0x10>)
 8001f92:	4904      	ldr	r1, [pc, #16]	; (8001fa4 <rcc_set_ppre1+0x14>)
 8001f94:	6813      	ldr	r3, [r2, #0]
 8001f96:	0200      	lsls	r0, r0, #8
 8001f98:	400b      	ands	r3, r1
 8001f9a:	4318      	orrs	r0, r3
 8001f9c:	6010      	str	r0, [r2, #0]
 8001f9e:	4770      	bx	lr
 8001fa0:	4002100c 	.word	0x4002100c
 8001fa4:	fffff8ff 	.word	0xfffff8ff

08001fa8 <rcc_set_ppre2>:
 8001fa8:	4a03      	ldr	r2, [pc, #12]	; (8001fb8 <rcc_set_ppre2+0x10>)
 8001faa:	4904      	ldr	r1, [pc, #16]	; (8001fbc <rcc_set_ppre2+0x14>)
 8001fac:	6813      	ldr	r3, [r2, #0]
 8001fae:	02c0      	lsls	r0, r0, #11
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	4318      	orrs	r0, r3
 8001fb4:	6010      	str	r0, [r2, #0]
 8001fb6:	4770      	bx	lr
 8001fb8:	4002100c 	.word	0x4002100c
 8001fbc:	ffffc7ff 	.word	0xffffc7ff

08001fc0 <rcc_set_hpre>:
 8001fc0:	21f0      	movs	r1, #240	; 0xf0
 8001fc2:	4a03      	ldr	r2, [pc, #12]	; (8001fd0 <rcc_set_hpre+0x10>)
 8001fc4:	0100      	lsls	r0, r0, #4
 8001fc6:	6813      	ldr	r3, [r2, #0]
 8001fc8:	438b      	bics	r3, r1
 8001fca:	4318      	orrs	r0, r3
 8001fcc:	6010      	str	r0, [r2, #0]
 8001fce:	4770      	bx	lr
 8001fd0:	4002100c 	.word	0x4002100c

08001fd4 <rcc_set_msi_range>:
 8001fd4:	4a03      	ldr	r2, [pc, #12]	; (8001fe4 <rcc_set_msi_range+0x10>)
 8001fd6:	4904      	ldr	r1, [pc, #16]	; (8001fe8 <rcc_set_msi_range+0x14>)
 8001fd8:	6813      	ldr	r3, [r2, #0]
 8001fda:	0340      	lsls	r0, r0, #13
 8001fdc:	400b      	ands	r3, r1
 8001fde:	4318      	orrs	r0, r3
 8001fe0:	6010      	str	r0, [r2, #0]
 8001fe2:	4770      	bx	lr
 8001fe4:	40021004 	.word	0x40021004
 8001fe8:	ffff1fff 	.word	0xffff1fff

08001fec <rcc_set_peripheral_clk_sel>:
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <rcc_set_peripheral_clk_sel+0x50>)
 8001fee:	000a      	movs	r2, r1
 8001ff0:	b510      	push	{r4, lr}
 8001ff2:	4298      	cmp	r0, r3
 8001ff4:	d01c      	beq.n	8002030 <rcc_set_peripheral_clk_sel+0x44>
 8001ff6:	d80b      	bhi.n	8002010 <rcc_set_peripheral_clk_sel+0x24>
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <rcc_set_peripheral_clk_sel+0x54>)
 8001ffa:	4298      	cmp	r0, r3
 8001ffc:	d01a      	beq.n	8002034 <rcc_set_peripheral_clk_sel+0x48>
 8001ffe:	4911      	ldr	r1, [pc, #68]	; (8002044 <rcc_set_peripheral_clk_sel+0x58>)
 8002000:	230c      	movs	r3, #12
 8002002:	4288      	cmp	r0, r1
 8002004:	d00b      	beq.n	800201e <rcc_set_peripheral_clk_sel+0x32>
 8002006:	4910      	ldr	r1, [pc, #64]	; (8002048 <rcc_set_peripheral_clk_sel+0x5c>)
 8002008:	3b0a      	subs	r3, #10
 800200a:	4288      	cmp	r0, r1
 800200c:	d007      	beq.n	800201e <rcc_set_peripheral_clk_sel+0x32>
 800200e:	bd10      	pop	{r4, pc}
 8002010:	4b0e      	ldr	r3, [pc, #56]	; (800204c <rcc_set_peripheral_clk_sel+0x60>)
 8002012:	4298      	cmp	r0, r3
 8002014:	d010      	beq.n	8002038 <rcc_set_peripheral_clk_sel+0x4c>
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <rcc_set_peripheral_clk_sel+0x64>)
 8002018:	4298      	cmp	r0, r3
 800201a:	d1f8      	bne.n	800200e <rcc_set_peripheral_clk_sel+0x22>
 800201c:	2300      	movs	r3, #0
 800201e:	2003      	movs	r0, #3
 8002020:	4098      	lsls	r0, r3
 8002022:	409a      	lsls	r2, r3
 8002024:	4c0b      	ldr	r4, [pc, #44]	; (8002054 <rcc_set_peripheral_clk_sel+0x68>)
 8002026:	6821      	ldr	r1, [r4, #0]
 8002028:	4381      	bics	r1, r0
 800202a:	4311      	orrs	r1, r2
 800202c:	6021      	str	r1, [r4, #0]
 800202e:	e7ee      	b.n	800200e <rcc_set_peripheral_clk_sel+0x22>
 8002030:	2310      	movs	r3, #16
 8002032:	e7f4      	b.n	800201e <rcc_set_peripheral_clk_sel+0x32>
 8002034:	230a      	movs	r3, #10
 8002036:	e7f2      	b.n	800201e <rcc_set_peripheral_clk_sel+0x32>
 8002038:	2312      	movs	r3, #18
 800203a:	e7f0      	b.n	800201e <rcc_set_peripheral_clk_sel+0x32>
 800203c:	40007800 	.word	0x40007800
 8002040:	40004800 	.word	0x40004800
 8002044:	40005400 	.word	0x40005400
 8002048:	40004400 	.word	0x40004400
 800204c:	40007c00 	.word	0x40007c00
 8002050:	40013800 	.word	0x40013800
 8002054:	4002104c 	.word	0x4002104c

08002058 <rcc_periph_clock_enable>:
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <rcc_periph_clock_enable+0x18>)
 800205a:	0942      	lsrs	r2, r0, #5
 800205c:	18d2      	adds	r2, r2, r3
 800205e:	231f      	movs	r3, #31
 8002060:	4018      	ands	r0, r3
 8002062:	3b1e      	subs	r3, #30
 8002064:	4083      	lsls	r3, r0
 8002066:	6811      	ldr	r1, [r2, #0]
 8002068:	430b      	orrs	r3, r1
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	4770      	bx	lr
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	40021000 	.word	0x40021000

08002074 <rcc_periph_clock_disable>:
 8002074:	211f      	movs	r1, #31
 8002076:	0943      	lsrs	r3, r0, #5
 8002078:	4008      	ands	r0, r1
 800207a:	391e      	subs	r1, #30
 800207c:	4081      	lsls	r1, r0
 800207e:	4a03      	ldr	r2, [pc, #12]	; (800208c <rcc_periph_clock_disable+0x18>)
 8002080:	189b      	adds	r3, r3, r2
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	438a      	bics	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	4770      	bx	lr
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	40021000 	.word	0x40021000

08002090 <rcc_periph_reset_pulse>:
 8002090:	4a06      	ldr	r2, [pc, #24]	; (80020ac <rcc_periph_reset_pulse+0x1c>)
 8002092:	0943      	lsrs	r3, r0, #5
 8002094:	189b      	adds	r3, r3, r2
 8002096:	221f      	movs	r2, #31
 8002098:	4010      	ands	r0, r2
 800209a:	3a1e      	subs	r2, #30
 800209c:	4082      	lsls	r2, r0
 800209e:	6819      	ldr	r1, [r3, #0]
 80020a0:	4311      	orrs	r1, r2
 80020a2:	6019      	str	r1, [r3, #0]
 80020a4:	6819      	ldr	r1, [r3, #0]
 80020a6:	4391      	bics	r1, r2
 80020a8:	6019      	str	r1, [r3, #0]
 80020aa:	4770      	bx	lr
 80020ac:	40021000 	.word	0x40021000

080020b0 <rtc_unlock>:
 80020b0:	22ca      	movs	r2, #202	; 0xca
 80020b2:	4b02      	ldr	r3, [pc, #8]	; (80020bc <rtc_unlock+0xc>)
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	3a77      	subs	r2, #119	; 0x77
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	4770      	bx	lr
 80020bc:	40002824 	.word	0x40002824

080020c0 <rtc_lock>:
 80020c0:	22ff      	movs	r2, #255	; 0xff
 80020c2:	4b01      	ldr	r3, [pc, #4]	; (80020c8 <rtc_lock+0x8>)
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	4770      	bx	lr
 80020c8:	40002824 	.word	0x40002824

080020cc <rtc_clear_wakeup_flag>:
 80020cc:	4a02      	ldr	r2, [pc, #8]	; (80020d8 <rtc_clear_wakeup_flag+0xc>)
 80020ce:	4903      	ldr	r1, [pc, #12]	; (80020dc <rtc_clear_wakeup_flag+0x10>)
 80020d0:	6813      	ldr	r3, [r2, #0]
 80020d2:	400b      	ands	r3, r1
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4770      	bx	lr
 80020d8:	4000280c 	.word	0x4000280c
 80020dc:	fffffbff 	.word	0xfffffbff

080020e0 <spi_enable>:
 80020e0:	2340      	movs	r3, #64	; 0x40
 80020e2:	6802      	ldr	r2, [r0, #0]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	6003      	str	r3, [r0, #0]
 80020e8:	4770      	bx	lr

080020ea <spi_disable>:
 80020ea:	2240      	movs	r2, #64	; 0x40
 80020ec:	6803      	ldr	r3, [r0, #0]
 80020ee:	4393      	bics	r3, r2
 80020f0:	6003      	str	r3, [r0, #0]
 80020f2:	4770      	bx	lr

080020f4 <spi_xfer>:
 80020f4:	2301      	movs	r3, #1
 80020f6:	60c1      	str	r1, [r0, #12]
 80020f8:	6882      	ldr	r2, [r0, #8]
 80020fa:	421a      	tst	r2, r3
 80020fc:	d0fc      	beq.n	80020f8 <spi_xfer+0x4>
 80020fe:	68c0      	ldr	r0, [r0, #12]
 8002100:	b280      	uxth	r0, r0
 8002102:	4770      	bx	lr

08002104 <spi_init_master>:
 8002104:	b530      	push	{r4, r5, lr}
 8002106:	25c1      	movs	r5, #193	; 0xc1
 8002108:	6804      	ldr	r4, [r0, #0]
 800210a:	01ad      	lsls	r5, r5, #6
 800210c:	402c      	ands	r4, r5
 800210e:	9d04      	ldr	r5, [sp, #16]
 8002110:	432c      	orrs	r4, r5
 8002112:	9d03      	ldr	r5, [sp, #12]
 8002114:	432c      	orrs	r4, r5
 8002116:	431c      	orrs	r4, r3
 8002118:	2304      	movs	r3, #4
 800211a:	4314      	orrs	r4, r2
 800211c:	6842      	ldr	r2, [r0, #4]
 800211e:	430c      	orrs	r4, r1
 8002120:	431c      	orrs	r4, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	6043      	str	r3, [r0, #4]
 8002126:	6004      	str	r4, [r0, #0]
 8002128:	2000      	movs	r0, #0
 800212a:	bd30      	pop	{r4, r5, pc}

0800212c <timer_enable_counter>:
 800212c:	2301      	movs	r3, #1
 800212e:	6802      	ldr	r2, [r0, #0]
 8002130:	4313      	orrs	r3, r2
 8002132:	6003      	str	r3, [r0, #0]
 8002134:	4770      	bx	lr

08002136 <timer_disable_counter>:
 8002136:	2201      	movs	r2, #1
 8002138:	6803      	ldr	r3, [r0, #0]
 800213a:	4393      	bics	r3, r2
 800213c:	6003      	str	r3, [r0, #0]
 800213e:	4770      	bx	lr

08002140 <timer_set_prescaler>:
 8002140:	6281      	str	r1, [r0, #40]	; 0x28
 8002142:	4770      	bx	lr

08002144 <timer_get_counter>:
 8002144:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002146:	4770      	bx	lr

08002148 <usart_set_baudrate>:
 8002148:	4b10      	ldr	r3, [pc, #64]	; (800218c <usart_set_baudrate+0x44>)
 800214a:	b570      	push	{r4, r5, r6, lr}
 800214c:	0005      	movs	r5, r0
 800214e:	000c      	movs	r4, r1
 8002150:	084e      	lsrs	r6, r1, #1
 8002152:	4298      	cmp	r0, r3
 8002154:	d107      	bne.n	8002166 <usart_set_baudrate+0x1e>
 8002156:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <usart_set_baudrate+0x48>)
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	0021      	movs	r1, r4
 800215c:	1830      	adds	r0, r6, r0
 800215e:	f000 f909 	bl	8002374 <__udivsi3>
 8002162:	60e8      	str	r0, [r5, #12]
 8002164:	e010      	b.n	8002188 <usart_set_baudrate+0x40>
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <usart_set_baudrate+0x4c>)
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <usart_set_baudrate+0x50>)
 800216c:	429d      	cmp	r5, r3
 800216e:	d1f4      	bne.n	800215a <usart_set_baudrate+0x12>
 8002170:	f000 f986 	bl	8002480 <__aeabi_uidivmod>
 8002174:	0005      	movs	r5, r0
 8002176:	0208      	lsls	r0, r1, #8
 8002178:	1980      	adds	r0, r0, r6
 800217a:	0021      	movs	r1, r4
 800217c:	f000 f8fa 	bl	8002374 <__udivsi3>
 8002180:	022d      	lsls	r5, r5, #8
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <usart_set_baudrate+0x54>)
 8002184:	1940      	adds	r0, r0, r5
 8002186:	6018      	str	r0, [r3, #0]
 8002188:	bd70      	pop	{r4, r5, r6, pc}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	40013800 	.word	0x40013800
 8002190:	2000000c 	.word	0x2000000c
 8002194:	20000008 	.word	0x20000008
 8002198:	40004800 	.word	0x40004800
 800219c:	4000480c 	.word	0x4000480c

080021a0 <usart_set_databits>:
 80021a0:	2908      	cmp	r1, #8
 80021a2:	d104      	bne.n	80021ae <usart_set_databits+0xe>
 80021a4:	6803      	ldr	r3, [r0, #0]
 80021a6:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <usart_set_databits+0x18>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	6003      	str	r3, [r0, #0]
 80021ac:	4770      	bx	lr
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	6802      	ldr	r2, [r0, #0]
 80021b2:	015b      	lsls	r3, r3, #5
 80021b4:	4313      	orrs	r3, r2
 80021b6:	e7f8      	b.n	80021aa <usart_set_databits+0xa>
 80021b8:	ffffefff 	.word	0xffffefff

080021bc <usart_set_stopbits>:
 80021bc:	6843      	ldr	r3, [r0, #4]
 80021be:	4a02      	ldr	r2, [pc, #8]	; (80021c8 <usart_set_stopbits+0xc>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	430b      	orrs	r3, r1
 80021c4:	6043      	str	r3, [r0, #4]
 80021c6:	4770      	bx	lr
 80021c8:	ffffcfff 	.word	0xffffcfff

080021cc <usart_set_parity>:
 80021cc:	6803      	ldr	r3, [r0, #0]
 80021ce:	4a02      	ldr	r2, [pc, #8]	; (80021d8 <usart_set_parity+0xc>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	430b      	orrs	r3, r1
 80021d4:	6003      	str	r3, [r0, #0]
 80021d6:	4770      	bx	lr
 80021d8:	fffff9ff 	.word	0xfffff9ff

080021dc <usart_set_mode>:
 80021dc:	220c      	movs	r2, #12
 80021de:	6803      	ldr	r3, [r0, #0]
 80021e0:	4393      	bics	r3, r2
 80021e2:	430b      	orrs	r3, r1
 80021e4:	6003      	str	r3, [r0, #0]
 80021e6:	4770      	bx	lr

080021e8 <usart_set_flow_control>:
 80021e8:	6883      	ldr	r3, [r0, #8]
 80021ea:	4a02      	ldr	r2, [pc, #8]	; (80021f4 <usart_set_flow_control+0xc>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	430b      	orrs	r3, r1
 80021f0:	6083      	str	r3, [r0, #8]
 80021f2:	4770      	bx	lr
 80021f4:	fffffcff 	.word	0xfffffcff

080021f8 <usart_enable>:
 80021f8:	2301      	movs	r3, #1
 80021fa:	6802      	ldr	r2, [r0, #0]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	6003      	str	r3, [r0, #0]
 8002200:	4770      	bx	lr

08002202 <usart_disable>:
 8002202:	2201      	movs	r2, #1
 8002204:	6803      	ldr	r3, [r0, #0]
 8002206:	4393      	bics	r3, r2
 8002208:	6003      	str	r3, [r0, #0]
 800220a:	4770      	bx	lr

0800220c <usart_send_blocking>:
 800220c:	b570      	push	{r4, r5, r6, lr}
 800220e:	000d      	movs	r5, r1
 8002210:	0004      	movs	r4, r0
 8002212:	f000 f809 	bl	8002228 <usart_wait_send_ready>
 8002216:	0029      	movs	r1, r5
 8002218:	0020      	movs	r0, r4
 800221a:	f000 f801 	bl	8002220 <usart_send>
 800221e:	bd70      	pop	{r4, r5, r6, pc}

08002220 <usart_send>:
 8002220:	05c9      	lsls	r1, r1, #23
 8002222:	0dc9      	lsrs	r1, r1, #23
 8002224:	6281      	str	r1, [r0, #40]	; 0x28
 8002226:	4770      	bx	lr

08002228 <usart_wait_send_ready>:
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	69c2      	ldr	r2, [r0, #28]
 800222c:	421a      	tst	r2, r3
 800222e:	d0fc      	beq.n	800222a <usart_wait_send_ready+0x2>
 8002230:	4770      	bx	lr

08002232 <usart_get_flag>:
 8002232:	69c0      	ldr	r0, [r0, #28]
 8002234:	4008      	ands	r0, r1
 8002236:	1e41      	subs	r1, r0, #1
 8002238:	4188      	sbcs	r0, r1
 800223a:	b2c0      	uxtb	r0, r0
 800223c:	4770      	bx	lr

0800223e <blocking_handler>:
 800223e:	e7fe      	b.n	800223e <blocking_handler>

08002240 <null_handler>:
 8002240:	4770      	bx	lr
	...

08002244 <reset_handler>:
 8002244:	b510      	push	{r4, lr}
 8002246:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <reset_handler+0x5c>)
 8002248:	4a16      	ldr	r2, [pc, #88]	; (80022a4 <reset_handler+0x60>)
 800224a:	4917      	ldr	r1, [pc, #92]	; (80022a8 <reset_handler+0x64>)
 800224c:	428b      	cmp	r3, r1
 800224e:	d318      	bcc.n	8002282 <reset_handler+0x3e>
 8002250:	2100      	movs	r1, #0
 8002252:	4a16      	ldr	r2, [pc, #88]	; (80022ac <reset_handler+0x68>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d317      	bcc.n	8002288 <reset_handler+0x44>
 8002258:	2380      	movs	r3, #128	; 0x80
 800225a:	4a15      	ldr	r2, [pc, #84]	; (80022b0 <reset_handler+0x6c>)
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	6811      	ldr	r1, [r2, #0]
 8002260:	4c14      	ldr	r4, [pc, #80]	; (80022b4 <reset_handler+0x70>)
 8002262:	430b      	orrs	r3, r1
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <reset_handler+0x74>)
 8002268:	429c      	cmp	r4, r3
 800226a:	d30f      	bcc.n	800228c <reset_handler+0x48>
 800226c:	4c13      	ldr	r4, [pc, #76]	; (80022bc <reset_handler+0x78>)
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <reset_handler+0x7c>)
 8002270:	429c      	cmp	r4, r3
 8002272:	d30e      	bcc.n	8002292 <reset_handler+0x4e>
 8002274:	f7fd ff24 	bl	80000c0 <main>
 8002278:	4c12      	ldr	r4, [pc, #72]	; (80022c4 <reset_handler+0x80>)
 800227a:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <reset_handler+0x84>)
 800227c:	429c      	cmp	r4, r3
 800227e:	d30b      	bcc.n	8002298 <reset_handler+0x54>
 8002280:	bd10      	pop	{r4, pc}
 8002282:	ca01      	ldmia	r2!, {r0}
 8002284:	c301      	stmia	r3!, {r0}
 8002286:	e7e1      	b.n	800224c <reset_handler+0x8>
 8002288:	c302      	stmia	r3!, {r1}
 800228a:	e7e3      	b.n	8002254 <reset_handler+0x10>
 800228c:	cc08      	ldmia	r4!, {r3}
 800228e:	4798      	blx	r3
 8002290:	e7e9      	b.n	8002266 <reset_handler+0x22>
 8002292:	cc08      	ldmia	r4!, {r3}
 8002294:	4798      	blx	r3
 8002296:	e7ea      	b.n	800226e <reset_handler+0x2a>
 8002298:	cc08      	ldmia	r4!, {r3}
 800229a:	4798      	blx	r3
 800229c:	e7ed      	b.n	800227a <reset_handler+0x36>
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	20000000 	.word	0x20000000
 80022a4:	0800387c 	.word	0x0800387c
 80022a8:	20000010 	.word	0x20000010
 80022ac:	20000250 	.word	0x20000250
 80022b0:	e000ed14 	.word	0xe000ed14
 80022b4:	0800387c 	.word	0x0800387c
 80022b8:	0800387c 	.word	0x0800387c
 80022bc:	0800387c 	.word	0x0800387c
 80022c0:	0800387c 	.word	0x0800387c
 80022c4:	0800387c 	.word	0x0800387c
 80022c8:	0800387c 	.word	0x0800387c

080022cc <nvic_enable_irq>:
 80022cc:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <nvic_enable_irq+0x14>)
 80022ce:	0943      	lsrs	r3, r0, #5
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	189b      	adds	r3, r3, r2
 80022d4:	221f      	movs	r2, #31
 80022d6:	4010      	ands	r0, r2
 80022d8:	3a1e      	subs	r2, #30
 80022da:	4082      	lsls	r2, r0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	4770      	bx	lr
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <nvic_disable_irq>:
 80022e4:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <nvic_disable_irq+0x14>)
 80022e6:	0943      	lsrs	r3, r0, #5
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	189b      	adds	r3, r3, r2
 80022ec:	221f      	movs	r2, #31
 80022ee:	4010      	ands	r0, r2
 80022f0:	3a1e      	subs	r2, #30
 80022f2:	4082      	lsls	r2, r0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	4770      	bx	lr
 80022f8:	e000e180 	.word	0xe000e180

080022fc <nvic_set_priority>:
 80022fc:	b510      	push	{r4, lr}
 80022fe:	281f      	cmp	r0, #31
 8002300:	d912      	bls.n	8002328 <nvic_set_priority+0x2c>
 8002302:	230f      	movs	r3, #15
 8002304:	4018      	ands	r0, r3
 8002306:	3804      	subs	r0, #4
 8002308:	b2c0      	uxtb	r0, r0
 800230a:	0883      	lsrs	r3, r0, #2
 800230c:	4a08      	ldr	r2, [pc, #32]	; (8002330 <nvic_set_priority+0x34>)
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	2418      	movs	r4, #24
 8002312:	00c0      	lsls	r0, r0, #3
 8002314:	4020      	ands	r0, r4
 8002316:	34e7      	adds	r4, #231	; 0xe7
 8002318:	4084      	lsls	r4, r0
 800231a:	4081      	lsls	r1, r0
 800231c:	189b      	adds	r3, r3, r2
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	43a2      	bics	r2, r4
 8002322:	4311      	orrs	r1, r2
 8002324:	6019      	str	r1, [r3, #0]
 8002326:	bd10      	pop	{r4, pc}
 8002328:	0883      	lsrs	r3, r0, #2
 800232a:	4a02      	ldr	r2, [pc, #8]	; (8002334 <nvic_set_priority+0x38>)
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	e7ef      	b.n	8002310 <nvic_set_priority+0x14>
 8002330:	e000ed18 	.word	0xe000ed18
 8002334:	e000e400 	.word	0xe000e400

08002338 <memcpy>:
 8002338:	2300      	movs	r3, #0
 800233a:	b510      	push	{r4, lr}
 800233c:	429a      	cmp	r2, r3
 800233e:	d100      	bne.n	8002342 <memcpy+0xa>
 8002340:	bd10      	pop	{r4, pc}
 8002342:	5ccc      	ldrb	r4, [r1, r3]
 8002344:	54c4      	strb	r4, [r0, r3]
 8002346:	3301      	adds	r3, #1
 8002348:	e7f8      	b.n	800233c <memcpy+0x4>
	...

0800234c <__gnu_thumb1_case_uqi>:
 800234c:	b402      	push	{r1}
 800234e:	4671      	mov	r1, lr
 8002350:	0849      	lsrs	r1, r1, #1
 8002352:	0049      	lsls	r1, r1, #1
 8002354:	5c09      	ldrb	r1, [r1, r0]
 8002356:	0049      	lsls	r1, r1, #1
 8002358:	448e      	add	lr, r1
 800235a:	bc02      	pop	{r1}
 800235c:	4770      	bx	lr
 800235e:	46c0      	nop			; (mov r8, r8)

08002360 <__gnu_thumb1_case_shi>:
 8002360:	b403      	push	{r0, r1}
 8002362:	4671      	mov	r1, lr
 8002364:	0849      	lsrs	r1, r1, #1
 8002366:	0040      	lsls	r0, r0, #1
 8002368:	0049      	lsls	r1, r1, #1
 800236a:	5e09      	ldrsh	r1, [r1, r0]
 800236c:	0049      	lsls	r1, r1, #1
 800236e:	448e      	add	lr, r1
 8002370:	bc03      	pop	{r0, r1}
 8002372:	4770      	bx	lr

08002374 <__udivsi3>:
 8002374:	2200      	movs	r2, #0
 8002376:	0843      	lsrs	r3, r0, #1
 8002378:	428b      	cmp	r3, r1
 800237a:	d374      	bcc.n	8002466 <__udivsi3+0xf2>
 800237c:	0903      	lsrs	r3, r0, #4
 800237e:	428b      	cmp	r3, r1
 8002380:	d35f      	bcc.n	8002442 <__udivsi3+0xce>
 8002382:	0a03      	lsrs	r3, r0, #8
 8002384:	428b      	cmp	r3, r1
 8002386:	d344      	bcc.n	8002412 <__udivsi3+0x9e>
 8002388:	0b03      	lsrs	r3, r0, #12
 800238a:	428b      	cmp	r3, r1
 800238c:	d328      	bcc.n	80023e0 <__udivsi3+0x6c>
 800238e:	0c03      	lsrs	r3, r0, #16
 8002390:	428b      	cmp	r3, r1
 8002392:	d30d      	bcc.n	80023b0 <__udivsi3+0x3c>
 8002394:	22ff      	movs	r2, #255	; 0xff
 8002396:	0209      	lsls	r1, r1, #8
 8002398:	ba12      	rev	r2, r2
 800239a:	0c03      	lsrs	r3, r0, #16
 800239c:	428b      	cmp	r3, r1
 800239e:	d302      	bcc.n	80023a6 <__udivsi3+0x32>
 80023a0:	1212      	asrs	r2, r2, #8
 80023a2:	0209      	lsls	r1, r1, #8
 80023a4:	d065      	beq.n	8002472 <__udivsi3+0xfe>
 80023a6:	0b03      	lsrs	r3, r0, #12
 80023a8:	428b      	cmp	r3, r1
 80023aa:	d319      	bcc.n	80023e0 <__udivsi3+0x6c>
 80023ac:	e000      	b.n	80023b0 <__udivsi3+0x3c>
 80023ae:	0a09      	lsrs	r1, r1, #8
 80023b0:	0bc3      	lsrs	r3, r0, #15
 80023b2:	428b      	cmp	r3, r1
 80023b4:	d301      	bcc.n	80023ba <__udivsi3+0x46>
 80023b6:	03cb      	lsls	r3, r1, #15
 80023b8:	1ac0      	subs	r0, r0, r3
 80023ba:	4152      	adcs	r2, r2
 80023bc:	0b83      	lsrs	r3, r0, #14
 80023be:	428b      	cmp	r3, r1
 80023c0:	d301      	bcc.n	80023c6 <__udivsi3+0x52>
 80023c2:	038b      	lsls	r3, r1, #14
 80023c4:	1ac0      	subs	r0, r0, r3
 80023c6:	4152      	adcs	r2, r2
 80023c8:	0b43      	lsrs	r3, r0, #13
 80023ca:	428b      	cmp	r3, r1
 80023cc:	d301      	bcc.n	80023d2 <__udivsi3+0x5e>
 80023ce:	034b      	lsls	r3, r1, #13
 80023d0:	1ac0      	subs	r0, r0, r3
 80023d2:	4152      	adcs	r2, r2
 80023d4:	0b03      	lsrs	r3, r0, #12
 80023d6:	428b      	cmp	r3, r1
 80023d8:	d301      	bcc.n	80023de <__udivsi3+0x6a>
 80023da:	030b      	lsls	r3, r1, #12
 80023dc:	1ac0      	subs	r0, r0, r3
 80023de:	4152      	adcs	r2, r2
 80023e0:	0ac3      	lsrs	r3, r0, #11
 80023e2:	428b      	cmp	r3, r1
 80023e4:	d301      	bcc.n	80023ea <__udivsi3+0x76>
 80023e6:	02cb      	lsls	r3, r1, #11
 80023e8:	1ac0      	subs	r0, r0, r3
 80023ea:	4152      	adcs	r2, r2
 80023ec:	0a83      	lsrs	r3, r0, #10
 80023ee:	428b      	cmp	r3, r1
 80023f0:	d301      	bcc.n	80023f6 <__udivsi3+0x82>
 80023f2:	028b      	lsls	r3, r1, #10
 80023f4:	1ac0      	subs	r0, r0, r3
 80023f6:	4152      	adcs	r2, r2
 80023f8:	0a43      	lsrs	r3, r0, #9
 80023fa:	428b      	cmp	r3, r1
 80023fc:	d301      	bcc.n	8002402 <__udivsi3+0x8e>
 80023fe:	024b      	lsls	r3, r1, #9
 8002400:	1ac0      	subs	r0, r0, r3
 8002402:	4152      	adcs	r2, r2
 8002404:	0a03      	lsrs	r3, r0, #8
 8002406:	428b      	cmp	r3, r1
 8002408:	d301      	bcc.n	800240e <__udivsi3+0x9a>
 800240a:	020b      	lsls	r3, r1, #8
 800240c:	1ac0      	subs	r0, r0, r3
 800240e:	4152      	adcs	r2, r2
 8002410:	d2cd      	bcs.n	80023ae <__udivsi3+0x3a>
 8002412:	09c3      	lsrs	r3, r0, #7
 8002414:	428b      	cmp	r3, r1
 8002416:	d301      	bcc.n	800241c <__udivsi3+0xa8>
 8002418:	01cb      	lsls	r3, r1, #7
 800241a:	1ac0      	subs	r0, r0, r3
 800241c:	4152      	adcs	r2, r2
 800241e:	0983      	lsrs	r3, r0, #6
 8002420:	428b      	cmp	r3, r1
 8002422:	d301      	bcc.n	8002428 <__udivsi3+0xb4>
 8002424:	018b      	lsls	r3, r1, #6
 8002426:	1ac0      	subs	r0, r0, r3
 8002428:	4152      	adcs	r2, r2
 800242a:	0943      	lsrs	r3, r0, #5
 800242c:	428b      	cmp	r3, r1
 800242e:	d301      	bcc.n	8002434 <__udivsi3+0xc0>
 8002430:	014b      	lsls	r3, r1, #5
 8002432:	1ac0      	subs	r0, r0, r3
 8002434:	4152      	adcs	r2, r2
 8002436:	0903      	lsrs	r3, r0, #4
 8002438:	428b      	cmp	r3, r1
 800243a:	d301      	bcc.n	8002440 <__udivsi3+0xcc>
 800243c:	010b      	lsls	r3, r1, #4
 800243e:	1ac0      	subs	r0, r0, r3
 8002440:	4152      	adcs	r2, r2
 8002442:	08c3      	lsrs	r3, r0, #3
 8002444:	428b      	cmp	r3, r1
 8002446:	d301      	bcc.n	800244c <__udivsi3+0xd8>
 8002448:	00cb      	lsls	r3, r1, #3
 800244a:	1ac0      	subs	r0, r0, r3
 800244c:	4152      	adcs	r2, r2
 800244e:	0883      	lsrs	r3, r0, #2
 8002450:	428b      	cmp	r3, r1
 8002452:	d301      	bcc.n	8002458 <__udivsi3+0xe4>
 8002454:	008b      	lsls	r3, r1, #2
 8002456:	1ac0      	subs	r0, r0, r3
 8002458:	4152      	adcs	r2, r2
 800245a:	0843      	lsrs	r3, r0, #1
 800245c:	428b      	cmp	r3, r1
 800245e:	d301      	bcc.n	8002464 <__udivsi3+0xf0>
 8002460:	004b      	lsls	r3, r1, #1
 8002462:	1ac0      	subs	r0, r0, r3
 8002464:	4152      	adcs	r2, r2
 8002466:	1a41      	subs	r1, r0, r1
 8002468:	d200      	bcs.n	800246c <__udivsi3+0xf8>
 800246a:	4601      	mov	r1, r0
 800246c:	4152      	adcs	r2, r2
 800246e:	4610      	mov	r0, r2
 8002470:	4770      	bx	lr
 8002472:	e7ff      	b.n	8002474 <__udivsi3+0x100>
 8002474:	b501      	push	{r0, lr}
 8002476:	2000      	movs	r0, #0
 8002478:	f000 f8f0 	bl	800265c <__aeabi_idiv0>
 800247c:	bd02      	pop	{r1, pc}
 800247e:	46c0      	nop			; (mov r8, r8)

08002480 <__aeabi_uidivmod>:
 8002480:	2900      	cmp	r1, #0
 8002482:	d0f7      	beq.n	8002474 <__udivsi3+0x100>
 8002484:	e776      	b.n	8002374 <__udivsi3>
 8002486:	4770      	bx	lr

08002488 <__divsi3>:
 8002488:	4603      	mov	r3, r0
 800248a:	430b      	orrs	r3, r1
 800248c:	d47f      	bmi.n	800258e <__divsi3+0x106>
 800248e:	2200      	movs	r2, #0
 8002490:	0843      	lsrs	r3, r0, #1
 8002492:	428b      	cmp	r3, r1
 8002494:	d374      	bcc.n	8002580 <__divsi3+0xf8>
 8002496:	0903      	lsrs	r3, r0, #4
 8002498:	428b      	cmp	r3, r1
 800249a:	d35f      	bcc.n	800255c <__divsi3+0xd4>
 800249c:	0a03      	lsrs	r3, r0, #8
 800249e:	428b      	cmp	r3, r1
 80024a0:	d344      	bcc.n	800252c <__divsi3+0xa4>
 80024a2:	0b03      	lsrs	r3, r0, #12
 80024a4:	428b      	cmp	r3, r1
 80024a6:	d328      	bcc.n	80024fa <__divsi3+0x72>
 80024a8:	0c03      	lsrs	r3, r0, #16
 80024aa:	428b      	cmp	r3, r1
 80024ac:	d30d      	bcc.n	80024ca <__divsi3+0x42>
 80024ae:	22ff      	movs	r2, #255	; 0xff
 80024b0:	0209      	lsls	r1, r1, #8
 80024b2:	ba12      	rev	r2, r2
 80024b4:	0c03      	lsrs	r3, r0, #16
 80024b6:	428b      	cmp	r3, r1
 80024b8:	d302      	bcc.n	80024c0 <__divsi3+0x38>
 80024ba:	1212      	asrs	r2, r2, #8
 80024bc:	0209      	lsls	r1, r1, #8
 80024be:	d065      	beq.n	800258c <__divsi3+0x104>
 80024c0:	0b03      	lsrs	r3, r0, #12
 80024c2:	428b      	cmp	r3, r1
 80024c4:	d319      	bcc.n	80024fa <__divsi3+0x72>
 80024c6:	e000      	b.n	80024ca <__divsi3+0x42>
 80024c8:	0a09      	lsrs	r1, r1, #8
 80024ca:	0bc3      	lsrs	r3, r0, #15
 80024cc:	428b      	cmp	r3, r1
 80024ce:	d301      	bcc.n	80024d4 <__divsi3+0x4c>
 80024d0:	03cb      	lsls	r3, r1, #15
 80024d2:	1ac0      	subs	r0, r0, r3
 80024d4:	4152      	adcs	r2, r2
 80024d6:	0b83      	lsrs	r3, r0, #14
 80024d8:	428b      	cmp	r3, r1
 80024da:	d301      	bcc.n	80024e0 <__divsi3+0x58>
 80024dc:	038b      	lsls	r3, r1, #14
 80024de:	1ac0      	subs	r0, r0, r3
 80024e0:	4152      	adcs	r2, r2
 80024e2:	0b43      	lsrs	r3, r0, #13
 80024e4:	428b      	cmp	r3, r1
 80024e6:	d301      	bcc.n	80024ec <__divsi3+0x64>
 80024e8:	034b      	lsls	r3, r1, #13
 80024ea:	1ac0      	subs	r0, r0, r3
 80024ec:	4152      	adcs	r2, r2
 80024ee:	0b03      	lsrs	r3, r0, #12
 80024f0:	428b      	cmp	r3, r1
 80024f2:	d301      	bcc.n	80024f8 <__divsi3+0x70>
 80024f4:	030b      	lsls	r3, r1, #12
 80024f6:	1ac0      	subs	r0, r0, r3
 80024f8:	4152      	adcs	r2, r2
 80024fa:	0ac3      	lsrs	r3, r0, #11
 80024fc:	428b      	cmp	r3, r1
 80024fe:	d301      	bcc.n	8002504 <__divsi3+0x7c>
 8002500:	02cb      	lsls	r3, r1, #11
 8002502:	1ac0      	subs	r0, r0, r3
 8002504:	4152      	adcs	r2, r2
 8002506:	0a83      	lsrs	r3, r0, #10
 8002508:	428b      	cmp	r3, r1
 800250a:	d301      	bcc.n	8002510 <__divsi3+0x88>
 800250c:	028b      	lsls	r3, r1, #10
 800250e:	1ac0      	subs	r0, r0, r3
 8002510:	4152      	adcs	r2, r2
 8002512:	0a43      	lsrs	r3, r0, #9
 8002514:	428b      	cmp	r3, r1
 8002516:	d301      	bcc.n	800251c <__divsi3+0x94>
 8002518:	024b      	lsls	r3, r1, #9
 800251a:	1ac0      	subs	r0, r0, r3
 800251c:	4152      	adcs	r2, r2
 800251e:	0a03      	lsrs	r3, r0, #8
 8002520:	428b      	cmp	r3, r1
 8002522:	d301      	bcc.n	8002528 <__divsi3+0xa0>
 8002524:	020b      	lsls	r3, r1, #8
 8002526:	1ac0      	subs	r0, r0, r3
 8002528:	4152      	adcs	r2, r2
 800252a:	d2cd      	bcs.n	80024c8 <__divsi3+0x40>
 800252c:	09c3      	lsrs	r3, r0, #7
 800252e:	428b      	cmp	r3, r1
 8002530:	d301      	bcc.n	8002536 <__divsi3+0xae>
 8002532:	01cb      	lsls	r3, r1, #7
 8002534:	1ac0      	subs	r0, r0, r3
 8002536:	4152      	adcs	r2, r2
 8002538:	0983      	lsrs	r3, r0, #6
 800253a:	428b      	cmp	r3, r1
 800253c:	d301      	bcc.n	8002542 <__divsi3+0xba>
 800253e:	018b      	lsls	r3, r1, #6
 8002540:	1ac0      	subs	r0, r0, r3
 8002542:	4152      	adcs	r2, r2
 8002544:	0943      	lsrs	r3, r0, #5
 8002546:	428b      	cmp	r3, r1
 8002548:	d301      	bcc.n	800254e <__divsi3+0xc6>
 800254a:	014b      	lsls	r3, r1, #5
 800254c:	1ac0      	subs	r0, r0, r3
 800254e:	4152      	adcs	r2, r2
 8002550:	0903      	lsrs	r3, r0, #4
 8002552:	428b      	cmp	r3, r1
 8002554:	d301      	bcc.n	800255a <__divsi3+0xd2>
 8002556:	010b      	lsls	r3, r1, #4
 8002558:	1ac0      	subs	r0, r0, r3
 800255a:	4152      	adcs	r2, r2
 800255c:	08c3      	lsrs	r3, r0, #3
 800255e:	428b      	cmp	r3, r1
 8002560:	d301      	bcc.n	8002566 <__divsi3+0xde>
 8002562:	00cb      	lsls	r3, r1, #3
 8002564:	1ac0      	subs	r0, r0, r3
 8002566:	4152      	adcs	r2, r2
 8002568:	0883      	lsrs	r3, r0, #2
 800256a:	428b      	cmp	r3, r1
 800256c:	d301      	bcc.n	8002572 <__divsi3+0xea>
 800256e:	008b      	lsls	r3, r1, #2
 8002570:	1ac0      	subs	r0, r0, r3
 8002572:	4152      	adcs	r2, r2
 8002574:	0843      	lsrs	r3, r0, #1
 8002576:	428b      	cmp	r3, r1
 8002578:	d301      	bcc.n	800257e <__divsi3+0xf6>
 800257a:	004b      	lsls	r3, r1, #1
 800257c:	1ac0      	subs	r0, r0, r3
 800257e:	4152      	adcs	r2, r2
 8002580:	1a41      	subs	r1, r0, r1
 8002582:	d200      	bcs.n	8002586 <__divsi3+0xfe>
 8002584:	4601      	mov	r1, r0
 8002586:	4152      	adcs	r2, r2
 8002588:	4610      	mov	r0, r2
 800258a:	4770      	bx	lr
 800258c:	e05d      	b.n	800264a <__divsi3+0x1c2>
 800258e:	0fca      	lsrs	r2, r1, #31
 8002590:	d000      	beq.n	8002594 <__divsi3+0x10c>
 8002592:	4249      	negs	r1, r1
 8002594:	1003      	asrs	r3, r0, #32
 8002596:	d300      	bcc.n	800259a <__divsi3+0x112>
 8002598:	4240      	negs	r0, r0
 800259a:	4053      	eors	r3, r2
 800259c:	2200      	movs	r2, #0
 800259e:	469c      	mov	ip, r3
 80025a0:	0903      	lsrs	r3, r0, #4
 80025a2:	428b      	cmp	r3, r1
 80025a4:	d32d      	bcc.n	8002602 <__divsi3+0x17a>
 80025a6:	0a03      	lsrs	r3, r0, #8
 80025a8:	428b      	cmp	r3, r1
 80025aa:	d312      	bcc.n	80025d2 <__divsi3+0x14a>
 80025ac:	22fc      	movs	r2, #252	; 0xfc
 80025ae:	0189      	lsls	r1, r1, #6
 80025b0:	ba12      	rev	r2, r2
 80025b2:	0a03      	lsrs	r3, r0, #8
 80025b4:	428b      	cmp	r3, r1
 80025b6:	d30c      	bcc.n	80025d2 <__divsi3+0x14a>
 80025b8:	0189      	lsls	r1, r1, #6
 80025ba:	1192      	asrs	r2, r2, #6
 80025bc:	428b      	cmp	r3, r1
 80025be:	d308      	bcc.n	80025d2 <__divsi3+0x14a>
 80025c0:	0189      	lsls	r1, r1, #6
 80025c2:	1192      	asrs	r2, r2, #6
 80025c4:	428b      	cmp	r3, r1
 80025c6:	d304      	bcc.n	80025d2 <__divsi3+0x14a>
 80025c8:	0189      	lsls	r1, r1, #6
 80025ca:	d03a      	beq.n	8002642 <__divsi3+0x1ba>
 80025cc:	1192      	asrs	r2, r2, #6
 80025ce:	e000      	b.n	80025d2 <__divsi3+0x14a>
 80025d0:	0989      	lsrs	r1, r1, #6
 80025d2:	09c3      	lsrs	r3, r0, #7
 80025d4:	428b      	cmp	r3, r1
 80025d6:	d301      	bcc.n	80025dc <__divsi3+0x154>
 80025d8:	01cb      	lsls	r3, r1, #7
 80025da:	1ac0      	subs	r0, r0, r3
 80025dc:	4152      	adcs	r2, r2
 80025de:	0983      	lsrs	r3, r0, #6
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d301      	bcc.n	80025e8 <__divsi3+0x160>
 80025e4:	018b      	lsls	r3, r1, #6
 80025e6:	1ac0      	subs	r0, r0, r3
 80025e8:	4152      	adcs	r2, r2
 80025ea:	0943      	lsrs	r3, r0, #5
 80025ec:	428b      	cmp	r3, r1
 80025ee:	d301      	bcc.n	80025f4 <__divsi3+0x16c>
 80025f0:	014b      	lsls	r3, r1, #5
 80025f2:	1ac0      	subs	r0, r0, r3
 80025f4:	4152      	adcs	r2, r2
 80025f6:	0903      	lsrs	r3, r0, #4
 80025f8:	428b      	cmp	r3, r1
 80025fa:	d301      	bcc.n	8002600 <__divsi3+0x178>
 80025fc:	010b      	lsls	r3, r1, #4
 80025fe:	1ac0      	subs	r0, r0, r3
 8002600:	4152      	adcs	r2, r2
 8002602:	08c3      	lsrs	r3, r0, #3
 8002604:	428b      	cmp	r3, r1
 8002606:	d301      	bcc.n	800260c <__divsi3+0x184>
 8002608:	00cb      	lsls	r3, r1, #3
 800260a:	1ac0      	subs	r0, r0, r3
 800260c:	4152      	adcs	r2, r2
 800260e:	0883      	lsrs	r3, r0, #2
 8002610:	428b      	cmp	r3, r1
 8002612:	d301      	bcc.n	8002618 <__divsi3+0x190>
 8002614:	008b      	lsls	r3, r1, #2
 8002616:	1ac0      	subs	r0, r0, r3
 8002618:	4152      	adcs	r2, r2
 800261a:	d2d9      	bcs.n	80025d0 <__divsi3+0x148>
 800261c:	0843      	lsrs	r3, r0, #1
 800261e:	428b      	cmp	r3, r1
 8002620:	d301      	bcc.n	8002626 <__divsi3+0x19e>
 8002622:	004b      	lsls	r3, r1, #1
 8002624:	1ac0      	subs	r0, r0, r3
 8002626:	4152      	adcs	r2, r2
 8002628:	1a41      	subs	r1, r0, r1
 800262a:	d200      	bcs.n	800262e <__divsi3+0x1a6>
 800262c:	4601      	mov	r1, r0
 800262e:	4663      	mov	r3, ip
 8002630:	4152      	adcs	r2, r2
 8002632:	105b      	asrs	r3, r3, #1
 8002634:	4610      	mov	r0, r2
 8002636:	d301      	bcc.n	800263c <__divsi3+0x1b4>
 8002638:	4240      	negs	r0, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d500      	bpl.n	8002640 <__divsi3+0x1b8>
 800263e:	4249      	negs	r1, r1
 8002640:	4770      	bx	lr
 8002642:	4663      	mov	r3, ip
 8002644:	105b      	asrs	r3, r3, #1
 8002646:	d300      	bcc.n	800264a <__divsi3+0x1c2>
 8002648:	4240      	negs	r0, r0
 800264a:	b501      	push	{r0, lr}
 800264c:	2000      	movs	r0, #0
 800264e:	f000 f805 	bl	800265c <__aeabi_idiv0>
 8002652:	bd02      	pop	{r1, pc}

08002654 <__aeabi_idivmod>:
 8002654:	2900      	cmp	r1, #0
 8002656:	d0f8      	beq.n	800264a <__divsi3+0x1c2>
 8002658:	e716      	b.n	8002488 <__divsi3>
 800265a:	4770      	bx	lr

0800265c <__aeabi_idiv0>:
 800265c:	4770      	bx	lr
 800265e:	46c0      	nop			; (mov r8, r8)

08002660 <__aeabi_cdrcmple>:
 8002660:	4684      	mov	ip, r0
 8002662:	1c10      	adds	r0, r2, #0
 8002664:	4662      	mov	r2, ip
 8002666:	468c      	mov	ip, r1
 8002668:	1c19      	adds	r1, r3, #0
 800266a:	4663      	mov	r3, ip
 800266c:	e000      	b.n	8002670 <__aeabi_cdcmpeq>
 800266e:	46c0      	nop			; (mov r8, r8)

08002670 <__aeabi_cdcmpeq>:
 8002670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002672:	f000 f8ff 	bl	8002874 <__ledf2>
 8002676:	2800      	cmp	r0, #0
 8002678:	d401      	bmi.n	800267e <__aeabi_cdcmpeq+0xe>
 800267a:	2100      	movs	r1, #0
 800267c:	42c8      	cmn	r0, r1
 800267e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002680 <__aeabi_dcmpeq>:
 8002680:	b510      	push	{r4, lr}
 8002682:	f000 f849 	bl	8002718 <__eqdf2>
 8002686:	4240      	negs	r0, r0
 8002688:	3001      	adds	r0, #1
 800268a:	bd10      	pop	{r4, pc}

0800268c <__aeabi_dcmplt>:
 800268c:	b510      	push	{r4, lr}
 800268e:	f000 f8f1 	bl	8002874 <__ledf2>
 8002692:	2800      	cmp	r0, #0
 8002694:	db01      	blt.n	800269a <__aeabi_dcmplt+0xe>
 8002696:	2000      	movs	r0, #0
 8002698:	bd10      	pop	{r4, pc}
 800269a:	2001      	movs	r0, #1
 800269c:	bd10      	pop	{r4, pc}
 800269e:	46c0      	nop			; (mov r8, r8)

080026a0 <__aeabi_dcmple>:
 80026a0:	b510      	push	{r4, lr}
 80026a2:	f000 f8e7 	bl	8002874 <__ledf2>
 80026a6:	2800      	cmp	r0, #0
 80026a8:	dd01      	ble.n	80026ae <__aeabi_dcmple+0xe>
 80026aa:	2000      	movs	r0, #0
 80026ac:	bd10      	pop	{r4, pc}
 80026ae:	2001      	movs	r0, #1
 80026b0:	bd10      	pop	{r4, pc}
 80026b2:	46c0      	nop			; (mov r8, r8)

080026b4 <__aeabi_dcmpgt>:
 80026b4:	b510      	push	{r4, lr}
 80026b6:	f000 f86b 	bl	8002790 <__gedf2>
 80026ba:	2800      	cmp	r0, #0
 80026bc:	dc01      	bgt.n	80026c2 <__aeabi_dcmpgt+0xe>
 80026be:	2000      	movs	r0, #0
 80026c0:	bd10      	pop	{r4, pc}
 80026c2:	2001      	movs	r0, #1
 80026c4:	bd10      	pop	{r4, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)

080026c8 <__aeabi_dcmpge>:
 80026c8:	b510      	push	{r4, lr}
 80026ca:	f000 f861 	bl	8002790 <__gedf2>
 80026ce:	2800      	cmp	r0, #0
 80026d0:	da01      	bge.n	80026d6 <__aeabi_dcmpge+0xe>
 80026d2:	2000      	movs	r0, #0
 80026d4:	bd10      	pop	{r4, pc}
 80026d6:	2001      	movs	r0, #1
 80026d8:	bd10      	pop	{r4, pc}
 80026da:	46c0      	nop			; (mov r8, r8)

080026dc <__aeabi_d2uiz>:
 80026dc:	b570      	push	{r4, r5, r6, lr}
 80026de:	2200      	movs	r2, #0
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <__aeabi_d2uiz+0x38>)
 80026e2:	0004      	movs	r4, r0
 80026e4:	000d      	movs	r5, r1
 80026e6:	f7ff ffef 	bl	80026c8 <__aeabi_dcmpge>
 80026ea:	2800      	cmp	r0, #0
 80026ec:	d104      	bne.n	80026f8 <__aeabi_d2uiz+0x1c>
 80026ee:	0020      	movs	r0, r4
 80026f0:	0029      	movs	r1, r5
 80026f2:	f000 ff2d 	bl	8003550 <__aeabi_d2iz>
 80026f6:	bd70      	pop	{r4, r5, r6, pc}
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <__aeabi_d2uiz+0x38>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	0020      	movs	r0, r4
 80026fe:	0029      	movs	r1, r5
 8002700:	f000 fb94 	bl	8002e2c <__aeabi_dsub>
 8002704:	f000 ff24 	bl	8003550 <__aeabi_d2iz>
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	061b      	lsls	r3, r3, #24
 800270c:	469c      	mov	ip, r3
 800270e:	4460      	add	r0, ip
 8002710:	e7f1      	b.n	80026f6 <__aeabi_d2uiz+0x1a>
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	41e00000 	.word	0x41e00000

08002718 <__eqdf2>:
 8002718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271a:	464f      	mov	r7, r9
 800271c:	4646      	mov	r6, r8
 800271e:	46d6      	mov	lr, sl
 8002720:	4694      	mov	ip, r2
 8002722:	4691      	mov	r9, r2
 8002724:	031a      	lsls	r2, r3, #12
 8002726:	0b12      	lsrs	r2, r2, #12
 8002728:	4d18      	ldr	r5, [pc, #96]	; (800278c <__eqdf2+0x74>)
 800272a:	b5c0      	push	{r6, r7, lr}
 800272c:	004c      	lsls	r4, r1, #1
 800272e:	030f      	lsls	r7, r1, #12
 8002730:	4692      	mov	sl, r2
 8002732:	005a      	lsls	r2, r3, #1
 8002734:	0006      	movs	r6, r0
 8002736:	4680      	mov	r8, r0
 8002738:	0b3f      	lsrs	r7, r7, #12
 800273a:	2001      	movs	r0, #1
 800273c:	0d64      	lsrs	r4, r4, #21
 800273e:	0fc9      	lsrs	r1, r1, #31
 8002740:	0d52      	lsrs	r2, r2, #21
 8002742:	0fdb      	lsrs	r3, r3, #31
 8002744:	42ac      	cmp	r4, r5
 8002746:	d00a      	beq.n	800275e <__eqdf2+0x46>
 8002748:	42aa      	cmp	r2, r5
 800274a:	d003      	beq.n	8002754 <__eqdf2+0x3c>
 800274c:	4294      	cmp	r4, r2
 800274e:	d101      	bne.n	8002754 <__eqdf2+0x3c>
 8002750:	4557      	cmp	r7, sl
 8002752:	d00d      	beq.n	8002770 <__eqdf2+0x58>
 8002754:	bc1c      	pop	{r2, r3, r4}
 8002756:	4690      	mov	r8, r2
 8002758:	4699      	mov	r9, r3
 800275a:	46a2      	mov	sl, r4
 800275c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800275e:	003d      	movs	r5, r7
 8002760:	4335      	orrs	r5, r6
 8002762:	d1f7      	bne.n	8002754 <__eqdf2+0x3c>
 8002764:	42a2      	cmp	r2, r4
 8002766:	d1f5      	bne.n	8002754 <__eqdf2+0x3c>
 8002768:	4652      	mov	r2, sl
 800276a:	4665      	mov	r5, ip
 800276c:	432a      	orrs	r2, r5
 800276e:	d1f1      	bne.n	8002754 <__eqdf2+0x3c>
 8002770:	2001      	movs	r0, #1
 8002772:	45c8      	cmp	r8, r9
 8002774:	d1ee      	bne.n	8002754 <__eqdf2+0x3c>
 8002776:	4299      	cmp	r1, r3
 8002778:	d006      	beq.n	8002788 <__eqdf2+0x70>
 800277a:	2c00      	cmp	r4, #0
 800277c:	d1ea      	bne.n	8002754 <__eqdf2+0x3c>
 800277e:	433e      	orrs	r6, r7
 8002780:	0030      	movs	r0, r6
 8002782:	1e46      	subs	r6, r0, #1
 8002784:	41b0      	sbcs	r0, r6
 8002786:	e7e5      	b.n	8002754 <__eqdf2+0x3c>
 8002788:	2000      	movs	r0, #0
 800278a:	e7e3      	b.n	8002754 <__eqdf2+0x3c>
 800278c:	000007ff 	.word	0x000007ff

08002790 <__gedf2>:
 8002790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002792:	464e      	mov	r6, r9
 8002794:	4645      	mov	r5, r8
 8002796:	4657      	mov	r7, sl
 8002798:	46de      	mov	lr, fp
 800279a:	0004      	movs	r4, r0
 800279c:	0018      	movs	r0, r3
 800279e:	b5e0      	push	{r5, r6, r7, lr}
 80027a0:	0016      	movs	r6, r2
 80027a2:	031b      	lsls	r3, r3, #12
 80027a4:	0b1b      	lsrs	r3, r3, #12
 80027a6:	4d32      	ldr	r5, [pc, #200]	; (8002870 <__gedf2+0xe0>)
 80027a8:	030f      	lsls	r7, r1, #12
 80027aa:	004a      	lsls	r2, r1, #1
 80027ac:	4699      	mov	r9, r3
 80027ae:	0043      	lsls	r3, r0, #1
 80027b0:	46a4      	mov	ip, r4
 80027b2:	46b0      	mov	r8, r6
 80027b4:	0b3f      	lsrs	r7, r7, #12
 80027b6:	0d52      	lsrs	r2, r2, #21
 80027b8:	0fc9      	lsrs	r1, r1, #31
 80027ba:	0d5b      	lsrs	r3, r3, #21
 80027bc:	0fc0      	lsrs	r0, r0, #31
 80027be:	42aa      	cmp	r2, r5
 80027c0:	d029      	beq.n	8002816 <__gedf2+0x86>
 80027c2:	42ab      	cmp	r3, r5
 80027c4:	d018      	beq.n	80027f8 <__gedf2+0x68>
 80027c6:	2a00      	cmp	r2, #0
 80027c8:	d12a      	bne.n	8002820 <__gedf2+0x90>
 80027ca:	433c      	orrs	r4, r7
 80027cc:	46a3      	mov	fp, r4
 80027ce:	4265      	negs	r5, r4
 80027d0:	4165      	adcs	r5, r4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d102      	bne.n	80027dc <__gedf2+0x4c>
 80027d6:	464c      	mov	r4, r9
 80027d8:	4326      	orrs	r6, r4
 80027da:	d027      	beq.n	800282c <__gedf2+0x9c>
 80027dc:	2d00      	cmp	r5, #0
 80027de:	d115      	bne.n	800280c <__gedf2+0x7c>
 80027e0:	4281      	cmp	r1, r0
 80027e2:	d028      	beq.n	8002836 <__gedf2+0xa6>
 80027e4:	2002      	movs	r0, #2
 80027e6:	3901      	subs	r1, #1
 80027e8:	4008      	ands	r0, r1
 80027ea:	3801      	subs	r0, #1
 80027ec:	bc3c      	pop	{r2, r3, r4, r5}
 80027ee:	4690      	mov	r8, r2
 80027f0:	4699      	mov	r9, r3
 80027f2:	46a2      	mov	sl, r4
 80027f4:	46ab      	mov	fp, r5
 80027f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027f8:	464d      	mov	r5, r9
 80027fa:	432e      	orrs	r6, r5
 80027fc:	d12f      	bne.n	800285e <__gedf2+0xce>
 80027fe:	2a00      	cmp	r2, #0
 8002800:	d1ee      	bne.n	80027e0 <__gedf2+0x50>
 8002802:	433c      	orrs	r4, r7
 8002804:	4265      	negs	r5, r4
 8002806:	4165      	adcs	r5, r4
 8002808:	2d00      	cmp	r5, #0
 800280a:	d0e9      	beq.n	80027e0 <__gedf2+0x50>
 800280c:	2800      	cmp	r0, #0
 800280e:	d1ed      	bne.n	80027ec <__gedf2+0x5c>
 8002810:	2001      	movs	r0, #1
 8002812:	4240      	negs	r0, r0
 8002814:	e7ea      	b.n	80027ec <__gedf2+0x5c>
 8002816:	003d      	movs	r5, r7
 8002818:	4325      	orrs	r5, r4
 800281a:	d120      	bne.n	800285e <__gedf2+0xce>
 800281c:	4293      	cmp	r3, r2
 800281e:	d0eb      	beq.n	80027f8 <__gedf2+0x68>
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1dd      	bne.n	80027e0 <__gedf2+0x50>
 8002824:	464c      	mov	r4, r9
 8002826:	4326      	orrs	r6, r4
 8002828:	d1da      	bne.n	80027e0 <__gedf2+0x50>
 800282a:	e7db      	b.n	80027e4 <__gedf2+0x54>
 800282c:	465b      	mov	r3, fp
 800282e:	2000      	movs	r0, #0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0db      	beq.n	80027ec <__gedf2+0x5c>
 8002834:	e7d6      	b.n	80027e4 <__gedf2+0x54>
 8002836:	429a      	cmp	r2, r3
 8002838:	dc0a      	bgt.n	8002850 <__gedf2+0xc0>
 800283a:	dbe7      	blt.n	800280c <__gedf2+0x7c>
 800283c:	454f      	cmp	r7, r9
 800283e:	d8d1      	bhi.n	80027e4 <__gedf2+0x54>
 8002840:	d010      	beq.n	8002864 <__gedf2+0xd4>
 8002842:	2000      	movs	r0, #0
 8002844:	454f      	cmp	r7, r9
 8002846:	d2d1      	bcs.n	80027ec <__gedf2+0x5c>
 8002848:	2900      	cmp	r1, #0
 800284a:	d0e1      	beq.n	8002810 <__gedf2+0x80>
 800284c:	0008      	movs	r0, r1
 800284e:	e7cd      	b.n	80027ec <__gedf2+0x5c>
 8002850:	4243      	negs	r3, r0
 8002852:	4158      	adcs	r0, r3
 8002854:	2302      	movs	r3, #2
 8002856:	4240      	negs	r0, r0
 8002858:	4018      	ands	r0, r3
 800285a:	3801      	subs	r0, #1
 800285c:	e7c6      	b.n	80027ec <__gedf2+0x5c>
 800285e:	2002      	movs	r0, #2
 8002860:	4240      	negs	r0, r0
 8002862:	e7c3      	b.n	80027ec <__gedf2+0x5c>
 8002864:	45c4      	cmp	ip, r8
 8002866:	d8bd      	bhi.n	80027e4 <__gedf2+0x54>
 8002868:	2000      	movs	r0, #0
 800286a:	45c4      	cmp	ip, r8
 800286c:	d2be      	bcs.n	80027ec <__gedf2+0x5c>
 800286e:	e7eb      	b.n	8002848 <__gedf2+0xb8>
 8002870:	000007ff 	.word	0x000007ff

08002874 <__ledf2>:
 8002874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002876:	464e      	mov	r6, r9
 8002878:	4645      	mov	r5, r8
 800287a:	4657      	mov	r7, sl
 800287c:	46de      	mov	lr, fp
 800287e:	0004      	movs	r4, r0
 8002880:	0018      	movs	r0, r3
 8002882:	b5e0      	push	{r5, r6, r7, lr}
 8002884:	0016      	movs	r6, r2
 8002886:	031b      	lsls	r3, r3, #12
 8002888:	0b1b      	lsrs	r3, r3, #12
 800288a:	4d31      	ldr	r5, [pc, #196]	; (8002950 <__ledf2+0xdc>)
 800288c:	030f      	lsls	r7, r1, #12
 800288e:	004a      	lsls	r2, r1, #1
 8002890:	4699      	mov	r9, r3
 8002892:	0043      	lsls	r3, r0, #1
 8002894:	46a4      	mov	ip, r4
 8002896:	46b0      	mov	r8, r6
 8002898:	0b3f      	lsrs	r7, r7, #12
 800289a:	0d52      	lsrs	r2, r2, #21
 800289c:	0fc9      	lsrs	r1, r1, #31
 800289e:	0d5b      	lsrs	r3, r3, #21
 80028a0:	0fc0      	lsrs	r0, r0, #31
 80028a2:	42aa      	cmp	r2, r5
 80028a4:	d011      	beq.n	80028ca <__ledf2+0x56>
 80028a6:	42ab      	cmp	r3, r5
 80028a8:	d014      	beq.n	80028d4 <__ledf2+0x60>
 80028aa:	2a00      	cmp	r2, #0
 80028ac:	d12f      	bne.n	800290e <__ledf2+0x9a>
 80028ae:	433c      	orrs	r4, r7
 80028b0:	46a3      	mov	fp, r4
 80028b2:	4265      	negs	r5, r4
 80028b4:	4165      	adcs	r5, r4
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d114      	bne.n	80028e4 <__ledf2+0x70>
 80028ba:	464c      	mov	r4, r9
 80028bc:	4326      	orrs	r6, r4
 80028be:	d111      	bne.n	80028e4 <__ledf2+0x70>
 80028c0:	465b      	mov	r3, fp
 80028c2:	2000      	movs	r0, #0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d017      	beq.n	80028f8 <__ledf2+0x84>
 80028c8:	e010      	b.n	80028ec <__ledf2+0x78>
 80028ca:	003d      	movs	r5, r7
 80028cc:	4325      	orrs	r5, r4
 80028ce:	d112      	bne.n	80028f6 <__ledf2+0x82>
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d11c      	bne.n	800290e <__ledf2+0x9a>
 80028d4:	464d      	mov	r5, r9
 80028d6:	432e      	orrs	r6, r5
 80028d8:	d10d      	bne.n	80028f6 <__ledf2+0x82>
 80028da:	2a00      	cmp	r2, #0
 80028dc:	d104      	bne.n	80028e8 <__ledf2+0x74>
 80028de:	433c      	orrs	r4, r7
 80028e0:	4265      	negs	r5, r4
 80028e2:	4165      	adcs	r5, r4
 80028e4:	2d00      	cmp	r5, #0
 80028e6:	d10d      	bne.n	8002904 <__ledf2+0x90>
 80028e8:	4281      	cmp	r1, r0
 80028ea:	d016      	beq.n	800291a <__ledf2+0xa6>
 80028ec:	2002      	movs	r0, #2
 80028ee:	3901      	subs	r1, #1
 80028f0:	4008      	ands	r0, r1
 80028f2:	3801      	subs	r0, #1
 80028f4:	e000      	b.n	80028f8 <__ledf2+0x84>
 80028f6:	2002      	movs	r0, #2
 80028f8:	bc3c      	pop	{r2, r3, r4, r5}
 80028fa:	4690      	mov	r8, r2
 80028fc:	4699      	mov	r9, r3
 80028fe:	46a2      	mov	sl, r4
 8002900:	46ab      	mov	fp, r5
 8002902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002904:	2800      	cmp	r0, #0
 8002906:	d1f7      	bne.n	80028f8 <__ledf2+0x84>
 8002908:	2001      	movs	r0, #1
 800290a:	4240      	negs	r0, r0
 800290c:	e7f4      	b.n	80028f8 <__ledf2+0x84>
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1ea      	bne.n	80028e8 <__ledf2+0x74>
 8002912:	464c      	mov	r4, r9
 8002914:	4326      	orrs	r6, r4
 8002916:	d1e7      	bne.n	80028e8 <__ledf2+0x74>
 8002918:	e7e8      	b.n	80028ec <__ledf2+0x78>
 800291a:	429a      	cmp	r2, r3
 800291c:	dd06      	ble.n	800292c <__ledf2+0xb8>
 800291e:	4243      	negs	r3, r0
 8002920:	4158      	adcs	r0, r3
 8002922:	2302      	movs	r3, #2
 8002924:	4240      	negs	r0, r0
 8002926:	4018      	ands	r0, r3
 8002928:	3801      	subs	r0, #1
 800292a:	e7e5      	b.n	80028f8 <__ledf2+0x84>
 800292c:	429a      	cmp	r2, r3
 800292e:	dbe9      	blt.n	8002904 <__ledf2+0x90>
 8002930:	454f      	cmp	r7, r9
 8002932:	d8db      	bhi.n	80028ec <__ledf2+0x78>
 8002934:	d006      	beq.n	8002944 <__ledf2+0xd0>
 8002936:	2000      	movs	r0, #0
 8002938:	454f      	cmp	r7, r9
 800293a:	d2dd      	bcs.n	80028f8 <__ledf2+0x84>
 800293c:	2900      	cmp	r1, #0
 800293e:	d0e3      	beq.n	8002908 <__ledf2+0x94>
 8002940:	0008      	movs	r0, r1
 8002942:	e7d9      	b.n	80028f8 <__ledf2+0x84>
 8002944:	45c4      	cmp	ip, r8
 8002946:	d8d1      	bhi.n	80028ec <__ledf2+0x78>
 8002948:	2000      	movs	r0, #0
 800294a:	45c4      	cmp	ip, r8
 800294c:	d2d4      	bcs.n	80028f8 <__ledf2+0x84>
 800294e:	e7f5      	b.n	800293c <__ledf2+0xc8>
 8002950:	000007ff 	.word	0x000007ff

08002954 <__aeabi_dmul>:
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	4657      	mov	r7, sl
 8002958:	464e      	mov	r6, r9
 800295a:	4645      	mov	r5, r8
 800295c:	46de      	mov	lr, fp
 800295e:	b5e0      	push	{r5, r6, r7, lr}
 8002960:	4698      	mov	r8, r3
 8002962:	030c      	lsls	r4, r1, #12
 8002964:	004b      	lsls	r3, r1, #1
 8002966:	0006      	movs	r6, r0
 8002968:	4692      	mov	sl, r2
 800296a:	b087      	sub	sp, #28
 800296c:	0b24      	lsrs	r4, r4, #12
 800296e:	0d5b      	lsrs	r3, r3, #21
 8002970:	0fcf      	lsrs	r7, r1, #31
 8002972:	2b00      	cmp	r3, #0
 8002974:	d06c      	beq.n	8002a50 <__aeabi_dmul+0xfc>
 8002976:	4add      	ldr	r2, [pc, #884]	; (8002cec <__aeabi_dmul+0x398>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d100      	bne.n	800297e <__aeabi_dmul+0x2a>
 800297c:	e086      	b.n	8002a8c <__aeabi_dmul+0x138>
 800297e:	0f42      	lsrs	r2, r0, #29
 8002980:	00e4      	lsls	r4, r4, #3
 8002982:	4314      	orrs	r4, r2
 8002984:	2280      	movs	r2, #128	; 0x80
 8002986:	0412      	lsls	r2, r2, #16
 8002988:	4314      	orrs	r4, r2
 800298a:	4ad9      	ldr	r2, [pc, #868]	; (8002cf0 <__aeabi_dmul+0x39c>)
 800298c:	00c5      	lsls	r5, r0, #3
 800298e:	4694      	mov	ip, r2
 8002990:	4463      	add	r3, ip
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	2300      	movs	r3, #0
 8002996:	4699      	mov	r9, r3
 8002998:	469b      	mov	fp, r3
 800299a:	4643      	mov	r3, r8
 800299c:	4642      	mov	r2, r8
 800299e:	031e      	lsls	r6, r3, #12
 80029a0:	0fd2      	lsrs	r2, r2, #31
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4650      	mov	r0, sl
 80029a6:	4690      	mov	r8, r2
 80029a8:	0b36      	lsrs	r6, r6, #12
 80029aa:	0d5b      	lsrs	r3, r3, #21
 80029ac:	d100      	bne.n	80029b0 <__aeabi_dmul+0x5c>
 80029ae:	e078      	b.n	8002aa2 <__aeabi_dmul+0x14e>
 80029b0:	4ace      	ldr	r2, [pc, #824]	; (8002cec <__aeabi_dmul+0x398>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01d      	beq.n	80029f2 <__aeabi_dmul+0x9e>
 80029b6:	49ce      	ldr	r1, [pc, #824]	; (8002cf0 <__aeabi_dmul+0x39c>)
 80029b8:	0f42      	lsrs	r2, r0, #29
 80029ba:	468c      	mov	ip, r1
 80029bc:	9900      	ldr	r1, [sp, #0]
 80029be:	4463      	add	r3, ip
 80029c0:	00f6      	lsls	r6, r6, #3
 80029c2:	468c      	mov	ip, r1
 80029c4:	4316      	orrs	r6, r2
 80029c6:	2280      	movs	r2, #128	; 0x80
 80029c8:	449c      	add	ip, r3
 80029ca:	0412      	lsls	r2, r2, #16
 80029cc:	4663      	mov	r3, ip
 80029ce:	4316      	orrs	r6, r2
 80029d0:	00c2      	lsls	r2, r0, #3
 80029d2:	2000      	movs	r0, #0
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	9900      	ldr	r1, [sp, #0]
 80029d8:	4643      	mov	r3, r8
 80029da:	3101      	adds	r1, #1
 80029dc:	468c      	mov	ip, r1
 80029de:	4649      	mov	r1, r9
 80029e0:	407b      	eors	r3, r7
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	290f      	cmp	r1, #15
 80029e6:	d900      	bls.n	80029ea <__aeabi_dmul+0x96>
 80029e8:	e07e      	b.n	8002ae8 <__aeabi_dmul+0x194>
 80029ea:	4bc2      	ldr	r3, [pc, #776]	; (8002cf4 <__aeabi_dmul+0x3a0>)
 80029ec:	0089      	lsls	r1, r1, #2
 80029ee:	5859      	ldr	r1, [r3, r1]
 80029f0:	468f      	mov	pc, r1
 80029f2:	4652      	mov	r2, sl
 80029f4:	9b00      	ldr	r3, [sp, #0]
 80029f6:	4332      	orrs	r2, r6
 80029f8:	d000      	beq.n	80029fc <__aeabi_dmul+0xa8>
 80029fa:	e156      	b.n	8002caa <__aeabi_dmul+0x356>
 80029fc:	49bb      	ldr	r1, [pc, #748]	; (8002cec <__aeabi_dmul+0x398>)
 80029fe:	2600      	movs	r6, #0
 8002a00:	468c      	mov	ip, r1
 8002a02:	4463      	add	r3, ip
 8002a04:	4649      	mov	r1, r9
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	2302      	movs	r3, #2
 8002a0a:	4319      	orrs	r1, r3
 8002a0c:	4689      	mov	r9, r1
 8002a0e:	2002      	movs	r0, #2
 8002a10:	e7e1      	b.n	80029d6 <__aeabi_dmul+0x82>
 8002a12:	4643      	mov	r3, r8
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	0034      	movs	r4, r6
 8002a18:	0015      	movs	r5, r2
 8002a1a:	4683      	mov	fp, r0
 8002a1c:	465b      	mov	r3, fp
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d05e      	beq.n	8002ae0 <__aeabi_dmul+0x18c>
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d100      	bne.n	8002a28 <__aeabi_dmul+0xd4>
 8002a26:	e1f3      	b.n	8002e10 <__aeabi_dmul+0x4bc>
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d000      	beq.n	8002a2e <__aeabi_dmul+0xda>
 8002a2c:	e118      	b.n	8002c60 <__aeabi_dmul+0x30c>
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2400      	movs	r4, #0
 8002a32:	2500      	movs	r5, #0
 8002a34:	9b01      	ldr	r3, [sp, #4]
 8002a36:	0512      	lsls	r2, r2, #20
 8002a38:	4322      	orrs	r2, r4
 8002a3a:	07db      	lsls	r3, r3, #31
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	0028      	movs	r0, r5
 8002a40:	0011      	movs	r1, r2
 8002a42:	b007      	add	sp, #28
 8002a44:	bc3c      	pop	{r2, r3, r4, r5}
 8002a46:	4690      	mov	r8, r2
 8002a48:	4699      	mov	r9, r3
 8002a4a:	46a2      	mov	sl, r4
 8002a4c:	46ab      	mov	fp, r5
 8002a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a50:	0025      	movs	r5, r4
 8002a52:	4305      	orrs	r5, r0
 8002a54:	d100      	bne.n	8002a58 <__aeabi_dmul+0x104>
 8002a56:	e141      	b.n	8002cdc <__aeabi_dmul+0x388>
 8002a58:	2c00      	cmp	r4, #0
 8002a5a:	d100      	bne.n	8002a5e <__aeabi_dmul+0x10a>
 8002a5c:	e1ad      	b.n	8002dba <__aeabi_dmul+0x466>
 8002a5e:	0020      	movs	r0, r4
 8002a60:	f000 fe02 	bl	8003668 <__clzsi2>
 8002a64:	0001      	movs	r1, r0
 8002a66:	0002      	movs	r2, r0
 8002a68:	390b      	subs	r1, #11
 8002a6a:	231d      	movs	r3, #29
 8002a6c:	0010      	movs	r0, r2
 8002a6e:	1a5b      	subs	r3, r3, r1
 8002a70:	0031      	movs	r1, r6
 8002a72:	0035      	movs	r5, r6
 8002a74:	3808      	subs	r0, #8
 8002a76:	4084      	lsls	r4, r0
 8002a78:	40d9      	lsrs	r1, r3
 8002a7a:	4085      	lsls	r5, r0
 8002a7c:	430c      	orrs	r4, r1
 8002a7e:	489e      	ldr	r0, [pc, #632]	; (8002cf8 <__aeabi_dmul+0x3a4>)
 8002a80:	1a83      	subs	r3, r0, r2
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2300      	movs	r3, #0
 8002a86:	4699      	mov	r9, r3
 8002a88:	469b      	mov	fp, r3
 8002a8a:	e786      	b.n	800299a <__aeabi_dmul+0x46>
 8002a8c:	0005      	movs	r5, r0
 8002a8e:	4325      	orrs	r5, r4
 8002a90:	d000      	beq.n	8002a94 <__aeabi_dmul+0x140>
 8002a92:	e11c      	b.n	8002cce <__aeabi_dmul+0x37a>
 8002a94:	2208      	movs	r2, #8
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	2302      	movs	r3, #2
 8002a9a:	2400      	movs	r4, #0
 8002a9c:	4691      	mov	r9, r2
 8002a9e:	469b      	mov	fp, r3
 8002aa0:	e77b      	b.n	800299a <__aeabi_dmul+0x46>
 8002aa2:	4652      	mov	r2, sl
 8002aa4:	4332      	orrs	r2, r6
 8002aa6:	d100      	bne.n	8002aaa <__aeabi_dmul+0x156>
 8002aa8:	e10a      	b.n	8002cc0 <__aeabi_dmul+0x36c>
 8002aaa:	2e00      	cmp	r6, #0
 8002aac:	d100      	bne.n	8002ab0 <__aeabi_dmul+0x15c>
 8002aae:	e176      	b.n	8002d9e <__aeabi_dmul+0x44a>
 8002ab0:	0030      	movs	r0, r6
 8002ab2:	f000 fdd9 	bl	8003668 <__clzsi2>
 8002ab6:	0002      	movs	r2, r0
 8002ab8:	3a0b      	subs	r2, #11
 8002aba:	231d      	movs	r3, #29
 8002abc:	0001      	movs	r1, r0
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	4652      	mov	r2, sl
 8002ac2:	3908      	subs	r1, #8
 8002ac4:	40da      	lsrs	r2, r3
 8002ac6:	408e      	lsls	r6, r1
 8002ac8:	4316      	orrs	r6, r2
 8002aca:	4652      	mov	r2, sl
 8002acc:	408a      	lsls	r2, r1
 8002ace:	9b00      	ldr	r3, [sp, #0]
 8002ad0:	4989      	ldr	r1, [pc, #548]	; (8002cf8 <__aeabi_dmul+0x3a4>)
 8002ad2:	1a18      	subs	r0, r3, r0
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	468c      	mov	ip, r1
 8002ad8:	4463      	add	r3, ip
 8002ada:	2000      	movs	r0, #0
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	e77a      	b.n	80029d6 <__aeabi_dmul+0x82>
 8002ae0:	2400      	movs	r4, #0
 8002ae2:	2500      	movs	r5, #0
 8002ae4:	4a81      	ldr	r2, [pc, #516]	; (8002cec <__aeabi_dmul+0x398>)
 8002ae6:	e7a5      	b.n	8002a34 <__aeabi_dmul+0xe0>
 8002ae8:	0c2f      	lsrs	r7, r5, #16
 8002aea:	042d      	lsls	r5, r5, #16
 8002aec:	0c2d      	lsrs	r5, r5, #16
 8002aee:	002b      	movs	r3, r5
 8002af0:	0c11      	lsrs	r1, r2, #16
 8002af2:	0412      	lsls	r2, r2, #16
 8002af4:	0c12      	lsrs	r2, r2, #16
 8002af6:	4353      	muls	r3, r2
 8002af8:	4698      	mov	r8, r3
 8002afa:	0013      	movs	r3, r2
 8002afc:	0028      	movs	r0, r5
 8002afe:	437b      	muls	r3, r7
 8002b00:	4699      	mov	r9, r3
 8002b02:	4348      	muls	r0, r1
 8002b04:	4448      	add	r0, r9
 8002b06:	4683      	mov	fp, r0
 8002b08:	4640      	mov	r0, r8
 8002b0a:	000b      	movs	r3, r1
 8002b0c:	0c00      	lsrs	r0, r0, #16
 8002b0e:	4682      	mov	sl, r0
 8002b10:	4658      	mov	r0, fp
 8002b12:	437b      	muls	r3, r7
 8002b14:	4450      	add	r0, sl
 8002b16:	9302      	str	r3, [sp, #8]
 8002b18:	4581      	cmp	r9, r0
 8002b1a:	d906      	bls.n	8002b2a <__aeabi_dmul+0x1d6>
 8002b1c:	469a      	mov	sl, r3
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	025b      	lsls	r3, r3, #9
 8002b22:	4699      	mov	r9, r3
 8002b24:	44ca      	add	sl, r9
 8002b26:	4653      	mov	r3, sl
 8002b28:	9302      	str	r3, [sp, #8]
 8002b2a:	0c03      	lsrs	r3, r0, #16
 8002b2c:	469b      	mov	fp, r3
 8002b2e:	4643      	mov	r3, r8
 8002b30:	041b      	lsls	r3, r3, #16
 8002b32:	0400      	lsls	r0, r0, #16
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	4698      	mov	r8, r3
 8002b38:	0003      	movs	r3, r0
 8002b3a:	4443      	add	r3, r8
 8002b3c:	9304      	str	r3, [sp, #16]
 8002b3e:	0c33      	lsrs	r3, r6, #16
 8002b40:	4699      	mov	r9, r3
 8002b42:	002b      	movs	r3, r5
 8002b44:	0436      	lsls	r6, r6, #16
 8002b46:	0c36      	lsrs	r6, r6, #16
 8002b48:	4373      	muls	r3, r6
 8002b4a:	4698      	mov	r8, r3
 8002b4c:	0033      	movs	r3, r6
 8002b4e:	437b      	muls	r3, r7
 8002b50:	469a      	mov	sl, r3
 8002b52:	464b      	mov	r3, r9
 8002b54:	435d      	muls	r5, r3
 8002b56:	435f      	muls	r7, r3
 8002b58:	4643      	mov	r3, r8
 8002b5a:	4455      	add	r5, sl
 8002b5c:	0c18      	lsrs	r0, r3, #16
 8002b5e:	1940      	adds	r0, r0, r5
 8002b60:	4582      	cmp	sl, r0
 8002b62:	d903      	bls.n	8002b6c <__aeabi_dmul+0x218>
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	025b      	lsls	r3, r3, #9
 8002b68:	469a      	mov	sl, r3
 8002b6a:	4457      	add	r7, sl
 8002b6c:	0c05      	lsrs	r5, r0, #16
 8002b6e:	19eb      	adds	r3, r5, r7
 8002b70:	9305      	str	r3, [sp, #20]
 8002b72:	4643      	mov	r3, r8
 8002b74:	041d      	lsls	r5, r3, #16
 8002b76:	0c2d      	lsrs	r5, r5, #16
 8002b78:	0400      	lsls	r0, r0, #16
 8002b7a:	1940      	adds	r0, r0, r5
 8002b7c:	0c25      	lsrs	r5, r4, #16
 8002b7e:	0424      	lsls	r4, r4, #16
 8002b80:	0c24      	lsrs	r4, r4, #16
 8002b82:	0027      	movs	r7, r4
 8002b84:	4357      	muls	r7, r2
 8002b86:	436a      	muls	r2, r5
 8002b88:	4690      	mov	r8, r2
 8002b8a:	002a      	movs	r2, r5
 8002b8c:	0c3b      	lsrs	r3, r7, #16
 8002b8e:	469a      	mov	sl, r3
 8002b90:	434a      	muls	r2, r1
 8002b92:	4361      	muls	r1, r4
 8002b94:	4441      	add	r1, r8
 8002b96:	4451      	add	r1, sl
 8002b98:	4483      	add	fp, r0
 8002b9a:	4588      	cmp	r8, r1
 8002b9c:	d903      	bls.n	8002ba6 <__aeabi_dmul+0x252>
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	025b      	lsls	r3, r3, #9
 8002ba2:	4698      	mov	r8, r3
 8002ba4:	4442      	add	r2, r8
 8002ba6:	043f      	lsls	r7, r7, #16
 8002ba8:	0c0b      	lsrs	r3, r1, #16
 8002baa:	0c3f      	lsrs	r7, r7, #16
 8002bac:	0409      	lsls	r1, r1, #16
 8002bae:	19c9      	adds	r1, r1, r7
 8002bb0:	0027      	movs	r7, r4
 8002bb2:	4698      	mov	r8, r3
 8002bb4:	464b      	mov	r3, r9
 8002bb6:	4377      	muls	r7, r6
 8002bb8:	435c      	muls	r4, r3
 8002bba:	436e      	muls	r6, r5
 8002bbc:	435d      	muls	r5, r3
 8002bbe:	0c3b      	lsrs	r3, r7, #16
 8002bc0:	4699      	mov	r9, r3
 8002bc2:	19a4      	adds	r4, r4, r6
 8002bc4:	444c      	add	r4, r9
 8002bc6:	4442      	add	r2, r8
 8002bc8:	9503      	str	r5, [sp, #12]
 8002bca:	42a6      	cmp	r6, r4
 8002bcc:	d904      	bls.n	8002bd8 <__aeabi_dmul+0x284>
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	025b      	lsls	r3, r3, #9
 8002bd2:	4698      	mov	r8, r3
 8002bd4:	4445      	add	r5, r8
 8002bd6:	9503      	str	r5, [sp, #12]
 8002bd8:	9b02      	ldr	r3, [sp, #8]
 8002bda:	043f      	lsls	r7, r7, #16
 8002bdc:	445b      	add	r3, fp
 8002bde:	001e      	movs	r6, r3
 8002be0:	4283      	cmp	r3, r0
 8002be2:	4180      	sbcs	r0, r0
 8002be4:	0423      	lsls	r3, r4, #16
 8002be6:	4698      	mov	r8, r3
 8002be8:	9b05      	ldr	r3, [sp, #20]
 8002bea:	0c3f      	lsrs	r7, r7, #16
 8002bec:	4447      	add	r7, r8
 8002bee:	4698      	mov	r8, r3
 8002bf0:	1876      	adds	r6, r6, r1
 8002bf2:	428e      	cmp	r6, r1
 8002bf4:	4189      	sbcs	r1, r1
 8002bf6:	4447      	add	r7, r8
 8002bf8:	4240      	negs	r0, r0
 8002bfa:	183d      	adds	r5, r7, r0
 8002bfc:	46a8      	mov	r8, r5
 8002bfe:	4693      	mov	fp, r2
 8002c00:	4249      	negs	r1, r1
 8002c02:	468a      	mov	sl, r1
 8002c04:	44c3      	add	fp, r8
 8002c06:	429f      	cmp	r7, r3
 8002c08:	41bf      	sbcs	r7, r7
 8002c0a:	4580      	cmp	r8, r0
 8002c0c:	4180      	sbcs	r0, r0
 8002c0e:	9b03      	ldr	r3, [sp, #12]
 8002c10:	44da      	add	sl, fp
 8002c12:	4698      	mov	r8, r3
 8002c14:	4653      	mov	r3, sl
 8002c16:	4240      	negs	r0, r0
 8002c18:	427f      	negs	r7, r7
 8002c1a:	4307      	orrs	r7, r0
 8002c1c:	0c24      	lsrs	r4, r4, #16
 8002c1e:	4593      	cmp	fp, r2
 8002c20:	4192      	sbcs	r2, r2
 8002c22:	458a      	cmp	sl, r1
 8002c24:	4189      	sbcs	r1, r1
 8002c26:	193f      	adds	r7, r7, r4
 8002c28:	0ddc      	lsrs	r4, r3, #23
 8002c2a:	9b04      	ldr	r3, [sp, #16]
 8002c2c:	0275      	lsls	r5, r6, #9
 8002c2e:	431d      	orrs	r5, r3
 8002c30:	1e68      	subs	r0, r5, #1
 8002c32:	4185      	sbcs	r5, r0
 8002c34:	4653      	mov	r3, sl
 8002c36:	4252      	negs	r2, r2
 8002c38:	4249      	negs	r1, r1
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	18bf      	adds	r7, r7, r2
 8002c3e:	4447      	add	r7, r8
 8002c40:	0df6      	lsrs	r6, r6, #23
 8002c42:	027f      	lsls	r7, r7, #9
 8002c44:	4335      	orrs	r5, r6
 8002c46:	025a      	lsls	r2, r3, #9
 8002c48:	433c      	orrs	r4, r7
 8002c4a:	4315      	orrs	r5, r2
 8002c4c:	01fb      	lsls	r3, r7, #7
 8002c4e:	d400      	bmi.n	8002c52 <__aeabi_dmul+0x2fe>
 8002c50:	e0c1      	b.n	8002dd6 <__aeabi_dmul+0x482>
 8002c52:	2101      	movs	r1, #1
 8002c54:	086a      	lsrs	r2, r5, #1
 8002c56:	400d      	ands	r5, r1
 8002c58:	4315      	orrs	r5, r2
 8002c5a:	07e2      	lsls	r2, r4, #31
 8002c5c:	4315      	orrs	r5, r2
 8002c5e:	0864      	lsrs	r4, r4, #1
 8002c60:	4926      	ldr	r1, [pc, #152]	; (8002cfc <__aeabi_dmul+0x3a8>)
 8002c62:	4461      	add	r1, ip
 8002c64:	2900      	cmp	r1, #0
 8002c66:	dd56      	ble.n	8002d16 <__aeabi_dmul+0x3c2>
 8002c68:	076b      	lsls	r3, r5, #29
 8002c6a:	d009      	beq.n	8002c80 <__aeabi_dmul+0x32c>
 8002c6c:	220f      	movs	r2, #15
 8002c6e:	402a      	ands	r2, r5
 8002c70:	2a04      	cmp	r2, #4
 8002c72:	d005      	beq.n	8002c80 <__aeabi_dmul+0x32c>
 8002c74:	1d2a      	adds	r2, r5, #4
 8002c76:	42aa      	cmp	r2, r5
 8002c78:	41ad      	sbcs	r5, r5
 8002c7a:	426d      	negs	r5, r5
 8002c7c:	1964      	adds	r4, r4, r5
 8002c7e:	0015      	movs	r5, r2
 8002c80:	01e3      	lsls	r3, r4, #7
 8002c82:	d504      	bpl.n	8002c8e <__aeabi_dmul+0x33a>
 8002c84:	2180      	movs	r1, #128	; 0x80
 8002c86:	4a1e      	ldr	r2, [pc, #120]	; (8002d00 <__aeabi_dmul+0x3ac>)
 8002c88:	00c9      	lsls	r1, r1, #3
 8002c8a:	4014      	ands	r4, r2
 8002c8c:	4461      	add	r1, ip
 8002c8e:	4a1d      	ldr	r2, [pc, #116]	; (8002d04 <__aeabi_dmul+0x3b0>)
 8002c90:	4291      	cmp	r1, r2
 8002c92:	dd00      	ble.n	8002c96 <__aeabi_dmul+0x342>
 8002c94:	e724      	b.n	8002ae0 <__aeabi_dmul+0x18c>
 8002c96:	0762      	lsls	r2, r4, #29
 8002c98:	08ed      	lsrs	r5, r5, #3
 8002c9a:	0264      	lsls	r4, r4, #9
 8002c9c:	0549      	lsls	r1, r1, #21
 8002c9e:	4315      	orrs	r5, r2
 8002ca0:	0b24      	lsrs	r4, r4, #12
 8002ca2:	0d4a      	lsrs	r2, r1, #21
 8002ca4:	e6c6      	b.n	8002a34 <__aeabi_dmul+0xe0>
 8002ca6:	9701      	str	r7, [sp, #4]
 8002ca8:	e6b8      	b.n	8002a1c <__aeabi_dmul+0xc8>
 8002caa:	4a10      	ldr	r2, [pc, #64]	; (8002cec <__aeabi_dmul+0x398>)
 8002cac:	2003      	movs	r0, #3
 8002cae:	4694      	mov	ip, r2
 8002cb0:	4463      	add	r3, ip
 8002cb2:	464a      	mov	r2, r9
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	4691      	mov	r9, r2
 8002cbc:	4652      	mov	r2, sl
 8002cbe:	e68a      	b.n	80029d6 <__aeabi_dmul+0x82>
 8002cc0:	4649      	mov	r1, r9
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	4319      	orrs	r1, r3
 8002cc6:	4689      	mov	r9, r1
 8002cc8:	2600      	movs	r6, #0
 8002cca:	2001      	movs	r0, #1
 8002ccc:	e683      	b.n	80029d6 <__aeabi_dmul+0x82>
 8002cce:	220c      	movs	r2, #12
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	0005      	movs	r5, r0
 8002cd6:	4691      	mov	r9, r2
 8002cd8:	469b      	mov	fp, r3
 8002cda:	e65e      	b.n	800299a <__aeabi_dmul+0x46>
 8002cdc:	2304      	movs	r3, #4
 8002cde:	4699      	mov	r9, r3
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	2400      	movs	r4, #0
 8002ce8:	469b      	mov	fp, r3
 8002cea:	e656      	b.n	800299a <__aeabi_dmul+0x46>
 8002cec:	000007ff 	.word	0x000007ff
 8002cf0:	fffffc01 	.word	0xfffffc01
 8002cf4:	0800383c 	.word	0x0800383c
 8002cf8:	fffffc0d 	.word	0xfffffc0d
 8002cfc:	000003ff 	.word	0x000003ff
 8002d00:	feffffff 	.word	0xfeffffff
 8002d04:	000007fe 	.word	0x000007fe
 8002d08:	2300      	movs	r3, #0
 8002d0a:	2480      	movs	r4, #128	; 0x80
 8002d0c:	2500      	movs	r5, #0
 8002d0e:	4a44      	ldr	r2, [pc, #272]	; (8002e20 <__aeabi_dmul+0x4cc>)
 8002d10:	9301      	str	r3, [sp, #4]
 8002d12:	0324      	lsls	r4, r4, #12
 8002d14:	e68e      	b.n	8002a34 <__aeabi_dmul+0xe0>
 8002d16:	2001      	movs	r0, #1
 8002d18:	1a40      	subs	r0, r0, r1
 8002d1a:	2838      	cmp	r0, #56	; 0x38
 8002d1c:	dd00      	ble.n	8002d20 <__aeabi_dmul+0x3cc>
 8002d1e:	e686      	b.n	8002a2e <__aeabi_dmul+0xda>
 8002d20:	281f      	cmp	r0, #31
 8002d22:	dd5b      	ble.n	8002ddc <__aeabi_dmul+0x488>
 8002d24:	221f      	movs	r2, #31
 8002d26:	0023      	movs	r3, r4
 8002d28:	4252      	negs	r2, r2
 8002d2a:	1a51      	subs	r1, r2, r1
 8002d2c:	40cb      	lsrs	r3, r1
 8002d2e:	0019      	movs	r1, r3
 8002d30:	2820      	cmp	r0, #32
 8002d32:	d003      	beq.n	8002d3c <__aeabi_dmul+0x3e8>
 8002d34:	4a3b      	ldr	r2, [pc, #236]	; (8002e24 <__aeabi_dmul+0x4d0>)
 8002d36:	4462      	add	r2, ip
 8002d38:	4094      	lsls	r4, r2
 8002d3a:	4325      	orrs	r5, r4
 8002d3c:	1e6a      	subs	r2, r5, #1
 8002d3e:	4195      	sbcs	r5, r2
 8002d40:	002a      	movs	r2, r5
 8002d42:	430a      	orrs	r2, r1
 8002d44:	2107      	movs	r1, #7
 8002d46:	000d      	movs	r5, r1
 8002d48:	2400      	movs	r4, #0
 8002d4a:	4015      	ands	r5, r2
 8002d4c:	4211      	tst	r1, r2
 8002d4e:	d05b      	beq.n	8002e08 <__aeabi_dmul+0x4b4>
 8002d50:	210f      	movs	r1, #15
 8002d52:	2400      	movs	r4, #0
 8002d54:	4011      	ands	r1, r2
 8002d56:	2904      	cmp	r1, #4
 8002d58:	d053      	beq.n	8002e02 <__aeabi_dmul+0x4ae>
 8002d5a:	1d11      	adds	r1, r2, #4
 8002d5c:	4291      	cmp	r1, r2
 8002d5e:	4192      	sbcs	r2, r2
 8002d60:	4252      	negs	r2, r2
 8002d62:	18a4      	adds	r4, r4, r2
 8002d64:	000a      	movs	r2, r1
 8002d66:	0223      	lsls	r3, r4, #8
 8002d68:	d54b      	bpl.n	8002e02 <__aeabi_dmul+0x4ae>
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	2400      	movs	r4, #0
 8002d6e:	2500      	movs	r5, #0
 8002d70:	e660      	b.n	8002a34 <__aeabi_dmul+0xe0>
 8002d72:	2380      	movs	r3, #128	; 0x80
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	421c      	tst	r4, r3
 8002d78:	d009      	beq.n	8002d8e <__aeabi_dmul+0x43a>
 8002d7a:	421e      	tst	r6, r3
 8002d7c:	d107      	bne.n	8002d8e <__aeabi_dmul+0x43a>
 8002d7e:	4333      	orrs	r3, r6
 8002d80:	031c      	lsls	r4, r3, #12
 8002d82:	4643      	mov	r3, r8
 8002d84:	0015      	movs	r5, r2
 8002d86:	0b24      	lsrs	r4, r4, #12
 8002d88:	4a25      	ldr	r2, [pc, #148]	; (8002e20 <__aeabi_dmul+0x4cc>)
 8002d8a:	9301      	str	r3, [sp, #4]
 8002d8c:	e652      	b.n	8002a34 <__aeabi_dmul+0xe0>
 8002d8e:	2280      	movs	r2, #128	; 0x80
 8002d90:	0312      	lsls	r2, r2, #12
 8002d92:	4314      	orrs	r4, r2
 8002d94:	0324      	lsls	r4, r4, #12
 8002d96:	4a22      	ldr	r2, [pc, #136]	; (8002e20 <__aeabi_dmul+0x4cc>)
 8002d98:	0b24      	lsrs	r4, r4, #12
 8002d9a:	9701      	str	r7, [sp, #4]
 8002d9c:	e64a      	b.n	8002a34 <__aeabi_dmul+0xe0>
 8002d9e:	f000 fc63 	bl	8003668 <__clzsi2>
 8002da2:	0003      	movs	r3, r0
 8002da4:	001a      	movs	r2, r3
 8002da6:	3215      	adds	r2, #21
 8002da8:	3020      	adds	r0, #32
 8002daa:	2a1c      	cmp	r2, #28
 8002dac:	dc00      	bgt.n	8002db0 <__aeabi_dmul+0x45c>
 8002dae:	e684      	b.n	8002aba <__aeabi_dmul+0x166>
 8002db0:	4656      	mov	r6, sl
 8002db2:	3b08      	subs	r3, #8
 8002db4:	2200      	movs	r2, #0
 8002db6:	409e      	lsls	r6, r3
 8002db8:	e689      	b.n	8002ace <__aeabi_dmul+0x17a>
 8002dba:	f000 fc55 	bl	8003668 <__clzsi2>
 8002dbe:	0001      	movs	r1, r0
 8002dc0:	0002      	movs	r2, r0
 8002dc2:	3115      	adds	r1, #21
 8002dc4:	3220      	adds	r2, #32
 8002dc6:	291c      	cmp	r1, #28
 8002dc8:	dc00      	bgt.n	8002dcc <__aeabi_dmul+0x478>
 8002dca:	e64e      	b.n	8002a6a <__aeabi_dmul+0x116>
 8002dcc:	0034      	movs	r4, r6
 8002dce:	3808      	subs	r0, #8
 8002dd0:	2500      	movs	r5, #0
 8002dd2:	4084      	lsls	r4, r0
 8002dd4:	e653      	b.n	8002a7e <__aeabi_dmul+0x12a>
 8002dd6:	9b00      	ldr	r3, [sp, #0]
 8002dd8:	469c      	mov	ip, r3
 8002dda:	e741      	b.n	8002c60 <__aeabi_dmul+0x30c>
 8002ddc:	4912      	ldr	r1, [pc, #72]	; (8002e28 <__aeabi_dmul+0x4d4>)
 8002dde:	0022      	movs	r2, r4
 8002de0:	4461      	add	r1, ip
 8002de2:	002e      	movs	r6, r5
 8002de4:	408d      	lsls	r5, r1
 8002de6:	408a      	lsls	r2, r1
 8002de8:	40c6      	lsrs	r6, r0
 8002dea:	1e69      	subs	r1, r5, #1
 8002dec:	418d      	sbcs	r5, r1
 8002dee:	4332      	orrs	r2, r6
 8002df0:	432a      	orrs	r2, r5
 8002df2:	40c4      	lsrs	r4, r0
 8002df4:	0753      	lsls	r3, r2, #29
 8002df6:	d0b6      	beq.n	8002d66 <__aeabi_dmul+0x412>
 8002df8:	210f      	movs	r1, #15
 8002dfa:	4011      	ands	r1, r2
 8002dfc:	2904      	cmp	r1, #4
 8002dfe:	d1ac      	bne.n	8002d5a <__aeabi_dmul+0x406>
 8002e00:	e7b1      	b.n	8002d66 <__aeabi_dmul+0x412>
 8002e02:	0765      	lsls	r5, r4, #29
 8002e04:	0264      	lsls	r4, r4, #9
 8002e06:	0b24      	lsrs	r4, r4, #12
 8002e08:	08d2      	lsrs	r2, r2, #3
 8002e0a:	4315      	orrs	r5, r2
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	e611      	b.n	8002a34 <__aeabi_dmul+0xe0>
 8002e10:	2280      	movs	r2, #128	; 0x80
 8002e12:	0312      	lsls	r2, r2, #12
 8002e14:	4314      	orrs	r4, r2
 8002e16:	0324      	lsls	r4, r4, #12
 8002e18:	4a01      	ldr	r2, [pc, #4]	; (8002e20 <__aeabi_dmul+0x4cc>)
 8002e1a:	0b24      	lsrs	r4, r4, #12
 8002e1c:	e60a      	b.n	8002a34 <__aeabi_dmul+0xe0>
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	000007ff 	.word	0x000007ff
 8002e24:	0000043e 	.word	0x0000043e
 8002e28:	0000041e 	.word	0x0000041e

08002e2c <__aeabi_dsub>:
 8002e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2e:	4657      	mov	r7, sl
 8002e30:	464e      	mov	r6, r9
 8002e32:	4645      	mov	r5, r8
 8002e34:	46de      	mov	lr, fp
 8002e36:	0004      	movs	r4, r0
 8002e38:	b5e0      	push	{r5, r6, r7, lr}
 8002e3a:	001f      	movs	r7, r3
 8002e3c:	0010      	movs	r0, r2
 8002e3e:	030b      	lsls	r3, r1, #12
 8002e40:	0f62      	lsrs	r2, r4, #29
 8002e42:	004e      	lsls	r6, r1, #1
 8002e44:	0fcd      	lsrs	r5, r1, #31
 8002e46:	0a5b      	lsrs	r3, r3, #9
 8002e48:	0339      	lsls	r1, r7, #12
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	0a49      	lsrs	r1, r1, #9
 8002e4e:	00e2      	lsls	r2, r4, #3
 8002e50:	0f44      	lsrs	r4, r0, #29
 8002e52:	4321      	orrs	r1, r4
 8002e54:	4cc2      	ldr	r4, [pc, #776]	; (8003160 <__aeabi_dsub+0x334>)
 8002e56:	4691      	mov	r9, r2
 8002e58:	4692      	mov	sl, r2
 8002e5a:	00c0      	lsls	r0, r0, #3
 8002e5c:	007a      	lsls	r2, r7, #1
 8002e5e:	4680      	mov	r8, r0
 8002e60:	0d76      	lsrs	r6, r6, #21
 8002e62:	0d52      	lsrs	r2, r2, #21
 8002e64:	0fff      	lsrs	r7, r7, #31
 8002e66:	42a2      	cmp	r2, r4
 8002e68:	d100      	bne.n	8002e6c <__aeabi_dsub+0x40>
 8002e6a:	e0b4      	b.n	8002fd6 <__aeabi_dsub+0x1aa>
 8002e6c:	2401      	movs	r4, #1
 8002e6e:	4067      	eors	r7, r4
 8002e70:	46bb      	mov	fp, r7
 8002e72:	42bd      	cmp	r5, r7
 8002e74:	d100      	bne.n	8002e78 <__aeabi_dsub+0x4c>
 8002e76:	e088      	b.n	8002f8a <__aeabi_dsub+0x15e>
 8002e78:	1ab4      	subs	r4, r6, r2
 8002e7a:	46a4      	mov	ip, r4
 8002e7c:	2c00      	cmp	r4, #0
 8002e7e:	dc00      	bgt.n	8002e82 <__aeabi_dsub+0x56>
 8002e80:	e0b2      	b.n	8002fe8 <__aeabi_dsub+0x1bc>
 8002e82:	2a00      	cmp	r2, #0
 8002e84:	d100      	bne.n	8002e88 <__aeabi_dsub+0x5c>
 8002e86:	e0c5      	b.n	8003014 <__aeabi_dsub+0x1e8>
 8002e88:	4ab5      	ldr	r2, [pc, #724]	; (8003160 <__aeabi_dsub+0x334>)
 8002e8a:	4296      	cmp	r6, r2
 8002e8c:	d100      	bne.n	8002e90 <__aeabi_dsub+0x64>
 8002e8e:	e28b      	b.n	80033a8 <__aeabi_dsub+0x57c>
 8002e90:	2280      	movs	r2, #128	; 0x80
 8002e92:	0412      	lsls	r2, r2, #16
 8002e94:	4311      	orrs	r1, r2
 8002e96:	4662      	mov	r2, ip
 8002e98:	2a38      	cmp	r2, #56	; 0x38
 8002e9a:	dd00      	ble.n	8002e9e <__aeabi_dsub+0x72>
 8002e9c:	e1a1      	b.n	80031e2 <__aeabi_dsub+0x3b6>
 8002e9e:	2a1f      	cmp	r2, #31
 8002ea0:	dd00      	ble.n	8002ea4 <__aeabi_dsub+0x78>
 8002ea2:	e216      	b.n	80032d2 <__aeabi_dsub+0x4a6>
 8002ea4:	2720      	movs	r7, #32
 8002ea6:	000c      	movs	r4, r1
 8002ea8:	1abf      	subs	r7, r7, r2
 8002eaa:	40bc      	lsls	r4, r7
 8002eac:	0002      	movs	r2, r0
 8002eae:	46a0      	mov	r8, r4
 8002eb0:	4664      	mov	r4, ip
 8002eb2:	40b8      	lsls	r0, r7
 8002eb4:	40e2      	lsrs	r2, r4
 8002eb6:	4644      	mov	r4, r8
 8002eb8:	4314      	orrs	r4, r2
 8002eba:	0002      	movs	r2, r0
 8002ebc:	1e50      	subs	r0, r2, #1
 8002ebe:	4182      	sbcs	r2, r0
 8002ec0:	4660      	mov	r0, ip
 8002ec2:	40c1      	lsrs	r1, r0
 8002ec4:	4322      	orrs	r2, r4
 8002ec6:	1a5b      	subs	r3, r3, r1
 8002ec8:	4649      	mov	r1, r9
 8002eca:	1a8c      	subs	r4, r1, r2
 8002ecc:	45a1      	cmp	r9, r4
 8002ece:	4192      	sbcs	r2, r2
 8002ed0:	4252      	negs	r2, r2
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	4698      	mov	r8, r3
 8002ed6:	4643      	mov	r3, r8
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	d400      	bmi.n	8002ede <__aeabi_dsub+0xb2>
 8002edc:	e117      	b.n	800310e <__aeabi_dsub+0x2e2>
 8002ede:	4643      	mov	r3, r8
 8002ee0:	025b      	lsls	r3, r3, #9
 8002ee2:	0a5b      	lsrs	r3, r3, #9
 8002ee4:	4698      	mov	r8, r3
 8002ee6:	4643      	mov	r3, r8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d100      	bne.n	8002eee <__aeabi_dsub+0xc2>
 8002eec:	e16c      	b.n	80031c8 <__aeabi_dsub+0x39c>
 8002eee:	4640      	mov	r0, r8
 8002ef0:	f000 fbba 	bl	8003668 <__clzsi2>
 8002ef4:	0002      	movs	r2, r0
 8002ef6:	3a08      	subs	r2, #8
 8002ef8:	2120      	movs	r1, #32
 8002efa:	0020      	movs	r0, r4
 8002efc:	4643      	mov	r3, r8
 8002efe:	1a89      	subs	r1, r1, r2
 8002f00:	4093      	lsls	r3, r2
 8002f02:	40c8      	lsrs	r0, r1
 8002f04:	4094      	lsls	r4, r2
 8002f06:	4303      	orrs	r3, r0
 8002f08:	4296      	cmp	r6, r2
 8002f0a:	dd00      	ble.n	8002f0e <__aeabi_dsub+0xe2>
 8002f0c:	e157      	b.n	80031be <__aeabi_dsub+0x392>
 8002f0e:	1b96      	subs	r6, r2, r6
 8002f10:	1c71      	adds	r1, r6, #1
 8002f12:	291f      	cmp	r1, #31
 8002f14:	dd00      	ble.n	8002f18 <__aeabi_dsub+0xec>
 8002f16:	e1cb      	b.n	80032b0 <__aeabi_dsub+0x484>
 8002f18:	2220      	movs	r2, #32
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	0026      	movs	r6, r4
 8002f1e:	1a52      	subs	r2, r2, r1
 8002f20:	4094      	lsls	r4, r2
 8002f22:	4090      	lsls	r0, r2
 8002f24:	40ce      	lsrs	r6, r1
 8002f26:	40cb      	lsrs	r3, r1
 8002f28:	1e62      	subs	r2, r4, #1
 8002f2a:	4194      	sbcs	r4, r2
 8002f2c:	4330      	orrs	r0, r6
 8002f2e:	4698      	mov	r8, r3
 8002f30:	2600      	movs	r6, #0
 8002f32:	4304      	orrs	r4, r0
 8002f34:	0763      	lsls	r3, r4, #29
 8002f36:	d009      	beq.n	8002f4c <__aeabi_dsub+0x120>
 8002f38:	230f      	movs	r3, #15
 8002f3a:	4023      	ands	r3, r4
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d005      	beq.n	8002f4c <__aeabi_dsub+0x120>
 8002f40:	1d23      	adds	r3, r4, #4
 8002f42:	42a3      	cmp	r3, r4
 8002f44:	41a4      	sbcs	r4, r4
 8002f46:	4264      	negs	r4, r4
 8002f48:	44a0      	add	r8, r4
 8002f4a:	001c      	movs	r4, r3
 8002f4c:	4643      	mov	r3, r8
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	d400      	bmi.n	8002f54 <__aeabi_dsub+0x128>
 8002f52:	e0df      	b.n	8003114 <__aeabi_dsub+0x2e8>
 8002f54:	4b82      	ldr	r3, [pc, #520]	; (8003160 <__aeabi_dsub+0x334>)
 8002f56:	3601      	adds	r6, #1
 8002f58:	429e      	cmp	r6, r3
 8002f5a:	d100      	bne.n	8002f5e <__aeabi_dsub+0x132>
 8002f5c:	e0fb      	b.n	8003156 <__aeabi_dsub+0x32a>
 8002f5e:	4642      	mov	r2, r8
 8002f60:	4b80      	ldr	r3, [pc, #512]	; (8003164 <__aeabi_dsub+0x338>)
 8002f62:	08e4      	lsrs	r4, r4, #3
 8002f64:	401a      	ands	r2, r3
 8002f66:	0013      	movs	r3, r2
 8002f68:	0571      	lsls	r1, r6, #21
 8002f6a:	0752      	lsls	r2, r2, #29
 8002f6c:	025b      	lsls	r3, r3, #9
 8002f6e:	4322      	orrs	r2, r4
 8002f70:	0b1b      	lsrs	r3, r3, #12
 8002f72:	0d49      	lsrs	r1, r1, #21
 8002f74:	0509      	lsls	r1, r1, #20
 8002f76:	07ed      	lsls	r5, r5, #31
 8002f78:	4319      	orrs	r1, r3
 8002f7a:	4329      	orrs	r1, r5
 8002f7c:	0010      	movs	r0, r2
 8002f7e:	bc3c      	pop	{r2, r3, r4, r5}
 8002f80:	4690      	mov	r8, r2
 8002f82:	4699      	mov	r9, r3
 8002f84:	46a2      	mov	sl, r4
 8002f86:	46ab      	mov	fp, r5
 8002f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f8a:	1ab4      	subs	r4, r6, r2
 8002f8c:	46a4      	mov	ip, r4
 8002f8e:	2c00      	cmp	r4, #0
 8002f90:	dd58      	ble.n	8003044 <__aeabi_dsub+0x218>
 8002f92:	2a00      	cmp	r2, #0
 8002f94:	d100      	bne.n	8002f98 <__aeabi_dsub+0x16c>
 8002f96:	e09e      	b.n	80030d6 <__aeabi_dsub+0x2aa>
 8002f98:	4a71      	ldr	r2, [pc, #452]	; (8003160 <__aeabi_dsub+0x334>)
 8002f9a:	4296      	cmp	r6, r2
 8002f9c:	d100      	bne.n	8002fa0 <__aeabi_dsub+0x174>
 8002f9e:	e13b      	b.n	8003218 <__aeabi_dsub+0x3ec>
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	0412      	lsls	r2, r2, #16
 8002fa4:	4311      	orrs	r1, r2
 8002fa6:	4662      	mov	r2, ip
 8002fa8:	2a38      	cmp	r2, #56	; 0x38
 8002faa:	dd00      	ble.n	8002fae <__aeabi_dsub+0x182>
 8002fac:	e0c1      	b.n	8003132 <__aeabi_dsub+0x306>
 8002fae:	2a1f      	cmp	r2, #31
 8002fb0:	dc00      	bgt.n	8002fb4 <__aeabi_dsub+0x188>
 8002fb2:	e1bb      	b.n	800332c <__aeabi_dsub+0x500>
 8002fb4:	000c      	movs	r4, r1
 8002fb6:	3a20      	subs	r2, #32
 8002fb8:	40d4      	lsrs	r4, r2
 8002fba:	0022      	movs	r2, r4
 8002fbc:	4664      	mov	r4, ip
 8002fbe:	2c20      	cmp	r4, #32
 8002fc0:	d004      	beq.n	8002fcc <__aeabi_dsub+0x1a0>
 8002fc2:	2740      	movs	r7, #64	; 0x40
 8002fc4:	1b3f      	subs	r7, r7, r4
 8002fc6:	40b9      	lsls	r1, r7
 8002fc8:	4308      	orrs	r0, r1
 8002fca:	4680      	mov	r8, r0
 8002fcc:	4644      	mov	r4, r8
 8002fce:	1e61      	subs	r1, r4, #1
 8002fd0:	418c      	sbcs	r4, r1
 8002fd2:	4314      	orrs	r4, r2
 8002fd4:	e0b1      	b.n	800313a <__aeabi_dsub+0x30e>
 8002fd6:	000c      	movs	r4, r1
 8002fd8:	4304      	orrs	r4, r0
 8002fda:	d02a      	beq.n	8003032 <__aeabi_dsub+0x206>
 8002fdc:	46bb      	mov	fp, r7
 8002fde:	42bd      	cmp	r5, r7
 8002fe0:	d02d      	beq.n	800303e <__aeabi_dsub+0x212>
 8002fe2:	4c61      	ldr	r4, [pc, #388]	; (8003168 <__aeabi_dsub+0x33c>)
 8002fe4:	46a4      	mov	ip, r4
 8002fe6:	44b4      	add	ip, r6
 8002fe8:	4664      	mov	r4, ip
 8002fea:	2c00      	cmp	r4, #0
 8002fec:	d05c      	beq.n	80030a8 <__aeabi_dsub+0x27c>
 8002fee:	1b94      	subs	r4, r2, r6
 8002ff0:	46a4      	mov	ip, r4
 8002ff2:	2e00      	cmp	r6, #0
 8002ff4:	d000      	beq.n	8002ff8 <__aeabi_dsub+0x1cc>
 8002ff6:	e115      	b.n	8003224 <__aeabi_dsub+0x3f8>
 8002ff8:	464d      	mov	r5, r9
 8002ffa:	431d      	orrs	r5, r3
 8002ffc:	d100      	bne.n	8003000 <__aeabi_dsub+0x1d4>
 8002ffe:	e1c3      	b.n	8003388 <__aeabi_dsub+0x55c>
 8003000:	1e65      	subs	r5, r4, #1
 8003002:	2c01      	cmp	r4, #1
 8003004:	d100      	bne.n	8003008 <__aeabi_dsub+0x1dc>
 8003006:	e20c      	b.n	8003422 <__aeabi_dsub+0x5f6>
 8003008:	4e55      	ldr	r6, [pc, #340]	; (8003160 <__aeabi_dsub+0x334>)
 800300a:	42b4      	cmp	r4, r6
 800300c:	d100      	bne.n	8003010 <__aeabi_dsub+0x1e4>
 800300e:	e1f8      	b.n	8003402 <__aeabi_dsub+0x5d6>
 8003010:	46ac      	mov	ip, r5
 8003012:	e10e      	b.n	8003232 <__aeabi_dsub+0x406>
 8003014:	000a      	movs	r2, r1
 8003016:	4302      	orrs	r2, r0
 8003018:	d100      	bne.n	800301c <__aeabi_dsub+0x1f0>
 800301a:	e136      	b.n	800328a <__aeabi_dsub+0x45e>
 800301c:	0022      	movs	r2, r4
 800301e:	3a01      	subs	r2, #1
 8003020:	2c01      	cmp	r4, #1
 8003022:	d100      	bne.n	8003026 <__aeabi_dsub+0x1fa>
 8003024:	e1c6      	b.n	80033b4 <__aeabi_dsub+0x588>
 8003026:	4c4e      	ldr	r4, [pc, #312]	; (8003160 <__aeabi_dsub+0x334>)
 8003028:	45a4      	cmp	ip, r4
 800302a:	d100      	bne.n	800302e <__aeabi_dsub+0x202>
 800302c:	e0f4      	b.n	8003218 <__aeabi_dsub+0x3ec>
 800302e:	4694      	mov	ip, r2
 8003030:	e731      	b.n	8002e96 <__aeabi_dsub+0x6a>
 8003032:	2401      	movs	r4, #1
 8003034:	4067      	eors	r7, r4
 8003036:	46bb      	mov	fp, r7
 8003038:	42bd      	cmp	r5, r7
 800303a:	d000      	beq.n	800303e <__aeabi_dsub+0x212>
 800303c:	e71c      	b.n	8002e78 <__aeabi_dsub+0x4c>
 800303e:	4c4a      	ldr	r4, [pc, #296]	; (8003168 <__aeabi_dsub+0x33c>)
 8003040:	46a4      	mov	ip, r4
 8003042:	44b4      	add	ip, r6
 8003044:	4664      	mov	r4, ip
 8003046:	2c00      	cmp	r4, #0
 8003048:	d100      	bne.n	800304c <__aeabi_dsub+0x220>
 800304a:	e0cf      	b.n	80031ec <__aeabi_dsub+0x3c0>
 800304c:	1b94      	subs	r4, r2, r6
 800304e:	46a4      	mov	ip, r4
 8003050:	2e00      	cmp	r6, #0
 8003052:	d100      	bne.n	8003056 <__aeabi_dsub+0x22a>
 8003054:	e15c      	b.n	8003310 <__aeabi_dsub+0x4e4>
 8003056:	4e42      	ldr	r6, [pc, #264]	; (8003160 <__aeabi_dsub+0x334>)
 8003058:	42b2      	cmp	r2, r6
 800305a:	d100      	bne.n	800305e <__aeabi_dsub+0x232>
 800305c:	e1ec      	b.n	8003438 <__aeabi_dsub+0x60c>
 800305e:	2680      	movs	r6, #128	; 0x80
 8003060:	0436      	lsls	r6, r6, #16
 8003062:	4333      	orrs	r3, r6
 8003064:	4664      	mov	r4, ip
 8003066:	2c38      	cmp	r4, #56	; 0x38
 8003068:	dd00      	ble.n	800306c <__aeabi_dsub+0x240>
 800306a:	e1b3      	b.n	80033d4 <__aeabi_dsub+0x5a8>
 800306c:	2c1f      	cmp	r4, #31
 800306e:	dd00      	ble.n	8003072 <__aeabi_dsub+0x246>
 8003070:	e238      	b.n	80034e4 <__aeabi_dsub+0x6b8>
 8003072:	2620      	movs	r6, #32
 8003074:	1b36      	subs	r6, r6, r4
 8003076:	001c      	movs	r4, r3
 8003078:	40b4      	lsls	r4, r6
 800307a:	464f      	mov	r7, r9
 800307c:	46a0      	mov	r8, r4
 800307e:	4664      	mov	r4, ip
 8003080:	40e7      	lsrs	r7, r4
 8003082:	4644      	mov	r4, r8
 8003084:	433c      	orrs	r4, r7
 8003086:	464f      	mov	r7, r9
 8003088:	40b7      	lsls	r7, r6
 800308a:	003e      	movs	r6, r7
 800308c:	1e77      	subs	r7, r6, #1
 800308e:	41be      	sbcs	r6, r7
 8003090:	4334      	orrs	r4, r6
 8003092:	4666      	mov	r6, ip
 8003094:	40f3      	lsrs	r3, r6
 8003096:	18c9      	adds	r1, r1, r3
 8003098:	1824      	adds	r4, r4, r0
 800309a:	4284      	cmp	r4, r0
 800309c:	419b      	sbcs	r3, r3
 800309e:	425b      	negs	r3, r3
 80030a0:	4698      	mov	r8, r3
 80030a2:	0016      	movs	r6, r2
 80030a4:	4488      	add	r8, r1
 80030a6:	e04e      	b.n	8003146 <__aeabi_dsub+0x31a>
 80030a8:	4a30      	ldr	r2, [pc, #192]	; (800316c <__aeabi_dsub+0x340>)
 80030aa:	1c74      	adds	r4, r6, #1
 80030ac:	4214      	tst	r4, r2
 80030ae:	d000      	beq.n	80030b2 <__aeabi_dsub+0x286>
 80030b0:	e0d6      	b.n	8003260 <__aeabi_dsub+0x434>
 80030b2:	464a      	mov	r2, r9
 80030b4:	431a      	orrs	r2, r3
 80030b6:	2e00      	cmp	r6, #0
 80030b8:	d000      	beq.n	80030bc <__aeabi_dsub+0x290>
 80030ba:	e15b      	b.n	8003374 <__aeabi_dsub+0x548>
 80030bc:	2a00      	cmp	r2, #0
 80030be:	d100      	bne.n	80030c2 <__aeabi_dsub+0x296>
 80030c0:	e1a5      	b.n	800340e <__aeabi_dsub+0x5e2>
 80030c2:	000a      	movs	r2, r1
 80030c4:	4302      	orrs	r2, r0
 80030c6:	d000      	beq.n	80030ca <__aeabi_dsub+0x29e>
 80030c8:	e1bb      	b.n	8003442 <__aeabi_dsub+0x616>
 80030ca:	464a      	mov	r2, r9
 80030cc:	0759      	lsls	r1, r3, #29
 80030ce:	08d2      	lsrs	r2, r2, #3
 80030d0:	430a      	orrs	r2, r1
 80030d2:	08db      	lsrs	r3, r3, #3
 80030d4:	e027      	b.n	8003126 <__aeabi_dsub+0x2fa>
 80030d6:	000a      	movs	r2, r1
 80030d8:	4302      	orrs	r2, r0
 80030da:	d100      	bne.n	80030de <__aeabi_dsub+0x2b2>
 80030dc:	e174      	b.n	80033c8 <__aeabi_dsub+0x59c>
 80030de:	0022      	movs	r2, r4
 80030e0:	3a01      	subs	r2, #1
 80030e2:	2c01      	cmp	r4, #1
 80030e4:	d005      	beq.n	80030f2 <__aeabi_dsub+0x2c6>
 80030e6:	4c1e      	ldr	r4, [pc, #120]	; (8003160 <__aeabi_dsub+0x334>)
 80030e8:	45a4      	cmp	ip, r4
 80030ea:	d100      	bne.n	80030ee <__aeabi_dsub+0x2c2>
 80030ec:	e094      	b.n	8003218 <__aeabi_dsub+0x3ec>
 80030ee:	4694      	mov	ip, r2
 80030f0:	e759      	b.n	8002fa6 <__aeabi_dsub+0x17a>
 80030f2:	4448      	add	r0, r9
 80030f4:	4548      	cmp	r0, r9
 80030f6:	4192      	sbcs	r2, r2
 80030f8:	185b      	adds	r3, r3, r1
 80030fa:	4698      	mov	r8, r3
 80030fc:	0004      	movs	r4, r0
 80030fe:	4252      	negs	r2, r2
 8003100:	4490      	add	r8, r2
 8003102:	4643      	mov	r3, r8
 8003104:	2602      	movs	r6, #2
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	d500      	bpl.n	800310c <__aeabi_dsub+0x2e0>
 800310a:	e0c4      	b.n	8003296 <__aeabi_dsub+0x46a>
 800310c:	3e01      	subs	r6, #1
 800310e:	0763      	lsls	r3, r4, #29
 8003110:	d000      	beq.n	8003114 <__aeabi_dsub+0x2e8>
 8003112:	e711      	b.n	8002f38 <__aeabi_dsub+0x10c>
 8003114:	4643      	mov	r3, r8
 8003116:	46b4      	mov	ip, r6
 8003118:	0759      	lsls	r1, r3, #29
 800311a:	08e2      	lsrs	r2, r4, #3
 800311c:	430a      	orrs	r2, r1
 800311e:	08db      	lsrs	r3, r3, #3
 8003120:	490f      	ldr	r1, [pc, #60]	; (8003160 <__aeabi_dsub+0x334>)
 8003122:	458c      	cmp	ip, r1
 8003124:	d040      	beq.n	80031a8 <__aeabi_dsub+0x37c>
 8003126:	4661      	mov	r1, ip
 8003128:	031b      	lsls	r3, r3, #12
 800312a:	0549      	lsls	r1, r1, #21
 800312c:	0b1b      	lsrs	r3, r3, #12
 800312e:	0d49      	lsrs	r1, r1, #21
 8003130:	e720      	b.n	8002f74 <__aeabi_dsub+0x148>
 8003132:	4301      	orrs	r1, r0
 8003134:	000c      	movs	r4, r1
 8003136:	1e61      	subs	r1, r4, #1
 8003138:	418c      	sbcs	r4, r1
 800313a:	444c      	add	r4, r9
 800313c:	454c      	cmp	r4, r9
 800313e:	4192      	sbcs	r2, r2
 8003140:	4252      	negs	r2, r2
 8003142:	4690      	mov	r8, r2
 8003144:	4498      	add	r8, r3
 8003146:	4643      	mov	r3, r8
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	d5e0      	bpl.n	800310e <__aeabi_dsub+0x2e2>
 800314c:	4b04      	ldr	r3, [pc, #16]	; (8003160 <__aeabi_dsub+0x334>)
 800314e:	3601      	adds	r6, #1
 8003150:	429e      	cmp	r6, r3
 8003152:	d000      	beq.n	8003156 <__aeabi_dsub+0x32a>
 8003154:	e09f      	b.n	8003296 <__aeabi_dsub+0x46a>
 8003156:	0031      	movs	r1, r6
 8003158:	2300      	movs	r3, #0
 800315a:	2200      	movs	r2, #0
 800315c:	e70a      	b.n	8002f74 <__aeabi_dsub+0x148>
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	000007ff 	.word	0x000007ff
 8003164:	ff7fffff 	.word	0xff7fffff
 8003168:	fffff801 	.word	0xfffff801
 800316c:	000007fe 	.word	0x000007fe
 8003170:	2a00      	cmp	r2, #0
 8003172:	d100      	bne.n	8003176 <__aeabi_dsub+0x34a>
 8003174:	e160      	b.n	8003438 <__aeabi_dsub+0x60c>
 8003176:	000a      	movs	r2, r1
 8003178:	4302      	orrs	r2, r0
 800317a:	d04d      	beq.n	8003218 <__aeabi_dsub+0x3ec>
 800317c:	464a      	mov	r2, r9
 800317e:	075c      	lsls	r4, r3, #29
 8003180:	08d2      	lsrs	r2, r2, #3
 8003182:	4322      	orrs	r2, r4
 8003184:	2480      	movs	r4, #128	; 0x80
 8003186:	08db      	lsrs	r3, r3, #3
 8003188:	0324      	lsls	r4, r4, #12
 800318a:	4223      	tst	r3, r4
 800318c:	d007      	beq.n	800319e <__aeabi_dsub+0x372>
 800318e:	08ce      	lsrs	r6, r1, #3
 8003190:	4226      	tst	r6, r4
 8003192:	d104      	bne.n	800319e <__aeabi_dsub+0x372>
 8003194:	465d      	mov	r5, fp
 8003196:	0033      	movs	r3, r6
 8003198:	08c2      	lsrs	r2, r0, #3
 800319a:	0749      	lsls	r1, r1, #29
 800319c:	430a      	orrs	r2, r1
 800319e:	0f51      	lsrs	r1, r2, #29
 80031a0:	00d2      	lsls	r2, r2, #3
 80031a2:	08d2      	lsrs	r2, r2, #3
 80031a4:	0749      	lsls	r1, r1, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	0011      	movs	r1, r2
 80031aa:	4319      	orrs	r1, r3
 80031ac:	d100      	bne.n	80031b0 <__aeabi_dsub+0x384>
 80031ae:	e1c8      	b.n	8003542 <__aeabi_dsub+0x716>
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	0309      	lsls	r1, r1, #12
 80031b4:	430b      	orrs	r3, r1
 80031b6:	031b      	lsls	r3, r3, #12
 80031b8:	49d5      	ldr	r1, [pc, #852]	; (8003510 <__aeabi_dsub+0x6e4>)
 80031ba:	0b1b      	lsrs	r3, r3, #12
 80031bc:	e6da      	b.n	8002f74 <__aeabi_dsub+0x148>
 80031be:	49d5      	ldr	r1, [pc, #852]	; (8003514 <__aeabi_dsub+0x6e8>)
 80031c0:	1ab6      	subs	r6, r6, r2
 80031c2:	400b      	ands	r3, r1
 80031c4:	4698      	mov	r8, r3
 80031c6:	e6b5      	b.n	8002f34 <__aeabi_dsub+0x108>
 80031c8:	0020      	movs	r0, r4
 80031ca:	f000 fa4d 	bl	8003668 <__clzsi2>
 80031ce:	0002      	movs	r2, r0
 80031d0:	3218      	adds	r2, #24
 80031d2:	2a1f      	cmp	r2, #31
 80031d4:	dc00      	bgt.n	80031d8 <__aeabi_dsub+0x3ac>
 80031d6:	e68f      	b.n	8002ef8 <__aeabi_dsub+0xcc>
 80031d8:	0023      	movs	r3, r4
 80031da:	3808      	subs	r0, #8
 80031dc:	4083      	lsls	r3, r0
 80031de:	2400      	movs	r4, #0
 80031e0:	e692      	b.n	8002f08 <__aeabi_dsub+0xdc>
 80031e2:	4308      	orrs	r0, r1
 80031e4:	0002      	movs	r2, r0
 80031e6:	1e50      	subs	r0, r2, #1
 80031e8:	4182      	sbcs	r2, r0
 80031ea:	e66d      	b.n	8002ec8 <__aeabi_dsub+0x9c>
 80031ec:	4cca      	ldr	r4, [pc, #808]	; (8003518 <__aeabi_dsub+0x6ec>)
 80031ee:	1c72      	adds	r2, r6, #1
 80031f0:	4222      	tst	r2, r4
 80031f2:	d000      	beq.n	80031f6 <__aeabi_dsub+0x3ca>
 80031f4:	e0ad      	b.n	8003352 <__aeabi_dsub+0x526>
 80031f6:	464a      	mov	r2, r9
 80031f8:	431a      	orrs	r2, r3
 80031fa:	2e00      	cmp	r6, #0
 80031fc:	d1b8      	bne.n	8003170 <__aeabi_dsub+0x344>
 80031fe:	2a00      	cmp	r2, #0
 8003200:	d100      	bne.n	8003204 <__aeabi_dsub+0x3d8>
 8003202:	e158      	b.n	80034b6 <__aeabi_dsub+0x68a>
 8003204:	000a      	movs	r2, r1
 8003206:	4302      	orrs	r2, r0
 8003208:	d000      	beq.n	800320c <__aeabi_dsub+0x3e0>
 800320a:	e159      	b.n	80034c0 <__aeabi_dsub+0x694>
 800320c:	464a      	mov	r2, r9
 800320e:	0759      	lsls	r1, r3, #29
 8003210:	08d2      	lsrs	r2, r2, #3
 8003212:	430a      	orrs	r2, r1
 8003214:	08db      	lsrs	r3, r3, #3
 8003216:	e786      	b.n	8003126 <__aeabi_dsub+0x2fa>
 8003218:	464a      	mov	r2, r9
 800321a:	0759      	lsls	r1, r3, #29
 800321c:	08d2      	lsrs	r2, r2, #3
 800321e:	430a      	orrs	r2, r1
 8003220:	08db      	lsrs	r3, r3, #3
 8003222:	e7c1      	b.n	80031a8 <__aeabi_dsub+0x37c>
 8003224:	4dba      	ldr	r5, [pc, #744]	; (8003510 <__aeabi_dsub+0x6e4>)
 8003226:	42aa      	cmp	r2, r5
 8003228:	d100      	bne.n	800322c <__aeabi_dsub+0x400>
 800322a:	e11e      	b.n	800346a <__aeabi_dsub+0x63e>
 800322c:	2580      	movs	r5, #128	; 0x80
 800322e:	042d      	lsls	r5, r5, #16
 8003230:	432b      	orrs	r3, r5
 8003232:	4664      	mov	r4, ip
 8003234:	2c38      	cmp	r4, #56	; 0x38
 8003236:	dc5d      	bgt.n	80032f4 <__aeabi_dsub+0x4c8>
 8003238:	2c1f      	cmp	r4, #31
 800323a:	dd00      	ble.n	800323e <__aeabi_dsub+0x412>
 800323c:	e0d0      	b.n	80033e0 <__aeabi_dsub+0x5b4>
 800323e:	2520      	movs	r5, #32
 8003240:	4667      	mov	r7, ip
 8003242:	1b2d      	subs	r5, r5, r4
 8003244:	464e      	mov	r6, r9
 8003246:	001c      	movs	r4, r3
 8003248:	40fe      	lsrs	r6, r7
 800324a:	40ac      	lsls	r4, r5
 800324c:	4334      	orrs	r4, r6
 800324e:	464e      	mov	r6, r9
 8003250:	40ae      	lsls	r6, r5
 8003252:	0035      	movs	r5, r6
 8003254:	40fb      	lsrs	r3, r7
 8003256:	1e6e      	subs	r6, r5, #1
 8003258:	41b5      	sbcs	r5, r6
 800325a:	1ac9      	subs	r1, r1, r3
 800325c:	432c      	orrs	r4, r5
 800325e:	e04e      	b.n	80032fe <__aeabi_dsub+0x4d2>
 8003260:	464a      	mov	r2, r9
 8003262:	1a14      	subs	r4, r2, r0
 8003264:	45a1      	cmp	r9, r4
 8003266:	4192      	sbcs	r2, r2
 8003268:	4252      	negs	r2, r2
 800326a:	4690      	mov	r8, r2
 800326c:	1a5f      	subs	r7, r3, r1
 800326e:	003a      	movs	r2, r7
 8003270:	4647      	mov	r7, r8
 8003272:	1bd2      	subs	r2, r2, r7
 8003274:	4690      	mov	r8, r2
 8003276:	0212      	lsls	r2, r2, #8
 8003278:	d500      	bpl.n	800327c <__aeabi_dsub+0x450>
 800327a:	e08b      	b.n	8003394 <__aeabi_dsub+0x568>
 800327c:	4642      	mov	r2, r8
 800327e:	4322      	orrs	r2, r4
 8003280:	d000      	beq.n	8003284 <__aeabi_dsub+0x458>
 8003282:	e630      	b.n	8002ee6 <__aeabi_dsub+0xba>
 8003284:	2300      	movs	r3, #0
 8003286:	2500      	movs	r5, #0
 8003288:	e74d      	b.n	8003126 <__aeabi_dsub+0x2fa>
 800328a:	464a      	mov	r2, r9
 800328c:	0759      	lsls	r1, r3, #29
 800328e:	08d2      	lsrs	r2, r2, #3
 8003290:	430a      	orrs	r2, r1
 8003292:	08db      	lsrs	r3, r3, #3
 8003294:	e744      	b.n	8003120 <__aeabi_dsub+0x2f4>
 8003296:	4642      	mov	r2, r8
 8003298:	4b9e      	ldr	r3, [pc, #632]	; (8003514 <__aeabi_dsub+0x6e8>)
 800329a:	0861      	lsrs	r1, r4, #1
 800329c:	401a      	ands	r2, r3
 800329e:	0013      	movs	r3, r2
 80032a0:	2201      	movs	r2, #1
 80032a2:	4014      	ands	r4, r2
 80032a4:	430c      	orrs	r4, r1
 80032a6:	07da      	lsls	r2, r3, #31
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	4698      	mov	r8, r3
 80032ac:	4314      	orrs	r4, r2
 80032ae:	e641      	b.n	8002f34 <__aeabi_dsub+0x108>
 80032b0:	001a      	movs	r2, r3
 80032b2:	3e1f      	subs	r6, #31
 80032b4:	40f2      	lsrs	r2, r6
 80032b6:	0016      	movs	r6, r2
 80032b8:	2920      	cmp	r1, #32
 80032ba:	d003      	beq.n	80032c4 <__aeabi_dsub+0x498>
 80032bc:	2240      	movs	r2, #64	; 0x40
 80032be:	1a51      	subs	r1, r2, r1
 80032c0:	408b      	lsls	r3, r1
 80032c2:	431c      	orrs	r4, r3
 80032c4:	1e62      	subs	r2, r4, #1
 80032c6:	4194      	sbcs	r4, r2
 80032c8:	2300      	movs	r3, #0
 80032ca:	4334      	orrs	r4, r6
 80032cc:	4698      	mov	r8, r3
 80032ce:	2600      	movs	r6, #0
 80032d0:	e71d      	b.n	800310e <__aeabi_dsub+0x2e2>
 80032d2:	000c      	movs	r4, r1
 80032d4:	3a20      	subs	r2, #32
 80032d6:	40d4      	lsrs	r4, r2
 80032d8:	0022      	movs	r2, r4
 80032da:	4664      	mov	r4, ip
 80032dc:	2c20      	cmp	r4, #32
 80032de:	d004      	beq.n	80032ea <__aeabi_dsub+0x4be>
 80032e0:	2740      	movs	r7, #64	; 0x40
 80032e2:	1b3f      	subs	r7, r7, r4
 80032e4:	40b9      	lsls	r1, r7
 80032e6:	4308      	orrs	r0, r1
 80032e8:	4680      	mov	r8, r0
 80032ea:	4644      	mov	r4, r8
 80032ec:	1e61      	subs	r1, r4, #1
 80032ee:	418c      	sbcs	r4, r1
 80032f0:	4322      	orrs	r2, r4
 80032f2:	e5e9      	b.n	8002ec8 <__aeabi_dsub+0x9c>
 80032f4:	464c      	mov	r4, r9
 80032f6:	4323      	orrs	r3, r4
 80032f8:	001c      	movs	r4, r3
 80032fa:	1e63      	subs	r3, r4, #1
 80032fc:	419c      	sbcs	r4, r3
 80032fe:	1b04      	subs	r4, r0, r4
 8003300:	42a0      	cmp	r0, r4
 8003302:	419b      	sbcs	r3, r3
 8003304:	425b      	negs	r3, r3
 8003306:	1acb      	subs	r3, r1, r3
 8003308:	4698      	mov	r8, r3
 800330a:	465d      	mov	r5, fp
 800330c:	0016      	movs	r6, r2
 800330e:	e5e2      	b.n	8002ed6 <__aeabi_dsub+0xaa>
 8003310:	464e      	mov	r6, r9
 8003312:	431e      	orrs	r6, r3
 8003314:	d100      	bne.n	8003318 <__aeabi_dsub+0x4ec>
 8003316:	e0ae      	b.n	8003476 <__aeabi_dsub+0x64a>
 8003318:	1e66      	subs	r6, r4, #1
 800331a:	2c01      	cmp	r4, #1
 800331c:	d100      	bne.n	8003320 <__aeabi_dsub+0x4f4>
 800331e:	e0fd      	b.n	800351c <__aeabi_dsub+0x6f0>
 8003320:	4f7b      	ldr	r7, [pc, #492]	; (8003510 <__aeabi_dsub+0x6e4>)
 8003322:	42bc      	cmp	r4, r7
 8003324:	d100      	bne.n	8003328 <__aeabi_dsub+0x4fc>
 8003326:	e107      	b.n	8003538 <__aeabi_dsub+0x70c>
 8003328:	46b4      	mov	ip, r6
 800332a:	e69b      	b.n	8003064 <__aeabi_dsub+0x238>
 800332c:	4664      	mov	r4, ip
 800332e:	2220      	movs	r2, #32
 8003330:	1b12      	subs	r2, r2, r4
 8003332:	000c      	movs	r4, r1
 8003334:	4094      	lsls	r4, r2
 8003336:	0007      	movs	r7, r0
 8003338:	4090      	lsls	r0, r2
 800333a:	46a0      	mov	r8, r4
 800333c:	4664      	mov	r4, ip
 800333e:	1e42      	subs	r2, r0, #1
 8003340:	4190      	sbcs	r0, r2
 8003342:	4662      	mov	r2, ip
 8003344:	40e7      	lsrs	r7, r4
 8003346:	4644      	mov	r4, r8
 8003348:	40d1      	lsrs	r1, r2
 800334a:	433c      	orrs	r4, r7
 800334c:	4304      	orrs	r4, r0
 800334e:	185b      	adds	r3, r3, r1
 8003350:	e6f3      	b.n	800313a <__aeabi_dsub+0x30e>
 8003352:	4c6f      	ldr	r4, [pc, #444]	; (8003510 <__aeabi_dsub+0x6e4>)
 8003354:	42a2      	cmp	r2, r4
 8003356:	d100      	bne.n	800335a <__aeabi_dsub+0x52e>
 8003358:	e0d5      	b.n	8003506 <__aeabi_dsub+0x6da>
 800335a:	4448      	add	r0, r9
 800335c:	185b      	adds	r3, r3, r1
 800335e:	4548      	cmp	r0, r9
 8003360:	4189      	sbcs	r1, r1
 8003362:	4249      	negs	r1, r1
 8003364:	185b      	adds	r3, r3, r1
 8003366:	07dc      	lsls	r4, r3, #31
 8003368:	0840      	lsrs	r0, r0, #1
 800336a:	085b      	lsrs	r3, r3, #1
 800336c:	4698      	mov	r8, r3
 800336e:	0016      	movs	r6, r2
 8003370:	4304      	orrs	r4, r0
 8003372:	e6cc      	b.n	800310e <__aeabi_dsub+0x2e2>
 8003374:	2a00      	cmp	r2, #0
 8003376:	d000      	beq.n	800337a <__aeabi_dsub+0x54e>
 8003378:	e082      	b.n	8003480 <__aeabi_dsub+0x654>
 800337a:	000a      	movs	r2, r1
 800337c:	4302      	orrs	r2, r0
 800337e:	d140      	bne.n	8003402 <__aeabi_dsub+0x5d6>
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	2500      	movs	r5, #0
 8003384:	031b      	lsls	r3, r3, #12
 8003386:	e713      	b.n	80031b0 <__aeabi_dsub+0x384>
 8003388:	074b      	lsls	r3, r1, #29
 800338a:	08c2      	lsrs	r2, r0, #3
 800338c:	431a      	orrs	r2, r3
 800338e:	465d      	mov	r5, fp
 8003390:	08cb      	lsrs	r3, r1, #3
 8003392:	e6c5      	b.n	8003120 <__aeabi_dsub+0x2f4>
 8003394:	464a      	mov	r2, r9
 8003396:	1a84      	subs	r4, r0, r2
 8003398:	42a0      	cmp	r0, r4
 800339a:	4192      	sbcs	r2, r2
 800339c:	1acb      	subs	r3, r1, r3
 800339e:	4252      	negs	r2, r2
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	4698      	mov	r8, r3
 80033a4:	465d      	mov	r5, fp
 80033a6:	e59e      	b.n	8002ee6 <__aeabi_dsub+0xba>
 80033a8:	464a      	mov	r2, r9
 80033aa:	0759      	lsls	r1, r3, #29
 80033ac:	08d2      	lsrs	r2, r2, #3
 80033ae:	430a      	orrs	r2, r1
 80033b0:	08db      	lsrs	r3, r3, #3
 80033b2:	e6f9      	b.n	80031a8 <__aeabi_dsub+0x37c>
 80033b4:	464a      	mov	r2, r9
 80033b6:	1a14      	subs	r4, r2, r0
 80033b8:	45a1      	cmp	r9, r4
 80033ba:	4192      	sbcs	r2, r2
 80033bc:	1a5b      	subs	r3, r3, r1
 80033be:	4252      	negs	r2, r2
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	4698      	mov	r8, r3
 80033c4:	2601      	movs	r6, #1
 80033c6:	e586      	b.n	8002ed6 <__aeabi_dsub+0xaa>
 80033c8:	464a      	mov	r2, r9
 80033ca:	0759      	lsls	r1, r3, #29
 80033cc:	08d2      	lsrs	r2, r2, #3
 80033ce:	430a      	orrs	r2, r1
 80033d0:	08db      	lsrs	r3, r3, #3
 80033d2:	e6a5      	b.n	8003120 <__aeabi_dsub+0x2f4>
 80033d4:	464c      	mov	r4, r9
 80033d6:	4323      	orrs	r3, r4
 80033d8:	001c      	movs	r4, r3
 80033da:	1e63      	subs	r3, r4, #1
 80033dc:	419c      	sbcs	r4, r3
 80033de:	e65b      	b.n	8003098 <__aeabi_dsub+0x26c>
 80033e0:	4665      	mov	r5, ip
 80033e2:	001e      	movs	r6, r3
 80033e4:	3d20      	subs	r5, #32
 80033e6:	40ee      	lsrs	r6, r5
 80033e8:	2c20      	cmp	r4, #32
 80033ea:	d005      	beq.n	80033f8 <__aeabi_dsub+0x5cc>
 80033ec:	2540      	movs	r5, #64	; 0x40
 80033ee:	1b2d      	subs	r5, r5, r4
 80033f0:	40ab      	lsls	r3, r5
 80033f2:	464c      	mov	r4, r9
 80033f4:	431c      	orrs	r4, r3
 80033f6:	46a2      	mov	sl, r4
 80033f8:	4654      	mov	r4, sl
 80033fa:	1e63      	subs	r3, r4, #1
 80033fc:	419c      	sbcs	r4, r3
 80033fe:	4334      	orrs	r4, r6
 8003400:	e77d      	b.n	80032fe <__aeabi_dsub+0x4d2>
 8003402:	074b      	lsls	r3, r1, #29
 8003404:	08c2      	lsrs	r2, r0, #3
 8003406:	431a      	orrs	r2, r3
 8003408:	465d      	mov	r5, fp
 800340a:	08cb      	lsrs	r3, r1, #3
 800340c:	e6cc      	b.n	80031a8 <__aeabi_dsub+0x37c>
 800340e:	000a      	movs	r2, r1
 8003410:	4302      	orrs	r2, r0
 8003412:	d100      	bne.n	8003416 <__aeabi_dsub+0x5ea>
 8003414:	e736      	b.n	8003284 <__aeabi_dsub+0x458>
 8003416:	074b      	lsls	r3, r1, #29
 8003418:	08c2      	lsrs	r2, r0, #3
 800341a:	431a      	orrs	r2, r3
 800341c:	465d      	mov	r5, fp
 800341e:	08cb      	lsrs	r3, r1, #3
 8003420:	e681      	b.n	8003126 <__aeabi_dsub+0x2fa>
 8003422:	464a      	mov	r2, r9
 8003424:	1a84      	subs	r4, r0, r2
 8003426:	42a0      	cmp	r0, r4
 8003428:	4192      	sbcs	r2, r2
 800342a:	1acb      	subs	r3, r1, r3
 800342c:	4252      	negs	r2, r2
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	4698      	mov	r8, r3
 8003432:	465d      	mov	r5, fp
 8003434:	2601      	movs	r6, #1
 8003436:	e54e      	b.n	8002ed6 <__aeabi_dsub+0xaa>
 8003438:	074b      	lsls	r3, r1, #29
 800343a:	08c2      	lsrs	r2, r0, #3
 800343c:	431a      	orrs	r2, r3
 800343e:	08cb      	lsrs	r3, r1, #3
 8003440:	e6b2      	b.n	80031a8 <__aeabi_dsub+0x37c>
 8003442:	464a      	mov	r2, r9
 8003444:	1a14      	subs	r4, r2, r0
 8003446:	45a1      	cmp	r9, r4
 8003448:	4192      	sbcs	r2, r2
 800344a:	1a5f      	subs	r7, r3, r1
 800344c:	4252      	negs	r2, r2
 800344e:	1aba      	subs	r2, r7, r2
 8003450:	4690      	mov	r8, r2
 8003452:	0212      	lsls	r2, r2, #8
 8003454:	d56b      	bpl.n	800352e <__aeabi_dsub+0x702>
 8003456:	464a      	mov	r2, r9
 8003458:	1a84      	subs	r4, r0, r2
 800345a:	42a0      	cmp	r0, r4
 800345c:	4192      	sbcs	r2, r2
 800345e:	1acb      	subs	r3, r1, r3
 8003460:	4252      	negs	r2, r2
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	4698      	mov	r8, r3
 8003466:	465d      	mov	r5, fp
 8003468:	e564      	b.n	8002f34 <__aeabi_dsub+0x108>
 800346a:	074b      	lsls	r3, r1, #29
 800346c:	08c2      	lsrs	r2, r0, #3
 800346e:	431a      	orrs	r2, r3
 8003470:	465d      	mov	r5, fp
 8003472:	08cb      	lsrs	r3, r1, #3
 8003474:	e698      	b.n	80031a8 <__aeabi_dsub+0x37c>
 8003476:	074b      	lsls	r3, r1, #29
 8003478:	08c2      	lsrs	r2, r0, #3
 800347a:	431a      	orrs	r2, r3
 800347c:	08cb      	lsrs	r3, r1, #3
 800347e:	e64f      	b.n	8003120 <__aeabi_dsub+0x2f4>
 8003480:	000a      	movs	r2, r1
 8003482:	4302      	orrs	r2, r0
 8003484:	d090      	beq.n	80033a8 <__aeabi_dsub+0x57c>
 8003486:	464a      	mov	r2, r9
 8003488:	075c      	lsls	r4, r3, #29
 800348a:	08d2      	lsrs	r2, r2, #3
 800348c:	4314      	orrs	r4, r2
 800348e:	2280      	movs	r2, #128	; 0x80
 8003490:	08db      	lsrs	r3, r3, #3
 8003492:	0312      	lsls	r2, r2, #12
 8003494:	4213      	tst	r3, r2
 8003496:	d008      	beq.n	80034aa <__aeabi_dsub+0x67e>
 8003498:	08ce      	lsrs	r6, r1, #3
 800349a:	4216      	tst	r6, r2
 800349c:	d105      	bne.n	80034aa <__aeabi_dsub+0x67e>
 800349e:	08c0      	lsrs	r0, r0, #3
 80034a0:	0749      	lsls	r1, r1, #29
 80034a2:	4308      	orrs	r0, r1
 80034a4:	0004      	movs	r4, r0
 80034a6:	465d      	mov	r5, fp
 80034a8:	0033      	movs	r3, r6
 80034aa:	0f61      	lsrs	r1, r4, #29
 80034ac:	00e2      	lsls	r2, r4, #3
 80034ae:	0749      	lsls	r1, r1, #29
 80034b0:	08d2      	lsrs	r2, r2, #3
 80034b2:	430a      	orrs	r2, r1
 80034b4:	e678      	b.n	80031a8 <__aeabi_dsub+0x37c>
 80034b6:	074b      	lsls	r3, r1, #29
 80034b8:	08c2      	lsrs	r2, r0, #3
 80034ba:	431a      	orrs	r2, r3
 80034bc:	08cb      	lsrs	r3, r1, #3
 80034be:	e632      	b.n	8003126 <__aeabi_dsub+0x2fa>
 80034c0:	4448      	add	r0, r9
 80034c2:	185b      	adds	r3, r3, r1
 80034c4:	4548      	cmp	r0, r9
 80034c6:	4192      	sbcs	r2, r2
 80034c8:	4698      	mov	r8, r3
 80034ca:	4252      	negs	r2, r2
 80034cc:	4490      	add	r8, r2
 80034ce:	4643      	mov	r3, r8
 80034d0:	0004      	movs	r4, r0
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	d400      	bmi.n	80034d8 <__aeabi_dsub+0x6ac>
 80034d6:	e61a      	b.n	800310e <__aeabi_dsub+0x2e2>
 80034d8:	4642      	mov	r2, r8
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <__aeabi_dsub+0x6e8>)
 80034dc:	2601      	movs	r6, #1
 80034de:	401a      	ands	r2, r3
 80034e0:	4690      	mov	r8, r2
 80034e2:	e614      	b.n	800310e <__aeabi_dsub+0x2e2>
 80034e4:	4666      	mov	r6, ip
 80034e6:	001f      	movs	r7, r3
 80034e8:	3e20      	subs	r6, #32
 80034ea:	40f7      	lsrs	r7, r6
 80034ec:	2c20      	cmp	r4, #32
 80034ee:	d005      	beq.n	80034fc <__aeabi_dsub+0x6d0>
 80034f0:	2640      	movs	r6, #64	; 0x40
 80034f2:	1b36      	subs	r6, r6, r4
 80034f4:	40b3      	lsls	r3, r6
 80034f6:	464c      	mov	r4, r9
 80034f8:	431c      	orrs	r4, r3
 80034fa:	46a2      	mov	sl, r4
 80034fc:	4654      	mov	r4, sl
 80034fe:	1e63      	subs	r3, r4, #1
 8003500:	419c      	sbcs	r4, r3
 8003502:	433c      	orrs	r4, r7
 8003504:	e5c8      	b.n	8003098 <__aeabi_dsub+0x26c>
 8003506:	0011      	movs	r1, r2
 8003508:	2300      	movs	r3, #0
 800350a:	2200      	movs	r2, #0
 800350c:	e532      	b.n	8002f74 <__aeabi_dsub+0x148>
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	000007ff 	.word	0x000007ff
 8003514:	ff7fffff 	.word	0xff7fffff
 8003518:	000007fe 	.word	0x000007fe
 800351c:	464a      	mov	r2, r9
 800351e:	1814      	adds	r4, r2, r0
 8003520:	4284      	cmp	r4, r0
 8003522:	4192      	sbcs	r2, r2
 8003524:	185b      	adds	r3, r3, r1
 8003526:	4698      	mov	r8, r3
 8003528:	4252      	negs	r2, r2
 800352a:	4490      	add	r8, r2
 800352c:	e5e9      	b.n	8003102 <__aeabi_dsub+0x2d6>
 800352e:	4642      	mov	r2, r8
 8003530:	4322      	orrs	r2, r4
 8003532:	d100      	bne.n	8003536 <__aeabi_dsub+0x70a>
 8003534:	e6a6      	b.n	8003284 <__aeabi_dsub+0x458>
 8003536:	e5ea      	b.n	800310e <__aeabi_dsub+0x2e2>
 8003538:	074b      	lsls	r3, r1, #29
 800353a:	08c2      	lsrs	r2, r0, #3
 800353c:	431a      	orrs	r2, r3
 800353e:	08cb      	lsrs	r3, r1, #3
 8003540:	e632      	b.n	80031a8 <__aeabi_dsub+0x37c>
 8003542:	2200      	movs	r2, #0
 8003544:	4901      	ldr	r1, [pc, #4]	; (800354c <__aeabi_dsub+0x720>)
 8003546:	0013      	movs	r3, r2
 8003548:	e514      	b.n	8002f74 <__aeabi_dsub+0x148>
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	000007ff 	.word	0x000007ff

08003550 <__aeabi_d2iz>:
 8003550:	000a      	movs	r2, r1
 8003552:	b530      	push	{r4, r5, lr}
 8003554:	4c13      	ldr	r4, [pc, #76]	; (80035a4 <__aeabi_d2iz+0x54>)
 8003556:	0053      	lsls	r3, r2, #1
 8003558:	0309      	lsls	r1, r1, #12
 800355a:	0005      	movs	r5, r0
 800355c:	0b09      	lsrs	r1, r1, #12
 800355e:	2000      	movs	r0, #0
 8003560:	0d5b      	lsrs	r3, r3, #21
 8003562:	0fd2      	lsrs	r2, r2, #31
 8003564:	42a3      	cmp	r3, r4
 8003566:	dd04      	ble.n	8003572 <__aeabi_d2iz+0x22>
 8003568:	480f      	ldr	r0, [pc, #60]	; (80035a8 <__aeabi_d2iz+0x58>)
 800356a:	4283      	cmp	r3, r0
 800356c:	dd02      	ble.n	8003574 <__aeabi_d2iz+0x24>
 800356e:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <__aeabi_d2iz+0x5c>)
 8003570:	18d0      	adds	r0, r2, r3
 8003572:	bd30      	pop	{r4, r5, pc}
 8003574:	2080      	movs	r0, #128	; 0x80
 8003576:	0340      	lsls	r0, r0, #13
 8003578:	4301      	orrs	r1, r0
 800357a:	480d      	ldr	r0, [pc, #52]	; (80035b0 <__aeabi_d2iz+0x60>)
 800357c:	1ac0      	subs	r0, r0, r3
 800357e:	281f      	cmp	r0, #31
 8003580:	dd08      	ble.n	8003594 <__aeabi_d2iz+0x44>
 8003582:	480c      	ldr	r0, [pc, #48]	; (80035b4 <__aeabi_d2iz+0x64>)
 8003584:	1ac3      	subs	r3, r0, r3
 8003586:	40d9      	lsrs	r1, r3
 8003588:	000b      	movs	r3, r1
 800358a:	4258      	negs	r0, r3
 800358c:	2a00      	cmp	r2, #0
 800358e:	d1f0      	bne.n	8003572 <__aeabi_d2iz+0x22>
 8003590:	0018      	movs	r0, r3
 8003592:	e7ee      	b.n	8003572 <__aeabi_d2iz+0x22>
 8003594:	4c08      	ldr	r4, [pc, #32]	; (80035b8 <__aeabi_d2iz+0x68>)
 8003596:	40c5      	lsrs	r5, r0
 8003598:	46a4      	mov	ip, r4
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	000b      	movs	r3, r1
 80035a0:	432b      	orrs	r3, r5
 80035a2:	e7f2      	b.n	800358a <__aeabi_d2iz+0x3a>
 80035a4:	000003fe 	.word	0x000003fe
 80035a8:	0000041d 	.word	0x0000041d
 80035ac:	7fffffff 	.word	0x7fffffff
 80035b0:	00000433 	.word	0x00000433
 80035b4:	00000413 	.word	0x00000413
 80035b8:	fffffbed 	.word	0xfffffbed

080035bc <__aeabi_i2d>:
 80035bc:	b570      	push	{r4, r5, r6, lr}
 80035be:	2800      	cmp	r0, #0
 80035c0:	d016      	beq.n	80035f0 <__aeabi_i2d+0x34>
 80035c2:	17c3      	asrs	r3, r0, #31
 80035c4:	18c5      	adds	r5, r0, r3
 80035c6:	405d      	eors	r5, r3
 80035c8:	0fc4      	lsrs	r4, r0, #31
 80035ca:	0028      	movs	r0, r5
 80035cc:	f000 f84c 	bl	8003668 <__clzsi2>
 80035d0:	4a11      	ldr	r2, [pc, #68]	; (8003618 <__aeabi_i2d+0x5c>)
 80035d2:	1a12      	subs	r2, r2, r0
 80035d4:	280a      	cmp	r0, #10
 80035d6:	dc16      	bgt.n	8003606 <__aeabi_i2d+0x4a>
 80035d8:	0003      	movs	r3, r0
 80035da:	002e      	movs	r6, r5
 80035dc:	3315      	adds	r3, #21
 80035de:	409e      	lsls	r6, r3
 80035e0:	230b      	movs	r3, #11
 80035e2:	1a18      	subs	r0, r3, r0
 80035e4:	40c5      	lsrs	r5, r0
 80035e6:	0553      	lsls	r3, r2, #21
 80035e8:	032d      	lsls	r5, r5, #12
 80035ea:	0b2d      	lsrs	r5, r5, #12
 80035ec:	0d5b      	lsrs	r3, r3, #21
 80035ee:	e003      	b.n	80035f8 <__aeabi_i2d+0x3c>
 80035f0:	2400      	movs	r4, #0
 80035f2:	2300      	movs	r3, #0
 80035f4:	2500      	movs	r5, #0
 80035f6:	2600      	movs	r6, #0
 80035f8:	051b      	lsls	r3, r3, #20
 80035fa:	432b      	orrs	r3, r5
 80035fc:	07e4      	lsls	r4, r4, #31
 80035fe:	4323      	orrs	r3, r4
 8003600:	0030      	movs	r0, r6
 8003602:	0019      	movs	r1, r3
 8003604:	bd70      	pop	{r4, r5, r6, pc}
 8003606:	380b      	subs	r0, #11
 8003608:	4085      	lsls	r5, r0
 800360a:	0553      	lsls	r3, r2, #21
 800360c:	032d      	lsls	r5, r5, #12
 800360e:	2600      	movs	r6, #0
 8003610:	0b2d      	lsrs	r5, r5, #12
 8003612:	0d5b      	lsrs	r3, r3, #21
 8003614:	e7f0      	b.n	80035f8 <__aeabi_i2d+0x3c>
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	0000041e 	.word	0x0000041e

0800361c <__aeabi_ui2d>:
 800361c:	b510      	push	{r4, lr}
 800361e:	1e04      	subs	r4, r0, #0
 8003620:	d010      	beq.n	8003644 <__aeabi_ui2d+0x28>
 8003622:	f000 f821 	bl	8003668 <__clzsi2>
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <__aeabi_ui2d+0x48>)
 8003628:	1a1b      	subs	r3, r3, r0
 800362a:	280a      	cmp	r0, #10
 800362c:	dc11      	bgt.n	8003652 <__aeabi_ui2d+0x36>
 800362e:	220b      	movs	r2, #11
 8003630:	0021      	movs	r1, r4
 8003632:	1a12      	subs	r2, r2, r0
 8003634:	40d1      	lsrs	r1, r2
 8003636:	3015      	adds	r0, #21
 8003638:	030a      	lsls	r2, r1, #12
 800363a:	055b      	lsls	r3, r3, #21
 800363c:	4084      	lsls	r4, r0
 800363e:	0b12      	lsrs	r2, r2, #12
 8003640:	0d5b      	lsrs	r3, r3, #21
 8003642:	e001      	b.n	8003648 <__aeabi_ui2d+0x2c>
 8003644:	2300      	movs	r3, #0
 8003646:	2200      	movs	r2, #0
 8003648:	051b      	lsls	r3, r3, #20
 800364a:	4313      	orrs	r3, r2
 800364c:	0020      	movs	r0, r4
 800364e:	0019      	movs	r1, r3
 8003650:	bd10      	pop	{r4, pc}
 8003652:	0022      	movs	r2, r4
 8003654:	380b      	subs	r0, #11
 8003656:	4082      	lsls	r2, r0
 8003658:	055b      	lsls	r3, r3, #21
 800365a:	0312      	lsls	r2, r2, #12
 800365c:	2400      	movs	r4, #0
 800365e:	0b12      	lsrs	r2, r2, #12
 8003660:	0d5b      	lsrs	r3, r3, #21
 8003662:	e7f1      	b.n	8003648 <__aeabi_ui2d+0x2c>
 8003664:	0000041e 	.word	0x0000041e

08003668 <__clzsi2>:
 8003668:	211c      	movs	r1, #28
 800366a:	2301      	movs	r3, #1
 800366c:	041b      	lsls	r3, r3, #16
 800366e:	4298      	cmp	r0, r3
 8003670:	d301      	bcc.n	8003676 <__clzsi2+0xe>
 8003672:	0c00      	lsrs	r0, r0, #16
 8003674:	3910      	subs	r1, #16
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	4298      	cmp	r0, r3
 800367a:	d301      	bcc.n	8003680 <__clzsi2+0x18>
 800367c:	0a00      	lsrs	r0, r0, #8
 800367e:	3908      	subs	r1, #8
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	4298      	cmp	r0, r3
 8003684:	d301      	bcc.n	800368a <__clzsi2+0x22>
 8003686:	0900      	lsrs	r0, r0, #4
 8003688:	3904      	subs	r1, #4
 800368a:	a202      	add	r2, pc, #8	; (adr r2, 8003694 <__clzsi2+0x2c>)
 800368c:	5c10      	ldrb	r0, [r2, r0]
 800368e:	1840      	adds	r0, r0, r1
 8003690:	4770      	bx	lr
 8003692:	46c0      	nop			; (mov r8, r8)
 8003694:	02020304 	.word	0x02020304
 8003698:	01010101 	.word	0x01010101
	...
 80036a4:	736e6553 	.word	0x736e6553
 80036a8:	5320726f 	.word	0x5320726f
 80036ac:	74726174 	.word	0x74726174
 80036b0:	6f4c000a 	.word	0x6f4c000a
 80036b4:	000a706f 	.word	0x000a706f
 80036b8:	20504d54 	.word	0x20504d54
 80036bc:	3a433249 	.word	0x3a433249
 80036c0:	504d5400 	.word	0x504d5400
 80036c4:	43324920 	.word	0x43324920
 80036c8:	63655220 	.word	0x63655220
 80036cc:	3a76      	.short	0x3a76
 80036ce:	00          	.byte	0x00
 80036cf:	54          	.byte	0x54
 80036d0:	4920504d 	.word	0x4920504d
 80036d4:	2074696e 	.word	0x2074696e
 80036d8:	656e6f44 	.word	0x656e6f44
 80036dc:	000a      	.short	0x000a
 80036de:	4d54      	.short	0x4d54
 80036e0:	6e452050 	.word	0x6e452050
 80036e4:	6f442064 	.word	0x6f442064
 80036e8:	000a656e 	.word	0x000a656e
 80036ec:	00a0e101 	.word	0x00a0e101
 80036f0:	206d654d 	.word	0x206d654d
 80036f4:	65706957 	.word	0x65706957
 80036f8:	61655220 	.word	0x61655220
 80036fc:	676e6964 	.word	0x676e6964
 8003700:	0a73      	.short	0x0a73
 8003702:	00          	.byte	0x00
 8003703:	66          	.byte	0x66
 8003704:	002b696e 	.word	0x002b696e
 8003708:	00696e66 	.word	0x00696e66
 800370c:	006e616e 	.word	0x006e616e
 8003710:	2d696e66 	.word	0x2d696e66
 8003714:	00000000 	.word	0x00000000

08003718 <pow10.4171>:
 8003718:	00000000 3ff00000 00000000 40240000     .......?......$@
 8003728:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8003738:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8003748:	00000000 412e8480 00000000 416312d0     .......A......cA
 8003758:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8003768:	204d4652 20495053 74697257 30250065     RFM SPI Write.%0
 8003778:	3a207832 32302520 52000a78 52204d46     2x : %02x..RFM R
 8003788:	74657365 6e6f4420 01000a65 09080706     eset Done.......
 8003798:	0d0c0b0a 11100f0e 15141312 19181716     ................
 80037a8:	1d1c1b1a 21201f1e 25242322 4d4b2726     ...... !"#$%&'KM
 80037b8:	4d465200 696e4920 6f442074 000a656e     .RFM Init Done..
 80037c8:	204d4652 20646e45 656e6f44 6547000a     RFM End Done..Ge
 80037d8:	75252074 0a752520 61655200 75252064     t %u %u..Read %u
 80037e8:	4652000a 5854204d 73655400 676e6974     ..RFM TX.Testing
 80037f8:	0a465220 6e655300 25000a74 73752069      RF..Sent..%i us
 8003808:	6150000a 74656b63 63655220 65766965     ..Packet Receive
 8003818:	25000a64 2c783230 69540020 756f656d     d..%02x, .Timeou
 8003828:	73252074 38302520 52000a58 49204354     t %s %08X..RTC I
 8003838:	000a5253 08002ae8 08002a16 08002a16     SR...*...*...*..
 8003848:	08002a12 08002a1c 08002a1c 08002d08     .*...*...*...-..
 8003858:	08002a12 08002a1c 08002d08 08002a1c     .*...*...-...*..
 8003868:	08002a12 08002ca6 08002ca6 08002ca6     .*...,...,...,..
 8003878:	08002d72                                r-..
