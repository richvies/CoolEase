# 1 "common/src/timers.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "common/src/timers.c"
# 1 "common/include/common/timers.h" 1



# 1 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/lib/gcc/arm-none-eabi/9.3.1/include/stdint.h" 1 3 4
# 9 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/lib/gcc/arm-none-eabi/9.3.1/include/stdint.h" 3 4
# 1 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/stdint.h" 1 3 4
# 12 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/stdint.h" 3 4
# 1 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/machine/_default_types.h" 1 3 4







# 1 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/sys/features.h" 1 3 4
# 28 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/sys/features.h" 3 4
# 1 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/_newlib_version.h" 1 3 4
# 29 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/sys/features.h" 2 3 4
# 9 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/machine/_default_types.h" 2 3 4
# 41 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/machine/_default_types.h" 3 4

# 41 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef signed char __int8_t;

typedef unsigned char __uint8_t;
# 55 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef short int __int16_t;

typedef short unsigned int __uint16_t;
# 77 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long int __int32_t;

typedef long unsigned int __uint32_t;
# 103 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long long int __int64_t;

typedef long long unsigned int __uint64_t;
# 134 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef signed char __int_least8_t;

typedef unsigned char __uint_least8_t;
# 160 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef short int __int_least16_t;

typedef short unsigned int __uint_least16_t;
# 182 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long int __int_least32_t;

typedef long unsigned int __uint_least32_t;
# 200 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long long int __int_least64_t;

typedef long long unsigned int __uint_least64_t;
# 214 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/machine/_default_types.h" 3 4
typedef long long int __intmax_t;







typedef long long unsigned int __uintmax_t;







typedef int __intptr_t;

typedef unsigned int __uintptr_t;
# 13 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/stdint.h" 2 3 4
# 1 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/sys/_intsup.h" 1 3 4
# 35 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/sys/_intsup.h" 3 4
       
       
       
       
       
       
       
       
# 190 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/sys/_intsup.h" 3 4
       
       
       
       
       
       
       
       
# 14 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/stdint.h" 2 3 4
# 1 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/sys/_stdint.h" 1 3 4
# 20 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/sys/_stdint.h" 3 4
typedef __int8_t int8_t ;



typedef __uint8_t uint8_t ;







typedef __int16_t int16_t ;



typedef __uint16_t uint16_t ;







typedef __int32_t int32_t ;



typedef __uint32_t uint32_t ;







typedef __int64_t int64_t ;



typedef __uint64_t uint64_t ;






typedef __intmax_t intmax_t;




typedef __uintmax_t uintmax_t;




typedef __intptr_t intptr_t;




typedef __uintptr_t uintptr_t;
# 15 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/stdint.h" 2 3 4






typedef __int_least8_t int_least8_t;
typedef __uint_least8_t uint_least8_t;




typedef __int_least16_t int_least16_t;
typedef __uint_least16_t uint_least16_t;




typedef __int_least32_t int_least32_t;
typedef __uint_least32_t uint_least32_t;




typedef __int_least64_t int_least64_t;
typedef __uint_least64_t uint_least64_t;
# 51 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/stdint.h" 3 4
  typedef int int_fast8_t;
  typedef unsigned int uint_fast8_t;
# 61 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/stdint.h" 3 4
  typedef int int_fast16_t;
  typedef unsigned int uint_fast16_t;
# 71 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/stdint.h" 3 4
  typedef int int_fast32_t;
  typedef unsigned int uint_fast32_t;
# 81 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/arm-none-eabi/include/stdint.h" 3 4
  typedef long long int int_fast64_t;
  typedef long long unsigned int uint_fast64_t;
# 10 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/lib/gcc/arm-none-eabi/9.3.1/include/stdint.h" 2 3 4
# 5 "common/include/common/timers.h" 2
# 1 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/lib/gcc/arm-none-eabi/9.3.1/include/stdbool.h" 1 3 4
# 6 "common/include/common/timers.h" 2
# 26 "common/include/common/timers.h"

# 26 "common/include/common/timers.h"
void timers_rtc_init(uint32_t standby_time_seconds);



void timers_lptim_init(void);


void timers_delay_microseconds(uint32_t delay_microseconds);


uint16_t timers_micros(void);



void timers_tim6_init(void);


void timers_delay_milliseconds(uint32_t delay_milliseconds);


uint16_t timers_millis(void);



void timers_iwdg_init(uint32_t period);


void timers_pet_dogs(void);



void timers_enter_standby(void);


void timeout_init(void);

# 61 "common/include/common/timers.h" 3 4
_Bool 
# 61 "common/include/common/timers.h"
    timeout(uint32_t time_microseconds, char *msg, uint32_t data);

void set_gpio_for_standby(void);
# 2 "common/src/timers.c" 2

# 1 "libopencm3/include/libopencm3/stm32/rcc.h" 1
# 20 "libopencm3/include/libopencm3/stm32/rcc.h"
# 1 "libopencm3/include/libopencm3/cm3/common.h" 1
# 21 "libopencm3/include/libopencm3/stm32/rcc.h" 2
# 1 "libopencm3/include/libopencm3/stm32/memorymap.h" 1
# 36 "libopencm3/include/libopencm3/stm32/memorymap.h"
# 1 "libopencm3/include/libopencm3/stm32/l0/memorymap.h" 1
# 21 "libopencm3/include/libopencm3/stm32/l0/memorymap.h"
# 1 "libopencm3/include/libopencm3/cm3/memorymap.h" 1
# 22 "libopencm3/include/libopencm3/stm32/l0/memorymap.h" 2
# 37 "libopencm3/include/libopencm3/stm32/memorymap.h" 2
# 22 "libopencm3/include/libopencm3/stm32/rcc.h" 2
# 36 "libopencm3/include/libopencm3/stm32/rcc.h"
# 1 "libopencm3/include/libopencm3/stm32/l0/rcc.h" 1
# 45 "libopencm3/include/libopencm3/stm32/l0/rcc.h"
# 1 "libopencm3/include/libopencm3/stm32/pwr.h" 1
# 38 "libopencm3/include/libopencm3/stm32/pwr.h"
# 1 "libopencm3/include/libopencm3/stm32/l0/pwr.h" 1
# 34 "libopencm3/include/libopencm3/stm32/l0/pwr.h"
# 1 "libopencm3/include/libopencm3/stm32/common/pwr_common_v2.h" 1
# 29 "libopencm3/include/libopencm3/stm32/common/pwr_common_v2.h"
# 1 "libopencm3/include/libopencm3/stm32/common/pwr_common_v1.h" 1
# 105 "libopencm3/include/libopencm3/stm32/common/pwr_common_v1.h"


void pwr_disable_backup_domain_write_protect(void);
void pwr_enable_backup_domain_write_protect(void);
void pwr_enable_power_voltage_detect(uint32_t pvd_level);
void pwr_disable_power_voltage_detect(void);
void pwr_clear_standby_flag(void);
void pwr_clear_wakeup_flag(void);
void pwr_set_standby_mode(void);
void pwr_set_stop_mode(void);
void pwr_voltage_regulator_on_in_stop(void);
void pwr_voltage_regulator_low_power_in_stop(void);
void pwr_enable_wakeup_pin(void);
void pwr_disable_wakeup_pin(void);

# 119 "libopencm3/include/libopencm3/stm32/common/pwr_common_v1.h" 3 4
_Bool 
# 119 "libopencm3/include/libopencm3/stm32/common/pwr_common_v1.h"
    pwr_voltage_high(void);

# 120 "libopencm3/include/libopencm3/stm32/common/pwr_common_v1.h" 3 4
_Bool 
# 120 "libopencm3/include/libopencm3/stm32/common/pwr_common_v1.h"
    pwr_get_standby_flag(void);

# 121 "libopencm3/include/libopencm3/stm32/common/pwr_common_v1.h" 3 4
_Bool 
# 121 "libopencm3/include/libopencm3/stm32/common/pwr_common_v1.h"
    pwr_get_wakeup_flag(void);


# 30 "libopencm3/include/libopencm3/stm32/common/pwr_common_v2.h" 2
# 82 "libopencm3/include/libopencm3/stm32/common/pwr_common_v2.h"
enum pwr_vos_scale {

 PWR_SCALE1,

 PWR_SCALE2,

 PWR_SCALE3,
};



void pwr_set_vos_scale(enum pwr_vos_scale scale);


# 35 "libopencm3/include/libopencm3/stm32/l0/pwr.h" 2
# 39 "libopencm3/include/libopencm3/stm32/pwr.h" 2
# 46 "libopencm3/include/libopencm3/stm32/l0/rcc.h" 2
# 506 "libopencm3/include/libopencm3/stm32/l0/rcc.h"
struct rcc_clock_scale {
 uint8_t pll_mul;
 uint16_t pll_div;
 uint8_t pll_source;
 uint8_t flash_waitstates;
 enum pwr_vos_scale voltage_scale;
 uint8_t hpre;
 uint8_t ppre1;
 uint8_t ppre2;

 uint32_t ahb_frequency;
 uint32_t apb1_frequency;
 uint32_t apb2_frequency;
 uint8_t msi_range;
};


extern uint32_t rcc_ahb_frequency;
extern uint32_t rcc_apb1_frequency;
extern uint32_t rcc_apb2_frequency;



enum rcc_osc {
 RCC_PLL, RCC_HSE, RCC_HSI48, RCC_HSI16, RCC_MSI, RCC_LSE, RCC_LSI
};




enum rcc_periph_clken {

 RCC_GPIOA = (((0x2c) << 5) + (0)),
 RCC_GPIOB = (((0x2c) << 5) + (1)),
 RCC_GPIOC = (((0x2c) << 5) + (2)),
 RCC_GPIOD = (((0x2c) << 5) + (3)),
 RCC_GPIOE = (((0x2c) << 5) + (4)),
 RCC_GPIOH = (((0x2c) << 5) + (7)),


 RCC_DMA = (((0x30) << 5) + (0)),
 RCC_MIF = (((0x30) << 5) + (8)),
 RCC_CRC = (((0x30) << 5) + (12)),
 RCC_TSC = (((0x30) << 5) + (16)),
 RCC_RNG = (((0x30) << 5) + (20)),
 RCC_CRYPT = (((0x30) << 5) + (24)),


 RCC_SYSCFG = (((0x34) << 5) + (0)),
 RCC_TIM21 = (((0x34) << 5) + (2)),
 RCC_TIM22 = (((0x34) << 5) + (5)),
 RCC_FW = (((0x34) << 5) + (7)),
 RCC_ADC1 = (((0x34) << 5) + (9)),
 RCC_SPI1 = (((0x34) << 5) + (12)),
 RCC_USART1 = (((0x34) << 5) + (14)),
 RCC_DBG = (((0x34) << 5) + (22)),


 RCC_TIM2 = (((0x38) << 5) + (0)),
 RCC_TIM3 = (((0x38) << 5) + (1)),
 RCC_TIM6 = (((0x38) << 5) + (4)),
 RCC_TIM7 = (((0x38) << 5) + (5)),
 RCC_LCD = (((0x38) << 5) + (9)),
 RCC_WWDG = (((0x38) << 5) + (11)),
 RCC_SPI2 = (((0x38) << 5) + (14)),
 RCC_USART2 = (((0x38) << 5) + (17)),
 RCC_LPUART1 = (((0x38) << 5) + (18)),
 RCC_USART4 = (((0x38) << 5) + (19)),
 RCC_USART5 = (((0x38) << 5) + (20)),
 RCC_I2C1 = (((0x38) << 5) + (21)),
 RCC_I2C2 = (((0x38) << 5) + (22)),
 RCC_USB = (((0x38) << 5) + (23)),
 RCC_CRS = (((0x38) << 5) + (27)),
 RCC_PWR = (((0x38) << 5) + (28)),
 RCC_DAC = (((0x38) << 5) + (29)),
 RCC_I2C3 = (((0x38) << 5) + (30)),
 RCC_LPTIM1 = (((0x38) << 5) + (31)),


 SCC_GPIOA = (((0x3c) << 5) + (0)),
 SCC_GPIOB = (((0x3c) << 5) + (1)),
 SCC_GPIOC = (((0x3c) << 5) + (2)),
 SCC_GPIOD = (((0x3c) << 5) + (3)),
 SCC_GPIOE = (((0x3c) << 5) + (4)),
 SCC_GPIOH = (((0x3c) << 5) + (7)),


 SCC_DMA = (((0x40) << 5) + (0)),
 SCC_MIF = (((0x40) << 5) + (8)),
 SCC_SRAM = (((0x40) << 5) + (12)),
 SCC_CRC = (((0x40) << 5) + (12)),
 SCC_TSC = (((0x40) << 5) + (16)),
 SCC_RNG = (((0x40) << 5) + (20)),
 SCC_CRYPT = (((0x40) << 5) + (24)),


 SCC_SYSCFG = (((0x44) << 5) + (0)),
 SCC_TIM21 = (((0x44) << 5) + (2)),
 SCC_TIM22 = (((0x44) << 5) + (5)),
 SCC_ADC1 = (((0x44) << 5) + (9)),
 SCC_SPI1 = (((0x44) << 5) + (12)),
 SCC_USART1 = (((0x44) << 5) + (14)),
 SCC_DBG = (((0x44) << 5) + (22)),


 SCC_TIM2 = (((0x48) << 5) + (0)),
 SCC_TIM3 = (((0x48) << 5) + (1)),
 SCC_TIM6 = (((0x48) << 5) + (4)),
 SCC_TIM7 = (((0x48) << 5) + (5)),
 SCC_LCD = (((0x48) << 5) + (9)),
 SCC_WWDG = (((0x48) << 5) + (11)),
 SCC_SPI2 = (((0x48) << 5) + (14)),
 SCC_USART2 = (((0x48) << 5) + (17)),
 SCC_LPUART1 = (((0x48) << 5) + (18)),
 SCC_USART4 = (((0x48) << 5) + (19)),
 SCC_USART5 = (((0x48) << 5) + (20)),
 SCC_I2C1 = (((0x48) << 5) + (21)),
 SCC_I2C2 = (((0x48) << 5) + (22)),
 SCC_USB = (((0x48) << 5) + (23)),
 SCC_CRS = (((0x48) << 5) + (27)),
 SCC_PWR = (((0x48) << 5) + (28)),
 SCC_DAC = (((0x48) << 5) + (29)),
 SCC_I2C3 = (((0x48) << 5) + (30)),
 SCC_LPTIM1 = (((0x48) << 5) + (31)),
};

enum rcc_periph_rst {

 RST_GPIOA = (((0x1c) << 5) + (0)),
 RST_GPIOB = (((0x1c) << 5) + (1)),
 RST_GPIOC = (((0x1c) << 5) + (2)),
 RST_GPIOD = (((0x1c) << 5) + (3)),
 RST_GPIOE = (((0x1c) << 5) + (4)),
 RST_GPIOH = (((0x1c) << 5) + (7)),


 RST_DMA = (((0x20) << 5) + (0)),
 RST_MIF = (((0x20) << 5) + (8)),
 RST_CRC = (((0x20) << 5) + (12)),
 RST_TSC = (((0x20) << 5) + (16)),
 RST_RNG = (((0x20) << 5) + (20)),
 RST_CRYPT = (((0x20) << 5) + (24)),


 RST_SYSCFG = (((0x24) << 5) + (0)),
 RST_TIM21 = (((0x24) << 5) + (2)),
 RST_TIM22 = (((0x24) << 5) + (5)),
 RST_ADC1 = (((0x24) << 5) + (9)),
 RST_SPI1 = (((0x24) << 5) + (12)),
 RST_USART1 = (((0x24) << 5) + (14)),
 RST_DBG = (((0x24) << 5) + (22)),


 RST_TIM2 = (((0x28) << 5) + (0)),
 RST_TIM3 = (((0x28) << 5) + (1)),
 RST_TIM6 = (((0x28) << 5) + (4)),
 RST_TIM7 = (((0x28) << 5) + (5)),
 RST_LCD = (((0x28) << 5) + (9)),
 RST_WWDG = (((0x28) << 5) + (11)),
 RST_SPI2 = (((0x28) << 5) + (14)),
 RST_USART2 = (((0x28) << 5) + (17)),
 RST_LPUART1 = (((0x28) << 5) + (18)),
 RST_USART4 = (((0x28) << 5) + (19)),
 RST_USART5 = (((0x28) << 5) + (20)),
 RST_I2C1 = (((0x28) << 5) + (21)),
 RST_I2C2 = (((0x28) << 5) + (22)),
 RST_USB = (((0x28) << 5) + (23)),
 RST_CRS = (((0x28) << 5) + (27)),
 RST_PWR = (((0x28) << 5) + (28)),
 RST_DAC = (((0x28) << 5) + (29)),
 RST_I2C3 = (((0x28) << 5) + (30)),
 RST_LPTIM1 = (((0x28) << 5) + (31)),
};
# 1 "libopencm3/include/libopencm3/stm32/common/rcc_common_all.h" 1
# 39 "libopencm3/include/libopencm3/stm32/common/rcc_common_all.h"


void rcc_peripheral_enable_clock(volatile uint32_t *reg, uint32_t en);
void rcc_peripheral_disable_clock(volatile uint32_t *reg, uint32_t en);
void rcc_peripheral_reset(volatile uint32_t *reg, uint32_t reset);
void rcc_peripheral_clear_reset(volatile uint32_t *reg, uint32_t clear_reset);

void rcc_periph_clock_enable(enum rcc_periph_clken clken);
void rcc_periph_clock_disable(enum rcc_periph_clken clken);
void rcc_periph_reset_pulse(enum rcc_periph_rst rst);
void rcc_periph_reset_hold(enum rcc_periph_rst rst);
void rcc_periph_reset_release(enum rcc_periph_rst rst);

void rcc_set_mco(uint32_t mcosrc);
void rcc_osc_bypass_enable(enum rcc_osc osc);
void rcc_osc_bypass_disable(enum rcc_osc osc);







# 61 "libopencm3/include/libopencm3/stm32/common/rcc_common_all.h" 3 4
_Bool 
# 61 "libopencm3/include/libopencm3/stm32/common/rcc_common_all.h"
    rcc_is_osc_ready(enum rcc_osc osc);






void rcc_wait_for_osc_ready(enum rcc_osc osc);


# 680 "libopencm3/include/libopencm3/stm32/l0/rcc.h" 2



void rcc_osc_on(enum rcc_osc osc);
void rcc_osc_off(enum rcc_osc osc);
void rcc_osc_ready_int_clear(enum rcc_osc osc);
void rcc_osc_ready_int_enable(enum rcc_osc osc);
void rcc_osc_ready_int_disable(enum rcc_osc osc);
int rcc_osc_ready_int_flag(enum rcc_osc osc);
void rcc_set_hsi48_source_rc48(void);
void rcc_set_hsi48_source_pll(void);
void rcc_set_sysclk_source(enum rcc_osc osc);
void rcc_set_pll_multiplier(uint32_t factor);
void rcc_set_pll_divider(uint32_t factor);
void rcc_set_pll_source(uint32_t pllsrc);
void rcc_set_ppre2(uint32_t ppre2);
void rcc_set_ppre1(uint32_t ppre1);
void rcc_set_hpre(uint32_t hpre);
void rcc_clock_setup_pll(const struct rcc_clock_scale *clock);

void rcc_set_msi_range(uint32_t msi_range);

void rcc_set_peripheral_clk_sel(uint32_t periph, uint32_t sel);

void rcc_set_lptim1_sel(uint32_t lptim1_sel);
void rcc_set_lpuart1_sel(uint32_t lpupart1_sel);
void rcc_set_usart1_sel(uint32_t usart1_sel);
void rcc_set_usart2_sel(uint32_t usart2_sel);


# 37 "libopencm3/include/libopencm3/stm32/rcc.h" 2
# 4 "common/src/timers.c" 2
# 1 "libopencm3/include/libopencm3/stm32/rtc.h" 1
# 32 "libopencm3/include/libopencm3/stm32/rtc.h"
# 1 "libopencm3/include/libopencm3/stm32/l0/rtc.h" 1
# 32 "libopencm3/include/libopencm3/stm32/l0/rtc.h"
# 1 "libopencm3/include/libopencm3/stm32/common/rtc_common_l1f024.h" 1
# 430 "libopencm3/include/libopencm3/stm32/common/rtc_common_l1f024.h"


void rtc_set_prescaler(uint32_t sync, uint32_t async);
void rtc_wait_for_synchro(void);
void rtc_lock(void);
void rtc_unlock(void);
void rtc_set_wakeup_time(uint16_t wkup_time, uint8_t rtc_cr_wucksel);
void rtc_clear_wakeup_flag(void);


# 33 "libopencm3/include/libopencm3/stm32/l0/rtc.h" 2
# 33 "libopencm3/include/libopencm3/stm32/rtc.h" 2
# 5 "common/src/timers.c" 2
# 1 "libopencm3/include/libopencm3/stm32/iwdg.h" 1
# 36 "libopencm3/include/libopencm3/stm32/iwdg.h"
# 1 "libopencm3/include/libopencm3/stm32/l0/iwdg.h" 1
# 34 "libopencm3/include/libopencm3/stm32/l0/iwdg.h"
# 1 "libopencm3/include/libopencm3/stm32/common/iwdg_common_v2.h" 1
# 33 "libopencm3/include/libopencm3/stm32/common/iwdg_common_v2.h"
       



# 1 "libopencm3/include/libopencm3/stm32/common/iwdg_common_all.h" 1
# 104 "libopencm3/include/libopencm3/stm32/common/iwdg_common_all.h"


void iwdg_start(void);
void iwdg_set_period_ms(uint32_t period);

# 108 "libopencm3/include/libopencm3/stm32/common/iwdg_common_all.h" 3 4
_Bool 
# 108 "libopencm3/include/libopencm3/stm32/common/iwdg_common_all.h"
    iwdg_reload_busy(void);

# 109 "libopencm3/include/libopencm3/stm32/common/iwdg_common_all.h" 3 4
_Bool 
# 109 "libopencm3/include/libopencm3/stm32/common/iwdg_common_all.h"
    iwdg_prescaler_busy(void);
void iwdg_reset(void);


# 38 "libopencm3/include/libopencm3/stm32/common/iwdg_common_v2.h" 2
# 69 "libopencm3/include/libopencm3/stm32/common/iwdg_common_v2.h"



# 35 "libopencm3/include/libopencm3/stm32/l0/iwdg.h" 2
# 37 "libopencm3/include/libopencm3/stm32/iwdg.h" 2
# 6 "common/src/timers.c" 2
# 1 "libopencm3/include/libopencm3/stm32/pwr.h" 1
# 7 "common/src/timers.c" 2
# 1 "libopencm3/include/libopencm3/stm32/timer.h" 1
# 38 "libopencm3/include/libopencm3/stm32/timer.h"
# 1 "libopencm3/include/libopencm3/stm32/l0/timer.h" 1
# 38 "libopencm3/include/libopencm3/stm32/l0/timer.h"
# 1 "libopencm3/include/libopencm3/stm32/common/timer_common_all.h" 1
# 1066 "libopencm3/include/libopencm3/stm32/common/timer_common_all.h"
enum tim_oc_id {
 TIM_OC1 = 0,
 TIM_OC1N,
 TIM_OC2,
 TIM_OC2N,
 TIM_OC3,
 TIM_OC3N,
 TIM_OC4,
};


enum tim_oc_mode {
 TIM_OCM_FROZEN,
 TIM_OCM_ACTIVE,
 TIM_OCM_INACTIVE,
 TIM_OCM_TOGGLE,
 TIM_OCM_FORCE_LOW,
 TIM_OCM_FORCE_HIGH,
 TIM_OCM_PWM1,
 TIM_OCM_PWM2,
};


enum tim_ic_id {
 TIM_IC1,
 TIM_IC2,
 TIM_IC3,
 TIM_IC4,
};
# 1103 "libopencm3/include/libopencm3/stm32/common/timer_common_all.h"
enum tim_ic_filter {
 TIM_IC_OFF,
 TIM_IC_CK_INT_N_2,
 TIM_IC_CK_INT_N_4,
 TIM_IC_CK_INT_N_8,
 TIM_IC_DTF_DIV_2_N_6,
 TIM_IC_DTF_DIV_2_N_8,
 TIM_IC_DTF_DIV_4_N_6,
 TIM_IC_DTF_DIV_4_N_8,
 TIM_IC_DTF_DIV_8_N_6,
 TIM_IC_DTF_DIV_8_N_8,
 TIM_IC_DTF_DIV_16_N_5,
 TIM_IC_DTF_DIV_16_N_6,
 TIM_IC_DTF_DIV_16_N_8,
 TIM_IC_DTF_DIV_32_N_5,
 TIM_IC_DTF_DIV_32_N_6,
 TIM_IC_DTF_DIV_32_N_8,
};




enum tim_ic_psc {
 TIM_IC_PSC_OFF,
 TIM_IC_PSC_2,
 TIM_IC_PSC_4,
 TIM_IC_PSC_8,
};





enum tim_ic_input {
 TIM_IC_OUT = 0,
 TIM_IC_IN_TI1 = 1,
 TIM_IC_IN_TI2 = 2,
 TIM_IC_IN_TRC = 3,
 TIM_IC_IN_TI3 = 5,
 TIM_IC_IN_TI4 = 6,
};


enum tim_et_pol {
 TIM_ET_RISING,
 TIM_ET_FALLING,
};





void timer_enable_irq(uint32_t timer_peripheral, uint32_t irq);
void timer_disable_irq(uint32_t timer_peripheral, uint32_t irq);

# 1157 "libopencm3/include/libopencm3/stm32/common/timer_common_all.h" 3 4
_Bool 
# 1157 "libopencm3/include/libopencm3/stm32/common/timer_common_all.h"
    timer_interrupt_source(uint32_t timer_peripheral, uint32_t flag);

# 1158 "libopencm3/include/libopencm3/stm32/common/timer_common_all.h" 3 4
_Bool 
# 1158 "libopencm3/include/libopencm3/stm32/common/timer_common_all.h"
    timer_get_flag(uint32_t timer_peripheral, uint32_t flag);
void timer_clear_flag(uint32_t timer_peripheral, uint32_t flag);
void timer_set_mode(uint32_t timer_peripheral, uint32_t clock_div,
      uint32_t alignment, uint32_t direction);
void timer_set_clock_division(uint32_t timer_peripheral, uint32_t clock_div);
void timer_enable_preload(uint32_t timer_peripheral);
void timer_disable_preload(uint32_t timer_peripheral);
void timer_set_alignment(uint32_t timer_peripheral, uint32_t alignment);
void timer_direction_up(uint32_t timer_peripheral);
void timer_direction_down(uint32_t timer_peripheral);
void timer_one_shot_mode(uint32_t timer_peripheral);
void timer_continuous_mode(uint32_t timer_peripheral);
void timer_update_on_any(uint32_t timer_peripheral);
void timer_update_on_overflow(uint32_t timer_peripheral);
void timer_enable_update_event(uint32_t timer_peripheral);
void timer_disable_update_event(uint32_t timer_peripheral);
void timer_enable_counter(uint32_t timer_peripheral);
void timer_disable_counter(uint32_t timer_peripheral);
void timer_set_output_idle_state(uint32_t timer_peripheral, uint32_t outputs);
void timer_reset_output_idle_state(uint32_t timer_peripheral, uint32_t outputs);
void timer_set_ti1_ch123_xor(uint32_t timer_peripheral);
void timer_set_ti1_ch1(uint32_t timer_peripheral);
void timer_set_master_mode(uint32_t timer_peripheral, uint32_t mode);
void timer_set_dma_on_compare_event(uint32_t timer_peripheral);
void timer_set_dma_on_update_event(uint32_t timer_peripheral);
void timer_enable_compare_control_update_on_trigger(uint32_t timer_peripheral);
void timer_disable_compare_control_update_on_trigger(uint32_t timer_peripheral);
void timer_enable_preload_complementry_enable_bits(uint32_t timer_peripheral);
void timer_disable_preload_complementry_enable_bits(uint32_t timer_peripheral);
void timer_set_prescaler(uint32_t timer_peripheral, uint32_t value);
void timer_set_repetition_counter(uint32_t timer_peripheral, uint32_t value);
void timer_set_period(uint32_t timer_peripheral, uint32_t period);
void timer_enable_oc_clear(uint32_t timer_peripheral, enum tim_oc_id oc_id);
void timer_disable_oc_clear(uint32_t timer_peripheral, enum tim_oc_id oc_id);
void timer_set_oc_fast_mode(uint32_t timer_peripheral, enum tim_oc_id oc_id);
void timer_set_oc_slow_mode(uint32_t timer_peripheral, enum tim_oc_id oc_id);
void timer_set_oc_mode(uint32_t timer_peripheral, enum tim_oc_id oc_id,
         enum tim_oc_mode oc_mode);
void timer_enable_oc_preload(uint32_t timer_peripheral, enum tim_oc_id oc_id);
void timer_disable_oc_preload(uint32_t timer_peripheral, enum tim_oc_id oc_id);
void timer_set_oc_polarity_high(uint32_t timer_peripheral,
    enum tim_oc_id oc_id);
void timer_set_oc_polarity_low(uint32_t timer_peripheral, enum tim_oc_id oc_id);
void timer_enable_oc_output(uint32_t timer_peripheral, enum tim_oc_id oc_id);
void timer_disable_oc_output(uint32_t timer_peripheral, enum tim_oc_id oc_id);
void timer_set_oc_idle_state_set(uint32_t timer_peripheral,
     enum tim_oc_id oc_id);
void timer_set_oc_idle_state_unset(uint32_t timer_peripheral,
       enum tim_oc_id oc_id);
void timer_set_oc_value(uint32_t timer_peripheral, enum tim_oc_id oc_id,
   uint32_t value);
void timer_enable_break_main_output(uint32_t timer_peripheral);
void timer_disable_break_main_output(uint32_t timer_peripheral);
void timer_enable_break_automatic_output(uint32_t timer_peripheral);
void timer_disable_break_automatic_output(uint32_t timer_peripheral);
void timer_set_break_polarity_high(uint32_t timer_peripheral);
void timer_set_break_polarity_low(uint32_t timer_peripheral);
void timer_enable_break(uint32_t timer_peripheral);
void timer_disable_break(uint32_t timer_peripheral);
void timer_set_enabled_off_state_in_run_mode(uint32_t timer_peripheral);
void timer_set_disabled_off_state_in_run_mode(uint32_t timer_peripheral);
void timer_set_enabled_off_state_in_idle_mode(uint32_t timer_peripheral);
void timer_set_disabled_off_state_in_idle_mode(uint32_t timer_peripheral);
void timer_set_break_lock(uint32_t timer_peripheral, uint32_t lock);
void timer_set_deadtime(uint32_t timer_peripheral, uint32_t deadtime);
void timer_generate_event(uint32_t timer_peripheral, uint32_t event);
uint32_t timer_get_counter(uint32_t timer_peripheral);
void timer_set_counter(uint32_t timer_peripheral, uint32_t count);

void timer_ic_set_filter(uint32_t timer, enum tim_ic_id ic,
    enum tim_ic_filter flt);
void timer_ic_set_prescaler(uint32_t timer, enum tim_ic_id ic,
       enum tim_ic_psc psc);
void timer_ic_set_input(uint32_t timer, enum tim_ic_id ic,
   enum tim_ic_input in);
void timer_ic_enable(uint32_t timer, enum tim_ic_id ic);
void timer_ic_disable(uint32_t timer, enum tim_ic_id ic);

void timer_slave_set_filter(uint32_t timer, enum tim_ic_filter flt);
void timer_slave_set_prescaler(uint32_t timer, enum tim_ic_psc psc);
void timer_slave_set_polarity(uint32_t timer, enum tim_et_pol pol);
void timer_slave_set_mode(uint32_t timer, uint8_t mode);
void timer_slave_set_trigger(uint32_t timer, uint8_t trigger);


# 39 "libopencm3/include/libopencm3/stm32/l0/timer.h" 2
# 39 "libopencm3/include/libopencm3/stm32/timer.h" 2
# 8 "common/src/timers.c" 2
# 1 "libopencm3/include/libopencm3/stm32/lptimer.h" 1
# 30 "libopencm3/include/libopencm3/stm32/lptimer.h"
# 1 "libopencm3/include/libopencm3/stm32/l0/lptimer.h" 1
# 34 "libopencm3/include/libopencm3/stm32/l0/lptimer.h"
# 1 "libopencm3/include/libopencm3/stm32/common/lptimer_common_all.h" 1
# 260 "libopencm3/include/libopencm3/stm32/common/lptimer_common_all.h"


void lptimer_enable(uint32_t timer_peripheral);
void lptimer_disable(uint32_t timer_peripheral);

void lptimer_start_counter(uint32_t timer_peripheral, uint32_t mode);
void lptimer_set_counter(uint32_t timer_peripheral, uint16_t count);
uint16_t lptimer_get_counter(uint32_t timer_peripheral);
void lptimer_set_compare(uint32_t timer_peripheral, uint16_t compare_value);
void lptimer_set_period(uint32_t lptimer_peripheral, uint16_t period_value);
void lptimer_enable_preload(uint32_t lptimer_peripheral);
void lptimer_disable_preload(uint32_t lptimer_peripheral);
void lptimer_set_waveform_polarity_high(uint32_t lptimer_peripheral);
void lptimer_set_waveform_polarity_low(uint32_t lptimer_peripheral);

void lptimer_set_prescaler(uint32_t timer_peripheral, uint32_t prescaler);
void lptimer_enable_trigger(uint32_t lptimer_peripheral, uint32_t trigen);
void lptimer_select_trigger_source(uint32_t lptimer_peripheral, uint32_t trigger_source);
void lptimer_set_internal_clock_source(uint32_t timer_peripheral);
void lptimer_set_external_clock_source(uint32_t timer_peripheral);

void lptimer_clear_flag(uint32_t timer_peripheral, uint32_t flag);

# 282 "libopencm3/include/libopencm3/stm32/common/lptimer_common_all.h" 3 4
_Bool 
# 282 "libopencm3/include/libopencm3/stm32/common/lptimer_common_all.h"
    lptimer_get_flag(uint32_t timer_peripheral, uint32_t flag);
void lptimer_enable_irq(uint32_t timer_peripheral, uint32_t irq);
void lptimer_disable_irq(uint32_t timer_peripheral, uint32_t irq);



# 35 "libopencm3/include/libopencm3/stm32/l0/lptimer.h" 2









# 31 "libopencm3/include/libopencm3/stm32/lptimer.h" 2
# 9 "common/src/timers.c" 2
# 1 "libopencm3/include/libopencm3/stm32/gpio.h" 1
# 36 "libopencm3/include/libopencm3/stm32/gpio.h"
# 1 "libopencm3/include/libopencm3/stm32/l0/gpio.h" 1
# 34 "libopencm3/include/libopencm3/stm32/l0/gpio.h"
# 1 "libopencm3/include/libopencm3/stm32/common/gpio_common_f24.h" 1
# 41 "libopencm3/include/libopencm3/stm32/common/gpio_common_f24.h"
# 1 "libopencm3/include/libopencm3/stm32/common/gpio_common_f234.h" 1
# 41 "libopencm3/include/libopencm3/stm32/common/gpio_common_f234.h"
# 1 "libopencm3/include/libopencm3/stm32/common/gpio_common_all.h" 1
# 72 "libopencm3/include/libopencm3/stm32/common/gpio_common_all.h"


void gpio_set(uint32_t gpioport, uint16_t gpios);
void gpio_clear(uint32_t gpioport, uint16_t gpios);
uint16_t gpio_get(uint32_t gpioport, uint16_t gpios);
void gpio_toggle(uint32_t gpioport, uint16_t gpios);
uint16_t gpio_port_read(uint32_t gpioport);
void gpio_port_write(uint32_t gpioport, uint16_t data);
void gpio_port_config_lock(uint32_t gpioport, uint16_t gpios);


# 42 "libopencm3/include/libopencm3/stm32/common/gpio_common_f234.h" 2
# 248 "libopencm3/include/libopencm3/stm32/common/gpio_common_f234.h"

# 258 "libopencm3/include/libopencm3/stm32/common/gpio_common_f234.h"
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
       uint16_t gpios);
void gpio_set_output_options(uint32_t gpioport, uint8_t otype, uint8_t speed,
        uint16_t gpios);
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios);


# 42 "libopencm3/include/libopencm3/stm32/common/gpio_common_f24.h" 2
# 35 "libopencm3/include/libopencm3/stm32/l0/gpio.h" 2
# 72 "libopencm3/include/libopencm3/stm32/l0/gpio.h"



# 37 "libopencm3/include/libopencm3/stm32/gpio.h" 2
# 10 "common/src/timers.c" 2
# 1 "libopencm3/include/libopencm3/stm32/exti.h" 1
# 38 "libopencm3/include/libopencm3/stm32/exti.h"
# 1 "libopencm3/include/libopencm3/stm32/l0/exti.h" 1
# 39 "libopencm3/include/libopencm3/stm32/l0/exti.h"
# 1 "libopencm3/include/libopencm3/stm32/common/exti_common_all.h" 1
# 74 "libopencm3/include/libopencm3/stm32/common/exti_common_all.h"
enum exti_trigger_type {
 EXTI_TRIGGER_RISING,
 EXTI_TRIGGER_FALLING,
 EXTI_TRIGGER_BOTH,
};



void exti_set_trigger(uint32_t extis, enum exti_trigger_type trig);
void exti_enable_request(uint32_t extis);
void exti_disable_request(uint32_t extis);
void exti_reset_request(uint32_t extis);
void exti_select_source(uint32_t exti, uint32_t gpioport);
uint32_t exti_get_flag_status(uint32_t exti);


# 40 "libopencm3/include/libopencm3/stm32/l0/exti.h" 2
# 1 "libopencm3/include/libopencm3/stm32/common/exti_common_v1.h" 1

       
# 45 "libopencm3/include/libopencm3/stm32/common/exti_common_v1.h"



# 41 "libopencm3/include/libopencm3/stm32/l0/exti.h" 2
# 39 "libopencm3/include/libopencm3/stm32/exti.h" 2
# 11 "common/src/timers.c" 2

# 1 "libopencm3/include/libopencm3/cm3/nvic.h" 1
# 147 "libopencm3/include/libopencm3/cm3/nvic.h"
# 1 "libopencm3/include/libopencm3/dispatch/nvic.h" 1
# 18 "libopencm3/include/libopencm3/dispatch/nvic.h"
# 1 "libopencm3/include/libopencm3/stm32/l0/nvic.h" 1
# 9 "libopencm3/include/libopencm3/stm32/l0/nvic.h"
# 1 "libopencm3/include/libopencm3/cm3/nvic.h" 1
# 10 "libopencm3/include/libopencm3/stm32/l0/nvic.h" 2
# 58 "libopencm3/include/libopencm3/stm32/l0/nvic.h"


void wwdg_isr(void);
void pvd_isr(void);
void rtc_isr(void);
void flash_isr(void);
void rcc_isr(void);
void exti0_1_isr(void);
void exti2_3_isr(void);
void exti4_15_isr(void);
void tsc_isr(void);
void dma1_channel1_isr(void);
void dma1_channel2_3_isr(void);
void dma1_channel4_5_isr(void);
void adc_comp_isr(void);
void lptim1_isr(void);
void usart4_5_isr(void);
void tim2_isr(void);
void tim3_isr(void);
void tim6_dac_isr(void);
void tim7_isr(void);
void reserved4_isr(void);
void tim21_isr(void);
void i2c3_isr(void);
void tim22_isr(void);
void i2c1_isr(void);
void i2c2_isr(void);
void spi1_isr(void);
void spi2_isr(void);
void usart1_isr(void);
void usart2_isr(void);
void lpuart1_aes_rng_isr(void);
void lcd_isr(void);
void usb_isr(void);


# 19 "libopencm3/include/libopencm3/dispatch/nvic.h" 2
# 148 "libopencm3/include/libopencm3/cm3/nvic.h" 2





void nvic_enable_irq(uint8_t irqn);
void nvic_disable_irq(uint8_t irqn);
uint8_t nvic_get_pending_irq(uint8_t irqn);
void nvic_set_pending_irq(uint8_t irqn);
void nvic_clear_pending_irq(uint8_t irqn);
uint8_t nvic_get_irq_enabled(uint8_t irqn);
void nvic_set_priority(uint8_t irqn, uint8_t priority);







void reset_handler(void);
void nmi_handler(void);
void hard_fault_handler(void);
void sv_call_handler(void);
void pend_sv_handler(void);
void sys_tick_handler(void);
# 182 "libopencm3/include/libopencm3/cm3/nvic.h"

# 13 "common/src/timers.c" 2
# 1 "libopencm3/include/libopencm3/cm3/scb.h" 1
# 461 "libopencm3/include/libopencm3/cm3/scb.h"


struct scb_exception_stack_frame {
 uint32_t r0;
 uint32_t r1;
 uint32_t r2;
 uint32_t r3;
 uint32_t r12;
 uint32_t lr;
 uint32_t pc;
 uint32_t xpsr;
} __attribute__((packed));







void scb_reset_system(void) __attribute__((noreturn));








# 14 "common/src/timers.c" 2

# 1 "libopencm3/include/libopencmsis/core_cm3.h" 1
# 14 "libopencm3/include/libopencmsis/core_cm3.h"
# 1 "libopencm3/include/libopencm3/cm3/cortex.h" 1
# 44 "libopencm3/include/libopencm3/cm3/cortex.h"
static inline void cm_enable_interrupts(void)
{
 __asm__ volatile ("CPSIE I\n");
}






static inline void cm_disable_interrupts(void)
{
 __asm__ volatile ("CPSID I\n");
}






static inline void cm_enable_faults(void)
{
 __asm__ volatile ("CPSIE F\n");
}






static inline void cm_disable_faults(void)
{
 __asm__ volatile ("CPSID F\n");
}
# 86 "libopencm3/include/libopencm3/cm3/cortex.h"
__attribute__((always_inline))
static inline 
# 87 "libopencm3/include/libopencm3/cm3/cortex.h" 3 4
             _Bool 
# 87 "libopencm3/include/libopencm3/cm3/cortex.h"
                  cm_is_masked_interrupts(void)
{
 register uint32_t result;
 __asm__ volatile ("MRS %0, PRIMASK" : "=r" (result));
 return result;
}
# 121 "libopencm3/include/libopencm3/cm3/cortex.h"
__attribute__((always_inline))
static inline uint32_t cm_mask_interrupts(uint32_t mask)
{
 register uint32_t old;
 __asm__ __volatile__("MRS %0, PRIMASK" : "=r" (old));
 __asm__ __volatile__("" : : : "memory");
 __asm__ __volatile__("MSR PRIMASK, %0" : : "r" (mask));
 return old;
}
# 166 "libopencm3/include/libopencm3/cm3/cortex.h"
static inline uint32_t __cm_atomic_set(uint32_t *val)
{
 return cm_mask_interrupts(*val);
}
# 15 "libopencm3/include/libopencmsis/core_cm3.h" 2

# 1 "libopencm3/include/libopencm3/cm3/systick.h" 1
# 178 "libopencm3/include/libopencm3/cm3/systick.h"


void systick_set_reload(uint32_t value);

# 181 "libopencm3/include/libopencm3/cm3/systick.h" 3 4
_Bool 
# 181 "libopencm3/include/libopencm3/cm3/systick.h"
    systick_set_frequency(uint32_t freq, uint32_t ahb);
uint32_t systick_get_reload(void);
uint32_t systick_get_value(void);
void systick_set_clocksource(uint8_t clocksource);
void systick_interrupt_enable(void);
void systick_interrupt_disable(void);
void systick_counter_enable(void);
void systick_counter_disable(void);
uint8_t systick_get_countflag(void);
void systick_clear(void);

uint32_t systick_get_calib(void);


# 17 "libopencm3/include/libopencmsis/core_cm3.h" 2
# 40 "libopencm3/include/libopencmsis/core_cm3.h"
typedef struct {
 volatile uint32_t CPUID;
 volatile uint32_t ICSR;
 volatile uint32_t VTOR;
 volatile uint32_t AIRCR;
 volatile uint32_t SCR;
 volatile uint32_t CCR;
 volatile uint8_t SHPR[12];
 volatile uint32_t SHCSR;
} SCB_TypeDef;
# 65 "libopencm3/include/libopencmsis/core_cm3.h"
typedef struct {
 uint32_t DHCSR;
 uint32_t DEMCR;
} CoreDebug_TypeDef;







static inline void NVIC_ClearPendingIRQ(uint8_t irqn)
{
 nvic_clear_pending_irq(irqn);
}
static inline void NVIC_EnableIRQ(uint8_t irqn)
{
 nvic_enable_irq(irqn);
}
static inline void NVIC_DisableIRQ(uint8_t irqn)
{
 nvic_disable_irq(irqn);
}



static inline void __enable_irq(void)
{
 cm_enable_interrupts();
}
static inline void __disable_irq(void)
{
 cm_disable_interrupts();
}





typedef struct {
 uint32_t CTRL;
 uint32_t RNR;
 uint32_t RBAR;
 uint32_t RASR;
} MPU_TypeDef;
# 142 "libopencm3/include/libopencmsis/core_cm3.h"
typedef struct {
 uint32_t CTRL;
 uint32_t LOAD;
 uint32_t VAL;
 uint32_t CALIB;
} SysTick_TypeDef;


static inline uint32_t SysTick_Config(uint32_t n_ticks)
{


 if (n_ticks & ~0x00FFFFFF) {
  return 1;
 }

 systick_set_reload(n_ticks);
 systick_set_clocksource(
# 159 "libopencm3/include/libopencmsis/core_cm3.h" 3 4
                        1
# 159 "libopencm3/include/libopencmsis/core_cm3.h"
                            );
 systick_interrupt_enable();
 systick_counter_enable();

 return 0;
}


typedef struct {
 uint32_t LAR;
 uint32_t TCR;
} ITM_TypeDef;
# 181 "libopencm3/include/libopencmsis/core_cm3.h"
# 1 "libopencm3/include/libopencmsis/dispatch/irqhandlers.h" 1
# 14 "libopencm3/include/libopencmsis/dispatch/irqhandlers.h"
# 1 "libopencm3/include/libopencmsis/stm32/l0/irqhandlers.h" 1
# 15 "libopencm3/include/libopencmsis/dispatch/irqhandlers.h" 2
# 182 "libopencm3/include/libopencmsis/core_cm3.h" 2
# 16 "common/src/timers.c" 2

# 1 "common/include/common/aes.h" 1
# 11 "common/include/common/aes.h"
void aes_init(void);
void aes_expand_key(void);
void aes_ecb_encrypt(uint8_t* buf);
void aes_ecb_decrypt(uint8_t* buf);
void aes_generate_random(uint8_t *buf, uint8_t len);
# 18 "common/src/timers.c" 2
# 1 "common/include/common/battery.h" 1
# 16 "common/include/common/battery.h"
extern uint16_t batt_voltages[1];

extern 
# 18 "common/include/common/battery.h" 3 4
      _Bool 
# 18 "common/include/common/battery.h"
           batt_rst_seq;

void batt_init(void);
void batt_set_voltage_scale(uint8_t scale);
void batt_set_low_power_run(void);
void batt_update_voltages(void);
void batt_enable_interrupt(void);
void batt_enable_comp(void);
# 19 "common/src/timers.c" 2
# 1 "common/include/common/board_defs.h" 1



# 1 "libopencm3/include/libopencm3/stm32/gpio.h" 1
# 5 "common/include/common/board_defs.h" 2
# 1 "libopencm3/include/libopencm3/stm32/rcc.h" 1
# 6 "common/include/common/board_defs.h" 2
# 1 "libopencm3/include/libopencm3/stm32/spi.h" 1
# 36 "libopencm3/include/libopencm3/stm32/spi.h"
# 1 "libopencm3/include/libopencm3/stm32/l0/spi.h" 1
# 34 "libopencm3/include/libopencm3/stm32/l0/spi.h"
# 1 "libopencm3/include/libopencm3/stm32/common/spi_common_v1_frf.h" 1
# 32 "libopencm3/include/libopencm3/stm32/common/spi_common_v1_frf.h"
       



# 1 "libopencm3/include/libopencm3/stm32/common/spi_common_v1.h" 1
# 32 "libopencm3/include/libopencm3/stm32/common/spi_common_v1.h"
       



# 1 "libopencm3/include/libopencm3/stm32/common/spi_common_all.h" 1
# 345 "libopencm3/include/libopencm3/stm32/common/spi_common_all.h"


void spi_reset(uint32_t spi_peripheral);
void spi_enable(uint32_t spi);
void spi_disable(uint32_t spi);
uint16_t spi_clean_disable(uint32_t spi);
void spi_write(uint32_t spi, uint16_t data);
void spi_send(uint32_t spi, uint16_t data);
uint16_t spi_read(uint32_t spi);
uint16_t spi_xfer(uint32_t spi, uint16_t data);
void spi_set_bidirectional_mode(uint32_t spi);
void spi_set_unidirectional_mode(uint32_t spi);
void spi_set_bidirectional_receive_only_mode(uint32_t spi);
void spi_set_bidirectional_transmit_only_mode(uint32_t spi);
void spi_enable_crc(uint32_t spi);
void spi_disable_crc(uint32_t spi);
void spi_set_next_tx_from_buffer(uint32_t spi);
void spi_set_next_tx_from_crc(uint32_t spi);
void spi_set_full_duplex_mode(uint32_t spi);
void spi_set_receive_only_mode(uint32_t spi);
void spi_disable_software_slave_management(uint32_t spi);
void spi_enable_software_slave_management(uint32_t spi);
void spi_set_nss_high(uint32_t spi);
void spi_set_nss_low(uint32_t spi);
void spi_send_lsb_first(uint32_t spi);
void spi_send_msb_first(uint32_t spi);
void spi_set_baudrate_prescaler(uint32_t spi, uint8_t baudrate);
void spi_set_master_mode(uint32_t spi);
void spi_set_slave_mode(uint32_t spi);
void spi_set_clock_polarity_1(uint32_t spi);
void spi_set_clock_polarity_0(uint32_t spi);
void spi_set_clock_phase_1(uint32_t spi);
void spi_set_clock_phase_0(uint32_t spi);
void spi_enable_tx_buffer_empty_interrupt(uint32_t spi);
void spi_disable_tx_buffer_empty_interrupt(uint32_t spi);
void spi_enable_rx_buffer_not_empty_interrupt(uint32_t spi);
void spi_disable_rx_buffer_not_empty_interrupt(uint32_t spi);
void spi_enable_error_interrupt(uint32_t spi);
void spi_disable_error_interrupt(uint32_t spi);
void spi_enable_ss_output(uint32_t spi);
void spi_disable_ss_output(uint32_t spi);
void spi_enable_tx_dma(uint32_t spi);
void spi_disable_tx_dma(uint32_t spi);
void spi_enable_rx_dma(uint32_t spi);
void spi_disable_rx_dma(uint32_t spi);
void spi_set_standard_mode(uint32_t spi, uint8_t mode);


# 37 "libopencm3/include/libopencm3/stm32/common/spi_common_v1.h" 2
# 54 "libopencm3/include/libopencm3/stm32/common/spi_common_v1.h"


int spi_init_master(uint32_t spi, uint32_t br, uint32_t cpol, uint32_t cpha,
  uint32_t dff, uint32_t lsbfirst);
void spi_set_dff_8bit(uint32_t spi);
void spi_set_dff_16bit(uint32_t spi);


# 37 "libopencm3/include/libopencm3/stm32/common/spi_common_v1_frf.h" 2
# 54 "libopencm3/include/libopencm3/stm32/common/spi_common_v1_frf.h"


void spi_set_frf_ti(uint32_t spi);
void spi_set_frf_motorola(uint32_t spi);


# 35 "libopencm3/include/libopencm3/stm32/l0/spi.h" 2
# 37 "libopencm3/include/libopencm3/stm32/spi.h" 2
# 7 "common/include/common/board_defs.h" 2
# 1 "libopencm3/include/libopencm3/stm32/usart.h" 1
# 36 "libopencm3/include/libopencm3/stm32/usart.h"
# 1 "libopencm3/include/libopencm3/stm32/l0/usart.h" 1
# 30 "libopencm3/include/libopencm3/stm32/l0/usart.h"
# 1 "libopencm3/include/libopencm3/stm32/common/usart_common_all.h" 1
# 99 "libopencm3/include/libopencm3/stm32/common/usart_common_all.h"


void usart_set_baudrate(uint32_t usart, uint32_t baud);
void usart_set_databits(uint32_t usart, uint32_t bits);
void usart_set_stopbits(uint32_t usart, uint32_t stopbits);
void usart_set_parity(uint32_t usart, uint32_t parity);
void usart_set_mode(uint32_t usart, uint32_t mode);
void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol);
void usart_enable(uint32_t usart);
void usart_disable(uint32_t usart);
void usart_send(uint32_t usart, uint16_t data);
uint16_t usart_recv(uint32_t usart);
void usart_wait_send_ready(uint32_t usart);
void usart_wait_recv_ready(uint32_t usart);
void usart_send_blocking(uint32_t usart, uint16_t data);
uint16_t usart_recv_blocking(uint32_t usart);
void usart_enable_rx_dma(uint32_t usart);
void usart_disable_rx_dma(uint32_t usart);
void usart_enable_tx_dma(uint32_t usart);
void usart_disable_tx_dma(uint32_t usart);
void usart_enable_rx_interrupt(uint32_t usart);
void usart_disable_rx_interrupt(uint32_t usart);
void usart_enable_tx_interrupt(uint32_t usart);
void usart_disable_tx_interrupt(uint32_t usart);
void usart_enable_error_interrupt(uint32_t usart);
void usart_disable_error_interrupt(uint32_t usart);

# 125 "libopencm3/include/libopencm3/stm32/common/usart_common_all.h" 3 4
_Bool 
# 125 "libopencm3/include/libopencm3/stm32/common/usart_common_all.h"
    usart_get_flag(uint32_t usart, uint32_t flag);


# 31 "libopencm3/include/libopencm3/stm32/l0/usart.h" 2
# 1 "libopencm3/include/libopencm3/stm32/common/usart_common_v2.h" 1
# 26 "libopencm3/include/libopencm3/stm32/common/usart_common_v2.h"
       
# 616 "libopencm3/include/libopencm3/stm32/common/usart_common_v2.h"


void usart_enable_data_inversion(uint32_t usart);
void usart_disable_data_inversion(uint32_t usart);
void usart_enable_tx_inversion(uint32_t usart);
void usart_disable_tx_inversion(uint32_t usart);
void usart_enable_rx_inversion(uint32_t usart);
void usart_disable_rx_inversion(uint32_t usart);
void usart_enable_halfduplex(uint32_t usart);
void usart_disable_halfduplex(uint32_t usart);

void usart_set_rx_timeout_value(uint32_t usart, uint32_t value);
void usart_enable_rx_timeout(uint32_t usart);
void usart_disable_rx_timeout(uint32_t usart);
void usart_enable_rx_timeout_interrupt(uint32_t usart);
void usart_disable_rx_timeout_interrupt(uint32_t usart);


# 32 "libopencm3/include/libopencm3/stm32/l0/usart.h" 2
# 46 "libopencm3/include/libopencm3/stm32/l0/usart.h"



# 37 "libopencm3/include/libopencm3/stm32/usart.h" 2
# 8 "common/include/common/board_defs.h" 2
# 148 "common/include/common/board_defs.h"
typedef struct
{
 
# 150 "common/include/common/board_defs.h" 3 4
_Bool 
# 150 "common/include/common/board_defs.h"
       msg_pend;
 
# 151 "common/include/common/board_defs.h" 3 4
_Bool 
# 151 "common/include/common/board_defs.h"
       active;
 uint32_t dev_num;
 uint32_t msg_num;
 uint32_t msg_num_start;
 uint32_t ok_packets;
 uint32_t total_packets;
}sensor_t;

extern sensor_t sensors[50];
extern uint8_t num_sensors;
sensor_t *get_sensor(uint32_t dev_num);
# 252 "common/include/common/board_defs.h"
void gpio_init(void);
# 20 "common/src/timers.c" 2

# 1 "common/include/common/reset.h" 1



void reset_print_cause(void);
# 22 "common/src/timers.c" 2
# 1 "common/include/common/rf_scan.h" 1
# 23 "common/src/timers.c" 2
# 1 "common/include/common/rfm.h" 1
# 303 "common/include/common/rfm.h"
typedef struct rfm_packet_s
{



    union {
        uint8_t buffer[16];

        struct{
                uint32_t device_number;
                uint32_t msg_number;
                int8_t power;
                uint16_t battery;
                int16_t temperature;
        };
    }data;


    uint8_t flags;
    
# 322 "common/include/common/rfm.h" 3 4
   _Bool 
# 322 "common/include/common/rfm.h"
               crc_ok;
    int8_t snr;
    int16_t rssi;


    enum
    {
        RFM_PACKET_DEV_NUM_0 = 0, RFM_PACKET_DEV_NUM_1, RFM_PACKET_DEV_NUM_2, RFM_PACKET_DEV_NUM_3,
        RFM_PACKET_MSG_NUM_0, RFM_PACKET_MSG_NUM_1, RFM_PACKET_MSG_NUM_2, RFM_PACKET_MSG_NUM_3,
        RFM_PACKET_POWER,
        RFM_PACKET_BATTERY_0, RFM_PACKET_BATTERY_1,
        RFM_PACKET_TEMP_0, RFM_PACKET_TEMP_1
    }packet_data_e;

}rfm_packet_t;
# 352 "common/include/common/rfm.h"
void rfm_init(void);
void rfm_reset(void);
void rfm_end(void);
void rfm_calibrate_crystal(void);
void rfm_config_for_lora(uint8_t BW, uint8_t CR, uint8_t SF, 
# 356 "common/include/common/rfm.h" 3 4
                                                            _Bool 
# 356 "common/include/common/rfm.h"
                                                                 crc_turn_on, int8_t power);
void rfm_config_for_gfsk(void);
void rfm_set_power(int8_t power, uint8_t ramp_time);
void rfm_get_stats(void);
void rfm_reset_stats(void);
uint8_t rfm_get_version(void);

void rfm_start_listening(void);
void rfm_get_packets(void);
rfm_packet_t* rfm_get_next_packet(void);
uint8_t rfm_get_num_packets(void);
void rfm_organize_packet(rfm_packet_t *packet);


# 369 "common/include/common/rfm.h" 3 4
_Bool 
# 369 "common/include/common/rfm.h"
    rfm_transmit_packet(rfm_packet_t packet);
void rfm_set_tx_continuous(void);
void rfm_clear_tx_continuous(void);
# 24 "common/src/timers.c" 2
# 1 "common/include/common/serial_printf.h" 1



# 1 "common/include/common/printf.h" 1
# 35 "common/include/common/printf.h"
# 1 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/lib/gcc/arm-none-eabi/9.3.1/include/stdarg.h" 1 3 4
# 40 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/lib/gcc/arm-none-eabi/9.3.1/include/stdarg.h" 3 4

# 40 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/lib/gcc/arm-none-eabi/9.3.1/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 99 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/lib/gcc/arm-none-eabi/9.3.1/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 36 "common/include/common/printf.h" 2
# 1 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/lib/gcc/arm-none-eabi/9.3.1/include/stddef.h" 1 3 4
# 143 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/lib/gcc/arm-none-eabi/9.3.1/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 209 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/lib/gcc/arm-none-eabi/9.3.1/include/stddef.h" 3 4
typedef unsigned int size_t;
# 321 "/usr/local/Cellar/arm-gcc-bin/9-2020-q2-update/lib/gcc/arm-none-eabi/9.3.1/include/stddef.h" 3 4
typedef unsigned int wchar_t;
# 37 "common/include/common/printf.h" 2
# 49 "common/include/common/printf.h"

# 49 "common/include/common/printf.h"
void _putchar_spf(char character);
void _putchar_sim(char character);
void _putchar_log(char character);

int vprintf_spf(const char* format, va_list va);
int vprintf_sim(const char* format, va_list va);
int vprintf_log(const char* format, va_list va);
# 5 "common/include/common/serial_printf.h" 2

void spf_init(void);
int spf_serial_printf(const char* format, ...);
# 25 "common/src/timers.c" 2
# 1 "common/include/common/testing.h" 1
# 35 "common/include/common/testing.h"
# 1 "common/include/common/bootloader_utils.h" 1
# 51 "common/include/common/bootloader_utils.h"
void boot_deinit(void);
void boot_jump_to_application(uint32_t address);
# 36 "common/include/common/testing.h" 2
# 59 "common/include/common/testing.h"
void test_boot(uint32_t address);
void flash_led(uint16_t milliseconds, uint8_t num_flashes);
void testing_wakeup(void);
void testing_standby(uint32_t standby_time);
void testing_rf(void);
void testing_rf_listen(void);
void testing_receiver(uint32_t dev_num);
void testing_voltage_scale(uint8_t scale);
void testing_low_power_run(void);
void testing_eeprom(void);
void testing_eeprom_keys(void);
void testing_eeprom_wipe(void);
void testing_lptim(void);
void testing_rfm(void);
void testing_reset_eeprom(void);
void testing_encryption(void);

# 75 "common/include/common/testing.h" 3 4
_Bool 
# 75 "common/include/common/testing.h"
    testing_timeout(void);
void testing_log(void);
void testing_analog_watchdog(void);
# 26 "common/src/timers.c" 2


static uint16_t timeout_timer = 0;
static uint32_t timeout_counter = 0;



void timers_rtc_init(uint32_t standby_time_seconds)
{
    rcc_periph_clock_enable(RCC_SYSCFG);


    rcc_periph_clock_enable(RCC_PWR);
    pwr_disable_backup_domain_write_protect();
# 51 "common/src/timers.c"
    rcc_osc_on(RCC_LSI);
    rcc_wait_for_osc_ready(RCC_LSI);


    (*(volatile uint32_t *)((((0x40000000U) + 0x20000) + 0x01000) + 0x50)) &= ~((0x3) << (16));
 (*(volatile uint32_t *)((((0x40000000U) + 0x20000) + 0x01000) + 0x50)) |= ((0x2) << (16));
    (*(volatile uint32_t *)((((0x40000000U) + 0x20000) + 0x01000) + 0x50)) |= (1 << 18);


    rtc_unlock();


    (*(volatile uint32_t *)((((0x40000000U) + 0x00000) + 0x2800) + 0x0c)) |= (1<<7);
    while (!(((*(volatile uint32_t *)((((0x40000000U) + 0x00000) + 0x2800) + 0x0c))) & ((1<<6))));


    rtc_set_prescaler(0x00FF, 0x007F);


    rtc_clear_wakeup_flag();
    (*(volatile uint32_t *)((((0x40000000U) + 0x00000) + 0x2800) + 0x08)) |= (1<<14);
    rtc_set_wakeup_time( (standby_time_seconds - 1), (0x4));


    (*(volatile uint32_t *)((((0x40000000U) + 0x00000) + 0x2800) + 0x0c)) &= ~(1<<7);


    pwr_enable_backup_domain_write_protect();
    rtc_lock();


    exti_reset_request((1 << 20));
    exti_set_trigger((1 << 20), EXTI_TRIGGER_RISING);
    exti_enable_request((1 << 20));


    nvic_clear_pending_irq(2);
    nvic_enable_irq(2);

}



void timers_lptim_init(void)
{

    rcc_set_peripheral_clk_sel((((0x40000000U) + 0x00000) + 0x7c00), 0);

    rcc_periph_clock_enable(RCC_LPTIM1);

    lptimer_set_internal_clock_source((((0x40000000U) + 0x00000) + 0x7c00));
    lptimer_enable_trigger((((0x40000000U) + 0x00000) + 0x7c00), (0 << 17));
    lptimer_set_prescaler((((0x40000000U) + 0x00000) + 0x7c00), (1 << 9));

    lptimer_enable((((0x40000000U) + 0x00000) + 0x7c00));

    lptimer_set_period((((0x40000000U) + 0x00000) + 0x7c00), 0xffff);

    lptimer_start_counter((((0x40000000U) + 0x00000) + 0x7c00), (1 << 2));
}


void timers_delay_microseconds(uint32_t delay_microseconds)
{
    uint32_t curr_time = lptimer_get_counter((((0x40000000U) + 0x00000) + 0x7c00));


    if(delay_microseconds > 65000)
        delay_microseconds = 65000;

    while (lptimer_get_counter((((0x40000000U) + 0x00000) + 0x7c00)) - curr_time < delay_microseconds);
}
# 138 "common/src/timers.c"
uint16_t timers_micros(void)
{
    return (uint16_t)lptimer_get_counter((((0x40000000U) + 0x00000) + 0x7c00));
}



void timers_tim6_init(void)
{
    rcc_periph_clock_enable(RCC_TIM6);
    timer_disable_counter((((0x40000000U) + 0x00000) + 0x1000));
    timer_set_prescaler((((0x40000000U) + 0x00000) + 0x1000), (2097 - 1));
    timer_enable_counter((((0x40000000U) + 0x00000) + 0x1000));
}


void timers_delay_milliseconds(uint32_t delay_milliseconds)
{
    uint32_t curr_time = timer_get_counter((((0x40000000U) + 0x00000) + 0x1000));


    if(delay_milliseconds > 65000)
        delay_milliseconds = 65000;

    while (timer_get_counter((((0x40000000U) + 0x00000) + 0x1000)) - curr_time < delay_milliseconds);
}


uint16_t timers_millis(void)
{
    return timer_get_counter((((0x40000000U) + 0x00000) + 0x1000));
}



void timers_iwdg_init(uint32_t period)
{

    iwdg_reset();
    iwdg_set_period_ms(period);
    iwdg_start();
}


void timers_pet_dogs(void)
{
    iwdg_reset();
}



void timers_enter_standby(void)
{
    pwr_disable_backup_domain_write_protect();

    (*(volatile uint32_t *)((((0xE0000000U) + 0xE000) + 0x0D00) + 0x10)) |= (1 << 2);


    pwr_set_stop_mode();

    (*(volatile uint32_t *)((((0x40000000U) + 0x00000) + 0x7000) + 0x00)) |= (1 << 0) | (1 << 9);

    pwr_clear_wakeup_flag();
    pwr_clear_standby_flag();


    while(1)
    {
        spf_serial_printf("WFI/E\n");
        set_gpio_for_standby();
        cm_disable_interrupts();
        __asm__("wfi");
        cm_enable_interrupts();
    }
}



void timeout_init(void)
{
    timeout_counter = 0;

    timeout_timer = timers_micros();
}


# 223 "common/src/timers.c" 3 4
_Bool 
# 223 "common/src/timers.c"
    timeout(uint32_t time_microseconds, char *msg, uint32_t data)
{
    timeout_counter += (uint16_t)(timers_micros() - timeout_timer);
    timeout_timer = timers_micros();



    if(timeout_counter > time_microseconds)
    {
        spf_serial_printf("Timeout %s %08X\n", msg, data);
        return 
# 233 "common/src/timers.c" 3 4
              1
# 233 "common/src/timers.c"
                  ;
    }
    else
        return 
# 236 "common/src/timers.c" 3 4
              0
# 236 "common/src/timers.c"
                   ;
}

void set_gpio_for_standby(void)
{


    gpio_mode_setup(((0x50000000U) + 0x00000), 0x3, 0x0, (1 << 14));
    gpio_set(((0x50000000U) + 0x00000), (1 << 14));


    gpio_mode_setup(((0x50000000U) + 0x00000), 0x0, 0x1, (1 << 2));
 gpio_mode_setup(((0x50000000U) + 0x00000), 0x1, 0x0, (1 << 3));
 gpio_set(((0x50000000U) + 0x00000), (1 << 3));


    gpio_mode_setup(((0x50000000U) + 0x00000), 0x3, 0x0, (1 << 0));



    gpio_mode_setup(((0x50000000U) + 0x00000), 0x3, 0x0, (1 << 6));

    gpio_mode_setup(((0x50000000U) + 0x00000), 0x0, 0x2, (1 << 5));
    gpio_mode_setup(((0x50000000U) + 0x00000), 0x0, 0x2, (1 << 7));

    gpio_mode_setup(((0x50000000U) + 0x00000), 0x0, 0x1, (1 << 4));
    gpio_mode_setup(((0x50000000U) + 0x00400), 0x0, 0x1, (1 << 0));


    gpio_mode_setup(((0x50000000U) + 0x00400), 0x3, 0x0, (1 << 15));
    gpio_mode_setup(((0x50000000U) + 0x00400), 0x3, 0x0, (1 << 12));
    gpio_mode_setup(((0x50000000U) + 0x00400), 0x3, 0x0, (1 << 11));
    gpio_mode_setup(((0x50000000U) + 0x00400), 0x3, 0x0, (1 << 2));
    gpio_mode_setup(((0x50000000U) + 0x00400), 0x3, 0x0, (1 << 10));
    gpio_mode_setup(((0x50000000U) + 0x00400), 0x3, 0x0, (1 << 1));





    gpio_mode_setup(((0x50000000U) + 0x00400), 0x0, 0x1, (1 << 13));
 gpio_mode_setup(((0x50000000U) + 0x00400), 0x0, 0x1, (1 << 14));



}


void rtc_isr(void)
{
    exti_reset_request((1 << 20));



    spf_init();
    spf_serial_printf("RTC ISR\n");

    if((*(volatile uint32_t *)((((0x40000000U) + 0x00000) + 0x2800) + 0x0c)) & (1<<10))
    {
        pwr_disable_backup_domain_write_protect();
        rtc_unlock();
     rtc_clear_wakeup_flag();
        pwr_clear_wakeup_flag();
        pwr_clear_standby_flag();
        rtc_lock();
     pwr_enable_backup_domain_write_protect();
        set_gpio_for_standby();
    }
}
