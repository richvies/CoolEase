
sensor/bin/sensor_bootloader.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 20 00 20 c1 14 00 08 bd 14 00 08 bb 14 00 08     . . ............
	...
 800002c:	bd 14 00 08 00 00 00 00 00 00 00 00 bd 14 00 08     ................
 800003c:	bd 14 00 08 bb 14 00 08 bb 14 00 08 75 10 00 08     ............u...
 800004c:	bb 14 00 08 bb 14 00 08 bb 14 00 08 bb 14 00 08     ................
 800005c:	49 0e 00 08 bb 14 00 08 bb 14 00 08 bb 14 00 08     I...............
 800006c:	bb 14 00 08 bb 14 00 08 bb 14 00 08 bb 14 00 08     ................
 800007c:	bb 14 00 08 bb 14 00 08 bb 14 00 08 bb 14 00 08     ................
 800008c:	bb 14 00 08 bb 14 00 08 bb 14 00 08 bb 14 00 08     ................
 800009c:	bb 14 00 08 bb 14 00 08 bb 14 00 08 bb 14 00 08     ................
 80000ac:	bb 14 00 08 bb 14 00 08 bb 14 00 08 bb 14 00 08     ................
 80000bc:	bb 14 00 08                                         ....

080000c0 <main>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

int main(void)
{
 80000c0:	b510      	push	{r4, lr}
    log_init();
 80000c2:	f000 f897 	bl	80001f4 <log_init>
    log_printf(MAIN, "Sensor Bootloader Start\n");
 80000c6:	4903      	ldr	r1, [pc, #12]	; (80000d4 <main+0x14>)
 80000c8:	2000      	movs	r0, #0
 80000ca:	f000 f89f 	bl	800020c <log_printf>
    return 0;
}
 80000ce:	2000      	movs	r0, #0
 80000d0:	bd10      	pop	{r4, pc}
 80000d2:	46c0      	nop			; (mov r8, r8)
 80000d4:	0800288c 	.word	0x0800288c

080000d8 <clock_setup>:
// Static Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

//  Static Function Definitions
static void clock_setup(void) 
{
 80000d8:	b510      	push	{r4, lr}
	// Enable MSI Osc 2.097Mhz
	rcc_osc_on(RCC_MSI);
 80000da:	2004      	movs	r0, #4
 80000dc:	f001 f8a8 	bl	8001230 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_MSI);
 80000e0:	2004      	movs	r0, #4
 80000e2:	f001 f8fb 	bl	80012dc <rcc_wait_for_osc_ready>

	// Set MSI to 2.097Mhz
	rcc_set_msi_range(5);
 80000e6:	2005      	movs	r0, #5
 80000e8:	f001 f922 	bl	8001330 <rcc_set_msi_range>

	// Set prescalers for AHB, APB1, APB2
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);				// AHB -> 2.097Mhz
 80000ec:	2000      	movs	r0, #0
 80000ee:	f001 f915 	bl	800131c <rcc_set_hpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);			// APB1 -> 2.097Mhz
 80000f2:	2000      	movs	r0, #0
 80000f4:	f001 f8fa 	bl	80012ec <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);			// APB2 -> 2.097Mhz
 80000f8:	2000      	movs	r0, #0
 80000fa:	f001 f903 	bl	8001304 <rcc_set_ppre2>

	// Set flash, 2.097Mhz -> 0 waitstates
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 80000fe:	2000      	movs	r0, #0
 8000100:	f000 ffe4 	bl	80010cc <flash_set_ws>

	// Set Peripheral Clock Frequencies used
	rcc_ahb_frequency = 2097000;
 8000104:	4b03      	ldr	r3, [pc, #12]	; (8000114 <clock_setup+0x3c>)
 8000106:	4a04      	ldr	r2, [pc, #16]	; (8000118 <clock_setup+0x40>)
 8000108:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 2097000;
 800010a:	4a04      	ldr	r2, [pc, #16]	; (800011c <clock_setup+0x44>)
 800010c:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = 2097000;
 800010e:	4a04      	ldr	r2, [pc, #16]	; (8000120 <clock_setup+0x48>)
 8000110:	6013      	str	r3, [r2, #0]
}
 8000112:	bd10      	pop	{r4, pc}
 8000114:	001fff68 	.word	0x001fff68
 8000118:	20000004 	.word	0x20000004
 800011c:	20000008 	.word	0x20000008
 8000120:	2000000c 	.word	0x2000000c

08000124 <usart_setup>:

static void usart_setup(void) 
{
 8000124:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_GPIOA);
 8000126:	20b0      	movs	r0, #176	; 0xb0
 8000128:	00c0      	lsls	r0, r0, #3
 800012a:	f001 f90d 	bl	8001348 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOB);
 800012e:	4824      	ldr	r0, [pc, #144]	; (80001c0 <usart_setup+0x9c>)
 8000130:	f001 f90a 	bl	8001348 <rcc_periph_clock_enable>

	gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_TX);
 8000134:	24a0      	movs	r4, #160	; 0xa0
 8000136:	05e4      	lsls	r4, r4, #23
 8000138:	2304      	movs	r3, #4
 800013a:	2200      	movs	r2, #0
 800013c:	2102      	movs	r1, #2
 800013e:	0020      	movs	r0, r4
 8000140:	f000 ffe7 	bl	8001112 <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_RX);
 8000144:	2308      	movs	r3, #8
 8000146:	2200      	movs	r2, #0
 8000148:	2102      	movs	r1, #2
 800014a:	0020      	movs	r0, r4
 800014c:	f000 ffe1 	bl	8001112 <gpio_mode_setup>
    
    gpio_set_output_options(SPF_USART_TX_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, SPF_USART_TX);
 8000150:	2304      	movs	r3, #4
 8000152:	2200      	movs	r2, #0
 8000154:	2100      	movs	r1, #0
 8000156:	0020      	movs	r0, r4
 8000158:	f000 fffb 	bl	8001152 <gpio_set_output_options>

    gpio_set_af(SPF_USART_TX_PORT, SPF_USART_AF, SPF_USART_TX);
 800015c:	2204      	movs	r2, #4
 800015e:	2104      	movs	r1, #4
 8000160:	0020      	movs	r0, r4
 8000162:	f001 f814 	bl	800118e <gpio_set_af>
    gpio_set_af(SPF_USART_RX_PORT, SPF_USART_AF, SPF_USART_RX);
 8000166:	2208      	movs	r2, #8
 8000168:	2104      	movs	r1, #4
 800016a:	0020      	movs	r0, r4
 800016c:	f001 f80f 	bl	800118e <gpio_set_af>
    
	rcc_periph_clock_enable(SPF_USART_RCC);
 8000170:	4814      	ldr	r0, [pc, #80]	; (80001c4 <usart_setup+0xa0>)
 8000172:	f001 f8e9 	bl	8001348 <rcc_periph_clock_enable>
    rcc_periph_reset_pulse(SPF_USART_RCC_RST);
 8000176:	4814      	ldr	r0, [pc, #80]	; (80001c8 <usart_setup+0xa4>)
 8000178:	f001 f8f4 	bl	8001364 <rcc_periph_reset_pulse>
	usart_disable(SPF_USART);
 800017c:	4c13      	ldr	r4, [pc, #76]	; (80001cc <usart_setup+0xa8>)
 800017e:	0020      	movs	r0, r4
 8000180:	f001 f97d 	bl	800147e <usart_disable>
	usart_set_baudrate(SPF_USART, SPF_USART_BAUD);
 8000184:	21e1      	movs	r1, #225	; 0xe1
 8000186:	0249      	lsls	r1, r1, #9
 8000188:	0020      	movs	r0, r4
 800018a:	f001 f91b 	bl	80013c4 <usart_set_baudrate>
	usart_set_databits(SPF_USART, 8);
 800018e:	2108      	movs	r1, #8
 8000190:	0020      	movs	r0, r4
 8000192:	f001 f943 	bl	800141c <usart_set_databits>
	usart_set_stopbits(SPF_USART,USART_STOPBITS_1);
 8000196:	2100      	movs	r1, #0
 8000198:	0020      	movs	r0, r4
 800019a:	f001 f94d 	bl	8001438 <usart_set_stopbits>
	usart_set_mode(SPF_USART, USART_MODE_TX_RX);
 800019e:	210c      	movs	r1, #12
 80001a0:	0020      	movs	r0, r4
 80001a2:	f001 f959 	bl	8001458 <usart_set_mode>
	usart_set_parity(SPF_USART, USART_PARITY_NONE);
 80001a6:	2100      	movs	r1, #0
 80001a8:	0020      	movs	r0, r4
 80001aa:	f001 f94d 	bl	8001448 <usart_set_parity>
	usart_set_flow_control(SPF_USART, USART_FLOWCONTROL_NONE);
 80001ae:	2100      	movs	r1, #0
 80001b0:	0020      	movs	r0, r4
 80001b2:	f001 f957 	bl	8001464 <usart_set_flow_control>
	usart_enable(SPF_USART);
 80001b6:	0020      	movs	r0, r4
 80001b8:	f001 f95c 	bl	8001474 <usart_enable>
}
 80001bc:	bd10      	pop	{r4, pc}
 80001be:	46c0      	nop			; (mov r8, r8)
 80001c0:	00000581 	.word	0x00000581
 80001c4:	00000711 	.word	0x00000711
 80001c8:	00000511 	.word	0x00000511
 80001cc:	40004400 	.word	0x40004400

080001d0 <_putchar>:

static void _putchar(char character, void* buffer, size_t idx, size_t maxlen)
{
 80001d0:	b510      	push	{r4, lr}
 80001d2:	0004      	movs	r4, r0
	(void)buffer; (void)idx; (void)maxlen;

    mem_eeprom_write_byte(curr_address++, character);
 80001d4:	4b05      	ldr	r3, [pc, #20]	; (80001ec <_putchar+0x1c>)
 80001d6:	6818      	ldr	r0, [r3, #0]
 80001d8:	1c42      	adds	r2, r0, #1
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	0021      	movs	r1, r4
 80001de:	f000 f837 	bl	8000250 <mem_eeprom_write_byte>

    #ifdef DEBUG
	usart_send_blocking(SPF_USART, character);	
 80001e2:	b2a1      	uxth	r1, r4
 80001e4:	4802      	ldr	r0, [pc, #8]	; (80001f0 <_putchar+0x20>)
 80001e6:	f001 f94f 	bl	8001488 <usart_send_blocking>
    #endif		
}
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000000 	.word	0x20000000
 80001f0:	40004400 	.word	0x40004400

080001f4 <log_init>:
{
 80001f4:	b510      	push	{r4, lr}
    curr_address = 0;
 80001f6:	4b04      	ldr	r3, [pc, #16]	; (8000208 <log_init+0x14>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
    clock_setup();
 80001fc:	f7ff ff6c 	bl	80000d8 <clock_setup>
    usart_setup();
 8000200:	f7ff ff90 	bl	8000124 <usart_setup>
}
 8000204:	bd10      	pop	{r4, pc}
 8000206:	46c0      	nop			; (mov r8, r8)
 8000208:	20000000 	.word	0x20000000

0800020c <log_printf>:
{
 800020c:	b40e      	push	{r1, r2, r3}
 800020e:	b500      	push	{lr}
 8000210:	b084      	sub	sp, #16
 8000212:	aa05      	add	r2, sp, #20
 8000214:	ca08      	ldmia	r2!, {r3}
	va_start(va, format);
 8000216:	9202      	str	r2, [sp, #8]
    switch (type)
 8000218:	2800      	cmp	r0, #0
 800021a:	d007      	beq.n	800022c <log_printf+0x20>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {__asm__("nop");}
 800021c:	2140      	movs	r1, #64	; 0x40
 800021e:	480a      	ldr	r0, [pc, #40]	; (8000248 <log_printf+0x3c>)
 8000220:	f001 f945 	bl	80014ae <usart_get_flag>
 8000224:	2800      	cmp	r0, #0
 8000226:	d10a      	bne.n	800023e <log_printf+0x32>
 8000228:	46c0      	nop			; (mov r8, r8)
 800022a:	e7f7      	b.n	800021c <log_printf+0x10>
        _vsnprintf(_putchar, buffer, (size_t)-1, format, va);
 800022c:	2201      	movs	r2, #1
 800022e:	9902      	ldr	r1, [sp, #8]
 8000230:	9100      	str	r1, [sp, #0]
 8000232:	4252      	negs	r2, r2
 8000234:	a903      	add	r1, sp, #12
 8000236:	4805      	ldr	r0, [pc, #20]	; (800024c <log_printf+0x40>)
 8000238:	f000 fb20 	bl	800087c <_vsnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {__asm__("nop");}
 800023c:	e7ee      	b.n	800021c <log_printf+0x10>
}
 800023e:	b004      	add	sp, #16
 8000240:	bc08      	pop	{r3}
 8000242:	b003      	add	sp, #12
 8000244:	4718      	bx	r3
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	40004400 	.word	0x40004400
 800024c:	080001d1 	.word	0x080001d1

08000250 <mem_eeprom_write_byte>:

    return true;
}

bool mem_eeprom_write_byte(uint32_t address, uint8_t data)
{
 8000250:	b570      	push	{r4, r5, r6, lr}
 8000252:	0004      	movs	r4, r0
 8000254:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 8000256:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <mem_eeprom_write_byte+0x44>)
 8000258:	18c2      	adds	r2, r0, r3
 800025a:	2380      	movs	r3, #128	; 0x80
 800025c:	011b      	lsls	r3, r3, #4
 800025e:	429a      	cmp	r2, r3
 8000260:	d301      	bcc.n	8000266 <mem_eeprom_write_byte+0x16>
        return false;
 8000262:	2000      	movs	r0, #0
        FLASH_SR = FLASH_SR_EOP;

    flash_lock_pecr();

    return true;
}
 8000264:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock_pecr();
 8000266:	f000 ff3b 	bl	80010e0 <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 800026a:	4a0b      	ldr	r2, [pc, #44]	; (8000298 <mem_eeprom_write_byte+0x48>)
 800026c:	6813      	ldr	r3, [r2, #0]
 800026e:	490b      	ldr	r1, [pc, #44]	; (800029c <mem_eeprom_write_byte+0x4c>)
 8000270:	400b      	ands	r3, r1
 8000272:	6013      	str	r3, [r2, #0]
    MMIO8(address) = data;
 8000274:	7025      	strb	r5, [r4, #0]
    while (FLASH_SR & FLASH_SR_BSY);
 8000276:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <mem_eeprom_write_byte+0x50>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	07db      	lsls	r3, r3, #31
 800027c:	d4fb      	bmi.n	8000276 <mem_eeprom_write_byte+0x26>
    if (FLASH_SR & FLASH_SR_EOP)
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <mem_eeprom_write_byte+0x50>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	079b      	lsls	r3, r3, #30
 8000284:	d502      	bpl.n	800028c <mem_eeprom_write_byte+0x3c>
        FLASH_SR = FLASH_SR_EOP;
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <mem_eeprom_write_byte+0x50>)
 8000288:	2202      	movs	r2, #2
 800028a:	601a      	str	r2, [r3, #0]
    flash_lock_pecr();
 800028c:	f000 ff34 	bl	80010f8 <flash_lock_pecr>
    return true;
 8000290:	2001      	movs	r0, #1
 8000292:	e7e7      	b.n	8000264 <mem_eeprom_write_byte+0x14>
 8000294:	f7f80000 	.word	0xf7f80000
 8000298:	40022004 	.word	0x40022004
 800029c:	fffffeff 	.word	0xfffffeff
 80002a0:	40022018 	.word	0x40022018

080002a4 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80002a4:	4770      	bx	lr

080002a6 <_atoi>:
}


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80002a6:	0001      	movs	r1, r0
  unsigned int i = 0U;
 80002a8:	2000      	movs	r0, #0
  while (_is_digit(**str)) {
 80002aa:	680a      	ldr	r2, [r1, #0]
 80002ac:	7813      	ldrb	r3, [r2, #0]
  return (ch >= '0') && (ch <= '9');
 80002ae:	3b30      	subs	r3, #48	; 0x30
 80002b0:	b2db      	uxtb	r3, r3
  while (_is_digit(**str)) {
 80002b2:	2b09      	cmp	r3, #9
 80002b4:	d808      	bhi.n	80002c8 <_atoi+0x22>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80002b6:	0083      	lsls	r3, r0, #2
 80002b8:	181b      	adds	r3, r3, r0
 80002ba:	005b      	lsls	r3, r3, #1
 80002bc:	1c50      	adds	r0, r2, #1
 80002be:	6008      	str	r0, [r1, #0]
 80002c0:	7810      	ldrb	r0, [r2, #0]
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	3830      	subs	r0, #48	; 0x30
 80002c6:	e7f0      	b.n	80002aa <_atoi+0x4>
  }
  return i;
}
 80002c8:	4770      	bx	lr

080002ca <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80002ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002cc:	46de      	mov	lr, fp
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	b5e0      	push	{r5, r6, r7, lr}
 80002d6:	b083      	sub	sp, #12
 80002d8:	4693      	mov	fp, r2
 80002da:	001f      	movs	r7, r3
 80002dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002de:	469a      	mov	sl, r3
 80002e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80002e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80002e4:	4699      	mov	r9, r3
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80002e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80002e8:	079b      	lsls	r3, r3, #30
 80002ea:	d003      	beq.n	80002f4 <_out_rev+0x2a>
 80002ec:	46b8      	mov	r8, r7
 80002ee:	000f      	movs	r7, r1
 80002f0:	0006      	movs	r6, r0
 80002f2:	e022      	b.n	800033a <_out_rev+0x70>
 80002f4:	9201      	str	r2, [sp, #4]
 80002f6:	46a3      	mov	fp, r4
 80002f8:	4688      	mov	r8, r1
 80002fa:	464e      	mov	r6, r9
 80002fc:	46b9      	mov	r9, r7
 80002fe:	0007      	movs	r7, r0
    for (size_t i = len; i < width; i++) {
 8000300:	42b4      	cmp	r4, r6
 8000302:	d207      	bcs.n	8000314 <_out_rev+0x4a>
      out(' ', buffer, idx++, maxlen);
 8000304:	1c55      	adds	r5, r2, #1
 8000306:	464b      	mov	r3, r9
 8000308:	4641      	mov	r1, r8
 800030a:	2020      	movs	r0, #32
 800030c:	47b8      	blx	r7
    for (size_t i = len; i < width; i++) {
 800030e:	3401      	adds	r4, #1
      out(' ', buffer, idx++, maxlen);
 8000310:	002a      	movs	r2, r5
 8000312:	e7f5      	b.n	8000300 <_out_rev+0x36>
 8000314:	003d      	movs	r5, r7
 8000316:	464f      	mov	r7, r9
 8000318:	465c      	mov	r4, fp
 800031a:	9b01      	ldr	r3, [sp, #4]
 800031c:	469b      	mov	fp, r3
 800031e:	46b1      	mov	r9, r6
 8000320:	4646      	mov	r6, r8
 8000322:	46b8      	mov	r8, r7
 8000324:	0037      	movs	r7, r6
 8000326:	002e      	movs	r6, r5
 8000328:	e007      	b.n	800033a <_out_rev+0x70>
    }
  }

  // reverse string
  while (len) {
    out(buf[--len], buffer, idx++, maxlen);
 800032a:	3c01      	subs	r4, #1
 800032c:	1c55      	adds	r5, r2, #1
 800032e:	4653      	mov	r3, sl
 8000330:	5d18      	ldrb	r0, [r3, r4]
 8000332:	4643      	mov	r3, r8
 8000334:	0039      	movs	r1, r7
 8000336:	47b0      	blx	r6
 8000338:	002a      	movs	r2, r5
  while (len) {
 800033a:	2c00      	cmp	r4, #0
 800033c:	d1f5      	bne.n	800032a <_out_rev+0x60>
 800033e:	0035      	movs	r5, r6
 8000340:	003e      	movs	r6, r7
 8000342:	4647      	mov	r7, r8
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8000344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000346:	079b      	lsls	r3, r3, #30
 8000348:	d407      	bmi.n	800035a <_out_rev+0x90>
      out(' ', buffer, idx++, maxlen);
    }
  }

  return idx;
}
 800034a:	0010      	movs	r0, r2
 800034c:	b003      	add	sp, #12
 800034e:	bcf0      	pop	{r4, r5, r6, r7}
 8000350:	46bb      	mov	fp, r7
 8000352:	46b2      	mov	sl, r6
 8000354:	46a9      	mov	r9, r5
 8000356:	46a0      	mov	r8, r4
 8000358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035a:	46b0      	mov	r8, r6
 800035c:	464e      	mov	r6, r9
 800035e:	46b9      	mov	r9, r7
 8000360:	002f      	movs	r7, r5
 8000362:	465d      	mov	r5, fp
    while (idx - start_idx < width) {
 8000364:	1b53      	subs	r3, r2, r5
 8000366:	42b3      	cmp	r3, r6
 8000368:	d2ef      	bcs.n	800034a <_out_rev+0x80>
      out(' ', buffer, idx++, maxlen);
 800036a:	1c54      	adds	r4, r2, #1
 800036c:	464b      	mov	r3, r9
 800036e:	4641      	mov	r1, r8
 8000370:	2020      	movs	r0, #32
 8000372:	47b8      	blx	r7
 8000374:	0022      	movs	r2, r4
 8000376:	e7f5      	b.n	8000364 <_out_rev+0x9a>

08000378 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8000378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800037a:	46ce      	mov	lr, r9
 800037c:	4647      	mov	r7, r8
 800037e:	b580      	push	{r7, lr}
 8000380:	b085      	sub	sp, #20
 8000382:	4694      	mov	ip, r2
 8000384:	4698      	mov	r8, r3
 8000386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000388:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800038a:	ab0e      	add	r3, sp, #56	; 0x38
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	4699      	mov	r9, r3
 8000390:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8000392:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000394:	9e12      	ldr	r6, [sp, #72]	; 0x48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8000396:	07b7      	lsls	r7, r6, #30
 8000398:	d41b      	bmi.n	80003d2 <_ntoa_format+0x5a>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800039a:	2b00      	cmp	r3, #0
 800039c:	d008      	beq.n	80003b0 <_ntoa_format+0x38>
 800039e:	07f7      	lsls	r7, r6, #31
 80003a0:	d506      	bpl.n	80003b0 <_ntoa_format+0x38>
 80003a2:	464f      	mov	r7, r9
 80003a4:	2f00      	cmp	r7, #0
 80003a6:	d102      	bne.n	80003ae <_ntoa_format+0x36>
 80003a8:	370c      	adds	r7, #12
 80003aa:	4237      	tst	r7, r6
 80003ac:	d000      	beq.n	80003b0 <_ntoa_format+0x38>
      width--;
 80003ae:	3b01      	subs	r3, #1
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80003b0:	4294      	cmp	r4, r2
 80003b2:	d208      	bcs.n	80003c6 <_ntoa_format+0x4e>
 80003b4:	2c1f      	cmp	r4, #31
 80003b6:	d806      	bhi.n	80003c6 <_ntoa_format+0x4e>
      buf[len++] = '0';
 80003b8:	2730      	movs	r7, #48	; 0x30
 80003ba:	552f      	strb	r7, [r5, r4]
 80003bc:	3401      	adds	r4, #1
 80003be:	e7f7      	b.n	80003b0 <_ntoa_format+0x38>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 80003c0:	2730      	movs	r7, #48	; 0x30
 80003c2:	552f      	strb	r7, [r5, r4]
 80003c4:	3401      	adds	r4, #1
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80003c6:	07f7      	lsls	r7, r6, #31
 80003c8:	d503      	bpl.n	80003d2 <_ntoa_format+0x5a>
 80003ca:	429c      	cmp	r4, r3
 80003cc:	d201      	bcs.n	80003d2 <_ntoa_format+0x5a>
 80003ce:	2c1f      	cmp	r4, #31
 80003d0:	d9f6      	bls.n	80003c0 <_ntoa_format+0x48>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80003d2:	06f7      	lsls	r7, r6, #27
 80003d4:	d515      	bpl.n	8000402 <_ntoa_format+0x8a>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80003d6:	0577      	lsls	r7, r6, #21
 80003d8:	d405      	bmi.n	80003e6 <_ntoa_format+0x6e>
 80003da:	2c00      	cmp	r4, #0
 80003dc:	d003      	beq.n	80003e6 <_ntoa_format+0x6e>
 80003de:	4294      	cmp	r4, r2
 80003e0:	d024      	beq.n	800042c <_ntoa_format+0xb4>
 80003e2:	429c      	cmp	r4, r3
 80003e4:	d022      	beq.n	800042c <_ntoa_format+0xb4>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80003e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80003e8:	2a10      	cmp	r2, #16
 80003ea:	d02b      	beq.n	8000444 <_ntoa_format+0xcc>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80003ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80003ee:	2a10      	cmp	r2, #16
 80003f0:	d030      	beq.n	8000454 <_ntoa_format+0xdc>
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80003f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80003f4:	2a02      	cmp	r2, #2
 80003f6:	d035      	beq.n	8000464 <_ntoa_format+0xec>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80003f8:	2c1f      	cmp	r4, #31
 80003fa:	d802      	bhi.n	8000402 <_ntoa_format+0x8a>
      buf[len++] = '0';
 80003fc:	2230      	movs	r2, #48	; 0x30
 80003fe:	552a      	strb	r2, [r5, r4]
 8000400:	3401      	adds	r4, #1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8000402:	2c1f      	cmp	r4, #31
 8000404:	d805      	bhi.n	8000412 <_ntoa_format+0x9a>
    if (negative) {
 8000406:	464a      	mov	r2, r9
 8000408:	2a00      	cmp	r2, #0
 800040a:	d031      	beq.n	8000470 <_ntoa_format+0xf8>
      buf[len++] = '-';
 800040c:	222d      	movs	r2, #45	; 0x2d
 800040e:	552a      	strb	r2, [r5, r4]
 8000410:	3401      	adds	r4, #1
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8000412:	9603      	str	r6, [sp, #12]
 8000414:	9302      	str	r3, [sp, #8]
 8000416:	9401      	str	r4, [sp, #4]
 8000418:	9500      	str	r5, [sp, #0]
 800041a:	4643      	mov	r3, r8
 800041c:	4662      	mov	r2, ip
 800041e:	f7ff ff54 	bl	80002ca <_out_rev>
}
 8000422:	b005      	add	sp, #20
 8000424:	bcc0      	pop	{r6, r7}
 8000426:	46b9      	mov	r9, r7
 8000428:	46b0      	mov	r8, r6
 800042a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      len--;
 800042c:	1e62      	subs	r2, r4, #1
      if (len && (base == 16U)) {
 800042e:	2c01      	cmp	r4, #1
 8000430:	d006      	beq.n	8000440 <_ntoa_format+0xc8>
 8000432:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8000434:	2f10      	cmp	r7, #16
 8000436:	d001      	beq.n	800043c <_ntoa_format+0xc4>
      len--;
 8000438:	0014      	movs	r4, r2
 800043a:	e7d4      	b.n	80003e6 <_ntoa_format+0x6e>
        len--;
 800043c:	3c02      	subs	r4, #2
 800043e:	e7d2      	b.n	80003e6 <_ntoa_format+0x6e>
      len--;
 8000440:	0014      	movs	r4, r2
 8000442:	e7d0      	b.n	80003e6 <_ntoa_format+0x6e>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8000444:	06b2      	lsls	r2, r6, #26
 8000446:	d4d1      	bmi.n	80003ec <_ntoa_format+0x74>
 8000448:	2c1f      	cmp	r4, #31
 800044a:	d8cf      	bhi.n	80003ec <_ntoa_format+0x74>
      buf[len++] = 'x';
 800044c:	2278      	movs	r2, #120	; 0x78
 800044e:	552a      	strb	r2, [r5, r4]
 8000450:	3401      	adds	r4, #1
 8000452:	e7d1      	b.n	80003f8 <_ntoa_format+0x80>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8000454:	06b2      	lsls	r2, r6, #26
 8000456:	d5cc      	bpl.n	80003f2 <_ntoa_format+0x7a>
 8000458:	2c1f      	cmp	r4, #31
 800045a:	d8ca      	bhi.n	80003f2 <_ntoa_format+0x7a>
      buf[len++] = 'X';
 800045c:	2258      	movs	r2, #88	; 0x58
 800045e:	552a      	strb	r2, [r5, r4]
 8000460:	3401      	adds	r4, #1
 8000462:	e7c9      	b.n	80003f8 <_ntoa_format+0x80>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8000464:	2c1f      	cmp	r4, #31
 8000466:	d8c7      	bhi.n	80003f8 <_ntoa_format+0x80>
      buf[len++] = 'b';
 8000468:	3260      	adds	r2, #96	; 0x60
 800046a:	552a      	strb	r2, [r5, r4]
 800046c:	3401      	adds	r4, #1
 800046e:	e7c3      	b.n	80003f8 <_ntoa_format+0x80>
    else if (flags & FLAGS_PLUS) {
 8000470:	0772      	lsls	r2, r6, #29
 8000472:	d503      	bpl.n	800047c <_ntoa_format+0x104>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8000474:	222b      	movs	r2, #43	; 0x2b
 8000476:	552a      	strb	r2, [r5, r4]
 8000478:	3401      	adds	r4, #1
 800047a:	e7ca      	b.n	8000412 <_ntoa_format+0x9a>
    else if (flags & FLAGS_SPACE) {
 800047c:	0732      	lsls	r2, r6, #28
 800047e:	d5c8      	bpl.n	8000412 <_ntoa_format+0x9a>
      buf[len++] = ' ';
 8000480:	2220      	movs	r2, #32
 8000482:	552a      	strb	r2, [r5, r4]
 8000484:	3401      	adds	r4, #1
 8000486:	e7c4      	b.n	8000412 <_ntoa_format+0x9a>

08000488 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8000488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048a:	46de      	mov	lr, fp
 800048c:	4657      	mov	r7, sl
 800048e:	464e      	mov	r6, r9
 8000490:	4645      	mov	r5, r8
 8000492:	b5e0      	push	{r5, r6, r7, lr}
 8000494:	b093      	sub	sp, #76	; 0x4c
 8000496:	4681      	mov	r9, r0
 8000498:	468a      	mov	sl, r1
 800049a:	9208      	str	r2, [sp, #32]
 800049c:	9309      	str	r3, [sp, #36]	; 0x24
 800049e:	ab1c      	add	r3, sp, #112	; 0x70
 80004a0:	cb10      	ldmia	r3!, {r4}
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	469b      	mov	fp, r3
 80004a6:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80004a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80004aa:	4698      	mov	r8, r3
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 80004ac:	2c00      	cmp	r4, #0
 80004ae:	d103      	bne.n	80004b8 <_ntoa_long+0x30>
    flags &= ~FLAGS_HASH;
 80004b0:	2310      	movs	r3, #16
 80004b2:	4642      	mov	r2, r8
 80004b4:	439a      	bics	r2, r3
 80004b6:	4690      	mov	r8, r2
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	00db      	lsls	r3, r3, #3
 80004bc:	4646      	mov	r6, r8
 80004be:	401e      	ands	r6, r3
 80004c0:	4642      	mov	r2, r8
 80004c2:	421a      	tst	r2, r3
 80004c4:	d012      	beq.n	80004ec <_ntoa_long+0x64>
 80004c6:	2c00      	cmp	r4, #0
 80004c8:	d022      	beq.n	8000510 <_ntoa_long+0x88>
 80004ca:	2600      	movs	r6, #0
 80004cc:	e00e      	b.n	80004ec <_ntoa_long+0x64>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80004ce:	3330      	adds	r3, #48	; 0x30
 80004d0:	b2d9      	uxtb	r1, r3
 80004d2:	1c77      	adds	r7, r6, #1
 80004d4:	ab0a      	add	r3, sp, #40	; 0x28
 80004d6:	5599      	strb	r1, [r3, r6]
      value /= base;
 80004d8:	0029      	movs	r1, r5
 80004da:	0020      	movs	r0, r4
 80004dc:	f001 f83e 	bl	800155c <__udivsi3>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80004e0:	42ac      	cmp	r4, r5
 80004e2:	d316      	bcc.n	8000512 <_ntoa_long+0x8a>
 80004e4:	2f1f      	cmp	r7, #31
 80004e6:	d814      	bhi.n	8000512 <_ntoa_long+0x8a>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80004e8:	003e      	movs	r6, r7
      value /= base;
 80004ea:	0004      	movs	r4, r0
      const char digit = (char)(value % base);
 80004ec:	0029      	movs	r1, r5
 80004ee:	0020      	movs	r0, r4
 80004f0:	f001 f8ba 	bl	8001668 <__aeabi_uidivmod>
 80004f4:	b2cb      	uxtb	r3, r1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80004f6:	2b09      	cmp	r3, #9
 80004f8:	d9e9      	bls.n	80004ce <_ntoa_long+0x46>
 80004fa:	4642      	mov	r2, r8
 80004fc:	0692      	lsls	r2, r2, #26
 80004fe:	d505      	bpl.n	800050c <_ntoa_long+0x84>
 8000500:	2141      	movs	r1, #65	; 0x41
 8000502:	18c9      	adds	r1, r1, r3
 8000504:	b2c9      	uxtb	r1, r1
 8000506:	390a      	subs	r1, #10
 8000508:	b2c9      	uxtb	r1, r1
 800050a:	e7e2      	b.n	80004d2 <_ntoa_long+0x4a>
 800050c:	2161      	movs	r1, #97	; 0x61
 800050e:	e7f8      	b.n	8000502 <_ntoa_long+0x7a>
  size_t len = 0U;
 8000510:	0027      	movs	r7, r4
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8000512:	4643      	mov	r3, r8
 8000514:	9306      	str	r3, [sp, #24]
 8000516:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8000518:	9305      	str	r3, [sp, #20]
 800051a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800051c:	9304      	str	r3, [sp, #16]
 800051e:	9503      	str	r5, [sp, #12]
 8000520:	465b      	mov	r3, fp
 8000522:	9302      	str	r3, [sp, #8]
 8000524:	9701      	str	r7, [sp, #4]
 8000526:	ab0a      	add	r3, sp, #40	; 0x28
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800052c:	9a08      	ldr	r2, [sp, #32]
 800052e:	4651      	mov	r1, sl
 8000530:	4648      	mov	r0, r9
 8000532:	f7ff ff21 	bl	8000378 <_ntoa_format>
}
 8000536:	b013      	add	sp, #76	; 0x4c
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000544 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	46de      	mov	lr, fp
 8000548:	4657      	mov	r7, sl
 800054a:	464e      	mov	r6, r9
 800054c:	4645      	mov	r5, r8
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	b093      	sub	sp, #76	; 0x4c
 8000552:	9004      	str	r0, [sp, #16]
 8000554:	9105      	str	r1, [sp, #20]
 8000556:	4692      	mov	sl, r2
 8000558:	469b      	mov	fp, r3
 800055a:	9d1e      	ldr	r5, [sp, #120]	; 0x78

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800055c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800055e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8000560:	0010      	movs	r0, r2
 8000562:	0019      	movs	r1, r3
 8000564:	f001 f980 	bl	8001868 <__aeabi_dcmpeq>
 8000568:	2800      	cmp	r0, #0
 800056a:	d033      	beq.n	80005d4 <_ftoa+0x90>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
  if (value < -DBL_MAX)
 800056c:	2201      	movs	r2, #1
 800056e:	4252      	negs	r2, r2
 8000570:	4bb8      	ldr	r3, [pc, #736]	; (8000854 <_ftoa+0x310>)
 8000572:	981c      	ldr	r0, [sp, #112]	; 0x70
 8000574:	991d      	ldr	r1, [sp, #116]	; 0x74
 8000576:	f001 f97d 	bl	8001874 <__aeabi_dcmplt>
 800057a:	2800      	cmp	r0, #0
 800057c:	d139      	bne.n	80005f2 <_ftoa+0xae>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
  if (value > DBL_MAX)
 800057e:	2201      	movs	r2, #1
 8000580:	4252      	negs	r2, r2
 8000582:	4bb5      	ldr	r3, [pc, #724]	; (8000858 <_ftoa+0x314>)
 8000584:	981c      	ldr	r0, [sp, #112]	; 0x70
 8000586:	991d      	ldr	r1, [sp, #116]	; 0x74
 8000588:	f001 f988 	bl	800189c <__aeabi_dcmpgt>
 800058c:	2800      	cmp	r0, #0
 800058e:	d13f      	bne.n	8000610 <_ftoa+0xcc>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8000590:	2200      	movs	r2, #0
 8000592:	4bb2      	ldr	r3, [pc, #712]	; (800085c <_ftoa+0x318>)
 8000594:	981c      	ldr	r0, [sp, #112]	; 0x70
 8000596:	991d      	ldr	r1, [sp, #116]	; 0x74
 8000598:	f001 f980 	bl	800189c <__aeabi_dcmpgt>
 800059c:	2800      	cmp	r0, #0
 800059e:	d000      	beq.n	80005a2 <_ftoa+0x5e>
 80005a0:	e153      	b.n	800084a <_ftoa+0x306>
 80005a2:	2200      	movs	r2, #0
 80005a4:	4bae      	ldr	r3, [pc, #696]	; (8000860 <_ftoa+0x31c>)
 80005a6:	981c      	ldr	r0, [sp, #112]	; 0x70
 80005a8:	991d      	ldr	r1, [sp, #116]	; 0x74
 80005aa:	f001 f963 	bl	8001874 <__aeabi_dcmplt>
 80005ae:	2800      	cmp	r0, #0
 80005b0:	d000      	beq.n	80005b4 <_ftoa+0x70>
 80005b2:	e14c      	b.n	800084e <_ftoa+0x30a>
#endif
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
 80005b4:	2200      	movs	r2, #0
 80005b6:	2300      	movs	r3, #0
 80005b8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80005ba:	991d      	ldr	r1, [sp, #116]	; 0x74
 80005bc:	f001 f95a 	bl	8001874 <__aeabi_dcmplt>
 80005c0:	2800      	cmp	r0, #0
 80005c2:	d146      	bne.n	8000652 <_ftoa+0x10e>
  bool negative = false;
 80005c4:	2300      	movs	r3, #0
 80005c6:	4699      	mov	r9, r3
    negative = true;
    value = 0 - value;
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80005c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80005ca:	055b      	lsls	r3, r3, #21
 80005cc:	d400      	bmi.n	80005d0 <_ftoa+0x8c>
 80005ce:	e0ac      	b.n	800072a <_ftoa+0x1e6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80005d0:	2400      	movs	r4, #0
 80005d2:	e04e      	b.n	8000672 <_ftoa+0x12e>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80005d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80005d6:	9303      	str	r3, [sp, #12]
 80005d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80005da:	9302      	str	r3, [sp, #8]
 80005dc:	2303      	movs	r3, #3
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	4ba0      	ldr	r3, [pc, #640]	; (8000864 <_ftoa+0x320>)
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	465b      	mov	r3, fp
 80005e6:	4652      	mov	r2, sl
 80005e8:	9905      	ldr	r1, [sp, #20]
 80005ea:	9804      	ldr	r0, [sp, #16]
 80005ec:	f7ff fe6d 	bl	80002ca <_out_rev>
 80005f0:	e024      	b.n	800063c <_ftoa+0xf8>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80005f2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80005f4:	9303      	str	r3, [sp, #12]
 80005f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	2304      	movs	r3, #4
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	4b9a      	ldr	r3, [pc, #616]	; (8000868 <_ftoa+0x324>)
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	465b      	mov	r3, fp
 8000604:	4652      	mov	r2, sl
 8000606:	9905      	ldr	r1, [sp, #20]
 8000608:	9804      	ldr	r0, [sp, #16]
 800060a:	f7ff fe5e 	bl	80002ca <_out_rev>
 800060e:	e015      	b.n	800063c <_ftoa+0xf8>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8000610:	2304      	movs	r3, #4
 8000612:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8000614:	401a      	ands	r2, r3
 8000616:	9920      	ldr	r1, [sp, #128]	; 0x80
 8000618:	420b      	tst	r3, r1
 800061a:	d016      	beq.n	800064a <_ftoa+0x106>
 800061c:	4b93      	ldr	r3, [pc, #588]	; (800086c <_ftoa+0x328>)
 800061e:	2a00      	cmp	r2, #0
 8000620:	d015      	beq.n	800064e <_ftoa+0x10a>
 8000622:	2204      	movs	r2, #4
 8000624:	9920      	ldr	r1, [sp, #128]	; 0x80
 8000626:	9103      	str	r1, [sp, #12]
 8000628:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800062a:	9102      	str	r1, [sp, #8]
 800062c:	9201      	str	r2, [sp, #4]
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	465b      	mov	r3, fp
 8000632:	4652      	mov	r2, sl
 8000634:	9905      	ldr	r1, [sp, #20]
 8000636:	9804      	ldr	r0, [sp, #16]
 8000638:	f7ff fe47 	bl	80002ca <_out_rev>
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 800063c:	b013      	add	sp, #76	; 0x4c
 800063e:	bcf0      	pop	{r4, r5, r6, r7}
 8000640:	46bb      	mov	fp, r7
 8000642:	46b2      	mov	sl, r6
 8000644:	46a9      	mov	r9, r5
 8000646:	46a0      	mov	r8, r4
 8000648:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800064a:	4b89      	ldr	r3, [pc, #548]	; (8000870 <_ftoa+0x32c>)
 800064c:	e7e7      	b.n	800061e <_ftoa+0xda>
 800064e:	2203      	movs	r2, #3
 8000650:	e7e8      	b.n	8000624 <_ftoa+0xe0>
    value = 0 - value;
 8000652:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8000654:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8000656:	2000      	movs	r0, #0
 8000658:	2100      	movs	r1, #0
 800065a:	f001 fcdb 	bl	8002014 <__aeabi_dsub>
 800065e:	901c      	str	r0, [sp, #112]	; 0x70
 8000660:	911d      	str	r1, [sp, #116]	; 0x74
    negative = true;
 8000662:	2301      	movs	r3, #1
 8000664:	4699      	mov	r9, r3
 8000666:	e7af      	b.n	80005c8 <_ftoa+0x84>
    buf[len++] = '0';
 8000668:	ab0a      	add	r3, sp, #40	; 0x28
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	551a      	strb	r2, [r3, r4]
    prec--;
 800066e:	3d01      	subs	r5, #1
    buf[len++] = '0';
 8000670:	3401      	adds	r4, #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8000672:	2c1f      	cmp	r4, #31
 8000674:	d801      	bhi.n	800067a <_ftoa+0x136>
 8000676:	2d09      	cmp	r5, #9
 8000678:	d8f6      	bhi.n	8000668 <_ftoa+0x124>
  int whole = (int)value;
 800067a:	981c      	ldr	r0, [sp, #112]	; 0x70
 800067c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800067e:	f002 f85b 	bl	8002738 <__aeabi_d2iz>
 8000682:	0007      	movs	r7, r0
  double tmp = (value - whole) * pow10[prec];
 8000684:	f002 f88e 	bl	80027a4 <__aeabi_i2d>
 8000688:	0002      	movs	r2, r0
 800068a:	000b      	movs	r3, r1
 800068c:	981c      	ldr	r0, [sp, #112]	; 0x70
 800068e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8000690:	f001 fcc0 	bl	8002014 <__aeabi_dsub>
 8000694:	00ea      	lsls	r2, r5, #3
 8000696:	4b77      	ldr	r3, [pc, #476]	; (8000874 <_ftoa+0x330>)
 8000698:	189b      	adds	r3, r3, r2
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	9208      	str	r2, [sp, #32]
 80006a0:	9309      	str	r3, [sp, #36]	; 0x24
 80006a2:	f001 fa4b 	bl	8001b3c <__aeabi_dmul>
  unsigned long frac = (unsigned long)tmp;
 80006a6:	9006      	str	r0, [sp, #24]
 80006a8:	9107      	str	r1, [sp, #28]
 80006aa:	f001 f90b 	bl	80018c4 <__aeabi_d2uiz>
 80006ae:	0006      	movs	r6, r0
  diff = tmp - frac;
 80006b0:	f002 f8a8 	bl	8002804 <__aeabi_ui2d>
 80006b4:	0002      	movs	r2, r0
 80006b6:	000b      	movs	r3, r1
 80006b8:	9806      	ldr	r0, [sp, #24]
 80006ba:	9907      	ldr	r1, [sp, #28]
 80006bc:	f001 fcaa 	bl	8002014 <__aeabi_dsub>
 80006c0:	9006      	str	r0, [sp, #24]
 80006c2:	9107      	str	r1, [sp, #28]
  if (diff > 0.5) {
 80006c4:	2200      	movs	r2, #0
 80006c6:	4b6c      	ldr	r3, [pc, #432]	; (8000878 <_ftoa+0x334>)
 80006c8:	f001 f8e8 	bl	800189c <__aeabi_dcmpgt>
 80006cc:	2800      	cmp	r0, #0
 80006ce:	d02e      	beq.n	800072e <_ftoa+0x1ea>
    ++frac;
 80006d0:	3601      	adds	r6, #1
    if (frac >= pow10[prec]) {
 80006d2:	0030      	movs	r0, r6
 80006d4:	f002 f896 	bl	8002804 <__aeabi_ui2d>
 80006d8:	0002      	movs	r2, r0
 80006da:	000b      	movs	r3, r1
 80006dc:	9808      	ldr	r0, [sp, #32]
 80006de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80006e0:	f001 f8d2 	bl	8001888 <__aeabi_dcmple>
 80006e4:	2800      	cmp	r0, #0
 80006e6:	d001      	beq.n	80006ec <_ftoa+0x1a8>
      ++whole;
 80006e8:	3701      	adds	r7, #1
      frac = 0;
 80006ea:	2600      	movs	r6, #0
  if (prec == 0U) {
 80006ec:	2d00      	cmp	r5, #0
 80006ee:	d12c      	bne.n	800074a <_ftoa+0x206>
    diff = value - (double)whole;
 80006f0:	0038      	movs	r0, r7
 80006f2:	f002 f857 	bl	80027a4 <__aeabi_i2d>
 80006f6:	0002      	movs	r2, r0
 80006f8:	000b      	movs	r3, r1
 80006fa:	981c      	ldr	r0, [sp, #112]	; 0x70
 80006fc:	991d      	ldr	r1, [sp, #116]	; 0x74
 80006fe:	f001 fc89 	bl	8002014 <__aeabi_dsub>
 8000702:	0005      	movs	r5, r0
 8000704:	000e      	movs	r6, r1
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8000706:	2200      	movs	r2, #0
 8000708:	4b5b      	ldr	r3, [pc, #364]	; (8000878 <_ftoa+0x334>)
 800070a:	f001 f8b3 	bl	8001874 <__aeabi_dcmplt>
 800070e:	2800      	cmp	r0, #0
 8000710:	d007      	beq.n	8000722 <_ftoa+0x1de>
 8000712:	2200      	movs	r2, #0
 8000714:	4b58      	ldr	r3, [pc, #352]	; (8000878 <_ftoa+0x334>)
 8000716:	0028      	movs	r0, r5
 8000718:	0031      	movs	r1, r6
 800071a:	f001 f8bf 	bl	800189c <__aeabi_dcmpgt>
 800071e:	2800      	cmp	r0, #0
 8000720:	d03e      	beq.n	80007a0 <_ftoa+0x25c>
 8000722:	07fb      	lsls	r3, r7, #31
 8000724:	d53c      	bpl.n	80007a0 <_ftoa+0x25c>
      ++whole;
 8000726:	3701      	adds	r7, #1
 8000728:	e03a      	b.n	80007a0 <_ftoa+0x25c>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800072a:	2506      	movs	r5, #6
 800072c:	e750      	b.n	80005d0 <_ftoa+0x8c>
  else if (diff < 0.5) {
 800072e:	2200      	movs	r2, #0
 8000730:	4b51      	ldr	r3, [pc, #324]	; (8000878 <_ftoa+0x334>)
 8000732:	9806      	ldr	r0, [sp, #24]
 8000734:	9907      	ldr	r1, [sp, #28]
 8000736:	f001 f89d 	bl	8001874 <__aeabi_dcmplt>
 800073a:	2800      	cmp	r0, #0
 800073c:	d1d6      	bne.n	80006ec <_ftoa+0x1a8>
  else if ((frac == 0U) || (frac & 1U)) {
 800073e:	2e00      	cmp	r6, #0
 8000740:	d001      	beq.n	8000746 <_ftoa+0x202>
 8000742:	07f3      	lsls	r3, r6, #31
 8000744:	d5d2      	bpl.n	80006ec <_ftoa+0x1a8>
    ++frac;
 8000746:	3601      	adds	r6, #1
 8000748:	e7d0      	b.n	80006ec <_ftoa+0x1a8>
 800074a:	46b8      	mov	r8, r7
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800074c:	2c1f      	cmp	r4, #31
 800074e:	d811      	bhi.n	8000774 <_ftoa+0x230>
      --count;
 8000750:	3d01      	subs	r5, #1
      buf[len++] = (char)(48U + (frac % 10U));
 8000752:	210a      	movs	r1, #10
 8000754:	0030      	movs	r0, r6
 8000756:	f000 ff87 	bl	8001668 <__aeabi_uidivmod>
 800075a:	1c67      	adds	r7, r4, #1
 800075c:	3130      	adds	r1, #48	; 0x30
 800075e:	ab0a      	add	r3, sp, #40	; 0x28
 8000760:	5519      	strb	r1, [r3, r4]
      if (!(frac /= 10U)) {
 8000762:	210a      	movs	r1, #10
 8000764:	0030      	movs	r0, r6
 8000766:	f000 fef9 	bl	800155c <__udivsi3>
 800076a:	2e09      	cmp	r6, #9
 800076c:	d90e      	bls.n	800078c <_ftoa+0x248>
 800076e:	0006      	movs	r6, r0
      buf[len++] = (char)(48U + (frac % 10U));
 8000770:	003c      	movs	r4, r7
 8000772:	e7eb      	b.n	800074c <_ftoa+0x208>
 8000774:	4647      	mov	r7, r8
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8000776:	2c1f      	cmp	r4, #31
 8000778:	d80c      	bhi.n	8000794 <_ftoa+0x250>
 800077a:	1e6b      	subs	r3, r5, #1
 800077c:	2d00      	cmp	r5, #0
 800077e:	d009      	beq.n	8000794 <_ftoa+0x250>
      buf[len++] = '0';
 8000780:	aa0a      	add	r2, sp, #40	; 0x28
 8000782:	2130      	movs	r1, #48	; 0x30
 8000784:	5511      	strb	r1, [r2, r4]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8000786:	001d      	movs	r5, r3
      buf[len++] = '0';
 8000788:	3401      	adds	r4, #1
 800078a:	e7f4      	b.n	8000776 <_ftoa+0x232>
 800078c:	003b      	movs	r3, r7
 800078e:	4647      	mov	r7, r8
      buf[len++] = (char)(48U + (frac % 10U));
 8000790:	001c      	movs	r4, r3
 8000792:	e7f0      	b.n	8000776 <_ftoa+0x232>
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8000794:	2c1f      	cmp	r4, #31
 8000796:	d803      	bhi.n	80007a0 <_ftoa+0x25c>
      buf[len++] = '.';
 8000798:	ab0a      	add	r3, sp, #40	; 0x28
 800079a:	222e      	movs	r2, #46	; 0x2e
 800079c:	551a      	strb	r2, [r3, r4]
 800079e:	3401      	adds	r4, #1
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80007a0:	2c1f      	cmp	r4, #31
 80007a2:	d810      	bhi.n	80007c6 <_ftoa+0x282>
    buf[len++] = (char)(48 + (whole % 10));
 80007a4:	210a      	movs	r1, #10
 80007a6:	0038      	movs	r0, r7
 80007a8:	f001 f848 	bl	800183c <__aeabi_idivmod>
 80007ac:	1c65      	adds	r5, r4, #1
 80007ae:	3130      	adds	r1, #48	; 0x30
 80007b0:	ab0a      	add	r3, sp, #40	; 0x28
 80007b2:	5519      	strb	r1, [r3, r4]
    if (!(whole /= 10)) {
 80007b4:	210a      	movs	r1, #10
 80007b6:	0038      	movs	r0, r7
 80007b8:	f000 ff5a 	bl	8001670 <__divsi3>
 80007bc:	1e07      	subs	r7, r0, #0
 80007be:	d001      	beq.n	80007c4 <_ftoa+0x280>
    buf[len++] = (char)(48 + (whole % 10));
 80007c0:	002c      	movs	r4, r5
 80007c2:	e7ed      	b.n	80007a0 <_ftoa+0x25c>
 80007c4:	002c      	movs	r4, r5
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80007c6:	2303      	movs	r3, #3
 80007c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80007ca:	4013      	ands	r3, r2
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d016      	beq.n	80007fe <_ftoa+0x2ba>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80007d0:	2c1f      	cmp	r4, #31
 80007d2:	d806      	bhi.n	80007e2 <_ftoa+0x29e>
    if (negative) {
 80007d4:	464b      	mov	r3, r9
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d027      	beq.n	800082a <_ftoa+0x2e6>
      buf[len++] = '-';
 80007da:	ab0a      	add	r3, sp, #40	; 0x28
 80007dc:	222d      	movs	r2, #45	; 0x2d
 80007de:	551a      	strb	r2, [r3, r4]
 80007e0:	3401      	adds	r4, #1
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80007e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80007e4:	9303      	str	r3, [sp, #12]
 80007e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80007e8:	9302      	str	r3, [sp, #8]
 80007ea:	9401      	str	r4, [sp, #4]
 80007ec:	ab0a      	add	r3, sp, #40	; 0x28
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	465b      	mov	r3, fp
 80007f2:	4652      	mov	r2, sl
 80007f4:	9905      	ldr	r1, [sp, #20]
 80007f6:	9804      	ldr	r0, [sp, #16]
 80007f8:	f7ff fd67 	bl	80002ca <_out_rev>
 80007fc:	e71e      	b.n	800063c <_ftoa+0xf8>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80007fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000800:	2b00      	cmp	r3, #0
 8000802:	d008      	beq.n	8000816 <_ftoa+0x2d2>
 8000804:	464b      	mov	r3, r9
 8000806:	2b00      	cmp	r3, #0
 8000808:	d102      	bne.n	8000810 <_ftoa+0x2cc>
 800080a:	330c      	adds	r3, #12
 800080c:	4213      	tst	r3, r2
 800080e:	d002      	beq.n	8000816 <_ftoa+0x2d2>
      width--;
 8000810:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000812:	3b01      	subs	r3, #1
 8000814:	931f      	str	r3, [sp, #124]	; 0x7c
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8000816:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8000818:	429c      	cmp	r4, r3
 800081a:	d2d9      	bcs.n	80007d0 <_ftoa+0x28c>
 800081c:	2c1f      	cmp	r4, #31
 800081e:	d8d7      	bhi.n	80007d0 <_ftoa+0x28c>
      buf[len++] = '0';
 8000820:	ab0a      	add	r3, sp, #40	; 0x28
 8000822:	2230      	movs	r2, #48	; 0x30
 8000824:	551a      	strb	r2, [r3, r4]
 8000826:	3401      	adds	r4, #1
 8000828:	e7f5      	b.n	8000816 <_ftoa+0x2d2>
    else if (flags & FLAGS_PLUS) {
 800082a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800082c:	075b      	lsls	r3, r3, #29
 800082e:	d504      	bpl.n	800083a <_ftoa+0x2f6>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8000830:	ab0a      	add	r3, sp, #40	; 0x28
 8000832:	222b      	movs	r2, #43	; 0x2b
 8000834:	551a      	strb	r2, [r3, r4]
 8000836:	3401      	adds	r4, #1
 8000838:	e7d3      	b.n	80007e2 <_ftoa+0x29e>
    else if (flags & FLAGS_SPACE) {
 800083a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800083c:	071b      	lsls	r3, r3, #28
 800083e:	d5d0      	bpl.n	80007e2 <_ftoa+0x29e>
      buf[len++] = ' ';
 8000840:	ab0a      	add	r3, sp, #40	; 0x28
 8000842:	2220      	movs	r2, #32
 8000844:	551a      	strb	r2, [r3, r4]
 8000846:	3401      	adds	r4, #1
 8000848:	e7cb      	b.n	80007e2 <_ftoa+0x29e>
    return 0U;
 800084a:	2000      	movs	r0, #0
 800084c:	e6f6      	b.n	800063c <_ftoa+0xf8>
 800084e:	2000      	movs	r0, #0
 8000850:	e6f4      	b.n	800063c <_ftoa+0xf8>
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	ffefffff 	.word	0xffefffff
 8000858:	7fefffff 	.word	0x7fefffff
 800085c:	41cdcd65 	.word	0x41cdcd65
 8000860:	c1cdcd65 	.word	0xc1cdcd65
 8000864:	080028b4 	.word	0x080028b4
 8000868:	080028b8 	.word	0x080028b8
 800086c:	080028ac 	.word	0x080028ac
 8000870:	080028a8 	.word	0x080028a8
 8000874:	08002a58 	.word	0x08002a58
 8000878:	3fe00000 	.word	0x3fe00000

0800087c <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT



int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800087c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800087e:	46de      	mov	lr, fp
 8000880:	4657      	mov	r7, sl
 8000882:	464e      	mov	r6, r9
 8000884:	4645      	mov	r5, r8
 8000886:	b5e0      	push	{r5, r6, r7, lr}
 8000888:	b08b      	sub	sp, #44	; 0x2c
 800088a:	0006      	movs	r6, r0
 800088c:	468a      	mov	sl, r1
 800088e:	4691      	mov	r9, r2
 8000890:	9309      	str	r3, [sp, #36]	; 0x24
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 8000892:	2900      	cmp	r1, #0
 8000894:	d100      	bne.n	8000898 <_vsnprintf+0x1c>
 8000896:	e269      	b.n	8000d6c <_vsnprintf+0x4f0>
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        format++;
        break;
 8000898:	2400      	movs	r4, #0
  while (*format)
 800089a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800089c:	7818      	ldrb	r0, [r3, #0]
 800089e:	2800      	cmp	r0, #0
 80008a0:	d100      	bne.n	80008a4 <_vsnprintf+0x28>
 80008a2:	e265      	b.n	8000d70 <_vsnprintf+0x4f4>
    if (*format != '%') {
 80008a4:	2825      	cmp	r0, #37	; 0x25
 80008a6:	d009      	beq.n	80008bc <_vsnprintf+0x40>
      out(*format, buffer, idx++, maxlen);
 80008a8:	1c65      	adds	r5, r4, #1
 80008aa:	464b      	mov	r3, r9
 80008ac:	0022      	movs	r2, r4
 80008ae:	4651      	mov	r1, sl
 80008b0:	47b0      	blx	r6
      format++;
 80008b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80008b4:	3301      	adds	r3, #1
 80008b6:	9309      	str	r3, [sp, #36]	; 0x24
      out(*format, buffer, idx++, maxlen);
 80008b8:	002c      	movs	r4, r5
      continue;
 80008ba:	e7ee      	b.n	800089a <_vsnprintf+0x1e>
      format++;
 80008bc:	3301      	adds	r3, #1
 80008be:	9309      	str	r3, [sp, #36]	; 0x24
    flags = 0U;
 80008c0:	2500      	movs	r5, #0
 80008c2:	e02d      	b.n	8000920 <_vsnprintf+0xa4>
  return (ch >= '0') && (ch <= '9');
 80008c4:	000b      	movs	r3, r1
 80008c6:	3b30      	subs	r3, #48	; 0x30
 80008c8:	b2db      	uxtb	r3, r3
    if (_is_digit(*format)) {
 80008ca:	2b09      	cmp	r3, #9
 80008cc:	d947      	bls.n	800095e <_vsnprintf+0xe2>
    else if (*format == '*') {
 80008ce:	292a      	cmp	r1, #42	; 0x2a
 80008d0:	d04a      	beq.n	8000968 <_vsnprintf+0xec>
    width = 0U;
 80008d2:	2300      	movs	r3, #0
 80008d4:	9306      	str	r3, [sp, #24]
    if (*format == '.') {
 80008d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80008d8:	781a      	ldrb	r2, [r3, #0]
 80008da:	2a2e      	cmp	r2, #46	; 0x2e
 80008dc:	d054      	beq.n	8000988 <_vsnprintf+0x10c>
    precision = 0U;
 80008de:	2300      	movs	r3, #0
 80008e0:	469b      	mov	fp, r3
    switch (*format) {
 80008e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80008e4:	7813      	ldrb	r3, [r2, #0]
 80008e6:	2b6c      	cmp	r3, #108	; 0x6c
 80008e8:	d078      	beq.n	80009dc <_vsnprintf+0x160>
 80008ea:	d86f      	bhi.n	80009cc <_vsnprintf+0x150>
 80008ec:	2b68      	cmp	r3, #104	; 0x68
 80008ee:	d100      	bne.n	80008f2 <_vsnprintf+0x76>
 80008f0:	e084      	b.n	80009fc <_vsnprintf+0x180>
 80008f2:	2b6a      	cmp	r3, #106	; 0x6a
 80008f4:	d104      	bne.n	8000900 <_vsnprintf+0x84>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80008f6:	2380      	movs	r3, #128	; 0x80
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	431d      	orrs	r5, r3
        format++;
 80008fc:	3201      	adds	r2, #1
 80008fe:	9209      	str	r2, [sp, #36]	; 0x24
    switch (*format) {
 8000900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000902:	7818      	ldrb	r0, [r3, #0]
 8000904:	0003      	movs	r3, r0
 8000906:	3b25      	subs	r3, #37	; 0x25
 8000908:	b2da      	uxtb	r2, r3
 800090a:	2a53      	cmp	r2, #83	; 0x53
 800090c:	d900      	bls.n	8000910 <_vsnprintf+0x94>
 800090e:	e223      	b.n	8000d58 <_vsnprintf+0x4dc>
 8000910:	0093      	lsls	r3, r2, #2
 8000912:	4acb      	ldr	r2, [pc, #812]	; (8000c40 <_vsnprintf+0x3c4>)
 8000914:	58d3      	ldr	r3, [r2, r3]
 8000916:	469f      	mov	pc, r3
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8000918:	2301      	movs	r3, #1
 800091a:	431d      	orrs	r5, r3
 800091c:	3201      	adds	r2, #1
 800091e:	9209      	str	r2, [sp, #36]	; 0x24
      switch (*format) {
 8000920:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000922:	7811      	ldrb	r1, [r2, #0]
 8000924:	000b      	movs	r3, r1
 8000926:	3b20      	subs	r3, #32
 8000928:	b2d8      	uxtb	r0, r3
 800092a:	2810      	cmp	r0, #16
 800092c:	d8ca      	bhi.n	80008c4 <_vsnprintf+0x48>
 800092e:	0083      	lsls	r3, r0, #2
 8000930:	48c4      	ldr	r0, [pc, #784]	; (8000c44 <_vsnprintf+0x3c8>)
 8000932:	58c3      	ldr	r3, [r0, r3]
 8000934:	469f      	mov	pc, r3
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8000936:	2302      	movs	r3, #2
 8000938:	431d      	orrs	r5, r3
 800093a:	3201      	adds	r2, #1
 800093c:	9209      	str	r2, [sp, #36]	; 0x24
    } while (n);
 800093e:	e7ef      	b.n	8000920 <_vsnprintf+0xa4>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8000940:	2304      	movs	r3, #4
 8000942:	431d      	orrs	r5, r3
 8000944:	3201      	adds	r2, #1
 8000946:	9209      	str	r2, [sp, #36]	; 0x24
    } while (n);
 8000948:	e7ea      	b.n	8000920 <_vsnprintf+0xa4>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800094a:	2308      	movs	r3, #8
 800094c:	431d      	orrs	r5, r3
 800094e:	3201      	adds	r2, #1
 8000950:	9209      	str	r2, [sp, #36]	; 0x24
    } while (n);
 8000952:	e7e5      	b.n	8000920 <_vsnprintf+0xa4>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8000954:	2310      	movs	r3, #16
 8000956:	431d      	orrs	r5, r3
 8000958:	3201      	adds	r2, #1
 800095a:	9209      	str	r2, [sp, #36]	; 0x24
    } while (n);
 800095c:	e7e0      	b.n	8000920 <_vsnprintf+0xa4>
      width = _atoi(&format);
 800095e:	a809      	add	r0, sp, #36	; 0x24
 8000960:	f7ff fca1 	bl	80002a6 <_atoi>
 8000964:	9006      	str	r0, [sp, #24]
 8000966:	e7b6      	b.n	80008d6 <_vsnprintf+0x5a>
      const int w = va_arg(va, int);
 8000968:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800096a:	1d1a      	adds	r2, r3, #4
 800096c:	9214      	str	r2, [sp, #80]	; 0x50
 800096e:	6818      	ldr	r0, [r3, #0]
      if (w < 0) {
 8000970:	2800      	cmp	r0, #0
 8000972:	db04      	blt.n	800097e <_vsnprintf+0x102>
        width = (unsigned int)w;
 8000974:	9006      	str	r0, [sp, #24]
      format++;
 8000976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000978:	3301      	adds	r3, #1
 800097a:	9309      	str	r3, [sp, #36]	; 0x24
 800097c:	e7ab      	b.n	80008d6 <_vsnprintf+0x5a>
        flags |= FLAGS_LEFT;    // reverse padding
 800097e:	2302      	movs	r3, #2
 8000980:	431d      	orrs	r5, r3
        width = (unsigned int)-w;
 8000982:	4243      	negs	r3, r0
 8000984:	9306      	str	r3, [sp, #24]
 8000986:	e7f6      	b.n	8000976 <_vsnprintf+0xfa>
      flags |= FLAGS_PRECISION;
 8000988:	2280      	movs	r2, #128	; 0x80
 800098a:	00d2      	lsls	r2, r2, #3
 800098c:	4315      	orrs	r5, r2
      format++;
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	9209      	str	r2, [sp, #36]	; 0x24
      if (_is_digit(*format)) {
 8000992:	785a      	ldrb	r2, [r3, #1]
  return (ch >= '0') && (ch <= '9');
 8000994:	0013      	movs	r3, r2
 8000996:	3b30      	subs	r3, #48	; 0x30
 8000998:	b2db      	uxtb	r3, r3
      if (_is_digit(*format)) {
 800099a:	2b09      	cmp	r3, #9
 800099c:	d904      	bls.n	80009a8 <_vsnprintf+0x12c>
      else if (*format == '*') {
 800099e:	2a2a      	cmp	r2, #42	; 0x2a
 80009a0:	d007      	beq.n	80009b2 <_vsnprintf+0x136>
    precision = 0U;
 80009a2:	2300      	movs	r3, #0
 80009a4:	469b      	mov	fp, r3
 80009a6:	e79c      	b.n	80008e2 <_vsnprintf+0x66>
        precision = _atoi(&format);
 80009a8:	a809      	add	r0, sp, #36	; 0x24
 80009aa:	f7ff fc7c 	bl	80002a6 <_atoi>
 80009ae:	4683      	mov	fp, r0
 80009b0:	e797      	b.n	80008e2 <_vsnprintf+0x66>
        const int prec = (int)va_arg(va, int);
 80009b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80009b4:	1d1a      	adds	r2, r3, #4
 80009b6:	9214      	str	r2, [sp, #80]	; 0x50
 80009b8:	6818      	ldr	r0, [r3, #0]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80009ba:	2800      	cmp	r0, #0
 80009bc:	db04      	blt.n	80009c8 <_vsnprintf+0x14c>
 80009be:	4683      	mov	fp, r0
        format++;
 80009c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80009c2:	3301      	adds	r3, #1
 80009c4:	9309      	str	r3, [sp, #36]	; 0x24
 80009c6:	e78c      	b.n	80008e2 <_vsnprintf+0x66>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80009c8:	2000      	movs	r0, #0
 80009ca:	e7f8      	b.n	80009be <_vsnprintf+0x142>
    switch (*format) {
 80009cc:	2b7a      	cmp	r3, #122	; 0x7a
 80009ce:	d197      	bne.n	8000900 <_vsnprintf+0x84>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	431d      	orrs	r5, r3
        format++;
 80009d6:	3201      	adds	r2, #1
 80009d8:	9209      	str	r2, [sp, #36]	; 0x24
        break;
 80009da:	e791      	b.n	8000900 <_vsnprintf+0x84>
        flags |= FLAGS_LONG;
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	432b      	orrs	r3, r5
        format++;
 80009e2:	1c51      	adds	r1, r2, #1
 80009e4:	9109      	str	r1, [sp, #36]	; 0x24
        if (*format == 'l') {
 80009e6:	7852      	ldrb	r2, [r2, #1]
 80009e8:	2a6c      	cmp	r2, #108	; 0x6c
 80009ea:	d001      	beq.n	80009f0 <_vsnprintf+0x174>
        flags |= FLAGS_LONG;
 80009ec:	001d      	movs	r5, r3
 80009ee:	e787      	b.n	8000900 <_vsnprintf+0x84>
          flags |= FLAGS_LONG_LONG;
 80009f0:	23c0      	movs	r3, #192	; 0xc0
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	431d      	orrs	r5, r3
          format++;
 80009f6:	3101      	adds	r1, #1
 80009f8:	9109      	str	r1, [sp, #36]	; 0x24
 80009fa:	e781      	b.n	8000900 <_vsnprintf+0x84>
        flags |= FLAGS_SHORT;
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	432b      	orrs	r3, r5
        format++;
 8000a00:	1c51      	adds	r1, r2, #1
 8000a02:	9109      	str	r1, [sp, #36]	; 0x24
        if (*format == 'h') {
 8000a04:	7852      	ldrb	r2, [r2, #1]
 8000a06:	2a68      	cmp	r2, #104	; 0x68
 8000a08:	d001      	beq.n	8000a0e <_vsnprintf+0x192>
        flags |= FLAGS_SHORT;
 8000a0a:	001d      	movs	r5, r3
 8000a0c:	e778      	b.n	8000900 <_vsnprintf+0x84>
          flags |= FLAGS_CHAR;
 8000a0e:	23c0      	movs	r3, #192	; 0xc0
 8000a10:	431d      	orrs	r5, r3
          format++;
 8000a12:	3101      	adds	r1, #1
 8000a14:	9109      	str	r1, [sp, #36]	; 0x24
 8000a16:	e773      	b.n	8000900 <_vsnprintf+0x84>
        if (*format == 'x' || *format == 'X') {
 8000a18:	2878      	cmp	r0, #120	; 0x78
 8000a1a:	d009      	beq.n	8000a30 <_vsnprintf+0x1b4>
 8000a1c:	2858      	cmp	r0, #88	; 0x58
 8000a1e:	d035      	beq.n	8000a8c <_vsnprintf+0x210>
        else if (*format == 'o') {
 8000a20:	286f      	cmp	r0, #111	; 0x6f
 8000a22:	d035      	beq.n	8000a90 <_vsnprintf+0x214>
        else if (*format == 'b') {
 8000a24:	2862      	cmp	r0, #98	; 0x62
 8000a26:	d035      	beq.n	8000a94 <_vsnprintf+0x218>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8000a28:	2310      	movs	r3, #16
 8000a2a:	439d      	bics	r5, r3
          base = 10U;
 8000a2c:	3b06      	subs	r3, #6
 8000a2e:	e000      	b.n	8000a32 <_vsnprintf+0x1b6>
          base = 16U;
 8000a30:	2310      	movs	r3, #16
        if (*format == 'X') {
 8000a32:	2858      	cmp	r0, #88	; 0x58
 8000a34:	d030      	beq.n	8000a98 <_vsnprintf+0x21c>
        if ((*format != 'i') && (*format != 'd')) {
 8000a36:	2869      	cmp	r0, #105	; 0x69
 8000a38:	d003      	beq.n	8000a42 <_vsnprintf+0x1c6>
 8000a3a:	2864      	cmp	r0, #100	; 0x64
 8000a3c:	d001      	beq.n	8000a42 <_vsnprintf+0x1c6>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8000a3e:	220c      	movs	r2, #12
 8000a40:	4395      	bics	r5, r2
        if (flags & FLAGS_PRECISION) {
 8000a42:	056a      	lsls	r2, r5, #21
 8000a44:	d501      	bpl.n	8000a4a <_vsnprintf+0x1ce>
          flags &= ~FLAGS_ZEROPAD;
 8000a46:	2201      	movs	r2, #1
 8000a48:	4395      	bics	r5, r2
        if ((*format == 'i') || (*format == 'd')) {
 8000a4a:	2869      	cmp	r0, #105	; 0x69
 8000a4c:	d027      	beq.n	8000a9e <_vsnprintf+0x222>
 8000a4e:	2864      	cmp	r0, #100	; 0x64
 8000a50:	d025      	beq.n	8000a9e <_vsnprintf+0x222>
          if (flags & FLAGS_LONG_LONG) {
 8000a52:	05aa      	lsls	r2, r5, #22
 8000a54:	d442      	bmi.n	8000adc <_vsnprintf+0x260>
          else if (flags & FLAGS_LONG) {
 8000a56:	05ea      	lsls	r2, r5, #23
 8000a58:	d469      	bmi.n	8000b2e <_vsnprintf+0x2b2>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8000a5a:	066a      	lsls	r2, r5, #25
 8000a5c:	d57c      	bpl.n	8000b58 <_vsnprintf+0x2dc>
 8000a5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000a60:	1d11      	adds	r1, r2, #4
 8000a62:	9114      	str	r1, [sp, #80]	; 0x50
 8000a64:	6811      	ldr	r1, [r2, #0]
 8000a66:	22ff      	movs	r2, #255	; 0xff
 8000a68:	400a      	ands	r2, r1
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8000a6a:	9505      	str	r5, [sp, #20]
 8000a6c:	9906      	ldr	r1, [sp, #24]
 8000a6e:	9104      	str	r1, [sp, #16]
 8000a70:	4659      	mov	r1, fp
 8000a72:	9103      	str	r1, [sp, #12]
 8000a74:	9302      	str	r3, [sp, #8]
 8000a76:	2300      	movs	r3, #0
 8000a78:	9301      	str	r3, [sp, #4]
 8000a7a:	9200      	str	r2, [sp, #0]
 8000a7c:	464b      	mov	r3, r9
 8000a7e:	0022      	movs	r2, r4
 8000a80:	4651      	mov	r1, sl
 8000a82:	0030      	movs	r0, r6
 8000a84:	f7ff fd00 	bl	8000488 <_ntoa_long>
 8000a88:	0004      	movs	r4, r0
 8000a8a:	e027      	b.n	8000adc <_vsnprintf+0x260>
          base = 16U;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	e7d0      	b.n	8000a32 <_vsnprintf+0x1b6>
          base =  8U;
 8000a90:	2308      	movs	r3, #8
 8000a92:	e7ce      	b.n	8000a32 <_vsnprintf+0x1b6>
          base =  2U;
 8000a94:	2302      	movs	r3, #2
 8000a96:	e7cc      	b.n	8000a32 <_vsnprintf+0x1b6>
          flags |= FLAGS_UPPERCASE;
 8000a98:	2220      	movs	r2, #32
 8000a9a:	4315      	orrs	r5, r2
 8000a9c:	e7cb      	b.n	8000a36 <_vsnprintf+0x1ba>
          if (flags & FLAGS_LONG_LONG) {
 8000a9e:	05aa      	lsls	r2, r5, #22
 8000aa0:	d41c      	bmi.n	8000adc <_vsnprintf+0x260>
          else if (flags & FLAGS_LONG) {
 8000aa2:	05ea      	lsls	r2, r5, #23
 8000aa4:	d41e      	bmi.n	8000ae4 <_vsnprintf+0x268>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8000aa6:	066a      	lsls	r2, r5, #25
 8000aa8:	d534      	bpl.n	8000b14 <_vsnprintf+0x298>
 8000aaa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000aac:	1d11      	adds	r1, r2, #4
 8000aae:	9114      	str	r1, [sp, #80]	; 0x50
 8000ab0:	6811      	ldr	r1, [r2, #0]
 8000ab2:	22ff      	movs	r2, #255	; 0xff
 8000ab4:	400a      	ands	r2, r1
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8000ab6:	17d0      	asrs	r0, r2, #31
 8000ab8:	1811      	adds	r1, r2, r0
 8000aba:	4041      	eors	r1, r0
 8000abc:	9505      	str	r5, [sp, #20]
 8000abe:	9806      	ldr	r0, [sp, #24]
 8000ac0:	9004      	str	r0, [sp, #16]
 8000ac2:	4658      	mov	r0, fp
 8000ac4:	9003      	str	r0, [sp, #12]
 8000ac6:	9302      	str	r3, [sp, #8]
 8000ac8:	0fd2      	lsrs	r2, r2, #31
 8000aca:	9201      	str	r2, [sp, #4]
 8000acc:	9100      	str	r1, [sp, #0]
 8000ace:	464b      	mov	r3, r9
 8000ad0:	0022      	movs	r2, r4
 8000ad2:	4651      	mov	r1, sl
 8000ad4:	0030      	movs	r0, r6
 8000ad6:	f7ff fcd7 	bl	8000488 <_ntoa_long>
 8000ada:	0004      	movs	r4, r0
        format++;
 8000adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ade:	3301      	adds	r3, #1
 8000ae0:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8000ae2:	e6da      	b.n	800089a <_vsnprintf+0x1e>
            const long value = va_arg(va, long);
 8000ae4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000ae6:	1d11      	adds	r1, r2, #4
 8000ae8:	9114      	str	r1, [sp, #80]	; 0x50
 8000aea:	6812      	ldr	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8000aec:	17d0      	asrs	r0, r2, #31
 8000aee:	1811      	adds	r1, r2, r0
 8000af0:	4041      	eors	r1, r0
 8000af2:	9505      	str	r5, [sp, #20]
 8000af4:	9806      	ldr	r0, [sp, #24]
 8000af6:	9004      	str	r0, [sp, #16]
 8000af8:	4658      	mov	r0, fp
 8000afa:	9003      	str	r0, [sp, #12]
 8000afc:	9302      	str	r3, [sp, #8]
 8000afe:	0fd2      	lsrs	r2, r2, #31
 8000b00:	9201      	str	r2, [sp, #4]
 8000b02:	9100      	str	r1, [sp, #0]
 8000b04:	464b      	mov	r3, r9
 8000b06:	0022      	movs	r2, r4
 8000b08:	4651      	mov	r1, sl
 8000b0a:	0030      	movs	r0, r6
 8000b0c:	f7ff fcbc 	bl	8000488 <_ntoa_long>
 8000b10:	0004      	movs	r4, r0
 8000b12:	e7e3      	b.n	8000adc <_vsnprintf+0x260>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8000b14:	062a      	lsls	r2, r5, #24
 8000b16:	d505      	bpl.n	8000b24 <_vsnprintf+0x2a8>
 8000b18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000b1a:	1d11      	adds	r1, r2, #4
 8000b1c:	9114      	str	r1, [sp, #80]	; 0x50
 8000b1e:	2100      	movs	r1, #0
 8000b20:	5e52      	ldrsh	r2, [r2, r1]
 8000b22:	e7c8      	b.n	8000ab6 <_vsnprintf+0x23a>
 8000b24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000b26:	1d11      	adds	r1, r2, #4
 8000b28:	9114      	str	r1, [sp, #80]	; 0x50
 8000b2a:	6812      	ldr	r2, [r2, #0]
 8000b2c:	e7c3      	b.n	8000ab6 <_vsnprintf+0x23a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8000b2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000b30:	1d11      	adds	r1, r2, #4
 8000b32:	9114      	str	r1, [sp, #80]	; 0x50
 8000b34:	9505      	str	r5, [sp, #20]
 8000b36:	9906      	ldr	r1, [sp, #24]
 8000b38:	9104      	str	r1, [sp, #16]
 8000b3a:	4659      	mov	r1, fp
 8000b3c:	9103      	str	r1, [sp, #12]
 8000b3e:	9302      	str	r3, [sp, #8]
 8000b40:	2300      	movs	r3, #0
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	6813      	ldr	r3, [r2, #0]
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	464b      	mov	r3, r9
 8000b4a:	0022      	movs	r2, r4
 8000b4c:	4651      	mov	r1, sl
 8000b4e:	0030      	movs	r0, r6
 8000b50:	f7ff fc9a 	bl	8000488 <_ntoa_long>
 8000b54:	0004      	movs	r4, r0
 8000b56:	e7c1      	b.n	8000adc <_vsnprintf+0x260>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8000b58:	062a      	lsls	r2, r5, #24
 8000b5a:	d506      	bpl.n	8000b6a <_vsnprintf+0x2ee>
 8000b5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000b5e:	1d11      	adds	r1, r2, #4
 8000b60:	9114      	str	r1, [sp, #80]	; 0x50
 8000b62:	6812      	ldr	r2, [r2, #0]
 8000b64:	0412      	lsls	r2, r2, #16
 8000b66:	0c12      	lsrs	r2, r2, #16
 8000b68:	e77f      	b.n	8000a6a <_vsnprintf+0x1ee>
 8000b6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000b6c:	1d11      	adds	r1, r2, #4
 8000b6e:	9114      	str	r1, [sp, #80]	; 0x50
 8000b70:	6812      	ldr	r2, [r2, #0]
 8000b72:	e77a      	b.n	8000a6a <_vsnprintf+0x1ee>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8000b74:	2846      	cmp	r0, #70	; 0x46
 8000b76:	d01a      	beq.n	8000bae <_vsnprintf+0x332>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8000b78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000b7a:	3307      	adds	r3, #7
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	4393      	bics	r3, r2
 8000b80:	001a      	movs	r2, r3
 8000b82:	3208      	adds	r2, #8
 8000b84:	9214      	str	r2, [sp, #80]	; 0x50
 8000b86:	9504      	str	r5, [sp, #16]
 8000b88:	9a06      	ldr	r2, [sp, #24]
 8000b8a:	9203      	str	r2, [sp, #12]
 8000b8c:	465a      	mov	r2, fp
 8000b8e:	9202      	str	r2, [sp, #8]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	9200      	str	r2, [sp, #0]
 8000b96:	9301      	str	r3, [sp, #4]
 8000b98:	464b      	mov	r3, r9
 8000b9a:	0022      	movs	r2, r4
 8000b9c:	4651      	mov	r1, sl
 8000b9e:	0030      	movs	r0, r6
 8000ba0:	f7ff fcd0 	bl	8000544 <_ftoa>
 8000ba4:	0004      	movs	r4, r0
        format++;
 8000ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ba8:	3301      	adds	r3, #1
 8000baa:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8000bac:	e675      	b.n	800089a <_vsnprintf+0x1e>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8000bae:	2320      	movs	r3, #32
 8000bb0:	431d      	orrs	r5, r3
 8000bb2:	e7e1      	b.n	8000b78 <_vsnprintf+0x2fc>
        if (!(flags & FLAGS_LEFT)) {
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	001a      	movs	r2, r3
 8000bb8:	402a      	ands	r2, r5
 8000bba:	4693      	mov	fp, r2
 8000bbc:	422b      	tst	r3, r5
 8000bbe:	d01e      	beq.n	8000bfe <_vsnprintf+0x382>
        unsigned int l = 1U;
 8000bc0:	2501      	movs	r5, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8000bc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000bc4:	1d1a      	adds	r2, r3, #4
 8000bc6:	9214      	str	r2, [sp, #80]	; 0x50
 8000bc8:	1c62      	adds	r2, r4, #1
 8000bca:	4690      	mov	r8, r2
 8000bcc:	7818      	ldrb	r0, [r3, #0]
 8000bce:	464b      	mov	r3, r9
 8000bd0:	0022      	movs	r2, r4
 8000bd2:	4651      	mov	r1, sl
 8000bd4:	47b0      	blx	r6
        if (flags & FLAGS_LEFT) {
 8000bd6:	465b      	mov	r3, fp
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d114      	bne.n	8000c06 <_vsnprintf+0x38a>
        format++;
 8000bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000bde:	3301      	adds	r3, #1
 8000be0:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8000be2:	4644      	mov	r4, r8
 8000be4:	e659      	b.n	800089a <_vsnprintf+0x1e>
            out(' ', buffer, idx++, maxlen);
 8000be6:	1c57      	adds	r7, r2, #1
 8000be8:	464b      	mov	r3, r9
 8000bea:	4651      	mov	r1, sl
 8000bec:	2020      	movs	r0, #32
 8000bee:	47b0      	blx	r6
          while (l++ < width) {
 8000bf0:	002b      	movs	r3, r5
            out(' ', buffer, idx++, maxlen);
 8000bf2:	003a      	movs	r2, r7
          while (l++ < width) {
 8000bf4:	1c5d      	adds	r5, r3, #1
 8000bf6:	429c      	cmp	r4, r3
 8000bf8:	d8f5      	bhi.n	8000be6 <_vsnprintf+0x36a>
 8000bfa:	0014      	movs	r4, r2
 8000bfc:	e7e1      	b.n	8000bc2 <_vsnprintf+0x346>
        unsigned int l = 1U;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	0022      	movs	r2, r4
 8000c02:	9c06      	ldr	r4, [sp, #24]
 8000c04:	e7f6      	b.n	8000bf4 <_vsnprintf+0x378>
 8000c06:	4642      	mov	r2, r8
 8000c08:	46b0      	mov	r8, r6
 8000c0a:	9e06      	ldr	r6, [sp, #24]
 8000c0c:	e006      	b.n	8000c1c <_vsnprintf+0x3a0>
            out(' ', buffer, idx++, maxlen);
 8000c0e:	1c57      	adds	r7, r2, #1
 8000c10:	464b      	mov	r3, r9
 8000c12:	4651      	mov	r1, sl
 8000c14:	2020      	movs	r0, #32
 8000c16:	47c0      	blx	r8
          while (l++ < width) {
 8000c18:	0025      	movs	r5, r4
            out(' ', buffer, idx++, maxlen);
 8000c1a:	003a      	movs	r2, r7
          while (l++ < width) {
 8000c1c:	1c6c      	adds	r4, r5, #1
 8000c1e:	42ae      	cmp	r6, r5
 8000c20:	d8f5      	bhi.n	8000c0e <_vsnprintf+0x392>
 8000c22:	4646      	mov	r6, r8
 8000c24:	4690      	mov	r8, r2
 8000c26:	e7d9      	b.n	8000bdc <_vsnprintf+0x360>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8000c28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000c2a:	1d1a      	adds	r2, r3, #4
 8000c2c:	9214      	str	r2, [sp, #80]	; 0x50
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4698      	mov	r8, r3
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8000c32:	465b      	mov	r3, fp
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d100      	bne.n	8000c3a <_vsnprintf+0x3be>
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	4647      	mov	r7, r8
 8000c3c:	e006      	b.n	8000c4c <_vsnprintf+0x3d0>
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	080028c0 	.word	0x080028c0
 8000c44:	08002a10 	.word	0x08002a10
  for (s = str; *s && maxsize--; ++s);
 8000c48:	3701      	adds	r7, #1
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	783a      	ldrb	r2, [r7, #0]
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	d002      	beq.n	8000c58 <_vsnprintf+0x3dc>
 8000c52:	1e5a      	subs	r2, r3, #1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f7      	bne.n	8000c48 <_vsnprintf+0x3cc>
  return (unsigned int)(s - str);
 8000c58:	4643      	mov	r3, r8
 8000c5a:	1afa      	subs	r2, r7, r3
 8000c5c:	9207      	str	r2, [sp, #28]
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	002f      	movs	r7, r5
 8000c64:	401f      	ands	r7, r3
 8000c66:	421d      	tst	r5, r3
 8000c68:	d003      	beq.n	8000c72 <_vsnprintf+0x3f6>
          l = (l < precision ? l : precision);
 8000c6a:	455a      	cmp	r2, fp
 8000c6c:	d901      	bls.n	8000c72 <_vsnprintf+0x3f6>
 8000c6e:	465b      	mov	r3, fp
 8000c70:	9307      	str	r3, [sp, #28]
        }
        if (!(flags & FLAGS_LEFT)) {
 8000c72:	2302      	movs	r3, #2
 8000c74:	001a      	movs	r2, r3
 8000c76:	402a      	ands	r2, r5
 8000c78:	9208      	str	r2, [sp, #32]
 8000c7a:	422b      	tst	r3, r5
 8000c7c:	d005      	beq.n	8000c8a <_vsnprintf+0x40e>
 8000c7e:	0022      	movs	r2, r4
 8000c80:	465c      	mov	r4, fp
 8000c82:	4645      	mov	r5, r8
 8000c84:	46b0      	mov	r8, r6
 8000c86:	003e      	movs	r6, r7
 8000c88:	e020      	b.n	8000ccc <_vsnprintf+0x450>
 8000c8a:	0022      	movs	r2, r4
 8000c8c:	9b07      	ldr	r3, [sp, #28]
 8000c8e:	4651      	mov	r1, sl
 8000c90:	46ba      	mov	sl, r7
 8000c92:	000f      	movs	r7, r1
 8000c94:	e006      	b.n	8000ca4 <_vsnprintf+0x428>
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
 8000c96:	1c54      	adds	r4, r2, #1
 8000c98:	464b      	mov	r3, r9
 8000c9a:	0039      	movs	r1, r7
 8000c9c:	2020      	movs	r0, #32
 8000c9e:	47b0      	blx	r6
          while (l++ < width) {
 8000ca0:	002b      	movs	r3, r5
            out(' ', buffer, idx++, maxlen);
 8000ca2:	0022      	movs	r2, r4
          while (l++ < width) {
 8000ca4:	1c5d      	adds	r5, r3, #1
 8000ca6:	9906      	ldr	r1, [sp, #24]
 8000ca8:	4299      	cmp	r1, r3
 8000caa:	d8f4      	bhi.n	8000c96 <_vsnprintf+0x41a>
 8000cac:	003b      	movs	r3, r7
 8000cae:	4657      	mov	r7, sl
 8000cb0:	469a      	mov	sl, r3
 8000cb2:	9507      	str	r5, [sp, #28]
 8000cb4:	465c      	mov	r4, fp
 8000cb6:	4645      	mov	r5, r8
 8000cb8:	46b0      	mov	r8, r6
 8000cba:	003e      	movs	r6, r7
 8000cbc:	e006      	b.n	8000ccc <_vsnprintf+0x450>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8000cbe:	001c      	movs	r4, r3
          out(*(p++), buffer, idx++, maxlen);
 8000cc0:	3501      	adds	r5, #1
 8000cc2:	1c57      	adds	r7, r2, #1
 8000cc4:	464b      	mov	r3, r9
 8000cc6:	4651      	mov	r1, sl
 8000cc8:	47c0      	blx	r8
 8000cca:	003a      	movs	r2, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8000ccc:	7828      	ldrb	r0, [r5, #0]
 8000cce:	2800      	cmp	r0, #0
 8000cd0:	d004      	beq.n	8000cdc <_vsnprintf+0x460>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0f4      	beq.n	8000cc0 <_vsnprintf+0x444>
 8000cd6:	1e63      	subs	r3, r4, #1
 8000cd8:	2c00      	cmp	r4, #0
 8000cda:	d1f0      	bne.n	8000cbe <_vsnprintf+0x442>
 8000cdc:	0014      	movs	r4, r2
 8000cde:	4646      	mov	r6, r8
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8000ce0:	9b08      	ldr	r3, [sp, #32]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d103      	bne.n	8000cee <_vsnprintf+0x472>
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        format++;
 8000ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ce8:	3301      	adds	r3, #1
 8000cea:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8000cec:	e5d5      	b.n	800089a <_vsnprintf+0x1e>
 8000cee:	9f06      	ldr	r7, [sp, #24]
 8000cf0:	9b07      	ldr	r3, [sp, #28]
 8000cf2:	e006      	b.n	8000d02 <_vsnprintf+0x486>
            out(' ', buffer, idx++, maxlen);
 8000cf4:	1c55      	adds	r5, r2, #1
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	4651      	mov	r1, sl
 8000cfa:	2020      	movs	r0, #32
 8000cfc:	47b0      	blx	r6
          while (l++ < width) {
 8000cfe:	0023      	movs	r3, r4
            out(' ', buffer, idx++, maxlen);
 8000d00:	002a      	movs	r2, r5
          while (l++ < width) {
 8000d02:	1c5c      	adds	r4, r3, #1
 8000d04:	429f      	cmp	r7, r3
 8000d06:	d8f5      	bhi.n	8000cf4 <_vsnprintf+0x478>
 8000d08:	0014      	movs	r4, r2
 8000d0a:	e7ec      	b.n	8000ce6 <_vsnprintf+0x46a>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8000d0c:	2321      	movs	r3, #33	; 0x21
 8000d0e:	431d      	orrs	r5, r3
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8000d10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8000d12:	1d1a      	adds	r2, r3, #4
 8000d14:	9214      	str	r2, [sp, #80]	; 0x50
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	9505      	str	r5, [sp, #20]
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	9304      	str	r3, [sp, #16]
 8000d20:	465b      	mov	r3, fp
 8000d22:	9303      	str	r3, [sp, #12]
 8000d24:	2310      	movs	r3, #16
 8000d26:	9302      	str	r3, [sp, #8]
 8000d28:	2300      	movs	r3, #0
 8000d2a:	9301      	str	r3, [sp, #4]
 8000d2c:	464b      	mov	r3, r9
 8000d2e:	0022      	movs	r2, r4
 8000d30:	4651      	mov	r1, sl
 8000d32:	0030      	movs	r0, r6
 8000d34:	f7ff fba8 	bl	8000488 <_ntoa_long>
 8000d38:	0004      	movs	r4, r0
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8000d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8000d40:	e5ab      	b.n	800089a <_vsnprintf+0x1e>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8000d42:	1c65      	adds	r5, r4, #1
 8000d44:	464b      	mov	r3, r9
 8000d46:	0022      	movs	r2, r4
 8000d48:	4651      	mov	r1, sl
 8000d4a:	2025      	movs	r0, #37	; 0x25
 8000d4c:	47b0      	blx	r6
        format++;
 8000d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d50:	3301      	adds	r3, #1
 8000d52:	9309      	str	r3, [sp, #36]	; 0x24
        out('%', buffer, idx++, maxlen);
 8000d54:	002c      	movs	r4, r5
        break;
 8000d56:	e5a0      	b.n	800089a <_vsnprintf+0x1e>

      default :
        out(*format, buffer, idx++, maxlen);
 8000d58:	1c65      	adds	r5, r4, #1
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	0022      	movs	r2, r4
 8000d5e:	4651      	mov	r1, sl
 8000d60:	47b0      	blx	r6
        format++;
 8000d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d64:	3301      	adds	r3, #1
 8000d66:	9309      	str	r3, [sp, #36]	; 0x24
        out(*format, buffer, idx++, maxlen);
 8000d68:	002c      	movs	r4, r5
        break;
 8000d6a:	e596      	b.n	800089a <_vsnprintf+0x1e>
    out = _out_null;
 8000d6c:	4e04      	ldr	r6, [pc, #16]	; (8000d80 <_vsnprintf+0x504>)
 8000d6e:	e593      	b.n	8000898 <_vsnprintf+0x1c>
  // termination
  // out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
}
 8000d70:	0020      	movs	r0, r4
 8000d72:	b00b      	add	sp, #44	; 0x2c
 8000d74:	bcf0      	pop	{r4, r5, r6, r7}
 8000d76:	46bb      	mov	fp, r7
 8000d78:	46b2      	mov	sl, r6
 8000d7a:	46a9      	mov	r9, r5
 8000d7c:	46a0      	mov	r8, r4
 8000d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d80:	080002a5 	.word	0x080002a5

08000d84 <spi_read_single>:
 * 
 * @param reg Register to read
 * @retval Value read from register
 */
static uint8_t spi_read_single(uint8_t reg)
{
 8000d84:	b570      	push	{r4, r5, r6, lr}
 8000d86:	0004      	movs	r4, r0
  spi_chip_select();
 8000d88:	25a0      	movs	r5, #160	; 0xa0
 8000d8a:	05ed      	lsls	r5, r5, #23
 8000d8c:	2110      	movs	r1, #16
 8000d8e:	0028      	movs	r0, r5
 8000d90:	f000 f9bc 	bl	800110c <gpio_clear>
  timers_delay_microseconds(1);
 8000d94:	2001      	movs	r0, #1
 8000d96:	f000 f89d 	bl	8000ed4 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, reg);                   
 8000d9a:	b2a1      	uxth	r1, r4
 8000d9c:	4c08      	ldr	r4, [pc, #32]	; (8000dc0 <spi_read_single+0x3c>)
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f000 fb08 	bl	80013b4 <spi_xfer>
  uint8_t in =  spi_xfer(RFM_SPI, 0x00);                   
 8000da4:	2100      	movs	r1, #0
 8000da6:	0020      	movs	r0, r4
 8000da8:	f000 fb04 	bl	80013b4 <spi_xfer>
 8000dac:	b2c4      	uxtb	r4, r0
    
  spi_chip_deselect(); 
 8000dae:	2110      	movs	r1, #16
 8000db0:	0028      	movs	r0, r5
 8000db2:	f000 f9a9 	bl	8001108 <gpio_set>
  timers_delay_microseconds(1);
 8000db6:	2001      	movs	r0, #1
 8000db8:	f000 f88c 	bl	8000ed4 <timers_delay_microseconds>

  return in;
}
 8000dbc:	0020      	movs	r0, r4
 8000dbe:	bd70      	pop	{r4, r5, r6, pc}
 8000dc0:	40013000 	.word	0x40013000

08000dc4 <spi_write_single>:
  spi_chip_deselect();     
  timers_delay_microseconds(1);
}

static void spi_write_single(uint8_t reg, uint8_t data)
{
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc6:	0005      	movs	r5, r0
 8000dc8:	000e      	movs	r6, r1
  // Set MSB for write operation
  uint8_t cmd = 0x80 | reg;
 8000dca:	2480      	movs	r4, #128	; 0x80
 8000dcc:	4264      	negs	r4, r4
 8000dce:	4304      	orrs	r4, r0
 8000dd0:	b2e4      	uxtb	r4, r4

  spi_chip_select();
 8000dd2:	27a0      	movs	r7, #160	; 0xa0
 8000dd4:	05ff      	lsls	r7, r7, #23
 8000dd6:	2110      	movs	r1, #16
 8000dd8:	0038      	movs	r0, r7
 8000dda:	f000 f997 	bl	800110c <gpio_clear>
  timers_delay_microseconds(1);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f000 f878 	bl	8000ed4 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, cmd);                 
 8000de4:	b2a1      	uxth	r1, r4
 8000de6:	4c15      	ldr	r4, [pc, #84]	; (8000e3c <spi_write_single+0x78>)
 8000de8:	0020      	movs	r0, r4
 8000dea:	f000 fae3 	bl	80013b4 <spi_xfer>
  spi_xfer(RFM_SPI, data);             
 8000dee:	b2b1      	uxth	r1, r6
 8000df0:	0020      	movs	r0, r4
 8000df2:	f000 fadf 	bl	80013b4 <spi_xfer>

  spi_chip_deselect(); 
 8000df6:	2110      	movs	r1, #16
 8000df8:	0038      	movs	r0, r7
 8000dfa:	f000 f985 	bl	8001108 <gpio_set>
  timers_delay_microseconds(1);
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f000 f868 	bl	8000ed4 <timers_delay_microseconds>

  uint8_t curr_data = spi_read_single(reg);
 8000e04:	0028      	movs	r0, r5
 8000e06:	f7ff ffbd 	bl	8000d84 <spi_read_single>
 8000e0a:	0004      	movs	r4, r0

  // log_printf(MAIN, "%02x : %02x\n", reg, data);

  if(reg == RFM_REG_12_IRQ_FLAGS)    
 8000e0c:	2d12      	cmp	r5, #18
 8000e0e:	d013      	beq.n	8000e38 <spi_write_single+0x74>
    return;

  TIMEOUT(10000, "RFM SPI Write", ((reg << 16) | data), (curr_data == data), ;, timers_delay_microseconds(100); curr_data = spi_read_single(reg););
 8000e10:	f000 f87e 	bl	8000f10 <timeout_init>
 8000e14:	042a      	lsls	r2, r5, #16
 8000e16:	4332      	orrs	r2, r6
 8000e18:	4909      	ldr	r1, [pc, #36]	; (8000e40 <spi_write_single+0x7c>)
 8000e1a:	480a      	ldr	r0, [pc, #40]	; (8000e44 <spi_write_single+0x80>)
 8000e1c:	f000 f886 	bl	8000f2c <timeout>
 8000e20:	2800      	cmp	r0, #0
 8000e22:	d109      	bne.n	8000e38 <spi_write_single+0x74>
 8000e24:	42b4      	cmp	r4, r6
 8000e26:	d007      	beq.n	8000e38 <spi_write_single+0x74>
 8000e28:	2064      	movs	r0, #100	; 0x64
 8000e2a:	f000 f853 	bl	8000ed4 <timers_delay_microseconds>
 8000e2e:	0028      	movs	r0, r5
 8000e30:	f7ff ffa8 	bl	8000d84 <spi_read_single>
 8000e34:	0004      	movs	r4, r0
 8000e36:	e7ed      	b.n	8000e14 <spi_write_single+0x50>

  // log_printf(MAIN, "%02x : %02x : %02x\n", reg, data, curr_data);
}
 8000e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	40013000 	.word	0x40013000
 8000e40:	08002aa8 	.word	0x08002aa8
 8000e44:	00002710 	.word	0x00002710

08000e48 <exti4_15_isr>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void exti4_15_isr(void)
{
 8000e48:	b570      	push	{r4, r5, r6, lr}
  uint16_t timer = timers_micros();
 8000e4a:	f000 f859 	bl	8000f00 <timers_micros>
  
  exti_reset_request(RFM_IO_0_EXTI);
 8000e4e:	2480      	movs	r4, #128	; 0x80
 8000e50:	0224      	lsls	r4, r4, #8
 8000e52:	0020      	movs	r0, r4
 8000e54:	f000 f934 	bl	80010c0 <exti_reset_request>
  exti_reset_request(RFM_IO_0_EXTI);
 8000e58:	0020      	movs	r0, r4
 8000e5a:	f000 f931 	bl	80010c0 <exti_reset_request>

  // Store IRQ Flags
  packets_buf[packets_head].flags = get_irq();
 8000e5e:	4d1b      	ldr	r5, [pc, #108]	; (8000ecc <exti4_15_isr+0x84>)
 8000e60:	782e      	ldrb	r6, [r5, #0]
  return spi_read_single(RFM_REG_12_IRQ_FLAGS);
 8000e62:	2012      	movs	r0, #18
 8000e64:	f7ff ff8e 	bl	8000d84 <spi_read_single>
  packets_buf[packets_head].flags = get_irq();
 8000e68:	4c19      	ldr	r4, [pc, #100]	; (8000ed0 <exti4_15_isr+0x88>)
 8000e6a:	0073      	lsls	r3, r6, #1
 8000e6c:	199b      	adds	r3, r3, r6
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	18e3      	adds	r3, r4, r3
 8000e72:	7418      	strb	r0, [r3, #16]
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 8000e74:	21ff      	movs	r1, #255	; 0xff
 8000e76:	2012      	movs	r0, #18
 8000e78:	f7ff ffa4 	bl	8000dc4 <spi_write_single>
 8000e7c:	21ff      	movs	r1, #255	; 0xff
 8000e7e:	2012      	movs	r0, #18
 8000e80:	f7ff ffa0 	bl	8000dc4 <spi_write_single>
  clear_irq(RFM_IRQ_ALL);
  clear_irq(RFM_IRQ_ALL);

  // Get signal strength
  packets_buf[packets_head].rssi = spi_read_single(RFM_REG_1A_PKT_RSSI_VALUE);
 8000e84:	201a      	movs	r0, #26
 8000e86:	f7ff ff7d 	bl	8000d84 <spi_read_single>
 8000e8a:	782a      	ldrb	r2, [r5, #0]
 8000e8c:	b200      	sxth	r0, r0
  packets_buf[packets_head].rssi -= 137;
 8000e8e:	0053      	lsls	r3, r2, #1
 8000e90:	189b      	adds	r3, r3, r2
 8000e92:	00db      	lsls	r3, r3, #3
 8000e94:	18e3      	adds	r3, r4, r3
 8000e96:	3889      	subs	r0, #137	; 0x89
 8000e98:	8298      	strh	r0, [r3, #20]
  packets_buf[packets_head].snr = spi_read_single(RFM_REG_19_PKT_SNR_VALUE) / 4;
 8000e9a:	2019      	movs	r0, #25
 8000e9c:	f7ff ff72 	bl	8000d84 <spi_read_single>
 8000ea0:	782b      	ldrb	r3, [r5, #0]
 8000ea2:	005a      	lsls	r2, r3, #1
 8000ea4:	18d2      	adds	r2, r2, r3
 8000ea6:	00d2      	lsls	r2, r2, #3
 8000ea8:	18a4      	adds	r4, r4, r2
 8000eaa:	0880      	lsrs	r0, r0, #2
 8000eac:	74a0      	strb	r0, [r4, #18]

  // Check for CRC error
  packets_buf[packets_head].crc_ok = !(packets_buf[packets_head].flags & RFM_IRQ_PAYLOAD_CRC_ERROR);
 8000eae:	7c22      	ldrb	r2, [r4, #16]
 8000eb0:	0952      	lsrs	r2, r2, #5
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	404a      	eors	r2, r1
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	400a      	ands	r2, r1
 8000eba:	7462      	strb	r2, [r4, #17]

  packets_head = (packets_head + 1) % PACKETS_BUF_SIZE;
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	702b      	strb	r3, [r5, #0]

  uint16_t time = timers_micros() - timer;
 8000ec4:	f000 f81c 	bl	8000f00 <timers_micros>
  // log_printf(MAIN, "ISR %u %u %u\n", time, packets_head, packets_tail);
}
 8000ec8:	bd70      	pop	{r4, r5, r6, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	20000190 	.word	0x20000190
 8000ed0:	20000010 	.word	0x20000010

08000ed4 <timers_delay_microseconds>:
    lptimer_start_counter(LPTIM1, LPTIM_CR_CNTSTRT);
}

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_microseconds(uint32_t delay_microseconds)
{
 8000ed4:	b570      	push	{r4, r5, r6, lr}
 8000ed6:	0004      	movs	r4, r0
    uint32_t curr_time = lptimer_get_counter(LPTIM1);
 8000ed8:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <timers_delay_microseconds+0x24>)
 8000eda:	f000 f982 	bl	80011e2 <lptimer_get_counter>
 8000ede:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_microseconds > 65000)
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <timers_delay_microseconds+0x28>)
 8000ee2:	429c      	cmp	r4, r3
 8000ee4:	d900      	bls.n	8000ee8 <timers_delay_microseconds+0x14>
        delay_microseconds = 65000;
 8000ee6:	001c      	movs	r4, r3

    while (lptimer_get_counter(LPTIM1) - curr_time < delay_microseconds);
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <timers_delay_microseconds+0x24>)
 8000eea:	f000 f97a 	bl	80011e2 <lptimer_get_counter>
 8000eee:	1b40      	subs	r0, r0, r5
 8000ef0:	42a0      	cmp	r0, r4
 8000ef2:	d3f9      	bcc.n	8000ee8 <timers_delay_microseconds+0x14>
}
 8000ef4:	bd70      	pop	{r4, r5, r6, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	40007c00 	.word	0x40007c00
 8000efc:	0000fde8 	.word	0x0000fde8

08000f00 <timers_micros>:
}
*/

// Returns value of microsecond counter
uint16_t timers_micros(void)
{
 8000f00:	b510      	push	{r4, lr}
    return (uint16_t)lptimer_get_counter(LPTIM1);
 8000f02:	4802      	ldr	r0, [pc, #8]	; (8000f0c <timers_micros+0xc>)
 8000f04:	f000 f96d 	bl	80011e2 <lptimer_get_counter>
}
 8000f08:	bd10      	pop	{r4, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	40007c00 	.word	0x40007c00

08000f10 <timeout_init>:
}


// Timout functions
void timeout_init(void)
{
 8000f10:	b510      	push	{r4, lr}
    timeout_counter     = 0; 
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <timeout_init+0x14>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
    // timeout_counter     = 2140483648; 
    timeout_timer       = timers_micros(); 
 8000f18:	f7ff fff2 	bl	8000f00 <timers_micros>
 8000f1c:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <timeout_init+0x18>)
 8000f1e:	8018      	strh	r0, [r3, #0]
}
 8000f20:	bd10      	pop	{r4, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	20000194 	.word	0x20000194
 8000f28:	20000198 	.word	0x20000198

08000f2c <timeout>:

bool timeout(uint32_t time_microseconds, char *msg, uint32_t data)
{
 8000f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	0006      	movs	r6, r0
 8000f32:	9101      	str	r1, [sp, #4]
 8000f34:	0015      	movs	r5, r2
    timeout_counter    += (uint16_t)(timers_micros() - timeout_timer);
 8000f36:	f7ff ffe3 	bl	8000f00 <timers_micros>
 8000f3a:	4c0d      	ldr	r4, [pc, #52]	; (8000f70 <timeout+0x44>)
 8000f3c:	8823      	ldrh	r3, [r4, #0]
 8000f3e:	1ac3      	subs	r3, r0, r3
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	4f0c      	ldr	r7, [pc, #48]	; (8000f74 <timeout+0x48>)
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	4694      	mov	ip, r2
 8000f48:	4463      	add	r3, ip
 8000f4a:	603b      	str	r3, [r7, #0]
    timeout_timer       = timers_micros();
 8000f4c:	f7ff ffd8 	bl	8000f00 <timers_micros>
 8000f50:	8020      	strh	r0, [r4, #0]

    // log_printf(MAIN, "%u\n", timeout_counter);

    if(timeout_counter > time_microseconds)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	42b3      	cmp	r3, r6
 8000f56:	d802      	bhi.n	8000f5e <timeout+0x32>
    {
        log_printf(MAIN, "Timeout %s %08X\n", msg, data);
        return true;
    }
    else    
        return false;
 8000f58:	2000      	movs	r0, #0
}
 8000f5a:	b003      	add	sp, #12
 8000f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        log_printf(MAIN, "Timeout %s %08X\n", msg, data);
 8000f5e:	002b      	movs	r3, r5
 8000f60:	9a01      	ldr	r2, [sp, #4]
 8000f62:	4905      	ldr	r1, [pc, #20]	; (8000f78 <timeout+0x4c>)
 8000f64:	2000      	movs	r0, #0
 8000f66:	f7ff f951 	bl	800020c <log_printf>
        return true;
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	e7f5      	b.n	8000f5a <timeout+0x2e>
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	20000198 	.word	0x20000198
 8000f74:	20000194 	.word	0x20000194
 8000f78:	08002ab8 	.word	0x08002ab8

08000f7c <set_gpio_for_standby>:

void set_gpio_for_standby(void)
{   
 8000f7c:	b570      	push	{r4, r5, r6, lr}
    // Common
    // LED
    gpio_mode_setup(LED_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, LED);
 8000f7e:	2580      	movs	r5, #128	; 0x80
 8000f80:	01ed      	lsls	r5, r5, #7
 8000f82:	24a0      	movs	r4, #160	; 0xa0
 8000f84:	05e4      	lsls	r4, r4, #23
 8000f86:	002b      	movs	r3, r5
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2103      	movs	r1, #3
 8000f8c:	0020      	movs	r0, r4
 8000f8e:	f000 f8c0 	bl	8001112 <gpio_mode_setup>
    gpio_set(LED_PORT, LED);
 8000f92:	0029      	movs	r1, r5
 8000f94:	0020      	movs	r0, r4
 8000f96:	f000 f8b7 	bl	8001108 <gpio_set>

    // Serial Print
    gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, SPF_USART_TX);
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	0020      	movs	r0, r4
 8000fa2:	f000 f8b6 	bl	8001112 <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE,  SPF_USART_RX);
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2101      	movs	r1, #1
 8000fac:	0020      	movs	r0, r4
 8000fae:	f000 f8b0 	bl	8001112 <gpio_mode_setup>
	gpio_set(SPF_USART_RX_PORT, SPF_USART_RX);
 8000fb2:	2108      	movs	r1, #8
 8000fb4:	0020      	movs	r0, r4
 8000fb6:	f000 f8a7 	bl	8001108 <gpio_set>

    // Batt Sense
    gpio_mode_setup(BATT_SENS_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, BATT_SENS);
 8000fba:	2301      	movs	r3, #1
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2103      	movs	r1, #3
 8000fc0:	0020      	movs	r0, r4
 8000fc2:	f000 f8a6 	bl	8001112 <gpio_mode_setup>
    
    // RFM
    // SPI
    gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_ANALOG,   GPIO_PUPD_NONE,       RFM_SPI_MISO);
 8000fc6:	2340      	movs	r3, #64	; 0x40
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2103      	movs	r1, #3
 8000fcc:	0020      	movs	r0, r4
 8000fce:	f000 f8a0 	bl	8001112 <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_SCK_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_SCK);
 8000fd2:	2320      	movs	r3, #32
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	0020      	movs	r0, r4
 8000fda:	f000 f89a 	bl	8001112 <gpio_mode_setup>
    gpio_mode_setup(RFM_SPI_MOSI_PORT,  GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_MOSI);
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	0020      	movs	r0, r4
 8000fe6:	f000 f894 	bl	8001112 <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_NSS_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_SPI_NSS);
 8000fea:	2310      	movs	r3, #16
 8000fec:	2201      	movs	r2, #1
 8000fee:	2100      	movs	r1, #0
 8000ff0:	0020      	movs	r0, r4
 8000ff2:	f000 f88e 	bl	8001112 <gpio_mode_setup>
    gpio_mode_setup(RFM_RESET_PORT,     GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_RESET);
 8000ff6:	4c1e      	ldr	r4, [pc, #120]	; (8001070 <set_gpio_for_standby+0xf4>)
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	0020      	movs	r0, r4
 8001000:	f000 f887 	bl	8001112 <gpio_mode_setup>

    // DIO
    gpio_mode_setup(RFM_IO_0_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_0);
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	2200      	movs	r2, #0
 800100a:	2103      	movs	r1, #3
 800100c:	0020      	movs	r0, r4
 800100e:	f000 f880 	bl	8001112 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_1_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_1);
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	015b      	lsls	r3, r3, #5
 8001016:	2200      	movs	r2, #0
 8001018:	2103      	movs	r1, #3
 800101a:	0020      	movs	r0, r4
 800101c:	f000 f879 	bl	8001112 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_2_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_2);
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	011b      	lsls	r3, r3, #4
 8001024:	2200      	movs	r2, #0
 8001026:	2103      	movs	r1, #3
 8001028:	0020      	movs	r0, r4
 800102a:	f000 f872 	bl	8001112 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_3_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_3);
 800102e:	2304      	movs	r3, #4
 8001030:	2200      	movs	r2, #0
 8001032:	2103      	movs	r1, #3
 8001034:	0020      	movs	r0, r4
 8001036:	f000 f86c 	bl	8001112 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_4_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_4);
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	2200      	movs	r2, #0
 8001040:	2103      	movs	r1, #3
 8001042:	0020      	movs	r0, r4
 8001044:	f000 f865 	bl	8001112 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_5_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_5);
 8001048:	2302      	movs	r3, #2
 800104a:	2200      	movs	r2, #0
 800104c:	2103      	movs	r1, #3
 800104e:	0020      	movs	r0, r4
 8001050:	f000 f85f 	bl	8001112 <gpio_mode_setup>

    #ifdef _HUB
    #else

    // TMP
    gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	019b      	lsls	r3, r3, #6
 8001058:	2201      	movs	r2, #1
 800105a:	2100      	movs	r1, #0
 800105c:	0020      	movs	r0, r4
 800105e:	f000 f858 	bl	8001112 <gpio_mode_setup>
	gpio_mode_setup(TEMP_I2C_SDA_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SDA);
 8001062:	002b      	movs	r3, r5
 8001064:	2201      	movs	r2, #1
 8001066:	2100      	movs	r1, #0
 8001068:	0020      	movs	r0, r4
 800106a:	f000 f852 	bl	8001112 <gpio_mode_setup>

    #endif

}
 800106e:	bd70      	pop	{r4, r5, r6, pc}
 8001070:	50000400 	.word	0x50000400

08001074 <rtc_isr>:

// Override default rtc interrupt handler
void rtc_isr(void)
{ 
 8001074:	b510      	push	{r4, lr}
    exti_reset_request(EXTI20);
 8001076:	2080      	movs	r0, #128	; 0x80
 8001078:	0340      	lsls	r0, r0, #13
 800107a:	f000 f821 	bl	80010c0 <exti_reset_request>

    // scb_reset_system();

    log_init();
 800107e:	f7ff f8b9 	bl	80001f4 <log_init>
    log_printf(MAIN, "RTC ISR\n");
 8001082:	490d      	ldr	r1, [pc, #52]	; (80010b8 <rtc_isr+0x44>)
 8001084:	2000      	movs	r0, #0
 8001086:	f7ff f8c1 	bl	800020c <log_printf>

    if(RTC_ISR & RTC_ISR_WUTF)
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <rtc_isr+0x48>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	055b      	lsls	r3, r3, #21
 8001090:	d400      	bmi.n	8001094 <rtc_isr+0x20>
        pwr_clear_standby_flag();
        rtc_lock();
	    pwr_enable_backup_domain_write_protect();
        set_gpio_for_standby();
    }
}
 8001092:	bd10      	pop	{r4, pc}
        pwr_disable_backup_domain_write_protect();
 8001094:	f000 f8a8 	bl	80011e8 <pwr_disable_backup_domain_write_protect>
        rtc_unlock();
 8001098:	f000 f974 	bl	8001384 <rtc_unlock>
	    rtc_clear_wakeup_flag();
 800109c:	f000 f980 	bl	80013a0 <rtc_clear_wakeup_flag>
        pwr_clear_wakeup_flag();
 80010a0:	f000 f8be 	bl	8001220 <pwr_clear_wakeup_flag>
        pwr_clear_standby_flag();
 80010a4:	f000 f8b4 	bl	8001210 <pwr_clear_standby_flag>
        rtc_lock();
 80010a8:	f000 f974 	bl	8001394 <rtc_lock>
	    pwr_enable_backup_domain_write_protect();
 80010ac:	f000 f8a6 	bl	80011fc <pwr_enable_backup_domain_write_protect>
        set_gpio_for_standby();
 80010b0:	f7ff ff64 	bl	8000f7c <set_gpio_for_standby>
}
 80010b4:	e7ed      	b.n	8001092 <rtc_isr+0x1e>
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	08002acc 	.word	0x08002acc
 80010bc:	4000280c 	.word	0x4000280c

080010c0 <exti_reset_request>:
{
#if defined(EXTI_RPR1) && defined(EXTI_FPR1)
	EXTI_RPR1 = extis;
	EXTI_FPR1 = extis;
#else
	EXTI_PR = extis;
 80010c0:	4b01      	ldr	r3, [pc, #4]	; (80010c8 <exti_reset_request+0x8>)
 80010c2:	6018      	str	r0, [r3, #0]
#endif
}
 80010c4:	4770      	bx	lr
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	40010414 	.word	0x40010414

080010cc <flash_set_ws>:
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 80010cc:	2101      	movs	r1, #1
	reg32 = FLASH_ACR;
 80010ce:	4a03      	ldr	r2, [pc, #12]	; (80010dc <flash_set_ws+0x10>)
 80010d0:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 80010d2:	438b      	bics	r3, r1
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 80010d4:	4303      	orrs	r3, r0
	FLASH_ACR = reg32;
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	4770      	bx	lr
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	40022000 	.word	0x40022000

080010e0 <flash_unlock_pecr>:
 * yourself.
 * @sa flash_unlock
 */
void flash_unlock_pecr(void)
{
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY1;
 80010e0:	4b02      	ldr	r3, [pc, #8]	; (80010ec <flash_unlock_pecr+0xc>)
 80010e2:	4a03      	ldr	r2, [pc, #12]	; (80010f0 <flash_unlock_pecr+0x10>)
 80010e4:	601a      	str	r2, [r3, #0]
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY2;
 80010e6:	4a03      	ldr	r2, [pc, #12]	; (80010f4 <flash_unlock_pecr+0x14>)
 80010e8:	601a      	str	r2, [r3, #0]
}
 80010ea:	4770      	bx	lr
 80010ec:	4002200c 	.word	0x4002200c
 80010f0:	89abcdef 	.word	0x89abcdef
 80010f4:	02030405 	.word	0x02030405

080010f8 <flash_lock_pecr>:

void flash_lock_pecr(void)
{
	FLASH_PECR |= FLASH_PECR_PELOCK;
 80010f8:	2301      	movs	r3, #1
 80010fa:	4a02      	ldr	r2, [pc, #8]	; (8001104 <flash_lock_pecr+0xc>)
 80010fc:	6811      	ldr	r1, [r2, #0]
 80010fe:	430b      	orrs	r3, r1
 8001100:	6013      	str	r3, [r2, #0]
}
 8001102:	4770      	bx	lr
 8001104:	40022004 	.word	0x40022004

08001108 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8001108:	6181      	str	r1, [r0, #24]
}
 800110a:	4770      	bx	lr

0800110c <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 800110c:	0409      	lsls	r1, r1, #16
 800110e:	6181      	str	r1, [r0, #24]
}
 8001110:	4770      	bx	lr

08001112 <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 8001112:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001114:	b085      	sub	sp, #20
 8001116:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8001118:	2703      	movs	r7, #3
	pupd = GPIO_PUPDR(gpioport);
 800111a:	2100      	movs	r1, #0
{
 800111c:	9202      	str	r2, [sp, #8]
 800111e:	9303      	str	r3, [sp, #12]
	moder = GPIO_MODER(gpioport);
 8001120:	6802      	ldr	r2, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 8001122:	68c3      	ldr	r3, [r0, #12]
		if (!((1 << i) & gpios)) {
 8001124:	9c03      	ldr	r4, [sp, #12]
 8001126:	2501      	movs	r5, #1
 8001128:	410c      	asrs	r4, r1
 800112a:	422c      	tst	r4, r5
 800112c:	d00a      	beq.n	8001144 <gpio_mode_setup+0x32>
		moder &= ~GPIO_MODE_MASK(i);
 800112e:	003d      	movs	r5, r7
 8001130:	004c      	lsls	r4, r1, #1
 8001132:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8001134:	9e01      	ldr	r6, [sp, #4]
		moder &= ~GPIO_MODE_MASK(i);
 8001136:	43aa      	bics	r2, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 8001138:	43ab      	bics	r3, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 800113a:	9d02      	ldr	r5, [sp, #8]
		moder |= GPIO_MODE(i, mode);
 800113c:	40a6      	lsls	r6, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 800113e:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8001140:	4332      	orrs	r2, r6
		pupd |= GPIO_PUPD(i, pull_up_down);
 8001142:	432b      	orrs	r3, r5
	for (i = 0; i < 16; i++) {
 8001144:	3101      	adds	r1, #1
 8001146:	2910      	cmp	r1, #16
 8001148:	d1ec      	bne.n	8001124 <gpio_mode_setup+0x12>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 800114a:	6002      	str	r2, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 800114c:	60c3      	str	r3, [r0, #12]
}
 800114e:	b005      	add	sp, #20
 8001150:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001152 <gpio_set_output_options>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_output_options(uint32_t gpioport, uint8_t otype, uint8_t speed,
			     uint16_t gpios)
{
 8001152:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001154:	9201      	str	r2, [sp, #4]
	uint16_t i;
	uint32_t ospeedr;

	if (otype == 0x1) {
 8001156:	2901      	cmp	r1, #1
 8001158:	d116      	bne.n	8001188 <gpio_set_output_options+0x36>
		GPIO_OTYPER(gpioport) |= gpios;
 800115a:	6841      	ldr	r1, [r0, #4]
 800115c:	4319      	orrs	r1, r3
	} else {
		GPIO_OTYPER(gpioport) &= ~gpios;
	}

	ospeedr = GPIO_OSPEEDR(gpioport);
 800115e:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8001160:	2601      	movs	r6, #1
			continue;
		}
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8001162:	2703      	movs	r7, #3
		GPIO_OTYPER(gpioport) &= ~gpios;
 8001164:	6041      	str	r1, [r0, #4]
	ospeedr = GPIO_OSPEEDR(gpioport);
 8001166:	6881      	ldr	r1, [r0, #8]
		if (!((1 << i) & gpios)) {
 8001168:	001d      	movs	r5, r3
 800116a:	4125      	asrs	r5, r4
 800116c:	4235      	tst	r5, r6
 800116e:	d006      	beq.n	800117e <gpio_set_output_options+0x2c>
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8001170:	003a      	movs	r2, r7
 8001172:	0065      	lsls	r5, r4, #1
 8001174:	40aa      	lsls	r2, r5
 8001176:	4391      	bics	r1, r2
		ospeedr |= GPIO_OSPEED(i, speed);
 8001178:	9a01      	ldr	r2, [sp, #4]
 800117a:	40aa      	lsls	r2, r5
 800117c:	4311      	orrs	r1, r2
	for (i = 0; i < 16; i++) {
 800117e:	3401      	adds	r4, #1
 8001180:	2c10      	cmp	r4, #16
 8001182:	d1f1      	bne.n	8001168 <gpio_set_output_options+0x16>
	}

	GPIO_OSPEEDR(gpioport) = ospeedr;
 8001184:	6081      	str	r1, [r0, #8]
}
 8001186:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		GPIO_OTYPER(gpioport) &= ~gpios;
 8001188:	6841      	ldr	r1, [r0, #4]
 800118a:	4399      	bics	r1, r3
 800118c:	e7e7      	b.n	800115e <gpio_set_output_options+0xc>

0800118e <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 800118e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);
 8001190:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 8001192:	2601      	movs	r6, #1
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 8001194:	270f      	movs	r7, #15
	afrl = GPIO_AFRL(gpioport);
 8001196:	6a04      	ldr	r4, [r0, #32]
{
 8001198:	9100      	str	r1, [sp, #0]
	afrh = GPIO_AFRH(gpioport);
 800119a:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 800119c:	9201      	str	r2, [sp, #4]
		if (!((1 << i) & gpios)) {
 800119e:	9d01      	ldr	r5, [sp, #4]
 80011a0:	411d      	asrs	r5, r3
 80011a2:	4235      	tst	r5, r6
 80011a4:	d006      	beq.n	80011b4 <gpio_set_af+0x26>
		afrl &= ~GPIO_AFR_MASK(i);
 80011a6:	003a      	movs	r2, r7
 80011a8:	009d      	lsls	r5, r3, #2
 80011aa:	40aa      	lsls	r2, r5
 80011ac:	4394      	bics	r4, r2
		afrl |= GPIO_AFR(i, alt_func_num);
 80011ae:	9a00      	ldr	r2, [sp, #0]
 80011b0:	40aa      	lsls	r2, r5
 80011b2:	4314      	orrs	r4, r2
	for (i = 0; i < 8; i++) {
 80011b4:	3301      	adds	r3, #1
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d1f1      	bne.n	800119e <gpio_set_af+0x10>
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 80011ba:	2601      	movs	r6, #1
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 80011bc:	270f      	movs	r7, #15
		if (!((1 << i) & gpios)) {
 80011be:	9a01      	ldr	r2, [sp, #4]
 80011c0:	411a      	asrs	r2, r3
 80011c2:	4232      	tst	r2, r6
 80011c4:	d007      	beq.n	80011d6 <gpio_set_af+0x48>
		afrh &= ~GPIO_AFR_MASK(i - 8);
 80011c6:	003a      	movs	r2, r7
 80011c8:	009d      	lsls	r5, r3, #2
 80011ca:	3d20      	subs	r5, #32
 80011cc:	40aa      	lsls	r2, r5
 80011ce:	4391      	bics	r1, r2
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 80011d0:	9a00      	ldr	r2, [sp, #0]
 80011d2:	40aa      	lsls	r2, r5
 80011d4:	4311      	orrs	r1, r2
	for (i = 8; i < 16; i++) {
 80011d6:	3301      	adds	r3, #1
 80011d8:	2b10      	cmp	r3, #16
 80011da:	d1f0      	bne.n	80011be <gpio_set_af+0x30>
	}

	GPIO_AFRL(gpioport) = afrl;
 80011dc:	6204      	str	r4, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 80011de:	6241      	str	r1, [r0, #36]	; 0x24
}
 80011e0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080011e2 <lptimer_get_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @returns Counter value.
 */
uint16_t lptimer_get_counter(uint32_t lptimer_peripheral)
{
	return LPTIM_CNT(lptimer_peripheral);
 80011e2:	69c0      	ldr	r0, [r0, #28]
 80011e4:	b280      	uxth	r0, r0
}
 80011e6:	4770      	bx	lr

080011e8 <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	4a03      	ldr	r2, [pc, #12]	; (80011f8 <pwr_disable_backup_domain_write_protect+0x10>)
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	6811      	ldr	r1, [r2, #0]
 80011f0:	430b      	orrs	r3, r1
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	4770      	bx	lr
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	40007000 	.word	0x40007000

080011fc <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 80011fc:	4a02      	ldr	r2, [pc, #8]	; (8001208 <pwr_enable_backup_domain_write_protect+0xc>)
 80011fe:	4903      	ldr	r1, [pc, #12]	; (800120c <pwr_enable_backup_domain_write_protect+0x10>)
 8001200:	6813      	ldr	r3, [r2, #0]
 8001202:	400b      	ands	r3, r1
 8001204:	6013      	str	r3, [r2, #0]
}
 8001206:	4770      	bx	lr
 8001208:	40007000 	.word	0x40007000
 800120c:	fffffeff 	.word	0xfffffeff

08001210 <pwr_clear_standby_flag>:
This is set when the processor returns from a standby mode.
*/

void pwr_clear_standby_flag(void)
{
	PWR_CR |= PWR_CR_CSBF;
 8001210:	2308      	movs	r3, #8
 8001212:	4a02      	ldr	r2, [pc, #8]	; (800121c <pwr_clear_standby_flag+0xc>)
 8001214:	6811      	ldr	r1, [r2, #0]
 8001216:	430b      	orrs	r3, r1
 8001218:	6013      	str	r3, [r2, #0]
}
 800121a:	4770      	bx	lr
 800121c:	40007000 	.word	0x40007000

08001220 <pwr_clear_wakeup_flag>:
This is set when the processor receives a wakeup signal.
*/

void pwr_clear_wakeup_flag(void)
{
	PWR_CR |= PWR_CR_CWUF;
 8001220:	2304      	movs	r3, #4
 8001222:	4a02      	ldr	r2, [pc, #8]	; (800122c <pwr_clear_wakeup_flag+0xc>)
 8001224:	6811      	ldr	r1, [r2, #0]
 8001226:	430b      	orrs	r3, r1
 8001228:	6013      	str	r3, [r2, #0]
}
 800122a:	4770      	bx	lr
 800122c:	40007000 	.word	0x40007000

08001230 <rcc_osc_on>:
uint32_t rcc_ahb_frequency = 2097000;
uint32_t rcc_apb1_frequency = 2097000;
uint32_t rcc_apb2_frequency = 2097000;

void rcc_osc_on(enum rcc_osc osc)
{
 8001230:	b500      	push	{lr}
 8001232:	2806      	cmp	r0, #6
 8001234:	d80b      	bhi.n	800124e <rcc_osc_on+0x1e>
 8001236:	f000 f987 	bl	8001548 <__gnu_thumb1_case_uqi>
 800123a:	1004      	.short	0x1004
 800123c:	1b0b1915 	.word	0x1b0b1915
 8001240:	1d          	.byte	0x1d
 8001241:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	4a0c      	ldr	r2, [pc, #48]	; (8001278 <rcc_osc_on+0x48>)
 8001246:	045b      	lsls	r3, r3, #17
 8001248:	6811      	ldr	r1, [r2, #0]
		break;
	case RCC_LSE:
		RCC_CSR |= RCC_CSR_LSEON;
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
 800124a:	430b      	orrs	r3, r1
 800124c:	6013      	str	r3, [r2, #0]
		break;
	}
}
 800124e:	bd00      	pop	{pc}
		RCC_CR |= RCC_CR_MSION;
 8001250:	4a09      	ldr	r2, [pc, #36]	; (8001278 <rcc_osc_on+0x48>)
		RCC_CSR |= RCC_CSR_LSEON;
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	6811      	ldr	r1, [r2, #0]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	e7f7      	b.n	800124a <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSEON;
 800125a:	2380      	movs	r3, #128	; 0x80
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <rcc_osc_on+0x48>)
 800125e:	025b      	lsls	r3, r3, #9
 8001260:	6811      	ldr	r1, [r2, #0]
 8001262:	e7f2      	b.n	800124a <rcc_osc_on+0x1a>
		RCC_CRRCR |= RCC_CRRCR_HSI48ON;
 8001264:	4a05      	ldr	r2, [pc, #20]	; (800127c <rcc_osc_on+0x4c>)
		RCC_CSR |= RCC_CSR_LSION;
 8001266:	2301      	movs	r3, #1
 8001268:	6811      	ldr	r1, [r2, #0]
 800126a:	e7ee      	b.n	800124a <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSI16ON;
 800126c:	4a02      	ldr	r2, [pc, #8]	; (8001278 <rcc_osc_on+0x48>)
 800126e:	e7fa      	b.n	8001266 <rcc_osc_on+0x36>
		RCC_CSR |= RCC_CSR_LSEON;
 8001270:	4a03      	ldr	r2, [pc, #12]	; (8001280 <rcc_osc_on+0x50>)
 8001272:	e7ee      	b.n	8001252 <rcc_osc_on+0x22>
		RCC_CSR |= RCC_CSR_LSION;
 8001274:	4a02      	ldr	r2, [pc, #8]	; (8001280 <rcc_osc_on+0x50>)
 8001276:	e7f6      	b.n	8001266 <rcc_osc_on+0x36>
 8001278:	40021000 	.word	0x40021000
 800127c:	40021008 	.word	0x40021008
 8001280:	40021050 	.word	0x40021050

08001284 <rcc_is_osc_ready>:
	cm3_assert_not_reached();
}


bool rcc_is_osc_ready(enum rcc_osc osc)
{
 8001284:	2300      	movs	r3, #0
 8001286:	b500      	push	{lr}
 8001288:	2806      	cmp	r0, #6
 800128a:	d80a      	bhi.n	80012a2 <rcc_is_osc_ready+0x1e>
 800128c:	3301      	adds	r3, #1
 800128e:	f000 f95b 	bl	8001548 <__gnu_thumb1_case_uqi>
 8001292:	0a04      	.short	0x0a04
 8001294:	1a160e12 	.word	0x1a160e12
 8001298:	1c          	.byte	0x1c
 8001299:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 800129a:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <rcc_is_osc_ready+0x4c>)
 800129c:	6810      	ldr	r0, [r2, #0]
 800129e:	0e40      	lsrs	r0, r0, #25
	case RCC_MSI:
		return RCC_CR & RCC_CR_MSIRDY;
	case RCC_LSE:
		return RCC_CSR & RCC_CSR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 80012a0:	4003      	ands	r3, r0
	}
	return false;
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	bd00      	pop	{pc}
		return RCC_CR & RCC_CR_HSERDY;
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <rcc_is_osc_ready+0x4c>)
 80012a8:	6810      	ldr	r0, [r2, #0]
 80012aa:	0c40      	lsrs	r0, r0, #17
 80012ac:	e7f8      	b.n	80012a0 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_HSI16RDY;
 80012ae:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <rcc_is_osc_ready+0x4c>)
 80012b0:	6810      	ldr	r0, [r2, #0]
 80012b2:	0880      	lsrs	r0, r0, #2
 80012b4:	e7f4      	b.n	80012a0 <rcc_is_osc_ready+0x1c>
		return RCC_CRRCR & RCC_CRRCR_HSI48RDY;
 80012b6:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <rcc_is_osc_ready+0x50>)
		return RCC_CSR & RCC_CSR_LSIRDY;
 80012b8:	6810      	ldr	r0, [r2, #0]
 80012ba:	0840      	lsrs	r0, r0, #1
 80012bc:	e7f0      	b.n	80012a0 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_MSIRDY;
 80012be:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <rcc_is_osc_ready+0x4c>)
		return RCC_CSR & RCC_CSR_LSERDY;
 80012c0:	6810      	ldr	r0, [r2, #0]
 80012c2:	0a40      	lsrs	r0, r0, #9
 80012c4:	e7ec      	b.n	80012a0 <rcc_is_osc_ready+0x1c>
 80012c6:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <rcc_is_osc_ready+0x54>)
 80012c8:	e7fa      	b.n	80012c0 <rcc_is_osc_ready+0x3c>
		return RCC_CSR & RCC_CSR_LSIRDY;
 80012ca:	4a03      	ldr	r2, [pc, #12]	; (80012d8 <rcc_is_osc_ready+0x54>)
 80012cc:	e7f4      	b.n	80012b8 <rcc_is_osc_ready+0x34>
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40021008 	.word	0x40021008
 80012d8:	40021050 	.word	0x40021050

080012dc <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 80012dc:	b510      	push	{r4, lr}
 80012de:	0004      	movs	r4, r0
	while (!rcc_is_osc_ready(osc));
 80012e0:	0020      	movs	r0, r4
 80012e2:	f7ff ffcf 	bl	8001284 <rcc_is_osc_ready>
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d0fa      	beq.n	80012e0 <rcc_wait_for_osc_ready+0x4>
}
 80012ea:	bd10      	pop	{r4, pc}

080012ec <rcc_set_ppre1>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb1pre
 */

void rcc_set_ppre1(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 80012ec:	4a03      	ldr	r2, [pc, #12]	; (80012fc <rcc_set_ppre1+0x10>)
 80012ee:	4904      	ldr	r1, [pc, #16]	; (8001300 <rcc_set_ppre1+0x14>)
 80012f0:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE1_MASK << RCC_CFGR_PPRE1_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 80012f2:	0200      	lsls	r0, r0, #8
	uint32_t reg = RCC_CFGR
 80012f4:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 80012f6:	4318      	orrs	r0, r3
 80012f8:	6010      	str	r0, [r2, #0]
}
 80012fa:	4770      	bx	lr
 80012fc:	4002100c 	.word	0x4002100c
 8001300:	fffff8ff 	.word	0xfffff8ff

08001304 <rcc_set_ppre2>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb2pre
 */

void rcc_set_ppre2(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8001304:	4a03      	ldr	r2, [pc, #12]	; (8001314 <rcc_set_ppre2+0x10>)
 8001306:	4904      	ldr	r1, [pc, #16]	; (8001318 <rcc_set_ppre2+0x14>)
 8001308:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE2_MASK << RCC_CFGR_PPRE2_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 800130a:	02c0      	lsls	r0, r0, #11
	uint32_t reg = RCC_CFGR
 800130c:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 800130e:	4318      	orrs	r0, r3
 8001310:	6010      	str	r0, [r2, #0]
}
 8001312:	4770      	bx	lr
 8001314:	4002100c 	.word	0x4002100c
 8001318:	ffffc7ff 	.word	0xffffc7ff

0800131c <rcc_set_hpre>:
 * @param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
 */

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 800131c:	21f0      	movs	r1, #240	; 0xf0
 800131e:	4a03      	ldr	r2, [pc, #12]	; (800132c <rcc_set_hpre+0x10>)
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8001320:	0100      	lsls	r0, r0, #4
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8001322:	6813      	ldr	r3, [r2, #0]
 8001324:	438b      	bics	r3, r1
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8001326:	4318      	orrs	r0, r3
 8001328:	6010      	str	r0, [r2, #0]
}
 800132a:	4770      	bx	lr
 800132c:	4002100c 	.word	0x4002100c

08001330 <rcc_set_msi_range>:
*
 * @param msi_range desired range @ref rcc_icscr_msirange
 */
void rcc_set_msi_range(uint32_t msi_range)
{
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8001330:	4a03      	ldr	r2, [pc, #12]	; (8001340 <rcc_set_msi_range+0x10>)
 8001332:	4904      	ldr	r1, [pc, #16]	; (8001344 <rcc_set_msi_range+0x14>)
 8001334:	6813      	ldr	r3, [r2, #0]
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8001336:	0340      	lsls	r0, r0, #13
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8001338:	400b      	ands	r3, r1
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 800133a:	4318      	orrs	r0, r3
 800133c:	6010      	str	r0, [r2, #0]
}
 800133e:	4770      	bx	lr
 8001340:	40021004 	.word	0x40021004
 8001344:	ffff1fff 	.word	0xffff1fff

08001348 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <rcc_periph_clock_enable+0x18>)
 800134a:	0942      	lsrs	r2, r0, #5
 800134c:	18d2      	adds	r2, r2, r3
 800134e:	231f      	movs	r3, #31
 8001350:	4018      	ands	r0, r3
 8001352:	3b1e      	subs	r3, #30
 8001354:	4083      	lsls	r3, r0
 8001356:	6811      	ldr	r1, [r2, #0]
 8001358:	430b      	orrs	r3, r1
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	4770      	bx	lr
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	40021000 	.word	0x40021000

08001364 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <rcc_periph_reset_pulse+0x1c>)
 8001366:	0943      	lsrs	r3, r0, #5
 8001368:	189b      	adds	r3, r3, r2
 800136a:	221f      	movs	r2, #31
 800136c:	4010      	ands	r0, r2
 800136e:	3a1e      	subs	r2, #30
 8001370:	4082      	lsls	r2, r0
 8001372:	6819      	ldr	r1, [r3, #0]
 8001374:	4311      	orrs	r1, r2
 8001376:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 8001378:	6819      	ldr	r1, [r3, #0]
 800137a:	4391      	bics	r1, r2
 800137c:	6019      	str	r1, [r3, #0]
}
 800137e:	4770      	bx	lr
 8001380:	40021000 	.word	0x40021000

08001384 <rtc_unlock>:
/** @brief Unlock write access to the RTC registers

*/
void rtc_unlock(void)
{
	RTC_WPR = 0xca;
 8001384:	22ca      	movs	r2, #202	; 0xca
 8001386:	4b02      	ldr	r3, [pc, #8]	; (8001390 <rtc_unlock+0xc>)
 8001388:	601a      	str	r2, [r3, #0]
	RTC_WPR = 0x53;
 800138a:	3a77      	subs	r2, #119	; 0x77
 800138c:	601a      	str	r2, [r3, #0]
}
 800138e:	4770      	bx	lr
 8001390:	40002824 	.word	0x40002824

08001394 <rtc_lock>:
/** @brief Lock write access to the RTC registers

*/
void rtc_lock(void)
{
	RTC_WPR = 0xff;
 8001394:	22ff      	movs	r2, #255	; 0xff
 8001396:	4b01      	ldr	r3, [pc, #4]	; (800139c <rtc_lock+0x8>)
 8001398:	601a      	str	r2, [r3, #0]
}
 800139a:	4770      	bx	lr
 800139c:	40002824 	.word	0x40002824

080013a0 <rtc_clear_wakeup_flag>:

@details This function should be called first in the rtc_wkup_isr()
*/
void rtc_clear_wakeup_flag(void)
{
	RTC_ISR &= ~RTC_ISR_WUTF;
 80013a0:	4a02      	ldr	r2, [pc, #8]	; (80013ac <rtc_clear_wakeup_flag+0xc>)
 80013a2:	4903      	ldr	r1, [pc, #12]	; (80013b0 <rtc_clear_wakeup_flag+0x10>)
 80013a4:	6813      	ldr	r3, [r2, #0]
 80013a6:	400b      	ands	r3, r1
 80013a8:	6013      	str	r3, [r2, #0]
}
 80013aa:	4770      	bx	lr
 80013ac:	4000280c 	.word	0x4000280c
 80013b0:	fffffbff 	.word	0xfffffbff

080013b4 <spi_xfer>:
uint16_t spi_xfer(uint32_t spi, uint16_t data)
{
	spi_write(spi, data);

	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 80013b4:	2301      	movs	r3, #1
	SPI_DR(spi) = data;
 80013b6:	60c1      	str	r1, [r0, #12]
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 80013b8:	6882      	ldr	r2, [r0, #8]
 80013ba:	421a      	tst	r2, r3
 80013bc:	d0fc      	beq.n	80013b8 <spi_xfer+0x4>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 80013be:	68c0      	ldr	r0, [r0, #12]
 80013c0:	b280      	uxth	r0, r0
}
 80013c2:	4770      	bx	lr

080013c4 <usart_set_baudrate>:
void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;

#if defined USART1
	if ((usart == USART1)
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <usart_set_baudrate+0x44>)
{
 80013c6:	b570      	push	{r4, r5, r6, lr}
 80013c8:	0005      	movs	r5, r0
 80013ca:	000c      	movs	r4, r1
 80013cc:	084e      	lsrs	r6, r1, #1
	if ((usart == USART1)
 80013ce:	4298      	cmp	r0, r3
 80013d0:	d107      	bne.n	80013e2 <usart_set_baudrate+0x1e>
#if defined USART6
		|| (usart == USART6)
#endif
		) {
		clock = rcc_apb2_frequency;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <usart_set_baudrate+0x48>)
 80013d4:	6818      	ldr	r0, [r3, #0]
			+ ((clock % baud) * 256 + baud / 2) / baud;
		return;
	}
#endif

	USART_BRR(usart) = (clock + baud / 2) / baud;
 80013d6:	0021      	movs	r1, r4
 80013d8:	1830      	adds	r0, r6, r0
 80013da:	f000 f8bf 	bl	800155c <__udivsi3>
 80013de:	60e8      	str	r0, [r5, #12]
 80013e0:	e010      	b.n	8001404 <usart_set_baudrate+0x40>
	uint32_t clock = rcc_apb1_frequency;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <usart_set_baudrate+0x4c>)
 80013e4:	6818      	ldr	r0, [r3, #0]
	if (usart == LPUART1) {
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <usart_set_baudrate+0x50>)
 80013e8:	429d      	cmp	r5, r3
 80013ea:	d1f4      	bne.n	80013d6 <usart_set_baudrate+0x12>
		USART_BRR(usart) = (clock / baud) * 256
 80013ec:	f000 f93c 	bl	8001668 <__aeabi_uidivmod>
 80013f0:	0005      	movs	r5, r0
			+ ((clock % baud) * 256 + baud / 2) / baud;
 80013f2:	0208      	lsls	r0, r1, #8
 80013f4:	1980      	adds	r0, r0, r6
 80013f6:	0021      	movs	r1, r4
 80013f8:	f000 f8b0 	bl	800155c <__udivsi3>
		USART_BRR(usart) = (clock / baud) * 256
 80013fc:	022d      	lsls	r5, r5, #8
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <usart_set_baudrate+0x54>)
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8001400:	1940      	adds	r0, r0, r5
		USART_BRR(usart) = (clock / baud) * 256
 8001402:	6018      	str	r0, [r3, #0]
}
 8001404:	bd70      	pop	{r4, r5, r6, pc}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	40013800 	.word	0x40013800
 800140c:	2000000c 	.word	0x2000000c
 8001410:	20000008 	.word	0x20000008
 8001414:	40004800 	.word	0x40004800
 8001418:	4000480c 	.word	0x4000480c

0800141c <usart_set_databits>:
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
 800141c:	2908      	cmp	r1, #8
 800141e:	d104      	bne.n	800142a <usart_set_databits+0xe>
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 8001420:	6803      	ldr	r3, [r0, #0]
 8001422:	4a04      	ldr	r2, [pc, #16]	; (8001434 <usart_set_databits+0x18>)
 8001424:	4013      	ands	r3, r2
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8001426:	6003      	str	r3, [r0, #0]
	}
}
 8001428:	4770      	bx	lr
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	6802      	ldr	r2, [r0, #0]
 800142e:	015b      	lsls	r3, r3, #5
 8001430:	4313      	orrs	r3, r2
 8001432:	e7f8      	b.n	8001426 <usart_set_databits+0xa>
 8001434:	ffffefff 	.word	0xffffefff

08001438 <usart_set_stopbits>:

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 8001438:	6843      	ldr	r3, [r0, #4]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 800143a:	4a02      	ldr	r2, [pc, #8]	; (8001444 <usart_set_stopbits+0xc>)
 800143c:	4013      	ands	r3, r2
 800143e:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 8001440:	6043      	str	r3, [r0, #4]
}
 8001442:	4770      	bx	lr
 8001444:	ffffcfff 	.word	0xffffcfff

08001448 <usart_set_parity>:

void usart_set_parity(uint32_t usart, uint32_t parity)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 8001448:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 800144a:	4a02      	ldr	r2, [pc, #8]	; (8001454 <usart_set_parity+0xc>)
 800144c:	4013      	ands	r3, r2
 800144e:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8001450:	6003      	str	r3, [r0, #0]
}
 8001452:	4770      	bx	lr
 8001454:	fffff9ff 	.word	0xfffff9ff

08001458 <usart_set_mode>:
void usart_set_mode(uint32_t usart, uint32_t mode)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8001458:	220c      	movs	r2, #12
	reg32 = USART_CR1(usart);
 800145a:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 800145c:	4393      	bics	r3, r2
 800145e:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8001460:	6003      	str	r3, [r0, #0]
}
 8001462:	4770      	bx	lr

08001464 <usart_set_flow_control>:

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 8001464:	6883      	ldr	r3, [r0, #8]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 8001466:	4a02      	ldr	r2, [pc, #8]	; (8001470 <usart_set_flow_control+0xc>)
 8001468:	4013      	ands	r3, r2
 800146a:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 800146c:	6083      	str	r3, [r0, #8]
}
 800146e:	4770      	bx	lr
 8001470:	fffffcff 	.word	0xfffffcff

08001474 <usart_enable>:
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 8001474:	2301      	movs	r3, #1
 8001476:	6802      	ldr	r2, [r0, #0]
 8001478:	4313      	orrs	r3, r2
 800147a:	6003      	str	r3, [r0, #0]
}
 800147c:	4770      	bx	lr

0800147e <usart_disable>:
usart_reg_base
*/

void usart_disable(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_UE;
 800147e:	2201      	movs	r2, #1
 8001480:	6803      	ldr	r3, [r0, #0]
 8001482:	4393      	bics	r3, r2
 8001484:	6003      	str	r3, [r0, #0]
}
 8001486:	4770      	bx	lr

08001488 <usart_send_blocking>:
usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(uint32_t usart, uint16_t data)
{
 8001488:	b570      	push	{r4, r5, r6, lr}
 800148a:	000d      	movs	r5, r1
 800148c:	0004      	movs	r4, r0
	usart_wait_send_ready(usart);
 800148e:	f000 f809 	bl	80014a4 <usart_wait_send_ready>
	usart_send(usart, data);
 8001492:	0029      	movs	r1, r5
 8001494:	0020      	movs	r0, r4
 8001496:	f000 f801 	bl	800149c <usart_send>
}
 800149a:	bd70      	pop	{r4, r5, r6, pc}

0800149c <usart_send>:
 */

void usart_send(uint32_t usart, uint16_t data)
{
	/* Send data. */
	USART_TDR(usart) = (data & USART_TDR_MASK);
 800149c:	05c9      	lsls	r1, r1, #23
 800149e:	0dc9      	lsrs	r1, r1, #23
 80014a0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80014a2:	4770      	bx	lr

080014a4 <usart_wait_send_ready>:
 */

void usart_wait_send_ready(uint32_t usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_ISR(usart) & USART_ISR_TXE) == 0);
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	69c2      	ldr	r2, [r0, #28]
 80014a8:	421a      	tst	r2, r3
 80014aa:	d0fc      	beq.n	80014a6 <usart_wait_send_ready+0x2>
}
 80014ac:	4770      	bx	lr

080014ae <usart_get_flag>:
 * @returns boolean: flag set.
 */

bool usart_get_flag(uint32_t usart, uint32_t flag)
{
	return ((USART_ISR(usart) & flag) != 0);
 80014ae:	69c0      	ldr	r0, [r0, #28]
 80014b0:	4008      	ands	r0, r1
 80014b2:	1e41      	subs	r1, r0, #1
 80014b4:	4188      	sbcs	r0, r1
 80014b6:	b2c0      	uxtb	r0, r0
}
 80014b8:	4770      	bx	lr

080014ba <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 80014ba:	e7fe      	b.n	80014ba <blocking_handler>

080014bc <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 80014bc:	4770      	bx	lr
	...

080014c0 <reset_handler>:
{
 80014c0:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <reset_handler+0x5c>)
 80014c4:	4a16      	ldr	r2, [pc, #88]	; (8001520 <reset_handler+0x60>)
 80014c6:	4917      	ldr	r1, [pc, #92]	; (8001524 <reset_handler+0x64>)
 80014c8:	428b      	cmp	r3, r1
 80014ca:	d318      	bcc.n	80014fe <reset_handler+0x3e>
		*dest++ = 0;
 80014cc:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 80014ce:	4a16      	ldr	r2, [pc, #88]	; (8001528 <reset_handler+0x68>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d317      	bcc.n	8001504 <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	4a15      	ldr	r2, [pc, #84]	; (800152c <reset_handler+0x6c>)
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 80014dc:	4c14      	ldr	r4, [pc, #80]	; (8001530 <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 80014de:	430b      	orrs	r3, r1
 80014e0:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 80014e2:	4b14      	ldr	r3, [pc, #80]	; (8001534 <reset_handler+0x74>)
 80014e4:	429c      	cmp	r4, r3
 80014e6:	d30f      	bcc.n	8001508 <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 80014e8:	4c13      	ldr	r4, [pc, #76]	; (8001538 <reset_handler+0x78>)
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <reset_handler+0x7c>)
 80014ec:	429c      	cmp	r4, r3
 80014ee:	d30e      	bcc.n	800150e <reset_handler+0x4e>
	(void)main();
 80014f0:	f7fe fde6 	bl	80000c0 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 80014f4:	4c12      	ldr	r4, [pc, #72]	; (8001540 <reset_handler+0x80>)
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <reset_handler+0x84>)
 80014f8:	429c      	cmp	r4, r3
 80014fa:	d30b      	bcc.n	8001514 <reset_handler+0x54>
}
 80014fc:	bd10      	pop	{r4, pc}
		*dest = *src;
 80014fe:	ca01      	ldmia	r2!, {r0}
 8001500:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 8001502:	e7e1      	b.n	80014c8 <reset_handler+0x8>
		*dest++ = 0;
 8001504:	c302      	stmia	r3!, {r1}
 8001506:	e7e3      	b.n	80014d0 <reset_handler+0x10>
		(*fp)();
 8001508:	cc08      	ldmia	r4!, {r3}
 800150a:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 800150c:	e7e9      	b.n	80014e2 <reset_handler+0x22>
		(*fp)();
 800150e:	cc08      	ldmia	r4!, {r3}
 8001510:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8001512:	e7ea      	b.n	80014ea <reset_handler+0x2a>
		(*fp)();
 8001514:	cc08      	ldmia	r4!, {r3}
 8001516:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001518:	e7ed      	b.n	80014f6 <reset_handler+0x36>
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	20000000 	.word	0x20000000
 8001520:	08002b18 	.word	0x08002b18
 8001524:	20000010 	.word	0x20000010
 8001528:	2000019c 	.word	0x2000019c
 800152c:	e000ed14 	.word	0xe000ed14
 8001530:	08002b18 	.word	0x08002b18
 8001534:	08002b18 	.word	0x08002b18
 8001538:	08002b18 	.word	0x08002b18
 800153c:	08002b18 	.word	0x08002b18
 8001540:	08002b18 	.word	0x08002b18
 8001544:	08002b18 	.word	0x08002b18

08001548 <__gnu_thumb1_case_uqi>:
 8001548:	b402      	push	{r1}
 800154a:	4671      	mov	r1, lr
 800154c:	0849      	lsrs	r1, r1, #1
 800154e:	0049      	lsls	r1, r1, #1
 8001550:	5c09      	ldrb	r1, [r1, r0]
 8001552:	0049      	lsls	r1, r1, #1
 8001554:	448e      	add	lr, r1
 8001556:	bc02      	pop	{r1}
 8001558:	4770      	bx	lr
 800155a:	46c0      	nop			; (mov r8, r8)

0800155c <__udivsi3>:
 800155c:	2200      	movs	r2, #0
 800155e:	0843      	lsrs	r3, r0, #1
 8001560:	428b      	cmp	r3, r1
 8001562:	d374      	bcc.n	800164e <__udivsi3+0xf2>
 8001564:	0903      	lsrs	r3, r0, #4
 8001566:	428b      	cmp	r3, r1
 8001568:	d35f      	bcc.n	800162a <__udivsi3+0xce>
 800156a:	0a03      	lsrs	r3, r0, #8
 800156c:	428b      	cmp	r3, r1
 800156e:	d344      	bcc.n	80015fa <__udivsi3+0x9e>
 8001570:	0b03      	lsrs	r3, r0, #12
 8001572:	428b      	cmp	r3, r1
 8001574:	d328      	bcc.n	80015c8 <__udivsi3+0x6c>
 8001576:	0c03      	lsrs	r3, r0, #16
 8001578:	428b      	cmp	r3, r1
 800157a:	d30d      	bcc.n	8001598 <__udivsi3+0x3c>
 800157c:	22ff      	movs	r2, #255	; 0xff
 800157e:	0209      	lsls	r1, r1, #8
 8001580:	ba12      	rev	r2, r2
 8001582:	0c03      	lsrs	r3, r0, #16
 8001584:	428b      	cmp	r3, r1
 8001586:	d302      	bcc.n	800158e <__udivsi3+0x32>
 8001588:	1212      	asrs	r2, r2, #8
 800158a:	0209      	lsls	r1, r1, #8
 800158c:	d065      	beq.n	800165a <__udivsi3+0xfe>
 800158e:	0b03      	lsrs	r3, r0, #12
 8001590:	428b      	cmp	r3, r1
 8001592:	d319      	bcc.n	80015c8 <__udivsi3+0x6c>
 8001594:	e000      	b.n	8001598 <__udivsi3+0x3c>
 8001596:	0a09      	lsrs	r1, r1, #8
 8001598:	0bc3      	lsrs	r3, r0, #15
 800159a:	428b      	cmp	r3, r1
 800159c:	d301      	bcc.n	80015a2 <__udivsi3+0x46>
 800159e:	03cb      	lsls	r3, r1, #15
 80015a0:	1ac0      	subs	r0, r0, r3
 80015a2:	4152      	adcs	r2, r2
 80015a4:	0b83      	lsrs	r3, r0, #14
 80015a6:	428b      	cmp	r3, r1
 80015a8:	d301      	bcc.n	80015ae <__udivsi3+0x52>
 80015aa:	038b      	lsls	r3, r1, #14
 80015ac:	1ac0      	subs	r0, r0, r3
 80015ae:	4152      	adcs	r2, r2
 80015b0:	0b43      	lsrs	r3, r0, #13
 80015b2:	428b      	cmp	r3, r1
 80015b4:	d301      	bcc.n	80015ba <__udivsi3+0x5e>
 80015b6:	034b      	lsls	r3, r1, #13
 80015b8:	1ac0      	subs	r0, r0, r3
 80015ba:	4152      	adcs	r2, r2
 80015bc:	0b03      	lsrs	r3, r0, #12
 80015be:	428b      	cmp	r3, r1
 80015c0:	d301      	bcc.n	80015c6 <__udivsi3+0x6a>
 80015c2:	030b      	lsls	r3, r1, #12
 80015c4:	1ac0      	subs	r0, r0, r3
 80015c6:	4152      	adcs	r2, r2
 80015c8:	0ac3      	lsrs	r3, r0, #11
 80015ca:	428b      	cmp	r3, r1
 80015cc:	d301      	bcc.n	80015d2 <__udivsi3+0x76>
 80015ce:	02cb      	lsls	r3, r1, #11
 80015d0:	1ac0      	subs	r0, r0, r3
 80015d2:	4152      	adcs	r2, r2
 80015d4:	0a83      	lsrs	r3, r0, #10
 80015d6:	428b      	cmp	r3, r1
 80015d8:	d301      	bcc.n	80015de <__udivsi3+0x82>
 80015da:	028b      	lsls	r3, r1, #10
 80015dc:	1ac0      	subs	r0, r0, r3
 80015de:	4152      	adcs	r2, r2
 80015e0:	0a43      	lsrs	r3, r0, #9
 80015e2:	428b      	cmp	r3, r1
 80015e4:	d301      	bcc.n	80015ea <__udivsi3+0x8e>
 80015e6:	024b      	lsls	r3, r1, #9
 80015e8:	1ac0      	subs	r0, r0, r3
 80015ea:	4152      	adcs	r2, r2
 80015ec:	0a03      	lsrs	r3, r0, #8
 80015ee:	428b      	cmp	r3, r1
 80015f0:	d301      	bcc.n	80015f6 <__udivsi3+0x9a>
 80015f2:	020b      	lsls	r3, r1, #8
 80015f4:	1ac0      	subs	r0, r0, r3
 80015f6:	4152      	adcs	r2, r2
 80015f8:	d2cd      	bcs.n	8001596 <__udivsi3+0x3a>
 80015fa:	09c3      	lsrs	r3, r0, #7
 80015fc:	428b      	cmp	r3, r1
 80015fe:	d301      	bcc.n	8001604 <__udivsi3+0xa8>
 8001600:	01cb      	lsls	r3, r1, #7
 8001602:	1ac0      	subs	r0, r0, r3
 8001604:	4152      	adcs	r2, r2
 8001606:	0983      	lsrs	r3, r0, #6
 8001608:	428b      	cmp	r3, r1
 800160a:	d301      	bcc.n	8001610 <__udivsi3+0xb4>
 800160c:	018b      	lsls	r3, r1, #6
 800160e:	1ac0      	subs	r0, r0, r3
 8001610:	4152      	adcs	r2, r2
 8001612:	0943      	lsrs	r3, r0, #5
 8001614:	428b      	cmp	r3, r1
 8001616:	d301      	bcc.n	800161c <__udivsi3+0xc0>
 8001618:	014b      	lsls	r3, r1, #5
 800161a:	1ac0      	subs	r0, r0, r3
 800161c:	4152      	adcs	r2, r2
 800161e:	0903      	lsrs	r3, r0, #4
 8001620:	428b      	cmp	r3, r1
 8001622:	d301      	bcc.n	8001628 <__udivsi3+0xcc>
 8001624:	010b      	lsls	r3, r1, #4
 8001626:	1ac0      	subs	r0, r0, r3
 8001628:	4152      	adcs	r2, r2
 800162a:	08c3      	lsrs	r3, r0, #3
 800162c:	428b      	cmp	r3, r1
 800162e:	d301      	bcc.n	8001634 <__udivsi3+0xd8>
 8001630:	00cb      	lsls	r3, r1, #3
 8001632:	1ac0      	subs	r0, r0, r3
 8001634:	4152      	adcs	r2, r2
 8001636:	0883      	lsrs	r3, r0, #2
 8001638:	428b      	cmp	r3, r1
 800163a:	d301      	bcc.n	8001640 <__udivsi3+0xe4>
 800163c:	008b      	lsls	r3, r1, #2
 800163e:	1ac0      	subs	r0, r0, r3
 8001640:	4152      	adcs	r2, r2
 8001642:	0843      	lsrs	r3, r0, #1
 8001644:	428b      	cmp	r3, r1
 8001646:	d301      	bcc.n	800164c <__udivsi3+0xf0>
 8001648:	004b      	lsls	r3, r1, #1
 800164a:	1ac0      	subs	r0, r0, r3
 800164c:	4152      	adcs	r2, r2
 800164e:	1a41      	subs	r1, r0, r1
 8001650:	d200      	bcs.n	8001654 <__udivsi3+0xf8>
 8001652:	4601      	mov	r1, r0
 8001654:	4152      	adcs	r2, r2
 8001656:	4610      	mov	r0, r2
 8001658:	4770      	bx	lr
 800165a:	e7ff      	b.n	800165c <__udivsi3+0x100>
 800165c:	b501      	push	{r0, lr}
 800165e:	2000      	movs	r0, #0
 8001660:	f000 f8f0 	bl	8001844 <__aeabi_idiv0>
 8001664:	bd02      	pop	{r1, pc}
 8001666:	46c0      	nop			; (mov r8, r8)

08001668 <__aeabi_uidivmod>:
 8001668:	2900      	cmp	r1, #0
 800166a:	d0f7      	beq.n	800165c <__udivsi3+0x100>
 800166c:	e776      	b.n	800155c <__udivsi3>
 800166e:	4770      	bx	lr

08001670 <__divsi3>:
 8001670:	4603      	mov	r3, r0
 8001672:	430b      	orrs	r3, r1
 8001674:	d47f      	bmi.n	8001776 <__divsi3+0x106>
 8001676:	2200      	movs	r2, #0
 8001678:	0843      	lsrs	r3, r0, #1
 800167a:	428b      	cmp	r3, r1
 800167c:	d374      	bcc.n	8001768 <__divsi3+0xf8>
 800167e:	0903      	lsrs	r3, r0, #4
 8001680:	428b      	cmp	r3, r1
 8001682:	d35f      	bcc.n	8001744 <__divsi3+0xd4>
 8001684:	0a03      	lsrs	r3, r0, #8
 8001686:	428b      	cmp	r3, r1
 8001688:	d344      	bcc.n	8001714 <__divsi3+0xa4>
 800168a:	0b03      	lsrs	r3, r0, #12
 800168c:	428b      	cmp	r3, r1
 800168e:	d328      	bcc.n	80016e2 <__divsi3+0x72>
 8001690:	0c03      	lsrs	r3, r0, #16
 8001692:	428b      	cmp	r3, r1
 8001694:	d30d      	bcc.n	80016b2 <__divsi3+0x42>
 8001696:	22ff      	movs	r2, #255	; 0xff
 8001698:	0209      	lsls	r1, r1, #8
 800169a:	ba12      	rev	r2, r2
 800169c:	0c03      	lsrs	r3, r0, #16
 800169e:	428b      	cmp	r3, r1
 80016a0:	d302      	bcc.n	80016a8 <__divsi3+0x38>
 80016a2:	1212      	asrs	r2, r2, #8
 80016a4:	0209      	lsls	r1, r1, #8
 80016a6:	d065      	beq.n	8001774 <__divsi3+0x104>
 80016a8:	0b03      	lsrs	r3, r0, #12
 80016aa:	428b      	cmp	r3, r1
 80016ac:	d319      	bcc.n	80016e2 <__divsi3+0x72>
 80016ae:	e000      	b.n	80016b2 <__divsi3+0x42>
 80016b0:	0a09      	lsrs	r1, r1, #8
 80016b2:	0bc3      	lsrs	r3, r0, #15
 80016b4:	428b      	cmp	r3, r1
 80016b6:	d301      	bcc.n	80016bc <__divsi3+0x4c>
 80016b8:	03cb      	lsls	r3, r1, #15
 80016ba:	1ac0      	subs	r0, r0, r3
 80016bc:	4152      	adcs	r2, r2
 80016be:	0b83      	lsrs	r3, r0, #14
 80016c0:	428b      	cmp	r3, r1
 80016c2:	d301      	bcc.n	80016c8 <__divsi3+0x58>
 80016c4:	038b      	lsls	r3, r1, #14
 80016c6:	1ac0      	subs	r0, r0, r3
 80016c8:	4152      	adcs	r2, r2
 80016ca:	0b43      	lsrs	r3, r0, #13
 80016cc:	428b      	cmp	r3, r1
 80016ce:	d301      	bcc.n	80016d4 <__divsi3+0x64>
 80016d0:	034b      	lsls	r3, r1, #13
 80016d2:	1ac0      	subs	r0, r0, r3
 80016d4:	4152      	adcs	r2, r2
 80016d6:	0b03      	lsrs	r3, r0, #12
 80016d8:	428b      	cmp	r3, r1
 80016da:	d301      	bcc.n	80016e0 <__divsi3+0x70>
 80016dc:	030b      	lsls	r3, r1, #12
 80016de:	1ac0      	subs	r0, r0, r3
 80016e0:	4152      	adcs	r2, r2
 80016e2:	0ac3      	lsrs	r3, r0, #11
 80016e4:	428b      	cmp	r3, r1
 80016e6:	d301      	bcc.n	80016ec <__divsi3+0x7c>
 80016e8:	02cb      	lsls	r3, r1, #11
 80016ea:	1ac0      	subs	r0, r0, r3
 80016ec:	4152      	adcs	r2, r2
 80016ee:	0a83      	lsrs	r3, r0, #10
 80016f0:	428b      	cmp	r3, r1
 80016f2:	d301      	bcc.n	80016f8 <__divsi3+0x88>
 80016f4:	028b      	lsls	r3, r1, #10
 80016f6:	1ac0      	subs	r0, r0, r3
 80016f8:	4152      	adcs	r2, r2
 80016fa:	0a43      	lsrs	r3, r0, #9
 80016fc:	428b      	cmp	r3, r1
 80016fe:	d301      	bcc.n	8001704 <__divsi3+0x94>
 8001700:	024b      	lsls	r3, r1, #9
 8001702:	1ac0      	subs	r0, r0, r3
 8001704:	4152      	adcs	r2, r2
 8001706:	0a03      	lsrs	r3, r0, #8
 8001708:	428b      	cmp	r3, r1
 800170a:	d301      	bcc.n	8001710 <__divsi3+0xa0>
 800170c:	020b      	lsls	r3, r1, #8
 800170e:	1ac0      	subs	r0, r0, r3
 8001710:	4152      	adcs	r2, r2
 8001712:	d2cd      	bcs.n	80016b0 <__divsi3+0x40>
 8001714:	09c3      	lsrs	r3, r0, #7
 8001716:	428b      	cmp	r3, r1
 8001718:	d301      	bcc.n	800171e <__divsi3+0xae>
 800171a:	01cb      	lsls	r3, r1, #7
 800171c:	1ac0      	subs	r0, r0, r3
 800171e:	4152      	adcs	r2, r2
 8001720:	0983      	lsrs	r3, r0, #6
 8001722:	428b      	cmp	r3, r1
 8001724:	d301      	bcc.n	800172a <__divsi3+0xba>
 8001726:	018b      	lsls	r3, r1, #6
 8001728:	1ac0      	subs	r0, r0, r3
 800172a:	4152      	adcs	r2, r2
 800172c:	0943      	lsrs	r3, r0, #5
 800172e:	428b      	cmp	r3, r1
 8001730:	d301      	bcc.n	8001736 <__divsi3+0xc6>
 8001732:	014b      	lsls	r3, r1, #5
 8001734:	1ac0      	subs	r0, r0, r3
 8001736:	4152      	adcs	r2, r2
 8001738:	0903      	lsrs	r3, r0, #4
 800173a:	428b      	cmp	r3, r1
 800173c:	d301      	bcc.n	8001742 <__divsi3+0xd2>
 800173e:	010b      	lsls	r3, r1, #4
 8001740:	1ac0      	subs	r0, r0, r3
 8001742:	4152      	adcs	r2, r2
 8001744:	08c3      	lsrs	r3, r0, #3
 8001746:	428b      	cmp	r3, r1
 8001748:	d301      	bcc.n	800174e <__divsi3+0xde>
 800174a:	00cb      	lsls	r3, r1, #3
 800174c:	1ac0      	subs	r0, r0, r3
 800174e:	4152      	adcs	r2, r2
 8001750:	0883      	lsrs	r3, r0, #2
 8001752:	428b      	cmp	r3, r1
 8001754:	d301      	bcc.n	800175a <__divsi3+0xea>
 8001756:	008b      	lsls	r3, r1, #2
 8001758:	1ac0      	subs	r0, r0, r3
 800175a:	4152      	adcs	r2, r2
 800175c:	0843      	lsrs	r3, r0, #1
 800175e:	428b      	cmp	r3, r1
 8001760:	d301      	bcc.n	8001766 <__divsi3+0xf6>
 8001762:	004b      	lsls	r3, r1, #1
 8001764:	1ac0      	subs	r0, r0, r3
 8001766:	4152      	adcs	r2, r2
 8001768:	1a41      	subs	r1, r0, r1
 800176a:	d200      	bcs.n	800176e <__divsi3+0xfe>
 800176c:	4601      	mov	r1, r0
 800176e:	4152      	adcs	r2, r2
 8001770:	4610      	mov	r0, r2
 8001772:	4770      	bx	lr
 8001774:	e05d      	b.n	8001832 <__divsi3+0x1c2>
 8001776:	0fca      	lsrs	r2, r1, #31
 8001778:	d000      	beq.n	800177c <__divsi3+0x10c>
 800177a:	4249      	negs	r1, r1
 800177c:	1003      	asrs	r3, r0, #32
 800177e:	d300      	bcc.n	8001782 <__divsi3+0x112>
 8001780:	4240      	negs	r0, r0
 8001782:	4053      	eors	r3, r2
 8001784:	2200      	movs	r2, #0
 8001786:	469c      	mov	ip, r3
 8001788:	0903      	lsrs	r3, r0, #4
 800178a:	428b      	cmp	r3, r1
 800178c:	d32d      	bcc.n	80017ea <__divsi3+0x17a>
 800178e:	0a03      	lsrs	r3, r0, #8
 8001790:	428b      	cmp	r3, r1
 8001792:	d312      	bcc.n	80017ba <__divsi3+0x14a>
 8001794:	22fc      	movs	r2, #252	; 0xfc
 8001796:	0189      	lsls	r1, r1, #6
 8001798:	ba12      	rev	r2, r2
 800179a:	0a03      	lsrs	r3, r0, #8
 800179c:	428b      	cmp	r3, r1
 800179e:	d30c      	bcc.n	80017ba <__divsi3+0x14a>
 80017a0:	0189      	lsls	r1, r1, #6
 80017a2:	1192      	asrs	r2, r2, #6
 80017a4:	428b      	cmp	r3, r1
 80017a6:	d308      	bcc.n	80017ba <__divsi3+0x14a>
 80017a8:	0189      	lsls	r1, r1, #6
 80017aa:	1192      	asrs	r2, r2, #6
 80017ac:	428b      	cmp	r3, r1
 80017ae:	d304      	bcc.n	80017ba <__divsi3+0x14a>
 80017b0:	0189      	lsls	r1, r1, #6
 80017b2:	d03a      	beq.n	800182a <__divsi3+0x1ba>
 80017b4:	1192      	asrs	r2, r2, #6
 80017b6:	e000      	b.n	80017ba <__divsi3+0x14a>
 80017b8:	0989      	lsrs	r1, r1, #6
 80017ba:	09c3      	lsrs	r3, r0, #7
 80017bc:	428b      	cmp	r3, r1
 80017be:	d301      	bcc.n	80017c4 <__divsi3+0x154>
 80017c0:	01cb      	lsls	r3, r1, #7
 80017c2:	1ac0      	subs	r0, r0, r3
 80017c4:	4152      	adcs	r2, r2
 80017c6:	0983      	lsrs	r3, r0, #6
 80017c8:	428b      	cmp	r3, r1
 80017ca:	d301      	bcc.n	80017d0 <__divsi3+0x160>
 80017cc:	018b      	lsls	r3, r1, #6
 80017ce:	1ac0      	subs	r0, r0, r3
 80017d0:	4152      	adcs	r2, r2
 80017d2:	0943      	lsrs	r3, r0, #5
 80017d4:	428b      	cmp	r3, r1
 80017d6:	d301      	bcc.n	80017dc <__divsi3+0x16c>
 80017d8:	014b      	lsls	r3, r1, #5
 80017da:	1ac0      	subs	r0, r0, r3
 80017dc:	4152      	adcs	r2, r2
 80017de:	0903      	lsrs	r3, r0, #4
 80017e0:	428b      	cmp	r3, r1
 80017e2:	d301      	bcc.n	80017e8 <__divsi3+0x178>
 80017e4:	010b      	lsls	r3, r1, #4
 80017e6:	1ac0      	subs	r0, r0, r3
 80017e8:	4152      	adcs	r2, r2
 80017ea:	08c3      	lsrs	r3, r0, #3
 80017ec:	428b      	cmp	r3, r1
 80017ee:	d301      	bcc.n	80017f4 <__divsi3+0x184>
 80017f0:	00cb      	lsls	r3, r1, #3
 80017f2:	1ac0      	subs	r0, r0, r3
 80017f4:	4152      	adcs	r2, r2
 80017f6:	0883      	lsrs	r3, r0, #2
 80017f8:	428b      	cmp	r3, r1
 80017fa:	d301      	bcc.n	8001800 <__divsi3+0x190>
 80017fc:	008b      	lsls	r3, r1, #2
 80017fe:	1ac0      	subs	r0, r0, r3
 8001800:	4152      	adcs	r2, r2
 8001802:	d2d9      	bcs.n	80017b8 <__divsi3+0x148>
 8001804:	0843      	lsrs	r3, r0, #1
 8001806:	428b      	cmp	r3, r1
 8001808:	d301      	bcc.n	800180e <__divsi3+0x19e>
 800180a:	004b      	lsls	r3, r1, #1
 800180c:	1ac0      	subs	r0, r0, r3
 800180e:	4152      	adcs	r2, r2
 8001810:	1a41      	subs	r1, r0, r1
 8001812:	d200      	bcs.n	8001816 <__divsi3+0x1a6>
 8001814:	4601      	mov	r1, r0
 8001816:	4663      	mov	r3, ip
 8001818:	4152      	adcs	r2, r2
 800181a:	105b      	asrs	r3, r3, #1
 800181c:	4610      	mov	r0, r2
 800181e:	d301      	bcc.n	8001824 <__divsi3+0x1b4>
 8001820:	4240      	negs	r0, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d500      	bpl.n	8001828 <__divsi3+0x1b8>
 8001826:	4249      	negs	r1, r1
 8001828:	4770      	bx	lr
 800182a:	4663      	mov	r3, ip
 800182c:	105b      	asrs	r3, r3, #1
 800182e:	d300      	bcc.n	8001832 <__divsi3+0x1c2>
 8001830:	4240      	negs	r0, r0
 8001832:	b501      	push	{r0, lr}
 8001834:	2000      	movs	r0, #0
 8001836:	f000 f805 	bl	8001844 <__aeabi_idiv0>
 800183a:	bd02      	pop	{r1, pc}

0800183c <__aeabi_idivmod>:
 800183c:	2900      	cmp	r1, #0
 800183e:	d0f8      	beq.n	8001832 <__divsi3+0x1c2>
 8001840:	e716      	b.n	8001670 <__divsi3>
 8001842:	4770      	bx	lr

08001844 <__aeabi_idiv0>:
 8001844:	4770      	bx	lr
 8001846:	46c0      	nop			; (mov r8, r8)

08001848 <__aeabi_cdrcmple>:
 8001848:	4684      	mov	ip, r0
 800184a:	1c10      	adds	r0, r2, #0
 800184c:	4662      	mov	r2, ip
 800184e:	468c      	mov	ip, r1
 8001850:	1c19      	adds	r1, r3, #0
 8001852:	4663      	mov	r3, ip
 8001854:	e000      	b.n	8001858 <__aeabi_cdcmpeq>
 8001856:	46c0      	nop			; (mov r8, r8)

08001858 <__aeabi_cdcmpeq>:
 8001858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800185a:	f000 f8ff 	bl	8001a5c <__ledf2>
 800185e:	2800      	cmp	r0, #0
 8001860:	d401      	bmi.n	8001866 <__aeabi_cdcmpeq+0xe>
 8001862:	2100      	movs	r1, #0
 8001864:	42c8      	cmn	r0, r1
 8001866:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001868 <__aeabi_dcmpeq>:
 8001868:	b510      	push	{r4, lr}
 800186a:	f000 f849 	bl	8001900 <__eqdf2>
 800186e:	4240      	negs	r0, r0
 8001870:	3001      	adds	r0, #1
 8001872:	bd10      	pop	{r4, pc}

08001874 <__aeabi_dcmplt>:
 8001874:	b510      	push	{r4, lr}
 8001876:	f000 f8f1 	bl	8001a5c <__ledf2>
 800187a:	2800      	cmp	r0, #0
 800187c:	db01      	blt.n	8001882 <__aeabi_dcmplt+0xe>
 800187e:	2000      	movs	r0, #0
 8001880:	bd10      	pop	{r4, pc}
 8001882:	2001      	movs	r0, #1
 8001884:	bd10      	pop	{r4, pc}
 8001886:	46c0      	nop			; (mov r8, r8)

08001888 <__aeabi_dcmple>:
 8001888:	b510      	push	{r4, lr}
 800188a:	f000 f8e7 	bl	8001a5c <__ledf2>
 800188e:	2800      	cmp	r0, #0
 8001890:	dd01      	ble.n	8001896 <__aeabi_dcmple+0xe>
 8001892:	2000      	movs	r0, #0
 8001894:	bd10      	pop	{r4, pc}
 8001896:	2001      	movs	r0, #1
 8001898:	bd10      	pop	{r4, pc}
 800189a:	46c0      	nop			; (mov r8, r8)

0800189c <__aeabi_dcmpgt>:
 800189c:	b510      	push	{r4, lr}
 800189e:	f000 f86b 	bl	8001978 <__gedf2>
 80018a2:	2800      	cmp	r0, #0
 80018a4:	dc01      	bgt.n	80018aa <__aeabi_dcmpgt+0xe>
 80018a6:	2000      	movs	r0, #0
 80018a8:	bd10      	pop	{r4, pc}
 80018aa:	2001      	movs	r0, #1
 80018ac:	bd10      	pop	{r4, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)

080018b0 <__aeabi_dcmpge>:
 80018b0:	b510      	push	{r4, lr}
 80018b2:	f000 f861 	bl	8001978 <__gedf2>
 80018b6:	2800      	cmp	r0, #0
 80018b8:	da01      	bge.n	80018be <__aeabi_dcmpge+0xe>
 80018ba:	2000      	movs	r0, #0
 80018bc:	bd10      	pop	{r4, pc}
 80018be:	2001      	movs	r0, #1
 80018c0:	bd10      	pop	{r4, pc}
 80018c2:	46c0      	nop			; (mov r8, r8)

080018c4 <__aeabi_d2uiz>:
 80018c4:	b570      	push	{r4, r5, r6, lr}
 80018c6:	2200      	movs	r2, #0
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <__aeabi_d2uiz+0x38>)
 80018ca:	0004      	movs	r4, r0
 80018cc:	000d      	movs	r5, r1
 80018ce:	f7ff ffef 	bl	80018b0 <__aeabi_dcmpge>
 80018d2:	2800      	cmp	r0, #0
 80018d4:	d104      	bne.n	80018e0 <__aeabi_d2uiz+0x1c>
 80018d6:	0020      	movs	r0, r4
 80018d8:	0029      	movs	r1, r5
 80018da:	f000 ff2d 	bl	8002738 <__aeabi_d2iz>
 80018de:	bd70      	pop	{r4, r5, r6, pc}
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <__aeabi_d2uiz+0x38>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	0020      	movs	r0, r4
 80018e6:	0029      	movs	r1, r5
 80018e8:	f000 fb94 	bl	8002014 <__aeabi_dsub>
 80018ec:	f000 ff24 	bl	8002738 <__aeabi_d2iz>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	061b      	lsls	r3, r3, #24
 80018f4:	469c      	mov	ip, r3
 80018f6:	4460      	add	r0, ip
 80018f8:	e7f1      	b.n	80018de <__aeabi_d2uiz+0x1a>
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	41e00000 	.word	0x41e00000

08001900 <__eqdf2>:
 8001900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001902:	464f      	mov	r7, r9
 8001904:	4646      	mov	r6, r8
 8001906:	46d6      	mov	lr, sl
 8001908:	4694      	mov	ip, r2
 800190a:	4691      	mov	r9, r2
 800190c:	031a      	lsls	r2, r3, #12
 800190e:	0b12      	lsrs	r2, r2, #12
 8001910:	4d18      	ldr	r5, [pc, #96]	; (8001974 <__eqdf2+0x74>)
 8001912:	b5c0      	push	{r6, r7, lr}
 8001914:	004c      	lsls	r4, r1, #1
 8001916:	030f      	lsls	r7, r1, #12
 8001918:	4692      	mov	sl, r2
 800191a:	005a      	lsls	r2, r3, #1
 800191c:	0006      	movs	r6, r0
 800191e:	4680      	mov	r8, r0
 8001920:	0b3f      	lsrs	r7, r7, #12
 8001922:	2001      	movs	r0, #1
 8001924:	0d64      	lsrs	r4, r4, #21
 8001926:	0fc9      	lsrs	r1, r1, #31
 8001928:	0d52      	lsrs	r2, r2, #21
 800192a:	0fdb      	lsrs	r3, r3, #31
 800192c:	42ac      	cmp	r4, r5
 800192e:	d00a      	beq.n	8001946 <__eqdf2+0x46>
 8001930:	42aa      	cmp	r2, r5
 8001932:	d003      	beq.n	800193c <__eqdf2+0x3c>
 8001934:	4294      	cmp	r4, r2
 8001936:	d101      	bne.n	800193c <__eqdf2+0x3c>
 8001938:	4557      	cmp	r7, sl
 800193a:	d00d      	beq.n	8001958 <__eqdf2+0x58>
 800193c:	bce0      	pop	{r5, r6, r7}
 800193e:	46ba      	mov	sl, r7
 8001940:	46b1      	mov	r9, r6
 8001942:	46a8      	mov	r8, r5
 8001944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001946:	003d      	movs	r5, r7
 8001948:	4335      	orrs	r5, r6
 800194a:	d1f7      	bne.n	800193c <__eqdf2+0x3c>
 800194c:	42a2      	cmp	r2, r4
 800194e:	d1f5      	bne.n	800193c <__eqdf2+0x3c>
 8001950:	4652      	mov	r2, sl
 8001952:	4665      	mov	r5, ip
 8001954:	432a      	orrs	r2, r5
 8001956:	d1f1      	bne.n	800193c <__eqdf2+0x3c>
 8001958:	2001      	movs	r0, #1
 800195a:	45c8      	cmp	r8, r9
 800195c:	d1ee      	bne.n	800193c <__eqdf2+0x3c>
 800195e:	4299      	cmp	r1, r3
 8001960:	d006      	beq.n	8001970 <__eqdf2+0x70>
 8001962:	2c00      	cmp	r4, #0
 8001964:	d1ea      	bne.n	800193c <__eqdf2+0x3c>
 8001966:	433e      	orrs	r6, r7
 8001968:	0030      	movs	r0, r6
 800196a:	1e46      	subs	r6, r0, #1
 800196c:	41b0      	sbcs	r0, r6
 800196e:	e7e5      	b.n	800193c <__eqdf2+0x3c>
 8001970:	2000      	movs	r0, #0
 8001972:	e7e3      	b.n	800193c <__eqdf2+0x3c>
 8001974:	000007ff 	.word	0x000007ff

08001978 <__gedf2>:
 8001978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197a:	464e      	mov	r6, r9
 800197c:	4645      	mov	r5, r8
 800197e:	4657      	mov	r7, sl
 8001980:	46de      	mov	lr, fp
 8001982:	0004      	movs	r4, r0
 8001984:	0018      	movs	r0, r3
 8001986:	b5e0      	push	{r5, r6, r7, lr}
 8001988:	0016      	movs	r6, r2
 800198a:	031b      	lsls	r3, r3, #12
 800198c:	0b1b      	lsrs	r3, r3, #12
 800198e:	4d32      	ldr	r5, [pc, #200]	; (8001a58 <__gedf2+0xe0>)
 8001990:	030f      	lsls	r7, r1, #12
 8001992:	004a      	lsls	r2, r1, #1
 8001994:	4699      	mov	r9, r3
 8001996:	0043      	lsls	r3, r0, #1
 8001998:	46a4      	mov	ip, r4
 800199a:	46b0      	mov	r8, r6
 800199c:	0b3f      	lsrs	r7, r7, #12
 800199e:	0d52      	lsrs	r2, r2, #21
 80019a0:	0fc9      	lsrs	r1, r1, #31
 80019a2:	0d5b      	lsrs	r3, r3, #21
 80019a4:	0fc0      	lsrs	r0, r0, #31
 80019a6:	42aa      	cmp	r2, r5
 80019a8:	d029      	beq.n	80019fe <__gedf2+0x86>
 80019aa:	42ab      	cmp	r3, r5
 80019ac:	d018      	beq.n	80019e0 <__gedf2+0x68>
 80019ae:	2a00      	cmp	r2, #0
 80019b0:	d12a      	bne.n	8001a08 <__gedf2+0x90>
 80019b2:	433c      	orrs	r4, r7
 80019b4:	46a3      	mov	fp, r4
 80019b6:	4265      	negs	r5, r4
 80019b8:	4165      	adcs	r5, r4
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <__gedf2+0x4c>
 80019be:	464c      	mov	r4, r9
 80019c0:	4326      	orrs	r6, r4
 80019c2:	d027      	beq.n	8001a14 <__gedf2+0x9c>
 80019c4:	2d00      	cmp	r5, #0
 80019c6:	d115      	bne.n	80019f4 <__gedf2+0x7c>
 80019c8:	4281      	cmp	r1, r0
 80019ca:	d028      	beq.n	8001a1e <__gedf2+0xa6>
 80019cc:	2002      	movs	r0, #2
 80019ce:	3901      	subs	r1, #1
 80019d0:	4008      	ands	r0, r1
 80019d2:	3801      	subs	r0, #1
 80019d4:	bcf0      	pop	{r4, r5, r6, r7}
 80019d6:	46bb      	mov	fp, r7
 80019d8:	46b2      	mov	sl, r6
 80019da:	46a9      	mov	r9, r5
 80019dc:	46a0      	mov	r8, r4
 80019de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e0:	464d      	mov	r5, r9
 80019e2:	432e      	orrs	r6, r5
 80019e4:	d12f      	bne.n	8001a46 <__gedf2+0xce>
 80019e6:	2a00      	cmp	r2, #0
 80019e8:	d1ee      	bne.n	80019c8 <__gedf2+0x50>
 80019ea:	433c      	orrs	r4, r7
 80019ec:	4265      	negs	r5, r4
 80019ee:	4165      	adcs	r5, r4
 80019f0:	2d00      	cmp	r5, #0
 80019f2:	d0e9      	beq.n	80019c8 <__gedf2+0x50>
 80019f4:	2800      	cmp	r0, #0
 80019f6:	d1ed      	bne.n	80019d4 <__gedf2+0x5c>
 80019f8:	2001      	movs	r0, #1
 80019fa:	4240      	negs	r0, r0
 80019fc:	e7ea      	b.n	80019d4 <__gedf2+0x5c>
 80019fe:	003d      	movs	r5, r7
 8001a00:	4325      	orrs	r5, r4
 8001a02:	d120      	bne.n	8001a46 <__gedf2+0xce>
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d0eb      	beq.n	80019e0 <__gedf2+0x68>
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1dd      	bne.n	80019c8 <__gedf2+0x50>
 8001a0c:	464c      	mov	r4, r9
 8001a0e:	4326      	orrs	r6, r4
 8001a10:	d1da      	bne.n	80019c8 <__gedf2+0x50>
 8001a12:	e7db      	b.n	80019cc <__gedf2+0x54>
 8001a14:	465b      	mov	r3, fp
 8001a16:	2000      	movs	r0, #0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0db      	beq.n	80019d4 <__gedf2+0x5c>
 8001a1c:	e7d6      	b.n	80019cc <__gedf2+0x54>
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	dc0a      	bgt.n	8001a38 <__gedf2+0xc0>
 8001a22:	dbe7      	blt.n	80019f4 <__gedf2+0x7c>
 8001a24:	454f      	cmp	r7, r9
 8001a26:	d8d1      	bhi.n	80019cc <__gedf2+0x54>
 8001a28:	d010      	beq.n	8001a4c <__gedf2+0xd4>
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	454f      	cmp	r7, r9
 8001a2e:	d2d1      	bcs.n	80019d4 <__gedf2+0x5c>
 8001a30:	2900      	cmp	r1, #0
 8001a32:	d0e1      	beq.n	80019f8 <__gedf2+0x80>
 8001a34:	0008      	movs	r0, r1
 8001a36:	e7cd      	b.n	80019d4 <__gedf2+0x5c>
 8001a38:	4243      	negs	r3, r0
 8001a3a:	4158      	adcs	r0, r3
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	4240      	negs	r0, r0
 8001a40:	4018      	ands	r0, r3
 8001a42:	3801      	subs	r0, #1
 8001a44:	e7c6      	b.n	80019d4 <__gedf2+0x5c>
 8001a46:	2002      	movs	r0, #2
 8001a48:	4240      	negs	r0, r0
 8001a4a:	e7c3      	b.n	80019d4 <__gedf2+0x5c>
 8001a4c:	45c4      	cmp	ip, r8
 8001a4e:	d8bd      	bhi.n	80019cc <__gedf2+0x54>
 8001a50:	2000      	movs	r0, #0
 8001a52:	45c4      	cmp	ip, r8
 8001a54:	d2be      	bcs.n	80019d4 <__gedf2+0x5c>
 8001a56:	e7eb      	b.n	8001a30 <__gedf2+0xb8>
 8001a58:	000007ff 	.word	0x000007ff

08001a5c <__ledf2>:
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	464e      	mov	r6, r9
 8001a60:	4645      	mov	r5, r8
 8001a62:	4657      	mov	r7, sl
 8001a64:	46de      	mov	lr, fp
 8001a66:	0004      	movs	r4, r0
 8001a68:	0018      	movs	r0, r3
 8001a6a:	b5e0      	push	{r5, r6, r7, lr}
 8001a6c:	0016      	movs	r6, r2
 8001a6e:	031b      	lsls	r3, r3, #12
 8001a70:	0b1b      	lsrs	r3, r3, #12
 8001a72:	4d31      	ldr	r5, [pc, #196]	; (8001b38 <__ledf2+0xdc>)
 8001a74:	030f      	lsls	r7, r1, #12
 8001a76:	004a      	lsls	r2, r1, #1
 8001a78:	4699      	mov	r9, r3
 8001a7a:	0043      	lsls	r3, r0, #1
 8001a7c:	46a4      	mov	ip, r4
 8001a7e:	46b0      	mov	r8, r6
 8001a80:	0b3f      	lsrs	r7, r7, #12
 8001a82:	0d52      	lsrs	r2, r2, #21
 8001a84:	0fc9      	lsrs	r1, r1, #31
 8001a86:	0d5b      	lsrs	r3, r3, #21
 8001a88:	0fc0      	lsrs	r0, r0, #31
 8001a8a:	42aa      	cmp	r2, r5
 8001a8c:	d011      	beq.n	8001ab2 <__ledf2+0x56>
 8001a8e:	42ab      	cmp	r3, r5
 8001a90:	d014      	beq.n	8001abc <__ledf2+0x60>
 8001a92:	2a00      	cmp	r2, #0
 8001a94:	d12f      	bne.n	8001af6 <__ledf2+0x9a>
 8001a96:	433c      	orrs	r4, r7
 8001a98:	46a3      	mov	fp, r4
 8001a9a:	4265      	negs	r5, r4
 8001a9c:	4165      	adcs	r5, r4
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d114      	bne.n	8001acc <__ledf2+0x70>
 8001aa2:	464c      	mov	r4, r9
 8001aa4:	4326      	orrs	r6, r4
 8001aa6:	d111      	bne.n	8001acc <__ledf2+0x70>
 8001aa8:	465b      	mov	r3, fp
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d017      	beq.n	8001ae0 <__ledf2+0x84>
 8001ab0:	e010      	b.n	8001ad4 <__ledf2+0x78>
 8001ab2:	003d      	movs	r5, r7
 8001ab4:	4325      	orrs	r5, r4
 8001ab6:	d112      	bne.n	8001ade <__ledf2+0x82>
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d11c      	bne.n	8001af6 <__ledf2+0x9a>
 8001abc:	464d      	mov	r5, r9
 8001abe:	432e      	orrs	r6, r5
 8001ac0:	d10d      	bne.n	8001ade <__ledf2+0x82>
 8001ac2:	2a00      	cmp	r2, #0
 8001ac4:	d104      	bne.n	8001ad0 <__ledf2+0x74>
 8001ac6:	433c      	orrs	r4, r7
 8001ac8:	4265      	negs	r5, r4
 8001aca:	4165      	adcs	r5, r4
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d10d      	bne.n	8001aec <__ledf2+0x90>
 8001ad0:	4281      	cmp	r1, r0
 8001ad2:	d016      	beq.n	8001b02 <__ledf2+0xa6>
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	3901      	subs	r1, #1
 8001ad8:	4008      	ands	r0, r1
 8001ada:	3801      	subs	r0, #1
 8001adc:	e000      	b.n	8001ae0 <__ledf2+0x84>
 8001ade:	2002      	movs	r0, #2
 8001ae0:	bcf0      	pop	{r4, r5, r6, r7}
 8001ae2:	46bb      	mov	fp, r7
 8001ae4:	46b2      	mov	sl, r6
 8001ae6:	46a9      	mov	r9, r5
 8001ae8:	46a0      	mov	r8, r4
 8001aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aec:	2800      	cmp	r0, #0
 8001aee:	d1f7      	bne.n	8001ae0 <__ledf2+0x84>
 8001af0:	2001      	movs	r0, #1
 8001af2:	4240      	negs	r0, r0
 8001af4:	e7f4      	b.n	8001ae0 <__ledf2+0x84>
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ea      	bne.n	8001ad0 <__ledf2+0x74>
 8001afa:	464c      	mov	r4, r9
 8001afc:	4326      	orrs	r6, r4
 8001afe:	d1e7      	bne.n	8001ad0 <__ledf2+0x74>
 8001b00:	e7e8      	b.n	8001ad4 <__ledf2+0x78>
 8001b02:	429a      	cmp	r2, r3
 8001b04:	dd06      	ble.n	8001b14 <__ledf2+0xb8>
 8001b06:	4243      	negs	r3, r0
 8001b08:	4158      	adcs	r0, r3
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	4240      	negs	r0, r0
 8001b0e:	4018      	ands	r0, r3
 8001b10:	3801      	subs	r0, #1
 8001b12:	e7e5      	b.n	8001ae0 <__ledf2+0x84>
 8001b14:	429a      	cmp	r2, r3
 8001b16:	dbe9      	blt.n	8001aec <__ledf2+0x90>
 8001b18:	454f      	cmp	r7, r9
 8001b1a:	d8db      	bhi.n	8001ad4 <__ledf2+0x78>
 8001b1c:	d006      	beq.n	8001b2c <__ledf2+0xd0>
 8001b1e:	2000      	movs	r0, #0
 8001b20:	454f      	cmp	r7, r9
 8001b22:	d2dd      	bcs.n	8001ae0 <__ledf2+0x84>
 8001b24:	2900      	cmp	r1, #0
 8001b26:	d0e3      	beq.n	8001af0 <__ledf2+0x94>
 8001b28:	0008      	movs	r0, r1
 8001b2a:	e7d9      	b.n	8001ae0 <__ledf2+0x84>
 8001b2c:	45c4      	cmp	ip, r8
 8001b2e:	d8d1      	bhi.n	8001ad4 <__ledf2+0x78>
 8001b30:	2000      	movs	r0, #0
 8001b32:	45c4      	cmp	ip, r8
 8001b34:	d2d4      	bcs.n	8001ae0 <__ledf2+0x84>
 8001b36:	e7f5      	b.n	8001b24 <__ledf2+0xc8>
 8001b38:	000007ff 	.word	0x000007ff

08001b3c <__aeabi_dmul>:
 8001b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b3e:	4657      	mov	r7, sl
 8001b40:	464e      	mov	r6, r9
 8001b42:	4645      	mov	r5, r8
 8001b44:	46de      	mov	lr, fp
 8001b46:	b5e0      	push	{r5, r6, r7, lr}
 8001b48:	4698      	mov	r8, r3
 8001b4a:	030c      	lsls	r4, r1, #12
 8001b4c:	004b      	lsls	r3, r1, #1
 8001b4e:	0006      	movs	r6, r0
 8001b50:	4692      	mov	sl, r2
 8001b52:	b087      	sub	sp, #28
 8001b54:	0b24      	lsrs	r4, r4, #12
 8001b56:	0d5b      	lsrs	r3, r3, #21
 8001b58:	0fcf      	lsrs	r7, r1, #31
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d06c      	beq.n	8001c38 <__aeabi_dmul+0xfc>
 8001b5e:	4add      	ldr	r2, [pc, #884]	; (8001ed4 <__aeabi_dmul+0x398>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d100      	bne.n	8001b66 <__aeabi_dmul+0x2a>
 8001b64:	e086      	b.n	8001c74 <__aeabi_dmul+0x138>
 8001b66:	0f42      	lsrs	r2, r0, #29
 8001b68:	00e4      	lsls	r4, r4, #3
 8001b6a:	4314      	orrs	r4, r2
 8001b6c:	2280      	movs	r2, #128	; 0x80
 8001b6e:	0412      	lsls	r2, r2, #16
 8001b70:	4314      	orrs	r4, r2
 8001b72:	4ad9      	ldr	r2, [pc, #868]	; (8001ed8 <__aeabi_dmul+0x39c>)
 8001b74:	00c5      	lsls	r5, r0, #3
 8001b76:	4694      	mov	ip, r2
 8001b78:	4463      	add	r3, ip
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	4699      	mov	r9, r3
 8001b80:	469b      	mov	fp, r3
 8001b82:	4643      	mov	r3, r8
 8001b84:	4642      	mov	r2, r8
 8001b86:	031e      	lsls	r6, r3, #12
 8001b88:	0fd2      	lsrs	r2, r2, #31
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4650      	mov	r0, sl
 8001b8e:	4690      	mov	r8, r2
 8001b90:	0b36      	lsrs	r6, r6, #12
 8001b92:	0d5b      	lsrs	r3, r3, #21
 8001b94:	d100      	bne.n	8001b98 <__aeabi_dmul+0x5c>
 8001b96:	e078      	b.n	8001c8a <__aeabi_dmul+0x14e>
 8001b98:	4ace      	ldr	r2, [pc, #824]	; (8001ed4 <__aeabi_dmul+0x398>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d01d      	beq.n	8001bda <__aeabi_dmul+0x9e>
 8001b9e:	49ce      	ldr	r1, [pc, #824]	; (8001ed8 <__aeabi_dmul+0x39c>)
 8001ba0:	0f42      	lsrs	r2, r0, #29
 8001ba2:	468c      	mov	ip, r1
 8001ba4:	9900      	ldr	r1, [sp, #0]
 8001ba6:	4463      	add	r3, ip
 8001ba8:	00f6      	lsls	r6, r6, #3
 8001baa:	468c      	mov	ip, r1
 8001bac:	4316      	orrs	r6, r2
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	449c      	add	ip, r3
 8001bb2:	0412      	lsls	r2, r2, #16
 8001bb4:	4663      	mov	r3, ip
 8001bb6:	4316      	orrs	r6, r2
 8001bb8:	00c2      	lsls	r2, r0, #3
 8001bba:	2000      	movs	r0, #0
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	9900      	ldr	r1, [sp, #0]
 8001bc0:	4643      	mov	r3, r8
 8001bc2:	3101      	adds	r1, #1
 8001bc4:	468c      	mov	ip, r1
 8001bc6:	4649      	mov	r1, r9
 8001bc8:	407b      	eors	r3, r7
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	290f      	cmp	r1, #15
 8001bce:	d900      	bls.n	8001bd2 <__aeabi_dmul+0x96>
 8001bd0:	e07e      	b.n	8001cd0 <__aeabi_dmul+0x194>
 8001bd2:	4bc2      	ldr	r3, [pc, #776]	; (8001edc <__aeabi_dmul+0x3a0>)
 8001bd4:	0089      	lsls	r1, r1, #2
 8001bd6:	5859      	ldr	r1, [r3, r1]
 8001bd8:	468f      	mov	pc, r1
 8001bda:	4652      	mov	r2, sl
 8001bdc:	9b00      	ldr	r3, [sp, #0]
 8001bde:	4332      	orrs	r2, r6
 8001be0:	d000      	beq.n	8001be4 <__aeabi_dmul+0xa8>
 8001be2:	e156      	b.n	8001e92 <__aeabi_dmul+0x356>
 8001be4:	49bb      	ldr	r1, [pc, #748]	; (8001ed4 <__aeabi_dmul+0x398>)
 8001be6:	2600      	movs	r6, #0
 8001be8:	468c      	mov	ip, r1
 8001bea:	4463      	add	r3, ip
 8001bec:	4649      	mov	r1, r9
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	4319      	orrs	r1, r3
 8001bf4:	4689      	mov	r9, r1
 8001bf6:	2002      	movs	r0, #2
 8001bf8:	e7e1      	b.n	8001bbe <__aeabi_dmul+0x82>
 8001bfa:	4643      	mov	r3, r8
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	0034      	movs	r4, r6
 8001c00:	0015      	movs	r5, r2
 8001c02:	4683      	mov	fp, r0
 8001c04:	465b      	mov	r3, fp
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d05e      	beq.n	8001cc8 <__aeabi_dmul+0x18c>
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dmul+0xd4>
 8001c0e:	e1f3      	b.n	8001ff8 <__aeabi_dmul+0x4bc>
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d000      	beq.n	8001c16 <__aeabi_dmul+0xda>
 8001c14:	e118      	b.n	8001e48 <__aeabi_dmul+0x30c>
 8001c16:	2200      	movs	r2, #0
 8001c18:	2400      	movs	r4, #0
 8001c1a:	2500      	movs	r5, #0
 8001c1c:	9b01      	ldr	r3, [sp, #4]
 8001c1e:	0512      	lsls	r2, r2, #20
 8001c20:	4322      	orrs	r2, r4
 8001c22:	07db      	lsls	r3, r3, #31
 8001c24:	431a      	orrs	r2, r3
 8001c26:	0028      	movs	r0, r5
 8001c28:	0011      	movs	r1, r2
 8001c2a:	b007      	add	sp, #28
 8001c2c:	bcf0      	pop	{r4, r5, r6, r7}
 8001c2e:	46bb      	mov	fp, r7
 8001c30:	46b2      	mov	sl, r6
 8001c32:	46a9      	mov	r9, r5
 8001c34:	46a0      	mov	r8, r4
 8001c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c38:	0025      	movs	r5, r4
 8001c3a:	4305      	orrs	r5, r0
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dmul+0x104>
 8001c3e:	e141      	b.n	8001ec4 <__aeabi_dmul+0x388>
 8001c40:	2c00      	cmp	r4, #0
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dmul+0x10a>
 8001c44:	e1ad      	b.n	8001fa2 <__aeabi_dmul+0x466>
 8001c46:	0020      	movs	r0, r4
 8001c48:	f000 fe02 	bl	8002850 <__clzsi2>
 8001c4c:	0001      	movs	r1, r0
 8001c4e:	0002      	movs	r2, r0
 8001c50:	390b      	subs	r1, #11
 8001c52:	231d      	movs	r3, #29
 8001c54:	0010      	movs	r0, r2
 8001c56:	1a5b      	subs	r3, r3, r1
 8001c58:	0031      	movs	r1, r6
 8001c5a:	0035      	movs	r5, r6
 8001c5c:	3808      	subs	r0, #8
 8001c5e:	4084      	lsls	r4, r0
 8001c60:	40d9      	lsrs	r1, r3
 8001c62:	4085      	lsls	r5, r0
 8001c64:	430c      	orrs	r4, r1
 8001c66:	489e      	ldr	r0, [pc, #632]	; (8001ee0 <__aeabi_dmul+0x3a4>)
 8001c68:	1a83      	subs	r3, r0, r2
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	4699      	mov	r9, r3
 8001c70:	469b      	mov	fp, r3
 8001c72:	e786      	b.n	8001b82 <__aeabi_dmul+0x46>
 8001c74:	0005      	movs	r5, r0
 8001c76:	4325      	orrs	r5, r4
 8001c78:	d000      	beq.n	8001c7c <__aeabi_dmul+0x140>
 8001c7a:	e11c      	b.n	8001eb6 <__aeabi_dmul+0x37a>
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	2302      	movs	r3, #2
 8001c82:	2400      	movs	r4, #0
 8001c84:	4691      	mov	r9, r2
 8001c86:	469b      	mov	fp, r3
 8001c88:	e77b      	b.n	8001b82 <__aeabi_dmul+0x46>
 8001c8a:	4652      	mov	r2, sl
 8001c8c:	4332      	orrs	r2, r6
 8001c8e:	d100      	bne.n	8001c92 <__aeabi_dmul+0x156>
 8001c90:	e10a      	b.n	8001ea8 <__aeabi_dmul+0x36c>
 8001c92:	2e00      	cmp	r6, #0
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dmul+0x15c>
 8001c96:	e176      	b.n	8001f86 <__aeabi_dmul+0x44a>
 8001c98:	0030      	movs	r0, r6
 8001c9a:	f000 fdd9 	bl	8002850 <__clzsi2>
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	3a0b      	subs	r2, #11
 8001ca2:	231d      	movs	r3, #29
 8001ca4:	0001      	movs	r1, r0
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	4652      	mov	r2, sl
 8001caa:	3908      	subs	r1, #8
 8001cac:	40da      	lsrs	r2, r3
 8001cae:	408e      	lsls	r6, r1
 8001cb0:	4316      	orrs	r6, r2
 8001cb2:	4652      	mov	r2, sl
 8001cb4:	408a      	lsls	r2, r1
 8001cb6:	9b00      	ldr	r3, [sp, #0]
 8001cb8:	4989      	ldr	r1, [pc, #548]	; (8001ee0 <__aeabi_dmul+0x3a4>)
 8001cba:	1a18      	subs	r0, r3, r0
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	468c      	mov	ip, r1
 8001cc0:	4463      	add	r3, ip
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	e77a      	b.n	8001bbe <__aeabi_dmul+0x82>
 8001cc8:	2400      	movs	r4, #0
 8001cca:	2500      	movs	r5, #0
 8001ccc:	4a81      	ldr	r2, [pc, #516]	; (8001ed4 <__aeabi_dmul+0x398>)
 8001cce:	e7a5      	b.n	8001c1c <__aeabi_dmul+0xe0>
 8001cd0:	0c2f      	lsrs	r7, r5, #16
 8001cd2:	042d      	lsls	r5, r5, #16
 8001cd4:	0c2d      	lsrs	r5, r5, #16
 8001cd6:	002b      	movs	r3, r5
 8001cd8:	0c11      	lsrs	r1, r2, #16
 8001cda:	0412      	lsls	r2, r2, #16
 8001cdc:	0c12      	lsrs	r2, r2, #16
 8001cde:	4353      	muls	r3, r2
 8001ce0:	4698      	mov	r8, r3
 8001ce2:	0013      	movs	r3, r2
 8001ce4:	0028      	movs	r0, r5
 8001ce6:	437b      	muls	r3, r7
 8001ce8:	4699      	mov	r9, r3
 8001cea:	4348      	muls	r0, r1
 8001cec:	4448      	add	r0, r9
 8001cee:	4683      	mov	fp, r0
 8001cf0:	4640      	mov	r0, r8
 8001cf2:	000b      	movs	r3, r1
 8001cf4:	0c00      	lsrs	r0, r0, #16
 8001cf6:	4682      	mov	sl, r0
 8001cf8:	4658      	mov	r0, fp
 8001cfa:	437b      	muls	r3, r7
 8001cfc:	4450      	add	r0, sl
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	4581      	cmp	r9, r0
 8001d02:	d906      	bls.n	8001d12 <__aeabi_dmul+0x1d6>
 8001d04:	469a      	mov	sl, r3
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	025b      	lsls	r3, r3, #9
 8001d0a:	4699      	mov	r9, r3
 8001d0c:	44ca      	add	sl, r9
 8001d0e:	4653      	mov	r3, sl
 8001d10:	9302      	str	r3, [sp, #8]
 8001d12:	0c03      	lsrs	r3, r0, #16
 8001d14:	469b      	mov	fp, r3
 8001d16:	4643      	mov	r3, r8
 8001d18:	041b      	lsls	r3, r3, #16
 8001d1a:	0400      	lsls	r0, r0, #16
 8001d1c:	0c1b      	lsrs	r3, r3, #16
 8001d1e:	4698      	mov	r8, r3
 8001d20:	0003      	movs	r3, r0
 8001d22:	4443      	add	r3, r8
 8001d24:	9304      	str	r3, [sp, #16]
 8001d26:	0c33      	lsrs	r3, r6, #16
 8001d28:	4699      	mov	r9, r3
 8001d2a:	002b      	movs	r3, r5
 8001d2c:	0436      	lsls	r6, r6, #16
 8001d2e:	0c36      	lsrs	r6, r6, #16
 8001d30:	4373      	muls	r3, r6
 8001d32:	4698      	mov	r8, r3
 8001d34:	0033      	movs	r3, r6
 8001d36:	437b      	muls	r3, r7
 8001d38:	469a      	mov	sl, r3
 8001d3a:	464b      	mov	r3, r9
 8001d3c:	435d      	muls	r5, r3
 8001d3e:	435f      	muls	r7, r3
 8001d40:	4643      	mov	r3, r8
 8001d42:	4455      	add	r5, sl
 8001d44:	0c18      	lsrs	r0, r3, #16
 8001d46:	1940      	adds	r0, r0, r5
 8001d48:	4582      	cmp	sl, r0
 8001d4a:	d903      	bls.n	8001d54 <__aeabi_dmul+0x218>
 8001d4c:	2380      	movs	r3, #128	; 0x80
 8001d4e:	025b      	lsls	r3, r3, #9
 8001d50:	469a      	mov	sl, r3
 8001d52:	4457      	add	r7, sl
 8001d54:	0c05      	lsrs	r5, r0, #16
 8001d56:	19eb      	adds	r3, r5, r7
 8001d58:	9305      	str	r3, [sp, #20]
 8001d5a:	4643      	mov	r3, r8
 8001d5c:	041d      	lsls	r5, r3, #16
 8001d5e:	0c2d      	lsrs	r5, r5, #16
 8001d60:	0400      	lsls	r0, r0, #16
 8001d62:	1940      	adds	r0, r0, r5
 8001d64:	0c25      	lsrs	r5, r4, #16
 8001d66:	0424      	lsls	r4, r4, #16
 8001d68:	0c24      	lsrs	r4, r4, #16
 8001d6a:	0027      	movs	r7, r4
 8001d6c:	4357      	muls	r7, r2
 8001d6e:	436a      	muls	r2, r5
 8001d70:	4690      	mov	r8, r2
 8001d72:	002a      	movs	r2, r5
 8001d74:	0c3b      	lsrs	r3, r7, #16
 8001d76:	469a      	mov	sl, r3
 8001d78:	434a      	muls	r2, r1
 8001d7a:	4361      	muls	r1, r4
 8001d7c:	4441      	add	r1, r8
 8001d7e:	4451      	add	r1, sl
 8001d80:	4483      	add	fp, r0
 8001d82:	4588      	cmp	r8, r1
 8001d84:	d903      	bls.n	8001d8e <__aeabi_dmul+0x252>
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	025b      	lsls	r3, r3, #9
 8001d8a:	4698      	mov	r8, r3
 8001d8c:	4442      	add	r2, r8
 8001d8e:	043f      	lsls	r7, r7, #16
 8001d90:	0c0b      	lsrs	r3, r1, #16
 8001d92:	0c3f      	lsrs	r7, r7, #16
 8001d94:	0409      	lsls	r1, r1, #16
 8001d96:	19c9      	adds	r1, r1, r7
 8001d98:	0027      	movs	r7, r4
 8001d9a:	4698      	mov	r8, r3
 8001d9c:	464b      	mov	r3, r9
 8001d9e:	4377      	muls	r7, r6
 8001da0:	435c      	muls	r4, r3
 8001da2:	436e      	muls	r6, r5
 8001da4:	435d      	muls	r5, r3
 8001da6:	0c3b      	lsrs	r3, r7, #16
 8001da8:	4699      	mov	r9, r3
 8001daa:	19a4      	adds	r4, r4, r6
 8001dac:	444c      	add	r4, r9
 8001dae:	4442      	add	r2, r8
 8001db0:	9503      	str	r5, [sp, #12]
 8001db2:	42a6      	cmp	r6, r4
 8001db4:	d904      	bls.n	8001dc0 <__aeabi_dmul+0x284>
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	025b      	lsls	r3, r3, #9
 8001dba:	4698      	mov	r8, r3
 8001dbc:	4445      	add	r5, r8
 8001dbe:	9503      	str	r5, [sp, #12]
 8001dc0:	9b02      	ldr	r3, [sp, #8]
 8001dc2:	043f      	lsls	r7, r7, #16
 8001dc4:	445b      	add	r3, fp
 8001dc6:	001e      	movs	r6, r3
 8001dc8:	4283      	cmp	r3, r0
 8001dca:	4180      	sbcs	r0, r0
 8001dcc:	0423      	lsls	r3, r4, #16
 8001dce:	4698      	mov	r8, r3
 8001dd0:	9b05      	ldr	r3, [sp, #20]
 8001dd2:	0c3f      	lsrs	r7, r7, #16
 8001dd4:	4447      	add	r7, r8
 8001dd6:	4698      	mov	r8, r3
 8001dd8:	1876      	adds	r6, r6, r1
 8001dda:	428e      	cmp	r6, r1
 8001ddc:	4189      	sbcs	r1, r1
 8001dde:	4447      	add	r7, r8
 8001de0:	4240      	negs	r0, r0
 8001de2:	183d      	adds	r5, r7, r0
 8001de4:	46a8      	mov	r8, r5
 8001de6:	4693      	mov	fp, r2
 8001de8:	4249      	negs	r1, r1
 8001dea:	468a      	mov	sl, r1
 8001dec:	44c3      	add	fp, r8
 8001dee:	429f      	cmp	r7, r3
 8001df0:	41bf      	sbcs	r7, r7
 8001df2:	4580      	cmp	r8, r0
 8001df4:	4180      	sbcs	r0, r0
 8001df6:	9b03      	ldr	r3, [sp, #12]
 8001df8:	44da      	add	sl, fp
 8001dfa:	4698      	mov	r8, r3
 8001dfc:	4653      	mov	r3, sl
 8001dfe:	4240      	negs	r0, r0
 8001e00:	427f      	negs	r7, r7
 8001e02:	4307      	orrs	r7, r0
 8001e04:	0c24      	lsrs	r4, r4, #16
 8001e06:	4593      	cmp	fp, r2
 8001e08:	4192      	sbcs	r2, r2
 8001e0a:	458a      	cmp	sl, r1
 8001e0c:	4189      	sbcs	r1, r1
 8001e0e:	193f      	adds	r7, r7, r4
 8001e10:	0ddc      	lsrs	r4, r3, #23
 8001e12:	9b04      	ldr	r3, [sp, #16]
 8001e14:	0275      	lsls	r5, r6, #9
 8001e16:	431d      	orrs	r5, r3
 8001e18:	1e68      	subs	r0, r5, #1
 8001e1a:	4185      	sbcs	r5, r0
 8001e1c:	4653      	mov	r3, sl
 8001e1e:	4252      	negs	r2, r2
 8001e20:	4249      	negs	r1, r1
 8001e22:	430a      	orrs	r2, r1
 8001e24:	18bf      	adds	r7, r7, r2
 8001e26:	4447      	add	r7, r8
 8001e28:	0df6      	lsrs	r6, r6, #23
 8001e2a:	027f      	lsls	r7, r7, #9
 8001e2c:	4335      	orrs	r5, r6
 8001e2e:	025a      	lsls	r2, r3, #9
 8001e30:	433c      	orrs	r4, r7
 8001e32:	4315      	orrs	r5, r2
 8001e34:	01fb      	lsls	r3, r7, #7
 8001e36:	d400      	bmi.n	8001e3a <__aeabi_dmul+0x2fe>
 8001e38:	e0c1      	b.n	8001fbe <__aeabi_dmul+0x482>
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	086a      	lsrs	r2, r5, #1
 8001e3e:	400d      	ands	r5, r1
 8001e40:	4315      	orrs	r5, r2
 8001e42:	07e2      	lsls	r2, r4, #31
 8001e44:	4315      	orrs	r5, r2
 8001e46:	0864      	lsrs	r4, r4, #1
 8001e48:	4926      	ldr	r1, [pc, #152]	; (8001ee4 <__aeabi_dmul+0x3a8>)
 8001e4a:	4461      	add	r1, ip
 8001e4c:	2900      	cmp	r1, #0
 8001e4e:	dd56      	ble.n	8001efe <__aeabi_dmul+0x3c2>
 8001e50:	076b      	lsls	r3, r5, #29
 8001e52:	d009      	beq.n	8001e68 <__aeabi_dmul+0x32c>
 8001e54:	220f      	movs	r2, #15
 8001e56:	402a      	ands	r2, r5
 8001e58:	2a04      	cmp	r2, #4
 8001e5a:	d005      	beq.n	8001e68 <__aeabi_dmul+0x32c>
 8001e5c:	1d2a      	adds	r2, r5, #4
 8001e5e:	42aa      	cmp	r2, r5
 8001e60:	41ad      	sbcs	r5, r5
 8001e62:	426d      	negs	r5, r5
 8001e64:	1964      	adds	r4, r4, r5
 8001e66:	0015      	movs	r5, r2
 8001e68:	01e3      	lsls	r3, r4, #7
 8001e6a:	d504      	bpl.n	8001e76 <__aeabi_dmul+0x33a>
 8001e6c:	2180      	movs	r1, #128	; 0x80
 8001e6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ee8 <__aeabi_dmul+0x3ac>)
 8001e70:	00c9      	lsls	r1, r1, #3
 8001e72:	4014      	ands	r4, r2
 8001e74:	4461      	add	r1, ip
 8001e76:	4a1d      	ldr	r2, [pc, #116]	; (8001eec <__aeabi_dmul+0x3b0>)
 8001e78:	4291      	cmp	r1, r2
 8001e7a:	dd00      	ble.n	8001e7e <__aeabi_dmul+0x342>
 8001e7c:	e724      	b.n	8001cc8 <__aeabi_dmul+0x18c>
 8001e7e:	0762      	lsls	r2, r4, #29
 8001e80:	08ed      	lsrs	r5, r5, #3
 8001e82:	0264      	lsls	r4, r4, #9
 8001e84:	0549      	lsls	r1, r1, #21
 8001e86:	4315      	orrs	r5, r2
 8001e88:	0b24      	lsrs	r4, r4, #12
 8001e8a:	0d4a      	lsrs	r2, r1, #21
 8001e8c:	e6c6      	b.n	8001c1c <__aeabi_dmul+0xe0>
 8001e8e:	9701      	str	r7, [sp, #4]
 8001e90:	e6b8      	b.n	8001c04 <__aeabi_dmul+0xc8>
 8001e92:	4a10      	ldr	r2, [pc, #64]	; (8001ed4 <__aeabi_dmul+0x398>)
 8001e94:	2003      	movs	r0, #3
 8001e96:	4694      	mov	ip, r2
 8001e98:	4463      	add	r3, ip
 8001e9a:	464a      	mov	r2, r9
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	4691      	mov	r9, r2
 8001ea4:	4652      	mov	r2, sl
 8001ea6:	e68a      	b.n	8001bbe <__aeabi_dmul+0x82>
 8001ea8:	4649      	mov	r1, r9
 8001eaa:	2301      	movs	r3, #1
 8001eac:	4319      	orrs	r1, r3
 8001eae:	4689      	mov	r9, r1
 8001eb0:	2600      	movs	r6, #0
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	e683      	b.n	8001bbe <__aeabi_dmul+0x82>
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2303      	movs	r3, #3
 8001ebc:	0005      	movs	r5, r0
 8001ebe:	4691      	mov	r9, r2
 8001ec0:	469b      	mov	fp, r3
 8001ec2:	e65e      	b.n	8001b82 <__aeabi_dmul+0x46>
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	4699      	mov	r9, r3
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	2400      	movs	r4, #0
 8001ed0:	469b      	mov	fp, r3
 8001ed2:	e656      	b.n	8001b82 <__aeabi_dmul+0x46>
 8001ed4:	000007ff 	.word	0x000007ff
 8001ed8:	fffffc01 	.word	0xfffffc01
 8001edc:	08002ad8 	.word	0x08002ad8
 8001ee0:	fffffc0d 	.word	0xfffffc0d
 8001ee4:	000003ff 	.word	0x000003ff
 8001ee8:	feffffff 	.word	0xfeffffff
 8001eec:	000007fe 	.word	0x000007fe
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	2480      	movs	r4, #128	; 0x80
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	4a44      	ldr	r2, [pc, #272]	; (8002008 <__aeabi_dmul+0x4cc>)
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	0324      	lsls	r4, r4, #12
 8001efc:	e68e      	b.n	8001c1c <__aeabi_dmul+0xe0>
 8001efe:	2001      	movs	r0, #1
 8001f00:	1a40      	subs	r0, r0, r1
 8001f02:	2838      	cmp	r0, #56	; 0x38
 8001f04:	dd00      	ble.n	8001f08 <__aeabi_dmul+0x3cc>
 8001f06:	e686      	b.n	8001c16 <__aeabi_dmul+0xda>
 8001f08:	281f      	cmp	r0, #31
 8001f0a:	dd5b      	ble.n	8001fc4 <__aeabi_dmul+0x488>
 8001f0c:	221f      	movs	r2, #31
 8001f0e:	0023      	movs	r3, r4
 8001f10:	4252      	negs	r2, r2
 8001f12:	1a51      	subs	r1, r2, r1
 8001f14:	40cb      	lsrs	r3, r1
 8001f16:	0019      	movs	r1, r3
 8001f18:	2820      	cmp	r0, #32
 8001f1a:	d003      	beq.n	8001f24 <__aeabi_dmul+0x3e8>
 8001f1c:	4a3b      	ldr	r2, [pc, #236]	; (800200c <__aeabi_dmul+0x4d0>)
 8001f1e:	4462      	add	r2, ip
 8001f20:	4094      	lsls	r4, r2
 8001f22:	4325      	orrs	r5, r4
 8001f24:	1e6a      	subs	r2, r5, #1
 8001f26:	4195      	sbcs	r5, r2
 8001f28:	002a      	movs	r2, r5
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	2107      	movs	r1, #7
 8001f2e:	000d      	movs	r5, r1
 8001f30:	2400      	movs	r4, #0
 8001f32:	4015      	ands	r5, r2
 8001f34:	4211      	tst	r1, r2
 8001f36:	d05b      	beq.n	8001ff0 <__aeabi_dmul+0x4b4>
 8001f38:	210f      	movs	r1, #15
 8001f3a:	2400      	movs	r4, #0
 8001f3c:	4011      	ands	r1, r2
 8001f3e:	2904      	cmp	r1, #4
 8001f40:	d053      	beq.n	8001fea <__aeabi_dmul+0x4ae>
 8001f42:	1d11      	adds	r1, r2, #4
 8001f44:	4291      	cmp	r1, r2
 8001f46:	4192      	sbcs	r2, r2
 8001f48:	4252      	negs	r2, r2
 8001f4a:	18a4      	adds	r4, r4, r2
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	0223      	lsls	r3, r4, #8
 8001f50:	d54b      	bpl.n	8001fea <__aeabi_dmul+0x4ae>
 8001f52:	2201      	movs	r2, #1
 8001f54:	2400      	movs	r4, #0
 8001f56:	2500      	movs	r5, #0
 8001f58:	e660      	b.n	8001c1c <__aeabi_dmul+0xe0>
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	031b      	lsls	r3, r3, #12
 8001f5e:	421c      	tst	r4, r3
 8001f60:	d009      	beq.n	8001f76 <__aeabi_dmul+0x43a>
 8001f62:	421e      	tst	r6, r3
 8001f64:	d107      	bne.n	8001f76 <__aeabi_dmul+0x43a>
 8001f66:	4333      	orrs	r3, r6
 8001f68:	031c      	lsls	r4, r3, #12
 8001f6a:	4643      	mov	r3, r8
 8001f6c:	0015      	movs	r5, r2
 8001f6e:	0b24      	lsrs	r4, r4, #12
 8001f70:	4a25      	ldr	r2, [pc, #148]	; (8002008 <__aeabi_dmul+0x4cc>)
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	e652      	b.n	8001c1c <__aeabi_dmul+0xe0>
 8001f76:	2280      	movs	r2, #128	; 0x80
 8001f78:	0312      	lsls	r2, r2, #12
 8001f7a:	4314      	orrs	r4, r2
 8001f7c:	0324      	lsls	r4, r4, #12
 8001f7e:	4a22      	ldr	r2, [pc, #136]	; (8002008 <__aeabi_dmul+0x4cc>)
 8001f80:	0b24      	lsrs	r4, r4, #12
 8001f82:	9701      	str	r7, [sp, #4]
 8001f84:	e64a      	b.n	8001c1c <__aeabi_dmul+0xe0>
 8001f86:	f000 fc63 	bl	8002850 <__clzsi2>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	001a      	movs	r2, r3
 8001f8e:	3215      	adds	r2, #21
 8001f90:	3020      	adds	r0, #32
 8001f92:	2a1c      	cmp	r2, #28
 8001f94:	dc00      	bgt.n	8001f98 <__aeabi_dmul+0x45c>
 8001f96:	e684      	b.n	8001ca2 <__aeabi_dmul+0x166>
 8001f98:	4656      	mov	r6, sl
 8001f9a:	3b08      	subs	r3, #8
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	409e      	lsls	r6, r3
 8001fa0:	e689      	b.n	8001cb6 <__aeabi_dmul+0x17a>
 8001fa2:	f000 fc55 	bl	8002850 <__clzsi2>
 8001fa6:	0001      	movs	r1, r0
 8001fa8:	0002      	movs	r2, r0
 8001faa:	3115      	adds	r1, #21
 8001fac:	3220      	adds	r2, #32
 8001fae:	291c      	cmp	r1, #28
 8001fb0:	dc00      	bgt.n	8001fb4 <__aeabi_dmul+0x478>
 8001fb2:	e64e      	b.n	8001c52 <__aeabi_dmul+0x116>
 8001fb4:	0034      	movs	r4, r6
 8001fb6:	3808      	subs	r0, #8
 8001fb8:	2500      	movs	r5, #0
 8001fba:	4084      	lsls	r4, r0
 8001fbc:	e653      	b.n	8001c66 <__aeabi_dmul+0x12a>
 8001fbe:	9b00      	ldr	r3, [sp, #0]
 8001fc0:	469c      	mov	ip, r3
 8001fc2:	e741      	b.n	8001e48 <__aeabi_dmul+0x30c>
 8001fc4:	4912      	ldr	r1, [pc, #72]	; (8002010 <__aeabi_dmul+0x4d4>)
 8001fc6:	0022      	movs	r2, r4
 8001fc8:	4461      	add	r1, ip
 8001fca:	002e      	movs	r6, r5
 8001fcc:	408d      	lsls	r5, r1
 8001fce:	408a      	lsls	r2, r1
 8001fd0:	40c6      	lsrs	r6, r0
 8001fd2:	1e69      	subs	r1, r5, #1
 8001fd4:	418d      	sbcs	r5, r1
 8001fd6:	4332      	orrs	r2, r6
 8001fd8:	432a      	orrs	r2, r5
 8001fda:	40c4      	lsrs	r4, r0
 8001fdc:	0753      	lsls	r3, r2, #29
 8001fde:	d0b6      	beq.n	8001f4e <__aeabi_dmul+0x412>
 8001fe0:	210f      	movs	r1, #15
 8001fe2:	4011      	ands	r1, r2
 8001fe4:	2904      	cmp	r1, #4
 8001fe6:	d1ac      	bne.n	8001f42 <__aeabi_dmul+0x406>
 8001fe8:	e7b1      	b.n	8001f4e <__aeabi_dmul+0x412>
 8001fea:	0765      	lsls	r5, r4, #29
 8001fec:	0264      	lsls	r4, r4, #9
 8001fee:	0b24      	lsrs	r4, r4, #12
 8001ff0:	08d2      	lsrs	r2, r2, #3
 8001ff2:	4315      	orrs	r5, r2
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	e611      	b.n	8001c1c <__aeabi_dmul+0xe0>
 8001ff8:	2280      	movs	r2, #128	; 0x80
 8001ffa:	0312      	lsls	r2, r2, #12
 8001ffc:	4314      	orrs	r4, r2
 8001ffe:	0324      	lsls	r4, r4, #12
 8002000:	4a01      	ldr	r2, [pc, #4]	; (8002008 <__aeabi_dmul+0x4cc>)
 8002002:	0b24      	lsrs	r4, r4, #12
 8002004:	e60a      	b.n	8001c1c <__aeabi_dmul+0xe0>
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	000007ff 	.word	0x000007ff
 800200c:	0000043e 	.word	0x0000043e
 8002010:	0000041e 	.word	0x0000041e

08002014 <__aeabi_dsub>:
 8002014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002016:	4657      	mov	r7, sl
 8002018:	464e      	mov	r6, r9
 800201a:	4645      	mov	r5, r8
 800201c:	46de      	mov	lr, fp
 800201e:	0004      	movs	r4, r0
 8002020:	b5e0      	push	{r5, r6, r7, lr}
 8002022:	001f      	movs	r7, r3
 8002024:	0010      	movs	r0, r2
 8002026:	030b      	lsls	r3, r1, #12
 8002028:	0f62      	lsrs	r2, r4, #29
 800202a:	004e      	lsls	r6, r1, #1
 800202c:	0fcd      	lsrs	r5, r1, #31
 800202e:	0a5b      	lsrs	r3, r3, #9
 8002030:	0339      	lsls	r1, r7, #12
 8002032:	4313      	orrs	r3, r2
 8002034:	0a49      	lsrs	r1, r1, #9
 8002036:	00e2      	lsls	r2, r4, #3
 8002038:	0f44      	lsrs	r4, r0, #29
 800203a:	4321      	orrs	r1, r4
 800203c:	4cc2      	ldr	r4, [pc, #776]	; (8002348 <__aeabi_dsub+0x334>)
 800203e:	4691      	mov	r9, r2
 8002040:	4692      	mov	sl, r2
 8002042:	00c0      	lsls	r0, r0, #3
 8002044:	007a      	lsls	r2, r7, #1
 8002046:	4680      	mov	r8, r0
 8002048:	0d76      	lsrs	r6, r6, #21
 800204a:	0d52      	lsrs	r2, r2, #21
 800204c:	0fff      	lsrs	r7, r7, #31
 800204e:	42a2      	cmp	r2, r4
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x40>
 8002052:	e0b4      	b.n	80021be <__aeabi_dsub+0x1aa>
 8002054:	2401      	movs	r4, #1
 8002056:	4067      	eors	r7, r4
 8002058:	46bb      	mov	fp, r7
 800205a:	42bd      	cmp	r5, r7
 800205c:	d100      	bne.n	8002060 <__aeabi_dsub+0x4c>
 800205e:	e088      	b.n	8002172 <__aeabi_dsub+0x15e>
 8002060:	1ab4      	subs	r4, r6, r2
 8002062:	46a4      	mov	ip, r4
 8002064:	2c00      	cmp	r4, #0
 8002066:	dc00      	bgt.n	800206a <__aeabi_dsub+0x56>
 8002068:	e0b2      	b.n	80021d0 <__aeabi_dsub+0x1bc>
 800206a:	2a00      	cmp	r2, #0
 800206c:	d100      	bne.n	8002070 <__aeabi_dsub+0x5c>
 800206e:	e0c5      	b.n	80021fc <__aeabi_dsub+0x1e8>
 8002070:	4ab5      	ldr	r2, [pc, #724]	; (8002348 <__aeabi_dsub+0x334>)
 8002072:	4296      	cmp	r6, r2
 8002074:	d100      	bne.n	8002078 <__aeabi_dsub+0x64>
 8002076:	e28b      	b.n	8002590 <__aeabi_dsub+0x57c>
 8002078:	2280      	movs	r2, #128	; 0x80
 800207a:	0412      	lsls	r2, r2, #16
 800207c:	4311      	orrs	r1, r2
 800207e:	4662      	mov	r2, ip
 8002080:	2a38      	cmp	r2, #56	; 0x38
 8002082:	dd00      	ble.n	8002086 <__aeabi_dsub+0x72>
 8002084:	e1a1      	b.n	80023ca <__aeabi_dsub+0x3b6>
 8002086:	2a1f      	cmp	r2, #31
 8002088:	dd00      	ble.n	800208c <__aeabi_dsub+0x78>
 800208a:	e216      	b.n	80024ba <__aeabi_dsub+0x4a6>
 800208c:	2720      	movs	r7, #32
 800208e:	000c      	movs	r4, r1
 8002090:	1abf      	subs	r7, r7, r2
 8002092:	40bc      	lsls	r4, r7
 8002094:	0002      	movs	r2, r0
 8002096:	46a0      	mov	r8, r4
 8002098:	4664      	mov	r4, ip
 800209a:	40b8      	lsls	r0, r7
 800209c:	40e2      	lsrs	r2, r4
 800209e:	4644      	mov	r4, r8
 80020a0:	4314      	orrs	r4, r2
 80020a2:	0002      	movs	r2, r0
 80020a4:	1e50      	subs	r0, r2, #1
 80020a6:	4182      	sbcs	r2, r0
 80020a8:	4660      	mov	r0, ip
 80020aa:	40c1      	lsrs	r1, r0
 80020ac:	4322      	orrs	r2, r4
 80020ae:	1a5b      	subs	r3, r3, r1
 80020b0:	4649      	mov	r1, r9
 80020b2:	1a8c      	subs	r4, r1, r2
 80020b4:	45a1      	cmp	r9, r4
 80020b6:	4192      	sbcs	r2, r2
 80020b8:	4252      	negs	r2, r2
 80020ba:	1a9b      	subs	r3, r3, r2
 80020bc:	4698      	mov	r8, r3
 80020be:	4643      	mov	r3, r8
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	d400      	bmi.n	80020c6 <__aeabi_dsub+0xb2>
 80020c4:	e117      	b.n	80022f6 <__aeabi_dsub+0x2e2>
 80020c6:	4643      	mov	r3, r8
 80020c8:	025b      	lsls	r3, r3, #9
 80020ca:	0a5b      	lsrs	r3, r3, #9
 80020cc:	4698      	mov	r8, r3
 80020ce:	4643      	mov	r3, r8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d100      	bne.n	80020d6 <__aeabi_dsub+0xc2>
 80020d4:	e16c      	b.n	80023b0 <__aeabi_dsub+0x39c>
 80020d6:	4640      	mov	r0, r8
 80020d8:	f000 fbba 	bl	8002850 <__clzsi2>
 80020dc:	0002      	movs	r2, r0
 80020de:	3a08      	subs	r2, #8
 80020e0:	2120      	movs	r1, #32
 80020e2:	0020      	movs	r0, r4
 80020e4:	4643      	mov	r3, r8
 80020e6:	1a89      	subs	r1, r1, r2
 80020e8:	4093      	lsls	r3, r2
 80020ea:	40c8      	lsrs	r0, r1
 80020ec:	4094      	lsls	r4, r2
 80020ee:	4303      	orrs	r3, r0
 80020f0:	4296      	cmp	r6, r2
 80020f2:	dd00      	ble.n	80020f6 <__aeabi_dsub+0xe2>
 80020f4:	e157      	b.n	80023a6 <__aeabi_dsub+0x392>
 80020f6:	1b96      	subs	r6, r2, r6
 80020f8:	1c71      	adds	r1, r6, #1
 80020fa:	291f      	cmp	r1, #31
 80020fc:	dd00      	ble.n	8002100 <__aeabi_dsub+0xec>
 80020fe:	e1cb      	b.n	8002498 <__aeabi_dsub+0x484>
 8002100:	2220      	movs	r2, #32
 8002102:	0018      	movs	r0, r3
 8002104:	0026      	movs	r6, r4
 8002106:	1a52      	subs	r2, r2, r1
 8002108:	4094      	lsls	r4, r2
 800210a:	4090      	lsls	r0, r2
 800210c:	40ce      	lsrs	r6, r1
 800210e:	40cb      	lsrs	r3, r1
 8002110:	1e62      	subs	r2, r4, #1
 8002112:	4194      	sbcs	r4, r2
 8002114:	4330      	orrs	r0, r6
 8002116:	4698      	mov	r8, r3
 8002118:	2600      	movs	r6, #0
 800211a:	4304      	orrs	r4, r0
 800211c:	0763      	lsls	r3, r4, #29
 800211e:	d009      	beq.n	8002134 <__aeabi_dsub+0x120>
 8002120:	230f      	movs	r3, #15
 8002122:	4023      	ands	r3, r4
 8002124:	2b04      	cmp	r3, #4
 8002126:	d005      	beq.n	8002134 <__aeabi_dsub+0x120>
 8002128:	1d23      	adds	r3, r4, #4
 800212a:	42a3      	cmp	r3, r4
 800212c:	41a4      	sbcs	r4, r4
 800212e:	4264      	negs	r4, r4
 8002130:	44a0      	add	r8, r4
 8002132:	001c      	movs	r4, r3
 8002134:	4643      	mov	r3, r8
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	d400      	bmi.n	800213c <__aeabi_dsub+0x128>
 800213a:	e0df      	b.n	80022fc <__aeabi_dsub+0x2e8>
 800213c:	4b82      	ldr	r3, [pc, #520]	; (8002348 <__aeabi_dsub+0x334>)
 800213e:	3601      	adds	r6, #1
 8002140:	429e      	cmp	r6, r3
 8002142:	d100      	bne.n	8002146 <__aeabi_dsub+0x132>
 8002144:	e0fb      	b.n	800233e <__aeabi_dsub+0x32a>
 8002146:	4642      	mov	r2, r8
 8002148:	4b80      	ldr	r3, [pc, #512]	; (800234c <__aeabi_dsub+0x338>)
 800214a:	08e4      	lsrs	r4, r4, #3
 800214c:	401a      	ands	r2, r3
 800214e:	0013      	movs	r3, r2
 8002150:	0571      	lsls	r1, r6, #21
 8002152:	0752      	lsls	r2, r2, #29
 8002154:	025b      	lsls	r3, r3, #9
 8002156:	4322      	orrs	r2, r4
 8002158:	0b1b      	lsrs	r3, r3, #12
 800215a:	0d49      	lsrs	r1, r1, #21
 800215c:	0509      	lsls	r1, r1, #20
 800215e:	07ed      	lsls	r5, r5, #31
 8002160:	4319      	orrs	r1, r3
 8002162:	4329      	orrs	r1, r5
 8002164:	0010      	movs	r0, r2
 8002166:	bcf0      	pop	{r4, r5, r6, r7}
 8002168:	46bb      	mov	fp, r7
 800216a:	46b2      	mov	sl, r6
 800216c:	46a9      	mov	r9, r5
 800216e:	46a0      	mov	r8, r4
 8002170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002172:	1ab4      	subs	r4, r6, r2
 8002174:	46a4      	mov	ip, r4
 8002176:	2c00      	cmp	r4, #0
 8002178:	dd58      	ble.n	800222c <__aeabi_dsub+0x218>
 800217a:	2a00      	cmp	r2, #0
 800217c:	d100      	bne.n	8002180 <__aeabi_dsub+0x16c>
 800217e:	e09e      	b.n	80022be <__aeabi_dsub+0x2aa>
 8002180:	4a71      	ldr	r2, [pc, #452]	; (8002348 <__aeabi_dsub+0x334>)
 8002182:	4296      	cmp	r6, r2
 8002184:	d100      	bne.n	8002188 <__aeabi_dsub+0x174>
 8002186:	e13b      	b.n	8002400 <__aeabi_dsub+0x3ec>
 8002188:	2280      	movs	r2, #128	; 0x80
 800218a:	0412      	lsls	r2, r2, #16
 800218c:	4311      	orrs	r1, r2
 800218e:	4662      	mov	r2, ip
 8002190:	2a38      	cmp	r2, #56	; 0x38
 8002192:	dd00      	ble.n	8002196 <__aeabi_dsub+0x182>
 8002194:	e0c1      	b.n	800231a <__aeabi_dsub+0x306>
 8002196:	2a1f      	cmp	r2, #31
 8002198:	dc00      	bgt.n	800219c <__aeabi_dsub+0x188>
 800219a:	e1bb      	b.n	8002514 <__aeabi_dsub+0x500>
 800219c:	000c      	movs	r4, r1
 800219e:	3a20      	subs	r2, #32
 80021a0:	40d4      	lsrs	r4, r2
 80021a2:	0022      	movs	r2, r4
 80021a4:	4664      	mov	r4, ip
 80021a6:	2c20      	cmp	r4, #32
 80021a8:	d004      	beq.n	80021b4 <__aeabi_dsub+0x1a0>
 80021aa:	2740      	movs	r7, #64	; 0x40
 80021ac:	1b3f      	subs	r7, r7, r4
 80021ae:	40b9      	lsls	r1, r7
 80021b0:	4308      	orrs	r0, r1
 80021b2:	4680      	mov	r8, r0
 80021b4:	4644      	mov	r4, r8
 80021b6:	1e61      	subs	r1, r4, #1
 80021b8:	418c      	sbcs	r4, r1
 80021ba:	4314      	orrs	r4, r2
 80021bc:	e0b1      	b.n	8002322 <__aeabi_dsub+0x30e>
 80021be:	000c      	movs	r4, r1
 80021c0:	4304      	orrs	r4, r0
 80021c2:	d02a      	beq.n	800221a <__aeabi_dsub+0x206>
 80021c4:	46bb      	mov	fp, r7
 80021c6:	42bd      	cmp	r5, r7
 80021c8:	d02d      	beq.n	8002226 <__aeabi_dsub+0x212>
 80021ca:	4c61      	ldr	r4, [pc, #388]	; (8002350 <__aeabi_dsub+0x33c>)
 80021cc:	46a4      	mov	ip, r4
 80021ce:	44b4      	add	ip, r6
 80021d0:	4664      	mov	r4, ip
 80021d2:	2c00      	cmp	r4, #0
 80021d4:	d05c      	beq.n	8002290 <__aeabi_dsub+0x27c>
 80021d6:	1b94      	subs	r4, r2, r6
 80021d8:	46a4      	mov	ip, r4
 80021da:	2e00      	cmp	r6, #0
 80021dc:	d000      	beq.n	80021e0 <__aeabi_dsub+0x1cc>
 80021de:	e115      	b.n	800240c <__aeabi_dsub+0x3f8>
 80021e0:	464d      	mov	r5, r9
 80021e2:	431d      	orrs	r5, r3
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dsub+0x1d4>
 80021e6:	e1c3      	b.n	8002570 <__aeabi_dsub+0x55c>
 80021e8:	1e65      	subs	r5, r4, #1
 80021ea:	2c01      	cmp	r4, #1
 80021ec:	d100      	bne.n	80021f0 <__aeabi_dsub+0x1dc>
 80021ee:	e20c      	b.n	800260a <__aeabi_dsub+0x5f6>
 80021f0:	4e55      	ldr	r6, [pc, #340]	; (8002348 <__aeabi_dsub+0x334>)
 80021f2:	42b4      	cmp	r4, r6
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x1e4>
 80021f6:	e1f8      	b.n	80025ea <__aeabi_dsub+0x5d6>
 80021f8:	46ac      	mov	ip, r5
 80021fa:	e10e      	b.n	800241a <__aeabi_dsub+0x406>
 80021fc:	000a      	movs	r2, r1
 80021fe:	4302      	orrs	r2, r0
 8002200:	d100      	bne.n	8002204 <__aeabi_dsub+0x1f0>
 8002202:	e136      	b.n	8002472 <__aeabi_dsub+0x45e>
 8002204:	0022      	movs	r2, r4
 8002206:	3a01      	subs	r2, #1
 8002208:	2c01      	cmp	r4, #1
 800220a:	d100      	bne.n	800220e <__aeabi_dsub+0x1fa>
 800220c:	e1c6      	b.n	800259c <__aeabi_dsub+0x588>
 800220e:	4c4e      	ldr	r4, [pc, #312]	; (8002348 <__aeabi_dsub+0x334>)
 8002210:	45a4      	cmp	ip, r4
 8002212:	d100      	bne.n	8002216 <__aeabi_dsub+0x202>
 8002214:	e0f4      	b.n	8002400 <__aeabi_dsub+0x3ec>
 8002216:	4694      	mov	ip, r2
 8002218:	e731      	b.n	800207e <__aeabi_dsub+0x6a>
 800221a:	2401      	movs	r4, #1
 800221c:	4067      	eors	r7, r4
 800221e:	46bb      	mov	fp, r7
 8002220:	42bd      	cmp	r5, r7
 8002222:	d000      	beq.n	8002226 <__aeabi_dsub+0x212>
 8002224:	e71c      	b.n	8002060 <__aeabi_dsub+0x4c>
 8002226:	4c4a      	ldr	r4, [pc, #296]	; (8002350 <__aeabi_dsub+0x33c>)
 8002228:	46a4      	mov	ip, r4
 800222a:	44b4      	add	ip, r6
 800222c:	4664      	mov	r4, ip
 800222e:	2c00      	cmp	r4, #0
 8002230:	d100      	bne.n	8002234 <__aeabi_dsub+0x220>
 8002232:	e0cf      	b.n	80023d4 <__aeabi_dsub+0x3c0>
 8002234:	1b94      	subs	r4, r2, r6
 8002236:	46a4      	mov	ip, r4
 8002238:	2e00      	cmp	r6, #0
 800223a:	d100      	bne.n	800223e <__aeabi_dsub+0x22a>
 800223c:	e15c      	b.n	80024f8 <__aeabi_dsub+0x4e4>
 800223e:	4e42      	ldr	r6, [pc, #264]	; (8002348 <__aeabi_dsub+0x334>)
 8002240:	42b2      	cmp	r2, r6
 8002242:	d100      	bne.n	8002246 <__aeabi_dsub+0x232>
 8002244:	e1ec      	b.n	8002620 <__aeabi_dsub+0x60c>
 8002246:	2680      	movs	r6, #128	; 0x80
 8002248:	0436      	lsls	r6, r6, #16
 800224a:	4333      	orrs	r3, r6
 800224c:	4664      	mov	r4, ip
 800224e:	2c38      	cmp	r4, #56	; 0x38
 8002250:	dd00      	ble.n	8002254 <__aeabi_dsub+0x240>
 8002252:	e1b3      	b.n	80025bc <__aeabi_dsub+0x5a8>
 8002254:	2c1f      	cmp	r4, #31
 8002256:	dd00      	ble.n	800225a <__aeabi_dsub+0x246>
 8002258:	e238      	b.n	80026cc <__aeabi_dsub+0x6b8>
 800225a:	2620      	movs	r6, #32
 800225c:	1b36      	subs	r6, r6, r4
 800225e:	001c      	movs	r4, r3
 8002260:	40b4      	lsls	r4, r6
 8002262:	464f      	mov	r7, r9
 8002264:	46a0      	mov	r8, r4
 8002266:	4664      	mov	r4, ip
 8002268:	40e7      	lsrs	r7, r4
 800226a:	4644      	mov	r4, r8
 800226c:	433c      	orrs	r4, r7
 800226e:	464f      	mov	r7, r9
 8002270:	40b7      	lsls	r7, r6
 8002272:	003e      	movs	r6, r7
 8002274:	1e77      	subs	r7, r6, #1
 8002276:	41be      	sbcs	r6, r7
 8002278:	4334      	orrs	r4, r6
 800227a:	4666      	mov	r6, ip
 800227c:	40f3      	lsrs	r3, r6
 800227e:	18c9      	adds	r1, r1, r3
 8002280:	1824      	adds	r4, r4, r0
 8002282:	4284      	cmp	r4, r0
 8002284:	419b      	sbcs	r3, r3
 8002286:	425b      	negs	r3, r3
 8002288:	4698      	mov	r8, r3
 800228a:	0016      	movs	r6, r2
 800228c:	4488      	add	r8, r1
 800228e:	e04e      	b.n	800232e <__aeabi_dsub+0x31a>
 8002290:	4a30      	ldr	r2, [pc, #192]	; (8002354 <__aeabi_dsub+0x340>)
 8002292:	1c74      	adds	r4, r6, #1
 8002294:	4214      	tst	r4, r2
 8002296:	d000      	beq.n	800229a <__aeabi_dsub+0x286>
 8002298:	e0d6      	b.n	8002448 <__aeabi_dsub+0x434>
 800229a:	464a      	mov	r2, r9
 800229c:	431a      	orrs	r2, r3
 800229e:	2e00      	cmp	r6, #0
 80022a0:	d000      	beq.n	80022a4 <__aeabi_dsub+0x290>
 80022a2:	e15b      	b.n	800255c <__aeabi_dsub+0x548>
 80022a4:	2a00      	cmp	r2, #0
 80022a6:	d100      	bne.n	80022aa <__aeabi_dsub+0x296>
 80022a8:	e1a5      	b.n	80025f6 <__aeabi_dsub+0x5e2>
 80022aa:	000a      	movs	r2, r1
 80022ac:	4302      	orrs	r2, r0
 80022ae:	d000      	beq.n	80022b2 <__aeabi_dsub+0x29e>
 80022b0:	e1bb      	b.n	800262a <__aeabi_dsub+0x616>
 80022b2:	464a      	mov	r2, r9
 80022b4:	0759      	lsls	r1, r3, #29
 80022b6:	08d2      	lsrs	r2, r2, #3
 80022b8:	430a      	orrs	r2, r1
 80022ba:	08db      	lsrs	r3, r3, #3
 80022bc:	e027      	b.n	800230e <__aeabi_dsub+0x2fa>
 80022be:	000a      	movs	r2, r1
 80022c0:	4302      	orrs	r2, r0
 80022c2:	d100      	bne.n	80022c6 <__aeabi_dsub+0x2b2>
 80022c4:	e174      	b.n	80025b0 <__aeabi_dsub+0x59c>
 80022c6:	0022      	movs	r2, r4
 80022c8:	3a01      	subs	r2, #1
 80022ca:	2c01      	cmp	r4, #1
 80022cc:	d005      	beq.n	80022da <__aeabi_dsub+0x2c6>
 80022ce:	4c1e      	ldr	r4, [pc, #120]	; (8002348 <__aeabi_dsub+0x334>)
 80022d0:	45a4      	cmp	ip, r4
 80022d2:	d100      	bne.n	80022d6 <__aeabi_dsub+0x2c2>
 80022d4:	e094      	b.n	8002400 <__aeabi_dsub+0x3ec>
 80022d6:	4694      	mov	ip, r2
 80022d8:	e759      	b.n	800218e <__aeabi_dsub+0x17a>
 80022da:	4448      	add	r0, r9
 80022dc:	4548      	cmp	r0, r9
 80022de:	4192      	sbcs	r2, r2
 80022e0:	185b      	adds	r3, r3, r1
 80022e2:	4698      	mov	r8, r3
 80022e4:	0004      	movs	r4, r0
 80022e6:	4252      	negs	r2, r2
 80022e8:	4490      	add	r8, r2
 80022ea:	4643      	mov	r3, r8
 80022ec:	2602      	movs	r6, #2
 80022ee:	021b      	lsls	r3, r3, #8
 80022f0:	d500      	bpl.n	80022f4 <__aeabi_dsub+0x2e0>
 80022f2:	e0c4      	b.n	800247e <__aeabi_dsub+0x46a>
 80022f4:	3e01      	subs	r6, #1
 80022f6:	0763      	lsls	r3, r4, #29
 80022f8:	d000      	beq.n	80022fc <__aeabi_dsub+0x2e8>
 80022fa:	e711      	b.n	8002120 <__aeabi_dsub+0x10c>
 80022fc:	4643      	mov	r3, r8
 80022fe:	46b4      	mov	ip, r6
 8002300:	0759      	lsls	r1, r3, #29
 8002302:	08e2      	lsrs	r2, r4, #3
 8002304:	430a      	orrs	r2, r1
 8002306:	08db      	lsrs	r3, r3, #3
 8002308:	490f      	ldr	r1, [pc, #60]	; (8002348 <__aeabi_dsub+0x334>)
 800230a:	458c      	cmp	ip, r1
 800230c:	d040      	beq.n	8002390 <__aeabi_dsub+0x37c>
 800230e:	4661      	mov	r1, ip
 8002310:	031b      	lsls	r3, r3, #12
 8002312:	0549      	lsls	r1, r1, #21
 8002314:	0b1b      	lsrs	r3, r3, #12
 8002316:	0d49      	lsrs	r1, r1, #21
 8002318:	e720      	b.n	800215c <__aeabi_dsub+0x148>
 800231a:	4301      	orrs	r1, r0
 800231c:	000c      	movs	r4, r1
 800231e:	1e61      	subs	r1, r4, #1
 8002320:	418c      	sbcs	r4, r1
 8002322:	444c      	add	r4, r9
 8002324:	454c      	cmp	r4, r9
 8002326:	4192      	sbcs	r2, r2
 8002328:	4252      	negs	r2, r2
 800232a:	4690      	mov	r8, r2
 800232c:	4498      	add	r8, r3
 800232e:	4643      	mov	r3, r8
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	d5e0      	bpl.n	80022f6 <__aeabi_dsub+0x2e2>
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <__aeabi_dsub+0x334>)
 8002336:	3601      	adds	r6, #1
 8002338:	429e      	cmp	r6, r3
 800233a:	d000      	beq.n	800233e <__aeabi_dsub+0x32a>
 800233c:	e09f      	b.n	800247e <__aeabi_dsub+0x46a>
 800233e:	0031      	movs	r1, r6
 8002340:	2300      	movs	r3, #0
 8002342:	2200      	movs	r2, #0
 8002344:	e70a      	b.n	800215c <__aeabi_dsub+0x148>
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	000007ff 	.word	0x000007ff
 800234c:	ff7fffff 	.word	0xff7fffff
 8002350:	fffff801 	.word	0xfffff801
 8002354:	000007fe 	.word	0x000007fe
 8002358:	2a00      	cmp	r2, #0
 800235a:	d100      	bne.n	800235e <__aeabi_dsub+0x34a>
 800235c:	e160      	b.n	8002620 <__aeabi_dsub+0x60c>
 800235e:	000a      	movs	r2, r1
 8002360:	4302      	orrs	r2, r0
 8002362:	d04d      	beq.n	8002400 <__aeabi_dsub+0x3ec>
 8002364:	464a      	mov	r2, r9
 8002366:	075c      	lsls	r4, r3, #29
 8002368:	08d2      	lsrs	r2, r2, #3
 800236a:	4322      	orrs	r2, r4
 800236c:	2480      	movs	r4, #128	; 0x80
 800236e:	08db      	lsrs	r3, r3, #3
 8002370:	0324      	lsls	r4, r4, #12
 8002372:	4223      	tst	r3, r4
 8002374:	d007      	beq.n	8002386 <__aeabi_dsub+0x372>
 8002376:	08ce      	lsrs	r6, r1, #3
 8002378:	4226      	tst	r6, r4
 800237a:	d104      	bne.n	8002386 <__aeabi_dsub+0x372>
 800237c:	465d      	mov	r5, fp
 800237e:	0033      	movs	r3, r6
 8002380:	08c2      	lsrs	r2, r0, #3
 8002382:	0749      	lsls	r1, r1, #29
 8002384:	430a      	orrs	r2, r1
 8002386:	0f51      	lsrs	r1, r2, #29
 8002388:	00d2      	lsls	r2, r2, #3
 800238a:	08d2      	lsrs	r2, r2, #3
 800238c:	0749      	lsls	r1, r1, #29
 800238e:	430a      	orrs	r2, r1
 8002390:	0011      	movs	r1, r2
 8002392:	4319      	orrs	r1, r3
 8002394:	d100      	bne.n	8002398 <__aeabi_dsub+0x384>
 8002396:	e1c8      	b.n	800272a <__aeabi_dsub+0x716>
 8002398:	2180      	movs	r1, #128	; 0x80
 800239a:	0309      	lsls	r1, r1, #12
 800239c:	430b      	orrs	r3, r1
 800239e:	031b      	lsls	r3, r3, #12
 80023a0:	49d5      	ldr	r1, [pc, #852]	; (80026f8 <__aeabi_dsub+0x6e4>)
 80023a2:	0b1b      	lsrs	r3, r3, #12
 80023a4:	e6da      	b.n	800215c <__aeabi_dsub+0x148>
 80023a6:	49d5      	ldr	r1, [pc, #852]	; (80026fc <__aeabi_dsub+0x6e8>)
 80023a8:	1ab6      	subs	r6, r6, r2
 80023aa:	400b      	ands	r3, r1
 80023ac:	4698      	mov	r8, r3
 80023ae:	e6b5      	b.n	800211c <__aeabi_dsub+0x108>
 80023b0:	0020      	movs	r0, r4
 80023b2:	f000 fa4d 	bl	8002850 <__clzsi2>
 80023b6:	0002      	movs	r2, r0
 80023b8:	3218      	adds	r2, #24
 80023ba:	2a1f      	cmp	r2, #31
 80023bc:	dc00      	bgt.n	80023c0 <__aeabi_dsub+0x3ac>
 80023be:	e68f      	b.n	80020e0 <__aeabi_dsub+0xcc>
 80023c0:	0023      	movs	r3, r4
 80023c2:	3808      	subs	r0, #8
 80023c4:	4083      	lsls	r3, r0
 80023c6:	2400      	movs	r4, #0
 80023c8:	e692      	b.n	80020f0 <__aeabi_dsub+0xdc>
 80023ca:	4308      	orrs	r0, r1
 80023cc:	0002      	movs	r2, r0
 80023ce:	1e50      	subs	r0, r2, #1
 80023d0:	4182      	sbcs	r2, r0
 80023d2:	e66d      	b.n	80020b0 <__aeabi_dsub+0x9c>
 80023d4:	4cca      	ldr	r4, [pc, #808]	; (8002700 <__aeabi_dsub+0x6ec>)
 80023d6:	1c72      	adds	r2, r6, #1
 80023d8:	4222      	tst	r2, r4
 80023da:	d000      	beq.n	80023de <__aeabi_dsub+0x3ca>
 80023dc:	e0ad      	b.n	800253a <__aeabi_dsub+0x526>
 80023de:	464a      	mov	r2, r9
 80023e0:	431a      	orrs	r2, r3
 80023e2:	2e00      	cmp	r6, #0
 80023e4:	d1b8      	bne.n	8002358 <__aeabi_dsub+0x344>
 80023e6:	2a00      	cmp	r2, #0
 80023e8:	d100      	bne.n	80023ec <__aeabi_dsub+0x3d8>
 80023ea:	e158      	b.n	800269e <__aeabi_dsub+0x68a>
 80023ec:	000a      	movs	r2, r1
 80023ee:	4302      	orrs	r2, r0
 80023f0:	d000      	beq.n	80023f4 <__aeabi_dsub+0x3e0>
 80023f2:	e159      	b.n	80026a8 <__aeabi_dsub+0x694>
 80023f4:	464a      	mov	r2, r9
 80023f6:	0759      	lsls	r1, r3, #29
 80023f8:	08d2      	lsrs	r2, r2, #3
 80023fa:	430a      	orrs	r2, r1
 80023fc:	08db      	lsrs	r3, r3, #3
 80023fe:	e786      	b.n	800230e <__aeabi_dsub+0x2fa>
 8002400:	464a      	mov	r2, r9
 8002402:	0759      	lsls	r1, r3, #29
 8002404:	08d2      	lsrs	r2, r2, #3
 8002406:	430a      	orrs	r2, r1
 8002408:	08db      	lsrs	r3, r3, #3
 800240a:	e7c1      	b.n	8002390 <__aeabi_dsub+0x37c>
 800240c:	4dba      	ldr	r5, [pc, #744]	; (80026f8 <__aeabi_dsub+0x6e4>)
 800240e:	42aa      	cmp	r2, r5
 8002410:	d100      	bne.n	8002414 <__aeabi_dsub+0x400>
 8002412:	e11e      	b.n	8002652 <__aeabi_dsub+0x63e>
 8002414:	2580      	movs	r5, #128	; 0x80
 8002416:	042d      	lsls	r5, r5, #16
 8002418:	432b      	orrs	r3, r5
 800241a:	4664      	mov	r4, ip
 800241c:	2c38      	cmp	r4, #56	; 0x38
 800241e:	dc5d      	bgt.n	80024dc <__aeabi_dsub+0x4c8>
 8002420:	2c1f      	cmp	r4, #31
 8002422:	dd00      	ble.n	8002426 <__aeabi_dsub+0x412>
 8002424:	e0d0      	b.n	80025c8 <__aeabi_dsub+0x5b4>
 8002426:	2520      	movs	r5, #32
 8002428:	4667      	mov	r7, ip
 800242a:	1b2d      	subs	r5, r5, r4
 800242c:	464e      	mov	r6, r9
 800242e:	001c      	movs	r4, r3
 8002430:	40fe      	lsrs	r6, r7
 8002432:	40ac      	lsls	r4, r5
 8002434:	4334      	orrs	r4, r6
 8002436:	464e      	mov	r6, r9
 8002438:	40ae      	lsls	r6, r5
 800243a:	0035      	movs	r5, r6
 800243c:	40fb      	lsrs	r3, r7
 800243e:	1e6e      	subs	r6, r5, #1
 8002440:	41b5      	sbcs	r5, r6
 8002442:	1ac9      	subs	r1, r1, r3
 8002444:	432c      	orrs	r4, r5
 8002446:	e04e      	b.n	80024e6 <__aeabi_dsub+0x4d2>
 8002448:	464a      	mov	r2, r9
 800244a:	1a14      	subs	r4, r2, r0
 800244c:	45a1      	cmp	r9, r4
 800244e:	4192      	sbcs	r2, r2
 8002450:	4252      	negs	r2, r2
 8002452:	4690      	mov	r8, r2
 8002454:	1a5f      	subs	r7, r3, r1
 8002456:	003a      	movs	r2, r7
 8002458:	4647      	mov	r7, r8
 800245a:	1bd2      	subs	r2, r2, r7
 800245c:	4690      	mov	r8, r2
 800245e:	0212      	lsls	r2, r2, #8
 8002460:	d500      	bpl.n	8002464 <__aeabi_dsub+0x450>
 8002462:	e08b      	b.n	800257c <__aeabi_dsub+0x568>
 8002464:	4642      	mov	r2, r8
 8002466:	4322      	orrs	r2, r4
 8002468:	d000      	beq.n	800246c <__aeabi_dsub+0x458>
 800246a:	e630      	b.n	80020ce <__aeabi_dsub+0xba>
 800246c:	2300      	movs	r3, #0
 800246e:	2500      	movs	r5, #0
 8002470:	e74d      	b.n	800230e <__aeabi_dsub+0x2fa>
 8002472:	464a      	mov	r2, r9
 8002474:	0759      	lsls	r1, r3, #29
 8002476:	08d2      	lsrs	r2, r2, #3
 8002478:	430a      	orrs	r2, r1
 800247a:	08db      	lsrs	r3, r3, #3
 800247c:	e744      	b.n	8002308 <__aeabi_dsub+0x2f4>
 800247e:	4642      	mov	r2, r8
 8002480:	4b9e      	ldr	r3, [pc, #632]	; (80026fc <__aeabi_dsub+0x6e8>)
 8002482:	0861      	lsrs	r1, r4, #1
 8002484:	401a      	ands	r2, r3
 8002486:	0013      	movs	r3, r2
 8002488:	2201      	movs	r2, #1
 800248a:	4014      	ands	r4, r2
 800248c:	430c      	orrs	r4, r1
 800248e:	07da      	lsls	r2, r3, #31
 8002490:	085b      	lsrs	r3, r3, #1
 8002492:	4698      	mov	r8, r3
 8002494:	4314      	orrs	r4, r2
 8002496:	e641      	b.n	800211c <__aeabi_dsub+0x108>
 8002498:	001a      	movs	r2, r3
 800249a:	3e1f      	subs	r6, #31
 800249c:	40f2      	lsrs	r2, r6
 800249e:	0016      	movs	r6, r2
 80024a0:	2920      	cmp	r1, #32
 80024a2:	d003      	beq.n	80024ac <__aeabi_dsub+0x498>
 80024a4:	2240      	movs	r2, #64	; 0x40
 80024a6:	1a51      	subs	r1, r2, r1
 80024a8:	408b      	lsls	r3, r1
 80024aa:	431c      	orrs	r4, r3
 80024ac:	1e62      	subs	r2, r4, #1
 80024ae:	4194      	sbcs	r4, r2
 80024b0:	2300      	movs	r3, #0
 80024b2:	4334      	orrs	r4, r6
 80024b4:	4698      	mov	r8, r3
 80024b6:	2600      	movs	r6, #0
 80024b8:	e71d      	b.n	80022f6 <__aeabi_dsub+0x2e2>
 80024ba:	000c      	movs	r4, r1
 80024bc:	3a20      	subs	r2, #32
 80024be:	40d4      	lsrs	r4, r2
 80024c0:	0022      	movs	r2, r4
 80024c2:	4664      	mov	r4, ip
 80024c4:	2c20      	cmp	r4, #32
 80024c6:	d004      	beq.n	80024d2 <__aeabi_dsub+0x4be>
 80024c8:	2740      	movs	r7, #64	; 0x40
 80024ca:	1b3f      	subs	r7, r7, r4
 80024cc:	40b9      	lsls	r1, r7
 80024ce:	4308      	orrs	r0, r1
 80024d0:	4680      	mov	r8, r0
 80024d2:	4644      	mov	r4, r8
 80024d4:	1e61      	subs	r1, r4, #1
 80024d6:	418c      	sbcs	r4, r1
 80024d8:	4322      	orrs	r2, r4
 80024da:	e5e9      	b.n	80020b0 <__aeabi_dsub+0x9c>
 80024dc:	464c      	mov	r4, r9
 80024de:	4323      	orrs	r3, r4
 80024e0:	001c      	movs	r4, r3
 80024e2:	1e63      	subs	r3, r4, #1
 80024e4:	419c      	sbcs	r4, r3
 80024e6:	1b04      	subs	r4, r0, r4
 80024e8:	42a0      	cmp	r0, r4
 80024ea:	419b      	sbcs	r3, r3
 80024ec:	425b      	negs	r3, r3
 80024ee:	1acb      	subs	r3, r1, r3
 80024f0:	4698      	mov	r8, r3
 80024f2:	465d      	mov	r5, fp
 80024f4:	0016      	movs	r6, r2
 80024f6:	e5e2      	b.n	80020be <__aeabi_dsub+0xaa>
 80024f8:	464e      	mov	r6, r9
 80024fa:	431e      	orrs	r6, r3
 80024fc:	d100      	bne.n	8002500 <__aeabi_dsub+0x4ec>
 80024fe:	e0ae      	b.n	800265e <__aeabi_dsub+0x64a>
 8002500:	1e66      	subs	r6, r4, #1
 8002502:	2c01      	cmp	r4, #1
 8002504:	d100      	bne.n	8002508 <__aeabi_dsub+0x4f4>
 8002506:	e0fd      	b.n	8002704 <__aeabi_dsub+0x6f0>
 8002508:	4f7b      	ldr	r7, [pc, #492]	; (80026f8 <__aeabi_dsub+0x6e4>)
 800250a:	42bc      	cmp	r4, r7
 800250c:	d100      	bne.n	8002510 <__aeabi_dsub+0x4fc>
 800250e:	e107      	b.n	8002720 <__aeabi_dsub+0x70c>
 8002510:	46b4      	mov	ip, r6
 8002512:	e69b      	b.n	800224c <__aeabi_dsub+0x238>
 8002514:	4664      	mov	r4, ip
 8002516:	2220      	movs	r2, #32
 8002518:	1b12      	subs	r2, r2, r4
 800251a:	000c      	movs	r4, r1
 800251c:	4094      	lsls	r4, r2
 800251e:	0007      	movs	r7, r0
 8002520:	4090      	lsls	r0, r2
 8002522:	46a0      	mov	r8, r4
 8002524:	4664      	mov	r4, ip
 8002526:	1e42      	subs	r2, r0, #1
 8002528:	4190      	sbcs	r0, r2
 800252a:	4662      	mov	r2, ip
 800252c:	40e7      	lsrs	r7, r4
 800252e:	4644      	mov	r4, r8
 8002530:	40d1      	lsrs	r1, r2
 8002532:	433c      	orrs	r4, r7
 8002534:	4304      	orrs	r4, r0
 8002536:	185b      	adds	r3, r3, r1
 8002538:	e6f3      	b.n	8002322 <__aeabi_dsub+0x30e>
 800253a:	4c6f      	ldr	r4, [pc, #444]	; (80026f8 <__aeabi_dsub+0x6e4>)
 800253c:	42a2      	cmp	r2, r4
 800253e:	d100      	bne.n	8002542 <__aeabi_dsub+0x52e>
 8002540:	e0d5      	b.n	80026ee <__aeabi_dsub+0x6da>
 8002542:	4448      	add	r0, r9
 8002544:	185b      	adds	r3, r3, r1
 8002546:	4548      	cmp	r0, r9
 8002548:	4189      	sbcs	r1, r1
 800254a:	4249      	negs	r1, r1
 800254c:	185b      	adds	r3, r3, r1
 800254e:	07dc      	lsls	r4, r3, #31
 8002550:	0840      	lsrs	r0, r0, #1
 8002552:	085b      	lsrs	r3, r3, #1
 8002554:	4698      	mov	r8, r3
 8002556:	0016      	movs	r6, r2
 8002558:	4304      	orrs	r4, r0
 800255a:	e6cc      	b.n	80022f6 <__aeabi_dsub+0x2e2>
 800255c:	2a00      	cmp	r2, #0
 800255e:	d000      	beq.n	8002562 <__aeabi_dsub+0x54e>
 8002560:	e082      	b.n	8002668 <__aeabi_dsub+0x654>
 8002562:	000a      	movs	r2, r1
 8002564:	4302      	orrs	r2, r0
 8002566:	d140      	bne.n	80025ea <__aeabi_dsub+0x5d6>
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	2500      	movs	r5, #0
 800256c:	031b      	lsls	r3, r3, #12
 800256e:	e713      	b.n	8002398 <__aeabi_dsub+0x384>
 8002570:	074b      	lsls	r3, r1, #29
 8002572:	08c2      	lsrs	r2, r0, #3
 8002574:	431a      	orrs	r2, r3
 8002576:	465d      	mov	r5, fp
 8002578:	08cb      	lsrs	r3, r1, #3
 800257a:	e6c5      	b.n	8002308 <__aeabi_dsub+0x2f4>
 800257c:	464a      	mov	r2, r9
 800257e:	1a84      	subs	r4, r0, r2
 8002580:	42a0      	cmp	r0, r4
 8002582:	4192      	sbcs	r2, r2
 8002584:	1acb      	subs	r3, r1, r3
 8002586:	4252      	negs	r2, r2
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	4698      	mov	r8, r3
 800258c:	465d      	mov	r5, fp
 800258e:	e59e      	b.n	80020ce <__aeabi_dsub+0xba>
 8002590:	464a      	mov	r2, r9
 8002592:	0759      	lsls	r1, r3, #29
 8002594:	08d2      	lsrs	r2, r2, #3
 8002596:	430a      	orrs	r2, r1
 8002598:	08db      	lsrs	r3, r3, #3
 800259a:	e6f9      	b.n	8002390 <__aeabi_dsub+0x37c>
 800259c:	464a      	mov	r2, r9
 800259e:	1a14      	subs	r4, r2, r0
 80025a0:	45a1      	cmp	r9, r4
 80025a2:	4192      	sbcs	r2, r2
 80025a4:	1a5b      	subs	r3, r3, r1
 80025a6:	4252      	negs	r2, r2
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	4698      	mov	r8, r3
 80025ac:	2601      	movs	r6, #1
 80025ae:	e586      	b.n	80020be <__aeabi_dsub+0xaa>
 80025b0:	464a      	mov	r2, r9
 80025b2:	0759      	lsls	r1, r3, #29
 80025b4:	08d2      	lsrs	r2, r2, #3
 80025b6:	430a      	orrs	r2, r1
 80025b8:	08db      	lsrs	r3, r3, #3
 80025ba:	e6a5      	b.n	8002308 <__aeabi_dsub+0x2f4>
 80025bc:	464c      	mov	r4, r9
 80025be:	4323      	orrs	r3, r4
 80025c0:	001c      	movs	r4, r3
 80025c2:	1e63      	subs	r3, r4, #1
 80025c4:	419c      	sbcs	r4, r3
 80025c6:	e65b      	b.n	8002280 <__aeabi_dsub+0x26c>
 80025c8:	4665      	mov	r5, ip
 80025ca:	001e      	movs	r6, r3
 80025cc:	3d20      	subs	r5, #32
 80025ce:	40ee      	lsrs	r6, r5
 80025d0:	2c20      	cmp	r4, #32
 80025d2:	d005      	beq.n	80025e0 <__aeabi_dsub+0x5cc>
 80025d4:	2540      	movs	r5, #64	; 0x40
 80025d6:	1b2d      	subs	r5, r5, r4
 80025d8:	40ab      	lsls	r3, r5
 80025da:	464c      	mov	r4, r9
 80025dc:	431c      	orrs	r4, r3
 80025de:	46a2      	mov	sl, r4
 80025e0:	4654      	mov	r4, sl
 80025e2:	1e63      	subs	r3, r4, #1
 80025e4:	419c      	sbcs	r4, r3
 80025e6:	4334      	orrs	r4, r6
 80025e8:	e77d      	b.n	80024e6 <__aeabi_dsub+0x4d2>
 80025ea:	074b      	lsls	r3, r1, #29
 80025ec:	08c2      	lsrs	r2, r0, #3
 80025ee:	431a      	orrs	r2, r3
 80025f0:	465d      	mov	r5, fp
 80025f2:	08cb      	lsrs	r3, r1, #3
 80025f4:	e6cc      	b.n	8002390 <__aeabi_dsub+0x37c>
 80025f6:	000a      	movs	r2, r1
 80025f8:	4302      	orrs	r2, r0
 80025fa:	d100      	bne.n	80025fe <__aeabi_dsub+0x5ea>
 80025fc:	e736      	b.n	800246c <__aeabi_dsub+0x458>
 80025fe:	074b      	lsls	r3, r1, #29
 8002600:	08c2      	lsrs	r2, r0, #3
 8002602:	431a      	orrs	r2, r3
 8002604:	465d      	mov	r5, fp
 8002606:	08cb      	lsrs	r3, r1, #3
 8002608:	e681      	b.n	800230e <__aeabi_dsub+0x2fa>
 800260a:	464a      	mov	r2, r9
 800260c:	1a84      	subs	r4, r0, r2
 800260e:	42a0      	cmp	r0, r4
 8002610:	4192      	sbcs	r2, r2
 8002612:	1acb      	subs	r3, r1, r3
 8002614:	4252      	negs	r2, r2
 8002616:	1a9b      	subs	r3, r3, r2
 8002618:	4698      	mov	r8, r3
 800261a:	465d      	mov	r5, fp
 800261c:	2601      	movs	r6, #1
 800261e:	e54e      	b.n	80020be <__aeabi_dsub+0xaa>
 8002620:	074b      	lsls	r3, r1, #29
 8002622:	08c2      	lsrs	r2, r0, #3
 8002624:	431a      	orrs	r2, r3
 8002626:	08cb      	lsrs	r3, r1, #3
 8002628:	e6b2      	b.n	8002390 <__aeabi_dsub+0x37c>
 800262a:	464a      	mov	r2, r9
 800262c:	1a14      	subs	r4, r2, r0
 800262e:	45a1      	cmp	r9, r4
 8002630:	4192      	sbcs	r2, r2
 8002632:	1a5f      	subs	r7, r3, r1
 8002634:	4252      	negs	r2, r2
 8002636:	1aba      	subs	r2, r7, r2
 8002638:	4690      	mov	r8, r2
 800263a:	0212      	lsls	r2, r2, #8
 800263c:	d56b      	bpl.n	8002716 <__aeabi_dsub+0x702>
 800263e:	464a      	mov	r2, r9
 8002640:	1a84      	subs	r4, r0, r2
 8002642:	42a0      	cmp	r0, r4
 8002644:	4192      	sbcs	r2, r2
 8002646:	1acb      	subs	r3, r1, r3
 8002648:	4252      	negs	r2, r2
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	4698      	mov	r8, r3
 800264e:	465d      	mov	r5, fp
 8002650:	e564      	b.n	800211c <__aeabi_dsub+0x108>
 8002652:	074b      	lsls	r3, r1, #29
 8002654:	08c2      	lsrs	r2, r0, #3
 8002656:	431a      	orrs	r2, r3
 8002658:	465d      	mov	r5, fp
 800265a:	08cb      	lsrs	r3, r1, #3
 800265c:	e698      	b.n	8002390 <__aeabi_dsub+0x37c>
 800265e:	074b      	lsls	r3, r1, #29
 8002660:	08c2      	lsrs	r2, r0, #3
 8002662:	431a      	orrs	r2, r3
 8002664:	08cb      	lsrs	r3, r1, #3
 8002666:	e64f      	b.n	8002308 <__aeabi_dsub+0x2f4>
 8002668:	000a      	movs	r2, r1
 800266a:	4302      	orrs	r2, r0
 800266c:	d090      	beq.n	8002590 <__aeabi_dsub+0x57c>
 800266e:	464a      	mov	r2, r9
 8002670:	075c      	lsls	r4, r3, #29
 8002672:	08d2      	lsrs	r2, r2, #3
 8002674:	4314      	orrs	r4, r2
 8002676:	2280      	movs	r2, #128	; 0x80
 8002678:	08db      	lsrs	r3, r3, #3
 800267a:	0312      	lsls	r2, r2, #12
 800267c:	4213      	tst	r3, r2
 800267e:	d008      	beq.n	8002692 <__aeabi_dsub+0x67e>
 8002680:	08ce      	lsrs	r6, r1, #3
 8002682:	4216      	tst	r6, r2
 8002684:	d105      	bne.n	8002692 <__aeabi_dsub+0x67e>
 8002686:	08c0      	lsrs	r0, r0, #3
 8002688:	0749      	lsls	r1, r1, #29
 800268a:	4308      	orrs	r0, r1
 800268c:	0004      	movs	r4, r0
 800268e:	465d      	mov	r5, fp
 8002690:	0033      	movs	r3, r6
 8002692:	0f61      	lsrs	r1, r4, #29
 8002694:	00e2      	lsls	r2, r4, #3
 8002696:	0749      	lsls	r1, r1, #29
 8002698:	08d2      	lsrs	r2, r2, #3
 800269a:	430a      	orrs	r2, r1
 800269c:	e678      	b.n	8002390 <__aeabi_dsub+0x37c>
 800269e:	074b      	lsls	r3, r1, #29
 80026a0:	08c2      	lsrs	r2, r0, #3
 80026a2:	431a      	orrs	r2, r3
 80026a4:	08cb      	lsrs	r3, r1, #3
 80026a6:	e632      	b.n	800230e <__aeabi_dsub+0x2fa>
 80026a8:	4448      	add	r0, r9
 80026aa:	185b      	adds	r3, r3, r1
 80026ac:	4548      	cmp	r0, r9
 80026ae:	4192      	sbcs	r2, r2
 80026b0:	4698      	mov	r8, r3
 80026b2:	4252      	negs	r2, r2
 80026b4:	4490      	add	r8, r2
 80026b6:	4643      	mov	r3, r8
 80026b8:	0004      	movs	r4, r0
 80026ba:	021b      	lsls	r3, r3, #8
 80026bc:	d400      	bmi.n	80026c0 <__aeabi_dsub+0x6ac>
 80026be:	e61a      	b.n	80022f6 <__aeabi_dsub+0x2e2>
 80026c0:	4642      	mov	r2, r8
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <__aeabi_dsub+0x6e8>)
 80026c4:	2601      	movs	r6, #1
 80026c6:	401a      	ands	r2, r3
 80026c8:	4690      	mov	r8, r2
 80026ca:	e614      	b.n	80022f6 <__aeabi_dsub+0x2e2>
 80026cc:	4666      	mov	r6, ip
 80026ce:	001f      	movs	r7, r3
 80026d0:	3e20      	subs	r6, #32
 80026d2:	40f7      	lsrs	r7, r6
 80026d4:	2c20      	cmp	r4, #32
 80026d6:	d005      	beq.n	80026e4 <__aeabi_dsub+0x6d0>
 80026d8:	2640      	movs	r6, #64	; 0x40
 80026da:	1b36      	subs	r6, r6, r4
 80026dc:	40b3      	lsls	r3, r6
 80026de:	464c      	mov	r4, r9
 80026e0:	431c      	orrs	r4, r3
 80026e2:	46a2      	mov	sl, r4
 80026e4:	4654      	mov	r4, sl
 80026e6:	1e63      	subs	r3, r4, #1
 80026e8:	419c      	sbcs	r4, r3
 80026ea:	433c      	orrs	r4, r7
 80026ec:	e5c8      	b.n	8002280 <__aeabi_dsub+0x26c>
 80026ee:	0011      	movs	r1, r2
 80026f0:	2300      	movs	r3, #0
 80026f2:	2200      	movs	r2, #0
 80026f4:	e532      	b.n	800215c <__aeabi_dsub+0x148>
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	000007ff 	.word	0x000007ff
 80026fc:	ff7fffff 	.word	0xff7fffff
 8002700:	000007fe 	.word	0x000007fe
 8002704:	464a      	mov	r2, r9
 8002706:	1814      	adds	r4, r2, r0
 8002708:	4284      	cmp	r4, r0
 800270a:	4192      	sbcs	r2, r2
 800270c:	185b      	adds	r3, r3, r1
 800270e:	4698      	mov	r8, r3
 8002710:	4252      	negs	r2, r2
 8002712:	4490      	add	r8, r2
 8002714:	e5e9      	b.n	80022ea <__aeabi_dsub+0x2d6>
 8002716:	4642      	mov	r2, r8
 8002718:	4322      	orrs	r2, r4
 800271a:	d100      	bne.n	800271e <__aeabi_dsub+0x70a>
 800271c:	e6a6      	b.n	800246c <__aeabi_dsub+0x458>
 800271e:	e5ea      	b.n	80022f6 <__aeabi_dsub+0x2e2>
 8002720:	074b      	lsls	r3, r1, #29
 8002722:	08c2      	lsrs	r2, r0, #3
 8002724:	431a      	orrs	r2, r3
 8002726:	08cb      	lsrs	r3, r1, #3
 8002728:	e632      	b.n	8002390 <__aeabi_dsub+0x37c>
 800272a:	2200      	movs	r2, #0
 800272c:	4901      	ldr	r1, [pc, #4]	; (8002734 <__aeabi_dsub+0x720>)
 800272e:	0013      	movs	r3, r2
 8002730:	e514      	b.n	800215c <__aeabi_dsub+0x148>
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	000007ff 	.word	0x000007ff

08002738 <__aeabi_d2iz>:
 8002738:	000a      	movs	r2, r1
 800273a:	b530      	push	{r4, r5, lr}
 800273c:	4c13      	ldr	r4, [pc, #76]	; (800278c <__aeabi_d2iz+0x54>)
 800273e:	0053      	lsls	r3, r2, #1
 8002740:	0309      	lsls	r1, r1, #12
 8002742:	0005      	movs	r5, r0
 8002744:	0b09      	lsrs	r1, r1, #12
 8002746:	2000      	movs	r0, #0
 8002748:	0d5b      	lsrs	r3, r3, #21
 800274a:	0fd2      	lsrs	r2, r2, #31
 800274c:	42a3      	cmp	r3, r4
 800274e:	dd04      	ble.n	800275a <__aeabi_d2iz+0x22>
 8002750:	480f      	ldr	r0, [pc, #60]	; (8002790 <__aeabi_d2iz+0x58>)
 8002752:	4283      	cmp	r3, r0
 8002754:	dd02      	ble.n	800275c <__aeabi_d2iz+0x24>
 8002756:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <__aeabi_d2iz+0x5c>)
 8002758:	18d0      	adds	r0, r2, r3
 800275a:	bd30      	pop	{r4, r5, pc}
 800275c:	2080      	movs	r0, #128	; 0x80
 800275e:	0340      	lsls	r0, r0, #13
 8002760:	4301      	orrs	r1, r0
 8002762:	480d      	ldr	r0, [pc, #52]	; (8002798 <__aeabi_d2iz+0x60>)
 8002764:	1ac0      	subs	r0, r0, r3
 8002766:	281f      	cmp	r0, #31
 8002768:	dd08      	ble.n	800277c <__aeabi_d2iz+0x44>
 800276a:	480c      	ldr	r0, [pc, #48]	; (800279c <__aeabi_d2iz+0x64>)
 800276c:	1ac3      	subs	r3, r0, r3
 800276e:	40d9      	lsrs	r1, r3
 8002770:	000b      	movs	r3, r1
 8002772:	4258      	negs	r0, r3
 8002774:	2a00      	cmp	r2, #0
 8002776:	d1f0      	bne.n	800275a <__aeabi_d2iz+0x22>
 8002778:	0018      	movs	r0, r3
 800277a:	e7ee      	b.n	800275a <__aeabi_d2iz+0x22>
 800277c:	4c08      	ldr	r4, [pc, #32]	; (80027a0 <__aeabi_d2iz+0x68>)
 800277e:	40c5      	lsrs	r5, r0
 8002780:	46a4      	mov	ip, r4
 8002782:	4463      	add	r3, ip
 8002784:	4099      	lsls	r1, r3
 8002786:	000b      	movs	r3, r1
 8002788:	432b      	orrs	r3, r5
 800278a:	e7f2      	b.n	8002772 <__aeabi_d2iz+0x3a>
 800278c:	000003fe 	.word	0x000003fe
 8002790:	0000041d 	.word	0x0000041d
 8002794:	7fffffff 	.word	0x7fffffff
 8002798:	00000433 	.word	0x00000433
 800279c:	00000413 	.word	0x00000413
 80027a0:	fffffbed 	.word	0xfffffbed

080027a4 <__aeabi_i2d>:
 80027a4:	b570      	push	{r4, r5, r6, lr}
 80027a6:	2800      	cmp	r0, #0
 80027a8:	d016      	beq.n	80027d8 <__aeabi_i2d+0x34>
 80027aa:	17c3      	asrs	r3, r0, #31
 80027ac:	18c5      	adds	r5, r0, r3
 80027ae:	405d      	eors	r5, r3
 80027b0:	0fc4      	lsrs	r4, r0, #31
 80027b2:	0028      	movs	r0, r5
 80027b4:	f000 f84c 	bl	8002850 <__clzsi2>
 80027b8:	4a11      	ldr	r2, [pc, #68]	; (8002800 <__aeabi_i2d+0x5c>)
 80027ba:	1a12      	subs	r2, r2, r0
 80027bc:	280a      	cmp	r0, #10
 80027be:	dc16      	bgt.n	80027ee <__aeabi_i2d+0x4a>
 80027c0:	0003      	movs	r3, r0
 80027c2:	002e      	movs	r6, r5
 80027c4:	3315      	adds	r3, #21
 80027c6:	409e      	lsls	r6, r3
 80027c8:	230b      	movs	r3, #11
 80027ca:	1a18      	subs	r0, r3, r0
 80027cc:	40c5      	lsrs	r5, r0
 80027ce:	0553      	lsls	r3, r2, #21
 80027d0:	032d      	lsls	r5, r5, #12
 80027d2:	0b2d      	lsrs	r5, r5, #12
 80027d4:	0d5b      	lsrs	r3, r3, #21
 80027d6:	e003      	b.n	80027e0 <__aeabi_i2d+0x3c>
 80027d8:	2400      	movs	r4, #0
 80027da:	2300      	movs	r3, #0
 80027dc:	2500      	movs	r5, #0
 80027de:	2600      	movs	r6, #0
 80027e0:	051b      	lsls	r3, r3, #20
 80027e2:	432b      	orrs	r3, r5
 80027e4:	07e4      	lsls	r4, r4, #31
 80027e6:	4323      	orrs	r3, r4
 80027e8:	0030      	movs	r0, r6
 80027ea:	0019      	movs	r1, r3
 80027ec:	bd70      	pop	{r4, r5, r6, pc}
 80027ee:	380b      	subs	r0, #11
 80027f0:	4085      	lsls	r5, r0
 80027f2:	0553      	lsls	r3, r2, #21
 80027f4:	032d      	lsls	r5, r5, #12
 80027f6:	2600      	movs	r6, #0
 80027f8:	0b2d      	lsrs	r5, r5, #12
 80027fa:	0d5b      	lsrs	r3, r3, #21
 80027fc:	e7f0      	b.n	80027e0 <__aeabi_i2d+0x3c>
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	0000041e 	.word	0x0000041e

08002804 <__aeabi_ui2d>:
 8002804:	b510      	push	{r4, lr}
 8002806:	1e04      	subs	r4, r0, #0
 8002808:	d010      	beq.n	800282c <__aeabi_ui2d+0x28>
 800280a:	f000 f821 	bl	8002850 <__clzsi2>
 800280e:	4b0f      	ldr	r3, [pc, #60]	; (800284c <__aeabi_ui2d+0x48>)
 8002810:	1a1b      	subs	r3, r3, r0
 8002812:	280a      	cmp	r0, #10
 8002814:	dc11      	bgt.n	800283a <__aeabi_ui2d+0x36>
 8002816:	220b      	movs	r2, #11
 8002818:	0021      	movs	r1, r4
 800281a:	1a12      	subs	r2, r2, r0
 800281c:	40d1      	lsrs	r1, r2
 800281e:	3015      	adds	r0, #21
 8002820:	030a      	lsls	r2, r1, #12
 8002822:	055b      	lsls	r3, r3, #21
 8002824:	4084      	lsls	r4, r0
 8002826:	0b12      	lsrs	r2, r2, #12
 8002828:	0d5b      	lsrs	r3, r3, #21
 800282a:	e001      	b.n	8002830 <__aeabi_ui2d+0x2c>
 800282c:	2300      	movs	r3, #0
 800282e:	2200      	movs	r2, #0
 8002830:	051b      	lsls	r3, r3, #20
 8002832:	4313      	orrs	r3, r2
 8002834:	0020      	movs	r0, r4
 8002836:	0019      	movs	r1, r3
 8002838:	bd10      	pop	{r4, pc}
 800283a:	0022      	movs	r2, r4
 800283c:	380b      	subs	r0, #11
 800283e:	4082      	lsls	r2, r0
 8002840:	055b      	lsls	r3, r3, #21
 8002842:	0312      	lsls	r2, r2, #12
 8002844:	2400      	movs	r4, #0
 8002846:	0b12      	lsrs	r2, r2, #12
 8002848:	0d5b      	lsrs	r3, r3, #21
 800284a:	e7f1      	b.n	8002830 <__aeabi_ui2d+0x2c>
 800284c:	0000041e 	.word	0x0000041e

08002850 <__clzsi2>:
 8002850:	211c      	movs	r1, #28
 8002852:	2301      	movs	r3, #1
 8002854:	041b      	lsls	r3, r3, #16
 8002856:	4298      	cmp	r0, r3
 8002858:	d301      	bcc.n	800285e <__clzsi2+0xe>
 800285a:	0c00      	lsrs	r0, r0, #16
 800285c:	3910      	subs	r1, #16
 800285e:	0a1b      	lsrs	r3, r3, #8
 8002860:	4298      	cmp	r0, r3
 8002862:	d301      	bcc.n	8002868 <__clzsi2+0x18>
 8002864:	0a00      	lsrs	r0, r0, #8
 8002866:	3908      	subs	r1, #8
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	4298      	cmp	r0, r3
 800286c:	d301      	bcc.n	8002872 <__clzsi2+0x22>
 800286e:	0900      	lsrs	r0, r0, #4
 8002870:	3904      	subs	r1, #4
 8002872:	a202      	add	r2, pc, #8	; (adr r2, 800287c <__clzsi2+0x2c>)
 8002874:	5c10      	ldrb	r0, [r2, r0]
 8002876:	1840      	adds	r0, r0, r1
 8002878:	4770      	bx	lr
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	02020304 	.word	0x02020304
 8002880:	01010101 	.word	0x01010101
	...
 800288c:	736e6553 	.word	0x736e6553
 8002890:	4220726f 	.word	0x4220726f
 8002894:	6c746f6f 	.word	0x6c746f6f
 8002898:	6564616f 	.word	0x6564616f
 800289c:	74532072 	.word	0x74532072
 80028a0:	0a747261 	.word	0x0a747261
 80028a4:	00000000 	.word	0x00000000
 80028a8:	00696e66 	.word	0x00696e66
 80028ac:	2b696e66 	.word	0x2b696e66
 80028b0:	00000000 	.word	0x00000000
 80028b4:	006e616e 	.word	0x006e616e
 80028b8:	2d696e66 	.word	0x2d696e66
 80028bc:	00000000 	.word	0x00000000
 80028c0:	08000d42 	.word	0x08000d42
 80028c4:	08000d58 	.word	0x08000d58
 80028c8:	08000d58 	.word	0x08000d58
 80028cc:	08000d58 	.word	0x08000d58
 80028d0:	08000d58 	.word	0x08000d58
 80028d4:	08000d58 	.word	0x08000d58
 80028d8:	08000d58 	.word	0x08000d58
 80028dc:	08000d58 	.word	0x08000d58
 80028e0:	08000d58 	.word	0x08000d58
 80028e4:	08000d58 	.word	0x08000d58
 80028e8:	08000d58 	.word	0x08000d58
 80028ec:	08000d58 	.word	0x08000d58
 80028f0:	08000d58 	.word	0x08000d58
 80028f4:	08000d58 	.word	0x08000d58
 80028f8:	08000d58 	.word	0x08000d58
 80028fc:	08000d58 	.word	0x08000d58
 8002900:	08000d58 	.word	0x08000d58
 8002904:	08000d58 	.word	0x08000d58
 8002908:	08000d58 	.word	0x08000d58
 800290c:	08000d58 	.word	0x08000d58
 8002910:	08000d58 	.word	0x08000d58
 8002914:	08000d58 	.word	0x08000d58
 8002918:	08000d58 	.word	0x08000d58
 800291c:	08000d58 	.word	0x08000d58
 8002920:	08000d58 	.word	0x08000d58
 8002924:	08000d58 	.word	0x08000d58
 8002928:	08000d58 	.word	0x08000d58
 800292c:	08000d58 	.word	0x08000d58
 8002930:	08000d58 	.word	0x08000d58
 8002934:	08000d58 	.word	0x08000d58
 8002938:	08000d58 	.word	0x08000d58
 800293c:	08000d58 	.word	0x08000d58
 8002940:	08000d58 	.word	0x08000d58
 8002944:	08000b74 	.word	0x08000b74
 8002948:	08000d58 	.word	0x08000d58
 800294c:	08000d58 	.word	0x08000d58
 8002950:	08000d58 	.word	0x08000d58
 8002954:	08000d58 	.word	0x08000d58
 8002958:	08000d58 	.word	0x08000d58
 800295c:	08000d58 	.word	0x08000d58
 8002960:	08000d58 	.word	0x08000d58
 8002964:	08000d58 	.word	0x08000d58
 8002968:	08000d58 	.word	0x08000d58
 800296c:	08000d58 	.word	0x08000d58
 8002970:	08000d58 	.word	0x08000d58
 8002974:	08000d58 	.word	0x08000d58
 8002978:	08000d58 	.word	0x08000d58
 800297c:	08000d58 	.word	0x08000d58
 8002980:	08000d58 	.word	0x08000d58
 8002984:	08000d58 	.word	0x08000d58
 8002988:	08000d58 	.word	0x08000d58
 800298c:	08000a18 	.word	0x08000a18
 8002990:	08000d58 	.word	0x08000d58
 8002994:	08000d58 	.word	0x08000d58
 8002998:	08000d58 	.word	0x08000d58
 800299c:	08000d58 	.word	0x08000d58
 80029a0:	08000d58 	.word	0x08000d58
 80029a4:	08000d58 	.word	0x08000d58
 80029a8:	08000d58 	.word	0x08000d58
 80029ac:	08000d58 	.word	0x08000d58
 80029b0:	08000d58 	.word	0x08000d58
 80029b4:	08000a18 	.word	0x08000a18
 80029b8:	08000bb4 	.word	0x08000bb4
 80029bc:	08000a18 	.word	0x08000a18
 80029c0:	08000d58 	.word	0x08000d58
 80029c4:	08000b74 	.word	0x08000b74
 80029c8:	08000d58 	.word	0x08000d58
 80029cc:	08000d58 	.word	0x08000d58
 80029d0:	08000a18 	.word	0x08000a18
 80029d4:	08000d58 	.word	0x08000d58
 80029d8:	08000d58 	.word	0x08000d58
 80029dc:	08000d58 	.word	0x08000d58
 80029e0:	08000d58 	.word	0x08000d58
 80029e4:	08000d58 	.word	0x08000d58
 80029e8:	08000a18 	.word	0x08000a18
 80029ec:	08000d0c 	.word	0x08000d0c
 80029f0:	08000d58 	.word	0x08000d58
 80029f4:	08000d58 	.word	0x08000d58
 80029f8:	08000c28 	.word	0x08000c28
 80029fc:	08000d58 	.word	0x08000d58
 8002a00:	08000a18 	.word	0x08000a18
 8002a04:	08000d58 	.word	0x08000d58
 8002a08:	08000d58 	.word	0x08000d58
 8002a0c:	08000a18 	.word	0x08000a18
 8002a10:	0800094a 	.word	0x0800094a
 8002a14:	080008c4 	.word	0x080008c4
 8002a18:	080008c4 	.word	0x080008c4
 8002a1c:	08000954 	.word	0x08000954
 8002a20:	080008c4 	.word	0x080008c4
 8002a24:	080008c4 	.word	0x080008c4
 8002a28:	080008c4 	.word	0x080008c4
 8002a2c:	080008c4 	.word	0x080008c4
 8002a30:	080008c4 	.word	0x080008c4
 8002a34:	080008c4 	.word	0x080008c4
 8002a38:	080008c4 	.word	0x080008c4
 8002a3c:	08000940 	.word	0x08000940
 8002a40:	080008c4 	.word	0x080008c4
 8002a44:	08000936 	.word	0x08000936
 8002a48:	080008c4 	.word	0x080008c4
 8002a4c:	080008c4 	.word	0x080008c4
 8002a50:	08000918 	.word	0x08000918
 8002a54:	00000000 	.word	0x00000000

08002a58 <pow10.4126>:
 8002a58:	00000000 3ff00000 00000000 40240000     .......?......$@
 8002a68:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8002a78:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8002a88:	00000000 412e8480 00000000 416312d0     .......A......cA
 8002a98:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8002aa8:	204d4652 20495053 74697257 00000065     RFM SPI Write...
 8002ab8:	656d6954 2074756f 25207325 0a583830     Timeout %s %08X.
 8002ac8:	00000000 20435452 0a525349 00000000     ....RTC ISR.....
 8002ad8:	08001cd0 08001bfe 08001bfe 08001bfa     ................
 8002ae8:	08001c04 08001c04 08001ef0 08001bfa     ................
 8002af8:	08001c04 08001ef0 08001c04 08001bfa     ................
 8002b08:	08001e8e 08001e8e 08001e8e 08001f5a     ............Z...
