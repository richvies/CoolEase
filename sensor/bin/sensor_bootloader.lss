
sensor/bin/sensor_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fa8  08000000  08000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .preinit_array 00000000  08000fa8  08000fa8  0000104c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .init_array   00000000  08000fa8  08000fa8  0000104c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000000  08000fa8  08000fa8  0000104c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000010  20000000  08000fa8  0000103c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000018c  20000010  08000fb8  0000104c  2**2
                  ALLOC
  6 ._user_heap_stack 00001004  2000019c  08000fb8  0000104c  2**0
                  ALLOC
  7 .ARM.attributes 0000002c  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY
  8 .debug_info   00008f61  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00001e9c  00000000  00000000  00009fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000a40  00000000  00000000  0000be75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000a00  00000000  00000000  0000c8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00002ed0  00000000  00000000  0000d2b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   000083b9  00000000  00000000  00010185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0001be48  00000000  00000000  0001853e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      0000004c  00000000  00000000  00034386  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000164c  00000000  00000000  000343d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    000027e1  00000000  00000000  00035a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 20 00 20 59 0c 00 08 55 0c 00 08 53 0c 00 08     . . Y...U...S...
	...
 800002c:	55 0c 00 08 00 00 00 00 00 00 00 00 55 0c 00 08     U...........U...
 800003c:	55 0c 00 08 53 0c 00 08 53 0c 00 08 11 08 00 08     U...S...S.......
 800004c:	53 0c 00 08 53 0c 00 08 53 0c 00 08 53 0c 00 08     S...S...S...S...
 800005c:	e9 05 00 08 53 0c 00 08 53 0c 00 08 53 0c 00 08     ....S...S...S...
 800006c:	53 0c 00 08 53 0c 00 08 53 0c 00 08 53 0c 00 08     S...S...S...S...
 800007c:	53 0c 00 08 53 0c 00 08 53 0c 00 08 53 0c 00 08     S...S...S...S...
 800008c:	53 0c 00 08 53 0c 00 08 53 0c 00 08 53 0c 00 08     S...S...S...S...
 800009c:	53 0c 00 08 53 0c 00 08 53 0c 00 08 53 0c 00 08     S...S...S...S...
 80000ac:	53 0c 00 08 53 0c 00 08 53 0c 00 08 53 0c 00 08     S...S...S...S...
 80000bc:	53 0c 00 08                                         S...

080000c0 <main>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

int main(void)
{
 80000c0:	b510      	push	{r4, lr}
    log_init();
 80000c2:	f000 f8ab 	bl	800021c <log_init>
    log_printf("Sensor Bootloader Start\n");
 80000c6:	4802      	ldr	r0, [pc, #8]	; (80000d0 <main+0x10>)
 80000c8:	f000 f8be 	bl	8000248 <log_printf>
    return 0;
}
 80000cc:	2000      	movs	r0, #0
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	08000e0c 	.word	0x08000e0c

080000d4 <clock_setup>:
// Static Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

//  Static Function Definitions
static void clock_setup(void) 
{
 80000d4:	b510      	push	{r4, lr}
	// Enable MSI Osc 2.097Mhz
	rcc_osc_on(RCC_MSI);
 80000d6:	2004      	movs	r0, #4
 80000d8:	f000 fc76 	bl	80009c8 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_MSI);
 80000dc:	2004      	movs	r0, #4
 80000de:	f000 fcc9 	bl	8000a74 <rcc_wait_for_osc_ready>

	// Set MSI to 2.097Mhz
	rcc_set_msi_range(5);
 80000e2:	2005      	movs	r0, #5
 80000e4:	f000 fcf0 	bl	8000ac8 <rcc_set_msi_range>

	// Set prescalers for AHB, APB1, APB2
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);				// AHB -> 2.097Mhz
 80000e8:	2000      	movs	r0, #0
 80000ea:	f000 fce3 	bl	8000ab4 <rcc_set_hpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);			// APB1 -> 2.097Mhz
 80000ee:	2000      	movs	r0, #0
 80000f0:	f000 fcc8 	bl	8000a84 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);			// APB2 -> 2.097Mhz
 80000f4:	2000      	movs	r0, #0
 80000f6:	f000 fcd1 	bl	8000a9c <rcc_set_ppre2>

	// Set flash, 2.097Mhz -> 0 waitstates
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 80000fa:	2000      	movs	r0, #0
 80000fc:	f000 fbb2 	bl	8000864 <flash_set_ws>

	// Set Peripheral Clock Frequencies used
	rcc_ahb_frequency = 2097000;
 8000100:	4b03      	ldr	r3, [pc, #12]	; (8000110 <clock_setup+0x3c>)
 8000102:	4a04      	ldr	r2, [pc, #16]	; (8000114 <clock_setup+0x40>)
 8000104:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 2097000;
 8000106:	4a04      	ldr	r2, [pc, #16]	; (8000118 <clock_setup+0x44>)
 8000108:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = 2097000;
 800010a:	4a04      	ldr	r2, [pc, #16]	; (800011c <clock_setup+0x48>)
 800010c:	6013      	str	r3, [r2, #0]
}
 800010e:	bd10      	pop	{r4, pc}
 8000110:	001fff68 	.word	0x001fff68
 8000114:	20000004 	.word	0x20000004
 8000118:	20000008 	.word	0x20000008
 800011c:	2000000c 	.word	0x2000000c

08000120 <usart_setup>:

static void usart_setup(void) 
{
 8000120:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_GPIOA);
 8000122:	20b0      	movs	r0, #176	; 0xb0
 8000124:	00c0      	lsls	r0, r0, #3
 8000126:	f000 fcdb 	bl	8000ae0 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOB);
 800012a:	4824      	ldr	r0, [pc, #144]	; (80001bc <usart_setup+0x9c>)
 800012c:	f000 fcd8 	bl	8000ae0 <rcc_periph_clock_enable>

	gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_TX);
 8000130:	24a0      	movs	r4, #160	; 0xa0
 8000132:	05e4      	lsls	r4, r4, #23
 8000134:	2304      	movs	r3, #4
 8000136:	2200      	movs	r2, #0
 8000138:	2102      	movs	r1, #2
 800013a:	0020      	movs	r0, r4
 800013c:	f000 fbb5 	bl	80008aa <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_RX);
 8000140:	2308      	movs	r3, #8
 8000142:	2200      	movs	r2, #0
 8000144:	2102      	movs	r1, #2
 8000146:	0020      	movs	r0, r4
 8000148:	f000 fbaf 	bl	80008aa <gpio_mode_setup>
    
    gpio_set_output_options(SPF_USART_TX_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, SPF_USART_TX);
 800014c:	2304      	movs	r3, #4
 800014e:	2200      	movs	r2, #0
 8000150:	2100      	movs	r1, #0
 8000152:	0020      	movs	r0, r4
 8000154:	f000 fbc9 	bl	80008ea <gpio_set_output_options>

    gpio_set_af(SPF_USART_TX_PORT, SPF_USART_AF, SPF_USART_TX);
 8000158:	2204      	movs	r2, #4
 800015a:	2104      	movs	r1, #4
 800015c:	0020      	movs	r0, r4
 800015e:	f000 fbe2 	bl	8000926 <gpio_set_af>
    gpio_set_af(SPF_USART_RX_PORT, SPF_USART_AF, SPF_USART_RX);
 8000162:	2208      	movs	r2, #8
 8000164:	2104      	movs	r1, #4
 8000166:	0020      	movs	r0, r4
 8000168:	f000 fbdd 	bl	8000926 <gpio_set_af>
    
	rcc_periph_clock_enable(SPF_USART_RCC);
 800016c:	4814      	ldr	r0, [pc, #80]	; (80001c0 <usart_setup+0xa0>)
 800016e:	f000 fcb7 	bl	8000ae0 <rcc_periph_clock_enable>
    rcc_periph_reset_pulse(SPF_USART_RCC_RST);
 8000172:	4814      	ldr	r0, [pc, #80]	; (80001c4 <usart_setup+0xa4>)
 8000174:	f000 fcc2 	bl	8000afc <rcc_periph_reset_pulse>
	usart_disable(SPF_USART);
 8000178:	4c13      	ldr	r4, [pc, #76]	; (80001c8 <usart_setup+0xa8>)
 800017a:	0020      	movs	r0, r4
 800017c:	f000 fd4b 	bl	8000c16 <usart_disable>
	usart_set_baudrate(SPF_USART, SPF_USART_BAUD);
 8000180:	21e1      	movs	r1, #225	; 0xe1
 8000182:	0249      	lsls	r1, r1, #9
 8000184:	0020      	movs	r0, r4
 8000186:	f000 fce9 	bl	8000b5c <usart_set_baudrate>
	usart_set_databits(SPF_USART, 8);
 800018a:	2108      	movs	r1, #8
 800018c:	0020      	movs	r0, r4
 800018e:	f000 fd11 	bl	8000bb4 <usart_set_databits>
	usart_set_stopbits(SPF_USART,USART_STOPBITS_1);
 8000192:	2100      	movs	r1, #0
 8000194:	0020      	movs	r0, r4
 8000196:	f000 fd1b 	bl	8000bd0 <usart_set_stopbits>
	usart_set_mode(SPF_USART, USART_MODE_TX_RX);
 800019a:	210c      	movs	r1, #12
 800019c:	0020      	movs	r0, r4
 800019e:	f000 fd27 	bl	8000bf0 <usart_set_mode>
	usart_set_parity(SPF_USART, USART_PARITY_NONE);
 80001a2:	2100      	movs	r1, #0
 80001a4:	0020      	movs	r0, r4
 80001a6:	f000 fd1b 	bl	8000be0 <usart_set_parity>
	usart_set_flow_control(SPF_USART, USART_FLOWCONTROL_NONE);
 80001aa:	2100      	movs	r1, #0
 80001ac:	0020      	movs	r0, r4
 80001ae:	f000 fd25 	bl	8000bfc <usart_set_flow_control>
	usart_enable(SPF_USART);
 80001b2:	0020      	movs	r0, r4
 80001b4:	f000 fd2a 	bl	8000c0c <usart_enable>
}
 80001b8:	bd10      	pop	{r4, pc}
 80001ba:	46c0      	nop			; (mov r8, r8)
 80001bc:	00000581 	.word	0x00000581
 80001c0:	00000711 	.word	0x00000711
 80001c4:	00000511 	.word	0x00000511
 80001c8:	40004400 	.word	0x40004400

080001cc <_putchar_mem>:
{
	usart_send_blocking(SPF_USART, character);		
}

static void _putchar_mem(char character)
{
 80001cc:	b510      	push	{r4, lr}
 80001ce:	0001      	movs	r1, r0
	mem_eeprom_write_byte(curr_address++, character);
 80001d0:	4c07      	ldr	r4, [pc, #28]	; (80001f0 <_putchar_mem+0x24>)
 80001d2:	6820      	ldr	r0, [r4, #0]
 80001d4:	1c43      	adds	r3, r0, #1
 80001d6:	6023      	str	r3, [r4, #0]
 80001d8:	f000 f854 	bl	8000284 <mem_eeprom_write_byte>
	
	if(curr_address == LOG_START + LOG_SIZE)
 80001dc:	6822      	ldr	r2, [r4, #0]
 80001de:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <_putchar_mem+0x28>)
 80001e0:	429a      	cmp	r2, r3
 80001e2:	d000      	beq.n	80001e6 <_putchar_mem+0x1a>
	{
		curr_address = LOG_START;
	}
}
 80001e4:	bd10      	pop	{r4, pc}
		curr_address = LOG_START;
 80001e6:	4b02      	ldr	r3, [pc, #8]	; (80001f0 <_putchar_mem+0x24>)
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <_putchar_mem+0x2c>)
 80001ea:	601a      	str	r2, [r3, #0]
}
 80001ec:	e7fa      	b.n	80001e4 <_putchar_mem+0x18>
 80001ee:	46c0      	nop			; (mov r8, r8)
 80001f0:	20000000 	.word	0x20000000
 80001f4:	08080800 	.word	0x08080800
 80001f8:	08080400 	.word	0x08080400

080001fc <_putchar_spf>:
{
 80001fc:	b510      	push	{r4, lr}
	usart_send_blocking(SPF_USART, character);		
 80001fe:	0001      	movs	r1, r0
 8000200:	4801      	ldr	r0, [pc, #4]	; (8000208 <_putchar_spf+0xc>)
 8000202:	f000 fd0d 	bl	8000c20 <usart_send_blocking>
}
 8000206:	bd10      	pop	{r4, pc}
 8000208:	40004400 	.word	0x40004400

0800020c <_putchar_main>:
{
 800020c:	b510      	push	{r4, lr}
 800020e:	0004      	movs	r4, r0
	_putchar_mem(character);
 8000210:	f7ff ffdc 	bl	80001cc <_putchar_mem>
	_putchar_spf(character);
 8000214:	0020      	movs	r0, r4
 8000216:	f7ff fff1 	bl	80001fc <_putchar_spf>
}
 800021a:	bd10      	pop	{r4, pc}

0800021c <log_init>:
{
 800021c:	b510      	push	{r4, lr}
	mem_init();
 800021e:	f000 f82b 	bl	8000278 <mem_init>
    curr_address = 0;
 8000222:	4b07      	ldr	r3, [pc, #28]	; (8000240 <log_init+0x24>)
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
    clock_setup();
 8000228:	f7ff ff54 	bl	80000d4 <clock_setup>
    usart_setup();
 800022c:	f7ff ff78 	bl	8000120 <usart_setup>
	for(int i = 0; i < 100000; i++){__asm__("nop");};
 8000230:	2300      	movs	r3, #0
 8000232:	4a04      	ldr	r2, [pc, #16]	; (8000244 <log_init+0x28>)
 8000234:	4293      	cmp	r3, r2
 8000236:	dc02      	bgt.n	800023e <log_init+0x22>
 8000238:	46c0      	nop			; (mov r8, r8)
 800023a:	3301      	adds	r3, #1
 800023c:	e7f9      	b.n	8000232 <log_init+0x16>
}
 800023e:	bd10      	pop	{r4, pc}
 8000240:	20000000 	.word	0x20000000
 8000244:	0001869f 	.word	0x0001869f

08000248 <log_printf>:
{
 8000248:	b40f      	push	{r0, r1, r2, r3}
 800024a:	b500      	push	{lr}
 800024c:	b083      	sub	sp, #12
 800024e:	aa04      	add	r2, sp, #16
 8000250:	ca02      	ldmia	r2!, {r1}
	va_start(va, format);
 8000252:	9201      	str	r2, [sp, #4]
	fnprintf(_putchar_main, format, va);
 8000254:	4806      	ldr	r0, [pc, #24]	; (8000270 <log_printf+0x28>)
 8000256:	f000 f8c5 	bl	80003e4 <fnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {}
 800025a:	2140      	movs	r1, #64	; 0x40
 800025c:	4805      	ldr	r0, [pc, #20]	; (8000274 <log_printf+0x2c>)
 800025e:	f000 fcf2 	bl	8000c46 <usart_get_flag>
 8000262:	2800      	cmp	r0, #0
 8000264:	d0f9      	beq.n	800025a <log_printf+0x12>
}
 8000266:	b003      	add	sp, #12
 8000268:	bc08      	pop	{r3}
 800026a:	b004      	add	sp, #16
 800026c:	4718      	bx	r3
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	0800020d 	.word	0x0800020d
 8000274:	40004400 	.word	0x40004400

08000278 <mem_init>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

void mem_init(void)
{
 8000278:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_MIF);
 800027a:	20c1      	movs	r0, #193	; 0xc1
 800027c:	00c0      	lsls	r0, r0, #3
 800027e:	f000 fc2f 	bl	8000ae0 <rcc_periph_clock_enable>
    // {
    //     // log_printf("%08x : %08x\n", next_reading_add, MMIO32(next_reading_add));
    //     msg_num++;
    //     next_reading_add += 4;
    // }
}
 8000282:	bd10      	pop	{r4, pc}

08000284 <mem_eeprom_write_byte>:

    return true;
}

bool mem_eeprom_write_byte(uint32_t address, uint8_t data)
{
 8000284:	b570      	push	{r4, r5, r6, lr}
 8000286:	0004      	movs	r4, r0
 8000288:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 800028a:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <mem_eeprom_write_byte+0x44>)
 800028c:	18c2      	adds	r2, r0, r3
 800028e:	2380      	movs	r3, #128	; 0x80
 8000290:	011b      	lsls	r3, r3, #4
 8000292:	429a      	cmp	r2, r3
 8000294:	d301      	bcc.n	800029a <mem_eeprom_write_byte+0x16>
        return false;
 8000296:	2000      	movs	r0, #0
        FLASH_SR = FLASH_SR_EOP;

    flash_lock_pecr();

    return true;
}
 8000298:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock_pecr();
 800029a:	f000 faed 	bl	8000878 <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 800029e:	4a0b      	ldr	r2, [pc, #44]	; (80002cc <mem_eeprom_write_byte+0x48>)
 80002a0:	6813      	ldr	r3, [r2, #0]
 80002a2:	490b      	ldr	r1, [pc, #44]	; (80002d0 <mem_eeprom_write_byte+0x4c>)
 80002a4:	400b      	ands	r3, r1
 80002a6:	6013      	str	r3, [r2, #0]
    MMIO8(address) = data;
 80002a8:	7025      	strb	r5, [r4, #0]
    while (FLASH_SR & FLASH_SR_BSY);
 80002aa:	4b0a      	ldr	r3, [pc, #40]	; (80002d4 <mem_eeprom_write_byte+0x50>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	07db      	lsls	r3, r3, #31
 80002b0:	d4fb      	bmi.n	80002aa <mem_eeprom_write_byte+0x26>
    if (FLASH_SR & FLASH_SR_EOP)
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <mem_eeprom_write_byte+0x50>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	079b      	lsls	r3, r3, #30
 80002b8:	d502      	bpl.n	80002c0 <mem_eeprom_write_byte+0x3c>
        FLASH_SR = FLASH_SR_EOP;
 80002ba:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <mem_eeprom_write_byte+0x50>)
 80002bc:	2202      	movs	r2, #2
 80002be:	601a      	str	r2, [r3, #0]
    flash_lock_pecr();
 80002c0:	f000 fae6 	bl	8000890 <flash_lock_pecr>
    return true;
 80002c4:	2001      	movs	r0, #1
 80002c6:	e7e7      	b.n	8000298 <mem_eeprom_write_byte+0x14>
 80002c8:	f7f80000 	.word	0xf7f80000
 80002cc:	40022004 	.word	0x40022004
 80002d0:	fffffeff 	.word	0xfffffeff
 80002d4:	40022018 	.word	0x40022018

080002d8 <_atoi>:
    return (ch >= '0') && (ch <= '9');
}

// internal ASCII string to uint32_t conversion
static uint32_t _atoi(const char **str)
{
 80002d8:	0001      	movs	r1, r0
    uint32_t i = 0U;
 80002da:	2000      	movs	r0, #0
    while (_is_digit(**str))
 80002dc:	680a      	ldr	r2, [r1, #0]
 80002de:	7813      	ldrb	r3, [r2, #0]
    return (ch >= '0') && (ch <= '9');
 80002e0:	3b30      	subs	r3, #48	; 0x30
 80002e2:	b2db      	uxtb	r3, r3
    while (_is_digit(**str))
 80002e4:	2b09      	cmp	r3, #9
 80002e6:	d808      	bhi.n	80002fa <_atoi+0x22>
    {
        i = i * 10U + (uint32_t)(*((*str)++) - '0');
 80002e8:	0083      	lsls	r3, r0, #2
 80002ea:	181b      	adds	r3, r3, r0
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	1c50      	adds	r0, r2, #1
 80002f0:	6008      	str	r0, [r1, #0]
 80002f2:	7810      	ldrb	r0, [r2, #0]
 80002f4:	18c0      	adds	r0, r0, r3
 80002f6:	3830      	subs	r0, #48	; 0x30
 80002f8:	e7f0      	b.n	80002dc <_atoi+0x4>
    }
    return i;
}
 80002fa:	4770      	bx	lr

080002fc <_ntoa_format>:

// internal itoa format
static uint32_t _ntoa_format(out_fct_type out, int32_t value, uint32_t base, uint32_t width, bool sign)
{
 80002fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fe:	46de      	mov	lr, fp
 8000300:	4657      	mov	r7, sl
 8000302:	464e      	mov	r6, r9
 8000304:	4645      	mov	r5, r8
 8000306:	b5e0      	push	{r5, r6, r7, lr}
 8000308:	b089      	sub	sp, #36	; 0x24
 800030a:	4680      	mov	r8, r0
 800030c:	0008      	movs	r0, r1
 800030e:	0015      	movs	r5, r2
 8000310:	469b      	mov	fp, r3
 8000312:	ab12      	add	r3, sp, #72	; 0x48
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	4699      	mov	r9, r3
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    uint32_t len = 0;
    bool negative = false;

    // write if precision != 0 and value is != 0
    if (value)
 8000318:	2900      	cmp	r1, #0
 800031a:	d059      	beq.n	80003d0 <_ntoa_format+0xd4>
    {
        if(value < 0)
 800031c:	db03      	blt.n	8000326 <_ntoa_format+0x2a>
    bool negative = false;
 800031e:	2300      	movs	r3, #0
 8000320:	469a      	mov	sl, r3
 8000322:	2400      	movs	r4, #0
 8000324:	e011      	b.n	800034a <_ntoa_format+0x4e>
        {
            negative = true;
            value = 0 - value; 
 8000326:	4248      	negs	r0, r1
            negative = true;
 8000328:	2301      	movs	r3, #1
 800032a:	469a      	mov	sl, r3
 800032c:	e7f9      	b.n	8000322 <_ntoa_format+0x26>
        } 
        // Digits to char
        do
        {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 800032e:	3130      	adds	r1, #48	; 0x30
 8000330:	b2c9      	uxtb	r1, r1
 8000332:	1c67      	adds	r7, r4, #1
 8000334:	466b      	mov	r3, sp
 8000336:	5519      	strb	r1, [r3, r4]
            value /= base;
 8000338:	0029      	movs	r1, r5
 800033a:	0030      	movs	r0, r6
 800033c:	f000 fcda 	bl	8000cf4 <__udivsi3>
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8000340:	2800      	cmp	r0, #0
 8000342:	d010      	beq.n	8000366 <_ntoa_format+0x6a>
 8000344:	2f1f      	cmp	r7, #31
 8000346:	d80e      	bhi.n	8000366 <_ntoa_format+0x6a>
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 8000348:	003c      	movs	r4, r7
            const char digit = (char)(value % base);
 800034a:	0006      	movs	r6, r0
 800034c:	0029      	movs	r1, r5
 800034e:	f000 fd57 	bl	8000e00 <__aeabi_uidivmod>
 8000352:	b2c9      	uxtb	r1, r1
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 8000354:	2909      	cmp	r1, #9
 8000356:	d9ea      	bls.n	800032e <_ntoa_format+0x32>
 8000358:	3137      	adds	r1, #55	; 0x37
 800035a:	b2c9      	uxtb	r1, r1
 800035c:	e7e9      	b.n	8000332 <_ntoa_format+0x36>

        // pad leading zeros
        while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
        {
            buf[len++] = '0';
 800035e:	2330      	movs	r3, #48	; 0x30
 8000360:	466a      	mov	r2, sp
 8000362:	55d3      	strb	r3, [r2, r7]
 8000364:	3701      	adds	r7, #1
        while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8000366:	455f      	cmp	r7, fp
 8000368:	d201      	bcs.n	800036e <_ntoa_format+0x72>
 800036a:	2f1f      	cmp	r7, #31
 800036c:	d9f7      	bls.n	800035e <_ntoa_format+0x62>
        }

        // Base specifier
        if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 800036e:	2d10      	cmp	r5, #16
 8000370:	d019      	beq.n	80003a6 <_ntoa_format+0xaa>
        {
            buf[len++] = 'X';
        }
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8000372:	2d02      	cmp	r5, #2
 8000374:	d01e      	beq.n	80003b4 <_ntoa_format+0xb8>
        {
            buf[len++] = 'b';
        }
        if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8000376:	2d10      	cmp	r5, #16
 8000378:	d023      	beq.n	80003c2 <_ntoa_format+0xc6>
 800037a:	2d02      	cmp	r5, #2
 800037c:	d021      	beq.n	80003c2 <_ntoa_format+0xc6>
        {
            buf[len++] = '0';
        }

        // Negative sign
        if ( sign && negative && (len < PRINTF_NTOA_BUFFER_SIZE) )
 800037e:	464b      	mov	r3, r9
 8000380:	2b00      	cmp	r3, #0
 8000382:	d008      	beq.n	8000396 <_ntoa_format+0x9a>
 8000384:	4653      	mov	r3, sl
 8000386:	2b00      	cmp	r3, #0
 8000388:	d005      	beq.n	8000396 <_ntoa_format+0x9a>
 800038a:	2f1f      	cmp	r7, #31
 800038c:	d803      	bhi.n	8000396 <_ntoa_format+0x9a>
        {
            buf[len++] = '-';
 800038e:	232d      	movs	r3, #45	; 0x2d
 8000390:	466a      	mov	r2, sp
 8000392:	55d3      	strb	r3, [r2, r7]
 8000394:	3701      	adds	r7, #1
        }

        // reverse string and write out
        uint32_t i = len;
 8000396:	003c      	movs	r4, r7
        while (i)
 8000398:	2c00      	cmp	r4, #0
 800039a:	d01a      	beq.n	80003d2 <_ntoa_format+0xd6>
        {
            out(buf[--i]);
 800039c:	3c01      	subs	r4, #1
 800039e:	466b      	mov	r3, sp
 80003a0:	5d18      	ldrb	r0, [r3, r4]
 80003a2:	47c0      	blx	r8
 80003a4:	e7f8      	b.n	8000398 <_ntoa_format+0x9c>
        if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80003a6:	2f1f      	cmp	r7, #31
 80003a8:	d8e3      	bhi.n	8000372 <_ntoa_format+0x76>
            buf[len++] = 'X';
 80003aa:	2358      	movs	r3, #88	; 0x58
 80003ac:	466a      	mov	r2, sp
 80003ae:	55d3      	strb	r3, [r2, r7]
 80003b0:	3701      	adds	r7, #1
 80003b2:	e7e0      	b.n	8000376 <_ntoa_format+0x7a>
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80003b4:	2f1f      	cmp	r7, #31
 80003b6:	d8de      	bhi.n	8000376 <_ntoa_format+0x7a>
            buf[len++] = 'b';
 80003b8:	2362      	movs	r3, #98	; 0x62
 80003ba:	466a      	mov	r2, sp
 80003bc:	55d3      	strb	r3, [r2, r7]
 80003be:	3701      	adds	r7, #1
 80003c0:	e7d9      	b.n	8000376 <_ntoa_format+0x7a>
        if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80003c2:	2f1f      	cmp	r7, #31
 80003c4:	d8db      	bhi.n	800037e <_ntoa_format+0x82>
            buf[len++] = '0';
 80003c6:	2330      	movs	r3, #48	; 0x30
 80003c8:	466a      	mov	r2, sp
 80003ca:	55d3      	strb	r3, [r2, r7]
 80003cc:	3701      	adds	r7, #1
 80003ce:	e7d6      	b.n	800037e <_ntoa_format+0x82>
    uint32_t len = 0;
 80003d0:	2700      	movs	r7, #0
        }
    }
    return len;
}
 80003d2:	0038      	movs	r0, r7
 80003d4:	b009      	add	sp, #36	; 0x24
 80003d6:	bcf0      	pop	{r4, r5, r6, r7}
 80003d8:	46bb      	mov	fp, r7
 80003da:	46b2      	mov	sl, r6
 80003dc:	46a9      	mov	r9, r5
 80003de:	46a0      	mov	r8, r4
 80003e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080003e4 <fnprintf>:

uint32_t fnprintf(out_fct_type out, const char *format, va_list va)
{
 80003e4:	b570      	push	{r4, r5, r6, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	0005      	movs	r5, r0
 80003ea:	9103      	str	r1, [sp, #12]
 80003ec:	9202      	str	r2, [sp, #8]
    uint32_t width;
    uint32_t idx = 0U;
 80003ee:	2400      	movs	r4, #0

    while (*format)
 80003f0:	e004      	b.n	80003fc <fnprintf+0x18>
            format++;
        }
        else
        {
            // Just print char
            out(*format);
 80003f2:	47a8      	blx	r5
            idx++;
 80003f4:	3401      	adds	r4, #1
            format++;
 80003f6:	9b03      	ldr	r3, [sp, #12]
 80003f8:	3301      	adds	r3, #1
 80003fa:	9303      	str	r3, [sp, #12]
    while (*format)
 80003fc:	9b03      	ldr	r3, [sp, #12]
 80003fe:	7818      	ldrb	r0, [r3, #0]
 8000400:	2800      	cmp	r0, #0
 8000402:	d100      	bne.n	8000406 <fnprintf+0x22>
 8000404:	e089      	b.n	800051a <fnprintf+0x136>
        if (*format == '%')
 8000406:	2825      	cmp	r0, #37	; 0x25
 8000408:	d1f3      	bne.n	80003f2 <fnprintf+0xe>
            format++;
 800040a:	1c5a      	adds	r2, r3, #1
 800040c:	9203      	str	r2, [sp, #12]
            continue;
        }

        // evaluate width field
        width = 0U;
        if (_is_digit(*format))
 800040e:	785b      	ldrb	r3, [r3, #1]
    return (ch >= '0') && (ch <= '9');
 8000410:	3b30      	subs	r3, #48	; 0x30
 8000412:	b2db      	uxtb	r3, r3
        if (_is_digit(*format))
 8000414:	2b09      	cmp	r3, #9
 8000416:	d90b      	bls.n	8000430 <fnprintf+0x4c>
        width = 0U;
 8000418:	2300      	movs	r3, #0
        {
            width = _atoi(&format);
        }

        // evaluate specifier
        switch (*format)
 800041a:	9a03      	ldr	r2, [sp, #12]
 800041c:	7810      	ldrb	r0, [r2, #0]
 800041e:	0002      	movs	r2, r0
 8000420:	3a25      	subs	r2, #37	; 0x25
 8000422:	b2d1      	uxtb	r1, r2
 8000424:	2953      	cmp	r1, #83	; 0x53
 8000426:	d872      	bhi.n	800050e <fnprintf+0x12a>
 8000428:	008a      	lsls	r2, r1, #2
 800042a:	493d      	ldr	r1, [pc, #244]	; (8000520 <fnprintf+0x13c>)
 800042c:	588a      	ldr	r2, [r1, r2]
 800042e:	4697      	mov	pc, r2
            width = _atoi(&format);
 8000430:	a803      	add	r0, sp, #12
 8000432:	f7ff ff51 	bl	80002d8 <_atoi>
 8000436:	0003      	movs	r3, r0
 8000438:	e7ef      	b.n	800041a <fnprintf+0x36>
        case 'o':
        case 'b':
        {
            // set the base
            uint32_t base;
            if (*format == 'x' || *format == 'X')
 800043a:	2878      	cmp	r0, #120	; 0x78
 800043c:	d009      	beq.n	8000452 <fnprintf+0x6e>
 800043e:	2858      	cmp	r0, #88	; 0x58
 8000440:	d01a      	beq.n	8000478 <fnprintf+0x94>
            {
                base = 16U;
            }
            else if (*format == 'o')
 8000442:	286f      	cmp	r0, #111	; 0x6f
 8000444:	d01a      	beq.n	800047c <fnprintf+0x98>
            {
                base = 8U;
            }
            else if (*format == 'b')
 8000446:	2862      	cmp	r0, #98	; 0x62
 8000448:	d001      	beq.n	800044e <fnprintf+0x6a>
            {
                base = 2U;
            }
            else
            {
                base = 10U;
 800044a:	220a      	movs	r2, #10
 800044c:	e002      	b.n	8000454 <fnprintf+0x70>
                base = 2U;
 800044e:	2202      	movs	r2, #2
 8000450:	e000      	b.n	8000454 <fnprintf+0x70>
                base = 16U;
 8000452:	2210      	movs	r2, #16
            }

            // convert integer
            if ((*format == 'i') || (*format == 'd'))
 8000454:	2869      	cmp	r0, #105	; 0x69
 8000456:	d001      	beq.n	800045c <fnprintf+0x78>
 8000458:	2864      	cmp	r0, #100	; 0x64
 800045a:	d111      	bne.n	8000480 <fnprintf+0x9c>
            {
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, true);
 800045c:	9902      	ldr	r1, [sp, #8]
 800045e:	1d08      	adds	r0, r1, #4
 8000460:	9002      	str	r0, [sp, #8]
 8000462:	6809      	ldr	r1, [r1, #0]
 8000464:	2001      	movs	r0, #1
 8000466:	9000      	str	r0, [sp, #0]
 8000468:	0028      	movs	r0, r5
 800046a:	f7ff ff47 	bl	80002fc <_ntoa_format>
 800046e:	1824      	adds	r4, r4, r0
            }
            else
            {
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, false);
            }
            format++;
 8000470:	9b03      	ldr	r3, [sp, #12]
 8000472:	3301      	adds	r3, #1
 8000474:	9303      	str	r3, [sp, #12]
            break;
 8000476:	e7c1      	b.n	80003fc <fnprintf+0x18>
                base = 16U;
 8000478:	2210      	movs	r2, #16
 800047a:	e7eb      	b.n	8000454 <fnprintf+0x70>
                base = 8U;
 800047c:	2208      	movs	r2, #8
 800047e:	e7e9      	b.n	8000454 <fnprintf+0x70>
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, false);
 8000480:	9902      	ldr	r1, [sp, #8]
 8000482:	1d08      	adds	r0, r1, #4
 8000484:	9002      	str	r0, [sp, #8]
 8000486:	6809      	ldr	r1, [r1, #0]
 8000488:	2000      	movs	r0, #0
 800048a:	9000      	str	r0, [sp, #0]
 800048c:	0028      	movs	r0, r5
 800048e:	f7ff ff35 	bl	80002fc <_ntoa_format>
 8000492:	1824      	adds	r4, r4, r0
 8000494:	e7ec      	b.n	8000470 <fnprintf+0x8c>
        }

        case 'c':
        {
            out((char)va_arg(va, int));
 8000496:	9b02      	ldr	r3, [sp, #8]
 8000498:	1d1a      	adds	r2, r3, #4
 800049a:	9202      	str	r2, [sp, #8]
 800049c:	7818      	ldrb	r0, [r3, #0]
 800049e:	47a8      	blx	r5
            idx++;
 80004a0:	3401      	adds	r4, #1
            format++;
 80004a2:	9b03      	ldr	r3, [sp, #12]
 80004a4:	3301      	adds	r3, #1
 80004a6:	9303      	str	r3, [sp, #12]
            break;
 80004a8:	e7a8      	b.n	80003fc <fnprintf+0x18>
        }

        case 's':
        {
            const char *p = va_arg(va, char *);
 80004aa:	9b02      	ldr	r3, [sp, #8]
 80004ac:	1d1a      	adds	r2, r3, #4
 80004ae:	9202      	str	r2, [sp, #8]
 80004b0:	681e      	ldr	r6, [r3, #0]
    for (s = str; *s && maxsize--; ++s)
 80004b2:	0033      	movs	r3, r6
 80004b4:	2280      	movs	r2, #128	; 0x80
 80004b6:	00d2      	lsls	r2, r2, #3
 80004b8:	e001      	b.n	80004be <fnprintf+0xda>
 80004ba:	3301      	adds	r3, #1
 80004bc:	000a      	movs	r2, r1
 80004be:	7819      	ldrb	r1, [r3, #0]
 80004c0:	2900      	cmp	r1, #0
 80004c2:	d002      	beq.n	80004ca <fnprintf+0xe6>
 80004c4:	1e51      	subs	r1, r2, #1
 80004c6:	2a00      	cmp	r2, #0
 80004c8:	d1f7      	bne.n	80004ba <fnprintf+0xd6>
            uint32_t l = _strnlen_s(p, PRINTF_MAX_STR_LEN);

            // string output
            while (*p != 0)
 80004ca:	7830      	ldrb	r0, [r6, #0]
 80004cc:	2800      	cmp	r0, #0
 80004ce:	d003      	beq.n	80004d8 <fnprintf+0xf4>
            {
                out(*(p++));
 80004d0:	3601      	adds	r6, #1
 80004d2:	47a8      	blx	r5
                idx++;
 80004d4:	3401      	adds	r4, #1
 80004d6:	e7f8      	b.n	80004ca <fnprintf+0xe6>
            }
            format++;
 80004d8:	9b03      	ldr	r3, [sp, #12]
 80004da:	3301      	adds	r3, #1
 80004dc:	9303      	str	r3, [sp, #12]
            break;
 80004de:	e78d      	b.n	80003fc <fnprintf+0x18>
        }

        case 'p':
        {
            width = sizeof(void *) * 2U;
            idx += _ntoa_format(out, (int32_t)((uintptr_t)va_arg(va, void *)), 16U, width, false);
 80004e0:	9b02      	ldr	r3, [sp, #8]
 80004e2:	1d1a      	adds	r2, r3, #4
 80004e4:	9202      	str	r2, [sp, #8]
 80004e6:	6819      	ldr	r1, [r3, #0]
 80004e8:	2300      	movs	r3, #0
 80004ea:	9300      	str	r3, [sp, #0]
 80004ec:	3308      	adds	r3, #8
 80004ee:	2210      	movs	r2, #16
 80004f0:	0028      	movs	r0, r5
 80004f2:	f7ff ff03 	bl	80002fc <_ntoa_format>
 80004f6:	1824      	adds	r4, r4, r0
            format++;
 80004f8:	9b03      	ldr	r3, [sp, #12]
 80004fa:	3301      	adds	r3, #1
 80004fc:	9303      	str	r3, [sp, #12]
            break;
 80004fe:	e77d      	b.n	80003fc <fnprintf+0x18>
        }

        case '%':
        {
            out('%');
 8000500:	2025      	movs	r0, #37	; 0x25
 8000502:	47a8      	blx	r5
            idx++;
 8000504:	3401      	adds	r4, #1
            format++;
 8000506:	9b03      	ldr	r3, [sp, #12]
 8000508:	3301      	adds	r3, #1
 800050a:	9303      	str	r3, [sp, #12]
            break;
 800050c:	e776      	b.n	80003fc <fnprintf+0x18>
        }

        default:
        {
            out(*format);
 800050e:	47a8      	blx	r5
            idx++;
 8000510:	3401      	adds	r4, #1
            format++;
 8000512:	9b03      	ldr	r3, [sp, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	9303      	str	r3, [sp, #12]
            break;
 8000518:	e770      	b.n	80003fc <fnprintf+0x18>
        }
        }
    }
    // return written chars without terminating \0
    return idx;
}
 800051a:	0020      	movs	r0, r4
 800051c:	b004      	add	sp, #16
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	08000e28 	.word	0x08000e28

08000524 <spi_read_single>:
 * 
 * @param reg Register to read
 * @retval Value read from register
 */
static uint8_t spi_read_single(uint8_t reg)
{
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	0004      	movs	r4, r0
  spi_chip_select();
 8000528:	25a0      	movs	r5, #160	; 0xa0
 800052a:	05ed      	lsls	r5, r5, #23
 800052c:	2110      	movs	r1, #16
 800052e:	0028      	movs	r0, r5
 8000530:	f000 f9b8 	bl	80008a4 <gpio_clear>
  timers_delay_microseconds(1);
 8000534:	2001      	movs	r0, #1
 8000536:	f000 f89d 	bl	8000674 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, reg);                   
 800053a:	b2a1      	uxth	r1, r4
 800053c:	4c08      	ldr	r4, [pc, #32]	; (8000560 <spi_read_single+0x3c>)
 800053e:	0020      	movs	r0, r4
 8000540:	f000 fb04 	bl	8000b4c <spi_xfer>
  uint8_t in =  spi_xfer(RFM_SPI, 0x00);                   
 8000544:	2100      	movs	r1, #0
 8000546:	0020      	movs	r0, r4
 8000548:	f000 fb00 	bl	8000b4c <spi_xfer>
 800054c:	b2c4      	uxtb	r4, r0
    
  spi_chip_deselect(); 
 800054e:	2110      	movs	r1, #16
 8000550:	0028      	movs	r0, r5
 8000552:	f000 f9a5 	bl	80008a0 <gpio_set>
  timers_delay_microseconds(1);
 8000556:	2001      	movs	r0, #1
 8000558:	f000 f88c 	bl	8000674 <timers_delay_microseconds>

  return in;
}
 800055c:	0020      	movs	r0, r4
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	40013000 	.word	0x40013000

08000564 <spi_write_single>:
  spi_chip_deselect();     
  timers_delay_microseconds(1);
}

static void spi_write_single(uint8_t reg, uint8_t data)
{
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	0005      	movs	r5, r0
 8000568:	000e      	movs	r6, r1
  // Set MSB for write operation
  uint8_t cmd = 0x80 | reg;
 800056a:	2480      	movs	r4, #128	; 0x80
 800056c:	4264      	negs	r4, r4
 800056e:	4304      	orrs	r4, r0
 8000570:	b2e4      	uxtb	r4, r4

  spi_chip_select();
 8000572:	27a0      	movs	r7, #160	; 0xa0
 8000574:	05ff      	lsls	r7, r7, #23
 8000576:	2110      	movs	r1, #16
 8000578:	0038      	movs	r0, r7
 800057a:	f000 f993 	bl	80008a4 <gpio_clear>
  timers_delay_microseconds(1);
 800057e:	2001      	movs	r0, #1
 8000580:	f000 f878 	bl	8000674 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, cmd);                 
 8000584:	b2a1      	uxth	r1, r4
 8000586:	4c15      	ldr	r4, [pc, #84]	; (80005dc <spi_write_single+0x78>)
 8000588:	0020      	movs	r0, r4
 800058a:	f000 fadf 	bl	8000b4c <spi_xfer>
  spi_xfer(RFM_SPI, data);             
 800058e:	b2b1      	uxth	r1, r6
 8000590:	0020      	movs	r0, r4
 8000592:	f000 fadb 	bl	8000b4c <spi_xfer>

  spi_chip_deselect(); 
 8000596:	2110      	movs	r1, #16
 8000598:	0038      	movs	r0, r7
 800059a:	f000 f981 	bl	80008a0 <gpio_set>
  timers_delay_microseconds(1);
 800059e:	2001      	movs	r0, #1
 80005a0:	f000 f868 	bl	8000674 <timers_delay_microseconds>

  uint8_t curr_data = spi_read_single(reg);
 80005a4:	0028      	movs	r0, r5
 80005a6:	f7ff ffbd 	bl	8000524 <spi_read_single>
 80005aa:	0004      	movs	r4, r0

  // log_printf("%02x : %02x\n", reg, data);

  if(reg == RFM_REG_12_IRQ_FLAGS)    
 80005ac:	2d12      	cmp	r5, #18
 80005ae:	d013      	beq.n	80005d8 <spi_write_single+0x74>
    return;

  TIMEOUT(10000, "RFM SPI Write", ((reg << 16) | data), (curr_data == data), ;, timers_delay_microseconds(100); curr_data = spi_read_single(reg););
 80005b0:	f000 f87e 	bl	80006b0 <timeout_init>
 80005b4:	042a      	lsls	r2, r5, #16
 80005b6:	4332      	orrs	r2, r6
 80005b8:	4909      	ldr	r1, [pc, #36]	; (80005e0 <spi_write_single+0x7c>)
 80005ba:	480a      	ldr	r0, [pc, #40]	; (80005e4 <spi_write_single+0x80>)
 80005bc:	f000 f886 	bl	80006cc <timeout>
 80005c0:	2800      	cmp	r0, #0
 80005c2:	d109      	bne.n	80005d8 <spi_write_single+0x74>
 80005c4:	42b4      	cmp	r4, r6
 80005c6:	d007      	beq.n	80005d8 <spi_write_single+0x74>
 80005c8:	2064      	movs	r0, #100	; 0x64
 80005ca:	f000 f853 	bl	8000674 <timers_delay_microseconds>
 80005ce:	0028      	movs	r0, r5
 80005d0:	f7ff ffa8 	bl	8000524 <spi_read_single>
 80005d4:	0004      	movs	r4, r0
 80005d6:	e7ed      	b.n	80005b4 <spi_write_single+0x50>

  // log_printf("%02x : %02x : %02x\n", reg, data, curr_data);
}
 80005d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	40013000 	.word	0x40013000
 80005e0:	08000f78 	.word	0x08000f78
 80005e4:	00002710 	.word	0x00002710

080005e8 <exti4_15_isr>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void exti4_15_isr(void)
{
 80005e8:	b570      	push	{r4, r5, r6, lr}
  uint16_t timer = timers_micros();
 80005ea:	f000 f859 	bl	80006a0 <timers_micros>
  
  exti_reset_request(RFM_IO_0_EXTI);
 80005ee:	2480      	movs	r4, #128	; 0x80
 80005f0:	0224      	lsls	r4, r4, #8
 80005f2:	0020      	movs	r0, r4
 80005f4:	f000 f930 	bl	8000858 <exti_reset_request>
  exti_reset_request(RFM_IO_0_EXTI);
 80005f8:	0020      	movs	r0, r4
 80005fa:	f000 f92d 	bl	8000858 <exti_reset_request>

  // Store IRQ Flags
  packets_buf[packets_head].flags = get_irq();
 80005fe:	4d1b      	ldr	r5, [pc, #108]	; (800066c <exti4_15_isr+0x84>)
 8000600:	782e      	ldrb	r6, [r5, #0]
  return spi_read_single(RFM_REG_12_IRQ_FLAGS);
 8000602:	2012      	movs	r0, #18
 8000604:	f7ff ff8e 	bl	8000524 <spi_read_single>
  packets_buf[packets_head].flags = get_irq();
 8000608:	4c19      	ldr	r4, [pc, #100]	; (8000670 <exti4_15_isr+0x88>)
 800060a:	0073      	lsls	r3, r6, #1
 800060c:	199b      	adds	r3, r3, r6
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	18e3      	adds	r3, r4, r3
 8000612:	7418      	strb	r0, [r3, #16]
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 8000614:	21ff      	movs	r1, #255	; 0xff
 8000616:	2012      	movs	r0, #18
 8000618:	f7ff ffa4 	bl	8000564 <spi_write_single>
 800061c:	21ff      	movs	r1, #255	; 0xff
 800061e:	2012      	movs	r0, #18
 8000620:	f7ff ffa0 	bl	8000564 <spi_write_single>
  clear_irq(RFM_IRQ_ALL);
  clear_irq(RFM_IRQ_ALL);

  // Get signal strength
  packets_buf[packets_head].rssi = spi_read_single(RFM_REG_1A_PKT_RSSI_VALUE);
 8000624:	201a      	movs	r0, #26
 8000626:	f7ff ff7d 	bl	8000524 <spi_read_single>
 800062a:	782a      	ldrb	r2, [r5, #0]
 800062c:	b200      	sxth	r0, r0
  packets_buf[packets_head].rssi -= 137;
 800062e:	0053      	lsls	r3, r2, #1
 8000630:	189b      	adds	r3, r3, r2
 8000632:	00db      	lsls	r3, r3, #3
 8000634:	18e3      	adds	r3, r4, r3
 8000636:	3889      	subs	r0, #137	; 0x89
 8000638:	8298      	strh	r0, [r3, #20]
  packets_buf[packets_head].snr = spi_read_single(RFM_REG_19_PKT_SNR_VALUE) / 4;
 800063a:	2019      	movs	r0, #25
 800063c:	f7ff ff72 	bl	8000524 <spi_read_single>
 8000640:	782b      	ldrb	r3, [r5, #0]
 8000642:	005a      	lsls	r2, r3, #1
 8000644:	18d2      	adds	r2, r2, r3
 8000646:	00d2      	lsls	r2, r2, #3
 8000648:	18a4      	adds	r4, r4, r2
 800064a:	0880      	lsrs	r0, r0, #2
 800064c:	74a0      	strb	r0, [r4, #18]

  // Check for CRC error
  packets_buf[packets_head].crc_ok = !(packets_buf[packets_head].flags & RFM_IRQ_PAYLOAD_CRC_ERROR);
 800064e:	7c22      	ldrb	r2, [r4, #16]
 8000650:	0952      	lsrs	r2, r2, #5
 8000652:	2101      	movs	r1, #1
 8000654:	404a      	eors	r2, r1
 8000656:	2101      	movs	r1, #1
 8000658:	400a      	ands	r2, r1
 800065a:	7462      	strb	r2, [r4, #17]

  packets_head = (packets_head + 1) % PACKETS_BUF_SIZE;
 800065c:	3301      	adds	r3, #1
 800065e:	220f      	movs	r2, #15
 8000660:	4013      	ands	r3, r2
 8000662:	702b      	strb	r3, [r5, #0]

  uint16_t time = timers_micros() - timer;
 8000664:	f000 f81c 	bl	80006a0 <timers_micros>
  // log_printf("ISR %u %u %u\n", time, packets_head, packets_tail);
}
 8000668:	bd70      	pop	{r4, r5, r6, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	20000190 	.word	0x20000190
 8000670:	20000010 	.word	0x20000010

08000674 <timers_delay_microseconds>:
    lptimer_start_counter(LPTIM1, LPTIM_CR_CNTSTRT);
}

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_microseconds(uint32_t delay_microseconds)
{
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	0004      	movs	r4, r0
    uint32_t curr_time = lptimer_get_counter(LPTIM1);
 8000678:	4807      	ldr	r0, [pc, #28]	; (8000698 <timers_delay_microseconds+0x24>)
 800067a:	f000 f97e 	bl	800097a <lptimer_get_counter>
 800067e:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_microseconds > 65000)
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <timers_delay_microseconds+0x28>)
 8000682:	429c      	cmp	r4, r3
 8000684:	d900      	bls.n	8000688 <timers_delay_microseconds+0x14>
        delay_microseconds = 65000;
 8000686:	001c      	movs	r4, r3

    while (lptimer_get_counter(LPTIM1) - curr_time < delay_microseconds);
 8000688:	4803      	ldr	r0, [pc, #12]	; (8000698 <timers_delay_microseconds+0x24>)
 800068a:	f000 f976 	bl	800097a <lptimer_get_counter>
 800068e:	1b40      	subs	r0, r0, r5
 8000690:	42a0      	cmp	r0, r4
 8000692:	d3f9      	bcc.n	8000688 <timers_delay_microseconds+0x14>
}
 8000694:	bd70      	pop	{r4, r5, r6, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	40007c00 	.word	0x40007c00
 800069c:	0000fde8 	.word	0x0000fde8

080006a0 <timers_micros>:
}
*/

// Returns value of microsecond counter
uint16_t timers_micros(void)
{
 80006a0:	b510      	push	{r4, lr}
    return (uint16_t)lptimer_get_counter(LPTIM1);
 80006a2:	4802      	ldr	r0, [pc, #8]	; (80006ac <timers_micros+0xc>)
 80006a4:	f000 f969 	bl	800097a <lptimer_get_counter>
}
 80006a8:	bd10      	pop	{r4, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	40007c00 	.word	0x40007c00

080006b0 <timeout_init>:
}


// Timout functions
void timeout_init(void)
{
 80006b0:	b510      	push	{r4, lr}
    timeout_counter     = 0; 
 80006b2:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <timeout_init+0x14>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
    // timeout_counter     = 2140483648; 
    timeout_timer       = timers_micros(); 
 80006b8:	f7ff fff2 	bl	80006a0 <timers_micros>
 80006bc:	4b02      	ldr	r3, [pc, #8]	; (80006c8 <timeout_init+0x18>)
 80006be:	8018      	strh	r0, [r3, #0]
}
 80006c0:	bd10      	pop	{r4, pc}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	20000194 	.word	0x20000194
 80006c8:	20000198 	.word	0x20000198

080006cc <timeout>:

bool timeout(uint32_t time_microseconds, char *msg, uint32_t data)
{
 80006cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ce:	b083      	sub	sp, #12
 80006d0:	0006      	movs	r6, r0
 80006d2:	9101      	str	r1, [sp, #4]
 80006d4:	0015      	movs	r5, r2
    timeout_counter    += (uint16_t)(timers_micros() - timeout_timer);
 80006d6:	f7ff ffe3 	bl	80006a0 <timers_micros>
 80006da:	4c0c      	ldr	r4, [pc, #48]	; (800070c <timeout+0x40>)
 80006dc:	8823      	ldrh	r3, [r4, #0]
 80006de:	1ac3      	subs	r3, r0, r3
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	4f0b      	ldr	r7, [pc, #44]	; (8000710 <timeout+0x44>)
 80006e4:	683a      	ldr	r2, [r7, #0]
 80006e6:	4694      	mov	ip, r2
 80006e8:	4463      	add	r3, ip
 80006ea:	603b      	str	r3, [r7, #0]
    timeout_timer       = timers_micros();
 80006ec:	f7ff ffd8 	bl	80006a0 <timers_micros>
 80006f0:	8020      	strh	r0, [r4, #0]

    // log_printf("%u\n", timeout_counter);

    if(timeout_counter > time_microseconds)
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	42b3      	cmp	r3, r6
 80006f6:	d802      	bhi.n	80006fe <timeout+0x32>
    {
        log_printf("Timeout %s %08X\n", msg, data);
        return true;
    }
    else    
        return false;
 80006f8:	2000      	movs	r0, #0
}
 80006fa:	b003      	add	sp, #12
 80006fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        log_printf("Timeout %s %08X\n", msg, data);
 80006fe:	002a      	movs	r2, r5
 8000700:	9901      	ldr	r1, [sp, #4]
 8000702:	4804      	ldr	r0, [pc, #16]	; (8000714 <timeout+0x48>)
 8000704:	f7ff fda0 	bl	8000248 <log_printf>
        return true;
 8000708:	2001      	movs	r0, #1
 800070a:	e7f6      	b.n	80006fa <timeout+0x2e>
 800070c:	20000198 	.word	0x20000198
 8000710:	20000194 	.word	0x20000194
 8000714:	08000f88 	.word	0x08000f88

08000718 <set_gpio_for_standby>:

void set_gpio_for_standby(void)
{   
 8000718:	b570      	push	{r4, r5, r6, lr}
    // Common
    // LED
    gpio_mode_setup(LED_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, LED);
 800071a:	2580      	movs	r5, #128	; 0x80
 800071c:	01ed      	lsls	r5, r5, #7
 800071e:	24a0      	movs	r4, #160	; 0xa0
 8000720:	05e4      	lsls	r4, r4, #23
 8000722:	002b      	movs	r3, r5
 8000724:	2200      	movs	r2, #0
 8000726:	2103      	movs	r1, #3
 8000728:	0020      	movs	r0, r4
 800072a:	f000 f8be 	bl	80008aa <gpio_mode_setup>
    gpio_set(LED_PORT, LED);
 800072e:	0029      	movs	r1, r5
 8000730:	0020      	movs	r0, r4
 8000732:	f000 f8b5 	bl	80008a0 <gpio_set>

    // Serial Print
    gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, SPF_USART_TX);
 8000736:	2304      	movs	r3, #4
 8000738:	2201      	movs	r2, #1
 800073a:	2100      	movs	r1, #0
 800073c:	0020      	movs	r0, r4
 800073e:	f000 f8b4 	bl	80008aa <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE,  SPF_USART_RX);
 8000742:	2308      	movs	r3, #8
 8000744:	2200      	movs	r2, #0
 8000746:	2101      	movs	r1, #1
 8000748:	0020      	movs	r0, r4
 800074a:	f000 f8ae 	bl	80008aa <gpio_mode_setup>
	gpio_set(SPF_USART_RX_PORT, SPF_USART_RX);
 800074e:	2108      	movs	r1, #8
 8000750:	0020      	movs	r0, r4
 8000752:	f000 f8a5 	bl	80008a0 <gpio_set>

    // Batt Sense
    gpio_mode_setup(BATT_SENS_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, BATT_SENS);
 8000756:	2301      	movs	r3, #1
 8000758:	2200      	movs	r2, #0
 800075a:	2103      	movs	r1, #3
 800075c:	0020      	movs	r0, r4
 800075e:	f000 f8a4 	bl	80008aa <gpio_mode_setup>
    
    // RFM
    // SPI
    gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_ANALOG,   GPIO_PUPD_NONE,       RFM_SPI_MISO);
 8000762:	2340      	movs	r3, #64	; 0x40
 8000764:	2200      	movs	r2, #0
 8000766:	2103      	movs	r1, #3
 8000768:	0020      	movs	r0, r4
 800076a:	f000 f89e 	bl	80008aa <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_SCK_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_SCK);
 800076e:	2320      	movs	r3, #32
 8000770:	2202      	movs	r2, #2
 8000772:	2100      	movs	r1, #0
 8000774:	0020      	movs	r0, r4
 8000776:	f000 f898 	bl	80008aa <gpio_mode_setup>
    gpio_mode_setup(RFM_SPI_MOSI_PORT,  GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_MOSI);
 800077a:	2380      	movs	r3, #128	; 0x80
 800077c:	2202      	movs	r2, #2
 800077e:	2100      	movs	r1, #0
 8000780:	0020      	movs	r0, r4
 8000782:	f000 f892 	bl	80008aa <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_NSS_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_SPI_NSS);
 8000786:	2310      	movs	r3, #16
 8000788:	2201      	movs	r2, #1
 800078a:	2100      	movs	r1, #0
 800078c:	0020      	movs	r0, r4
 800078e:	f000 f88c 	bl	80008aa <gpio_mode_setup>
    gpio_mode_setup(RFM_RESET_PORT,     GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_RESET);
 8000792:	4c1e      	ldr	r4, [pc, #120]	; (800080c <set_gpio_for_standby+0xf4>)
 8000794:	2301      	movs	r3, #1
 8000796:	2201      	movs	r2, #1
 8000798:	2100      	movs	r1, #0
 800079a:	0020      	movs	r0, r4
 800079c:	f000 f885 	bl	80008aa <gpio_mode_setup>

    // DIO
    gpio_mode_setup(RFM_IO_0_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_0);
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	2200      	movs	r2, #0
 80007a6:	2103      	movs	r1, #3
 80007a8:	0020      	movs	r0, r4
 80007aa:	f000 f87e 	bl	80008aa <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_1_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_1);
 80007ae:	2380      	movs	r3, #128	; 0x80
 80007b0:	015b      	lsls	r3, r3, #5
 80007b2:	2200      	movs	r2, #0
 80007b4:	2103      	movs	r1, #3
 80007b6:	0020      	movs	r0, r4
 80007b8:	f000 f877 	bl	80008aa <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_2_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_2);
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	011b      	lsls	r3, r3, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	2103      	movs	r1, #3
 80007c4:	0020      	movs	r0, r4
 80007c6:	f000 f870 	bl	80008aa <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_3_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_3);
 80007ca:	2304      	movs	r3, #4
 80007cc:	2200      	movs	r2, #0
 80007ce:	2103      	movs	r1, #3
 80007d0:	0020      	movs	r0, r4
 80007d2:	f000 f86a 	bl	80008aa <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_4_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_4);
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	2200      	movs	r2, #0
 80007dc:	2103      	movs	r1, #3
 80007de:	0020      	movs	r0, r4
 80007e0:	f000 f863 	bl	80008aa <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_5_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_5);
 80007e4:	2302      	movs	r3, #2
 80007e6:	2200      	movs	r2, #0
 80007e8:	2103      	movs	r1, #3
 80007ea:	0020      	movs	r0, r4
 80007ec:	f000 f85d 	bl	80008aa <gpio_mode_setup>

    #ifdef _HUB
    #else

    // TMP
    gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	019b      	lsls	r3, r3, #6
 80007f4:	2201      	movs	r2, #1
 80007f6:	2100      	movs	r1, #0
 80007f8:	0020      	movs	r0, r4
 80007fa:	f000 f856 	bl	80008aa <gpio_mode_setup>
	gpio_mode_setup(TEMP_I2C_SDA_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SDA);
 80007fe:	002b      	movs	r3, r5
 8000800:	2201      	movs	r2, #1
 8000802:	2100      	movs	r1, #0
 8000804:	0020      	movs	r0, r4
 8000806:	f000 f850 	bl	80008aa <gpio_mode_setup>

    #endif

}
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	50000400 	.word	0x50000400

08000810 <rtc_isr>:

// Override default rtc interrupt handler
void rtc_isr(void)
{ 
 8000810:	b510      	push	{r4, lr}
    exti_reset_request(EXTI20);
 8000812:	2080      	movs	r0, #128	; 0x80
 8000814:	0340      	lsls	r0, r0, #13
 8000816:	f000 f81f 	bl	8000858 <exti_reset_request>

    // scb_reset_system();

    log_init();
 800081a:	f7ff fcff 	bl	800021c <log_init>
    log_printf("RTC ISR\n");
 800081e:	480c      	ldr	r0, [pc, #48]	; (8000850 <rtc_isr+0x40>)
 8000820:	f7ff fd12 	bl	8000248 <log_printf>

    if(RTC_ISR & RTC_ISR_WUTF)
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <rtc_isr+0x44>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	055b      	lsls	r3, r3, #21
 800082a:	d400      	bmi.n	800082e <rtc_isr+0x1e>
        pwr_clear_standby_flag();
        rtc_lock();
	    pwr_enable_backup_domain_write_protect();
        set_gpio_for_standby();
    }
}
 800082c:	bd10      	pop	{r4, pc}
        pwr_disable_backup_domain_write_protect();
 800082e:	f000 f8a7 	bl	8000980 <pwr_disable_backup_domain_write_protect>
        rtc_unlock();
 8000832:	f000 f973 	bl	8000b1c <rtc_unlock>
	    rtc_clear_wakeup_flag();
 8000836:	f000 f97f 	bl	8000b38 <rtc_clear_wakeup_flag>
        pwr_clear_wakeup_flag();
 800083a:	f000 f8bd 	bl	80009b8 <pwr_clear_wakeup_flag>
        pwr_clear_standby_flag();
 800083e:	f000 f8b3 	bl	80009a8 <pwr_clear_standby_flag>
        rtc_lock();
 8000842:	f000 f973 	bl	8000b2c <rtc_lock>
	    pwr_enable_backup_domain_write_protect();
 8000846:	f000 f8a5 	bl	8000994 <pwr_enable_backup_domain_write_protect>
        set_gpio_for_standby();
 800084a:	f7ff ff65 	bl	8000718 <set_gpio_for_standby>
}
 800084e:	e7ed      	b.n	800082c <rtc_isr+0x1c>
 8000850:	08000f9c 	.word	0x08000f9c
 8000854:	4000280c 	.word	0x4000280c

08000858 <exti_reset_request>:
{
#if defined(EXTI_RPR1) && defined(EXTI_FPR1)
	EXTI_RPR1 = extis;
	EXTI_FPR1 = extis;
#else
	EXTI_PR = extis;
 8000858:	4b01      	ldr	r3, [pc, #4]	; (8000860 <exti_reset_request+0x8>)
 800085a:	6018      	str	r0, [r3, #0]
#endif
}
 800085c:	4770      	bx	lr
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40010414 	.word	0x40010414

08000864 <flash_set_ws>:
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8000864:	2101      	movs	r1, #1
	reg32 = FLASH_ACR;
 8000866:	4a03      	ldr	r2, [pc, #12]	; (8000874 <flash_set_ws+0x10>)
 8000868:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 800086a:	438b      	bics	r3, r1
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 800086c:	4303      	orrs	r3, r0
	FLASH_ACR = reg32;
 800086e:	6013      	str	r3, [r2, #0]
}
 8000870:	4770      	bx	lr
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	40022000 	.word	0x40022000

08000878 <flash_unlock_pecr>:
 * yourself.
 * @sa flash_unlock
 */
void flash_unlock_pecr(void)
{
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY1;
 8000878:	4b02      	ldr	r3, [pc, #8]	; (8000884 <flash_unlock_pecr+0xc>)
 800087a:	4a03      	ldr	r2, [pc, #12]	; (8000888 <flash_unlock_pecr+0x10>)
 800087c:	601a      	str	r2, [r3, #0]
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY2;
 800087e:	4a03      	ldr	r2, [pc, #12]	; (800088c <flash_unlock_pecr+0x14>)
 8000880:	601a      	str	r2, [r3, #0]
}
 8000882:	4770      	bx	lr
 8000884:	4002200c 	.word	0x4002200c
 8000888:	89abcdef 	.word	0x89abcdef
 800088c:	02030405 	.word	0x02030405

08000890 <flash_lock_pecr>:

void flash_lock_pecr(void)
{
	FLASH_PECR |= FLASH_PECR_PELOCK;
 8000890:	2301      	movs	r3, #1
 8000892:	4a02      	ldr	r2, [pc, #8]	; (800089c <flash_lock_pecr+0xc>)
 8000894:	6811      	ldr	r1, [r2, #0]
 8000896:	430b      	orrs	r3, r1
 8000898:	6013      	str	r3, [r2, #0]
}
 800089a:	4770      	bx	lr
 800089c:	40022004 	.word	0x40022004

080008a0 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 80008a0:	6181      	str	r1, [r0, #24]
}
 80008a2:	4770      	bx	lr

080008a4 <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 80008a4:	0409      	lsls	r1, r1, #16
 80008a6:	6181      	str	r1, [r0, #24]
}
 80008a8:	4770      	bx	lr

080008aa <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 80008aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ac:	b085      	sub	sp, #20
 80008ae:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 80008b0:	2703      	movs	r7, #3
	pupd = GPIO_PUPDR(gpioport);
 80008b2:	2100      	movs	r1, #0
{
 80008b4:	9202      	str	r2, [sp, #8]
 80008b6:	9303      	str	r3, [sp, #12]
	moder = GPIO_MODER(gpioport);
 80008b8:	6802      	ldr	r2, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 80008ba:	68c3      	ldr	r3, [r0, #12]
		if (!((1 << i) & gpios)) {
 80008bc:	9c03      	ldr	r4, [sp, #12]
 80008be:	2501      	movs	r5, #1
 80008c0:	410c      	asrs	r4, r1
 80008c2:	422c      	tst	r4, r5
 80008c4:	d00a      	beq.n	80008dc <gpio_mode_setup+0x32>
		moder &= ~GPIO_MODE_MASK(i);
 80008c6:	003d      	movs	r5, r7
 80008c8:	004c      	lsls	r4, r1, #1
 80008ca:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 80008cc:	9e01      	ldr	r6, [sp, #4]
		moder &= ~GPIO_MODE_MASK(i);
 80008ce:	43aa      	bics	r2, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 80008d0:	43ab      	bics	r3, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 80008d2:	9d02      	ldr	r5, [sp, #8]
		moder |= GPIO_MODE(i, mode);
 80008d4:	40a6      	lsls	r6, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 80008d6:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 80008d8:	4332      	orrs	r2, r6
		pupd |= GPIO_PUPD(i, pull_up_down);
 80008da:	432b      	orrs	r3, r5
	for (i = 0; i < 16; i++) {
 80008dc:	3101      	adds	r1, #1
 80008de:	2910      	cmp	r1, #16
 80008e0:	d1ec      	bne.n	80008bc <gpio_mode_setup+0x12>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 80008e2:	6002      	str	r2, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 80008e4:	60c3      	str	r3, [r0, #12]
}
 80008e6:	b005      	add	sp, #20
 80008e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008ea <gpio_set_output_options>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_output_options(uint32_t gpioport, uint8_t otype, uint8_t speed,
			     uint16_t gpios)
{
 80008ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80008ec:	9201      	str	r2, [sp, #4]
	uint16_t i;
	uint32_t ospeedr;

	if (otype == 0x1) {
 80008ee:	2901      	cmp	r1, #1
 80008f0:	d116      	bne.n	8000920 <gpio_set_output_options+0x36>
		GPIO_OTYPER(gpioport) |= gpios;
 80008f2:	6841      	ldr	r1, [r0, #4]
 80008f4:	4319      	orrs	r1, r3
	} else {
		GPIO_OTYPER(gpioport) &= ~gpios;
	}

	ospeedr = GPIO_OSPEEDR(gpioport);
 80008f6:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 80008f8:	2601      	movs	r6, #1
			continue;
		}
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 80008fa:	2703      	movs	r7, #3
		GPIO_OTYPER(gpioport) &= ~gpios;
 80008fc:	6041      	str	r1, [r0, #4]
	ospeedr = GPIO_OSPEEDR(gpioport);
 80008fe:	6881      	ldr	r1, [r0, #8]
		if (!((1 << i) & gpios)) {
 8000900:	001d      	movs	r5, r3
 8000902:	4125      	asrs	r5, r4
 8000904:	4235      	tst	r5, r6
 8000906:	d006      	beq.n	8000916 <gpio_set_output_options+0x2c>
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8000908:	003a      	movs	r2, r7
 800090a:	0065      	lsls	r5, r4, #1
 800090c:	40aa      	lsls	r2, r5
 800090e:	4391      	bics	r1, r2
		ospeedr |= GPIO_OSPEED(i, speed);
 8000910:	9a01      	ldr	r2, [sp, #4]
 8000912:	40aa      	lsls	r2, r5
 8000914:	4311      	orrs	r1, r2
	for (i = 0; i < 16; i++) {
 8000916:	3401      	adds	r4, #1
 8000918:	2c10      	cmp	r4, #16
 800091a:	d1f1      	bne.n	8000900 <gpio_set_output_options+0x16>
	}

	GPIO_OSPEEDR(gpioport) = ospeedr;
 800091c:	6081      	str	r1, [r0, #8]
}
 800091e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		GPIO_OTYPER(gpioport) &= ~gpios;
 8000920:	6841      	ldr	r1, [r0, #4]
 8000922:	4399      	bics	r1, r3
 8000924:	e7e7      	b.n	80008f6 <gpio_set_output_options+0xc>

08000926 <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 8000926:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);
 8000928:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 800092a:	2601      	movs	r6, #1
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 800092c:	270f      	movs	r7, #15
	afrl = GPIO_AFRL(gpioport);
 800092e:	6a04      	ldr	r4, [r0, #32]
{
 8000930:	9100      	str	r1, [sp, #0]
	afrh = GPIO_AFRH(gpioport);
 8000932:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8000934:	9201      	str	r2, [sp, #4]
		if (!((1 << i) & gpios)) {
 8000936:	9d01      	ldr	r5, [sp, #4]
 8000938:	411d      	asrs	r5, r3
 800093a:	4235      	tst	r5, r6
 800093c:	d006      	beq.n	800094c <gpio_set_af+0x26>
		afrl &= ~GPIO_AFR_MASK(i);
 800093e:	003a      	movs	r2, r7
 8000940:	009d      	lsls	r5, r3, #2
 8000942:	40aa      	lsls	r2, r5
 8000944:	4394      	bics	r4, r2
		afrl |= GPIO_AFR(i, alt_func_num);
 8000946:	9a00      	ldr	r2, [sp, #0]
 8000948:	40aa      	lsls	r2, r5
 800094a:	4314      	orrs	r4, r2
	for (i = 0; i < 8; i++) {
 800094c:	3301      	adds	r3, #1
 800094e:	2b08      	cmp	r3, #8
 8000950:	d1f1      	bne.n	8000936 <gpio_set_af+0x10>
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8000952:	2601      	movs	r6, #1
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8000954:	270f      	movs	r7, #15
		if (!((1 << i) & gpios)) {
 8000956:	9a01      	ldr	r2, [sp, #4]
 8000958:	411a      	asrs	r2, r3
 800095a:	4232      	tst	r2, r6
 800095c:	d007      	beq.n	800096e <gpio_set_af+0x48>
		afrh &= ~GPIO_AFR_MASK(i - 8);
 800095e:	003a      	movs	r2, r7
 8000960:	009d      	lsls	r5, r3, #2
 8000962:	3d20      	subs	r5, #32
 8000964:	40aa      	lsls	r2, r5
 8000966:	4391      	bics	r1, r2
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 8000968:	9a00      	ldr	r2, [sp, #0]
 800096a:	40aa      	lsls	r2, r5
 800096c:	4311      	orrs	r1, r2
	for (i = 8; i < 16; i++) {
 800096e:	3301      	adds	r3, #1
 8000970:	2b10      	cmp	r3, #16
 8000972:	d1f0      	bne.n	8000956 <gpio_set_af+0x30>
	}

	GPIO_AFRL(gpioport) = afrl;
 8000974:	6204      	str	r4, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 8000976:	6241      	str	r1, [r0, #36]	; 0x24
}
 8000978:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0800097a <lptimer_get_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @returns Counter value.
 */
uint16_t lptimer_get_counter(uint32_t lptimer_peripheral)
{
	return LPTIM_CNT(lptimer_peripheral);
 800097a:	69c0      	ldr	r0, [r0, #28]
 800097c:	b280      	uxth	r0, r0
}
 800097e:	4770      	bx	lr

08000980 <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	4a03      	ldr	r2, [pc, #12]	; (8000990 <pwr_disable_backup_domain_write_protect+0x10>)
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	6811      	ldr	r1, [r2, #0]
 8000988:	430b      	orrs	r3, r1
 800098a:	6013      	str	r3, [r2, #0]
}
 800098c:	4770      	bx	lr
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	40007000 	.word	0x40007000

08000994 <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 8000994:	4a02      	ldr	r2, [pc, #8]	; (80009a0 <pwr_enable_backup_domain_write_protect+0xc>)
 8000996:	4903      	ldr	r1, [pc, #12]	; (80009a4 <pwr_enable_backup_domain_write_protect+0x10>)
 8000998:	6813      	ldr	r3, [r2, #0]
 800099a:	400b      	ands	r3, r1
 800099c:	6013      	str	r3, [r2, #0]
}
 800099e:	4770      	bx	lr
 80009a0:	40007000 	.word	0x40007000
 80009a4:	fffffeff 	.word	0xfffffeff

080009a8 <pwr_clear_standby_flag>:
This is set when the processor returns from a standby mode.
*/

void pwr_clear_standby_flag(void)
{
	PWR_CR |= PWR_CR_CSBF;
 80009a8:	2308      	movs	r3, #8
 80009aa:	4a02      	ldr	r2, [pc, #8]	; (80009b4 <pwr_clear_standby_flag+0xc>)
 80009ac:	6811      	ldr	r1, [r2, #0]
 80009ae:	430b      	orrs	r3, r1
 80009b0:	6013      	str	r3, [r2, #0]
}
 80009b2:	4770      	bx	lr
 80009b4:	40007000 	.word	0x40007000

080009b8 <pwr_clear_wakeup_flag>:
This is set when the processor receives a wakeup signal.
*/

void pwr_clear_wakeup_flag(void)
{
	PWR_CR |= PWR_CR_CWUF;
 80009b8:	2304      	movs	r3, #4
 80009ba:	4a02      	ldr	r2, [pc, #8]	; (80009c4 <pwr_clear_wakeup_flag+0xc>)
 80009bc:	6811      	ldr	r1, [r2, #0]
 80009be:	430b      	orrs	r3, r1
 80009c0:	6013      	str	r3, [r2, #0]
}
 80009c2:	4770      	bx	lr
 80009c4:	40007000 	.word	0x40007000

080009c8 <rcc_osc_on>:
uint32_t rcc_ahb_frequency = 2097000;
uint32_t rcc_apb1_frequency = 2097000;
uint32_t rcc_apb2_frequency = 2097000;

void rcc_osc_on(enum rcc_osc osc)
{
 80009c8:	b500      	push	{lr}
 80009ca:	2806      	cmp	r0, #6
 80009cc:	d80b      	bhi.n	80009e6 <rcc_osc_on+0x1e>
 80009ce:	f000 f987 	bl	8000ce0 <__gnu_thumb1_case_uqi>
 80009d2:	1004      	.short	0x1004
 80009d4:	1b0b1915 	.word	0x1b0b1915
 80009d8:	1d          	.byte	0x1d
 80009d9:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <rcc_osc_on+0x48>)
 80009de:	045b      	lsls	r3, r3, #17
 80009e0:	6811      	ldr	r1, [r2, #0]
		break;
	case RCC_LSE:
		RCC_CSR |= RCC_CSR_LSEON;
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
 80009e2:	430b      	orrs	r3, r1
 80009e4:	6013      	str	r3, [r2, #0]
		break;
	}
}
 80009e6:	bd00      	pop	{pc}
		RCC_CR |= RCC_CR_MSION;
 80009e8:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <rcc_osc_on+0x48>)
		RCC_CSR |= RCC_CSR_LSEON;
 80009ea:	2380      	movs	r3, #128	; 0x80
 80009ec:	6811      	ldr	r1, [r2, #0]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	e7f7      	b.n	80009e2 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSEON;
 80009f2:	2380      	movs	r3, #128	; 0x80
 80009f4:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <rcc_osc_on+0x48>)
 80009f6:	025b      	lsls	r3, r3, #9
 80009f8:	6811      	ldr	r1, [r2, #0]
 80009fa:	e7f2      	b.n	80009e2 <rcc_osc_on+0x1a>
		RCC_CRRCR |= RCC_CRRCR_HSI48ON;
 80009fc:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <rcc_osc_on+0x4c>)
		RCC_CSR |= RCC_CSR_LSION;
 80009fe:	2301      	movs	r3, #1
 8000a00:	6811      	ldr	r1, [r2, #0]
 8000a02:	e7ee      	b.n	80009e2 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSI16ON;
 8000a04:	4a02      	ldr	r2, [pc, #8]	; (8000a10 <rcc_osc_on+0x48>)
 8000a06:	e7fa      	b.n	80009fe <rcc_osc_on+0x36>
		RCC_CSR |= RCC_CSR_LSEON;
 8000a08:	4a03      	ldr	r2, [pc, #12]	; (8000a18 <rcc_osc_on+0x50>)
 8000a0a:	e7ee      	b.n	80009ea <rcc_osc_on+0x22>
		RCC_CSR |= RCC_CSR_LSION;
 8000a0c:	4a02      	ldr	r2, [pc, #8]	; (8000a18 <rcc_osc_on+0x50>)
 8000a0e:	e7f6      	b.n	80009fe <rcc_osc_on+0x36>
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40021008 	.word	0x40021008
 8000a18:	40021050 	.word	0x40021050

08000a1c <rcc_is_osc_ready>:
	cm3_assert_not_reached();
}


bool rcc_is_osc_ready(enum rcc_osc osc)
{
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	b500      	push	{lr}
 8000a20:	2806      	cmp	r0, #6
 8000a22:	d80a      	bhi.n	8000a3a <rcc_is_osc_ready+0x1e>
 8000a24:	3301      	adds	r3, #1
 8000a26:	f000 f95b 	bl	8000ce0 <__gnu_thumb1_case_uqi>
 8000a2a:	0a04      	.short	0x0a04
 8000a2c:	1a160e12 	.word	0x1a160e12
 8000a30:	1c          	.byte	0x1c
 8000a31:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 8000a32:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <rcc_is_osc_ready+0x4c>)
 8000a34:	6810      	ldr	r0, [r2, #0]
 8000a36:	0e40      	lsrs	r0, r0, #25
	case RCC_MSI:
		return RCC_CR & RCC_CR_MSIRDY;
	case RCC_LSE:
		return RCC_CSR & RCC_CSR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 8000a38:	4003      	ands	r3, r0
	}
	return false;
}
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	bd00      	pop	{pc}
		return RCC_CR & RCC_CR_HSERDY;
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <rcc_is_osc_ready+0x4c>)
 8000a40:	6810      	ldr	r0, [r2, #0]
 8000a42:	0c40      	lsrs	r0, r0, #17
 8000a44:	e7f8      	b.n	8000a38 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_HSI16RDY;
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <rcc_is_osc_ready+0x4c>)
 8000a48:	6810      	ldr	r0, [r2, #0]
 8000a4a:	0880      	lsrs	r0, r0, #2
 8000a4c:	e7f4      	b.n	8000a38 <rcc_is_osc_ready+0x1c>
		return RCC_CRRCR & RCC_CRRCR_HSI48RDY;
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <rcc_is_osc_ready+0x50>)
		return RCC_CSR & RCC_CSR_LSIRDY;
 8000a50:	6810      	ldr	r0, [r2, #0]
 8000a52:	0840      	lsrs	r0, r0, #1
 8000a54:	e7f0      	b.n	8000a38 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_MSIRDY;
 8000a56:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <rcc_is_osc_ready+0x4c>)
		return RCC_CSR & RCC_CSR_LSERDY;
 8000a58:	6810      	ldr	r0, [r2, #0]
 8000a5a:	0a40      	lsrs	r0, r0, #9
 8000a5c:	e7ec      	b.n	8000a38 <rcc_is_osc_ready+0x1c>
 8000a5e:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <rcc_is_osc_ready+0x54>)
 8000a60:	e7fa      	b.n	8000a58 <rcc_is_osc_ready+0x3c>
		return RCC_CSR & RCC_CSR_LSIRDY;
 8000a62:	4a03      	ldr	r2, [pc, #12]	; (8000a70 <rcc_is_osc_ready+0x54>)
 8000a64:	e7f4      	b.n	8000a50 <rcc_is_osc_ready+0x34>
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40021008 	.word	0x40021008
 8000a70:	40021050 	.word	0x40021050

08000a74 <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 8000a74:	b510      	push	{r4, lr}
 8000a76:	0004      	movs	r4, r0
	while (!rcc_is_osc_ready(osc));
 8000a78:	0020      	movs	r0, r4
 8000a7a:	f7ff ffcf 	bl	8000a1c <rcc_is_osc_ready>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	d0fa      	beq.n	8000a78 <rcc_wait_for_osc_ready+0x4>
}
 8000a82:	bd10      	pop	{r4, pc}

08000a84 <rcc_set_ppre1>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb1pre
 */

void rcc_set_ppre1(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8000a84:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <rcc_set_ppre1+0x10>)
 8000a86:	4904      	ldr	r1, [pc, #16]	; (8000a98 <rcc_set_ppre1+0x14>)
 8000a88:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE1_MASK << RCC_CFGR_PPRE1_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8000a8a:	0200      	lsls	r0, r0, #8
	uint32_t reg = RCC_CFGR
 8000a8c:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8000a8e:	4318      	orrs	r0, r3
 8000a90:	6010      	str	r0, [r2, #0]
}
 8000a92:	4770      	bx	lr
 8000a94:	4002100c 	.word	0x4002100c
 8000a98:	fffff8ff 	.word	0xfffff8ff

08000a9c <rcc_set_ppre2>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb2pre
 */

void rcc_set_ppre2(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8000a9c:	4a03      	ldr	r2, [pc, #12]	; (8000aac <rcc_set_ppre2+0x10>)
 8000a9e:	4904      	ldr	r1, [pc, #16]	; (8000ab0 <rcc_set_ppre2+0x14>)
 8000aa0:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE2_MASK << RCC_CFGR_PPRE2_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8000aa2:	02c0      	lsls	r0, r0, #11
	uint32_t reg = RCC_CFGR
 8000aa4:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8000aa6:	4318      	orrs	r0, r3
 8000aa8:	6010      	str	r0, [r2, #0]
}
 8000aaa:	4770      	bx	lr
 8000aac:	4002100c 	.word	0x4002100c
 8000ab0:	ffffc7ff 	.word	0xffffc7ff

08000ab4 <rcc_set_hpre>:
 * @param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
 */

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8000ab4:	21f0      	movs	r1, #240	; 0xf0
 8000ab6:	4a03      	ldr	r2, [pc, #12]	; (8000ac4 <rcc_set_hpre+0x10>)
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8000ab8:	0100      	lsls	r0, r0, #4
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8000aba:	6813      	ldr	r3, [r2, #0]
 8000abc:	438b      	bics	r3, r1
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8000abe:	4318      	orrs	r0, r3
 8000ac0:	6010      	str	r0, [r2, #0]
}
 8000ac2:	4770      	bx	lr
 8000ac4:	4002100c 	.word	0x4002100c

08000ac8 <rcc_set_msi_range>:
*
 * @param msi_range desired range @ref rcc_icscr_msirange
 */
void rcc_set_msi_range(uint32_t msi_range)
{
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8000ac8:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <rcc_set_msi_range+0x10>)
 8000aca:	4904      	ldr	r1, [pc, #16]	; (8000adc <rcc_set_msi_range+0x14>)
 8000acc:	6813      	ldr	r3, [r2, #0]
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8000ace:	0340      	lsls	r0, r0, #13
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8000ad0:	400b      	ands	r3, r1
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8000ad2:	4318      	orrs	r0, r3
 8000ad4:	6010      	str	r0, [r2, #0]
}
 8000ad6:	4770      	bx	lr
 8000ad8:	40021004 	.word	0x40021004
 8000adc:	ffff1fff 	.word	0xffff1fff

08000ae0 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <rcc_periph_clock_enable+0x18>)
 8000ae2:	0942      	lsrs	r2, r0, #5
 8000ae4:	18d2      	adds	r2, r2, r3
 8000ae6:	231f      	movs	r3, #31
 8000ae8:	4018      	ands	r0, r3
 8000aea:	3b1e      	subs	r3, #30
 8000aec:	4083      	lsls	r3, r0
 8000aee:	6811      	ldr	r1, [r2, #0]
 8000af0:	430b      	orrs	r3, r1
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	4770      	bx	lr
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	40021000 	.word	0x40021000

08000afc <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <rcc_periph_reset_pulse+0x1c>)
 8000afe:	0943      	lsrs	r3, r0, #5
 8000b00:	189b      	adds	r3, r3, r2
 8000b02:	221f      	movs	r2, #31
 8000b04:	4010      	ands	r0, r2
 8000b06:	3a1e      	subs	r2, #30
 8000b08:	4082      	lsls	r2, r0
 8000b0a:	6819      	ldr	r1, [r3, #0]
 8000b0c:	4311      	orrs	r1, r2
 8000b0e:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 8000b10:	6819      	ldr	r1, [r3, #0]
 8000b12:	4391      	bics	r1, r2
 8000b14:	6019      	str	r1, [r3, #0]
}
 8000b16:	4770      	bx	lr
 8000b18:	40021000 	.word	0x40021000

08000b1c <rtc_unlock>:
/** @brief Unlock write access to the RTC registers

*/
void rtc_unlock(void)
{
	RTC_WPR = 0xca;
 8000b1c:	22ca      	movs	r2, #202	; 0xca
 8000b1e:	4b02      	ldr	r3, [pc, #8]	; (8000b28 <rtc_unlock+0xc>)
 8000b20:	601a      	str	r2, [r3, #0]
	RTC_WPR = 0x53;
 8000b22:	3a77      	subs	r2, #119	; 0x77
 8000b24:	601a      	str	r2, [r3, #0]
}
 8000b26:	4770      	bx	lr
 8000b28:	40002824 	.word	0x40002824

08000b2c <rtc_lock>:
/** @brief Lock write access to the RTC registers

*/
void rtc_lock(void)
{
	RTC_WPR = 0xff;
 8000b2c:	22ff      	movs	r2, #255	; 0xff
 8000b2e:	4b01      	ldr	r3, [pc, #4]	; (8000b34 <rtc_lock+0x8>)
 8000b30:	601a      	str	r2, [r3, #0]
}
 8000b32:	4770      	bx	lr
 8000b34:	40002824 	.word	0x40002824

08000b38 <rtc_clear_wakeup_flag>:

@details This function should be called first in the rtc_wkup_isr()
*/
void rtc_clear_wakeup_flag(void)
{
	RTC_ISR &= ~RTC_ISR_WUTF;
 8000b38:	4a02      	ldr	r2, [pc, #8]	; (8000b44 <rtc_clear_wakeup_flag+0xc>)
 8000b3a:	4903      	ldr	r1, [pc, #12]	; (8000b48 <rtc_clear_wakeup_flag+0x10>)
 8000b3c:	6813      	ldr	r3, [r2, #0]
 8000b3e:	400b      	ands	r3, r1
 8000b40:	6013      	str	r3, [r2, #0]
}
 8000b42:	4770      	bx	lr
 8000b44:	4000280c 	.word	0x4000280c
 8000b48:	fffffbff 	.word	0xfffffbff

08000b4c <spi_xfer>:
uint16_t spi_xfer(uint32_t spi, uint16_t data)
{
	spi_write(spi, data);

	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8000b4c:	2301      	movs	r3, #1
	SPI_DR(spi) = data;
 8000b4e:	60c1      	str	r1, [r0, #12]
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8000b50:	6882      	ldr	r2, [r0, #8]
 8000b52:	421a      	tst	r2, r3
 8000b54:	d0fc      	beq.n	8000b50 <spi_xfer+0x4>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 8000b56:	68c0      	ldr	r0, [r0, #12]
 8000b58:	b280      	uxth	r0, r0
}
 8000b5a:	4770      	bx	lr

08000b5c <usart_set_baudrate>:
void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;

#if defined USART1
	if ((usart == USART1)
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <usart_set_baudrate+0x44>)
{
 8000b5e:	b570      	push	{r4, r5, r6, lr}
 8000b60:	0005      	movs	r5, r0
 8000b62:	000c      	movs	r4, r1
 8000b64:	084e      	lsrs	r6, r1, #1
	if ((usart == USART1)
 8000b66:	4298      	cmp	r0, r3
 8000b68:	d107      	bne.n	8000b7a <usart_set_baudrate+0x1e>
#if defined USART6
		|| (usart == USART6)
#endif
		) {
		clock = rcc_apb2_frequency;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <usart_set_baudrate+0x48>)
 8000b6c:	6818      	ldr	r0, [r3, #0]
			+ ((clock % baud) * 256 + baud / 2) / baud;
		return;
	}
#endif

	USART_BRR(usart) = (clock + baud / 2) / baud;
 8000b6e:	0021      	movs	r1, r4
 8000b70:	1830      	adds	r0, r6, r0
 8000b72:	f000 f8bf 	bl	8000cf4 <__udivsi3>
 8000b76:	60e8      	str	r0, [r5, #12]
 8000b78:	e010      	b.n	8000b9c <usart_set_baudrate+0x40>
	uint32_t clock = rcc_apb1_frequency;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <usart_set_baudrate+0x4c>)
 8000b7c:	6818      	ldr	r0, [r3, #0]
	if (usart == LPUART1) {
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <usart_set_baudrate+0x50>)
 8000b80:	429d      	cmp	r5, r3
 8000b82:	d1f4      	bne.n	8000b6e <usart_set_baudrate+0x12>
		USART_BRR(usart) = (clock / baud) * 256
 8000b84:	f000 f93c 	bl	8000e00 <__aeabi_uidivmod>
 8000b88:	0005      	movs	r5, r0
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8000b8a:	0208      	lsls	r0, r1, #8
 8000b8c:	1980      	adds	r0, r0, r6
 8000b8e:	0021      	movs	r1, r4
 8000b90:	f000 f8b0 	bl	8000cf4 <__udivsi3>
		USART_BRR(usart) = (clock / baud) * 256
 8000b94:	022d      	lsls	r5, r5, #8
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <usart_set_baudrate+0x54>)
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8000b98:	1940      	adds	r0, r0, r5
		USART_BRR(usart) = (clock / baud) * 256
 8000b9a:	6018      	str	r0, [r3, #0]
}
 8000b9c:	bd70      	pop	{r4, r5, r6, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	40013800 	.word	0x40013800
 8000ba4:	2000000c 	.word	0x2000000c
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	40004800 	.word	0x40004800
 8000bb0:	4000480c 	.word	0x4000480c

08000bb4 <usart_set_databits>:
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
 8000bb4:	2908      	cmp	r1, #8
 8000bb6:	d104      	bne.n	8000bc2 <usart_set_databits+0xe>
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 8000bb8:	6803      	ldr	r3, [r0, #0]
 8000bba:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <usart_set_databits+0x18>)
 8000bbc:	4013      	ands	r3, r2
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8000bbe:	6003      	str	r3, [r0, #0]
	}
}
 8000bc0:	4770      	bx	lr
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	6802      	ldr	r2, [r0, #0]
 8000bc6:	015b      	lsls	r3, r3, #5
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	e7f8      	b.n	8000bbe <usart_set_databits+0xa>
 8000bcc:	ffffefff 	.word	0xffffefff

08000bd0 <usart_set_stopbits>:

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 8000bd0:	6843      	ldr	r3, [r0, #4]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 8000bd2:	4a02      	ldr	r2, [pc, #8]	; (8000bdc <usart_set_stopbits+0xc>)
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 8000bd8:	6043      	str	r3, [r0, #4]
}
 8000bda:	4770      	bx	lr
 8000bdc:	ffffcfff 	.word	0xffffcfff

08000be0 <usart_set_parity>:

void usart_set_parity(uint32_t usart, uint32_t parity)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 8000be0:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 8000be2:	4a02      	ldr	r2, [pc, #8]	; (8000bec <usart_set_parity+0xc>)
 8000be4:	4013      	ands	r3, r2
 8000be6:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8000be8:	6003      	str	r3, [r0, #0]
}
 8000bea:	4770      	bx	lr
 8000bec:	fffff9ff 	.word	0xfffff9ff

08000bf0 <usart_set_mode>:
void usart_set_mode(uint32_t usart, uint32_t mode)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8000bf0:	220c      	movs	r2, #12
	reg32 = USART_CR1(usart);
 8000bf2:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8000bf4:	4393      	bics	r3, r2
 8000bf6:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8000bf8:	6003      	str	r3, [r0, #0]
}
 8000bfa:	4770      	bx	lr

08000bfc <usart_set_flow_control>:

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 8000bfc:	6883      	ldr	r3, [r0, #8]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 8000bfe:	4a02      	ldr	r2, [pc, #8]	; (8000c08 <usart_set_flow_control+0xc>)
 8000c00:	4013      	ands	r3, r2
 8000c02:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 8000c04:	6083      	str	r3, [r0, #8]
}
 8000c06:	4770      	bx	lr
 8000c08:	fffffcff 	.word	0xfffffcff

08000c0c <usart_enable>:
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	6802      	ldr	r2, [r0, #0]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	6003      	str	r3, [r0, #0]
}
 8000c14:	4770      	bx	lr

08000c16 <usart_disable>:
usart_reg_base
*/

void usart_disable(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_UE;
 8000c16:	2201      	movs	r2, #1
 8000c18:	6803      	ldr	r3, [r0, #0]
 8000c1a:	4393      	bics	r3, r2
 8000c1c:	6003      	str	r3, [r0, #0]
}
 8000c1e:	4770      	bx	lr

08000c20 <usart_send_blocking>:
usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(uint32_t usart, uint16_t data)
{
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	000d      	movs	r5, r1
 8000c24:	0004      	movs	r4, r0
	usart_wait_send_ready(usart);
 8000c26:	f000 f809 	bl	8000c3c <usart_wait_send_ready>
	usart_send(usart, data);
 8000c2a:	0029      	movs	r1, r5
 8000c2c:	0020      	movs	r0, r4
 8000c2e:	f000 f801 	bl	8000c34 <usart_send>
}
 8000c32:	bd70      	pop	{r4, r5, r6, pc}

08000c34 <usart_send>:
 */

void usart_send(uint32_t usart, uint16_t data)
{
	/* Send data. */
	USART_TDR(usart) = (data & USART_TDR_MASK);
 8000c34:	05c9      	lsls	r1, r1, #23
 8000c36:	0dc9      	lsrs	r1, r1, #23
 8000c38:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000c3a:	4770      	bx	lr

08000c3c <usart_wait_send_ready>:
 */

void usart_wait_send_ready(uint32_t usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_ISR(usart) & USART_ISR_TXE) == 0);
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	69c2      	ldr	r2, [r0, #28]
 8000c40:	421a      	tst	r2, r3
 8000c42:	d0fc      	beq.n	8000c3e <usart_wait_send_ready+0x2>
}
 8000c44:	4770      	bx	lr

08000c46 <usart_get_flag>:
 * @returns boolean: flag set.
 */

bool usart_get_flag(uint32_t usart, uint32_t flag)
{
	return ((USART_ISR(usart) & flag) != 0);
 8000c46:	69c0      	ldr	r0, [r0, #28]
 8000c48:	4008      	ands	r0, r1
 8000c4a:	1e41      	subs	r1, r0, #1
 8000c4c:	4188      	sbcs	r0, r1
 8000c4e:	b2c0      	uxtb	r0, r0
}
 8000c50:	4770      	bx	lr

08000c52 <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 8000c52:	e7fe      	b.n	8000c52 <blocking_handler>

08000c54 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 8000c54:	4770      	bx	lr
	...

08000c58 <reset_handler>:
{
 8000c58:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <reset_handler+0x5c>)
 8000c5c:	4a16      	ldr	r2, [pc, #88]	; (8000cb8 <reset_handler+0x60>)
 8000c5e:	4917      	ldr	r1, [pc, #92]	; (8000cbc <reset_handler+0x64>)
 8000c60:	428b      	cmp	r3, r1
 8000c62:	d318      	bcc.n	8000c96 <reset_handler+0x3e>
		*dest++ = 0;
 8000c64:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 8000c66:	4a16      	ldr	r2, [pc, #88]	; (8000cc0 <reset_handler+0x68>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d317      	bcc.n	8000c9c <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <reset_handler+0x6c>)
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8000c74:	4c14      	ldr	r4, [pc, #80]	; (8000cc8 <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 8000c76:	430b      	orrs	r3, r1
 8000c78:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <reset_handler+0x74>)
 8000c7c:	429c      	cmp	r4, r3
 8000c7e:	d30f      	bcc.n	8000ca0 <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8000c80:	4c13      	ldr	r4, [pc, #76]	; (8000cd0 <reset_handler+0x78>)
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <reset_handler+0x7c>)
 8000c84:	429c      	cmp	r4, r3
 8000c86:	d30e      	bcc.n	8000ca6 <reset_handler+0x4e>
	(void)main();
 8000c88:	f7ff fa1a 	bl	80000c0 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8000c8c:	4c12      	ldr	r4, [pc, #72]	; (8000cd8 <reset_handler+0x80>)
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <reset_handler+0x84>)
 8000c90:	429c      	cmp	r4, r3
 8000c92:	d30b      	bcc.n	8000cac <reset_handler+0x54>
}
 8000c94:	bd10      	pop	{r4, pc}
		*dest = *src;
 8000c96:	ca01      	ldmia	r2!, {r0}
 8000c98:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 8000c9a:	e7e1      	b.n	8000c60 <reset_handler+0x8>
		*dest++ = 0;
 8000c9c:	c302      	stmia	r3!, {r1}
 8000c9e:	e7e3      	b.n	8000c68 <reset_handler+0x10>
		(*fp)();
 8000ca0:	cc08      	ldmia	r4!, {r3}
 8000ca2:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8000ca4:	e7e9      	b.n	8000c7a <reset_handler+0x22>
		(*fp)();
 8000ca6:	cc08      	ldmia	r4!, {r3}
 8000ca8:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8000caa:	e7ea      	b.n	8000c82 <reset_handler+0x2a>
		(*fp)();
 8000cac:	cc08      	ldmia	r4!, {r3}
 8000cae:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8000cb0:	e7ed      	b.n	8000c8e <reset_handler+0x36>
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	08000fa8 	.word	0x08000fa8
 8000cbc:	20000010 	.word	0x20000010
 8000cc0:	2000019c 	.word	0x2000019c
 8000cc4:	e000ed14 	.word	0xe000ed14
 8000cc8:	08000fa8 	.word	0x08000fa8
 8000ccc:	08000fa8 	.word	0x08000fa8
 8000cd0:	08000fa8 	.word	0x08000fa8
 8000cd4:	08000fa8 	.word	0x08000fa8
 8000cd8:	08000fa8 	.word	0x08000fa8
 8000cdc:	08000fa8 	.word	0x08000fa8

08000ce0 <__gnu_thumb1_case_uqi>:
 8000ce0:	b402      	push	{r1}
 8000ce2:	4671      	mov	r1, lr
 8000ce4:	0849      	lsrs	r1, r1, #1
 8000ce6:	0049      	lsls	r1, r1, #1
 8000ce8:	5c09      	ldrb	r1, [r1, r0]
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	448e      	add	lr, r1
 8000cee:	bc02      	pop	{r1}
 8000cf0:	4770      	bx	lr
 8000cf2:	46c0      	nop			; (mov r8, r8)

08000cf4 <__udivsi3>:
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	0843      	lsrs	r3, r0, #1
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d374      	bcc.n	8000de6 <__udivsi3+0xf2>
 8000cfc:	0903      	lsrs	r3, r0, #4
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d35f      	bcc.n	8000dc2 <__udivsi3+0xce>
 8000d02:	0a03      	lsrs	r3, r0, #8
 8000d04:	428b      	cmp	r3, r1
 8000d06:	d344      	bcc.n	8000d92 <__udivsi3+0x9e>
 8000d08:	0b03      	lsrs	r3, r0, #12
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d328      	bcc.n	8000d60 <__udivsi3+0x6c>
 8000d0e:	0c03      	lsrs	r3, r0, #16
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d30d      	bcc.n	8000d30 <__udivsi3+0x3c>
 8000d14:	22ff      	movs	r2, #255	; 0xff
 8000d16:	0209      	lsls	r1, r1, #8
 8000d18:	ba12      	rev	r2, r2
 8000d1a:	0c03      	lsrs	r3, r0, #16
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	d302      	bcc.n	8000d26 <__udivsi3+0x32>
 8000d20:	1212      	asrs	r2, r2, #8
 8000d22:	0209      	lsls	r1, r1, #8
 8000d24:	d065      	beq.n	8000df2 <__udivsi3+0xfe>
 8000d26:	0b03      	lsrs	r3, r0, #12
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d319      	bcc.n	8000d60 <__udivsi3+0x6c>
 8000d2c:	e000      	b.n	8000d30 <__udivsi3+0x3c>
 8000d2e:	0a09      	lsrs	r1, r1, #8
 8000d30:	0bc3      	lsrs	r3, r0, #15
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d301      	bcc.n	8000d3a <__udivsi3+0x46>
 8000d36:	03cb      	lsls	r3, r1, #15
 8000d38:	1ac0      	subs	r0, r0, r3
 8000d3a:	4152      	adcs	r2, r2
 8000d3c:	0b83      	lsrs	r3, r0, #14
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d301      	bcc.n	8000d46 <__udivsi3+0x52>
 8000d42:	038b      	lsls	r3, r1, #14
 8000d44:	1ac0      	subs	r0, r0, r3
 8000d46:	4152      	adcs	r2, r2
 8000d48:	0b43      	lsrs	r3, r0, #13
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d301      	bcc.n	8000d52 <__udivsi3+0x5e>
 8000d4e:	034b      	lsls	r3, r1, #13
 8000d50:	1ac0      	subs	r0, r0, r3
 8000d52:	4152      	adcs	r2, r2
 8000d54:	0b03      	lsrs	r3, r0, #12
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d301      	bcc.n	8000d5e <__udivsi3+0x6a>
 8000d5a:	030b      	lsls	r3, r1, #12
 8000d5c:	1ac0      	subs	r0, r0, r3
 8000d5e:	4152      	adcs	r2, r2
 8000d60:	0ac3      	lsrs	r3, r0, #11
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d301      	bcc.n	8000d6a <__udivsi3+0x76>
 8000d66:	02cb      	lsls	r3, r1, #11
 8000d68:	1ac0      	subs	r0, r0, r3
 8000d6a:	4152      	adcs	r2, r2
 8000d6c:	0a83      	lsrs	r3, r0, #10
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d301      	bcc.n	8000d76 <__udivsi3+0x82>
 8000d72:	028b      	lsls	r3, r1, #10
 8000d74:	1ac0      	subs	r0, r0, r3
 8000d76:	4152      	adcs	r2, r2
 8000d78:	0a43      	lsrs	r3, r0, #9
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d301      	bcc.n	8000d82 <__udivsi3+0x8e>
 8000d7e:	024b      	lsls	r3, r1, #9
 8000d80:	1ac0      	subs	r0, r0, r3
 8000d82:	4152      	adcs	r2, r2
 8000d84:	0a03      	lsrs	r3, r0, #8
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d301      	bcc.n	8000d8e <__udivsi3+0x9a>
 8000d8a:	020b      	lsls	r3, r1, #8
 8000d8c:	1ac0      	subs	r0, r0, r3
 8000d8e:	4152      	adcs	r2, r2
 8000d90:	d2cd      	bcs.n	8000d2e <__udivsi3+0x3a>
 8000d92:	09c3      	lsrs	r3, r0, #7
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d301      	bcc.n	8000d9c <__udivsi3+0xa8>
 8000d98:	01cb      	lsls	r3, r1, #7
 8000d9a:	1ac0      	subs	r0, r0, r3
 8000d9c:	4152      	adcs	r2, r2
 8000d9e:	0983      	lsrs	r3, r0, #6
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d301      	bcc.n	8000da8 <__udivsi3+0xb4>
 8000da4:	018b      	lsls	r3, r1, #6
 8000da6:	1ac0      	subs	r0, r0, r3
 8000da8:	4152      	adcs	r2, r2
 8000daa:	0943      	lsrs	r3, r0, #5
 8000dac:	428b      	cmp	r3, r1
 8000dae:	d301      	bcc.n	8000db4 <__udivsi3+0xc0>
 8000db0:	014b      	lsls	r3, r1, #5
 8000db2:	1ac0      	subs	r0, r0, r3
 8000db4:	4152      	adcs	r2, r2
 8000db6:	0903      	lsrs	r3, r0, #4
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d301      	bcc.n	8000dc0 <__udivsi3+0xcc>
 8000dbc:	010b      	lsls	r3, r1, #4
 8000dbe:	1ac0      	subs	r0, r0, r3
 8000dc0:	4152      	adcs	r2, r2
 8000dc2:	08c3      	lsrs	r3, r0, #3
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d301      	bcc.n	8000dcc <__udivsi3+0xd8>
 8000dc8:	00cb      	lsls	r3, r1, #3
 8000dca:	1ac0      	subs	r0, r0, r3
 8000dcc:	4152      	adcs	r2, r2
 8000dce:	0883      	lsrs	r3, r0, #2
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	d301      	bcc.n	8000dd8 <__udivsi3+0xe4>
 8000dd4:	008b      	lsls	r3, r1, #2
 8000dd6:	1ac0      	subs	r0, r0, r3
 8000dd8:	4152      	adcs	r2, r2
 8000dda:	0843      	lsrs	r3, r0, #1
 8000ddc:	428b      	cmp	r3, r1
 8000dde:	d301      	bcc.n	8000de4 <__udivsi3+0xf0>
 8000de0:	004b      	lsls	r3, r1, #1
 8000de2:	1ac0      	subs	r0, r0, r3
 8000de4:	4152      	adcs	r2, r2
 8000de6:	1a41      	subs	r1, r0, r1
 8000de8:	d200      	bcs.n	8000dec <__udivsi3+0xf8>
 8000dea:	4601      	mov	r1, r0
 8000dec:	4152      	adcs	r2, r2
 8000dee:	4610      	mov	r0, r2
 8000df0:	4770      	bx	lr
 8000df2:	e7ff      	b.n	8000df4 <__udivsi3+0x100>
 8000df4:	b501      	push	{r0, lr}
 8000df6:	2000      	movs	r0, #0
 8000df8:	f000 f806 	bl	8000e08 <__aeabi_idiv0>
 8000dfc:	bd02      	pop	{r1, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)

08000e00 <__aeabi_uidivmod>:
 8000e00:	2900      	cmp	r1, #0
 8000e02:	d0f7      	beq.n	8000df4 <__udivsi3+0x100>
 8000e04:	e776      	b.n	8000cf4 <__udivsi3>
 8000e06:	4770      	bx	lr

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	736e6553 	.word	0x736e6553
 8000e10:	4220726f 	.word	0x4220726f
 8000e14:	6c746f6f 	.word	0x6c746f6f
 8000e18:	6564616f 	.word	0x6564616f
 8000e1c:	74532072 	.word	0x74532072
 8000e20:	0a747261 	.word	0x0a747261
 8000e24:	00000000 	.word	0x00000000
 8000e28:	08000500 	.word	0x08000500
 8000e2c:	0800050e 	.word	0x0800050e
 8000e30:	0800050e 	.word	0x0800050e
 8000e34:	0800050e 	.word	0x0800050e
 8000e38:	0800050e 	.word	0x0800050e
 8000e3c:	0800050e 	.word	0x0800050e
 8000e40:	0800050e 	.word	0x0800050e
 8000e44:	0800050e 	.word	0x0800050e
 8000e48:	0800050e 	.word	0x0800050e
 8000e4c:	0800050e 	.word	0x0800050e
 8000e50:	0800050e 	.word	0x0800050e
 8000e54:	0800050e 	.word	0x0800050e
 8000e58:	0800050e 	.word	0x0800050e
 8000e5c:	0800050e 	.word	0x0800050e
 8000e60:	0800050e 	.word	0x0800050e
 8000e64:	0800050e 	.word	0x0800050e
 8000e68:	0800050e 	.word	0x0800050e
 8000e6c:	0800050e 	.word	0x0800050e
 8000e70:	0800050e 	.word	0x0800050e
 8000e74:	0800050e 	.word	0x0800050e
 8000e78:	0800050e 	.word	0x0800050e
 8000e7c:	0800050e 	.word	0x0800050e
 8000e80:	0800050e 	.word	0x0800050e
 8000e84:	0800050e 	.word	0x0800050e
 8000e88:	0800050e 	.word	0x0800050e
 8000e8c:	0800050e 	.word	0x0800050e
 8000e90:	0800050e 	.word	0x0800050e
 8000e94:	0800050e 	.word	0x0800050e
 8000e98:	0800050e 	.word	0x0800050e
 8000e9c:	0800050e 	.word	0x0800050e
 8000ea0:	0800050e 	.word	0x0800050e
 8000ea4:	0800050e 	.word	0x0800050e
 8000ea8:	0800050e 	.word	0x0800050e
 8000eac:	0800050e 	.word	0x0800050e
 8000eb0:	0800050e 	.word	0x0800050e
 8000eb4:	0800050e 	.word	0x0800050e
 8000eb8:	0800050e 	.word	0x0800050e
 8000ebc:	0800050e 	.word	0x0800050e
 8000ec0:	0800050e 	.word	0x0800050e
 8000ec4:	0800050e 	.word	0x0800050e
 8000ec8:	0800050e 	.word	0x0800050e
 8000ecc:	0800050e 	.word	0x0800050e
 8000ed0:	0800050e 	.word	0x0800050e
 8000ed4:	0800050e 	.word	0x0800050e
 8000ed8:	0800050e 	.word	0x0800050e
 8000edc:	0800050e 	.word	0x0800050e
 8000ee0:	0800050e 	.word	0x0800050e
 8000ee4:	0800050e 	.word	0x0800050e
 8000ee8:	0800050e 	.word	0x0800050e
 8000eec:	0800050e 	.word	0x0800050e
 8000ef0:	0800050e 	.word	0x0800050e
 8000ef4:	0800043a 	.word	0x0800043a
 8000ef8:	0800050e 	.word	0x0800050e
 8000efc:	0800050e 	.word	0x0800050e
 8000f00:	0800050e 	.word	0x0800050e
 8000f04:	0800050e 	.word	0x0800050e
 8000f08:	0800050e 	.word	0x0800050e
 8000f0c:	0800050e 	.word	0x0800050e
 8000f10:	0800050e 	.word	0x0800050e
 8000f14:	0800050e 	.word	0x0800050e
 8000f18:	0800050e 	.word	0x0800050e
 8000f1c:	0800043a 	.word	0x0800043a
 8000f20:	08000496 	.word	0x08000496
 8000f24:	0800043a 	.word	0x0800043a
 8000f28:	0800050e 	.word	0x0800050e
 8000f2c:	0800050e 	.word	0x0800050e
 8000f30:	0800050e 	.word	0x0800050e
 8000f34:	0800050e 	.word	0x0800050e
 8000f38:	0800043a 	.word	0x0800043a
 8000f3c:	0800050e 	.word	0x0800050e
 8000f40:	0800050e 	.word	0x0800050e
 8000f44:	0800050e 	.word	0x0800050e
 8000f48:	0800050e 	.word	0x0800050e
 8000f4c:	0800050e 	.word	0x0800050e
 8000f50:	0800043a 	.word	0x0800043a
 8000f54:	080004e0 	.word	0x080004e0
 8000f58:	0800050e 	.word	0x0800050e
 8000f5c:	0800050e 	.word	0x0800050e
 8000f60:	080004aa 	.word	0x080004aa
 8000f64:	0800050e 	.word	0x0800050e
 8000f68:	0800043a 	.word	0x0800043a
 8000f6c:	0800050e 	.word	0x0800050e
 8000f70:	0800050e 	.word	0x0800050e
 8000f74:	0800043a 	.word	0x0800043a
 8000f78:	204d4652 	.word	0x204d4652
 8000f7c:	20495053 	.word	0x20495053
 8000f80:	74697257 	.word	0x74697257
 8000f84:	00000065 	.word	0x00000065
 8000f88:	656d6954 	.word	0x656d6954
 8000f8c:	2074756f 	.word	0x2074756f
 8000f90:	25207325 	.word	0x25207325
 8000f94:	0a583830 	.word	0x0a583830
 8000f98:	00000000 	.word	0x00000000
 8000f9c:	20435452 	.word	0x20435452
 8000fa0:	0a525349 	.word	0x0a525349
 8000fa4:	00000000 	.word	0x00000000
