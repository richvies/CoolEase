
sensor/bin/sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f9c  08004000  08004000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .preinit_array 00000000  08004f9c  08004f9c  00001040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .init_array   00000000  08004f9c  08004f9c  00001040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000000  08004f9c  08004f9c  00001040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000010  20000000  08004f9c  00001030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000018c  20000010  08004fac  00001040  2**2
                  ALLOC
  6 ._user_heap_stack 00001004  2000019c  08004fac  00001040  2**0
                  ALLOC
  7 .ARM.attributes 0000002c  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000993a  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00002027  00000000  00000000  0000a9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000a40  00000000  00000000  0000c9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000a00  00000000  00000000  0000d40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00005abb  00000000  00000000  0000de0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   000086cc  00000000  00000000  000138c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0001bff5  00000000  00000000  0001bf94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      0000004c  00000000  00000000  00037f89  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000164c  00000000  00000000  00037fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    000027e1  00000000  00000000  00039624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004000 <vector_table>:
 8004000:	00 20 00 20 59 4c 00 08 55 4c 00 08 53 4c 00 08     . . YL..UL..SL..
	...
 800402c:	55 4c 00 08 00 00 00 00 00 00 00 00 55 4c 00 08     UL..........UL..
 800403c:	55 4c 00 08 53 4c 00 08 53 4c 00 08 11 48 00 08     UL..SL..SL...H..
 800404c:	53 4c 00 08 53 4c 00 08 53 4c 00 08 53 4c 00 08     SL..SL..SL..SL..
 800405c:	e9 45 00 08 53 4c 00 08 53 4c 00 08 53 4c 00 08     .E..SL..SL..SL..
 800406c:	53 4c 00 08 53 4c 00 08 53 4c 00 08 53 4c 00 08     SL..SL..SL..SL..
 800407c:	53 4c 00 08 53 4c 00 08 53 4c 00 08 53 4c 00 08     SL..SL..SL..SL..
 800408c:	53 4c 00 08 53 4c 00 08 53 4c 00 08 53 4c 00 08     SL..SL..SL..SL..
 800409c:	53 4c 00 08 53 4c 00 08 53 4c 00 08 53 4c 00 08     SL..SL..SL..SL..
 80040ac:	53 4c 00 08 53 4c 00 08 53 4c 00 08 53 4c 00 08     SL..SL..SL..SL..
 80040bc:	53 4c 00 08                                         SL..

080040c0 <main>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

int main(void)
{
 80040c0:	b510      	push	{r4, lr}
  	// test_cusb_poll();
  	// test_boot(APP_ADDRESS);
  	// gpio_init();
	log_init();
 80040c2:	f000 f8ab 	bl	800421c <log_init>
	// timers_tim6_init();

	// for(int i = 0; i < 100000; i++){__asm__("nop");};


	log_printf("Sensor Start\n");
 80040c6:	4802      	ldr	r0, [pc, #8]	; (80040d0 <main+0x10>)
 80040c8:	f000 f8be 	bl	8004248 <log_printf>
	// test_encryption();
	// test_timeout();
	// test_log();


	for (;;)
 80040cc:	e7fe      	b.n	80040cc <main+0xc>
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	08004e0c 	.word	0x08004e0c

080040d4 <clock_setup>:
// Static Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

//  Static Function Definitions
static void clock_setup(void) 
{
 80040d4:	b510      	push	{r4, lr}
	// Enable MSI Osc 2.097Mhz
	rcc_osc_on(RCC_MSI);
 80040d6:	2004      	movs	r0, #4
 80040d8:	f000 fc76 	bl	80049c8 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_MSI);
 80040dc:	2004      	movs	r0, #4
 80040de:	f000 fcc9 	bl	8004a74 <rcc_wait_for_osc_ready>

	// Set MSI to 2.097Mhz
	rcc_set_msi_range(5);
 80040e2:	2005      	movs	r0, #5
 80040e4:	f000 fcf0 	bl	8004ac8 <rcc_set_msi_range>

	// Set prescalers for AHB, APB1, APB2
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);				// AHB -> 2.097Mhz
 80040e8:	2000      	movs	r0, #0
 80040ea:	f000 fce3 	bl	8004ab4 <rcc_set_hpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);			// APB1 -> 2.097Mhz
 80040ee:	2000      	movs	r0, #0
 80040f0:	f000 fcc8 	bl	8004a84 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);			// APB2 -> 2.097Mhz
 80040f4:	2000      	movs	r0, #0
 80040f6:	f000 fcd1 	bl	8004a9c <rcc_set_ppre2>

	// Set flash, 2.097Mhz -> 0 waitstates
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 80040fa:	2000      	movs	r0, #0
 80040fc:	f000 fbb2 	bl	8004864 <flash_set_ws>

	// Set Peripheral Clock Frequencies used
	rcc_ahb_frequency = 2097000;
 8004100:	4b03      	ldr	r3, [pc, #12]	; (8004110 <clock_setup+0x3c>)
 8004102:	4a04      	ldr	r2, [pc, #16]	; (8004114 <clock_setup+0x40>)
 8004104:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 2097000;
 8004106:	4a04      	ldr	r2, [pc, #16]	; (8004118 <clock_setup+0x44>)
 8004108:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = 2097000;
 800410a:	4a04      	ldr	r2, [pc, #16]	; (800411c <clock_setup+0x48>)
 800410c:	6013      	str	r3, [r2, #0]
}
 800410e:	bd10      	pop	{r4, pc}
 8004110:	001fff68 	.word	0x001fff68
 8004114:	20000004 	.word	0x20000004
 8004118:	20000008 	.word	0x20000008
 800411c:	2000000c 	.word	0x2000000c

08004120 <usart_setup>:

static void usart_setup(void) 
{
 8004120:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_GPIOA);
 8004122:	20b0      	movs	r0, #176	; 0xb0
 8004124:	00c0      	lsls	r0, r0, #3
 8004126:	f000 fcdb 	bl	8004ae0 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOB);
 800412a:	4824      	ldr	r0, [pc, #144]	; (80041bc <usart_setup+0x9c>)
 800412c:	f000 fcd8 	bl	8004ae0 <rcc_periph_clock_enable>

	gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_TX);
 8004130:	24a0      	movs	r4, #160	; 0xa0
 8004132:	05e4      	lsls	r4, r4, #23
 8004134:	2304      	movs	r3, #4
 8004136:	2200      	movs	r2, #0
 8004138:	2102      	movs	r1, #2
 800413a:	0020      	movs	r0, r4
 800413c:	f000 fbb5 	bl	80048aa <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_RX);
 8004140:	2308      	movs	r3, #8
 8004142:	2200      	movs	r2, #0
 8004144:	2102      	movs	r1, #2
 8004146:	0020      	movs	r0, r4
 8004148:	f000 fbaf 	bl	80048aa <gpio_mode_setup>
    
    gpio_set_output_options(SPF_USART_TX_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, SPF_USART_TX);
 800414c:	2304      	movs	r3, #4
 800414e:	2200      	movs	r2, #0
 8004150:	2100      	movs	r1, #0
 8004152:	0020      	movs	r0, r4
 8004154:	f000 fbc9 	bl	80048ea <gpio_set_output_options>

    gpio_set_af(SPF_USART_TX_PORT, SPF_USART_AF, SPF_USART_TX);
 8004158:	2204      	movs	r2, #4
 800415a:	2104      	movs	r1, #4
 800415c:	0020      	movs	r0, r4
 800415e:	f000 fbe2 	bl	8004926 <gpio_set_af>
    gpio_set_af(SPF_USART_RX_PORT, SPF_USART_AF, SPF_USART_RX);
 8004162:	2208      	movs	r2, #8
 8004164:	2104      	movs	r1, #4
 8004166:	0020      	movs	r0, r4
 8004168:	f000 fbdd 	bl	8004926 <gpio_set_af>
    
	rcc_periph_clock_enable(SPF_USART_RCC);
 800416c:	4814      	ldr	r0, [pc, #80]	; (80041c0 <usart_setup+0xa0>)
 800416e:	f000 fcb7 	bl	8004ae0 <rcc_periph_clock_enable>
    rcc_periph_reset_pulse(SPF_USART_RCC_RST);
 8004172:	4814      	ldr	r0, [pc, #80]	; (80041c4 <usart_setup+0xa4>)
 8004174:	f000 fcc2 	bl	8004afc <rcc_periph_reset_pulse>
	usart_disable(SPF_USART);
 8004178:	4c13      	ldr	r4, [pc, #76]	; (80041c8 <usart_setup+0xa8>)
 800417a:	0020      	movs	r0, r4
 800417c:	f000 fd4b 	bl	8004c16 <usart_disable>
	usart_set_baudrate(SPF_USART, SPF_USART_BAUD);
 8004180:	21e1      	movs	r1, #225	; 0xe1
 8004182:	0249      	lsls	r1, r1, #9
 8004184:	0020      	movs	r0, r4
 8004186:	f000 fce9 	bl	8004b5c <usart_set_baudrate>
	usart_set_databits(SPF_USART, 8);
 800418a:	2108      	movs	r1, #8
 800418c:	0020      	movs	r0, r4
 800418e:	f000 fd11 	bl	8004bb4 <usart_set_databits>
	usart_set_stopbits(SPF_USART,USART_STOPBITS_1);
 8004192:	2100      	movs	r1, #0
 8004194:	0020      	movs	r0, r4
 8004196:	f000 fd1b 	bl	8004bd0 <usart_set_stopbits>
	usart_set_mode(SPF_USART, USART_MODE_TX_RX);
 800419a:	210c      	movs	r1, #12
 800419c:	0020      	movs	r0, r4
 800419e:	f000 fd27 	bl	8004bf0 <usart_set_mode>
	usart_set_parity(SPF_USART, USART_PARITY_NONE);
 80041a2:	2100      	movs	r1, #0
 80041a4:	0020      	movs	r0, r4
 80041a6:	f000 fd1b 	bl	8004be0 <usart_set_parity>
	usart_set_flow_control(SPF_USART, USART_FLOWCONTROL_NONE);
 80041aa:	2100      	movs	r1, #0
 80041ac:	0020      	movs	r0, r4
 80041ae:	f000 fd25 	bl	8004bfc <usart_set_flow_control>
	usart_enable(SPF_USART);
 80041b2:	0020      	movs	r0, r4
 80041b4:	f000 fd2a 	bl	8004c0c <usart_enable>
}
 80041b8:	bd10      	pop	{r4, pc}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	00000581 	.word	0x00000581
 80041c0:	00000711 	.word	0x00000711
 80041c4:	00000511 	.word	0x00000511
 80041c8:	40004400 	.word	0x40004400

080041cc <_putchar_mem>:
{
	usart_send_blocking(SPF_USART, character);		
}

static void _putchar_mem(char character)
{
 80041cc:	b510      	push	{r4, lr}
 80041ce:	0001      	movs	r1, r0
	mem_eeprom_write_byte(curr_address++, character);
 80041d0:	4c07      	ldr	r4, [pc, #28]	; (80041f0 <_putchar_mem+0x24>)
 80041d2:	6820      	ldr	r0, [r4, #0]
 80041d4:	1c43      	adds	r3, r0, #1
 80041d6:	6023      	str	r3, [r4, #0]
 80041d8:	f000 f854 	bl	8004284 <mem_eeprom_write_byte>
	
	if(curr_address == LOG_START + LOG_SIZE)
 80041dc:	6822      	ldr	r2, [r4, #0]
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <_putchar_mem+0x28>)
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d000      	beq.n	80041e6 <_putchar_mem+0x1a>
	{
		curr_address = LOG_START;
	}
}
 80041e4:	bd10      	pop	{r4, pc}
		curr_address = LOG_START;
 80041e6:	4b02      	ldr	r3, [pc, #8]	; (80041f0 <_putchar_mem+0x24>)
 80041e8:	4a03      	ldr	r2, [pc, #12]	; (80041f8 <_putchar_mem+0x2c>)
 80041ea:	601a      	str	r2, [r3, #0]
}
 80041ec:	e7fa      	b.n	80041e4 <_putchar_mem+0x18>
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	20000000 	.word	0x20000000
 80041f4:	08080800 	.word	0x08080800
 80041f8:	08080400 	.word	0x08080400

080041fc <_putchar_spf>:
{
 80041fc:	b510      	push	{r4, lr}
	usart_send_blocking(SPF_USART, character);		
 80041fe:	0001      	movs	r1, r0
 8004200:	4801      	ldr	r0, [pc, #4]	; (8004208 <_putchar_spf+0xc>)
 8004202:	f000 fd0d 	bl	8004c20 <usart_send_blocking>
}
 8004206:	bd10      	pop	{r4, pc}
 8004208:	40004400 	.word	0x40004400

0800420c <_putchar_main>:
{
 800420c:	b510      	push	{r4, lr}
 800420e:	0004      	movs	r4, r0
	_putchar_mem(character);
 8004210:	f7ff ffdc 	bl	80041cc <_putchar_mem>
	_putchar_spf(character);
 8004214:	0020      	movs	r0, r4
 8004216:	f7ff fff1 	bl	80041fc <_putchar_spf>
}
 800421a:	bd10      	pop	{r4, pc}

0800421c <log_init>:
{
 800421c:	b510      	push	{r4, lr}
	mem_init();
 800421e:	f000 f82b 	bl	8004278 <mem_init>
    curr_address = 0;
 8004222:	4b07      	ldr	r3, [pc, #28]	; (8004240 <log_init+0x24>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
    clock_setup();
 8004228:	f7ff ff54 	bl	80040d4 <clock_setup>
    usart_setup();
 800422c:	f7ff ff78 	bl	8004120 <usart_setup>
	for(int i = 0; i < 100000; i++){__asm__("nop");};
 8004230:	2300      	movs	r3, #0
 8004232:	4a04      	ldr	r2, [pc, #16]	; (8004244 <log_init+0x28>)
 8004234:	4293      	cmp	r3, r2
 8004236:	dc02      	bgt.n	800423e <log_init+0x22>
 8004238:	46c0      	nop			; (mov r8, r8)
 800423a:	3301      	adds	r3, #1
 800423c:	e7f9      	b.n	8004232 <log_init+0x16>
}
 800423e:	bd10      	pop	{r4, pc}
 8004240:	20000000 	.word	0x20000000
 8004244:	0001869f 	.word	0x0001869f

08004248 <log_printf>:
{
 8004248:	b40f      	push	{r0, r1, r2, r3}
 800424a:	b500      	push	{lr}
 800424c:	b083      	sub	sp, #12
 800424e:	aa04      	add	r2, sp, #16
 8004250:	ca02      	ldmia	r2!, {r1}
	va_start(va, format);
 8004252:	9201      	str	r2, [sp, #4]
	fnprintf(_putchar_main, format, va);
 8004254:	4806      	ldr	r0, [pc, #24]	; (8004270 <log_printf+0x28>)
 8004256:	f000 f8c5 	bl	80043e4 <fnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {}
 800425a:	2140      	movs	r1, #64	; 0x40
 800425c:	4805      	ldr	r0, [pc, #20]	; (8004274 <log_printf+0x2c>)
 800425e:	f000 fcf2 	bl	8004c46 <usart_get_flag>
 8004262:	2800      	cmp	r0, #0
 8004264:	d0f9      	beq.n	800425a <log_printf+0x12>
}
 8004266:	b003      	add	sp, #12
 8004268:	bc08      	pop	{r3}
 800426a:	b004      	add	sp, #16
 800426c:	4718      	bx	r3
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	0800420d 	.word	0x0800420d
 8004274:	40004400 	.word	0x40004400

08004278 <mem_init>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

void mem_init(void)
{
 8004278:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_MIF);
 800427a:	20c1      	movs	r0, #193	; 0xc1
 800427c:	00c0      	lsls	r0, r0, #3
 800427e:	f000 fc2f 	bl	8004ae0 <rcc_periph_clock_enable>
    // {
    //     // log_printf("%08x : %08x\n", next_reading_add, MMIO32(next_reading_add));
    //     msg_num++;
    //     next_reading_add += 4;
    // }
}
 8004282:	bd10      	pop	{r4, pc}

08004284 <mem_eeprom_write_byte>:

    return true;
}

bool mem_eeprom_write_byte(uint32_t address, uint8_t data)
{
 8004284:	b570      	push	{r4, r5, r6, lr}
 8004286:	0004      	movs	r4, r0
 8004288:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 800428a:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <mem_eeprom_write_byte+0x44>)
 800428c:	18c2      	adds	r2, r0, r3
 800428e:	2380      	movs	r3, #128	; 0x80
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	429a      	cmp	r2, r3
 8004294:	d301      	bcc.n	800429a <mem_eeprom_write_byte+0x16>
        return false;
 8004296:	2000      	movs	r0, #0
        FLASH_SR = FLASH_SR_EOP;

    flash_lock_pecr();

    return true;
}
 8004298:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock_pecr();
 800429a:	f000 faed 	bl	8004878 <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 800429e:	4a0b      	ldr	r2, [pc, #44]	; (80042cc <mem_eeprom_write_byte+0x48>)
 80042a0:	6813      	ldr	r3, [r2, #0]
 80042a2:	490b      	ldr	r1, [pc, #44]	; (80042d0 <mem_eeprom_write_byte+0x4c>)
 80042a4:	400b      	ands	r3, r1
 80042a6:	6013      	str	r3, [r2, #0]
    MMIO8(address) = data;
 80042a8:	7025      	strb	r5, [r4, #0]
    while (FLASH_SR & FLASH_SR_BSY);
 80042aa:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <mem_eeprom_write_byte+0x50>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	07db      	lsls	r3, r3, #31
 80042b0:	d4fb      	bmi.n	80042aa <mem_eeprom_write_byte+0x26>
    if (FLASH_SR & FLASH_SR_EOP)
 80042b2:	4b08      	ldr	r3, [pc, #32]	; (80042d4 <mem_eeprom_write_byte+0x50>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	079b      	lsls	r3, r3, #30
 80042b8:	d502      	bpl.n	80042c0 <mem_eeprom_write_byte+0x3c>
        FLASH_SR = FLASH_SR_EOP;
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <mem_eeprom_write_byte+0x50>)
 80042bc:	2202      	movs	r2, #2
 80042be:	601a      	str	r2, [r3, #0]
    flash_lock_pecr();
 80042c0:	f000 fae6 	bl	8004890 <flash_lock_pecr>
    return true;
 80042c4:	2001      	movs	r0, #1
 80042c6:	e7e7      	b.n	8004298 <mem_eeprom_write_byte+0x14>
 80042c8:	f7f80000 	.word	0xf7f80000
 80042cc:	40022004 	.word	0x40022004
 80042d0:	fffffeff 	.word	0xfffffeff
 80042d4:	40022018 	.word	0x40022018

080042d8 <_atoi>:
    return (ch >= '0') && (ch <= '9');
}

// internal ASCII string to uint32_t conversion
static uint32_t _atoi(const char **str)
{
 80042d8:	0001      	movs	r1, r0
    uint32_t i = 0U;
 80042da:	2000      	movs	r0, #0
    while (_is_digit(**str))
 80042dc:	680a      	ldr	r2, [r1, #0]
 80042de:	7813      	ldrb	r3, [r2, #0]
    return (ch >= '0') && (ch <= '9');
 80042e0:	3b30      	subs	r3, #48	; 0x30
 80042e2:	b2db      	uxtb	r3, r3
    while (_is_digit(**str))
 80042e4:	2b09      	cmp	r3, #9
 80042e6:	d808      	bhi.n	80042fa <_atoi+0x22>
    {
        i = i * 10U + (uint32_t)(*((*str)++) - '0');
 80042e8:	0083      	lsls	r3, r0, #2
 80042ea:	181b      	adds	r3, r3, r0
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	1c50      	adds	r0, r2, #1
 80042f0:	6008      	str	r0, [r1, #0]
 80042f2:	7810      	ldrb	r0, [r2, #0]
 80042f4:	18c0      	adds	r0, r0, r3
 80042f6:	3830      	subs	r0, #48	; 0x30
 80042f8:	e7f0      	b.n	80042dc <_atoi+0x4>
    }
    return i;
}
 80042fa:	4770      	bx	lr

080042fc <_ntoa_format>:

// internal itoa format
static uint32_t _ntoa_format(out_fct_type out, int32_t value, uint32_t base, uint32_t width, bool sign)
{
 80042fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042fe:	46de      	mov	lr, fp
 8004300:	4657      	mov	r7, sl
 8004302:	464e      	mov	r6, r9
 8004304:	4645      	mov	r5, r8
 8004306:	b5e0      	push	{r5, r6, r7, lr}
 8004308:	b089      	sub	sp, #36	; 0x24
 800430a:	4680      	mov	r8, r0
 800430c:	0008      	movs	r0, r1
 800430e:	0015      	movs	r5, r2
 8004310:	469b      	mov	fp, r3
 8004312:	ab12      	add	r3, sp, #72	; 0x48
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	4699      	mov	r9, r3
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    uint32_t len = 0;
    bool negative = false;

    // write if precision != 0 and value is != 0
    if (value)
 8004318:	2900      	cmp	r1, #0
 800431a:	d059      	beq.n	80043d0 <_ntoa_format+0xd4>
    {
        if(value < 0)
 800431c:	db03      	blt.n	8004326 <_ntoa_format+0x2a>
    bool negative = false;
 800431e:	2300      	movs	r3, #0
 8004320:	469a      	mov	sl, r3
 8004322:	2400      	movs	r4, #0
 8004324:	e011      	b.n	800434a <_ntoa_format+0x4e>
        {
            negative = true;
            value = 0 - value; 
 8004326:	4248      	negs	r0, r1
            negative = true;
 8004328:	2301      	movs	r3, #1
 800432a:	469a      	mov	sl, r3
 800432c:	e7f9      	b.n	8004322 <_ntoa_format+0x26>
        } 
        // Digits to char
        do
        {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 800432e:	3130      	adds	r1, #48	; 0x30
 8004330:	b2c9      	uxtb	r1, r1
 8004332:	1c67      	adds	r7, r4, #1
 8004334:	466b      	mov	r3, sp
 8004336:	5519      	strb	r1, [r3, r4]
            value /= base;
 8004338:	0029      	movs	r1, r5
 800433a:	0030      	movs	r0, r6
 800433c:	f000 fcda 	bl	8004cf4 <__udivsi3>
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004340:	2800      	cmp	r0, #0
 8004342:	d010      	beq.n	8004366 <_ntoa_format+0x6a>
 8004344:	2f1f      	cmp	r7, #31
 8004346:	d80e      	bhi.n	8004366 <_ntoa_format+0x6a>
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 8004348:	003c      	movs	r4, r7
            const char digit = (char)(value % base);
 800434a:	0006      	movs	r6, r0
 800434c:	0029      	movs	r1, r5
 800434e:	f000 fd57 	bl	8004e00 <__aeabi_uidivmod>
 8004352:	b2c9      	uxtb	r1, r1
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 8004354:	2909      	cmp	r1, #9
 8004356:	d9ea      	bls.n	800432e <_ntoa_format+0x32>
 8004358:	3137      	adds	r1, #55	; 0x37
 800435a:	b2c9      	uxtb	r1, r1
 800435c:	e7e9      	b.n	8004332 <_ntoa_format+0x36>

        // pad leading zeros
        while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
        {
            buf[len++] = '0';
 800435e:	2330      	movs	r3, #48	; 0x30
 8004360:	466a      	mov	r2, sp
 8004362:	55d3      	strb	r3, [r2, r7]
 8004364:	3701      	adds	r7, #1
        while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004366:	455f      	cmp	r7, fp
 8004368:	d201      	bcs.n	800436e <_ntoa_format+0x72>
 800436a:	2f1f      	cmp	r7, #31
 800436c:	d9f7      	bls.n	800435e <_ntoa_format+0x62>
        }

        // Base specifier
        if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 800436e:	2d10      	cmp	r5, #16
 8004370:	d019      	beq.n	80043a6 <_ntoa_format+0xaa>
        {
            buf[len++] = 'X';
        }
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004372:	2d02      	cmp	r5, #2
 8004374:	d01e      	beq.n	80043b4 <_ntoa_format+0xb8>
        {
            buf[len++] = 'b';
        }
        if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004376:	2d10      	cmp	r5, #16
 8004378:	d023      	beq.n	80043c2 <_ntoa_format+0xc6>
 800437a:	2d02      	cmp	r5, #2
 800437c:	d021      	beq.n	80043c2 <_ntoa_format+0xc6>
        {
            buf[len++] = '0';
        }

        // Negative sign
        if ( sign && negative && (len < PRINTF_NTOA_BUFFER_SIZE) )
 800437e:	464b      	mov	r3, r9
 8004380:	2b00      	cmp	r3, #0
 8004382:	d008      	beq.n	8004396 <_ntoa_format+0x9a>
 8004384:	4653      	mov	r3, sl
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <_ntoa_format+0x9a>
 800438a:	2f1f      	cmp	r7, #31
 800438c:	d803      	bhi.n	8004396 <_ntoa_format+0x9a>
        {
            buf[len++] = '-';
 800438e:	232d      	movs	r3, #45	; 0x2d
 8004390:	466a      	mov	r2, sp
 8004392:	55d3      	strb	r3, [r2, r7]
 8004394:	3701      	adds	r7, #1
        }

        // reverse string and write out
        uint32_t i = len;
 8004396:	003c      	movs	r4, r7
        while (i)
 8004398:	2c00      	cmp	r4, #0
 800439a:	d01a      	beq.n	80043d2 <_ntoa_format+0xd6>
        {
            out(buf[--i]);
 800439c:	3c01      	subs	r4, #1
 800439e:	466b      	mov	r3, sp
 80043a0:	5d18      	ldrb	r0, [r3, r4]
 80043a2:	47c0      	blx	r8
 80043a4:	e7f8      	b.n	8004398 <_ntoa_format+0x9c>
        if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80043a6:	2f1f      	cmp	r7, #31
 80043a8:	d8e3      	bhi.n	8004372 <_ntoa_format+0x76>
            buf[len++] = 'X';
 80043aa:	2358      	movs	r3, #88	; 0x58
 80043ac:	466a      	mov	r2, sp
 80043ae:	55d3      	strb	r3, [r2, r7]
 80043b0:	3701      	adds	r7, #1
 80043b2:	e7e0      	b.n	8004376 <_ntoa_format+0x7a>
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80043b4:	2f1f      	cmp	r7, #31
 80043b6:	d8de      	bhi.n	8004376 <_ntoa_format+0x7a>
            buf[len++] = 'b';
 80043b8:	2362      	movs	r3, #98	; 0x62
 80043ba:	466a      	mov	r2, sp
 80043bc:	55d3      	strb	r3, [r2, r7]
 80043be:	3701      	adds	r7, #1
 80043c0:	e7d9      	b.n	8004376 <_ntoa_format+0x7a>
        if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80043c2:	2f1f      	cmp	r7, #31
 80043c4:	d8db      	bhi.n	800437e <_ntoa_format+0x82>
            buf[len++] = '0';
 80043c6:	2330      	movs	r3, #48	; 0x30
 80043c8:	466a      	mov	r2, sp
 80043ca:	55d3      	strb	r3, [r2, r7]
 80043cc:	3701      	adds	r7, #1
 80043ce:	e7d6      	b.n	800437e <_ntoa_format+0x82>
    uint32_t len = 0;
 80043d0:	2700      	movs	r7, #0
        }
    }
    return len;
}
 80043d2:	0038      	movs	r0, r7
 80043d4:	b009      	add	sp, #36	; 0x24
 80043d6:	bcf0      	pop	{r4, r5, r6, r7}
 80043d8:	46bb      	mov	fp, r7
 80043da:	46b2      	mov	sl, r6
 80043dc:	46a9      	mov	r9, r5
 80043de:	46a0      	mov	r8, r4
 80043e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080043e4 <fnprintf>:

uint32_t fnprintf(out_fct_type out, const char *format, va_list va)
{
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	0005      	movs	r5, r0
 80043ea:	9103      	str	r1, [sp, #12]
 80043ec:	9202      	str	r2, [sp, #8]
    uint32_t width;
    uint32_t idx = 0U;
 80043ee:	2400      	movs	r4, #0

    while (*format)
 80043f0:	e004      	b.n	80043fc <fnprintf+0x18>
            format++;
        }
        else
        {
            // Just print char
            out(*format);
 80043f2:	47a8      	blx	r5
            idx++;
 80043f4:	3401      	adds	r4, #1
            format++;
 80043f6:	9b03      	ldr	r3, [sp, #12]
 80043f8:	3301      	adds	r3, #1
 80043fa:	9303      	str	r3, [sp, #12]
    while (*format)
 80043fc:	9b03      	ldr	r3, [sp, #12]
 80043fe:	7818      	ldrb	r0, [r3, #0]
 8004400:	2800      	cmp	r0, #0
 8004402:	d100      	bne.n	8004406 <fnprintf+0x22>
 8004404:	e089      	b.n	800451a <fnprintf+0x136>
        if (*format == '%')
 8004406:	2825      	cmp	r0, #37	; 0x25
 8004408:	d1f3      	bne.n	80043f2 <fnprintf+0xe>
            format++;
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	9203      	str	r2, [sp, #12]
            continue;
        }

        // evaluate width field
        width = 0U;
        if (_is_digit(*format))
 800440e:	785b      	ldrb	r3, [r3, #1]
    return (ch >= '0') && (ch <= '9');
 8004410:	3b30      	subs	r3, #48	; 0x30
 8004412:	b2db      	uxtb	r3, r3
        if (_is_digit(*format))
 8004414:	2b09      	cmp	r3, #9
 8004416:	d90b      	bls.n	8004430 <fnprintf+0x4c>
        width = 0U;
 8004418:	2300      	movs	r3, #0
        {
            width = _atoi(&format);
        }

        // evaluate specifier
        switch (*format)
 800441a:	9a03      	ldr	r2, [sp, #12]
 800441c:	7810      	ldrb	r0, [r2, #0]
 800441e:	0002      	movs	r2, r0
 8004420:	3a25      	subs	r2, #37	; 0x25
 8004422:	b2d1      	uxtb	r1, r2
 8004424:	2953      	cmp	r1, #83	; 0x53
 8004426:	d872      	bhi.n	800450e <fnprintf+0x12a>
 8004428:	008a      	lsls	r2, r1, #2
 800442a:	493d      	ldr	r1, [pc, #244]	; (8004520 <fnprintf+0x13c>)
 800442c:	588a      	ldr	r2, [r1, r2]
 800442e:	4697      	mov	pc, r2
            width = _atoi(&format);
 8004430:	a803      	add	r0, sp, #12
 8004432:	f7ff ff51 	bl	80042d8 <_atoi>
 8004436:	0003      	movs	r3, r0
 8004438:	e7ef      	b.n	800441a <fnprintf+0x36>
        case 'o':
        case 'b':
        {
            // set the base
            uint32_t base;
            if (*format == 'x' || *format == 'X')
 800443a:	2878      	cmp	r0, #120	; 0x78
 800443c:	d009      	beq.n	8004452 <fnprintf+0x6e>
 800443e:	2858      	cmp	r0, #88	; 0x58
 8004440:	d01a      	beq.n	8004478 <fnprintf+0x94>
            {
                base = 16U;
            }
            else if (*format == 'o')
 8004442:	286f      	cmp	r0, #111	; 0x6f
 8004444:	d01a      	beq.n	800447c <fnprintf+0x98>
            {
                base = 8U;
            }
            else if (*format == 'b')
 8004446:	2862      	cmp	r0, #98	; 0x62
 8004448:	d001      	beq.n	800444e <fnprintf+0x6a>
            {
                base = 2U;
            }
            else
            {
                base = 10U;
 800444a:	220a      	movs	r2, #10
 800444c:	e002      	b.n	8004454 <fnprintf+0x70>
                base = 2U;
 800444e:	2202      	movs	r2, #2
 8004450:	e000      	b.n	8004454 <fnprintf+0x70>
                base = 16U;
 8004452:	2210      	movs	r2, #16
            }

            // convert integer
            if ((*format == 'i') || (*format == 'd'))
 8004454:	2869      	cmp	r0, #105	; 0x69
 8004456:	d001      	beq.n	800445c <fnprintf+0x78>
 8004458:	2864      	cmp	r0, #100	; 0x64
 800445a:	d111      	bne.n	8004480 <fnprintf+0x9c>
            {
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, true);
 800445c:	9902      	ldr	r1, [sp, #8]
 800445e:	1d08      	adds	r0, r1, #4
 8004460:	9002      	str	r0, [sp, #8]
 8004462:	6809      	ldr	r1, [r1, #0]
 8004464:	2001      	movs	r0, #1
 8004466:	9000      	str	r0, [sp, #0]
 8004468:	0028      	movs	r0, r5
 800446a:	f7ff ff47 	bl	80042fc <_ntoa_format>
 800446e:	1824      	adds	r4, r4, r0
            }
            else
            {
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, false);
            }
            format++;
 8004470:	9b03      	ldr	r3, [sp, #12]
 8004472:	3301      	adds	r3, #1
 8004474:	9303      	str	r3, [sp, #12]
            break;
 8004476:	e7c1      	b.n	80043fc <fnprintf+0x18>
                base = 16U;
 8004478:	2210      	movs	r2, #16
 800447a:	e7eb      	b.n	8004454 <fnprintf+0x70>
                base = 8U;
 800447c:	2208      	movs	r2, #8
 800447e:	e7e9      	b.n	8004454 <fnprintf+0x70>
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, false);
 8004480:	9902      	ldr	r1, [sp, #8]
 8004482:	1d08      	adds	r0, r1, #4
 8004484:	9002      	str	r0, [sp, #8]
 8004486:	6809      	ldr	r1, [r1, #0]
 8004488:	2000      	movs	r0, #0
 800448a:	9000      	str	r0, [sp, #0]
 800448c:	0028      	movs	r0, r5
 800448e:	f7ff ff35 	bl	80042fc <_ntoa_format>
 8004492:	1824      	adds	r4, r4, r0
 8004494:	e7ec      	b.n	8004470 <fnprintf+0x8c>
        }

        case 'c':
        {
            out((char)va_arg(va, int));
 8004496:	9b02      	ldr	r3, [sp, #8]
 8004498:	1d1a      	adds	r2, r3, #4
 800449a:	9202      	str	r2, [sp, #8]
 800449c:	7818      	ldrb	r0, [r3, #0]
 800449e:	47a8      	blx	r5
            idx++;
 80044a0:	3401      	adds	r4, #1
            format++;
 80044a2:	9b03      	ldr	r3, [sp, #12]
 80044a4:	3301      	adds	r3, #1
 80044a6:	9303      	str	r3, [sp, #12]
            break;
 80044a8:	e7a8      	b.n	80043fc <fnprintf+0x18>
        }

        case 's':
        {
            const char *p = va_arg(va, char *);
 80044aa:	9b02      	ldr	r3, [sp, #8]
 80044ac:	1d1a      	adds	r2, r3, #4
 80044ae:	9202      	str	r2, [sp, #8]
 80044b0:	681e      	ldr	r6, [r3, #0]
    for (s = str; *s && maxsize--; ++s)
 80044b2:	0033      	movs	r3, r6
 80044b4:	2280      	movs	r2, #128	; 0x80
 80044b6:	00d2      	lsls	r2, r2, #3
 80044b8:	e001      	b.n	80044be <fnprintf+0xda>
 80044ba:	3301      	adds	r3, #1
 80044bc:	000a      	movs	r2, r1
 80044be:	7819      	ldrb	r1, [r3, #0]
 80044c0:	2900      	cmp	r1, #0
 80044c2:	d002      	beq.n	80044ca <fnprintf+0xe6>
 80044c4:	1e51      	subs	r1, r2, #1
 80044c6:	2a00      	cmp	r2, #0
 80044c8:	d1f7      	bne.n	80044ba <fnprintf+0xd6>
            uint32_t l = _strnlen_s(p, PRINTF_MAX_STR_LEN);

            // string output
            while (*p != 0)
 80044ca:	7830      	ldrb	r0, [r6, #0]
 80044cc:	2800      	cmp	r0, #0
 80044ce:	d003      	beq.n	80044d8 <fnprintf+0xf4>
            {
                out(*(p++));
 80044d0:	3601      	adds	r6, #1
 80044d2:	47a8      	blx	r5
                idx++;
 80044d4:	3401      	adds	r4, #1
 80044d6:	e7f8      	b.n	80044ca <fnprintf+0xe6>
            }
            format++;
 80044d8:	9b03      	ldr	r3, [sp, #12]
 80044da:	3301      	adds	r3, #1
 80044dc:	9303      	str	r3, [sp, #12]
            break;
 80044de:	e78d      	b.n	80043fc <fnprintf+0x18>
        }

        case 'p':
        {
            width = sizeof(void *) * 2U;
            idx += _ntoa_format(out, (int32_t)((uintptr_t)va_arg(va, void *)), 16U, width, false);
 80044e0:	9b02      	ldr	r3, [sp, #8]
 80044e2:	1d1a      	adds	r2, r3, #4
 80044e4:	9202      	str	r2, [sp, #8]
 80044e6:	6819      	ldr	r1, [r3, #0]
 80044e8:	2300      	movs	r3, #0
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	3308      	adds	r3, #8
 80044ee:	2210      	movs	r2, #16
 80044f0:	0028      	movs	r0, r5
 80044f2:	f7ff ff03 	bl	80042fc <_ntoa_format>
 80044f6:	1824      	adds	r4, r4, r0
            format++;
 80044f8:	9b03      	ldr	r3, [sp, #12]
 80044fa:	3301      	adds	r3, #1
 80044fc:	9303      	str	r3, [sp, #12]
            break;
 80044fe:	e77d      	b.n	80043fc <fnprintf+0x18>
        }

        case '%':
        {
            out('%');
 8004500:	2025      	movs	r0, #37	; 0x25
 8004502:	47a8      	blx	r5
            idx++;
 8004504:	3401      	adds	r4, #1
            format++;
 8004506:	9b03      	ldr	r3, [sp, #12]
 8004508:	3301      	adds	r3, #1
 800450a:	9303      	str	r3, [sp, #12]
            break;
 800450c:	e776      	b.n	80043fc <fnprintf+0x18>
        }

        default:
        {
            out(*format);
 800450e:	47a8      	blx	r5
            idx++;
 8004510:	3401      	adds	r4, #1
            format++;
 8004512:	9b03      	ldr	r3, [sp, #12]
 8004514:	3301      	adds	r3, #1
 8004516:	9303      	str	r3, [sp, #12]
            break;
 8004518:	e770      	b.n	80043fc <fnprintf+0x18>
        }
        }
    }
    // return written chars without terminating \0
    return idx;
}
 800451a:	0020      	movs	r0, r4
 800451c:	b004      	add	sp, #16
 800451e:	bd70      	pop	{r4, r5, r6, pc}
 8004520:	08004e1c 	.word	0x08004e1c

08004524 <spi_read_single>:
 * 
 * @param reg Register to read
 * @retval Value read from register
 */
static uint8_t spi_read_single(uint8_t reg)
{
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	0004      	movs	r4, r0
  spi_chip_select();
 8004528:	25a0      	movs	r5, #160	; 0xa0
 800452a:	05ed      	lsls	r5, r5, #23
 800452c:	2110      	movs	r1, #16
 800452e:	0028      	movs	r0, r5
 8004530:	f000 f9b8 	bl	80048a4 <gpio_clear>
  timers_delay_microseconds(1);
 8004534:	2001      	movs	r0, #1
 8004536:	f000 f89d 	bl	8004674 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, reg);                   
 800453a:	b2a1      	uxth	r1, r4
 800453c:	4c08      	ldr	r4, [pc, #32]	; (8004560 <spi_read_single+0x3c>)
 800453e:	0020      	movs	r0, r4
 8004540:	f000 fb04 	bl	8004b4c <spi_xfer>
  uint8_t in =  spi_xfer(RFM_SPI, 0x00);                   
 8004544:	2100      	movs	r1, #0
 8004546:	0020      	movs	r0, r4
 8004548:	f000 fb00 	bl	8004b4c <spi_xfer>
 800454c:	b2c4      	uxtb	r4, r0
    
  spi_chip_deselect(); 
 800454e:	2110      	movs	r1, #16
 8004550:	0028      	movs	r0, r5
 8004552:	f000 f9a5 	bl	80048a0 <gpio_set>
  timers_delay_microseconds(1);
 8004556:	2001      	movs	r0, #1
 8004558:	f000 f88c 	bl	8004674 <timers_delay_microseconds>

  return in;
}
 800455c:	0020      	movs	r0, r4
 800455e:	bd70      	pop	{r4, r5, r6, pc}
 8004560:	40013000 	.word	0x40013000

08004564 <spi_write_single>:
  spi_chip_deselect();     
  timers_delay_microseconds(1);
}

static void spi_write_single(uint8_t reg, uint8_t data)
{
 8004564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004566:	0005      	movs	r5, r0
 8004568:	000e      	movs	r6, r1
  // Set MSB for write operation
  uint8_t cmd = 0x80 | reg;
 800456a:	2480      	movs	r4, #128	; 0x80
 800456c:	4264      	negs	r4, r4
 800456e:	4304      	orrs	r4, r0
 8004570:	b2e4      	uxtb	r4, r4

  spi_chip_select();
 8004572:	27a0      	movs	r7, #160	; 0xa0
 8004574:	05ff      	lsls	r7, r7, #23
 8004576:	2110      	movs	r1, #16
 8004578:	0038      	movs	r0, r7
 800457a:	f000 f993 	bl	80048a4 <gpio_clear>
  timers_delay_microseconds(1);
 800457e:	2001      	movs	r0, #1
 8004580:	f000 f878 	bl	8004674 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, cmd);                 
 8004584:	b2a1      	uxth	r1, r4
 8004586:	4c15      	ldr	r4, [pc, #84]	; (80045dc <spi_write_single+0x78>)
 8004588:	0020      	movs	r0, r4
 800458a:	f000 fadf 	bl	8004b4c <spi_xfer>
  spi_xfer(RFM_SPI, data);             
 800458e:	b2b1      	uxth	r1, r6
 8004590:	0020      	movs	r0, r4
 8004592:	f000 fadb 	bl	8004b4c <spi_xfer>

  spi_chip_deselect(); 
 8004596:	2110      	movs	r1, #16
 8004598:	0038      	movs	r0, r7
 800459a:	f000 f981 	bl	80048a0 <gpio_set>
  timers_delay_microseconds(1);
 800459e:	2001      	movs	r0, #1
 80045a0:	f000 f868 	bl	8004674 <timers_delay_microseconds>

  uint8_t curr_data = spi_read_single(reg);
 80045a4:	0028      	movs	r0, r5
 80045a6:	f7ff ffbd 	bl	8004524 <spi_read_single>
 80045aa:	0004      	movs	r4, r0

  // log_printf("%02x : %02x\n", reg, data);

  if(reg == RFM_REG_12_IRQ_FLAGS)    
 80045ac:	2d12      	cmp	r5, #18
 80045ae:	d013      	beq.n	80045d8 <spi_write_single+0x74>
    return;

  TIMEOUT(10000, "RFM SPI Write", ((reg << 16) | data), (curr_data == data), ;, timers_delay_microseconds(100); curr_data = spi_read_single(reg););
 80045b0:	f000 f87e 	bl	80046b0 <timeout_init>
 80045b4:	042a      	lsls	r2, r5, #16
 80045b6:	4332      	orrs	r2, r6
 80045b8:	4909      	ldr	r1, [pc, #36]	; (80045e0 <spi_write_single+0x7c>)
 80045ba:	480a      	ldr	r0, [pc, #40]	; (80045e4 <spi_write_single+0x80>)
 80045bc:	f000 f886 	bl	80046cc <timeout>
 80045c0:	2800      	cmp	r0, #0
 80045c2:	d109      	bne.n	80045d8 <spi_write_single+0x74>
 80045c4:	42b4      	cmp	r4, r6
 80045c6:	d007      	beq.n	80045d8 <spi_write_single+0x74>
 80045c8:	2064      	movs	r0, #100	; 0x64
 80045ca:	f000 f853 	bl	8004674 <timers_delay_microseconds>
 80045ce:	0028      	movs	r0, r5
 80045d0:	f7ff ffa8 	bl	8004524 <spi_read_single>
 80045d4:	0004      	movs	r4, r0
 80045d6:	e7ed      	b.n	80045b4 <spi_write_single+0x50>

  // log_printf("%02x : %02x : %02x\n", reg, data, curr_data);
}
 80045d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	40013000 	.word	0x40013000
 80045e0:	08004f6c 	.word	0x08004f6c
 80045e4:	00002710 	.word	0x00002710

080045e8 <exti4_15_isr>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void exti4_15_isr(void)
{
 80045e8:	b570      	push	{r4, r5, r6, lr}
  uint16_t timer = timers_micros();
 80045ea:	f000 f859 	bl	80046a0 <timers_micros>
  
  exti_reset_request(RFM_IO_0_EXTI);
 80045ee:	2480      	movs	r4, #128	; 0x80
 80045f0:	0224      	lsls	r4, r4, #8
 80045f2:	0020      	movs	r0, r4
 80045f4:	f000 f930 	bl	8004858 <exti_reset_request>
  exti_reset_request(RFM_IO_0_EXTI);
 80045f8:	0020      	movs	r0, r4
 80045fa:	f000 f92d 	bl	8004858 <exti_reset_request>

  // Store IRQ Flags
  packets_buf[packets_head].flags = get_irq();
 80045fe:	4d1b      	ldr	r5, [pc, #108]	; (800466c <exti4_15_isr+0x84>)
 8004600:	782e      	ldrb	r6, [r5, #0]
  return spi_read_single(RFM_REG_12_IRQ_FLAGS);
 8004602:	2012      	movs	r0, #18
 8004604:	f7ff ff8e 	bl	8004524 <spi_read_single>
  packets_buf[packets_head].flags = get_irq();
 8004608:	4c19      	ldr	r4, [pc, #100]	; (8004670 <exti4_15_isr+0x88>)
 800460a:	0073      	lsls	r3, r6, #1
 800460c:	199b      	adds	r3, r3, r6
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	18e3      	adds	r3, r4, r3
 8004612:	7418      	strb	r0, [r3, #16]
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 8004614:	21ff      	movs	r1, #255	; 0xff
 8004616:	2012      	movs	r0, #18
 8004618:	f7ff ffa4 	bl	8004564 <spi_write_single>
 800461c:	21ff      	movs	r1, #255	; 0xff
 800461e:	2012      	movs	r0, #18
 8004620:	f7ff ffa0 	bl	8004564 <spi_write_single>
  clear_irq(RFM_IRQ_ALL);
  clear_irq(RFM_IRQ_ALL);

  // Get signal strength
  packets_buf[packets_head].rssi = spi_read_single(RFM_REG_1A_PKT_RSSI_VALUE);
 8004624:	201a      	movs	r0, #26
 8004626:	f7ff ff7d 	bl	8004524 <spi_read_single>
 800462a:	782a      	ldrb	r2, [r5, #0]
 800462c:	b200      	sxth	r0, r0
  packets_buf[packets_head].rssi -= 137;
 800462e:	0053      	lsls	r3, r2, #1
 8004630:	189b      	adds	r3, r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	18e3      	adds	r3, r4, r3
 8004636:	3889      	subs	r0, #137	; 0x89
 8004638:	8298      	strh	r0, [r3, #20]
  packets_buf[packets_head].snr = spi_read_single(RFM_REG_19_PKT_SNR_VALUE) / 4;
 800463a:	2019      	movs	r0, #25
 800463c:	f7ff ff72 	bl	8004524 <spi_read_single>
 8004640:	782b      	ldrb	r3, [r5, #0]
 8004642:	005a      	lsls	r2, r3, #1
 8004644:	18d2      	adds	r2, r2, r3
 8004646:	00d2      	lsls	r2, r2, #3
 8004648:	18a4      	adds	r4, r4, r2
 800464a:	0880      	lsrs	r0, r0, #2
 800464c:	74a0      	strb	r0, [r4, #18]

  // Check for CRC error
  packets_buf[packets_head].crc_ok = !(packets_buf[packets_head].flags & RFM_IRQ_PAYLOAD_CRC_ERROR);
 800464e:	7c22      	ldrb	r2, [r4, #16]
 8004650:	0952      	lsrs	r2, r2, #5
 8004652:	2101      	movs	r1, #1
 8004654:	404a      	eors	r2, r1
 8004656:	2101      	movs	r1, #1
 8004658:	400a      	ands	r2, r1
 800465a:	7462      	strb	r2, [r4, #17]

  packets_head = (packets_head + 1) % PACKETS_BUF_SIZE;
 800465c:	3301      	adds	r3, #1
 800465e:	220f      	movs	r2, #15
 8004660:	4013      	ands	r3, r2
 8004662:	702b      	strb	r3, [r5, #0]

  uint16_t time = timers_micros() - timer;
 8004664:	f000 f81c 	bl	80046a0 <timers_micros>
  // log_printf("ISR %u %u %u\n", time, packets_head, packets_tail);
}
 8004668:	bd70      	pop	{r4, r5, r6, pc}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	20000190 	.word	0x20000190
 8004670:	20000010 	.word	0x20000010

08004674 <timers_delay_microseconds>:
    lptimer_start_counter(LPTIM1, LPTIM_CR_CNTSTRT);
}

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_microseconds(uint32_t delay_microseconds)
{
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	0004      	movs	r4, r0
    uint32_t curr_time = lptimer_get_counter(LPTIM1);
 8004678:	4807      	ldr	r0, [pc, #28]	; (8004698 <timers_delay_microseconds+0x24>)
 800467a:	f000 f97e 	bl	800497a <lptimer_get_counter>
 800467e:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_microseconds > 65000)
 8004680:	4b06      	ldr	r3, [pc, #24]	; (800469c <timers_delay_microseconds+0x28>)
 8004682:	429c      	cmp	r4, r3
 8004684:	d900      	bls.n	8004688 <timers_delay_microseconds+0x14>
        delay_microseconds = 65000;
 8004686:	001c      	movs	r4, r3

    while (lptimer_get_counter(LPTIM1) - curr_time < delay_microseconds);
 8004688:	4803      	ldr	r0, [pc, #12]	; (8004698 <timers_delay_microseconds+0x24>)
 800468a:	f000 f976 	bl	800497a <lptimer_get_counter>
 800468e:	1b40      	subs	r0, r0, r5
 8004690:	42a0      	cmp	r0, r4
 8004692:	d3f9      	bcc.n	8004688 <timers_delay_microseconds+0x14>
}
 8004694:	bd70      	pop	{r4, r5, r6, pc}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	40007c00 	.word	0x40007c00
 800469c:	0000fde8 	.word	0x0000fde8

080046a0 <timers_micros>:
}
*/

// Returns value of microsecond counter
uint16_t timers_micros(void)
{
 80046a0:	b510      	push	{r4, lr}
    return (uint16_t)lptimer_get_counter(LPTIM1);
 80046a2:	4802      	ldr	r0, [pc, #8]	; (80046ac <timers_micros+0xc>)
 80046a4:	f000 f969 	bl	800497a <lptimer_get_counter>
}
 80046a8:	bd10      	pop	{r4, pc}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	40007c00 	.word	0x40007c00

080046b0 <timeout_init>:
}


// Timout functions
void timeout_init(void)
{
 80046b0:	b510      	push	{r4, lr}
    timeout_counter     = 0; 
 80046b2:	4b04      	ldr	r3, [pc, #16]	; (80046c4 <timeout_init+0x14>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
    // timeout_counter     = 2140483648; 
    timeout_timer       = timers_micros(); 
 80046b8:	f7ff fff2 	bl	80046a0 <timers_micros>
 80046bc:	4b02      	ldr	r3, [pc, #8]	; (80046c8 <timeout_init+0x18>)
 80046be:	8018      	strh	r0, [r3, #0]
}
 80046c0:	bd10      	pop	{r4, pc}
 80046c2:	46c0      	nop			; (mov r8, r8)
 80046c4:	20000194 	.word	0x20000194
 80046c8:	20000198 	.word	0x20000198

080046cc <timeout>:

bool timeout(uint32_t time_microseconds, char *msg, uint32_t data)
{
 80046cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ce:	b083      	sub	sp, #12
 80046d0:	0006      	movs	r6, r0
 80046d2:	9101      	str	r1, [sp, #4]
 80046d4:	0015      	movs	r5, r2
    timeout_counter    += (uint16_t)(timers_micros() - timeout_timer);
 80046d6:	f7ff ffe3 	bl	80046a0 <timers_micros>
 80046da:	4c0c      	ldr	r4, [pc, #48]	; (800470c <timeout+0x40>)
 80046dc:	8823      	ldrh	r3, [r4, #0]
 80046de:	1ac3      	subs	r3, r0, r3
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	4f0b      	ldr	r7, [pc, #44]	; (8004710 <timeout+0x44>)
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	4694      	mov	ip, r2
 80046e8:	4463      	add	r3, ip
 80046ea:	603b      	str	r3, [r7, #0]
    timeout_timer       = timers_micros();
 80046ec:	f7ff ffd8 	bl	80046a0 <timers_micros>
 80046f0:	8020      	strh	r0, [r4, #0]

    // log_printf("%u\n", timeout_counter);

    if(timeout_counter > time_microseconds)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	42b3      	cmp	r3, r6
 80046f6:	d802      	bhi.n	80046fe <timeout+0x32>
    {
        log_printf("Timeout %s %08X\n", msg, data);
        return true;
    }
    else    
        return false;
 80046f8:	2000      	movs	r0, #0
}
 80046fa:	b003      	add	sp, #12
 80046fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        log_printf("Timeout %s %08X\n", msg, data);
 80046fe:	002a      	movs	r2, r5
 8004700:	9901      	ldr	r1, [sp, #4]
 8004702:	4804      	ldr	r0, [pc, #16]	; (8004714 <timeout+0x48>)
 8004704:	f7ff fda0 	bl	8004248 <log_printf>
        return true;
 8004708:	2001      	movs	r0, #1
 800470a:	e7f6      	b.n	80046fa <timeout+0x2e>
 800470c:	20000198 	.word	0x20000198
 8004710:	20000194 	.word	0x20000194
 8004714:	08004f7c 	.word	0x08004f7c

08004718 <set_gpio_for_standby>:

void set_gpio_for_standby(void)
{   
 8004718:	b570      	push	{r4, r5, r6, lr}
    // Common
    // LED
    gpio_mode_setup(LED_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, LED);
 800471a:	2580      	movs	r5, #128	; 0x80
 800471c:	01ed      	lsls	r5, r5, #7
 800471e:	24a0      	movs	r4, #160	; 0xa0
 8004720:	05e4      	lsls	r4, r4, #23
 8004722:	002b      	movs	r3, r5
 8004724:	2200      	movs	r2, #0
 8004726:	2103      	movs	r1, #3
 8004728:	0020      	movs	r0, r4
 800472a:	f000 f8be 	bl	80048aa <gpio_mode_setup>
    gpio_set(LED_PORT, LED);
 800472e:	0029      	movs	r1, r5
 8004730:	0020      	movs	r0, r4
 8004732:	f000 f8b5 	bl	80048a0 <gpio_set>

    // Serial Print
    gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, SPF_USART_TX);
 8004736:	2304      	movs	r3, #4
 8004738:	2201      	movs	r2, #1
 800473a:	2100      	movs	r1, #0
 800473c:	0020      	movs	r0, r4
 800473e:	f000 f8b4 	bl	80048aa <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE,  SPF_USART_RX);
 8004742:	2308      	movs	r3, #8
 8004744:	2200      	movs	r2, #0
 8004746:	2101      	movs	r1, #1
 8004748:	0020      	movs	r0, r4
 800474a:	f000 f8ae 	bl	80048aa <gpio_mode_setup>
	gpio_set(SPF_USART_RX_PORT, SPF_USART_RX);
 800474e:	2108      	movs	r1, #8
 8004750:	0020      	movs	r0, r4
 8004752:	f000 f8a5 	bl	80048a0 <gpio_set>

    // Batt Sense
    gpio_mode_setup(BATT_SENS_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, BATT_SENS);
 8004756:	2301      	movs	r3, #1
 8004758:	2200      	movs	r2, #0
 800475a:	2103      	movs	r1, #3
 800475c:	0020      	movs	r0, r4
 800475e:	f000 f8a4 	bl	80048aa <gpio_mode_setup>
    
    // RFM
    // SPI
    gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_ANALOG,   GPIO_PUPD_NONE,       RFM_SPI_MISO);
 8004762:	2340      	movs	r3, #64	; 0x40
 8004764:	2200      	movs	r2, #0
 8004766:	2103      	movs	r1, #3
 8004768:	0020      	movs	r0, r4
 800476a:	f000 f89e 	bl	80048aa <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_SCK_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_SCK);
 800476e:	2320      	movs	r3, #32
 8004770:	2202      	movs	r2, #2
 8004772:	2100      	movs	r1, #0
 8004774:	0020      	movs	r0, r4
 8004776:	f000 f898 	bl	80048aa <gpio_mode_setup>
    gpio_mode_setup(RFM_SPI_MOSI_PORT,  GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_MOSI);
 800477a:	2380      	movs	r3, #128	; 0x80
 800477c:	2202      	movs	r2, #2
 800477e:	2100      	movs	r1, #0
 8004780:	0020      	movs	r0, r4
 8004782:	f000 f892 	bl	80048aa <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_NSS_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_SPI_NSS);
 8004786:	2310      	movs	r3, #16
 8004788:	2201      	movs	r2, #1
 800478a:	2100      	movs	r1, #0
 800478c:	0020      	movs	r0, r4
 800478e:	f000 f88c 	bl	80048aa <gpio_mode_setup>
    gpio_mode_setup(RFM_RESET_PORT,     GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_RESET);
 8004792:	4c1e      	ldr	r4, [pc, #120]	; (800480c <set_gpio_for_standby+0xf4>)
 8004794:	2301      	movs	r3, #1
 8004796:	2201      	movs	r2, #1
 8004798:	2100      	movs	r1, #0
 800479a:	0020      	movs	r0, r4
 800479c:	f000 f885 	bl	80048aa <gpio_mode_setup>

    // DIO
    gpio_mode_setup(RFM_IO_0_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_0);
 80047a0:	2380      	movs	r3, #128	; 0x80
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	2200      	movs	r2, #0
 80047a6:	2103      	movs	r1, #3
 80047a8:	0020      	movs	r0, r4
 80047aa:	f000 f87e 	bl	80048aa <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_1_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_1);
 80047ae:	2380      	movs	r3, #128	; 0x80
 80047b0:	015b      	lsls	r3, r3, #5
 80047b2:	2200      	movs	r2, #0
 80047b4:	2103      	movs	r1, #3
 80047b6:	0020      	movs	r0, r4
 80047b8:	f000 f877 	bl	80048aa <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_2_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_2);
 80047bc:	2380      	movs	r3, #128	; 0x80
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	2200      	movs	r2, #0
 80047c2:	2103      	movs	r1, #3
 80047c4:	0020      	movs	r0, r4
 80047c6:	f000 f870 	bl	80048aa <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_3_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_3);
 80047ca:	2304      	movs	r3, #4
 80047cc:	2200      	movs	r2, #0
 80047ce:	2103      	movs	r1, #3
 80047d0:	0020      	movs	r0, r4
 80047d2:	f000 f86a 	bl	80048aa <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_4_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_4);
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	2200      	movs	r2, #0
 80047dc:	2103      	movs	r1, #3
 80047de:	0020      	movs	r0, r4
 80047e0:	f000 f863 	bl	80048aa <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_5_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_5);
 80047e4:	2302      	movs	r3, #2
 80047e6:	2200      	movs	r2, #0
 80047e8:	2103      	movs	r1, #3
 80047ea:	0020      	movs	r0, r4
 80047ec:	f000 f85d 	bl	80048aa <gpio_mode_setup>

    #ifdef _HUB
    #else

    // TMP
    gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
 80047f0:	2380      	movs	r3, #128	; 0x80
 80047f2:	019b      	lsls	r3, r3, #6
 80047f4:	2201      	movs	r2, #1
 80047f6:	2100      	movs	r1, #0
 80047f8:	0020      	movs	r0, r4
 80047fa:	f000 f856 	bl	80048aa <gpio_mode_setup>
	gpio_mode_setup(TEMP_I2C_SDA_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SDA);
 80047fe:	002b      	movs	r3, r5
 8004800:	2201      	movs	r2, #1
 8004802:	2100      	movs	r1, #0
 8004804:	0020      	movs	r0, r4
 8004806:	f000 f850 	bl	80048aa <gpio_mode_setup>

    #endif

}
 800480a:	bd70      	pop	{r4, r5, r6, pc}
 800480c:	50000400 	.word	0x50000400

08004810 <rtc_isr>:

// Override default rtc interrupt handler
void rtc_isr(void)
{ 
 8004810:	b510      	push	{r4, lr}
    exti_reset_request(EXTI20);
 8004812:	2080      	movs	r0, #128	; 0x80
 8004814:	0340      	lsls	r0, r0, #13
 8004816:	f000 f81f 	bl	8004858 <exti_reset_request>

    // scb_reset_system();

    log_init();
 800481a:	f7ff fcff 	bl	800421c <log_init>
    log_printf("RTC ISR\n");
 800481e:	480c      	ldr	r0, [pc, #48]	; (8004850 <rtc_isr+0x40>)
 8004820:	f7ff fd12 	bl	8004248 <log_printf>

    if(RTC_ISR & RTC_ISR_WUTF)
 8004824:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <rtc_isr+0x44>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	055b      	lsls	r3, r3, #21
 800482a:	d400      	bmi.n	800482e <rtc_isr+0x1e>
        pwr_clear_standby_flag();
        rtc_lock();
	    pwr_enable_backup_domain_write_protect();
        set_gpio_for_standby();
    }
}
 800482c:	bd10      	pop	{r4, pc}
        pwr_disable_backup_domain_write_protect();
 800482e:	f000 f8a7 	bl	8004980 <pwr_disable_backup_domain_write_protect>
        rtc_unlock();
 8004832:	f000 f973 	bl	8004b1c <rtc_unlock>
	    rtc_clear_wakeup_flag();
 8004836:	f000 f97f 	bl	8004b38 <rtc_clear_wakeup_flag>
        pwr_clear_wakeup_flag();
 800483a:	f000 f8bd 	bl	80049b8 <pwr_clear_wakeup_flag>
        pwr_clear_standby_flag();
 800483e:	f000 f8b3 	bl	80049a8 <pwr_clear_standby_flag>
        rtc_lock();
 8004842:	f000 f973 	bl	8004b2c <rtc_lock>
	    pwr_enable_backup_domain_write_protect();
 8004846:	f000 f8a5 	bl	8004994 <pwr_enable_backup_domain_write_protect>
        set_gpio_for_standby();
 800484a:	f7ff ff65 	bl	8004718 <set_gpio_for_standby>
}
 800484e:	e7ed      	b.n	800482c <rtc_isr+0x1c>
 8004850:	08004f90 	.word	0x08004f90
 8004854:	4000280c 	.word	0x4000280c

08004858 <exti_reset_request>:
{
#if defined(EXTI_RPR1) && defined(EXTI_FPR1)
	EXTI_RPR1 = extis;
	EXTI_FPR1 = extis;
#else
	EXTI_PR = extis;
 8004858:	4b01      	ldr	r3, [pc, #4]	; (8004860 <exti_reset_request+0x8>)
 800485a:	6018      	str	r0, [r3, #0]
#endif
}
 800485c:	4770      	bx	lr
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	40010414 	.word	0x40010414

08004864 <flash_set_ws>:
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8004864:	2101      	movs	r1, #1
	reg32 = FLASH_ACR;
 8004866:	4a03      	ldr	r2, [pc, #12]	; (8004874 <flash_set_ws+0x10>)
 8004868:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 800486a:	438b      	bics	r3, r1
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 800486c:	4303      	orrs	r3, r0
	FLASH_ACR = reg32;
 800486e:	6013      	str	r3, [r2, #0]
}
 8004870:	4770      	bx	lr
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	40022000 	.word	0x40022000

08004878 <flash_unlock_pecr>:
 * yourself.
 * @sa flash_unlock
 */
void flash_unlock_pecr(void)
{
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY1;
 8004878:	4b02      	ldr	r3, [pc, #8]	; (8004884 <flash_unlock_pecr+0xc>)
 800487a:	4a03      	ldr	r2, [pc, #12]	; (8004888 <flash_unlock_pecr+0x10>)
 800487c:	601a      	str	r2, [r3, #0]
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY2;
 800487e:	4a03      	ldr	r2, [pc, #12]	; (800488c <flash_unlock_pecr+0x14>)
 8004880:	601a      	str	r2, [r3, #0]
}
 8004882:	4770      	bx	lr
 8004884:	4002200c 	.word	0x4002200c
 8004888:	89abcdef 	.word	0x89abcdef
 800488c:	02030405 	.word	0x02030405

08004890 <flash_lock_pecr>:

void flash_lock_pecr(void)
{
	FLASH_PECR |= FLASH_PECR_PELOCK;
 8004890:	2301      	movs	r3, #1
 8004892:	4a02      	ldr	r2, [pc, #8]	; (800489c <flash_lock_pecr+0xc>)
 8004894:	6811      	ldr	r1, [r2, #0]
 8004896:	430b      	orrs	r3, r1
 8004898:	6013      	str	r3, [r2, #0]
}
 800489a:	4770      	bx	lr
 800489c:	40022004 	.word	0x40022004

080048a0 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 80048a0:	6181      	str	r1, [r0, #24]
}
 80048a2:	4770      	bx	lr

080048a4 <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 80048a4:	0409      	lsls	r1, r1, #16
 80048a6:	6181      	str	r1, [r0, #24]
}
 80048a8:	4770      	bx	lr

080048aa <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 80048aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ac:	b085      	sub	sp, #20
 80048ae:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 80048b0:	2703      	movs	r7, #3
	pupd = GPIO_PUPDR(gpioport);
 80048b2:	2100      	movs	r1, #0
{
 80048b4:	9202      	str	r2, [sp, #8]
 80048b6:	9303      	str	r3, [sp, #12]
	moder = GPIO_MODER(gpioport);
 80048b8:	6802      	ldr	r2, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 80048ba:	68c3      	ldr	r3, [r0, #12]
		if (!((1 << i) & gpios)) {
 80048bc:	9c03      	ldr	r4, [sp, #12]
 80048be:	2501      	movs	r5, #1
 80048c0:	410c      	asrs	r4, r1
 80048c2:	422c      	tst	r4, r5
 80048c4:	d00a      	beq.n	80048dc <gpio_mode_setup+0x32>
		moder &= ~GPIO_MODE_MASK(i);
 80048c6:	003d      	movs	r5, r7
 80048c8:	004c      	lsls	r4, r1, #1
 80048ca:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 80048cc:	9e01      	ldr	r6, [sp, #4]
		moder &= ~GPIO_MODE_MASK(i);
 80048ce:	43aa      	bics	r2, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 80048d0:	43ab      	bics	r3, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 80048d2:	9d02      	ldr	r5, [sp, #8]
		moder |= GPIO_MODE(i, mode);
 80048d4:	40a6      	lsls	r6, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 80048d6:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 80048d8:	4332      	orrs	r2, r6
		pupd |= GPIO_PUPD(i, pull_up_down);
 80048da:	432b      	orrs	r3, r5
	for (i = 0; i < 16; i++) {
 80048dc:	3101      	adds	r1, #1
 80048de:	2910      	cmp	r1, #16
 80048e0:	d1ec      	bne.n	80048bc <gpio_mode_setup+0x12>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 80048e2:	6002      	str	r2, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 80048e4:	60c3      	str	r3, [r0, #12]
}
 80048e6:	b005      	add	sp, #20
 80048e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048ea <gpio_set_output_options>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_output_options(uint32_t gpioport, uint8_t otype, uint8_t speed,
			     uint16_t gpios)
{
 80048ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048ec:	9201      	str	r2, [sp, #4]
	uint16_t i;
	uint32_t ospeedr;

	if (otype == 0x1) {
 80048ee:	2901      	cmp	r1, #1
 80048f0:	d116      	bne.n	8004920 <gpio_set_output_options+0x36>
		GPIO_OTYPER(gpioport) |= gpios;
 80048f2:	6841      	ldr	r1, [r0, #4]
 80048f4:	4319      	orrs	r1, r3
	} else {
		GPIO_OTYPER(gpioport) &= ~gpios;
	}

	ospeedr = GPIO_OSPEEDR(gpioport);
 80048f6:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 80048f8:	2601      	movs	r6, #1
			continue;
		}
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 80048fa:	2703      	movs	r7, #3
		GPIO_OTYPER(gpioport) &= ~gpios;
 80048fc:	6041      	str	r1, [r0, #4]
	ospeedr = GPIO_OSPEEDR(gpioport);
 80048fe:	6881      	ldr	r1, [r0, #8]
		if (!((1 << i) & gpios)) {
 8004900:	001d      	movs	r5, r3
 8004902:	4125      	asrs	r5, r4
 8004904:	4235      	tst	r5, r6
 8004906:	d006      	beq.n	8004916 <gpio_set_output_options+0x2c>
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8004908:	003a      	movs	r2, r7
 800490a:	0065      	lsls	r5, r4, #1
 800490c:	40aa      	lsls	r2, r5
 800490e:	4391      	bics	r1, r2
		ospeedr |= GPIO_OSPEED(i, speed);
 8004910:	9a01      	ldr	r2, [sp, #4]
 8004912:	40aa      	lsls	r2, r5
 8004914:	4311      	orrs	r1, r2
	for (i = 0; i < 16; i++) {
 8004916:	3401      	adds	r4, #1
 8004918:	2c10      	cmp	r4, #16
 800491a:	d1f1      	bne.n	8004900 <gpio_set_output_options+0x16>
	}

	GPIO_OSPEEDR(gpioport) = ospeedr;
 800491c:	6081      	str	r1, [r0, #8]
}
 800491e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		GPIO_OTYPER(gpioport) &= ~gpios;
 8004920:	6841      	ldr	r1, [r0, #4]
 8004922:	4399      	bics	r1, r3
 8004924:	e7e7      	b.n	80048f6 <gpio_set_output_options+0xc>

08004926 <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 8004926:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);
 8004928:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 800492a:	2601      	movs	r6, #1
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 800492c:	270f      	movs	r7, #15
	afrl = GPIO_AFRL(gpioport);
 800492e:	6a04      	ldr	r4, [r0, #32]
{
 8004930:	9100      	str	r1, [sp, #0]
	afrh = GPIO_AFRH(gpioport);
 8004932:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8004934:	9201      	str	r2, [sp, #4]
		if (!((1 << i) & gpios)) {
 8004936:	9d01      	ldr	r5, [sp, #4]
 8004938:	411d      	asrs	r5, r3
 800493a:	4235      	tst	r5, r6
 800493c:	d006      	beq.n	800494c <gpio_set_af+0x26>
		afrl &= ~GPIO_AFR_MASK(i);
 800493e:	003a      	movs	r2, r7
 8004940:	009d      	lsls	r5, r3, #2
 8004942:	40aa      	lsls	r2, r5
 8004944:	4394      	bics	r4, r2
		afrl |= GPIO_AFR(i, alt_func_num);
 8004946:	9a00      	ldr	r2, [sp, #0]
 8004948:	40aa      	lsls	r2, r5
 800494a:	4314      	orrs	r4, r2
	for (i = 0; i < 8; i++) {
 800494c:	3301      	adds	r3, #1
 800494e:	2b08      	cmp	r3, #8
 8004950:	d1f1      	bne.n	8004936 <gpio_set_af+0x10>
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8004952:	2601      	movs	r6, #1
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8004954:	270f      	movs	r7, #15
		if (!((1 << i) & gpios)) {
 8004956:	9a01      	ldr	r2, [sp, #4]
 8004958:	411a      	asrs	r2, r3
 800495a:	4232      	tst	r2, r6
 800495c:	d007      	beq.n	800496e <gpio_set_af+0x48>
		afrh &= ~GPIO_AFR_MASK(i - 8);
 800495e:	003a      	movs	r2, r7
 8004960:	009d      	lsls	r5, r3, #2
 8004962:	3d20      	subs	r5, #32
 8004964:	40aa      	lsls	r2, r5
 8004966:	4391      	bics	r1, r2
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 8004968:	9a00      	ldr	r2, [sp, #0]
 800496a:	40aa      	lsls	r2, r5
 800496c:	4311      	orrs	r1, r2
	for (i = 8; i < 16; i++) {
 800496e:	3301      	adds	r3, #1
 8004970:	2b10      	cmp	r3, #16
 8004972:	d1f0      	bne.n	8004956 <gpio_set_af+0x30>
	}

	GPIO_AFRL(gpioport) = afrl;
 8004974:	6204      	str	r4, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 8004976:	6241      	str	r1, [r0, #36]	; 0x24
}
 8004978:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0800497a <lptimer_get_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @returns Counter value.
 */
uint16_t lptimer_get_counter(uint32_t lptimer_peripheral)
{
	return LPTIM_CNT(lptimer_peripheral);
 800497a:	69c0      	ldr	r0, [r0, #28]
 800497c:	b280      	uxth	r0, r0
}
 800497e:	4770      	bx	lr

08004980 <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 8004980:	2380      	movs	r3, #128	; 0x80
 8004982:	4a03      	ldr	r2, [pc, #12]	; (8004990 <pwr_disable_backup_domain_write_protect+0x10>)
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	6811      	ldr	r1, [r2, #0]
 8004988:	430b      	orrs	r3, r1
 800498a:	6013      	str	r3, [r2, #0]
}
 800498c:	4770      	bx	lr
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	40007000 	.word	0x40007000

08004994 <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 8004994:	4a02      	ldr	r2, [pc, #8]	; (80049a0 <pwr_enable_backup_domain_write_protect+0xc>)
 8004996:	4903      	ldr	r1, [pc, #12]	; (80049a4 <pwr_enable_backup_domain_write_protect+0x10>)
 8004998:	6813      	ldr	r3, [r2, #0]
 800499a:	400b      	ands	r3, r1
 800499c:	6013      	str	r3, [r2, #0]
}
 800499e:	4770      	bx	lr
 80049a0:	40007000 	.word	0x40007000
 80049a4:	fffffeff 	.word	0xfffffeff

080049a8 <pwr_clear_standby_flag>:
This is set when the processor returns from a standby mode.
*/

void pwr_clear_standby_flag(void)
{
	PWR_CR |= PWR_CR_CSBF;
 80049a8:	2308      	movs	r3, #8
 80049aa:	4a02      	ldr	r2, [pc, #8]	; (80049b4 <pwr_clear_standby_flag+0xc>)
 80049ac:	6811      	ldr	r1, [r2, #0]
 80049ae:	430b      	orrs	r3, r1
 80049b0:	6013      	str	r3, [r2, #0]
}
 80049b2:	4770      	bx	lr
 80049b4:	40007000 	.word	0x40007000

080049b8 <pwr_clear_wakeup_flag>:
This is set when the processor receives a wakeup signal.
*/

void pwr_clear_wakeup_flag(void)
{
	PWR_CR |= PWR_CR_CWUF;
 80049b8:	2304      	movs	r3, #4
 80049ba:	4a02      	ldr	r2, [pc, #8]	; (80049c4 <pwr_clear_wakeup_flag+0xc>)
 80049bc:	6811      	ldr	r1, [r2, #0]
 80049be:	430b      	orrs	r3, r1
 80049c0:	6013      	str	r3, [r2, #0]
}
 80049c2:	4770      	bx	lr
 80049c4:	40007000 	.word	0x40007000

080049c8 <rcc_osc_on>:
uint32_t rcc_ahb_frequency = 2097000;
uint32_t rcc_apb1_frequency = 2097000;
uint32_t rcc_apb2_frequency = 2097000;

void rcc_osc_on(enum rcc_osc osc)
{
 80049c8:	b500      	push	{lr}
 80049ca:	2806      	cmp	r0, #6
 80049cc:	d80b      	bhi.n	80049e6 <rcc_osc_on+0x1e>
 80049ce:	f000 f987 	bl	8004ce0 <__gnu_thumb1_case_uqi>
 80049d2:	1004      	.short	0x1004
 80049d4:	1b0b1915 	.word	0x1b0b1915
 80049d8:	1d          	.byte	0x1d
 80049d9:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 80049da:	2380      	movs	r3, #128	; 0x80
 80049dc:	4a0c      	ldr	r2, [pc, #48]	; (8004a10 <rcc_osc_on+0x48>)
 80049de:	045b      	lsls	r3, r3, #17
 80049e0:	6811      	ldr	r1, [r2, #0]
		break;
	case RCC_LSE:
		RCC_CSR |= RCC_CSR_LSEON;
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
 80049e2:	430b      	orrs	r3, r1
 80049e4:	6013      	str	r3, [r2, #0]
		break;
	}
}
 80049e6:	bd00      	pop	{pc}
		RCC_CR |= RCC_CR_MSION;
 80049e8:	4a09      	ldr	r2, [pc, #36]	; (8004a10 <rcc_osc_on+0x48>)
		RCC_CSR |= RCC_CSR_LSEON;
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	6811      	ldr	r1, [r2, #0]
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	e7f7      	b.n	80049e2 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSEON;
 80049f2:	2380      	movs	r3, #128	; 0x80
 80049f4:	4a06      	ldr	r2, [pc, #24]	; (8004a10 <rcc_osc_on+0x48>)
 80049f6:	025b      	lsls	r3, r3, #9
 80049f8:	6811      	ldr	r1, [r2, #0]
 80049fa:	e7f2      	b.n	80049e2 <rcc_osc_on+0x1a>
		RCC_CRRCR |= RCC_CRRCR_HSI48ON;
 80049fc:	4a05      	ldr	r2, [pc, #20]	; (8004a14 <rcc_osc_on+0x4c>)
		RCC_CSR |= RCC_CSR_LSION;
 80049fe:	2301      	movs	r3, #1
 8004a00:	6811      	ldr	r1, [r2, #0]
 8004a02:	e7ee      	b.n	80049e2 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSI16ON;
 8004a04:	4a02      	ldr	r2, [pc, #8]	; (8004a10 <rcc_osc_on+0x48>)
 8004a06:	e7fa      	b.n	80049fe <rcc_osc_on+0x36>
		RCC_CSR |= RCC_CSR_LSEON;
 8004a08:	4a03      	ldr	r2, [pc, #12]	; (8004a18 <rcc_osc_on+0x50>)
 8004a0a:	e7ee      	b.n	80049ea <rcc_osc_on+0x22>
		RCC_CSR |= RCC_CSR_LSION;
 8004a0c:	4a02      	ldr	r2, [pc, #8]	; (8004a18 <rcc_osc_on+0x50>)
 8004a0e:	e7f6      	b.n	80049fe <rcc_osc_on+0x36>
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40021008 	.word	0x40021008
 8004a18:	40021050 	.word	0x40021050

08004a1c <rcc_is_osc_ready>:
	cm3_assert_not_reached();
}


bool rcc_is_osc_ready(enum rcc_osc osc)
{
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	b500      	push	{lr}
 8004a20:	2806      	cmp	r0, #6
 8004a22:	d80a      	bhi.n	8004a3a <rcc_is_osc_ready+0x1e>
 8004a24:	3301      	adds	r3, #1
 8004a26:	f000 f95b 	bl	8004ce0 <__gnu_thumb1_case_uqi>
 8004a2a:	0a04      	.short	0x0a04
 8004a2c:	1a160e12 	.word	0x1a160e12
 8004a30:	1c          	.byte	0x1c
 8004a31:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 8004a32:	4a0d      	ldr	r2, [pc, #52]	; (8004a68 <rcc_is_osc_ready+0x4c>)
 8004a34:	6810      	ldr	r0, [r2, #0]
 8004a36:	0e40      	lsrs	r0, r0, #25
	case RCC_MSI:
		return RCC_CR & RCC_CR_MSIRDY;
	case RCC_LSE:
		return RCC_CSR & RCC_CSR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 8004a38:	4003      	ands	r3, r0
	}
	return false;
}
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	bd00      	pop	{pc}
		return RCC_CR & RCC_CR_HSERDY;
 8004a3e:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <rcc_is_osc_ready+0x4c>)
 8004a40:	6810      	ldr	r0, [r2, #0]
 8004a42:	0c40      	lsrs	r0, r0, #17
 8004a44:	e7f8      	b.n	8004a38 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_HSI16RDY;
 8004a46:	4a08      	ldr	r2, [pc, #32]	; (8004a68 <rcc_is_osc_ready+0x4c>)
 8004a48:	6810      	ldr	r0, [r2, #0]
 8004a4a:	0880      	lsrs	r0, r0, #2
 8004a4c:	e7f4      	b.n	8004a38 <rcc_is_osc_ready+0x1c>
		return RCC_CRRCR & RCC_CRRCR_HSI48RDY;
 8004a4e:	4a07      	ldr	r2, [pc, #28]	; (8004a6c <rcc_is_osc_ready+0x50>)
		return RCC_CSR & RCC_CSR_LSIRDY;
 8004a50:	6810      	ldr	r0, [r2, #0]
 8004a52:	0840      	lsrs	r0, r0, #1
 8004a54:	e7f0      	b.n	8004a38 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_MSIRDY;
 8004a56:	4a04      	ldr	r2, [pc, #16]	; (8004a68 <rcc_is_osc_ready+0x4c>)
		return RCC_CSR & RCC_CSR_LSERDY;
 8004a58:	6810      	ldr	r0, [r2, #0]
 8004a5a:	0a40      	lsrs	r0, r0, #9
 8004a5c:	e7ec      	b.n	8004a38 <rcc_is_osc_ready+0x1c>
 8004a5e:	4a04      	ldr	r2, [pc, #16]	; (8004a70 <rcc_is_osc_ready+0x54>)
 8004a60:	e7fa      	b.n	8004a58 <rcc_is_osc_ready+0x3c>
		return RCC_CSR & RCC_CSR_LSIRDY;
 8004a62:	4a03      	ldr	r2, [pc, #12]	; (8004a70 <rcc_is_osc_ready+0x54>)
 8004a64:	e7f4      	b.n	8004a50 <rcc_is_osc_ready+0x34>
 8004a66:	46c0      	nop			; (mov r8, r8)
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	40021008 	.word	0x40021008
 8004a70:	40021050 	.word	0x40021050

08004a74 <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 8004a74:	b510      	push	{r4, lr}
 8004a76:	0004      	movs	r4, r0
	while (!rcc_is_osc_ready(osc));
 8004a78:	0020      	movs	r0, r4
 8004a7a:	f7ff ffcf 	bl	8004a1c <rcc_is_osc_ready>
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	d0fa      	beq.n	8004a78 <rcc_wait_for_osc_ready+0x4>
}
 8004a82:	bd10      	pop	{r4, pc}

08004a84 <rcc_set_ppre1>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb1pre
 */

void rcc_set_ppre1(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8004a84:	4a03      	ldr	r2, [pc, #12]	; (8004a94 <rcc_set_ppre1+0x10>)
 8004a86:	4904      	ldr	r1, [pc, #16]	; (8004a98 <rcc_set_ppre1+0x14>)
 8004a88:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE1_MASK << RCC_CFGR_PPRE1_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8004a8a:	0200      	lsls	r0, r0, #8
	uint32_t reg = RCC_CFGR
 8004a8c:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8004a8e:	4318      	orrs	r0, r3
 8004a90:	6010      	str	r0, [r2, #0]
}
 8004a92:	4770      	bx	lr
 8004a94:	4002100c 	.word	0x4002100c
 8004a98:	fffff8ff 	.word	0xfffff8ff

08004a9c <rcc_set_ppre2>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb2pre
 */

void rcc_set_ppre2(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8004a9c:	4a03      	ldr	r2, [pc, #12]	; (8004aac <rcc_set_ppre2+0x10>)
 8004a9e:	4904      	ldr	r1, [pc, #16]	; (8004ab0 <rcc_set_ppre2+0x14>)
 8004aa0:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE2_MASK << RCC_CFGR_PPRE2_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8004aa2:	02c0      	lsls	r0, r0, #11
	uint32_t reg = RCC_CFGR
 8004aa4:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8004aa6:	4318      	orrs	r0, r3
 8004aa8:	6010      	str	r0, [r2, #0]
}
 8004aaa:	4770      	bx	lr
 8004aac:	4002100c 	.word	0x4002100c
 8004ab0:	ffffc7ff 	.word	0xffffc7ff

08004ab4 <rcc_set_hpre>:
 * @param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
 */

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8004ab4:	21f0      	movs	r1, #240	; 0xf0
 8004ab6:	4a03      	ldr	r2, [pc, #12]	; (8004ac4 <rcc_set_hpre+0x10>)
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8004ab8:	0100      	lsls	r0, r0, #4
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8004aba:	6813      	ldr	r3, [r2, #0]
 8004abc:	438b      	bics	r3, r1
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8004abe:	4318      	orrs	r0, r3
 8004ac0:	6010      	str	r0, [r2, #0]
}
 8004ac2:	4770      	bx	lr
 8004ac4:	4002100c 	.word	0x4002100c

08004ac8 <rcc_set_msi_range>:
*
 * @param msi_range desired range @ref rcc_icscr_msirange
 */
void rcc_set_msi_range(uint32_t msi_range)
{
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8004ac8:	4a03      	ldr	r2, [pc, #12]	; (8004ad8 <rcc_set_msi_range+0x10>)
 8004aca:	4904      	ldr	r1, [pc, #16]	; (8004adc <rcc_set_msi_range+0x14>)
 8004acc:	6813      	ldr	r3, [r2, #0]
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8004ace:	0340      	lsls	r0, r0, #13
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8004ad0:	400b      	ands	r3, r1
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8004ad2:	4318      	orrs	r0, r3
 8004ad4:	6010      	str	r0, [r2, #0]
}
 8004ad6:	4770      	bx	lr
 8004ad8:	40021004 	.word	0x40021004
 8004adc:	ffff1fff 	.word	0xffff1fff

08004ae0 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <rcc_periph_clock_enable+0x18>)
 8004ae2:	0942      	lsrs	r2, r0, #5
 8004ae4:	18d2      	adds	r2, r2, r3
 8004ae6:	231f      	movs	r3, #31
 8004ae8:	4018      	ands	r0, r3
 8004aea:	3b1e      	subs	r3, #30
 8004aec:	4083      	lsls	r3, r0
 8004aee:	6811      	ldr	r1, [r2, #0]
 8004af0:	430b      	orrs	r3, r1
 8004af2:	6013      	str	r3, [r2, #0]
}
 8004af4:	4770      	bx	lr
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	40021000 	.word	0x40021000

08004afc <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8004afc:	4a06      	ldr	r2, [pc, #24]	; (8004b18 <rcc_periph_reset_pulse+0x1c>)
 8004afe:	0943      	lsrs	r3, r0, #5
 8004b00:	189b      	adds	r3, r3, r2
 8004b02:	221f      	movs	r2, #31
 8004b04:	4010      	ands	r0, r2
 8004b06:	3a1e      	subs	r2, #30
 8004b08:	4082      	lsls	r2, r0
 8004b0a:	6819      	ldr	r1, [r3, #0]
 8004b0c:	4311      	orrs	r1, r2
 8004b0e:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 8004b10:	6819      	ldr	r1, [r3, #0]
 8004b12:	4391      	bics	r1, r2
 8004b14:	6019      	str	r1, [r3, #0]
}
 8004b16:	4770      	bx	lr
 8004b18:	40021000 	.word	0x40021000

08004b1c <rtc_unlock>:
/** @brief Unlock write access to the RTC registers

*/
void rtc_unlock(void)
{
	RTC_WPR = 0xca;
 8004b1c:	22ca      	movs	r2, #202	; 0xca
 8004b1e:	4b02      	ldr	r3, [pc, #8]	; (8004b28 <rtc_unlock+0xc>)
 8004b20:	601a      	str	r2, [r3, #0]
	RTC_WPR = 0x53;
 8004b22:	3a77      	subs	r2, #119	; 0x77
 8004b24:	601a      	str	r2, [r3, #0]
}
 8004b26:	4770      	bx	lr
 8004b28:	40002824 	.word	0x40002824

08004b2c <rtc_lock>:
/** @brief Lock write access to the RTC registers

*/
void rtc_lock(void)
{
	RTC_WPR = 0xff;
 8004b2c:	22ff      	movs	r2, #255	; 0xff
 8004b2e:	4b01      	ldr	r3, [pc, #4]	; (8004b34 <rtc_lock+0x8>)
 8004b30:	601a      	str	r2, [r3, #0]
}
 8004b32:	4770      	bx	lr
 8004b34:	40002824 	.word	0x40002824

08004b38 <rtc_clear_wakeup_flag>:

@details This function should be called first in the rtc_wkup_isr()
*/
void rtc_clear_wakeup_flag(void)
{
	RTC_ISR &= ~RTC_ISR_WUTF;
 8004b38:	4a02      	ldr	r2, [pc, #8]	; (8004b44 <rtc_clear_wakeup_flag+0xc>)
 8004b3a:	4903      	ldr	r1, [pc, #12]	; (8004b48 <rtc_clear_wakeup_flag+0x10>)
 8004b3c:	6813      	ldr	r3, [r2, #0]
 8004b3e:	400b      	ands	r3, r1
 8004b40:	6013      	str	r3, [r2, #0]
}
 8004b42:	4770      	bx	lr
 8004b44:	4000280c 	.word	0x4000280c
 8004b48:	fffffbff 	.word	0xfffffbff

08004b4c <spi_xfer>:
uint16_t spi_xfer(uint32_t spi, uint16_t data)
{
	spi_write(spi, data);

	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8004b4c:	2301      	movs	r3, #1
	SPI_DR(spi) = data;
 8004b4e:	60c1      	str	r1, [r0, #12]
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8004b50:	6882      	ldr	r2, [r0, #8]
 8004b52:	421a      	tst	r2, r3
 8004b54:	d0fc      	beq.n	8004b50 <spi_xfer+0x4>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 8004b56:	68c0      	ldr	r0, [r0, #12]
 8004b58:	b280      	uxth	r0, r0
}
 8004b5a:	4770      	bx	lr

08004b5c <usart_set_baudrate>:
void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;

#if defined USART1
	if ((usart == USART1)
 8004b5c:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <usart_set_baudrate+0x44>)
{
 8004b5e:	b570      	push	{r4, r5, r6, lr}
 8004b60:	0005      	movs	r5, r0
 8004b62:	000c      	movs	r4, r1
 8004b64:	084e      	lsrs	r6, r1, #1
	if ((usart == USART1)
 8004b66:	4298      	cmp	r0, r3
 8004b68:	d107      	bne.n	8004b7a <usart_set_baudrate+0x1e>
#if defined USART6
		|| (usart == USART6)
#endif
		) {
		clock = rcc_apb2_frequency;
 8004b6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ba4 <usart_set_baudrate+0x48>)
 8004b6c:	6818      	ldr	r0, [r3, #0]
			+ ((clock % baud) * 256 + baud / 2) / baud;
		return;
	}
#endif

	USART_BRR(usart) = (clock + baud / 2) / baud;
 8004b6e:	0021      	movs	r1, r4
 8004b70:	1830      	adds	r0, r6, r0
 8004b72:	f000 f8bf 	bl	8004cf4 <__udivsi3>
 8004b76:	60e8      	str	r0, [r5, #12]
 8004b78:	e010      	b.n	8004b9c <usart_set_baudrate+0x40>
	uint32_t clock = rcc_apb1_frequency;
 8004b7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <usart_set_baudrate+0x4c>)
 8004b7c:	6818      	ldr	r0, [r3, #0]
	if (usart == LPUART1) {
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <usart_set_baudrate+0x50>)
 8004b80:	429d      	cmp	r5, r3
 8004b82:	d1f4      	bne.n	8004b6e <usart_set_baudrate+0x12>
		USART_BRR(usart) = (clock / baud) * 256
 8004b84:	f000 f93c 	bl	8004e00 <__aeabi_uidivmod>
 8004b88:	0005      	movs	r5, r0
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8004b8a:	0208      	lsls	r0, r1, #8
 8004b8c:	1980      	adds	r0, r0, r6
 8004b8e:	0021      	movs	r1, r4
 8004b90:	f000 f8b0 	bl	8004cf4 <__udivsi3>
		USART_BRR(usart) = (clock / baud) * 256
 8004b94:	022d      	lsls	r5, r5, #8
 8004b96:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <usart_set_baudrate+0x54>)
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8004b98:	1940      	adds	r0, r0, r5
		USART_BRR(usart) = (clock / baud) * 256
 8004b9a:	6018      	str	r0, [r3, #0]
}
 8004b9c:	bd70      	pop	{r4, r5, r6, pc}
 8004b9e:	46c0      	nop			; (mov r8, r8)
 8004ba0:	40013800 	.word	0x40013800
 8004ba4:	2000000c 	.word	0x2000000c
 8004ba8:	20000008 	.word	0x20000008
 8004bac:	40004800 	.word	0x40004800
 8004bb0:	4000480c 	.word	0x4000480c

08004bb4 <usart_set_databits>:
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
 8004bb4:	2908      	cmp	r1, #8
 8004bb6:	d104      	bne.n	8004bc2 <usart_set_databits+0xe>
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 8004bb8:	6803      	ldr	r3, [r0, #0]
 8004bba:	4a04      	ldr	r2, [pc, #16]	; (8004bcc <usart_set_databits+0x18>)
 8004bbc:	4013      	ands	r3, r2
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8004bbe:	6003      	str	r3, [r0, #0]
	}
}
 8004bc0:	4770      	bx	lr
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	6802      	ldr	r2, [r0, #0]
 8004bc6:	015b      	lsls	r3, r3, #5
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	e7f8      	b.n	8004bbe <usart_set_databits+0xa>
 8004bcc:	ffffefff 	.word	0xffffefff

08004bd0 <usart_set_stopbits>:

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 8004bd0:	6843      	ldr	r3, [r0, #4]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 8004bd2:	4a02      	ldr	r2, [pc, #8]	; (8004bdc <usart_set_stopbits+0xc>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 8004bd8:	6043      	str	r3, [r0, #4]
}
 8004bda:	4770      	bx	lr
 8004bdc:	ffffcfff 	.word	0xffffcfff

08004be0 <usart_set_parity>:

void usart_set_parity(uint32_t usart, uint32_t parity)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 8004be0:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 8004be2:	4a02      	ldr	r2, [pc, #8]	; (8004bec <usart_set_parity+0xc>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8004be8:	6003      	str	r3, [r0, #0]
}
 8004bea:	4770      	bx	lr
 8004bec:	fffff9ff 	.word	0xfffff9ff

08004bf0 <usart_set_mode>:
void usart_set_mode(uint32_t usart, uint32_t mode)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8004bf0:	220c      	movs	r2, #12
	reg32 = USART_CR1(usart);
 8004bf2:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8004bf4:	4393      	bics	r3, r2
 8004bf6:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8004bf8:	6003      	str	r3, [r0, #0]
}
 8004bfa:	4770      	bx	lr

08004bfc <usart_set_flow_control>:

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 8004bfc:	6883      	ldr	r3, [r0, #8]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 8004bfe:	4a02      	ldr	r2, [pc, #8]	; (8004c08 <usart_set_flow_control+0xc>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 8004c04:	6083      	str	r3, [r0, #8]
}
 8004c06:	4770      	bx	lr
 8004c08:	fffffcff 	.word	0xfffffcff

08004c0c <usart_enable>:
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	6802      	ldr	r2, [r0, #0]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	6003      	str	r3, [r0, #0]
}
 8004c14:	4770      	bx	lr

08004c16 <usart_disable>:
usart_reg_base
*/

void usart_disable(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_UE;
 8004c16:	2201      	movs	r2, #1
 8004c18:	6803      	ldr	r3, [r0, #0]
 8004c1a:	4393      	bics	r3, r2
 8004c1c:	6003      	str	r3, [r0, #0]
}
 8004c1e:	4770      	bx	lr

08004c20 <usart_send_blocking>:
usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(uint32_t usart, uint16_t data)
{
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	000d      	movs	r5, r1
 8004c24:	0004      	movs	r4, r0
	usart_wait_send_ready(usart);
 8004c26:	f000 f809 	bl	8004c3c <usart_wait_send_ready>
	usart_send(usart, data);
 8004c2a:	0029      	movs	r1, r5
 8004c2c:	0020      	movs	r0, r4
 8004c2e:	f000 f801 	bl	8004c34 <usart_send>
}
 8004c32:	bd70      	pop	{r4, r5, r6, pc}

08004c34 <usart_send>:
 */

void usart_send(uint32_t usart, uint16_t data)
{
	/* Send data. */
	USART_TDR(usart) = (data & USART_TDR_MASK);
 8004c34:	05c9      	lsls	r1, r1, #23
 8004c36:	0dc9      	lsrs	r1, r1, #23
 8004c38:	6281      	str	r1, [r0, #40]	; 0x28
}
 8004c3a:	4770      	bx	lr

08004c3c <usart_wait_send_ready>:
 */

void usart_wait_send_ready(uint32_t usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_ISR(usart) & USART_ISR_TXE) == 0);
 8004c3c:	2380      	movs	r3, #128	; 0x80
 8004c3e:	69c2      	ldr	r2, [r0, #28]
 8004c40:	421a      	tst	r2, r3
 8004c42:	d0fc      	beq.n	8004c3e <usart_wait_send_ready+0x2>
}
 8004c44:	4770      	bx	lr

08004c46 <usart_get_flag>:
 * @returns boolean: flag set.
 */

bool usart_get_flag(uint32_t usart, uint32_t flag)
{
	return ((USART_ISR(usart) & flag) != 0);
 8004c46:	69c0      	ldr	r0, [r0, #28]
 8004c48:	4008      	ands	r0, r1
 8004c4a:	1e41      	subs	r1, r0, #1
 8004c4c:	4188      	sbcs	r0, r1
 8004c4e:	b2c0      	uxtb	r0, r0
}
 8004c50:	4770      	bx	lr

08004c52 <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 8004c52:	e7fe      	b.n	8004c52 <blocking_handler>

08004c54 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 8004c54:	4770      	bx	lr
	...

08004c58 <reset_handler>:
{
 8004c58:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 8004c5a:	4b16      	ldr	r3, [pc, #88]	; (8004cb4 <reset_handler+0x5c>)
 8004c5c:	4a16      	ldr	r2, [pc, #88]	; (8004cb8 <reset_handler+0x60>)
 8004c5e:	4917      	ldr	r1, [pc, #92]	; (8004cbc <reset_handler+0x64>)
 8004c60:	428b      	cmp	r3, r1
 8004c62:	d318      	bcc.n	8004c96 <reset_handler+0x3e>
		*dest++ = 0;
 8004c64:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 8004c66:	4a16      	ldr	r2, [pc, #88]	; (8004cc0 <reset_handler+0x68>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d317      	bcc.n	8004c9c <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	4a15      	ldr	r2, [pc, #84]	; (8004cc4 <reset_handler+0x6c>)
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8004c74:	4c14      	ldr	r4, [pc, #80]	; (8004cc8 <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 8004c76:	430b      	orrs	r3, r1
 8004c78:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8004c7a:	4b14      	ldr	r3, [pc, #80]	; (8004ccc <reset_handler+0x74>)
 8004c7c:	429c      	cmp	r4, r3
 8004c7e:	d30f      	bcc.n	8004ca0 <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8004c80:	4c13      	ldr	r4, [pc, #76]	; (8004cd0 <reset_handler+0x78>)
 8004c82:	4b14      	ldr	r3, [pc, #80]	; (8004cd4 <reset_handler+0x7c>)
 8004c84:	429c      	cmp	r4, r3
 8004c86:	d30e      	bcc.n	8004ca6 <reset_handler+0x4e>
	(void)main();
 8004c88:	f7ff fa1a 	bl	80040c0 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8004c8c:	4c12      	ldr	r4, [pc, #72]	; (8004cd8 <reset_handler+0x80>)
 8004c8e:	4b13      	ldr	r3, [pc, #76]	; (8004cdc <reset_handler+0x84>)
 8004c90:	429c      	cmp	r4, r3
 8004c92:	d30b      	bcc.n	8004cac <reset_handler+0x54>
}
 8004c94:	bd10      	pop	{r4, pc}
		*dest = *src;
 8004c96:	ca01      	ldmia	r2!, {r0}
 8004c98:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 8004c9a:	e7e1      	b.n	8004c60 <reset_handler+0x8>
		*dest++ = 0;
 8004c9c:	c302      	stmia	r3!, {r1}
 8004c9e:	e7e3      	b.n	8004c68 <reset_handler+0x10>
		(*fp)();
 8004ca0:	cc08      	ldmia	r4!, {r3}
 8004ca2:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8004ca4:	e7e9      	b.n	8004c7a <reset_handler+0x22>
		(*fp)();
 8004ca6:	cc08      	ldmia	r4!, {r3}
 8004ca8:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8004caa:	e7ea      	b.n	8004c82 <reset_handler+0x2a>
		(*fp)();
 8004cac:	cc08      	ldmia	r4!, {r3}
 8004cae:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8004cb0:	e7ed      	b.n	8004c8e <reset_handler+0x36>
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	20000000 	.word	0x20000000
 8004cb8:	08004f9c 	.word	0x08004f9c
 8004cbc:	20000010 	.word	0x20000010
 8004cc0:	2000019c 	.word	0x2000019c
 8004cc4:	e000ed14 	.word	0xe000ed14
 8004cc8:	08004f9c 	.word	0x08004f9c
 8004ccc:	08004f9c 	.word	0x08004f9c
 8004cd0:	08004f9c 	.word	0x08004f9c
 8004cd4:	08004f9c 	.word	0x08004f9c
 8004cd8:	08004f9c 	.word	0x08004f9c
 8004cdc:	08004f9c 	.word	0x08004f9c

08004ce0 <__gnu_thumb1_case_uqi>:
 8004ce0:	b402      	push	{r1}
 8004ce2:	4671      	mov	r1, lr
 8004ce4:	0849      	lsrs	r1, r1, #1
 8004ce6:	0049      	lsls	r1, r1, #1
 8004ce8:	5c09      	ldrb	r1, [r1, r0]
 8004cea:	0049      	lsls	r1, r1, #1
 8004cec:	448e      	add	lr, r1
 8004cee:	bc02      	pop	{r1}
 8004cf0:	4770      	bx	lr
 8004cf2:	46c0      	nop			; (mov r8, r8)

08004cf4 <__udivsi3>:
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	0843      	lsrs	r3, r0, #1
 8004cf8:	428b      	cmp	r3, r1
 8004cfa:	d374      	bcc.n	8004de6 <__udivsi3+0xf2>
 8004cfc:	0903      	lsrs	r3, r0, #4
 8004cfe:	428b      	cmp	r3, r1
 8004d00:	d35f      	bcc.n	8004dc2 <__udivsi3+0xce>
 8004d02:	0a03      	lsrs	r3, r0, #8
 8004d04:	428b      	cmp	r3, r1
 8004d06:	d344      	bcc.n	8004d92 <__udivsi3+0x9e>
 8004d08:	0b03      	lsrs	r3, r0, #12
 8004d0a:	428b      	cmp	r3, r1
 8004d0c:	d328      	bcc.n	8004d60 <__udivsi3+0x6c>
 8004d0e:	0c03      	lsrs	r3, r0, #16
 8004d10:	428b      	cmp	r3, r1
 8004d12:	d30d      	bcc.n	8004d30 <__udivsi3+0x3c>
 8004d14:	22ff      	movs	r2, #255	; 0xff
 8004d16:	0209      	lsls	r1, r1, #8
 8004d18:	ba12      	rev	r2, r2
 8004d1a:	0c03      	lsrs	r3, r0, #16
 8004d1c:	428b      	cmp	r3, r1
 8004d1e:	d302      	bcc.n	8004d26 <__udivsi3+0x32>
 8004d20:	1212      	asrs	r2, r2, #8
 8004d22:	0209      	lsls	r1, r1, #8
 8004d24:	d065      	beq.n	8004df2 <__udivsi3+0xfe>
 8004d26:	0b03      	lsrs	r3, r0, #12
 8004d28:	428b      	cmp	r3, r1
 8004d2a:	d319      	bcc.n	8004d60 <__udivsi3+0x6c>
 8004d2c:	e000      	b.n	8004d30 <__udivsi3+0x3c>
 8004d2e:	0a09      	lsrs	r1, r1, #8
 8004d30:	0bc3      	lsrs	r3, r0, #15
 8004d32:	428b      	cmp	r3, r1
 8004d34:	d301      	bcc.n	8004d3a <__udivsi3+0x46>
 8004d36:	03cb      	lsls	r3, r1, #15
 8004d38:	1ac0      	subs	r0, r0, r3
 8004d3a:	4152      	adcs	r2, r2
 8004d3c:	0b83      	lsrs	r3, r0, #14
 8004d3e:	428b      	cmp	r3, r1
 8004d40:	d301      	bcc.n	8004d46 <__udivsi3+0x52>
 8004d42:	038b      	lsls	r3, r1, #14
 8004d44:	1ac0      	subs	r0, r0, r3
 8004d46:	4152      	adcs	r2, r2
 8004d48:	0b43      	lsrs	r3, r0, #13
 8004d4a:	428b      	cmp	r3, r1
 8004d4c:	d301      	bcc.n	8004d52 <__udivsi3+0x5e>
 8004d4e:	034b      	lsls	r3, r1, #13
 8004d50:	1ac0      	subs	r0, r0, r3
 8004d52:	4152      	adcs	r2, r2
 8004d54:	0b03      	lsrs	r3, r0, #12
 8004d56:	428b      	cmp	r3, r1
 8004d58:	d301      	bcc.n	8004d5e <__udivsi3+0x6a>
 8004d5a:	030b      	lsls	r3, r1, #12
 8004d5c:	1ac0      	subs	r0, r0, r3
 8004d5e:	4152      	adcs	r2, r2
 8004d60:	0ac3      	lsrs	r3, r0, #11
 8004d62:	428b      	cmp	r3, r1
 8004d64:	d301      	bcc.n	8004d6a <__udivsi3+0x76>
 8004d66:	02cb      	lsls	r3, r1, #11
 8004d68:	1ac0      	subs	r0, r0, r3
 8004d6a:	4152      	adcs	r2, r2
 8004d6c:	0a83      	lsrs	r3, r0, #10
 8004d6e:	428b      	cmp	r3, r1
 8004d70:	d301      	bcc.n	8004d76 <__udivsi3+0x82>
 8004d72:	028b      	lsls	r3, r1, #10
 8004d74:	1ac0      	subs	r0, r0, r3
 8004d76:	4152      	adcs	r2, r2
 8004d78:	0a43      	lsrs	r3, r0, #9
 8004d7a:	428b      	cmp	r3, r1
 8004d7c:	d301      	bcc.n	8004d82 <__udivsi3+0x8e>
 8004d7e:	024b      	lsls	r3, r1, #9
 8004d80:	1ac0      	subs	r0, r0, r3
 8004d82:	4152      	adcs	r2, r2
 8004d84:	0a03      	lsrs	r3, r0, #8
 8004d86:	428b      	cmp	r3, r1
 8004d88:	d301      	bcc.n	8004d8e <__udivsi3+0x9a>
 8004d8a:	020b      	lsls	r3, r1, #8
 8004d8c:	1ac0      	subs	r0, r0, r3
 8004d8e:	4152      	adcs	r2, r2
 8004d90:	d2cd      	bcs.n	8004d2e <__udivsi3+0x3a>
 8004d92:	09c3      	lsrs	r3, r0, #7
 8004d94:	428b      	cmp	r3, r1
 8004d96:	d301      	bcc.n	8004d9c <__udivsi3+0xa8>
 8004d98:	01cb      	lsls	r3, r1, #7
 8004d9a:	1ac0      	subs	r0, r0, r3
 8004d9c:	4152      	adcs	r2, r2
 8004d9e:	0983      	lsrs	r3, r0, #6
 8004da0:	428b      	cmp	r3, r1
 8004da2:	d301      	bcc.n	8004da8 <__udivsi3+0xb4>
 8004da4:	018b      	lsls	r3, r1, #6
 8004da6:	1ac0      	subs	r0, r0, r3
 8004da8:	4152      	adcs	r2, r2
 8004daa:	0943      	lsrs	r3, r0, #5
 8004dac:	428b      	cmp	r3, r1
 8004dae:	d301      	bcc.n	8004db4 <__udivsi3+0xc0>
 8004db0:	014b      	lsls	r3, r1, #5
 8004db2:	1ac0      	subs	r0, r0, r3
 8004db4:	4152      	adcs	r2, r2
 8004db6:	0903      	lsrs	r3, r0, #4
 8004db8:	428b      	cmp	r3, r1
 8004dba:	d301      	bcc.n	8004dc0 <__udivsi3+0xcc>
 8004dbc:	010b      	lsls	r3, r1, #4
 8004dbe:	1ac0      	subs	r0, r0, r3
 8004dc0:	4152      	adcs	r2, r2
 8004dc2:	08c3      	lsrs	r3, r0, #3
 8004dc4:	428b      	cmp	r3, r1
 8004dc6:	d301      	bcc.n	8004dcc <__udivsi3+0xd8>
 8004dc8:	00cb      	lsls	r3, r1, #3
 8004dca:	1ac0      	subs	r0, r0, r3
 8004dcc:	4152      	adcs	r2, r2
 8004dce:	0883      	lsrs	r3, r0, #2
 8004dd0:	428b      	cmp	r3, r1
 8004dd2:	d301      	bcc.n	8004dd8 <__udivsi3+0xe4>
 8004dd4:	008b      	lsls	r3, r1, #2
 8004dd6:	1ac0      	subs	r0, r0, r3
 8004dd8:	4152      	adcs	r2, r2
 8004dda:	0843      	lsrs	r3, r0, #1
 8004ddc:	428b      	cmp	r3, r1
 8004dde:	d301      	bcc.n	8004de4 <__udivsi3+0xf0>
 8004de0:	004b      	lsls	r3, r1, #1
 8004de2:	1ac0      	subs	r0, r0, r3
 8004de4:	4152      	adcs	r2, r2
 8004de6:	1a41      	subs	r1, r0, r1
 8004de8:	d200      	bcs.n	8004dec <__udivsi3+0xf8>
 8004dea:	4601      	mov	r1, r0
 8004dec:	4152      	adcs	r2, r2
 8004dee:	4610      	mov	r0, r2
 8004df0:	4770      	bx	lr
 8004df2:	e7ff      	b.n	8004df4 <__udivsi3+0x100>
 8004df4:	b501      	push	{r0, lr}
 8004df6:	2000      	movs	r0, #0
 8004df8:	f000 f806 	bl	8004e08 <__aeabi_idiv0>
 8004dfc:	bd02      	pop	{r1, pc}
 8004dfe:	46c0      	nop			; (mov r8, r8)

08004e00 <__aeabi_uidivmod>:
 8004e00:	2900      	cmp	r1, #0
 8004e02:	d0f7      	beq.n	8004df4 <__udivsi3+0x100>
 8004e04:	e776      	b.n	8004cf4 <__udivsi3>
 8004e06:	4770      	bx	lr

08004e08 <__aeabi_idiv0>:
 8004e08:	4770      	bx	lr
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	736e6553 	.word	0x736e6553
 8004e10:	5320726f 	.word	0x5320726f
 8004e14:	74726174 	.word	0x74726174
 8004e18:	0000000a 	.word	0x0000000a
 8004e1c:	08004500 	.word	0x08004500
 8004e20:	0800450e 	.word	0x0800450e
 8004e24:	0800450e 	.word	0x0800450e
 8004e28:	0800450e 	.word	0x0800450e
 8004e2c:	0800450e 	.word	0x0800450e
 8004e30:	0800450e 	.word	0x0800450e
 8004e34:	0800450e 	.word	0x0800450e
 8004e38:	0800450e 	.word	0x0800450e
 8004e3c:	0800450e 	.word	0x0800450e
 8004e40:	0800450e 	.word	0x0800450e
 8004e44:	0800450e 	.word	0x0800450e
 8004e48:	0800450e 	.word	0x0800450e
 8004e4c:	0800450e 	.word	0x0800450e
 8004e50:	0800450e 	.word	0x0800450e
 8004e54:	0800450e 	.word	0x0800450e
 8004e58:	0800450e 	.word	0x0800450e
 8004e5c:	0800450e 	.word	0x0800450e
 8004e60:	0800450e 	.word	0x0800450e
 8004e64:	0800450e 	.word	0x0800450e
 8004e68:	0800450e 	.word	0x0800450e
 8004e6c:	0800450e 	.word	0x0800450e
 8004e70:	0800450e 	.word	0x0800450e
 8004e74:	0800450e 	.word	0x0800450e
 8004e78:	0800450e 	.word	0x0800450e
 8004e7c:	0800450e 	.word	0x0800450e
 8004e80:	0800450e 	.word	0x0800450e
 8004e84:	0800450e 	.word	0x0800450e
 8004e88:	0800450e 	.word	0x0800450e
 8004e8c:	0800450e 	.word	0x0800450e
 8004e90:	0800450e 	.word	0x0800450e
 8004e94:	0800450e 	.word	0x0800450e
 8004e98:	0800450e 	.word	0x0800450e
 8004e9c:	0800450e 	.word	0x0800450e
 8004ea0:	0800450e 	.word	0x0800450e
 8004ea4:	0800450e 	.word	0x0800450e
 8004ea8:	0800450e 	.word	0x0800450e
 8004eac:	0800450e 	.word	0x0800450e
 8004eb0:	0800450e 	.word	0x0800450e
 8004eb4:	0800450e 	.word	0x0800450e
 8004eb8:	0800450e 	.word	0x0800450e
 8004ebc:	0800450e 	.word	0x0800450e
 8004ec0:	0800450e 	.word	0x0800450e
 8004ec4:	0800450e 	.word	0x0800450e
 8004ec8:	0800450e 	.word	0x0800450e
 8004ecc:	0800450e 	.word	0x0800450e
 8004ed0:	0800450e 	.word	0x0800450e
 8004ed4:	0800450e 	.word	0x0800450e
 8004ed8:	0800450e 	.word	0x0800450e
 8004edc:	0800450e 	.word	0x0800450e
 8004ee0:	0800450e 	.word	0x0800450e
 8004ee4:	0800450e 	.word	0x0800450e
 8004ee8:	0800443a 	.word	0x0800443a
 8004eec:	0800450e 	.word	0x0800450e
 8004ef0:	0800450e 	.word	0x0800450e
 8004ef4:	0800450e 	.word	0x0800450e
 8004ef8:	0800450e 	.word	0x0800450e
 8004efc:	0800450e 	.word	0x0800450e
 8004f00:	0800450e 	.word	0x0800450e
 8004f04:	0800450e 	.word	0x0800450e
 8004f08:	0800450e 	.word	0x0800450e
 8004f0c:	0800450e 	.word	0x0800450e
 8004f10:	0800443a 	.word	0x0800443a
 8004f14:	08004496 	.word	0x08004496
 8004f18:	0800443a 	.word	0x0800443a
 8004f1c:	0800450e 	.word	0x0800450e
 8004f20:	0800450e 	.word	0x0800450e
 8004f24:	0800450e 	.word	0x0800450e
 8004f28:	0800450e 	.word	0x0800450e
 8004f2c:	0800443a 	.word	0x0800443a
 8004f30:	0800450e 	.word	0x0800450e
 8004f34:	0800450e 	.word	0x0800450e
 8004f38:	0800450e 	.word	0x0800450e
 8004f3c:	0800450e 	.word	0x0800450e
 8004f40:	0800450e 	.word	0x0800450e
 8004f44:	0800443a 	.word	0x0800443a
 8004f48:	080044e0 	.word	0x080044e0
 8004f4c:	0800450e 	.word	0x0800450e
 8004f50:	0800450e 	.word	0x0800450e
 8004f54:	080044aa 	.word	0x080044aa
 8004f58:	0800450e 	.word	0x0800450e
 8004f5c:	0800443a 	.word	0x0800443a
 8004f60:	0800450e 	.word	0x0800450e
 8004f64:	0800450e 	.word	0x0800450e
 8004f68:	0800443a 	.word	0x0800443a
 8004f6c:	204d4652 	.word	0x204d4652
 8004f70:	20495053 	.word	0x20495053
 8004f74:	74697257 	.word	0x74697257
 8004f78:	00000065 	.word	0x00000065
 8004f7c:	656d6954 	.word	0x656d6954
 8004f80:	2074756f 	.word	0x2074756f
 8004f84:	25207325 	.word	0x25207325
 8004f88:	0a583830 	.word	0x0a583830
 8004f8c:	00000000 	.word	0x00000000
 8004f90:	20435452 	.word	0x20435452
 8004f94:	0a525349 	.word	0x0a525349
 8004f98:	00000000 	.word	0x00000000
