
sensor/bin/sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fb8  08004000  08004000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .preinit_array 00000000  08004fb8  08004fb8  0000105c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .init_array   00000000  08004fb8  08004fb8  0000105c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000000  08004fb8  08004fb8  0000105c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000010  20000000  08004fb8  0000104c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000018c  20000010  08004fc8  0000105c  2**2
                  ALLOC
  6 ._user_heap_stack 00001004  2000019c  08004fc8  0000105c  2**0
                  ALLOC
  7 .ARM.attributes 0000002c  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY
  8 .debug_info   00009a02  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00002088  00000000  00000000  0000aa8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000a30  00000000  00000000  0000cb12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 000009d8  00000000  00000000  0000d542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00005aaf  00000000  00000000  0000df1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0000865b  00000000  00000000  000139c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0001bf0b  00000000  00000000  0001c024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      0000004c  00000000  00000000  00037f2f  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001618  00000000  00000000  00037f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    000027bb  00000000  00000000  00039594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004000 <vector_table>:
 8004000:	00 20 00 20 75 4c 00 08 71 4c 00 08 6f 4c 00 08     . . uL..qL..oL..
	...
 800402c:	71 4c 00 08 00 00 00 00 00 00 00 00 71 4c 00 08     qL..........qL..
 800403c:	71 4c 00 08 6f 4c 00 08 6f 4c 00 08 29 48 00 08     qL..oL..oL..)H..
 800404c:	6f 4c 00 08 6f 4c 00 08 6f 4c 00 08 6f 4c 00 08     oL..oL..oL..oL..
 800405c:	fd 45 00 08 6f 4c 00 08 6f 4c 00 08 6f 4c 00 08     .E..oL..oL..oL..
 800406c:	6f 4c 00 08 6f 4c 00 08 6f 4c 00 08 6f 4c 00 08     oL..oL..oL..oL..
 800407c:	6f 4c 00 08 6f 4c 00 08 6f 4c 00 08 6f 4c 00 08     oL..oL..oL..oL..
 800408c:	6f 4c 00 08 6f 4c 00 08 6f 4c 00 08 6f 4c 00 08     oL..oL..oL..oL..
 800409c:	6f 4c 00 08 6f 4c 00 08 6f 4c 00 08 6f 4c 00 08     oL..oL..oL..oL..
 80040ac:	6f 4c 00 08 6f 4c 00 08 6f 4c 00 08 6f 4c 00 08     oL..oL..oL..oL..
 80040bc:	6f 4c 00 08                                         oL..

080040c0 <main>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

int main(void)
{
 80040c0:	b510      	push	{r4, lr}
  	// test_cusb_poll();
  	// test_boot(APP_ADDRESS);
  	// gpio_init();
	log_init();
 80040c2:	f000 f8ab 	bl	800421c <log_init>
	// timers_tim6_init();

	// for(int i = 0; i < 100000; i++){__asm__("nop");};


	log_printf(MAIN, "Sensor Start\n");
 80040c6:	4902      	ldr	r1, [pc, #8]	; (80040d0 <main+0x10>)
 80040c8:	2000      	movs	r0, #0
 80040ca:	f000 f8b5 	bl	8004238 <log_printf>
	// test_encryption();
	// test_timeout();
	// test_log();


	for (;;)
 80040ce:	e7fe      	b.n	80040ce <main+0xe>
 80040d0:	08004e28 	.word	0x08004e28

080040d4 <clock_setup>:
// Static Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

//  Static Function Definitions
static void clock_setup(void) 
{
 80040d4:	b510      	push	{r4, lr}
	// Enable MSI Osc 2.097Mhz
	rcc_osc_on(RCC_MSI);
 80040d6:	2004      	movs	r0, #4
 80040d8:	f000 fc84 	bl	80049e4 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_MSI);
 80040dc:	2004      	movs	r0, #4
 80040de:	f000 fcd7 	bl	8004a90 <rcc_wait_for_osc_ready>

	// Set MSI to 2.097Mhz
	rcc_set_msi_range(5);
 80040e2:	2005      	movs	r0, #5
 80040e4:	f000 fcfe 	bl	8004ae4 <rcc_set_msi_range>

	// Set prescalers for AHB, APB1, APB2
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);				// AHB -> 2.097Mhz
 80040e8:	2000      	movs	r0, #0
 80040ea:	f000 fcf1 	bl	8004ad0 <rcc_set_hpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);			// APB1 -> 2.097Mhz
 80040ee:	2000      	movs	r0, #0
 80040f0:	f000 fcd6 	bl	8004aa0 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);			// APB2 -> 2.097Mhz
 80040f4:	2000      	movs	r0, #0
 80040f6:	f000 fcdf 	bl	8004ab8 <rcc_set_ppre2>

	// Set flash, 2.097Mhz -> 0 waitstates
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 80040fa:	2000      	movs	r0, #0
 80040fc:	f000 fbc0 	bl	8004880 <flash_set_ws>

	// Set Peripheral Clock Frequencies used
	rcc_ahb_frequency = 2097000;
 8004100:	4b03      	ldr	r3, [pc, #12]	; (8004110 <clock_setup+0x3c>)
 8004102:	4a04      	ldr	r2, [pc, #16]	; (8004114 <clock_setup+0x40>)
 8004104:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 2097000;
 8004106:	4a04      	ldr	r2, [pc, #16]	; (8004118 <clock_setup+0x44>)
 8004108:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = 2097000;
 800410a:	4a04      	ldr	r2, [pc, #16]	; (800411c <clock_setup+0x48>)
 800410c:	6013      	str	r3, [r2, #0]
}
 800410e:	bd10      	pop	{r4, pc}
 8004110:	001fff68 	.word	0x001fff68
 8004114:	20000004 	.word	0x20000004
 8004118:	20000008 	.word	0x20000008
 800411c:	2000000c 	.word	0x2000000c

08004120 <usart_setup>:

static void usart_setup(void) 
{
 8004120:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_GPIOA);
 8004122:	20b0      	movs	r0, #176	; 0xb0
 8004124:	00c0      	lsls	r0, r0, #3
 8004126:	f000 fce9 	bl	8004afc <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOB);
 800412a:	4824      	ldr	r0, [pc, #144]	; (80041bc <usart_setup+0x9c>)
 800412c:	f000 fce6 	bl	8004afc <rcc_periph_clock_enable>

	gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_TX);
 8004130:	24a0      	movs	r4, #160	; 0xa0
 8004132:	05e4      	lsls	r4, r4, #23
 8004134:	2304      	movs	r3, #4
 8004136:	2200      	movs	r2, #0
 8004138:	2102      	movs	r1, #2
 800413a:	0020      	movs	r0, r4
 800413c:	f000 fbc3 	bl	80048c6 <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_RX);
 8004140:	2308      	movs	r3, #8
 8004142:	2200      	movs	r2, #0
 8004144:	2102      	movs	r1, #2
 8004146:	0020      	movs	r0, r4
 8004148:	f000 fbbd 	bl	80048c6 <gpio_mode_setup>
    
    gpio_set_output_options(SPF_USART_TX_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, SPF_USART_TX);
 800414c:	2304      	movs	r3, #4
 800414e:	2200      	movs	r2, #0
 8004150:	2100      	movs	r1, #0
 8004152:	0020      	movs	r0, r4
 8004154:	f000 fbd7 	bl	8004906 <gpio_set_output_options>

    gpio_set_af(SPF_USART_TX_PORT, SPF_USART_AF, SPF_USART_TX);
 8004158:	2204      	movs	r2, #4
 800415a:	2104      	movs	r1, #4
 800415c:	0020      	movs	r0, r4
 800415e:	f000 fbf0 	bl	8004942 <gpio_set_af>
    gpio_set_af(SPF_USART_RX_PORT, SPF_USART_AF, SPF_USART_RX);
 8004162:	2208      	movs	r2, #8
 8004164:	2104      	movs	r1, #4
 8004166:	0020      	movs	r0, r4
 8004168:	f000 fbeb 	bl	8004942 <gpio_set_af>
    
	rcc_periph_clock_enable(SPF_USART_RCC);
 800416c:	4814      	ldr	r0, [pc, #80]	; (80041c0 <usart_setup+0xa0>)
 800416e:	f000 fcc5 	bl	8004afc <rcc_periph_clock_enable>
    rcc_periph_reset_pulse(SPF_USART_RCC_RST);
 8004172:	4814      	ldr	r0, [pc, #80]	; (80041c4 <usart_setup+0xa4>)
 8004174:	f000 fcd0 	bl	8004b18 <rcc_periph_reset_pulse>
	usart_disable(SPF_USART);
 8004178:	4c13      	ldr	r4, [pc, #76]	; (80041c8 <usart_setup+0xa8>)
 800417a:	0020      	movs	r0, r4
 800417c:	f000 fd59 	bl	8004c32 <usart_disable>
	usart_set_baudrate(SPF_USART, SPF_USART_BAUD);
 8004180:	21e1      	movs	r1, #225	; 0xe1
 8004182:	0249      	lsls	r1, r1, #9
 8004184:	0020      	movs	r0, r4
 8004186:	f000 fcf7 	bl	8004b78 <usart_set_baudrate>
	usart_set_databits(SPF_USART, 8);
 800418a:	2108      	movs	r1, #8
 800418c:	0020      	movs	r0, r4
 800418e:	f000 fd1f 	bl	8004bd0 <usart_set_databits>
	usart_set_stopbits(SPF_USART,USART_STOPBITS_1);
 8004192:	2100      	movs	r1, #0
 8004194:	0020      	movs	r0, r4
 8004196:	f000 fd29 	bl	8004bec <usart_set_stopbits>
	usart_set_mode(SPF_USART, USART_MODE_TX_RX);
 800419a:	210c      	movs	r1, #12
 800419c:	0020      	movs	r0, r4
 800419e:	f000 fd35 	bl	8004c0c <usart_set_mode>
	usart_set_parity(SPF_USART, USART_PARITY_NONE);
 80041a2:	2100      	movs	r1, #0
 80041a4:	0020      	movs	r0, r4
 80041a6:	f000 fd29 	bl	8004bfc <usart_set_parity>
	usart_set_flow_control(SPF_USART, USART_FLOWCONTROL_NONE);
 80041aa:	2100      	movs	r1, #0
 80041ac:	0020      	movs	r0, r4
 80041ae:	f000 fd33 	bl	8004c18 <usart_set_flow_control>
	usart_enable(SPF_USART);
 80041b2:	0020      	movs	r0, r4
 80041b4:	f000 fd38 	bl	8004c28 <usart_enable>
}
 80041b8:	bd10      	pop	{r4, pc}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	00000581 	.word	0x00000581
 80041c0:	00000711 	.word	0x00000711
 80041c4:	00000511 	.word	0x00000511
 80041c8:	40004400 	.word	0x40004400

080041cc <_putchar_mem>:
	usart_send_blocking(SPF_USART, character);	
	#endif
}

static void _putchar_mem(char character)
{
 80041cc:	b510      	push	{r4, lr}
 80041ce:	0001      	movs	r1, r0
	mem_eeprom_write_byte(curr_address++, character);
 80041d0:	4c07      	ldr	r4, [pc, #28]	; (80041f0 <_putchar_mem+0x24>)
 80041d2:	6820      	ldr	r0, [r4, #0]
 80041d4:	1c43      	adds	r3, r0, #1
 80041d6:	6023      	str	r3, [r4, #0]
 80041d8:	f000 f868 	bl	80042ac <mem_eeprom_write_byte>
	
	if(curr_address == LOG_START + LOG_SIZE)
 80041dc:	6822      	ldr	r2, [r4, #0]
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <_putchar_mem+0x28>)
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d000      	beq.n	80041e6 <_putchar_mem+0x1a>
	{
		curr_address = LOG_START;
	}
}
 80041e4:	bd10      	pop	{r4, pc}
		curr_address = LOG_START;
 80041e6:	4b02      	ldr	r3, [pc, #8]	; (80041f0 <_putchar_mem+0x24>)
 80041e8:	4a03      	ldr	r2, [pc, #12]	; (80041f8 <_putchar_mem+0x2c>)
 80041ea:	601a      	str	r2, [r3, #0]
}
 80041ec:	e7fa      	b.n	80041e4 <_putchar_mem+0x18>
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	20000000 	.word	0x20000000
 80041f4:	08080800 	.word	0x08080800
 80041f8:	08080400 	.word	0x08080400

080041fc <_putchar_spf>:
{
 80041fc:	b510      	push	{r4, lr}
	usart_send_blocking(SPF_USART, character);	
 80041fe:	0001      	movs	r1, r0
 8004200:	4801      	ldr	r0, [pc, #4]	; (8004208 <_putchar_spf+0xc>)
 8004202:	f000 fd1b 	bl	8004c3c <usart_send_blocking>
}
 8004206:	bd10      	pop	{r4, pc}
 8004208:	40004400 	.word	0x40004400

0800420c <_putchar_main>:
{
 800420c:	b510      	push	{r4, lr}
 800420e:	0004      	movs	r4, r0
	_putchar_mem(character);
 8004210:	f7ff ffdc 	bl	80041cc <_putchar_mem>
	_putchar_spf(character);			
 8004214:	0020      	movs	r0, r4
 8004216:	f7ff fff1 	bl	80041fc <_putchar_spf>
}
 800421a:	bd10      	pop	{r4, pc}

0800421c <log_init>:
{
 800421c:	b510      	push	{r4, lr}
	mem_init();
 800421e:	f000 f83f 	bl	80042a0 <mem_init>
    curr_address = 0;
 8004222:	4b04      	ldr	r3, [pc, #16]	; (8004234 <log_init+0x18>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
    clock_setup();
 8004228:	f7ff ff54 	bl	80040d4 <clock_setup>
    usart_setup();
 800422c:	f7ff ff78 	bl	8004120 <usart_setup>
}
 8004230:	bd10      	pop	{r4, pc}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	20000000 	.word	0x20000000

08004238 <log_printf>:
{
 8004238:	b40e      	push	{r1, r2, r3}
 800423a:	b500      	push	{lr}
 800423c:	b082      	sub	sp, #8
 800423e:	ab03      	add	r3, sp, #12
 8004240:	cb02      	ldmia	r3!, {r1}
	va_start(va, format);
 8004242:	9301      	str	r3, [sp, #4]
    switch (type)
 8004244:	2802      	cmp	r0, #2
 8004246:	d01e      	beq.n	8004286 <log_printf+0x4e>
 8004248:	d808      	bhi.n	800425c <log_printf+0x24>
 800424a:	2800      	cmp	r0, #0
 800424c:	d00d      	beq.n	800426a <log_printf+0x32>
 800424e:	2801      	cmp	r0, #1
 8004250:	d10f      	bne.n	8004272 <log_printf+0x3a>
        fnprintf(_putchar_spf, format, va);
 8004252:	9a01      	ldr	r2, [sp, #4]
 8004254:	480e      	ldr	r0, [pc, #56]	; (8004290 <log_printf+0x58>)
 8004256:	f000 f8cf 	bl	80043f8 <fnprintf>
		break;
 800425a:	e00a      	b.n	8004272 <log_printf+0x3a>
    switch (type)
 800425c:	2804      	cmp	r0, #4
 800425e:	d108      	bne.n	8004272 <log_printf+0x3a>
        fnprintf(_putchar_main, format, va);
 8004260:	9a01      	ldr	r2, [sp, #4]
 8004262:	480c      	ldr	r0, [pc, #48]	; (8004294 <log_printf+0x5c>)
 8004264:	f000 f8c8 	bl	80043f8 <fnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {}
 8004268:	e003      	b.n	8004272 <log_printf+0x3a>
        fnprintf(_putchar_main, format, va);
 800426a:	9a01      	ldr	r2, [sp, #4]
 800426c:	4809      	ldr	r0, [pc, #36]	; (8004294 <log_printf+0x5c>)
 800426e:	f000 f8c3 	bl	80043f8 <fnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {}
 8004272:	2140      	movs	r1, #64	; 0x40
 8004274:	4808      	ldr	r0, [pc, #32]	; (8004298 <log_printf+0x60>)
 8004276:	f000 fcf4 	bl	8004c62 <usart_get_flag>
 800427a:	2800      	cmp	r0, #0
 800427c:	d0f9      	beq.n	8004272 <log_printf+0x3a>
}
 800427e:	b002      	add	sp, #8
 8004280:	bc08      	pop	{r3}
 8004282:	b003      	add	sp, #12
 8004284:	4718      	bx	r3
        fnprintf(_putchar_mem, format, va);
 8004286:	9a01      	ldr	r2, [sp, #4]
 8004288:	4804      	ldr	r0, [pc, #16]	; (800429c <log_printf+0x64>)
 800428a:	f000 f8b5 	bl	80043f8 <fnprintf>
		break;
 800428e:	e7f0      	b.n	8004272 <log_printf+0x3a>
 8004290:	080041fd 	.word	0x080041fd
 8004294:	0800420d 	.word	0x0800420d
 8004298:	40004400 	.word	0x40004400
 800429c:	080041cd 	.word	0x080041cd

080042a0 <mem_init>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

void mem_init(void)
{
 80042a0:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_MIF);
 80042a2:	20c1      	movs	r0, #193	; 0xc1
 80042a4:	00c0      	lsls	r0, r0, #3
 80042a6:	f000 fc29 	bl	8004afc <rcc_periph_clock_enable>
    // {
    //     // log_printf(MAIN, "%08x : %08x\n", next_reading_add, MMIO32(next_reading_add));
    //     msg_num++;
    //     next_reading_add += 4;
    // }
}
 80042aa:	bd10      	pop	{r4, pc}

080042ac <mem_eeprom_write_byte>:

    return true;
}

bool mem_eeprom_write_byte(uint32_t address, uint8_t data)
{
 80042ac:	b570      	push	{r4, r5, r6, lr}
 80042ae:	0004      	movs	r4, r0
 80042b0:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 80042b2:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <mem_eeprom_write_byte+0x44>)
 80042b4:	18c2      	adds	r2, r0, r3
 80042b6:	2380      	movs	r3, #128	; 0x80
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d301      	bcc.n	80042c2 <mem_eeprom_write_byte+0x16>
        return false;
 80042be:	2000      	movs	r0, #0
        FLASH_SR = FLASH_SR_EOP;

    flash_lock_pecr();

    return true;
}
 80042c0:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock_pecr();
 80042c2:	f000 fae7 	bl	8004894 <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 80042c6:	4a0b      	ldr	r2, [pc, #44]	; (80042f4 <mem_eeprom_write_byte+0x48>)
 80042c8:	6813      	ldr	r3, [r2, #0]
 80042ca:	490b      	ldr	r1, [pc, #44]	; (80042f8 <mem_eeprom_write_byte+0x4c>)
 80042cc:	400b      	ands	r3, r1
 80042ce:	6013      	str	r3, [r2, #0]
    MMIO8(address) = data;
 80042d0:	7025      	strb	r5, [r4, #0]
    while (FLASH_SR & FLASH_SR_BSY);
 80042d2:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <mem_eeprom_write_byte+0x50>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	07db      	lsls	r3, r3, #31
 80042d8:	d4fb      	bmi.n	80042d2 <mem_eeprom_write_byte+0x26>
    if (FLASH_SR & FLASH_SR_EOP)
 80042da:	4b08      	ldr	r3, [pc, #32]	; (80042fc <mem_eeprom_write_byte+0x50>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	079b      	lsls	r3, r3, #30
 80042e0:	d502      	bpl.n	80042e8 <mem_eeprom_write_byte+0x3c>
        FLASH_SR = FLASH_SR_EOP;
 80042e2:	4b06      	ldr	r3, [pc, #24]	; (80042fc <mem_eeprom_write_byte+0x50>)
 80042e4:	2202      	movs	r2, #2
 80042e6:	601a      	str	r2, [r3, #0]
    flash_lock_pecr();
 80042e8:	f000 fae0 	bl	80048ac <flash_lock_pecr>
    return true;
 80042ec:	2001      	movs	r0, #1
 80042ee:	e7e7      	b.n	80042c0 <mem_eeprom_write_byte+0x14>
 80042f0:	f7f80000 	.word	0xf7f80000
 80042f4:	40022004 	.word	0x40022004
 80042f8:	fffffeff 	.word	0xfffffeff
 80042fc:	40022018 	.word	0x40022018

08004300 <_atoi>:
    return (ch >= '0') && (ch <= '9');
}

// internal ASCII string to uint32_t conversion
static uint32_t _atoi(const char **str)
{
 8004300:	0001      	movs	r1, r0
    uint32_t i = 0U;
 8004302:	2000      	movs	r0, #0
    while (_is_digit(**str))
 8004304:	680a      	ldr	r2, [r1, #0]
 8004306:	7813      	ldrb	r3, [r2, #0]
    return (ch >= '0') && (ch <= '9');
 8004308:	3b30      	subs	r3, #48	; 0x30
 800430a:	b2db      	uxtb	r3, r3
    while (_is_digit(**str))
 800430c:	2b09      	cmp	r3, #9
 800430e:	d808      	bhi.n	8004322 <_atoi+0x22>
    {
        i = i * 10U + (uint32_t)(*((*str)++) - '0');
 8004310:	0083      	lsls	r3, r0, #2
 8004312:	181b      	adds	r3, r3, r0
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	1c50      	adds	r0, r2, #1
 8004318:	6008      	str	r0, [r1, #0]
 800431a:	7810      	ldrb	r0, [r2, #0]
 800431c:	18c0      	adds	r0, r0, r3
 800431e:	3830      	subs	r0, #48	; 0x30
 8004320:	e7f0      	b.n	8004304 <_atoi+0x4>
    }
    return i;
}
 8004322:	4770      	bx	lr

08004324 <_ntoa_format>:

// internal itoa format
static uint32_t _ntoa_format(out_fct_type out, int32_t value, uint32_t base, uint32_t width, bool sign)
{
 8004324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004326:	46d6      	mov	lr, sl
 8004328:	464f      	mov	r7, r9
 800432a:	4646      	mov	r6, r8
 800432c:	b5c0      	push	{r6, r7, lr}
 800432e:	b088      	sub	sp, #32
 8004330:	4680      	mov	r8, r0
 8004332:	0008      	movs	r0, r1
 8004334:	0015      	movs	r5, r2
 8004336:	469a      	mov	sl, r3
 8004338:	ab10      	add	r3, sp, #64	; 0x40
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	4699      	mov	r9, r3
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    uint32_t len = 0;

    // write if precision != 0 and value is != 0
    if (value)
 800433e:	2900      	cmp	r1, #0
 8004340:	d052      	beq.n	80043e8 <_ntoa_format+0xc4>
    uint32_t len = 0;
 8004342:	2400      	movs	r4, #0
 8004344:	e00d      	b.n	8004362 <_ntoa_format+0x3e>
    {
        // Digits to char
        do
        {
            const char digit = (char)(value % base);
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 8004346:	3130      	adds	r1, #48	; 0x30
 8004348:	b2c9      	uxtb	r1, r1
 800434a:	1c67      	adds	r7, r4, #1
 800434c:	466b      	mov	r3, sp
 800434e:	5519      	strb	r1, [r3, r4]
            value /= base;
 8004350:	0029      	movs	r1, r5
 8004352:	0030      	movs	r0, r6
 8004354:	f000 fcdc 	bl	8004d10 <__udivsi3>
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004358:	2800      	cmp	r0, #0
 800435a:	d010      	beq.n	800437e <_ntoa_format+0x5a>
 800435c:	2f1f      	cmp	r7, #31
 800435e:	d80e      	bhi.n	800437e <_ntoa_format+0x5a>
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 8004360:	003c      	movs	r4, r7
            const char digit = (char)(value % base);
 8004362:	0006      	movs	r6, r0
 8004364:	0029      	movs	r1, r5
 8004366:	f000 fd59 	bl	8004e1c <__aeabi_uidivmod>
 800436a:	b2c9      	uxtb	r1, r1
            buf[len++] = digit < 10 ? '0' + digit : ('A') + digit - 10;
 800436c:	2909      	cmp	r1, #9
 800436e:	d9ea      	bls.n	8004346 <_ntoa_format+0x22>
 8004370:	3137      	adds	r1, #55	; 0x37
 8004372:	b2c9      	uxtb	r1, r1
 8004374:	e7e9      	b.n	800434a <_ntoa_format+0x26>

        // pad leading zeros
        while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
        {
            buf[len++] = '0';
 8004376:	2330      	movs	r3, #48	; 0x30
 8004378:	466a      	mov	r2, sp
 800437a:	55d3      	strb	r3, [r2, r7]
 800437c:	3701      	adds	r7, #1
        while ((len < width) && (len < PRINTF_NTOA_BUFFER_SIZE))
 800437e:	4557      	cmp	r7, sl
 8004380:	d201      	bcs.n	8004386 <_ntoa_format+0x62>
 8004382:	2f1f      	cmp	r7, #31
 8004384:	d9f7      	bls.n	8004376 <_ntoa_format+0x52>
        }

        // Base specifier
        if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004386:	2d10      	cmp	r5, #16
 8004388:	d012      	beq.n	80043b0 <_ntoa_format+0x8c>
        {
            buf[len++] = 'X';
        }
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 800438a:	2d02      	cmp	r5, #2
 800438c:	d017      	beq.n	80043be <_ntoa_format+0x9a>
        {
            buf[len++] = 'b';
        }
        if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 800438e:	2d10      	cmp	r5, #16
 8004390:	d01c      	beq.n	80043cc <_ntoa_format+0xa8>
 8004392:	2d02      	cmp	r5, #2
 8004394:	d01a      	beq.n	80043cc <_ntoa_format+0xa8>
        {
            buf[len++] = '0';
        }

        // Negative sign
        if (sign && (value < 0) && (len < PRINTF_NTOA_BUFFER_SIZE))
 8004396:	464b      	mov	r3, r9
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <_ntoa_format+0x7c>
 800439c:	2800      	cmp	r0, #0
 800439e:	db1c      	blt.n	80043da <_ntoa_format+0xb6>
        {
            buf[len++] = '-';
        }

        // reverse string and write out
        uint32_t i = len;
 80043a0:	003c      	movs	r4, r7
        while (i)
 80043a2:	2c00      	cmp	r4, #0
 80043a4:	d021      	beq.n	80043ea <_ntoa_format+0xc6>
        {
            out(buf[--i]);
 80043a6:	3c01      	subs	r4, #1
 80043a8:	466b      	mov	r3, sp
 80043aa:	5d18      	ldrb	r0, [r3, r4]
 80043ac:	47c0      	blx	r8
 80043ae:	e7f8      	b.n	80043a2 <_ntoa_format+0x7e>
        if ((base == 16U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80043b0:	2f1f      	cmp	r7, #31
 80043b2:	d8ea      	bhi.n	800438a <_ntoa_format+0x66>
            buf[len++] = 'X';
 80043b4:	2358      	movs	r3, #88	; 0x58
 80043b6:	466a      	mov	r2, sp
 80043b8:	55d3      	strb	r3, [r2, r7]
 80043ba:	3701      	adds	r7, #1
 80043bc:	e7e7      	b.n	800438e <_ntoa_format+0x6a>
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80043be:	2f1f      	cmp	r7, #31
 80043c0:	d8e5      	bhi.n	800438e <_ntoa_format+0x6a>
            buf[len++] = 'b';
 80043c2:	2362      	movs	r3, #98	; 0x62
 80043c4:	466a      	mov	r2, sp
 80043c6:	55d3      	strb	r3, [r2, r7]
 80043c8:	3701      	adds	r7, #1
 80043ca:	e7e0      	b.n	800438e <_ntoa_format+0x6a>
        if (((base == 16U) || (base == 2U)) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80043cc:	2f1f      	cmp	r7, #31
 80043ce:	d8e2      	bhi.n	8004396 <_ntoa_format+0x72>
            buf[len++] = '0';
 80043d0:	2330      	movs	r3, #48	; 0x30
 80043d2:	466a      	mov	r2, sp
 80043d4:	55d3      	strb	r3, [r2, r7]
 80043d6:	3701      	adds	r7, #1
 80043d8:	e7dd      	b.n	8004396 <_ntoa_format+0x72>
        if (sign && (value < 0) && (len < PRINTF_NTOA_BUFFER_SIZE))
 80043da:	2f1f      	cmp	r7, #31
 80043dc:	d8e0      	bhi.n	80043a0 <_ntoa_format+0x7c>
            buf[len++] = '-';
 80043de:	232d      	movs	r3, #45	; 0x2d
 80043e0:	466a      	mov	r2, sp
 80043e2:	55d3      	strb	r3, [r2, r7]
 80043e4:	3701      	adds	r7, #1
 80043e6:	e7db      	b.n	80043a0 <_ntoa_format+0x7c>
    uint32_t len = 0;
 80043e8:	2700      	movs	r7, #0
        }
    }
    return len;
}
 80043ea:	0038      	movs	r0, r7
 80043ec:	b008      	add	sp, #32
 80043ee:	bce0      	pop	{r5, r6, r7}
 80043f0:	46ba      	mov	sl, r7
 80043f2:	46b1      	mov	r9, r6
 80043f4:	46a8      	mov	r8, r5
 80043f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043f8 <fnprintf>:

uint32_t fnprintf(out_fct_type out, const char *format, va_list va)
{
 80043f8:	b570      	push	{r4, r5, r6, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	0005      	movs	r5, r0
 80043fe:	9103      	str	r1, [sp, #12]
 8004400:	9202      	str	r2, [sp, #8]
    uint32_t width;
    uint32_t idx = 0U;
 8004402:	2400      	movs	r4, #0

    while (*format)
 8004404:	e004      	b.n	8004410 <fnprintf+0x18>
            format++;
        }
        else
        {
            // Just print char
            out(*format);
 8004406:	47a8      	blx	r5
            idx++;
 8004408:	3401      	adds	r4, #1
            format++;
 800440a:	9b03      	ldr	r3, [sp, #12]
 800440c:	3301      	adds	r3, #1
 800440e:	9303      	str	r3, [sp, #12]
    while (*format)
 8004410:	9b03      	ldr	r3, [sp, #12]
 8004412:	7818      	ldrb	r0, [r3, #0]
 8004414:	2800      	cmp	r0, #0
 8004416:	d100      	bne.n	800441a <fnprintf+0x22>
 8004418:	e089      	b.n	800452e <fnprintf+0x136>
        if (*format == '%')
 800441a:	2825      	cmp	r0, #37	; 0x25
 800441c:	d1f3      	bne.n	8004406 <fnprintf+0xe>
            format++;
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	9203      	str	r2, [sp, #12]
            continue;
        }

        // evaluate width field
        width = 0U;
        if (_is_digit(*format))
 8004422:	785b      	ldrb	r3, [r3, #1]
    return (ch >= '0') && (ch <= '9');
 8004424:	3b30      	subs	r3, #48	; 0x30
 8004426:	b2db      	uxtb	r3, r3
        if (_is_digit(*format))
 8004428:	2b09      	cmp	r3, #9
 800442a:	d90b      	bls.n	8004444 <fnprintf+0x4c>
        width = 0U;
 800442c:	2300      	movs	r3, #0
        {
            width = _atoi(&format);
        }

        // evaluate specifier
        switch (*format)
 800442e:	9a03      	ldr	r2, [sp, #12]
 8004430:	7810      	ldrb	r0, [r2, #0]
 8004432:	0002      	movs	r2, r0
 8004434:	3a25      	subs	r2, #37	; 0x25
 8004436:	b2d1      	uxtb	r1, r2
 8004438:	2953      	cmp	r1, #83	; 0x53
 800443a:	d872      	bhi.n	8004522 <fnprintf+0x12a>
 800443c:	008a      	lsls	r2, r1, #2
 800443e:	493d      	ldr	r1, [pc, #244]	; (8004534 <fnprintf+0x13c>)
 8004440:	588a      	ldr	r2, [r1, r2]
 8004442:	4697      	mov	pc, r2
            width = _atoi(&format);
 8004444:	a803      	add	r0, sp, #12
 8004446:	f7ff ff5b 	bl	8004300 <_atoi>
 800444a:	0003      	movs	r3, r0
 800444c:	e7ef      	b.n	800442e <fnprintf+0x36>
        case 'o':
        case 'b':
        {
            // set the base
            uint32_t base;
            if (*format == 'x' || *format == 'X')
 800444e:	2878      	cmp	r0, #120	; 0x78
 8004450:	d009      	beq.n	8004466 <fnprintf+0x6e>
 8004452:	2858      	cmp	r0, #88	; 0x58
 8004454:	d01a      	beq.n	800448c <fnprintf+0x94>
            {
                base = 16U;
            }
            else if (*format == 'o')
 8004456:	286f      	cmp	r0, #111	; 0x6f
 8004458:	d01a      	beq.n	8004490 <fnprintf+0x98>
            {
                base = 8U;
            }
            else if (*format == 'b')
 800445a:	2862      	cmp	r0, #98	; 0x62
 800445c:	d001      	beq.n	8004462 <fnprintf+0x6a>
            {
                base = 2U;
            }
            else
            {
                base = 10U;
 800445e:	220a      	movs	r2, #10
 8004460:	e002      	b.n	8004468 <fnprintf+0x70>
                base = 2U;
 8004462:	2202      	movs	r2, #2
 8004464:	e000      	b.n	8004468 <fnprintf+0x70>
                base = 16U;
 8004466:	2210      	movs	r2, #16
            }

            // convert integer
            if ((*format == 'i') || (*format == 'd'))
 8004468:	2869      	cmp	r0, #105	; 0x69
 800446a:	d001      	beq.n	8004470 <fnprintf+0x78>
 800446c:	2864      	cmp	r0, #100	; 0x64
 800446e:	d111      	bne.n	8004494 <fnprintf+0x9c>
            {
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, true);
 8004470:	9902      	ldr	r1, [sp, #8]
 8004472:	1d08      	adds	r0, r1, #4
 8004474:	9002      	str	r0, [sp, #8]
 8004476:	6809      	ldr	r1, [r1, #0]
 8004478:	2001      	movs	r0, #1
 800447a:	9000      	str	r0, [sp, #0]
 800447c:	0028      	movs	r0, r5
 800447e:	f7ff ff51 	bl	8004324 <_ntoa_format>
 8004482:	1824      	adds	r4, r4, r0
            }
            else
            {
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, false);
            }
            format++;
 8004484:	9b03      	ldr	r3, [sp, #12]
 8004486:	3301      	adds	r3, #1
 8004488:	9303      	str	r3, [sp, #12]
            break;
 800448a:	e7c1      	b.n	8004410 <fnprintf+0x18>
                base = 16U;
 800448c:	2210      	movs	r2, #16
 800448e:	e7eb      	b.n	8004468 <fnprintf+0x70>
                base = 8U;
 8004490:	2208      	movs	r2, #8
 8004492:	e7e9      	b.n	8004468 <fnprintf+0x70>
                idx += _ntoa_format(out, (int32_t)va_arg(va, int), base, width, false);
 8004494:	9902      	ldr	r1, [sp, #8]
 8004496:	1d08      	adds	r0, r1, #4
 8004498:	9002      	str	r0, [sp, #8]
 800449a:	6809      	ldr	r1, [r1, #0]
 800449c:	2000      	movs	r0, #0
 800449e:	9000      	str	r0, [sp, #0]
 80044a0:	0028      	movs	r0, r5
 80044a2:	f7ff ff3f 	bl	8004324 <_ntoa_format>
 80044a6:	1824      	adds	r4, r4, r0
 80044a8:	e7ec      	b.n	8004484 <fnprintf+0x8c>
        }

        case 'c':
        {
            out((char)va_arg(va, int));
 80044aa:	9b02      	ldr	r3, [sp, #8]
 80044ac:	1d1a      	adds	r2, r3, #4
 80044ae:	9202      	str	r2, [sp, #8]
 80044b0:	7818      	ldrb	r0, [r3, #0]
 80044b2:	47a8      	blx	r5
            idx++;
 80044b4:	3401      	adds	r4, #1
            format++;
 80044b6:	9b03      	ldr	r3, [sp, #12]
 80044b8:	3301      	adds	r3, #1
 80044ba:	9303      	str	r3, [sp, #12]
            break;
 80044bc:	e7a8      	b.n	8004410 <fnprintf+0x18>
        }

        case 's':
        {
            const char *p = va_arg(va, char *);
 80044be:	9b02      	ldr	r3, [sp, #8]
 80044c0:	1d1a      	adds	r2, r3, #4
 80044c2:	9202      	str	r2, [sp, #8]
 80044c4:	681e      	ldr	r6, [r3, #0]
    for (s = str; *s && maxsize--; ++s)
 80044c6:	0033      	movs	r3, r6
 80044c8:	2280      	movs	r2, #128	; 0x80
 80044ca:	00d2      	lsls	r2, r2, #3
 80044cc:	e001      	b.n	80044d2 <fnprintf+0xda>
 80044ce:	3301      	adds	r3, #1
 80044d0:	000a      	movs	r2, r1
 80044d2:	7819      	ldrb	r1, [r3, #0]
 80044d4:	2900      	cmp	r1, #0
 80044d6:	d002      	beq.n	80044de <fnprintf+0xe6>
 80044d8:	1e51      	subs	r1, r2, #1
 80044da:	2a00      	cmp	r2, #0
 80044dc:	d1f7      	bne.n	80044ce <fnprintf+0xd6>
            uint32_t l = _strnlen_s(p, PRINTF_MAX_STR_LEN);

            // string output
            while (*p != 0)
 80044de:	7830      	ldrb	r0, [r6, #0]
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d003      	beq.n	80044ec <fnprintf+0xf4>
            {
                out(*(p++));
 80044e4:	3601      	adds	r6, #1
 80044e6:	47a8      	blx	r5
                idx++;
 80044e8:	3401      	adds	r4, #1
 80044ea:	e7f8      	b.n	80044de <fnprintf+0xe6>
            }
            format++;
 80044ec:	9b03      	ldr	r3, [sp, #12]
 80044ee:	3301      	adds	r3, #1
 80044f0:	9303      	str	r3, [sp, #12]
            break;
 80044f2:	e78d      	b.n	8004410 <fnprintf+0x18>
        }

        case 'p':
        {
            width = sizeof(void *) * 2U;
            idx += _ntoa_format(out, (int32_t)((uintptr_t)va_arg(va, void *)), 16U, width, false);
 80044f4:	9b02      	ldr	r3, [sp, #8]
 80044f6:	1d1a      	adds	r2, r3, #4
 80044f8:	9202      	str	r2, [sp, #8]
 80044fa:	6819      	ldr	r1, [r3, #0]
 80044fc:	2300      	movs	r3, #0
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	3308      	adds	r3, #8
 8004502:	2210      	movs	r2, #16
 8004504:	0028      	movs	r0, r5
 8004506:	f7ff ff0d 	bl	8004324 <_ntoa_format>
 800450a:	1824      	adds	r4, r4, r0
            format++;
 800450c:	9b03      	ldr	r3, [sp, #12]
 800450e:	3301      	adds	r3, #1
 8004510:	9303      	str	r3, [sp, #12]
            break;
 8004512:	e77d      	b.n	8004410 <fnprintf+0x18>
        }

        case '%':
        {
            out('%');
 8004514:	2025      	movs	r0, #37	; 0x25
 8004516:	47a8      	blx	r5
            idx++;
 8004518:	3401      	adds	r4, #1
            format++;
 800451a:	9b03      	ldr	r3, [sp, #12]
 800451c:	3301      	adds	r3, #1
 800451e:	9303      	str	r3, [sp, #12]
            break;
 8004520:	e776      	b.n	8004410 <fnprintf+0x18>
        }

        default:
        {
            out(*format);
 8004522:	47a8      	blx	r5
            idx++;
 8004524:	3401      	adds	r4, #1
            format++;
 8004526:	9b03      	ldr	r3, [sp, #12]
 8004528:	3301      	adds	r3, #1
 800452a:	9303      	str	r3, [sp, #12]
            break;
 800452c:	e770      	b.n	8004410 <fnprintf+0x18>
        }
        }
    }
    // return written chars without terminating \0
    return idx;
}
 800452e:	0020      	movs	r0, r4
 8004530:	b004      	add	sp, #16
 8004532:	bd70      	pop	{r4, r5, r6, pc}
 8004534:	08004e38 	.word	0x08004e38

08004538 <spi_read_single>:
 * 
 * @param reg Register to read
 * @retval Value read from register
 */
static uint8_t spi_read_single(uint8_t reg)
{
 8004538:	b570      	push	{r4, r5, r6, lr}
 800453a:	0004      	movs	r4, r0
  spi_chip_select();
 800453c:	25a0      	movs	r5, #160	; 0xa0
 800453e:	05ed      	lsls	r5, r5, #23
 8004540:	2110      	movs	r1, #16
 8004542:	0028      	movs	r0, r5
 8004544:	f000 f9bc 	bl	80048c0 <gpio_clear>
  timers_delay_microseconds(1);
 8004548:	2001      	movs	r0, #1
 800454a:	f000 f89d 	bl	8004688 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, reg);                   
 800454e:	b2a1      	uxth	r1, r4
 8004550:	4c08      	ldr	r4, [pc, #32]	; (8004574 <spi_read_single+0x3c>)
 8004552:	0020      	movs	r0, r4
 8004554:	f000 fb08 	bl	8004b68 <spi_xfer>
  uint8_t in =  spi_xfer(RFM_SPI, 0x00);                   
 8004558:	2100      	movs	r1, #0
 800455a:	0020      	movs	r0, r4
 800455c:	f000 fb04 	bl	8004b68 <spi_xfer>
 8004560:	b2c4      	uxtb	r4, r0
    
  spi_chip_deselect(); 
 8004562:	2110      	movs	r1, #16
 8004564:	0028      	movs	r0, r5
 8004566:	f000 f9a9 	bl	80048bc <gpio_set>
  timers_delay_microseconds(1);
 800456a:	2001      	movs	r0, #1
 800456c:	f000 f88c 	bl	8004688 <timers_delay_microseconds>

  return in;
}
 8004570:	0020      	movs	r0, r4
 8004572:	bd70      	pop	{r4, r5, r6, pc}
 8004574:	40013000 	.word	0x40013000

08004578 <spi_write_single>:
  spi_chip_deselect();     
  timers_delay_microseconds(1);
}

static void spi_write_single(uint8_t reg, uint8_t data)
{
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	0005      	movs	r5, r0
 800457c:	000e      	movs	r6, r1
  // Set MSB for write operation
  uint8_t cmd = 0x80 | reg;
 800457e:	2480      	movs	r4, #128	; 0x80
 8004580:	4264      	negs	r4, r4
 8004582:	4304      	orrs	r4, r0
 8004584:	b2e4      	uxtb	r4, r4

  spi_chip_select();
 8004586:	27a0      	movs	r7, #160	; 0xa0
 8004588:	05ff      	lsls	r7, r7, #23
 800458a:	2110      	movs	r1, #16
 800458c:	0038      	movs	r0, r7
 800458e:	f000 f997 	bl	80048c0 <gpio_clear>
  timers_delay_microseconds(1);
 8004592:	2001      	movs	r0, #1
 8004594:	f000 f878 	bl	8004688 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, cmd);                 
 8004598:	b2a1      	uxth	r1, r4
 800459a:	4c15      	ldr	r4, [pc, #84]	; (80045f0 <spi_write_single+0x78>)
 800459c:	0020      	movs	r0, r4
 800459e:	f000 fae3 	bl	8004b68 <spi_xfer>
  spi_xfer(RFM_SPI, data);             
 80045a2:	b2b1      	uxth	r1, r6
 80045a4:	0020      	movs	r0, r4
 80045a6:	f000 fadf 	bl	8004b68 <spi_xfer>

  spi_chip_deselect(); 
 80045aa:	2110      	movs	r1, #16
 80045ac:	0038      	movs	r0, r7
 80045ae:	f000 f985 	bl	80048bc <gpio_set>
  timers_delay_microseconds(1);
 80045b2:	2001      	movs	r0, #1
 80045b4:	f000 f868 	bl	8004688 <timers_delay_microseconds>

  uint8_t curr_data = spi_read_single(reg);
 80045b8:	0028      	movs	r0, r5
 80045ba:	f7ff ffbd 	bl	8004538 <spi_read_single>
 80045be:	0004      	movs	r4, r0

  // log_printf(MAIN, "%02x : %02x\n", reg, data);

  if(reg == RFM_REG_12_IRQ_FLAGS)    
 80045c0:	2d12      	cmp	r5, #18
 80045c2:	d013      	beq.n	80045ec <spi_write_single+0x74>
    return;

  TIMEOUT(10000, "RFM SPI Write", ((reg << 16) | data), (curr_data == data), ;, timers_delay_microseconds(100); curr_data = spi_read_single(reg););
 80045c4:	f000 f87e 	bl	80046c4 <timeout_init>
 80045c8:	042a      	lsls	r2, r5, #16
 80045ca:	4332      	orrs	r2, r6
 80045cc:	4909      	ldr	r1, [pc, #36]	; (80045f4 <spi_write_single+0x7c>)
 80045ce:	480a      	ldr	r0, [pc, #40]	; (80045f8 <spi_write_single+0x80>)
 80045d0:	f000 f886 	bl	80046e0 <timeout>
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d109      	bne.n	80045ec <spi_write_single+0x74>
 80045d8:	42b4      	cmp	r4, r6
 80045da:	d007      	beq.n	80045ec <spi_write_single+0x74>
 80045dc:	2064      	movs	r0, #100	; 0x64
 80045de:	f000 f853 	bl	8004688 <timers_delay_microseconds>
 80045e2:	0028      	movs	r0, r5
 80045e4:	f7ff ffa8 	bl	8004538 <spi_read_single>
 80045e8:	0004      	movs	r4, r0
 80045ea:	e7ed      	b.n	80045c8 <spi_write_single+0x50>

  // log_printf(MAIN, "%02x : %02x : %02x\n", reg, data, curr_data);
}
 80045ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	40013000 	.word	0x40013000
 80045f4:	08004f88 	.word	0x08004f88
 80045f8:	00002710 	.word	0x00002710

080045fc <exti4_15_isr>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void exti4_15_isr(void)
{
 80045fc:	b570      	push	{r4, r5, r6, lr}
  uint16_t timer = timers_micros();
 80045fe:	f000 f859 	bl	80046b4 <timers_micros>
  
  exti_reset_request(RFM_IO_0_EXTI);
 8004602:	2480      	movs	r4, #128	; 0x80
 8004604:	0224      	lsls	r4, r4, #8
 8004606:	0020      	movs	r0, r4
 8004608:	f000 f934 	bl	8004874 <exti_reset_request>
  exti_reset_request(RFM_IO_0_EXTI);
 800460c:	0020      	movs	r0, r4
 800460e:	f000 f931 	bl	8004874 <exti_reset_request>

  // Store IRQ Flags
  packets_buf[packets_head].flags = get_irq();
 8004612:	4d1b      	ldr	r5, [pc, #108]	; (8004680 <exti4_15_isr+0x84>)
 8004614:	782e      	ldrb	r6, [r5, #0]
  return spi_read_single(RFM_REG_12_IRQ_FLAGS);
 8004616:	2012      	movs	r0, #18
 8004618:	f7ff ff8e 	bl	8004538 <spi_read_single>
  packets_buf[packets_head].flags = get_irq();
 800461c:	4c19      	ldr	r4, [pc, #100]	; (8004684 <exti4_15_isr+0x88>)
 800461e:	0073      	lsls	r3, r6, #1
 8004620:	199b      	adds	r3, r3, r6
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	18e3      	adds	r3, r4, r3
 8004626:	7418      	strb	r0, [r3, #16]
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 8004628:	21ff      	movs	r1, #255	; 0xff
 800462a:	2012      	movs	r0, #18
 800462c:	f7ff ffa4 	bl	8004578 <spi_write_single>
 8004630:	21ff      	movs	r1, #255	; 0xff
 8004632:	2012      	movs	r0, #18
 8004634:	f7ff ffa0 	bl	8004578 <spi_write_single>
  clear_irq(RFM_IRQ_ALL);
  clear_irq(RFM_IRQ_ALL);

  // Get signal strength
  packets_buf[packets_head].rssi = spi_read_single(RFM_REG_1A_PKT_RSSI_VALUE);
 8004638:	201a      	movs	r0, #26
 800463a:	f7ff ff7d 	bl	8004538 <spi_read_single>
 800463e:	782a      	ldrb	r2, [r5, #0]
 8004640:	b200      	sxth	r0, r0
  packets_buf[packets_head].rssi -= 137;
 8004642:	0053      	lsls	r3, r2, #1
 8004644:	189b      	adds	r3, r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	18e3      	adds	r3, r4, r3
 800464a:	3889      	subs	r0, #137	; 0x89
 800464c:	8298      	strh	r0, [r3, #20]
  packets_buf[packets_head].snr = spi_read_single(RFM_REG_19_PKT_SNR_VALUE) / 4;
 800464e:	2019      	movs	r0, #25
 8004650:	f7ff ff72 	bl	8004538 <spi_read_single>
 8004654:	782b      	ldrb	r3, [r5, #0]
 8004656:	005a      	lsls	r2, r3, #1
 8004658:	18d2      	adds	r2, r2, r3
 800465a:	00d2      	lsls	r2, r2, #3
 800465c:	18a4      	adds	r4, r4, r2
 800465e:	0880      	lsrs	r0, r0, #2
 8004660:	74a0      	strb	r0, [r4, #18]

  // Check for CRC error
  packets_buf[packets_head].crc_ok = !(packets_buf[packets_head].flags & RFM_IRQ_PAYLOAD_CRC_ERROR);
 8004662:	7c22      	ldrb	r2, [r4, #16]
 8004664:	0952      	lsrs	r2, r2, #5
 8004666:	2101      	movs	r1, #1
 8004668:	404a      	eors	r2, r1
 800466a:	2101      	movs	r1, #1
 800466c:	400a      	ands	r2, r1
 800466e:	7462      	strb	r2, [r4, #17]

  packets_head = (packets_head + 1) % PACKETS_BUF_SIZE;
 8004670:	3301      	adds	r3, #1
 8004672:	220f      	movs	r2, #15
 8004674:	4013      	ands	r3, r2
 8004676:	702b      	strb	r3, [r5, #0]

  uint16_t time = timers_micros() - timer;
 8004678:	f000 f81c 	bl	80046b4 <timers_micros>
  // log_printf(MAIN, "ISR %u %u %u\n", time, packets_head, packets_tail);
}
 800467c:	bd70      	pop	{r4, r5, r6, pc}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	20000190 	.word	0x20000190
 8004684:	20000010 	.word	0x20000010

08004688 <timers_delay_microseconds>:
    lptimer_start_counter(LPTIM1, LPTIM_CR_CNTSTRT);
}

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_microseconds(uint32_t delay_microseconds)
{
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	0004      	movs	r4, r0
    uint32_t curr_time = lptimer_get_counter(LPTIM1);
 800468c:	4807      	ldr	r0, [pc, #28]	; (80046ac <timers_delay_microseconds+0x24>)
 800468e:	f000 f982 	bl	8004996 <lptimer_get_counter>
 8004692:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_microseconds > 65000)
 8004694:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <timers_delay_microseconds+0x28>)
 8004696:	429c      	cmp	r4, r3
 8004698:	d900      	bls.n	800469c <timers_delay_microseconds+0x14>
        delay_microseconds = 65000;
 800469a:	001c      	movs	r4, r3

    while (lptimer_get_counter(LPTIM1) - curr_time < delay_microseconds);
 800469c:	4803      	ldr	r0, [pc, #12]	; (80046ac <timers_delay_microseconds+0x24>)
 800469e:	f000 f97a 	bl	8004996 <lptimer_get_counter>
 80046a2:	1b40      	subs	r0, r0, r5
 80046a4:	42a0      	cmp	r0, r4
 80046a6:	d3f9      	bcc.n	800469c <timers_delay_microseconds+0x14>
}
 80046a8:	bd70      	pop	{r4, r5, r6, pc}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	40007c00 	.word	0x40007c00
 80046b0:	0000fde8 	.word	0x0000fde8

080046b4 <timers_micros>:
}
*/

// Returns value of microsecond counter
uint16_t timers_micros(void)
{
 80046b4:	b510      	push	{r4, lr}
    return (uint16_t)lptimer_get_counter(LPTIM1);
 80046b6:	4802      	ldr	r0, [pc, #8]	; (80046c0 <timers_micros+0xc>)
 80046b8:	f000 f96d 	bl	8004996 <lptimer_get_counter>
}
 80046bc:	bd10      	pop	{r4, pc}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	40007c00 	.word	0x40007c00

080046c4 <timeout_init>:
}


// Timout functions
void timeout_init(void)
{
 80046c4:	b510      	push	{r4, lr}
    timeout_counter     = 0; 
 80046c6:	4b04      	ldr	r3, [pc, #16]	; (80046d8 <timeout_init+0x14>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
    // timeout_counter     = 2140483648; 
    timeout_timer       = timers_micros(); 
 80046cc:	f7ff fff2 	bl	80046b4 <timers_micros>
 80046d0:	4b02      	ldr	r3, [pc, #8]	; (80046dc <timeout_init+0x18>)
 80046d2:	8018      	strh	r0, [r3, #0]
}
 80046d4:	bd10      	pop	{r4, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	20000194 	.word	0x20000194
 80046dc:	20000198 	.word	0x20000198

080046e0 <timeout>:

bool timeout(uint32_t time_microseconds, char *msg, uint32_t data)
{
 80046e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046e2:	b083      	sub	sp, #12
 80046e4:	0006      	movs	r6, r0
 80046e6:	9101      	str	r1, [sp, #4]
 80046e8:	0015      	movs	r5, r2
    timeout_counter    += (uint16_t)(timers_micros() - timeout_timer);
 80046ea:	f7ff ffe3 	bl	80046b4 <timers_micros>
 80046ee:	4c0d      	ldr	r4, [pc, #52]	; (8004724 <timeout+0x44>)
 80046f0:	8823      	ldrh	r3, [r4, #0]
 80046f2:	1ac3      	subs	r3, r0, r3
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	4f0c      	ldr	r7, [pc, #48]	; (8004728 <timeout+0x48>)
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	4694      	mov	ip, r2
 80046fc:	4463      	add	r3, ip
 80046fe:	603b      	str	r3, [r7, #0]
    timeout_timer       = timers_micros();
 8004700:	f7ff ffd8 	bl	80046b4 <timers_micros>
 8004704:	8020      	strh	r0, [r4, #0]

    // log_printf(MAIN, "%u\n", timeout_counter);

    if(timeout_counter > time_microseconds)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	42b3      	cmp	r3, r6
 800470a:	d802      	bhi.n	8004712 <timeout+0x32>
    {
        log_printf(MAIN, "Timeout %s %08X\n", msg, data);
        return true;
    }
    else    
        return false;
 800470c:	2000      	movs	r0, #0
}
 800470e:	b003      	add	sp, #12
 8004710:	bdf0      	pop	{r4, r5, r6, r7, pc}
        log_printf(MAIN, "Timeout %s %08X\n", msg, data);
 8004712:	002b      	movs	r3, r5
 8004714:	9a01      	ldr	r2, [sp, #4]
 8004716:	4905      	ldr	r1, [pc, #20]	; (800472c <timeout+0x4c>)
 8004718:	2000      	movs	r0, #0
 800471a:	f7ff fd8d 	bl	8004238 <log_printf>
        return true;
 800471e:	2001      	movs	r0, #1
 8004720:	e7f5      	b.n	800470e <timeout+0x2e>
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	20000198 	.word	0x20000198
 8004728:	20000194 	.word	0x20000194
 800472c:	08004f98 	.word	0x08004f98

08004730 <set_gpio_for_standby>:

void set_gpio_for_standby(void)
{   
 8004730:	b570      	push	{r4, r5, r6, lr}
    // Common
    // LED
    gpio_mode_setup(LED_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, LED);
 8004732:	2580      	movs	r5, #128	; 0x80
 8004734:	01ed      	lsls	r5, r5, #7
 8004736:	24a0      	movs	r4, #160	; 0xa0
 8004738:	05e4      	lsls	r4, r4, #23
 800473a:	002b      	movs	r3, r5
 800473c:	2200      	movs	r2, #0
 800473e:	2103      	movs	r1, #3
 8004740:	0020      	movs	r0, r4
 8004742:	f000 f8c0 	bl	80048c6 <gpio_mode_setup>
    gpio_set(LED_PORT, LED);
 8004746:	0029      	movs	r1, r5
 8004748:	0020      	movs	r0, r4
 800474a:	f000 f8b7 	bl	80048bc <gpio_set>

    // Serial Print
    gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, SPF_USART_TX);
 800474e:	2304      	movs	r3, #4
 8004750:	2201      	movs	r2, #1
 8004752:	2100      	movs	r1, #0
 8004754:	0020      	movs	r0, r4
 8004756:	f000 f8b6 	bl	80048c6 <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE,  SPF_USART_RX);
 800475a:	2308      	movs	r3, #8
 800475c:	2200      	movs	r2, #0
 800475e:	2101      	movs	r1, #1
 8004760:	0020      	movs	r0, r4
 8004762:	f000 f8b0 	bl	80048c6 <gpio_mode_setup>
	gpio_set(SPF_USART_RX_PORT, SPF_USART_RX);
 8004766:	2108      	movs	r1, #8
 8004768:	0020      	movs	r0, r4
 800476a:	f000 f8a7 	bl	80048bc <gpio_set>

    // Batt Sense
    gpio_mode_setup(BATT_SENS_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, BATT_SENS);
 800476e:	2301      	movs	r3, #1
 8004770:	2200      	movs	r2, #0
 8004772:	2103      	movs	r1, #3
 8004774:	0020      	movs	r0, r4
 8004776:	f000 f8a6 	bl	80048c6 <gpio_mode_setup>
    
    // RFM
    // SPI
    gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_ANALOG,   GPIO_PUPD_NONE,       RFM_SPI_MISO);
 800477a:	2340      	movs	r3, #64	; 0x40
 800477c:	2200      	movs	r2, #0
 800477e:	2103      	movs	r1, #3
 8004780:	0020      	movs	r0, r4
 8004782:	f000 f8a0 	bl	80048c6 <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_SCK_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_SCK);
 8004786:	2320      	movs	r3, #32
 8004788:	2202      	movs	r2, #2
 800478a:	2100      	movs	r1, #0
 800478c:	0020      	movs	r0, r4
 800478e:	f000 f89a 	bl	80048c6 <gpio_mode_setup>
    gpio_mode_setup(RFM_SPI_MOSI_PORT,  GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_MOSI);
 8004792:	2380      	movs	r3, #128	; 0x80
 8004794:	2202      	movs	r2, #2
 8004796:	2100      	movs	r1, #0
 8004798:	0020      	movs	r0, r4
 800479a:	f000 f894 	bl	80048c6 <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_NSS_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_SPI_NSS);
 800479e:	2310      	movs	r3, #16
 80047a0:	2201      	movs	r2, #1
 80047a2:	2100      	movs	r1, #0
 80047a4:	0020      	movs	r0, r4
 80047a6:	f000 f88e 	bl	80048c6 <gpio_mode_setup>
    gpio_mode_setup(RFM_RESET_PORT,     GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_RESET);
 80047aa:	4c1e      	ldr	r4, [pc, #120]	; (8004824 <set_gpio_for_standby+0xf4>)
 80047ac:	2301      	movs	r3, #1
 80047ae:	2201      	movs	r2, #1
 80047b0:	2100      	movs	r1, #0
 80047b2:	0020      	movs	r0, r4
 80047b4:	f000 f887 	bl	80048c6 <gpio_mode_setup>

    // DIO
    gpio_mode_setup(RFM_IO_0_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_0);
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	021b      	lsls	r3, r3, #8
 80047bc:	2200      	movs	r2, #0
 80047be:	2103      	movs	r1, #3
 80047c0:	0020      	movs	r0, r4
 80047c2:	f000 f880 	bl	80048c6 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_1_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_1);
 80047c6:	2380      	movs	r3, #128	; 0x80
 80047c8:	015b      	lsls	r3, r3, #5
 80047ca:	2200      	movs	r2, #0
 80047cc:	2103      	movs	r1, #3
 80047ce:	0020      	movs	r0, r4
 80047d0:	f000 f879 	bl	80048c6 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_2_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_2);
 80047d4:	2380      	movs	r3, #128	; 0x80
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	2200      	movs	r2, #0
 80047da:	2103      	movs	r1, #3
 80047dc:	0020      	movs	r0, r4
 80047de:	f000 f872 	bl	80048c6 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_3_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_3);
 80047e2:	2304      	movs	r3, #4
 80047e4:	2200      	movs	r2, #0
 80047e6:	2103      	movs	r1, #3
 80047e8:	0020      	movs	r0, r4
 80047ea:	f000 f86c 	bl	80048c6 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_4_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_4);
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	2200      	movs	r2, #0
 80047f4:	2103      	movs	r1, #3
 80047f6:	0020      	movs	r0, r4
 80047f8:	f000 f865 	bl	80048c6 <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_5_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_5);
 80047fc:	2302      	movs	r3, #2
 80047fe:	2200      	movs	r2, #0
 8004800:	2103      	movs	r1, #3
 8004802:	0020      	movs	r0, r4
 8004804:	f000 f85f 	bl	80048c6 <gpio_mode_setup>

    #ifdef _HUB
    #else

    // TMP
    gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	019b      	lsls	r3, r3, #6
 800480c:	2201      	movs	r2, #1
 800480e:	2100      	movs	r1, #0
 8004810:	0020      	movs	r0, r4
 8004812:	f000 f858 	bl	80048c6 <gpio_mode_setup>
	gpio_mode_setup(TEMP_I2C_SDA_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SDA);
 8004816:	002b      	movs	r3, r5
 8004818:	2201      	movs	r2, #1
 800481a:	2100      	movs	r1, #0
 800481c:	0020      	movs	r0, r4
 800481e:	f000 f852 	bl	80048c6 <gpio_mode_setup>

    #endif

}
 8004822:	bd70      	pop	{r4, r5, r6, pc}
 8004824:	50000400 	.word	0x50000400

08004828 <rtc_isr>:

// Override default rtc interrupt handler
void rtc_isr(void)
{ 
 8004828:	b510      	push	{r4, lr}
    exti_reset_request(EXTI20);
 800482a:	2080      	movs	r0, #128	; 0x80
 800482c:	0340      	lsls	r0, r0, #13
 800482e:	f000 f821 	bl	8004874 <exti_reset_request>

    // scb_reset_system();

    log_init();
 8004832:	f7ff fcf3 	bl	800421c <log_init>
    log_printf(MAIN, "RTC ISR\n");
 8004836:	490d      	ldr	r1, [pc, #52]	; (800486c <rtc_isr+0x44>)
 8004838:	2000      	movs	r0, #0
 800483a:	f7ff fcfd 	bl	8004238 <log_printf>

    if(RTC_ISR & RTC_ISR_WUTF)
 800483e:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <rtc_isr+0x48>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	055b      	lsls	r3, r3, #21
 8004844:	d400      	bmi.n	8004848 <rtc_isr+0x20>
        pwr_clear_standby_flag();
        rtc_lock();
	    pwr_enable_backup_domain_write_protect();
        set_gpio_for_standby();
    }
}
 8004846:	bd10      	pop	{r4, pc}
        pwr_disable_backup_domain_write_protect();
 8004848:	f000 f8a8 	bl	800499c <pwr_disable_backup_domain_write_protect>
        rtc_unlock();
 800484c:	f000 f974 	bl	8004b38 <rtc_unlock>
	    rtc_clear_wakeup_flag();
 8004850:	f000 f980 	bl	8004b54 <rtc_clear_wakeup_flag>
        pwr_clear_wakeup_flag();
 8004854:	f000 f8be 	bl	80049d4 <pwr_clear_wakeup_flag>
        pwr_clear_standby_flag();
 8004858:	f000 f8b4 	bl	80049c4 <pwr_clear_standby_flag>
        rtc_lock();
 800485c:	f000 f974 	bl	8004b48 <rtc_lock>
	    pwr_enable_backup_domain_write_protect();
 8004860:	f000 f8a6 	bl	80049b0 <pwr_enable_backup_domain_write_protect>
        set_gpio_for_standby();
 8004864:	f7ff ff64 	bl	8004730 <set_gpio_for_standby>
}
 8004868:	e7ed      	b.n	8004846 <rtc_isr+0x1e>
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	08004fac 	.word	0x08004fac
 8004870:	4000280c 	.word	0x4000280c

08004874 <exti_reset_request>:
{
#if defined(EXTI_RPR1) && defined(EXTI_FPR1)
	EXTI_RPR1 = extis;
	EXTI_FPR1 = extis;
#else
	EXTI_PR = extis;
 8004874:	4b01      	ldr	r3, [pc, #4]	; (800487c <exti_reset_request+0x8>)
 8004876:	6018      	str	r0, [r3, #0]
#endif
}
 8004878:	4770      	bx	lr
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	40010414 	.word	0x40010414

08004880 <flash_set_ws>:
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8004880:	2101      	movs	r1, #1
	reg32 = FLASH_ACR;
 8004882:	4a03      	ldr	r2, [pc, #12]	; (8004890 <flash_set_ws+0x10>)
 8004884:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8004886:	438b      	bics	r3, r1
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 8004888:	4303      	orrs	r3, r0
	FLASH_ACR = reg32;
 800488a:	6013      	str	r3, [r2, #0]
}
 800488c:	4770      	bx	lr
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	40022000 	.word	0x40022000

08004894 <flash_unlock_pecr>:
 * yourself.
 * @sa flash_unlock
 */
void flash_unlock_pecr(void)
{
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY1;
 8004894:	4b02      	ldr	r3, [pc, #8]	; (80048a0 <flash_unlock_pecr+0xc>)
 8004896:	4a03      	ldr	r2, [pc, #12]	; (80048a4 <flash_unlock_pecr+0x10>)
 8004898:	601a      	str	r2, [r3, #0]
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY2;
 800489a:	4a03      	ldr	r2, [pc, #12]	; (80048a8 <flash_unlock_pecr+0x14>)
 800489c:	601a      	str	r2, [r3, #0]
}
 800489e:	4770      	bx	lr
 80048a0:	4002200c 	.word	0x4002200c
 80048a4:	89abcdef 	.word	0x89abcdef
 80048a8:	02030405 	.word	0x02030405

080048ac <flash_lock_pecr>:

void flash_lock_pecr(void)
{
	FLASH_PECR |= FLASH_PECR_PELOCK;
 80048ac:	2301      	movs	r3, #1
 80048ae:	4a02      	ldr	r2, [pc, #8]	; (80048b8 <flash_lock_pecr+0xc>)
 80048b0:	6811      	ldr	r1, [r2, #0]
 80048b2:	430b      	orrs	r3, r1
 80048b4:	6013      	str	r3, [r2, #0]
}
 80048b6:	4770      	bx	lr
 80048b8:	40022004 	.word	0x40022004

080048bc <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 80048bc:	6181      	str	r1, [r0, #24]
}
 80048be:	4770      	bx	lr

080048c0 <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 80048c0:	0409      	lsls	r1, r1, #16
 80048c2:	6181      	str	r1, [r0, #24]
}
 80048c4:	4770      	bx	lr

080048c6 <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 80048c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048c8:	b085      	sub	sp, #20
 80048ca:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 80048cc:	2703      	movs	r7, #3
	pupd = GPIO_PUPDR(gpioport);
 80048ce:	2100      	movs	r1, #0
{
 80048d0:	9202      	str	r2, [sp, #8]
 80048d2:	9303      	str	r3, [sp, #12]
	moder = GPIO_MODER(gpioport);
 80048d4:	6802      	ldr	r2, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 80048d6:	68c3      	ldr	r3, [r0, #12]
		if (!((1 << i) & gpios)) {
 80048d8:	9c03      	ldr	r4, [sp, #12]
 80048da:	2501      	movs	r5, #1
 80048dc:	410c      	asrs	r4, r1
 80048de:	422c      	tst	r4, r5
 80048e0:	d00a      	beq.n	80048f8 <gpio_mode_setup+0x32>
		moder &= ~GPIO_MODE_MASK(i);
 80048e2:	003d      	movs	r5, r7
 80048e4:	004c      	lsls	r4, r1, #1
 80048e6:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 80048e8:	9e01      	ldr	r6, [sp, #4]
		moder &= ~GPIO_MODE_MASK(i);
 80048ea:	43aa      	bics	r2, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 80048ec:	43ab      	bics	r3, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 80048ee:	9d02      	ldr	r5, [sp, #8]
		moder |= GPIO_MODE(i, mode);
 80048f0:	40a6      	lsls	r6, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 80048f2:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 80048f4:	4332      	orrs	r2, r6
		pupd |= GPIO_PUPD(i, pull_up_down);
 80048f6:	432b      	orrs	r3, r5
	for (i = 0; i < 16; i++) {
 80048f8:	3101      	adds	r1, #1
 80048fa:	2910      	cmp	r1, #16
 80048fc:	d1ec      	bne.n	80048d8 <gpio_mode_setup+0x12>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 80048fe:	6002      	str	r2, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 8004900:	60c3      	str	r3, [r0, #12]
}
 8004902:	b005      	add	sp, #20
 8004904:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004906 <gpio_set_output_options>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_output_options(uint32_t gpioport, uint8_t otype, uint8_t speed,
			     uint16_t gpios)
{
 8004906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004908:	9201      	str	r2, [sp, #4]
	uint16_t i;
	uint32_t ospeedr;

	if (otype == 0x1) {
 800490a:	2901      	cmp	r1, #1
 800490c:	d116      	bne.n	800493c <gpio_set_output_options+0x36>
		GPIO_OTYPER(gpioport) |= gpios;
 800490e:	6841      	ldr	r1, [r0, #4]
 8004910:	4319      	orrs	r1, r3
	} else {
		GPIO_OTYPER(gpioport) &= ~gpios;
	}

	ospeedr = GPIO_OSPEEDR(gpioport);
 8004912:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8004914:	2601      	movs	r6, #1
			continue;
		}
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8004916:	2703      	movs	r7, #3
		GPIO_OTYPER(gpioport) &= ~gpios;
 8004918:	6041      	str	r1, [r0, #4]
	ospeedr = GPIO_OSPEEDR(gpioport);
 800491a:	6881      	ldr	r1, [r0, #8]
		if (!((1 << i) & gpios)) {
 800491c:	001d      	movs	r5, r3
 800491e:	4125      	asrs	r5, r4
 8004920:	4235      	tst	r5, r6
 8004922:	d006      	beq.n	8004932 <gpio_set_output_options+0x2c>
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8004924:	003a      	movs	r2, r7
 8004926:	0065      	lsls	r5, r4, #1
 8004928:	40aa      	lsls	r2, r5
 800492a:	4391      	bics	r1, r2
		ospeedr |= GPIO_OSPEED(i, speed);
 800492c:	9a01      	ldr	r2, [sp, #4]
 800492e:	40aa      	lsls	r2, r5
 8004930:	4311      	orrs	r1, r2
	for (i = 0; i < 16; i++) {
 8004932:	3401      	adds	r4, #1
 8004934:	2c10      	cmp	r4, #16
 8004936:	d1f1      	bne.n	800491c <gpio_set_output_options+0x16>
	}

	GPIO_OSPEEDR(gpioport) = ospeedr;
 8004938:	6081      	str	r1, [r0, #8]
}
 800493a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		GPIO_OTYPER(gpioport) &= ~gpios;
 800493c:	6841      	ldr	r1, [r0, #4]
 800493e:	4399      	bics	r1, r3
 8004940:	e7e7      	b.n	8004912 <gpio_set_output_options+0xc>

08004942 <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 8004942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);
 8004944:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 8004946:	2601      	movs	r6, #1
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 8004948:	270f      	movs	r7, #15
	afrl = GPIO_AFRL(gpioport);
 800494a:	6a04      	ldr	r4, [r0, #32]
{
 800494c:	9100      	str	r1, [sp, #0]
	afrh = GPIO_AFRH(gpioport);
 800494e:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8004950:	9201      	str	r2, [sp, #4]
		if (!((1 << i) & gpios)) {
 8004952:	9d01      	ldr	r5, [sp, #4]
 8004954:	411d      	asrs	r5, r3
 8004956:	4235      	tst	r5, r6
 8004958:	d006      	beq.n	8004968 <gpio_set_af+0x26>
		afrl &= ~GPIO_AFR_MASK(i);
 800495a:	003a      	movs	r2, r7
 800495c:	009d      	lsls	r5, r3, #2
 800495e:	40aa      	lsls	r2, r5
 8004960:	4394      	bics	r4, r2
		afrl |= GPIO_AFR(i, alt_func_num);
 8004962:	9a00      	ldr	r2, [sp, #0]
 8004964:	40aa      	lsls	r2, r5
 8004966:	4314      	orrs	r4, r2
	for (i = 0; i < 8; i++) {
 8004968:	3301      	adds	r3, #1
 800496a:	2b08      	cmp	r3, #8
 800496c:	d1f1      	bne.n	8004952 <gpio_set_af+0x10>
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 800496e:	2601      	movs	r6, #1
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8004970:	270f      	movs	r7, #15
		if (!((1 << i) & gpios)) {
 8004972:	9a01      	ldr	r2, [sp, #4]
 8004974:	411a      	asrs	r2, r3
 8004976:	4232      	tst	r2, r6
 8004978:	d007      	beq.n	800498a <gpio_set_af+0x48>
		afrh &= ~GPIO_AFR_MASK(i - 8);
 800497a:	003a      	movs	r2, r7
 800497c:	009d      	lsls	r5, r3, #2
 800497e:	3d20      	subs	r5, #32
 8004980:	40aa      	lsls	r2, r5
 8004982:	4391      	bics	r1, r2
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 8004984:	9a00      	ldr	r2, [sp, #0]
 8004986:	40aa      	lsls	r2, r5
 8004988:	4311      	orrs	r1, r2
	for (i = 8; i < 16; i++) {
 800498a:	3301      	adds	r3, #1
 800498c:	2b10      	cmp	r3, #16
 800498e:	d1f0      	bne.n	8004972 <gpio_set_af+0x30>
	}

	GPIO_AFRL(gpioport) = afrl;
 8004990:	6204      	str	r4, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 8004992:	6241      	str	r1, [r0, #36]	; 0x24
}
 8004994:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08004996 <lptimer_get_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @returns Counter value.
 */
uint16_t lptimer_get_counter(uint32_t lptimer_peripheral)
{
	return LPTIM_CNT(lptimer_peripheral);
 8004996:	69c0      	ldr	r0, [r0, #28]
 8004998:	b280      	uxth	r0, r0
}
 800499a:	4770      	bx	lr

0800499c <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 800499c:	2380      	movs	r3, #128	; 0x80
 800499e:	4a03      	ldr	r2, [pc, #12]	; (80049ac <pwr_disable_backup_domain_write_protect+0x10>)
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	6811      	ldr	r1, [r2, #0]
 80049a4:	430b      	orrs	r3, r1
 80049a6:	6013      	str	r3, [r2, #0]
}
 80049a8:	4770      	bx	lr
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	40007000 	.word	0x40007000

080049b0 <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 80049b0:	4a02      	ldr	r2, [pc, #8]	; (80049bc <pwr_enable_backup_domain_write_protect+0xc>)
 80049b2:	4903      	ldr	r1, [pc, #12]	; (80049c0 <pwr_enable_backup_domain_write_protect+0x10>)
 80049b4:	6813      	ldr	r3, [r2, #0]
 80049b6:	400b      	ands	r3, r1
 80049b8:	6013      	str	r3, [r2, #0]
}
 80049ba:	4770      	bx	lr
 80049bc:	40007000 	.word	0x40007000
 80049c0:	fffffeff 	.word	0xfffffeff

080049c4 <pwr_clear_standby_flag>:
This is set when the processor returns from a standby mode.
*/

void pwr_clear_standby_flag(void)
{
	PWR_CR |= PWR_CR_CSBF;
 80049c4:	2308      	movs	r3, #8
 80049c6:	4a02      	ldr	r2, [pc, #8]	; (80049d0 <pwr_clear_standby_flag+0xc>)
 80049c8:	6811      	ldr	r1, [r2, #0]
 80049ca:	430b      	orrs	r3, r1
 80049cc:	6013      	str	r3, [r2, #0]
}
 80049ce:	4770      	bx	lr
 80049d0:	40007000 	.word	0x40007000

080049d4 <pwr_clear_wakeup_flag>:
This is set when the processor receives a wakeup signal.
*/

void pwr_clear_wakeup_flag(void)
{
	PWR_CR |= PWR_CR_CWUF;
 80049d4:	2304      	movs	r3, #4
 80049d6:	4a02      	ldr	r2, [pc, #8]	; (80049e0 <pwr_clear_wakeup_flag+0xc>)
 80049d8:	6811      	ldr	r1, [r2, #0]
 80049da:	430b      	orrs	r3, r1
 80049dc:	6013      	str	r3, [r2, #0]
}
 80049de:	4770      	bx	lr
 80049e0:	40007000 	.word	0x40007000

080049e4 <rcc_osc_on>:
uint32_t rcc_ahb_frequency = 2097000;
uint32_t rcc_apb1_frequency = 2097000;
uint32_t rcc_apb2_frequency = 2097000;

void rcc_osc_on(enum rcc_osc osc)
{
 80049e4:	b500      	push	{lr}
 80049e6:	2806      	cmp	r0, #6
 80049e8:	d80b      	bhi.n	8004a02 <rcc_osc_on+0x1e>
 80049ea:	f000 f987 	bl	8004cfc <__gnu_thumb1_case_uqi>
 80049ee:	1004      	.short	0x1004
 80049f0:	1b0b1915 	.word	0x1b0b1915
 80049f4:	1d          	.byte	0x1d
 80049f5:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	4a0c      	ldr	r2, [pc, #48]	; (8004a2c <rcc_osc_on+0x48>)
 80049fa:	045b      	lsls	r3, r3, #17
 80049fc:	6811      	ldr	r1, [r2, #0]
		break;
	case RCC_LSE:
		RCC_CSR |= RCC_CSR_LSEON;
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
 80049fe:	430b      	orrs	r3, r1
 8004a00:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8004a02:	bd00      	pop	{pc}
		RCC_CR |= RCC_CR_MSION;
 8004a04:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <rcc_osc_on+0x48>)
		RCC_CSR |= RCC_CSR_LSEON;
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	6811      	ldr	r1, [r2, #0]
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	e7f7      	b.n	80049fe <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSEON;
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	4a06      	ldr	r2, [pc, #24]	; (8004a2c <rcc_osc_on+0x48>)
 8004a12:	025b      	lsls	r3, r3, #9
 8004a14:	6811      	ldr	r1, [r2, #0]
 8004a16:	e7f2      	b.n	80049fe <rcc_osc_on+0x1a>
		RCC_CRRCR |= RCC_CRRCR_HSI48ON;
 8004a18:	4a05      	ldr	r2, [pc, #20]	; (8004a30 <rcc_osc_on+0x4c>)
		RCC_CSR |= RCC_CSR_LSION;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	6811      	ldr	r1, [r2, #0]
 8004a1e:	e7ee      	b.n	80049fe <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSI16ON;
 8004a20:	4a02      	ldr	r2, [pc, #8]	; (8004a2c <rcc_osc_on+0x48>)
 8004a22:	e7fa      	b.n	8004a1a <rcc_osc_on+0x36>
		RCC_CSR |= RCC_CSR_LSEON;
 8004a24:	4a03      	ldr	r2, [pc, #12]	; (8004a34 <rcc_osc_on+0x50>)
 8004a26:	e7ee      	b.n	8004a06 <rcc_osc_on+0x22>
		RCC_CSR |= RCC_CSR_LSION;
 8004a28:	4a02      	ldr	r2, [pc, #8]	; (8004a34 <rcc_osc_on+0x50>)
 8004a2a:	e7f6      	b.n	8004a1a <rcc_osc_on+0x36>
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	40021008 	.word	0x40021008
 8004a34:	40021050 	.word	0x40021050

08004a38 <rcc_is_osc_ready>:
	cm3_assert_not_reached();
}


bool rcc_is_osc_ready(enum rcc_osc osc)
{
 8004a38:	2300      	movs	r3, #0
 8004a3a:	b500      	push	{lr}
 8004a3c:	2806      	cmp	r0, #6
 8004a3e:	d80a      	bhi.n	8004a56 <rcc_is_osc_ready+0x1e>
 8004a40:	3301      	adds	r3, #1
 8004a42:	f000 f95b 	bl	8004cfc <__gnu_thumb1_case_uqi>
 8004a46:	0a04      	.short	0x0a04
 8004a48:	1a160e12 	.word	0x1a160e12
 8004a4c:	1c          	.byte	0x1c
 8004a4d:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 8004a4e:	4a0d      	ldr	r2, [pc, #52]	; (8004a84 <rcc_is_osc_ready+0x4c>)
 8004a50:	6810      	ldr	r0, [r2, #0]
 8004a52:	0e40      	lsrs	r0, r0, #25
	case RCC_MSI:
		return RCC_CR & RCC_CR_MSIRDY;
	case RCC_LSE:
		return RCC_CSR & RCC_CSR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 8004a54:	4003      	ands	r3, r0
	}
	return false;
}
 8004a56:	0018      	movs	r0, r3
 8004a58:	bd00      	pop	{pc}
		return RCC_CR & RCC_CR_HSERDY;
 8004a5a:	4a0a      	ldr	r2, [pc, #40]	; (8004a84 <rcc_is_osc_ready+0x4c>)
 8004a5c:	6810      	ldr	r0, [r2, #0]
 8004a5e:	0c40      	lsrs	r0, r0, #17
 8004a60:	e7f8      	b.n	8004a54 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_HSI16RDY;
 8004a62:	4a08      	ldr	r2, [pc, #32]	; (8004a84 <rcc_is_osc_ready+0x4c>)
 8004a64:	6810      	ldr	r0, [r2, #0]
 8004a66:	0880      	lsrs	r0, r0, #2
 8004a68:	e7f4      	b.n	8004a54 <rcc_is_osc_ready+0x1c>
		return RCC_CRRCR & RCC_CRRCR_HSI48RDY;
 8004a6a:	4a07      	ldr	r2, [pc, #28]	; (8004a88 <rcc_is_osc_ready+0x50>)
		return RCC_CSR & RCC_CSR_LSIRDY;
 8004a6c:	6810      	ldr	r0, [r2, #0]
 8004a6e:	0840      	lsrs	r0, r0, #1
 8004a70:	e7f0      	b.n	8004a54 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_MSIRDY;
 8004a72:	4a04      	ldr	r2, [pc, #16]	; (8004a84 <rcc_is_osc_ready+0x4c>)
		return RCC_CSR & RCC_CSR_LSERDY;
 8004a74:	6810      	ldr	r0, [r2, #0]
 8004a76:	0a40      	lsrs	r0, r0, #9
 8004a78:	e7ec      	b.n	8004a54 <rcc_is_osc_ready+0x1c>
 8004a7a:	4a04      	ldr	r2, [pc, #16]	; (8004a8c <rcc_is_osc_ready+0x54>)
 8004a7c:	e7fa      	b.n	8004a74 <rcc_is_osc_ready+0x3c>
		return RCC_CSR & RCC_CSR_LSIRDY;
 8004a7e:	4a03      	ldr	r2, [pc, #12]	; (8004a8c <rcc_is_osc_ready+0x54>)
 8004a80:	e7f4      	b.n	8004a6c <rcc_is_osc_ready+0x34>
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	40021000 	.word	0x40021000
 8004a88:	40021008 	.word	0x40021008
 8004a8c:	40021050 	.word	0x40021050

08004a90 <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 8004a90:	b510      	push	{r4, lr}
 8004a92:	0004      	movs	r4, r0
	while (!rcc_is_osc_ready(osc));
 8004a94:	0020      	movs	r0, r4
 8004a96:	f7ff ffcf 	bl	8004a38 <rcc_is_osc_ready>
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	d0fa      	beq.n	8004a94 <rcc_wait_for_osc_ready+0x4>
}
 8004a9e:	bd10      	pop	{r4, pc}

08004aa0 <rcc_set_ppre1>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb1pre
 */

void rcc_set_ppre1(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8004aa0:	4a03      	ldr	r2, [pc, #12]	; (8004ab0 <rcc_set_ppre1+0x10>)
 8004aa2:	4904      	ldr	r1, [pc, #16]	; (8004ab4 <rcc_set_ppre1+0x14>)
 8004aa4:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE1_MASK << RCC_CFGR_PPRE1_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8004aa6:	0200      	lsls	r0, r0, #8
	uint32_t reg = RCC_CFGR
 8004aa8:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8004aaa:	4318      	orrs	r0, r3
 8004aac:	6010      	str	r0, [r2, #0]
}
 8004aae:	4770      	bx	lr
 8004ab0:	4002100c 	.word	0x4002100c
 8004ab4:	fffff8ff 	.word	0xfffff8ff

08004ab8 <rcc_set_ppre2>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb2pre
 */

void rcc_set_ppre2(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8004ab8:	4a03      	ldr	r2, [pc, #12]	; (8004ac8 <rcc_set_ppre2+0x10>)
 8004aba:	4904      	ldr	r1, [pc, #16]	; (8004acc <rcc_set_ppre2+0x14>)
 8004abc:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE2_MASK << RCC_CFGR_PPRE2_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8004abe:	02c0      	lsls	r0, r0, #11
	uint32_t reg = RCC_CFGR
 8004ac0:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8004ac2:	4318      	orrs	r0, r3
 8004ac4:	6010      	str	r0, [r2, #0]
}
 8004ac6:	4770      	bx	lr
 8004ac8:	4002100c 	.word	0x4002100c
 8004acc:	ffffc7ff 	.word	0xffffc7ff

08004ad0 <rcc_set_hpre>:
 * @param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
 */

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8004ad0:	21f0      	movs	r1, #240	; 0xf0
 8004ad2:	4a03      	ldr	r2, [pc, #12]	; (8004ae0 <rcc_set_hpre+0x10>)
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8004ad4:	0100      	lsls	r0, r0, #4
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8004ad6:	6813      	ldr	r3, [r2, #0]
 8004ad8:	438b      	bics	r3, r1
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8004ada:	4318      	orrs	r0, r3
 8004adc:	6010      	str	r0, [r2, #0]
}
 8004ade:	4770      	bx	lr
 8004ae0:	4002100c 	.word	0x4002100c

08004ae4 <rcc_set_msi_range>:
*
 * @param msi_range desired range @ref rcc_icscr_msirange
 */
void rcc_set_msi_range(uint32_t msi_range)
{
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8004ae4:	4a03      	ldr	r2, [pc, #12]	; (8004af4 <rcc_set_msi_range+0x10>)
 8004ae6:	4904      	ldr	r1, [pc, #16]	; (8004af8 <rcc_set_msi_range+0x14>)
 8004ae8:	6813      	ldr	r3, [r2, #0]
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8004aea:	0340      	lsls	r0, r0, #13
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8004aec:	400b      	ands	r3, r1
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8004aee:	4318      	orrs	r0, r3
 8004af0:	6010      	str	r0, [r2, #0]
}
 8004af2:	4770      	bx	lr
 8004af4:	40021004 	.word	0x40021004
 8004af8:	ffff1fff 	.word	0xffff1fff

08004afc <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8004afc:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <rcc_periph_clock_enable+0x18>)
 8004afe:	0942      	lsrs	r2, r0, #5
 8004b00:	18d2      	adds	r2, r2, r3
 8004b02:	231f      	movs	r3, #31
 8004b04:	4018      	ands	r0, r3
 8004b06:	3b1e      	subs	r3, #30
 8004b08:	4083      	lsls	r3, r0
 8004b0a:	6811      	ldr	r1, [r2, #0]
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6013      	str	r3, [r2, #0]
}
 8004b10:	4770      	bx	lr
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	40021000 	.word	0x40021000

08004b18 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8004b18:	4a06      	ldr	r2, [pc, #24]	; (8004b34 <rcc_periph_reset_pulse+0x1c>)
 8004b1a:	0943      	lsrs	r3, r0, #5
 8004b1c:	189b      	adds	r3, r3, r2
 8004b1e:	221f      	movs	r2, #31
 8004b20:	4010      	ands	r0, r2
 8004b22:	3a1e      	subs	r2, #30
 8004b24:	4082      	lsls	r2, r0
 8004b26:	6819      	ldr	r1, [r3, #0]
 8004b28:	4311      	orrs	r1, r2
 8004b2a:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 8004b2c:	6819      	ldr	r1, [r3, #0]
 8004b2e:	4391      	bics	r1, r2
 8004b30:	6019      	str	r1, [r3, #0]
}
 8004b32:	4770      	bx	lr
 8004b34:	40021000 	.word	0x40021000

08004b38 <rtc_unlock>:
/** @brief Unlock write access to the RTC registers

*/
void rtc_unlock(void)
{
	RTC_WPR = 0xca;
 8004b38:	22ca      	movs	r2, #202	; 0xca
 8004b3a:	4b02      	ldr	r3, [pc, #8]	; (8004b44 <rtc_unlock+0xc>)
 8004b3c:	601a      	str	r2, [r3, #0]
	RTC_WPR = 0x53;
 8004b3e:	3a77      	subs	r2, #119	; 0x77
 8004b40:	601a      	str	r2, [r3, #0]
}
 8004b42:	4770      	bx	lr
 8004b44:	40002824 	.word	0x40002824

08004b48 <rtc_lock>:
/** @brief Lock write access to the RTC registers

*/
void rtc_lock(void)
{
	RTC_WPR = 0xff;
 8004b48:	22ff      	movs	r2, #255	; 0xff
 8004b4a:	4b01      	ldr	r3, [pc, #4]	; (8004b50 <rtc_lock+0x8>)
 8004b4c:	601a      	str	r2, [r3, #0]
}
 8004b4e:	4770      	bx	lr
 8004b50:	40002824 	.word	0x40002824

08004b54 <rtc_clear_wakeup_flag>:

@details This function should be called first in the rtc_wkup_isr()
*/
void rtc_clear_wakeup_flag(void)
{
	RTC_ISR &= ~RTC_ISR_WUTF;
 8004b54:	4a02      	ldr	r2, [pc, #8]	; (8004b60 <rtc_clear_wakeup_flag+0xc>)
 8004b56:	4903      	ldr	r1, [pc, #12]	; (8004b64 <rtc_clear_wakeup_flag+0x10>)
 8004b58:	6813      	ldr	r3, [r2, #0]
 8004b5a:	400b      	ands	r3, r1
 8004b5c:	6013      	str	r3, [r2, #0]
}
 8004b5e:	4770      	bx	lr
 8004b60:	4000280c 	.word	0x4000280c
 8004b64:	fffffbff 	.word	0xfffffbff

08004b68 <spi_xfer>:
uint16_t spi_xfer(uint32_t spi, uint16_t data)
{
	spi_write(spi, data);

	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8004b68:	2301      	movs	r3, #1
	SPI_DR(spi) = data;
 8004b6a:	60c1      	str	r1, [r0, #12]
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 8004b6c:	6882      	ldr	r2, [r0, #8]
 8004b6e:	421a      	tst	r2, r3
 8004b70:	d0fc      	beq.n	8004b6c <spi_xfer+0x4>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 8004b72:	68c0      	ldr	r0, [r0, #12]
 8004b74:	b280      	uxth	r0, r0
}
 8004b76:	4770      	bx	lr

08004b78 <usart_set_baudrate>:
void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;

#if defined USART1
	if ((usart == USART1)
 8004b78:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <usart_set_baudrate+0x44>)
{
 8004b7a:	b570      	push	{r4, r5, r6, lr}
 8004b7c:	0005      	movs	r5, r0
 8004b7e:	000c      	movs	r4, r1
 8004b80:	084e      	lsrs	r6, r1, #1
	if ((usart == USART1)
 8004b82:	4298      	cmp	r0, r3
 8004b84:	d107      	bne.n	8004b96 <usart_set_baudrate+0x1e>
#if defined USART6
		|| (usart == USART6)
#endif
		) {
		clock = rcc_apb2_frequency;
 8004b86:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <usart_set_baudrate+0x48>)
 8004b88:	6818      	ldr	r0, [r3, #0]
			+ ((clock % baud) * 256 + baud / 2) / baud;
		return;
	}
#endif

	USART_BRR(usart) = (clock + baud / 2) / baud;
 8004b8a:	0021      	movs	r1, r4
 8004b8c:	1830      	adds	r0, r6, r0
 8004b8e:	f000 f8bf 	bl	8004d10 <__udivsi3>
 8004b92:	60e8      	str	r0, [r5, #12]
 8004b94:	e010      	b.n	8004bb8 <usart_set_baudrate+0x40>
	uint32_t clock = rcc_apb1_frequency;
 8004b96:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <usart_set_baudrate+0x4c>)
 8004b98:	6818      	ldr	r0, [r3, #0]
	if (usart == LPUART1) {
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <usart_set_baudrate+0x50>)
 8004b9c:	429d      	cmp	r5, r3
 8004b9e:	d1f4      	bne.n	8004b8a <usart_set_baudrate+0x12>
		USART_BRR(usart) = (clock / baud) * 256
 8004ba0:	f000 f93c 	bl	8004e1c <__aeabi_uidivmod>
 8004ba4:	0005      	movs	r5, r0
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8004ba6:	0208      	lsls	r0, r1, #8
 8004ba8:	1980      	adds	r0, r0, r6
 8004baa:	0021      	movs	r1, r4
 8004bac:	f000 f8b0 	bl	8004d10 <__udivsi3>
		USART_BRR(usart) = (clock / baud) * 256
 8004bb0:	022d      	lsls	r5, r5, #8
 8004bb2:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <usart_set_baudrate+0x54>)
			+ ((clock % baud) * 256 + baud / 2) / baud;
 8004bb4:	1940      	adds	r0, r0, r5
		USART_BRR(usart) = (clock / baud) * 256
 8004bb6:	6018      	str	r0, [r3, #0]
}
 8004bb8:	bd70      	pop	{r4, r5, r6, pc}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	40013800 	.word	0x40013800
 8004bc0:	2000000c 	.word	0x2000000c
 8004bc4:	20000008 	.word	0x20000008
 8004bc8:	40004800 	.word	0x40004800
 8004bcc:	4000480c 	.word	0x4000480c

08004bd0 <usart_set_databits>:
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
 8004bd0:	2908      	cmp	r1, #8
 8004bd2:	d104      	bne.n	8004bde <usart_set_databits+0xe>
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 8004bd4:	6803      	ldr	r3, [r0, #0]
 8004bd6:	4a04      	ldr	r2, [pc, #16]	; (8004be8 <usart_set_databits+0x18>)
 8004bd8:	4013      	ands	r3, r2
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8004bda:	6003      	str	r3, [r0, #0]
	}
}
 8004bdc:	4770      	bx	lr
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8004bde:	2380      	movs	r3, #128	; 0x80
 8004be0:	6802      	ldr	r2, [r0, #0]
 8004be2:	015b      	lsls	r3, r3, #5
 8004be4:	4313      	orrs	r3, r2
 8004be6:	e7f8      	b.n	8004bda <usart_set_databits+0xa>
 8004be8:	ffffefff 	.word	0xffffefff

08004bec <usart_set_stopbits>:

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 8004bec:	6843      	ldr	r3, [r0, #4]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 8004bee:	4a02      	ldr	r2, [pc, #8]	; (8004bf8 <usart_set_stopbits+0xc>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 8004bf4:	6043      	str	r3, [r0, #4]
}
 8004bf6:	4770      	bx	lr
 8004bf8:	ffffcfff 	.word	0xffffcfff

08004bfc <usart_set_parity>:

void usart_set_parity(uint32_t usart, uint32_t parity)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 8004bfc:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 8004bfe:	4a02      	ldr	r2, [pc, #8]	; (8004c08 <usart_set_parity+0xc>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8004c04:	6003      	str	r3, [r0, #0]
}
 8004c06:	4770      	bx	lr
 8004c08:	fffff9ff 	.word	0xfffff9ff

08004c0c <usart_set_mode>:
void usart_set_mode(uint32_t usart, uint32_t mode)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8004c0c:	220c      	movs	r2, #12
	reg32 = USART_CR1(usart);
 8004c0e:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8004c10:	4393      	bics	r3, r2
 8004c12:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 8004c14:	6003      	str	r3, [r0, #0]
}
 8004c16:	4770      	bx	lr

08004c18 <usart_set_flow_control>:

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 8004c18:	6883      	ldr	r3, [r0, #8]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 8004c1a:	4a02      	ldr	r2, [pc, #8]	; (8004c24 <usart_set_flow_control+0xc>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 8004c20:	6083      	str	r3, [r0, #8]
}
 8004c22:	4770      	bx	lr
 8004c24:	fffffcff 	.word	0xfffffcff

08004c28 <usart_enable>:
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	6802      	ldr	r2, [r0, #0]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	6003      	str	r3, [r0, #0]
}
 8004c30:	4770      	bx	lr

08004c32 <usart_disable>:
usart_reg_base
*/

void usart_disable(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_UE;
 8004c32:	2201      	movs	r2, #1
 8004c34:	6803      	ldr	r3, [r0, #0]
 8004c36:	4393      	bics	r3, r2
 8004c38:	6003      	str	r3, [r0, #0]
}
 8004c3a:	4770      	bx	lr

08004c3c <usart_send_blocking>:
usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(uint32_t usart, uint16_t data)
{
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	000d      	movs	r5, r1
 8004c40:	0004      	movs	r4, r0
	usart_wait_send_ready(usart);
 8004c42:	f000 f809 	bl	8004c58 <usart_wait_send_ready>
	usart_send(usart, data);
 8004c46:	0029      	movs	r1, r5
 8004c48:	0020      	movs	r0, r4
 8004c4a:	f000 f801 	bl	8004c50 <usart_send>
}
 8004c4e:	bd70      	pop	{r4, r5, r6, pc}

08004c50 <usart_send>:
 */

void usart_send(uint32_t usart, uint16_t data)
{
	/* Send data. */
	USART_TDR(usart) = (data & USART_TDR_MASK);
 8004c50:	05c9      	lsls	r1, r1, #23
 8004c52:	0dc9      	lsrs	r1, r1, #23
 8004c54:	6281      	str	r1, [r0, #40]	; 0x28
}
 8004c56:	4770      	bx	lr

08004c58 <usart_wait_send_ready>:
 */

void usart_wait_send_ready(uint32_t usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_ISR(usart) & USART_ISR_TXE) == 0);
 8004c58:	2380      	movs	r3, #128	; 0x80
 8004c5a:	69c2      	ldr	r2, [r0, #28]
 8004c5c:	421a      	tst	r2, r3
 8004c5e:	d0fc      	beq.n	8004c5a <usart_wait_send_ready+0x2>
}
 8004c60:	4770      	bx	lr

08004c62 <usart_get_flag>:
 * @returns boolean: flag set.
 */

bool usart_get_flag(uint32_t usart, uint32_t flag)
{
	return ((USART_ISR(usart) & flag) != 0);
 8004c62:	69c0      	ldr	r0, [r0, #28]
 8004c64:	4008      	ands	r0, r1
 8004c66:	1e41      	subs	r1, r0, #1
 8004c68:	4188      	sbcs	r0, r1
 8004c6a:	b2c0      	uxtb	r0, r0
}
 8004c6c:	4770      	bx	lr

08004c6e <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 8004c6e:	e7fe      	b.n	8004c6e <blocking_handler>

08004c70 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 8004c70:	4770      	bx	lr
	...

08004c74 <reset_handler>:
{
 8004c74:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 8004c76:	4b16      	ldr	r3, [pc, #88]	; (8004cd0 <reset_handler+0x5c>)
 8004c78:	4a16      	ldr	r2, [pc, #88]	; (8004cd4 <reset_handler+0x60>)
 8004c7a:	4917      	ldr	r1, [pc, #92]	; (8004cd8 <reset_handler+0x64>)
 8004c7c:	428b      	cmp	r3, r1
 8004c7e:	d318      	bcc.n	8004cb2 <reset_handler+0x3e>
		*dest++ = 0;
 8004c80:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 8004c82:	4a16      	ldr	r2, [pc, #88]	; (8004cdc <reset_handler+0x68>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d317      	bcc.n	8004cb8 <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	4a15      	ldr	r2, [pc, #84]	; (8004ce0 <reset_handler+0x6c>)
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8004c90:	4c14      	ldr	r4, [pc, #80]	; (8004ce4 <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 8004c92:	430b      	orrs	r3, r1
 8004c94:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8004c96:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <reset_handler+0x74>)
 8004c98:	429c      	cmp	r4, r3
 8004c9a:	d30f      	bcc.n	8004cbc <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8004c9c:	4c13      	ldr	r4, [pc, #76]	; (8004cec <reset_handler+0x78>)
 8004c9e:	4b14      	ldr	r3, [pc, #80]	; (8004cf0 <reset_handler+0x7c>)
 8004ca0:	429c      	cmp	r4, r3
 8004ca2:	d30e      	bcc.n	8004cc2 <reset_handler+0x4e>
	(void)main();
 8004ca4:	f7ff fa0c 	bl	80040c0 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8004ca8:	4c12      	ldr	r4, [pc, #72]	; (8004cf4 <reset_handler+0x80>)
 8004caa:	4b13      	ldr	r3, [pc, #76]	; (8004cf8 <reset_handler+0x84>)
 8004cac:	429c      	cmp	r4, r3
 8004cae:	d30b      	bcc.n	8004cc8 <reset_handler+0x54>
}
 8004cb0:	bd10      	pop	{r4, pc}
		*dest = *src;
 8004cb2:	ca01      	ldmia	r2!, {r0}
 8004cb4:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 8004cb6:	e7e1      	b.n	8004c7c <reset_handler+0x8>
		*dest++ = 0;
 8004cb8:	c302      	stmia	r3!, {r1}
 8004cba:	e7e3      	b.n	8004c84 <reset_handler+0x10>
		(*fp)();
 8004cbc:	cc08      	ldmia	r4!, {r3}
 8004cbe:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8004cc0:	e7e9      	b.n	8004c96 <reset_handler+0x22>
		(*fp)();
 8004cc2:	cc08      	ldmia	r4!, {r3}
 8004cc4:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8004cc6:	e7ea      	b.n	8004c9e <reset_handler+0x2a>
		(*fp)();
 8004cc8:	cc08      	ldmia	r4!, {r3}
 8004cca:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8004ccc:	e7ed      	b.n	8004caa <reset_handler+0x36>
 8004cce:	46c0      	nop			; (mov r8, r8)
 8004cd0:	20000000 	.word	0x20000000
 8004cd4:	08004fb8 	.word	0x08004fb8
 8004cd8:	20000010 	.word	0x20000010
 8004cdc:	2000019c 	.word	0x2000019c
 8004ce0:	e000ed14 	.word	0xe000ed14
 8004ce4:	08004fb8 	.word	0x08004fb8
 8004ce8:	08004fb8 	.word	0x08004fb8
 8004cec:	08004fb8 	.word	0x08004fb8
 8004cf0:	08004fb8 	.word	0x08004fb8
 8004cf4:	08004fb8 	.word	0x08004fb8
 8004cf8:	08004fb8 	.word	0x08004fb8

08004cfc <__gnu_thumb1_case_uqi>:
 8004cfc:	b402      	push	{r1}
 8004cfe:	4671      	mov	r1, lr
 8004d00:	0849      	lsrs	r1, r1, #1
 8004d02:	0049      	lsls	r1, r1, #1
 8004d04:	5c09      	ldrb	r1, [r1, r0]
 8004d06:	0049      	lsls	r1, r1, #1
 8004d08:	448e      	add	lr, r1
 8004d0a:	bc02      	pop	{r1}
 8004d0c:	4770      	bx	lr
 8004d0e:	46c0      	nop			; (mov r8, r8)

08004d10 <__udivsi3>:
 8004d10:	2200      	movs	r2, #0
 8004d12:	0843      	lsrs	r3, r0, #1
 8004d14:	428b      	cmp	r3, r1
 8004d16:	d374      	bcc.n	8004e02 <__udivsi3+0xf2>
 8004d18:	0903      	lsrs	r3, r0, #4
 8004d1a:	428b      	cmp	r3, r1
 8004d1c:	d35f      	bcc.n	8004dde <__udivsi3+0xce>
 8004d1e:	0a03      	lsrs	r3, r0, #8
 8004d20:	428b      	cmp	r3, r1
 8004d22:	d344      	bcc.n	8004dae <__udivsi3+0x9e>
 8004d24:	0b03      	lsrs	r3, r0, #12
 8004d26:	428b      	cmp	r3, r1
 8004d28:	d328      	bcc.n	8004d7c <__udivsi3+0x6c>
 8004d2a:	0c03      	lsrs	r3, r0, #16
 8004d2c:	428b      	cmp	r3, r1
 8004d2e:	d30d      	bcc.n	8004d4c <__udivsi3+0x3c>
 8004d30:	22ff      	movs	r2, #255	; 0xff
 8004d32:	0209      	lsls	r1, r1, #8
 8004d34:	ba12      	rev	r2, r2
 8004d36:	0c03      	lsrs	r3, r0, #16
 8004d38:	428b      	cmp	r3, r1
 8004d3a:	d302      	bcc.n	8004d42 <__udivsi3+0x32>
 8004d3c:	1212      	asrs	r2, r2, #8
 8004d3e:	0209      	lsls	r1, r1, #8
 8004d40:	d065      	beq.n	8004e0e <__udivsi3+0xfe>
 8004d42:	0b03      	lsrs	r3, r0, #12
 8004d44:	428b      	cmp	r3, r1
 8004d46:	d319      	bcc.n	8004d7c <__udivsi3+0x6c>
 8004d48:	e000      	b.n	8004d4c <__udivsi3+0x3c>
 8004d4a:	0a09      	lsrs	r1, r1, #8
 8004d4c:	0bc3      	lsrs	r3, r0, #15
 8004d4e:	428b      	cmp	r3, r1
 8004d50:	d301      	bcc.n	8004d56 <__udivsi3+0x46>
 8004d52:	03cb      	lsls	r3, r1, #15
 8004d54:	1ac0      	subs	r0, r0, r3
 8004d56:	4152      	adcs	r2, r2
 8004d58:	0b83      	lsrs	r3, r0, #14
 8004d5a:	428b      	cmp	r3, r1
 8004d5c:	d301      	bcc.n	8004d62 <__udivsi3+0x52>
 8004d5e:	038b      	lsls	r3, r1, #14
 8004d60:	1ac0      	subs	r0, r0, r3
 8004d62:	4152      	adcs	r2, r2
 8004d64:	0b43      	lsrs	r3, r0, #13
 8004d66:	428b      	cmp	r3, r1
 8004d68:	d301      	bcc.n	8004d6e <__udivsi3+0x5e>
 8004d6a:	034b      	lsls	r3, r1, #13
 8004d6c:	1ac0      	subs	r0, r0, r3
 8004d6e:	4152      	adcs	r2, r2
 8004d70:	0b03      	lsrs	r3, r0, #12
 8004d72:	428b      	cmp	r3, r1
 8004d74:	d301      	bcc.n	8004d7a <__udivsi3+0x6a>
 8004d76:	030b      	lsls	r3, r1, #12
 8004d78:	1ac0      	subs	r0, r0, r3
 8004d7a:	4152      	adcs	r2, r2
 8004d7c:	0ac3      	lsrs	r3, r0, #11
 8004d7e:	428b      	cmp	r3, r1
 8004d80:	d301      	bcc.n	8004d86 <__udivsi3+0x76>
 8004d82:	02cb      	lsls	r3, r1, #11
 8004d84:	1ac0      	subs	r0, r0, r3
 8004d86:	4152      	adcs	r2, r2
 8004d88:	0a83      	lsrs	r3, r0, #10
 8004d8a:	428b      	cmp	r3, r1
 8004d8c:	d301      	bcc.n	8004d92 <__udivsi3+0x82>
 8004d8e:	028b      	lsls	r3, r1, #10
 8004d90:	1ac0      	subs	r0, r0, r3
 8004d92:	4152      	adcs	r2, r2
 8004d94:	0a43      	lsrs	r3, r0, #9
 8004d96:	428b      	cmp	r3, r1
 8004d98:	d301      	bcc.n	8004d9e <__udivsi3+0x8e>
 8004d9a:	024b      	lsls	r3, r1, #9
 8004d9c:	1ac0      	subs	r0, r0, r3
 8004d9e:	4152      	adcs	r2, r2
 8004da0:	0a03      	lsrs	r3, r0, #8
 8004da2:	428b      	cmp	r3, r1
 8004da4:	d301      	bcc.n	8004daa <__udivsi3+0x9a>
 8004da6:	020b      	lsls	r3, r1, #8
 8004da8:	1ac0      	subs	r0, r0, r3
 8004daa:	4152      	adcs	r2, r2
 8004dac:	d2cd      	bcs.n	8004d4a <__udivsi3+0x3a>
 8004dae:	09c3      	lsrs	r3, r0, #7
 8004db0:	428b      	cmp	r3, r1
 8004db2:	d301      	bcc.n	8004db8 <__udivsi3+0xa8>
 8004db4:	01cb      	lsls	r3, r1, #7
 8004db6:	1ac0      	subs	r0, r0, r3
 8004db8:	4152      	adcs	r2, r2
 8004dba:	0983      	lsrs	r3, r0, #6
 8004dbc:	428b      	cmp	r3, r1
 8004dbe:	d301      	bcc.n	8004dc4 <__udivsi3+0xb4>
 8004dc0:	018b      	lsls	r3, r1, #6
 8004dc2:	1ac0      	subs	r0, r0, r3
 8004dc4:	4152      	adcs	r2, r2
 8004dc6:	0943      	lsrs	r3, r0, #5
 8004dc8:	428b      	cmp	r3, r1
 8004dca:	d301      	bcc.n	8004dd0 <__udivsi3+0xc0>
 8004dcc:	014b      	lsls	r3, r1, #5
 8004dce:	1ac0      	subs	r0, r0, r3
 8004dd0:	4152      	adcs	r2, r2
 8004dd2:	0903      	lsrs	r3, r0, #4
 8004dd4:	428b      	cmp	r3, r1
 8004dd6:	d301      	bcc.n	8004ddc <__udivsi3+0xcc>
 8004dd8:	010b      	lsls	r3, r1, #4
 8004dda:	1ac0      	subs	r0, r0, r3
 8004ddc:	4152      	adcs	r2, r2
 8004dde:	08c3      	lsrs	r3, r0, #3
 8004de0:	428b      	cmp	r3, r1
 8004de2:	d301      	bcc.n	8004de8 <__udivsi3+0xd8>
 8004de4:	00cb      	lsls	r3, r1, #3
 8004de6:	1ac0      	subs	r0, r0, r3
 8004de8:	4152      	adcs	r2, r2
 8004dea:	0883      	lsrs	r3, r0, #2
 8004dec:	428b      	cmp	r3, r1
 8004dee:	d301      	bcc.n	8004df4 <__udivsi3+0xe4>
 8004df0:	008b      	lsls	r3, r1, #2
 8004df2:	1ac0      	subs	r0, r0, r3
 8004df4:	4152      	adcs	r2, r2
 8004df6:	0843      	lsrs	r3, r0, #1
 8004df8:	428b      	cmp	r3, r1
 8004dfa:	d301      	bcc.n	8004e00 <__udivsi3+0xf0>
 8004dfc:	004b      	lsls	r3, r1, #1
 8004dfe:	1ac0      	subs	r0, r0, r3
 8004e00:	4152      	adcs	r2, r2
 8004e02:	1a41      	subs	r1, r0, r1
 8004e04:	d200      	bcs.n	8004e08 <__udivsi3+0xf8>
 8004e06:	4601      	mov	r1, r0
 8004e08:	4152      	adcs	r2, r2
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	4770      	bx	lr
 8004e0e:	e7ff      	b.n	8004e10 <__udivsi3+0x100>
 8004e10:	b501      	push	{r0, lr}
 8004e12:	2000      	movs	r0, #0
 8004e14:	f000 f806 	bl	8004e24 <__aeabi_idiv0>
 8004e18:	bd02      	pop	{r1, pc}
 8004e1a:	46c0      	nop			; (mov r8, r8)

08004e1c <__aeabi_uidivmod>:
 8004e1c:	2900      	cmp	r1, #0
 8004e1e:	d0f7      	beq.n	8004e10 <__udivsi3+0x100>
 8004e20:	e776      	b.n	8004d10 <__udivsi3>
 8004e22:	4770      	bx	lr

08004e24 <__aeabi_idiv0>:
 8004e24:	4770      	bx	lr
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	736e6553 	.word	0x736e6553
 8004e2c:	5320726f 	.word	0x5320726f
 8004e30:	74726174 	.word	0x74726174
 8004e34:	0000000a 	.word	0x0000000a
 8004e38:	08004514 	.word	0x08004514
 8004e3c:	08004522 	.word	0x08004522
 8004e40:	08004522 	.word	0x08004522
 8004e44:	08004522 	.word	0x08004522
 8004e48:	08004522 	.word	0x08004522
 8004e4c:	08004522 	.word	0x08004522
 8004e50:	08004522 	.word	0x08004522
 8004e54:	08004522 	.word	0x08004522
 8004e58:	08004522 	.word	0x08004522
 8004e5c:	08004522 	.word	0x08004522
 8004e60:	08004522 	.word	0x08004522
 8004e64:	08004522 	.word	0x08004522
 8004e68:	08004522 	.word	0x08004522
 8004e6c:	08004522 	.word	0x08004522
 8004e70:	08004522 	.word	0x08004522
 8004e74:	08004522 	.word	0x08004522
 8004e78:	08004522 	.word	0x08004522
 8004e7c:	08004522 	.word	0x08004522
 8004e80:	08004522 	.word	0x08004522
 8004e84:	08004522 	.word	0x08004522
 8004e88:	08004522 	.word	0x08004522
 8004e8c:	08004522 	.word	0x08004522
 8004e90:	08004522 	.word	0x08004522
 8004e94:	08004522 	.word	0x08004522
 8004e98:	08004522 	.word	0x08004522
 8004e9c:	08004522 	.word	0x08004522
 8004ea0:	08004522 	.word	0x08004522
 8004ea4:	08004522 	.word	0x08004522
 8004ea8:	08004522 	.word	0x08004522
 8004eac:	08004522 	.word	0x08004522
 8004eb0:	08004522 	.word	0x08004522
 8004eb4:	08004522 	.word	0x08004522
 8004eb8:	08004522 	.word	0x08004522
 8004ebc:	08004522 	.word	0x08004522
 8004ec0:	08004522 	.word	0x08004522
 8004ec4:	08004522 	.word	0x08004522
 8004ec8:	08004522 	.word	0x08004522
 8004ecc:	08004522 	.word	0x08004522
 8004ed0:	08004522 	.word	0x08004522
 8004ed4:	08004522 	.word	0x08004522
 8004ed8:	08004522 	.word	0x08004522
 8004edc:	08004522 	.word	0x08004522
 8004ee0:	08004522 	.word	0x08004522
 8004ee4:	08004522 	.word	0x08004522
 8004ee8:	08004522 	.word	0x08004522
 8004eec:	08004522 	.word	0x08004522
 8004ef0:	08004522 	.word	0x08004522
 8004ef4:	08004522 	.word	0x08004522
 8004ef8:	08004522 	.word	0x08004522
 8004efc:	08004522 	.word	0x08004522
 8004f00:	08004522 	.word	0x08004522
 8004f04:	0800444e 	.word	0x0800444e
 8004f08:	08004522 	.word	0x08004522
 8004f0c:	08004522 	.word	0x08004522
 8004f10:	08004522 	.word	0x08004522
 8004f14:	08004522 	.word	0x08004522
 8004f18:	08004522 	.word	0x08004522
 8004f1c:	08004522 	.word	0x08004522
 8004f20:	08004522 	.word	0x08004522
 8004f24:	08004522 	.word	0x08004522
 8004f28:	08004522 	.word	0x08004522
 8004f2c:	0800444e 	.word	0x0800444e
 8004f30:	080044aa 	.word	0x080044aa
 8004f34:	0800444e 	.word	0x0800444e
 8004f38:	08004522 	.word	0x08004522
 8004f3c:	08004522 	.word	0x08004522
 8004f40:	08004522 	.word	0x08004522
 8004f44:	08004522 	.word	0x08004522
 8004f48:	0800444e 	.word	0x0800444e
 8004f4c:	08004522 	.word	0x08004522
 8004f50:	08004522 	.word	0x08004522
 8004f54:	08004522 	.word	0x08004522
 8004f58:	08004522 	.word	0x08004522
 8004f5c:	08004522 	.word	0x08004522
 8004f60:	0800444e 	.word	0x0800444e
 8004f64:	080044f4 	.word	0x080044f4
 8004f68:	08004522 	.word	0x08004522
 8004f6c:	08004522 	.word	0x08004522
 8004f70:	080044be 	.word	0x080044be
 8004f74:	08004522 	.word	0x08004522
 8004f78:	0800444e 	.word	0x0800444e
 8004f7c:	08004522 	.word	0x08004522
 8004f80:	08004522 	.word	0x08004522
 8004f84:	0800444e 	.word	0x0800444e
 8004f88:	204d4652 	.word	0x204d4652
 8004f8c:	20495053 	.word	0x20495053
 8004f90:	74697257 	.word	0x74697257
 8004f94:	00000065 	.word	0x00000065
 8004f98:	656d6954 	.word	0x656d6954
 8004f9c:	2074756f 	.word	0x2074756f
 8004fa0:	25207325 	.word	0x25207325
 8004fa4:	0a583830 	.word	0x0a583830
 8004fa8:	00000000 	.word	0x00000000
 8004fac:	20435452 	.word	0x20435452
 8004fb0:	0a525349 	.word	0x0a525349
 8004fb4:	00000000 	.word	0x00000000
