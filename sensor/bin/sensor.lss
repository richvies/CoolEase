
sensor/bin/sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b08  08004000  08004000  00000098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .preinit_array 00000000  08006b08  08006b08  00002bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .init_array   00000000  08006b08  08006b08  00002bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000000  08006b08  08006b08  00002bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000010  20000000  08006b08  00002ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000018c  20000010  08006b18  00002bb0  2**2
                  ALLOC
  6 ._user_heap_stack 00001004  2000019c  08006b18  00002bb0  2**0
                  ALLOC
  7 .ARM.attributes 0000002c  00000000  00000000  00002bb0  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000a2e3  00000000  00000000  00002bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00002194  00000000  00000000  0000cebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00000a40  00000000  00000000  0000f053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000a30  00000000  00000000  0000fa93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00005ca7  00000000  00000000  000104c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00008e79  00000000  00000000  0001616a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0001c586  00000000  00000000  0001efe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment      0000004c  00000000  00000000  0003b569  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001870  00000000  00000000  0003b5b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0000398d  00000000  00000000  0003ce28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004000 <vector_table>:
 8004000:	00 20 00 20 bd 54 00 08 b9 54 00 08 b7 54 00 08     . . .T...T...T..
	...
 800402c:	b9 54 00 08 00 00 00 00 00 00 00 00 b9 54 00 08     .T...........T..
 800403c:	b9 54 00 08 b7 54 00 08 b7 54 00 08 71 50 00 08     .T...T...T..qP..
 800404c:	b7 54 00 08 b7 54 00 08 b7 54 00 08 b7 54 00 08     .T...T...T...T..
 800405c:	45 4e 00 08 b7 54 00 08 b7 54 00 08 b7 54 00 08     EN...T...T...T..
 800406c:	b7 54 00 08 b7 54 00 08 b7 54 00 08 b7 54 00 08     .T...T...T...T..
 800407c:	b7 54 00 08 b7 54 00 08 b7 54 00 08 b7 54 00 08     .T...T...T...T..
 800408c:	b7 54 00 08 b7 54 00 08 b7 54 00 08 b7 54 00 08     .T...T...T...T..
 800409c:	b7 54 00 08 b7 54 00 08 b7 54 00 08 b7 54 00 08     .T...T...T...T..
 80040ac:	b7 54 00 08 b7 54 00 08 b7 54 00 08 b7 54 00 08     .T...T...T...T..
 80040bc:	b7 54 00 08                                         .T..

080040c0 <main>:
/*////////////////////////////////////////////////////////////////////////////*/
// Exported Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

int main(void)
{
 80040c0:	b510      	push	{r4, lr}
  	// test_cusb_poll();
  	// test_boot(APP_ADDRESS);
  	// gpio_init();
	log_init();
 80040c2:	f000 f895 	bl	80041f0 <log_init>
	// timers_tim6_init();

	// for(int i = 0; i < 100000; i++){__asm__("nop");};


	log_printf(MAIN, "Sensor Start\n");
 80040c6:	4902      	ldr	r1, [pc, #8]	; (80040d0 <main+0x10>)
 80040c8:	2000      	movs	r0, #0
 80040ca:	f000 f89d 	bl	8004208 <log_printf>
	// test_encryption();
	// test_timeout();
	// test_log();


	for (;;)
 80040ce:	e7fe      	b.n	80040ce <main+0xe>
 80040d0:	08006888 	.word	0x08006888

080040d4 <clock_setup>:
// Static Function Definitions
/*////////////////////////////////////////////////////////////////////////////*/

//  Static Function Definitions
static void clock_setup(void) 
{
 80040d4:	b510      	push	{r4, lr}
	// Enable MSI Osc 2.097Mhz
	rcc_osc_on(RCC_MSI);
 80040d6:	2004      	movs	r0, #4
 80040d8:	f001 f8a8 	bl	800522c <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_MSI);
 80040dc:	2004      	movs	r0, #4
 80040de:	f001 f8fb 	bl	80052d8 <rcc_wait_for_osc_ready>

	// Set MSI to 2.097Mhz
	rcc_set_msi_range(5);
 80040e2:	2005      	movs	r0, #5
 80040e4:	f001 f922 	bl	800532c <rcc_set_msi_range>

	// Set prescalers for AHB, APB1, APB2
	rcc_set_hpre(RCC_CFGR_HPRE_NODIV);				// AHB -> 2.097Mhz
 80040e8:	2000      	movs	r0, #0
 80040ea:	f001 f915 	bl	8005318 <rcc_set_hpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);			// APB1 -> 2.097Mhz
 80040ee:	2000      	movs	r0, #0
 80040f0:	f001 f8fa 	bl	80052e8 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);			// APB2 -> 2.097Mhz
 80040f4:	2000      	movs	r0, #0
 80040f6:	f001 f903 	bl	8005300 <rcc_set_ppre2>

	// Set flash, 2.097Mhz -> 0 waitstates
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 80040fa:	2000      	movs	r0, #0
 80040fc:	f000 ffe4 	bl	80050c8 <flash_set_ws>

	// Set Peripheral Clock Frequencies used
	rcc_ahb_frequency = 2097000;
 8004100:	4b03      	ldr	r3, [pc, #12]	; (8004110 <clock_setup+0x3c>)
 8004102:	4a04      	ldr	r2, [pc, #16]	; (8004114 <clock_setup+0x40>)
 8004104:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 2097000;
 8004106:	4a04      	ldr	r2, [pc, #16]	; (8004118 <clock_setup+0x44>)
 8004108:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = 2097000;
 800410a:	4a04      	ldr	r2, [pc, #16]	; (800411c <clock_setup+0x48>)
 800410c:	6013      	str	r3, [r2, #0]
}
 800410e:	bd10      	pop	{r4, pc}
 8004110:	001fff68 	.word	0x001fff68
 8004114:	20000004 	.word	0x20000004
 8004118:	20000008 	.word	0x20000008
 800411c:	2000000c 	.word	0x2000000c

08004120 <usart_setup>:

static void usart_setup(void) 
{
 8004120:	b510      	push	{r4, lr}
    rcc_periph_clock_enable(RCC_GPIOA);
 8004122:	20b0      	movs	r0, #176	; 0xb0
 8004124:	00c0      	lsls	r0, r0, #3
 8004126:	f001 f90d 	bl	8005344 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_GPIOB);
 800412a:	4824      	ldr	r0, [pc, #144]	; (80041bc <usart_setup+0x9c>)
 800412c:	f001 f90a 	bl	8005344 <rcc_periph_clock_enable>

	gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_TX);
 8004130:	24a0      	movs	r4, #160	; 0xa0
 8004132:	05e4      	lsls	r4, r4, #23
 8004134:	2304      	movs	r3, #4
 8004136:	2200      	movs	r2, #0
 8004138:	2102      	movs	r1, #2
 800413a:	0020      	movs	r0, r4
 800413c:	f000 ffe7 	bl	800510e <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_AF, GPIO_PUPD_NONE, SPF_USART_RX);
 8004140:	2308      	movs	r3, #8
 8004142:	2200      	movs	r2, #0
 8004144:	2102      	movs	r1, #2
 8004146:	0020      	movs	r0, r4
 8004148:	f000 ffe1 	bl	800510e <gpio_mode_setup>
    
    gpio_set_output_options(SPF_USART_TX_PORT, GPIO_OTYPE_PP, GPIO_OSPEED_2MHZ, SPF_USART_TX);
 800414c:	2304      	movs	r3, #4
 800414e:	2200      	movs	r2, #0
 8004150:	2100      	movs	r1, #0
 8004152:	0020      	movs	r0, r4
 8004154:	f000 fffb 	bl	800514e <gpio_set_output_options>

    gpio_set_af(SPF_USART_TX_PORT, SPF_USART_AF, SPF_USART_TX);
 8004158:	2204      	movs	r2, #4
 800415a:	2104      	movs	r1, #4
 800415c:	0020      	movs	r0, r4
 800415e:	f001 f814 	bl	800518a <gpio_set_af>
    gpio_set_af(SPF_USART_RX_PORT, SPF_USART_AF, SPF_USART_RX);
 8004162:	2208      	movs	r2, #8
 8004164:	2104      	movs	r1, #4
 8004166:	0020      	movs	r0, r4
 8004168:	f001 f80f 	bl	800518a <gpio_set_af>
    
	rcc_periph_clock_enable(SPF_USART_RCC);
 800416c:	4814      	ldr	r0, [pc, #80]	; (80041c0 <usart_setup+0xa0>)
 800416e:	f001 f8e9 	bl	8005344 <rcc_periph_clock_enable>
    rcc_periph_reset_pulse(SPF_USART_RCC_RST);
 8004172:	4814      	ldr	r0, [pc, #80]	; (80041c4 <usart_setup+0xa4>)
 8004174:	f001 f8f4 	bl	8005360 <rcc_periph_reset_pulse>
	usart_disable(SPF_USART);
 8004178:	4c13      	ldr	r4, [pc, #76]	; (80041c8 <usart_setup+0xa8>)
 800417a:	0020      	movs	r0, r4
 800417c:	f001 f97d 	bl	800547a <usart_disable>
	usart_set_baudrate(SPF_USART, SPF_USART_BAUD);
 8004180:	21e1      	movs	r1, #225	; 0xe1
 8004182:	0249      	lsls	r1, r1, #9
 8004184:	0020      	movs	r0, r4
 8004186:	f001 f91b 	bl	80053c0 <usart_set_baudrate>
	usart_set_databits(SPF_USART, 8);
 800418a:	2108      	movs	r1, #8
 800418c:	0020      	movs	r0, r4
 800418e:	f001 f943 	bl	8005418 <usart_set_databits>
	usart_set_stopbits(SPF_USART,USART_STOPBITS_1);
 8004192:	2100      	movs	r1, #0
 8004194:	0020      	movs	r0, r4
 8004196:	f001 f94d 	bl	8005434 <usart_set_stopbits>
	usart_set_mode(SPF_USART, USART_MODE_TX_RX);
 800419a:	210c      	movs	r1, #12
 800419c:	0020      	movs	r0, r4
 800419e:	f001 f959 	bl	8005454 <usart_set_mode>
	usart_set_parity(SPF_USART, USART_PARITY_NONE);
 80041a2:	2100      	movs	r1, #0
 80041a4:	0020      	movs	r0, r4
 80041a6:	f001 f94d 	bl	8005444 <usart_set_parity>
	usart_set_flow_control(SPF_USART, USART_FLOWCONTROL_NONE);
 80041aa:	2100      	movs	r1, #0
 80041ac:	0020      	movs	r0, r4
 80041ae:	f001 f957 	bl	8005460 <usart_set_flow_control>
	usart_enable(SPF_USART);
 80041b2:	0020      	movs	r0, r4
 80041b4:	f001 f95c 	bl	8005470 <usart_enable>
}
 80041b8:	bd10      	pop	{r4, pc}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	00000581 	.word	0x00000581
 80041c0:	00000711 	.word	0x00000711
 80041c4:	00000511 	.word	0x00000511
 80041c8:	40004400 	.word	0x40004400

080041cc <_putchar>:

static void _putchar(char character, void* buffer, size_t idx, size_t maxlen)
{
 80041cc:	b510      	push	{r4, lr}
 80041ce:	0004      	movs	r4, r0
	(void)buffer; (void)idx; (void)maxlen;

    mem_eeprom_write_byte(curr_address++, character);
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <_putchar+0x1c>)
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	1c42      	adds	r2, r0, #1
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	0021      	movs	r1, r4
 80041da:	f000 f837 	bl	800424c <mem_eeprom_write_byte>

    #ifdef DEBUG
	usart_send_blocking(SPF_USART, character);	
 80041de:	b2a1      	uxth	r1, r4
 80041e0:	4802      	ldr	r0, [pc, #8]	; (80041ec <_putchar+0x20>)
 80041e2:	f001 f94f 	bl	8005484 <usart_send_blocking>
    #endif		
}
 80041e6:	bd10      	pop	{r4, pc}
 80041e8:	20000000 	.word	0x20000000
 80041ec:	40004400 	.word	0x40004400

080041f0 <log_init>:
{
 80041f0:	b510      	push	{r4, lr}
    curr_address = 0;
 80041f2:	4b04      	ldr	r3, [pc, #16]	; (8004204 <log_init+0x14>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
    clock_setup();
 80041f8:	f7ff ff6c 	bl	80040d4 <clock_setup>
    usart_setup();
 80041fc:	f7ff ff90 	bl	8004120 <usart_setup>
}
 8004200:	bd10      	pop	{r4, pc}
 8004202:	46c0      	nop			; (mov r8, r8)
 8004204:	20000000 	.word	0x20000000

08004208 <log_printf>:
{
 8004208:	b40e      	push	{r1, r2, r3}
 800420a:	b500      	push	{lr}
 800420c:	b084      	sub	sp, #16
 800420e:	aa05      	add	r2, sp, #20
 8004210:	ca08      	ldmia	r2!, {r3}
	va_start(va, format);
 8004212:	9202      	str	r2, [sp, #8]
    switch (type)
 8004214:	2800      	cmp	r0, #0
 8004216:	d007      	beq.n	8004228 <log_printf+0x20>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {__asm__("nop");}
 8004218:	2140      	movs	r1, #64	; 0x40
 800421a:	480a      	ldr	r0, [pc, #40]	; (8004244 <log_printf+0x3c>)
 800421c:	f001 f945 	bl	80054aa <usart_get_flag>
 8004220:	2800      	cmp	r0, #0
 8004222:	d10a      	bne.n	800423a <log_printf+0x32>
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	e7f7      	b.n	8004218 <log_printf+0x10>
        _vsnprintf(_putchar, buffer, (size_t)-1, format, va);
 8004228:	2201      	movs	r2, #1
 800422a:	9902      	ldr	r1, [sp, #8]
 800422c:	9100      	str	r1, [sp, #0]
 800422e:	4252      	negs	r2, r2
 8004230:	a903      	add	r1, sp, #12
 8004232:	4805      	ldr	r0, [pc, #20]	; (8004248 <log_printf+0x40>)
 8004234:	f000 fb20 	bl	8004878 <_vsnprintf>
    while(!usart_get_flag(SPF_USART, USART_ISR_TC)) {__asm__("nop");}
 8004238:	e7ee      	b.n	8004218 <log_printf+0x10>
}
 800423a:	b004      	add	sp, #16
 800423c:	bc08      	pop	{r3}
 800423e:	b003      	add	sp, #12
 8004240:	4718      	bx	r3
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	40004400 	.word	0x40004400
 8004248:	080041cd 	.word	0x080041cd

0800424c <mem_eeprom_write_byte>:

    return true;
}

bool mem_eeprom_write_byte(uint32_t address, uint8_t data)
{
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	0004      	movs	r4, r0
 8004250:	000d      	movs	r5, r1
    if( !(address >= EEPROM_START && address < EEPROM_END) )
 8004252:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <mem_eeprom_write_byte+0x44>)
 8004254:	18c2      	adds	r2, r0, r3
 8004256:	2380      	movs	r3, #128	; 0x80
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	429a      	cmp	r2, r3
 800425c:	d301      	bcc.n	8004262 <mem_eeprom_write_byte+0x16>
        return false;
 800425e:	2000      	movs	r0, #0
        FLASH_SR = FLASH_SR_EOP;

    flash_lock_pecr();

    return true;
}
 8004260:	bd70      	pop	{r4, r5, r6, pc}
    flash_unlock_pecr();
 8004262:	f000 ff3b 	bl	80050dc <flash_unlock_pecr>
    FLASH_PECR &= ~FLASH_PECR_FTDW;
 8004266:	4a0b      	ldr	r2, [pc, #44]	; (8004294 <mem_eeprom_write_byte+0x48>)
 8004268:	6813      	ldr	r3, [r2, #0]
 800426a:	490b      	ldr	r1, [pc, #44]	; (8004298 <mem_eeprom_write_byte+0x4c>)
 800426c:	400b      	ands	r3, r1
 800426e:	6013      	str	r3, [r2, #0]
    MMIO8(address) = data;
 8004270:	7025      	strb	r5, [r4, #0]
    while (FLASH_SR & FLASH_SR_BSY);
 8004272:	4b0a      	ldr	r3, [pc, #40]	; (800429c <mem_eeprom_write_byte+0x50>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	07db      	lsls	r3, r3, #31
 8004278:	d4fb      	bmi.n	8004272 <mem_eeprom_write_byte+0x26>
    if (FLASH_SR & FLASH_SR_EOP)
 800427a:	4b08      	ldr	r3, [pc, #32]	; (800429c <mem_eeprom_write_byte+0x50>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	079b      	lsls	r3, r3, #30
 8004280:	d502      	bpl.n	8004288 <mem_eeprom_write_byte+0x3c>
        FLASH_SR = FLASH_SR_EOP;
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <mem_eeprom_write_byte+0x50>)
 8004284:	2202      	movs	r2, #2
 8004286:	601a      	str	r2, [r3, #0]
    flash_lock_pecr();
 8004288:	f000 ff34 	bl	80050f4 <flash_lock_pecr>
    return true;
 800428c:	2001      	movs	r0, #1
 800428e:	e7e7      	b.n	8004260 <mem_eeprom_write_byte+0x14>
 8004290:	f7f80000 	.word	0xf7f80000
 8004294:	40022004 	.word	0x40022004
 8004298:	fffffeff 	.word	0xfffffeff
 800429c:	40022018 	.word	0x40022018

080042a0 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80042a0:	4770      	bx	lr

080042a2 <_atoi>:
}


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80042a2:	0001      	movs	r1, r0
  unsigned int i = 0U;
 80042a4:	2000      	movs	r0, #0
  while (_is_digit(**str)) {
 80042a6:	680a      	ldr	r2, [r1, #0]
 80042a8:	7813      	ldrb	r3, [r2, #0]
  return (ch >= '0') && (ch <= '9');
 80042aa:	3b30      	subs	r3, #48	; 0x30
 80042ac:	b2db      	uxtb	r3, r3
  while (_is_digit(**str)) {
 80042ae:	2b09      	cmp	r3, #9
 80042b0:	d808      	bhi.n	80042c4 <_atoi+0x22>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80042b2:	0083      	lsls	r3, r0, #2
 80042b4:	181b      	adds	r3, r3, r0
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	1c50      	adds	r0, r2, #1
 80042ba:	6008      	str	r0, [r1, #0]
 80042bc:	7810      	ldrb	r0, [r2, #0]
 80042be:	18c0      	adds	r0, r0, r3
 80042c0:	3830      	subs	r0, #48	; 0x30
 80042c2:	e7f0      	b.n	80042a6 <_atoi+0x4>
  }
  return i;
}
 80042c4:	4770      	bx	lr

080042c6 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80042c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c8:	46de      	mov	lr, fp
 80042ca:	4657      	mov	r7, sl
 80042cc:	464e      	mov	r6, r9
 80042ce:	4645      	mov	r5, r8
 80042d0:	b5e0      	push	{r5, r6, r7, lr}
 80042d2:	b083      	sub	sp, #12
 80042d4:	4693      	mov	fp, r2
 80042d6:	001f      	movs	r7, r3
 80042d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042da:	469a      	mov	sl, r3
 80042dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80042de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042e0:	4699      	mov	r9, r3
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80042e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042e4:	079b      	lsls	r3, r3, #30
 80042e6:	d003      	beq.n	80042f0 <_out_rev+0x2a>
 80042e8:	46b8      	mov	r8, r7
 80042ea:	000f      	movs	r7, r1
 80042ec:	0006      	movs	r6, r0
 80042ee:	e022      	b.n	8004336 <_out_rev+0x70>
 80042f0:	9201      	str	r2, [sp, #4]
 80042f2:	46a3      	mov	fp, r4
 80042f4:	4688      	mov	r8, r1
 80042f6:	464e      	mov	r6, r9
 80042f8:	46b9      	mov	r9, r7
 80042fa:	0007      	movs	r7, r0
    for (size_t i = len; i < width; i++) {
 80042fc:	42b4      	cmp	r4, r6
 80042fe:	d207      	bcs.n	8004310 <_out_rev+0x4a>
      out(' ', buffer, idx++, maxlen);
 8004300:	1c55      	adds	r5, r2, #1
 8004302:	464b      	mov	r3, r9
 8004304:	4641      	mov	r1, r8
 8004306:	2020      	movs	r0, #32
 8004308:	47b8      	blx	r7
    for (size_t i = len; i < width; i++) {
 800430a:	3401      	adds	r4, #1
      out(' ', buffer, idx++, maxlen);
 800430c:	002a      	movs	r2, r5
 800430e:	e7f5      	b.n	80042fc <_out_rev+0x36>
 8004310:	003d      	movs	r5, r7
 8004312:	464f      	mov	r7, r9
 8004314:	465c      	mov	r4, fp
 8004316:	9b01      	ldr	r3, [sp, #4]
 8004318:	469b      	mov	fp, r3
 800431a:	46b1      	mov	r9, r6
 800431c:	4646      	mov	r6, r8
 800431e:	46b8      	mov	r8, r7
 8004320:	0037      	movs	r7, r6
 8004322:	002e      	movs	r6, r5
 8004324:	e007      	b.n	8004336 <_out_rev+0x70>
    }
  }

  // reverse string
  while (len) {
    out(buf[--len], buffer, idx++, maxlen);
 8004326:	3c01      	subs	r4, #1
 8004328:	1c55      	adds	r5, r2, #1
 800432a:	4653      	mov	r3, sl
 800432c:	5d18      	ldrb	r0, [r3, r4]
 800432e:	4643      	mov	r3, r8
 8004330:	0039      	movs	r1, r7
 8004332:	47b0      	blx	r6
 8004334:	002a      	movs	r2, r5
  while (len) {
 8004336:	2c00      	cmp	r4, #0
 8004338:	d1f5      	bne.n	8004326 <_out_rev+0x60>
 800433a:	0035      	movs	r5, r6
 800433c:	003e      	movs	r6, r7
 800433e:	4647      	mov	r7, r8
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8004340:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004342:	079b      	lsls	r3, r3, #30
 8004344:	d407      	bmi.n	8004356 <_out_rev+0x90>
      out(' ', buffer, idx++, maxlen);
    }
  }

  return idx;
}
 8004346:	0010      	movs	r0, r2
 8004348:	b003      	add	sp, #12
 800434a:	bcf0      	pop	{r4, r5, r6, r7}
 800434c:	46bb      	mov	fp, r7
 800434e:	46b2      	mov	sl, r6
 8004350:	46a9      	mov	r9, r5
 8004352:	46a0      	mov	r8, r4
 8004354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004356:	46b0      	mov	r8, r6
 8004358:	464e      	mov	r6, r9
 800435a:	46b9      	mov	r9, r7
 800435c:	002f      	movs	r7, r5
 800435e:	465d      	mov	r5, fp
    while (idx - start_idx < width) {
 8004360:	1b53      	subs	r3, r2, r5
 8004362:	42b3      	cmp	r3, r6
 8004364:	d2ef      	bcs.n	8004346 <_out_rev+0x80>
      out(' ', buffer, idx++, maxlen);
 8004366:	1c54      	adds	r4, r2, #1
 8004368:	464b      	mov	r3, r9
 800436a:	4641      	mov	r1, r8
 800436c:	2020      	movs	r0, #32
 800436e:	47b8      	blx	r7
 8004370:	0022      	movs	r2, r4
 8004372:	e7f5      	b.n	8004360 <_out_rev+0x9a>

08004374 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004376:	46ce      	mov	lr, r9
 8004378:	4647      	mov	r7, r8
 800437a:	b580      	push	{r7, lr}
 800437c:	b085      	sub	sp, #20
 800437e:	4694      	mov	ip, r2
 8004380:	4698      	mov	r8, r3
 8004382:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004384:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004386:	ab0e      	add	r3, sp, #56	; 0x38
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	4699      	mov	r9, r3
 800438c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800438e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004390:	9e12      	ldr	r6, [sp, #72]	; 0x48
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8004392:	07b7      	lsls	r7, r6, #30
 8004394:	d41b      	bmi.n	80043ce <_ntoa_format+0x5a>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004396:	2b00      	cmp	r3, #0
 8004398:	d008      	beq.n	80043ac <_ntoa_format+0x38>
 800439a:	07f7      	lsls	r7, r6, #31
 800439c:	d506      	bpl.n	80043ac <_ntoa_format+0x38>
 800439e:	464f      	mov	r7, r9
 80043a0:	2f00      	cmp	r7, #0
 80043a2:	d102      	bne.n	80043aa <_ntoa_format+0x36>
 80043a4:	370c      	adds	r7, #12
 80043a6:	4237      	tst	r7, r6
 80043a8:	d000      	beq.n	80043ac <_ntoa_format+0x38>
      width--;
 80043aa:	3b01      	subs	r3, #1
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80043ac:	4294      	cmp	r4, r2
 80043ae:	d208      	bcs.n	80043c2 <_ntoa_format+0x4e>
 80043b0:	2c1f      	cmp	r4, #31
 80043b2:	d806      	bhi.n	80043c2 <_ntoa_format+0x4e>
      buf[len++] = '0';
 80043b4:	2730      	movs	r7, #48	; 0x30
 80043b6:	552f      	strb	r7, [r5, r4]
 80043b8:	3401      	adds	r4, #1
 80043ba:	e7f7      	b.n	80043ac <_ntoa_format+0x38>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
 80043bc:	2730      	movs	r7, #48	; 0x30
 80043be:	552f      	strb	r7, [r5, r4]
 80043c0:	3401      	adds	r4, #1
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80043c2:	07f7      	lsls	r7, r6, #31
 80043c4:	d503      	bpl.n	80043ce <_ntoa_format+0x5a>
 80043c6:	429c      	cmp	r4, r3
 80043c8:	d201      	bcs.n	80043ce <_ntoa_format+0x5a>
 80043ca:	2c1f      	cmp	r4, #31
 80043cc:	d9f6      	bls.n	80043bc <_ntoa_format+0x48>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80043ce:	06f7      	lsls	r7, r6, #27
 80043d0:	d515      	bpl.n	80043fe <_ntoa_format+0x8a>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80043d2:	0577      	lsls	r7, r6, #21
 80043d4:	d405      	bmi.n	80043e2 <_ntoa_format+0x6e>
 80043d6:	2c00      	cmp	r4, #0
 80043d8:	d003      	beq.n	80043e2 <_ntoa_format+0x6e>
 80043da:	4294      	cmp	r4, r2
 80043dc:	d024      	beq.n	8004428 <_ntoa_format+0xb4>
 80043de:	429c      	cmp	r4, r3
 80043e0:	d022      	beq.n	8004428 <_ntoa_format+0xb4>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80043e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80043e4:	2a10      	cmp	r2, #16
 80043e6:	d02b      	beq.n	8004440 <_ntoa_format+0xcc>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80043e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80043ea:	2a10      	cmp	r2, #16
 80043ec:	d030      	beq.n	8004450 <_ntoa_format+0xdc>
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80043ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80043f0:	2a02      	cmp	r2, #2
 80043f2:	d035      	beq.n	8004460 <_ntoa_format+0xec>
      buf[len++] = 'b';
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80043f4:	2c1f      	cmp	r4, #31
 80043f6:	d802      	bhi.n	80043fe <_ntoa_format+0x8a>
      buf[len++] = '0';
 80043f8:	2230      	movs	r2, #48	; 0x30
 80043fa:	552a      	strb	r2, [r5, r4]
 80043fc:	3401      	adds	r4, #1
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80043fe:	2c1f      	cmp	r4, #31
 8004400:	d805      	bhi.n	800440e <_ntoa_format+0x9a>
    if (negative) {
 8004402:	464a      	mov	r2, r9
 8004404:	2a00      	cmp	r2, #0
 8004406:	d031      	beq.n	800446c <_ntoa_format+0xf8>
      buf[len++] = '-';
 8004408:	222d      	movs	r2, #45	; 0x2d
 800440a:	552a      	strb	r2, [r5, r4]
 800440c:	3401      	adds	r4, #1
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800440e:	9603      	str	r6, [sp, #12]
 8004410:	9302      	str	r3, [sp, #8]
 8004412:	9401      	str	r4, [sp, #4]
 8004414:	9500      	str	r5, [sp, #0]
 8004416:	4643      	mov	r3, r8
 8004418:	4662      	mov	r2, ip
 800441a:	f7ff ff54 	bl	80042c6 <_out_rev>
}
 800441e:	b005      	add	sp, #20
 8004420:	bcc0      	pop	{r6, r7}
 8004422:	46b9      	mov	r9, r7
 8004424:	46b0      	mov	r8, r6
 8004426:	bdf0      	pop	{r4, r5, r6, r7, pc}
      len--;
 8004428:	1e62      	subs	r2, r4, #1
      if (len && (base == 16U)) {
 800442a:	2c01      	cmp	r4, #1
 800442c:	d006      	beq.n	800443c <_ntoa_format+0xc8>
 800442e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8004430:	2f10      	cmp	r7, #16
 8004432:	d001      	beq.n	8004438 <_ntoa_format+0xc4>
      len--;
 8004434:	0014      	movs	r4, r2
 8004436:	e7d4      	b.n	80043e2 <_ntoa_format+0x6e>
        len--;
 8004438:	3c02      	subs	r4, #2
 800443a:	e7d2      	b.n	80043e2 <_ntoa_format+0x6e>
      len--;
 800443c:	0014      	movs	r4, r2
 800443e:	e7d0      	b.n	80043e2 <_ntoa_format+0x6e>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004440:	06b2      	lsls	r2, r6, #26
 8004442:	d4d1      	bmi.n	80043e8 <_ntoa_format+0x74>
 8004444:	2c1f      	cmp	r4, #31
 8004446:	d8cf      	bhi.n	80043e8 <_ntoa_format+0x74>
      buf[len++] = 'x';
 8004448:	2278      	movs	r2, #120	; 0x78
 800444a:	552a      	strb	r2, [r5, r4]
 800444c:	3401      	adds	r4, #1
 800444e:	e7d1      	b.n	80043f4 <_ntoa_format+0x80>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004450:	06b2      	lsls	r2, r6, #26
 8004452:	d5cc      	bpl.n	80043ee <_ntoa_format+0x7a>
 8004454:	2c1f      	cmp	r4, #31
 8004456:	d8ca      	bhi.n	80043ee <_ntoa_format+0x7a>
      buf[len++] = 'X';
 8004458:	2258      	movs	r2, #88	; 0x58
 800445a:	552a      	strb	r2, [r5, r4]
 800445c:	3401      	adds	r4, #1
 800445e:	e7c9      	b.n	80043f4 <_ntoa_format+0x80>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004460:	2c1f      	cmp	r4, #31
 8004462:	d8c7      	bhi.n	80043f4 <_ntoa_format+0x80>
      buf[len++] = 'b';
 8004464:	3260      	adds	r2, #96	; 0x60
 8004466:	552a      	strb	r2, [r5, r4]
 8004468:	3401      	adds	r4, #1
 800446a:	e7c3      	b.n	80043f4 <_ntoa_format+0x80>
    else if (flags & FLAGS_PLUS) {
 800446c:	0772      	lsls	r2, r6, #29
 800446e:	d503      	bpl.n	8004478 <_ntoa_format+0x104>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004470:	222b      	movs	r2, #43	; 0x2b
 8004472:	552a      	strb	r2, [r5, r4]
 8004474:	3401      	adds	r4, #1
 8004476:	e7ca      	b.n	800440e <_ntoa_format+0x9a>
    else if (flags & FLAGS_SPACE) {
 8004478:	0732      	lsls	r2, r6, #28
 800447a:	d5c8      	bpl.n	800440e <_ntoa_format+0x9a>
      buf[len++] = ' ';
 800447c:	2220      	movs	r2, #32
 800447e:	552a      	strb	r2, [r5, r4]
 8004480:	3401      	adds	r4, #1
 8004482:	e7c4      	b.n	800440e <_ntoa_format+0x9a>

08004484 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004486:	46de      	mov	lr, fp
 8004488:	4657      	mov	r7, sl
 800448a:	464e      	mov	r6, r9
 800448c:	4645      	mov	r5, r8
 800448e:	b5e0      	push	{r5, r6, r7, lr}
 8004490:	b093      	sub	sp, #76	; 0x4c
 8004492:	4681      	mov	r9, r0
 8004494:	468a      	mov	sl, r1
 8004496:	9208      	str	r2, [sp, #32]
 8004498:	9309      	str	r3, [sp, #36]	; 0x24
 800449a:	ab1c      	add	r3, sp, #112	; 0x70
 800449c:	cb10      	ldmia	r3!, {r4}
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	469b      	mov	fp, r3
 80044a2:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80044a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044a6:	4698      	mov	r8, r3
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 80044a8:	2c00      	cmp	r4, #0
 80044aa:	d103      	bne.n	80044b4 <_ntoa_long+0x30>
    flags &= ~FLAGS_HASH;
 80044ac:	2310      	movs	r3, #16
 80044ae:	4642      	mov	r2, r8
 80044b0:	439a      	bics	r2, r3
 80044b2:	4690      	mov	r8, r2
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80044b4:	2380      	movs	r3, #128	; 0x80
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4646      	mov	r6, r8
 80044ba:	401e      	ands	r6, r3
 80044bc:	4642      	mov	r2, r8
 80044be:	421a      	tst	r2, r3
 80044c0:	d012      	beq.n	80044e8 <_ntoa_long+0x64>
 80044c2:	2c00      	cmp	r4, #0
 80044c4:	d022      	beq.n	800450c <_ntoa_long+0x88>
 80044c6:	2600      	movs	r6, #0
 80044c8:	e00e      	b.n	80044e8 <_ntoa_long+0x64>
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80044ca:	3330      	adds	r3, #48	; 0x30
 80044cc:	b2d9      	uxtb	r1, r3
 80044ce:	1c77      	adds	r7, r6, #1
 80044d0:	ab0a      	add	r3, sp, #40	; 0x28
 80044d2:	5599      	strb	r1, [r3, r6]
      value /= base;
 80044d4:	0029      	movs	r1, r5
 80044d6:	0020      	movs	r0, r4
 80044d8:	f001 f83e 	bl	8005558 <__udivsi3>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80044dc:	42ac      	cmp	r4, r5
 80044de:	d316      	bcc.n	800450e <_ntoa_long+0x8a>
 80044e0:	2f1f      	cmp	r7, #31
 80044e2:	d814      	bhi.n	800450e <_ntoa_long+0x8a>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80044e4:	003e      	movs	r6, r7
      value /= base;
 80044e6:	0004      	movs	r4, r0
      const char digit = (char)(value % base);
 80044e8:	0029      	movs	r1, r5
 80044ea:	0020      	movs	r0, r4
 80044ec:	f001 f8ba 	bl	8005664 <__aeabi_uidivmod>
 80044f0:	b2cb      	uxtb	r3, r1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80044f2:	2b09      	cmp	r3, #9
 80044f4:	d9e9      	bls.n	80044ca <_ntoa_long+0x46>
 80044f6:	4642      	mov	r2, r8
 80044f8:	0692      	lsls	r2, r2, #26
 80044fa:	d505      	bpl.n	8004508 <_ntoa_long+0x84>
 80044fc:	2141      	movs	r1, #65	; 0x41
 80044fe:	18c9      	adds	r1, r1, r3
 8004500:	b2c9      	uxtb	r1, r1
 8004502:	390a      	subs	r1, #10
 8004504:	b2c9      	uxtb	r1, r1
 8004506:	e7e2      	b.n	80044ce <_ntoa_long+0x4a>
 8004508:	2161      	movs	r1, #97	; 0x61
 800450a:	e7f8      	b.n	80044fe <_ntoa_long+0x7a>
  size_t len = 0U;
 800450c:	0027      	movs	r7, r4
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800450e:	4643      	mov	r3, r8
 8004510:	9306      	str	r3, [sp, #24]
 8004512:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004514:	9305      	str	r3, [sp, #20]
 8004516:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004518:	9304      	str	r3, [sp, #16]
 800451a:	9503      	str	r5, [sp, #12]
 800451c:	465b      	mov	r3, fp
 800451e:	9302      	str	r3, [sp, #8]
 8004520:	9701      	str	r7, [sp, #4]
 8004522:	ab0a      	add	r3, sp, #40	; 0x28
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004528:	9a08      	ldr	r2, [sp, #32]
 800452a:	4651      	mov	r1, sl
 800452c:	4648      	mov	r0, r9
 800452e:	f7ff ff21 	bl	8004374 <_ntoa_format>
}
 8004532:	b013      	add	sp, #76	; 0x4c
 8004534:	bcf0      	pop	{r4, r5, r6, r7}
 8004536:	46bb      	mov	fp, r7
 8004538:	46b2      	mov	sl, r6
 800453a:	46a9      	mov	r9, r5
 800453c:	46a0      	mov	r8, r4
 800453e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004540 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004542:	46de      	mov	lr, fp
 8004544:	4657      	mov	r7, sl
 8004546:	464e      	mov	r6, r9
 8004548:	4645      	mov	r5, r8
 800454a:	b5e0      	push	{r5, r6, r7, lr}
 800454c:	b093      	sub	sp, #76	; 0x4c
 800454e:	9004      	str	r0, [sp, #16]
 8004550:	9105      	str	r1, [sp, #20]
 8004552:	4692      	mov	sl, r2
 8004554:	469b      	mov	fp, r3
 8004556:	9d1e      	ldr	r5, [sp, #120]	; 0x78

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8004558:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800455a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800455c:	0010      	movs	r0, r2
 800455e:	0019      	movs	r1, r3
 8004560:	f001 f980 	bl	8005864 <__aeabi_dcmpeq>
 8004564:	2800      	cmp	r0, #0
 8004566:	d033      	beq.n	80045d0 <_ftoa+0x90>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
  if (value < -DBL_MAX)
 8004568:	2201      	movs	r2, #1
 800456a:	4252      	negs	r2, r2
 800456c:	4bb8      	ldr	r3, [pc, #736]	; (8004850 <_ftoa+0x310>)
 800456e:	981c      	ldr	r0, [sp, #112]	; 0x70
 8004570:	991d      	ldr	r1, [sp, #116]	; 0x74
 8004572:	f001 f97d 	bl	8005870 <__aeabi_dcmplt>
 8004576:	2800      	cmp	r0, #0
 8004578:	d139      	bne.n	80045ee <_ftoa+0xae>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
  if (value > DBL_MAX)
 800457a:	2201      	movs	r2, #1
 800457c:	4252      	negs	r2, r2
 800457e:	4bb5      	ldr	r3, [pc, #724]	; (8004854 <_ftoa+0x314>)
 8004580:	981c      	ldr	r0, [sp, #112]	; 0x70
 8004582:	991d      	ldr	r1, [sp, #116]	; 0x74
 8004584:	f001 f988 	bl	8005898 <__aeabi_dcmpgt>
 8004588:	2800      	cmp	r0, #0
 800458a:	d13f      	bne.n	800460c <_ftoa+0xcc>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800458c:	2200      	movs	r2, #0
 800458e:	4bb2      	ldr	r3, [pc, #712]	; (8004858 <_ftoa+0x318>)
 8004590:	981c      	ldr	r0, [sp, #112]	; 0x70
 8004592:	991d      	ldr	r1, [sp, #116]	; 0x74
 8004594:	f001 f980 	bl	8005898 <__aeabi_dcmpgt>
 8004598:	2800      	cmp	r0, #0
 800459a:	d000      	beq.n	800459e <_ftoa+0x5e>
 800459c:	e153      	b.n	8004846 <_ftoa+0x306>
 800459e:	2200      	movs	r2, #0
 80045a0:	4bae      	ldr	r3, [pc, #696]	; (800485c <_ftoa+0x31c>)
 80045a2:	981c      	ldr	r0, [sp, #112]	; 0x70
 80045a4:	991d      	ldr	r1, [sp, #116]	; 0x74
 80045a6:	f001 f963 	bl	8005870 <__aeabi_dcmplt>
 80045aa:	2800      	cmp	r0, #0
 80045ac:	d000      	beq.n	80045b0 <_ftoa+0x70>
 80045ae:	e14c      	b.n	800484a <_ftoa+0x30a>
#endif
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
 80045b0:	2200      	movs	r2, #0
 80045b2:	2300      	movs	r3, #0
 80045b4:	981c      	ldr	r0, [sp, #112]	; 0x70
 80045b6:	991d      	ldr	r1, [sp, #116]	; 0x74
 80045b8:	f001 f95a 	bl	8005870 <__aeabi_dcmplt>
 80045bc:	2800      	cmp	r0, #0
 80045be:	d146      	bne.n	800464e <_ftoa+0x10e>
  bool negative = false;
 80045c0:	2300      	movs	r3, #0
 80045c2:	4699      	mov	r9, r3
    negative = true;
    value = 0 - value;
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80045c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80045c6:	055b      	lsls	r3, r3, #21
 80045c8:	d400      	bmi.n	80045cc <_ftoa+0x8c>
 80045ca:	e0ac      	b.n	8004726 <_ftoa+0x1e6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80045cc:	2400      	movs	r4, #0
 80045ce:	e04e      	b.n	800466e <_ftoa+0x12e>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80045d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80045d2:	9303      	str	r3, [sp, #12]
 80045d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80045d6:	9302      	str	r3, [sp, #8]
 80045d8:	2303      	movs	r3, #3
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	4ba0      	ldr	r3, [pc, #640]	; (8004860 <_ftoa+0x320>)
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	465b      	mov	r3, fp
 80045e2:	4652      	mov	r2, sl
 80045e4:	9905      	ldr	r1, [sp, #20]
 80045e6:	9804      	ldr	r0, [sp, #16]
 80045e8:	f7ff fe6d 	bl	80042c6 <_out_rev>
 80045ec:	e024      	b.n	8004638 <_ftoa+0xf8>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80045ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80045f0:	9303      	str	r3, [sp, #12]
 80045f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80045f4:	9302      	str	r3, [sp, #8]
 80045f6:	2304      	movs	r3, #4
 80045f8:	9301      	str	r3, [sp, #4]
 80045fa:	4b9a      	ldr	r3, [pc, #616]	; (8004864 <_ftoa+0x324>)
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	465b      	mov	r3, fp
 8004600:	4652      	mov	r2, sl
 8004602:	9905      	ldr	r1, [sp, #20]
 8004604:	9804      	ldr	r0, [sp, #16]
 8004606:	f7ff fe5e 	bl	80042c6 <_out_rev>
 800460a:	e015      	b.n	8004638 <_ftoa+0xf8>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800460c:	2304      	movs	r3, #4
 800460e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004610:	401a      	ands	r2, r3
 8004612:	9920      	ldr	r1, [sp, #128]	; 0x80
 8004614:	420b      	tst	r3, r1
 8004616:	d016      	beq.n	8004646 <_ftoa+0x106>
 8004618:	4b93      	ldr	r3, [pc, #588]	; (8004868 <_ftoa+0x328>)
 800461a:	2a00      	cmp	r2, #0
 800461c:	d015      	beq.n	800464a <_ftoa+0x10a>
 800461e:	2204      	movs	r2, #4
 8004620:	9920      	ldr	r1, [sp, #128]	; 0x80
 8004622:	9103      	str	r1, [sp, #12]
 8004624:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8004626:	9102      	str	r1, [sp, #8]
 8004628:	9201      	str	r2, [sp, #4]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	465b      	mov	r3, fp
 800462e:	4652      	mov	r2, sl
 8004630:	9905      	ldr	r1, [sp, #20]
 8004632:	9804      	ldr	r0, [sp, #16]
 8004634:	f7ff fe47 	bl	80042c6 <_out_rev>
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 8004638:	b013      	add	sp, #76	; 0x4c
 800463a:	bcf0      	pop	{r4, r5, r6, r7}
 800463c:	46bb      	mov	fp, r7
 800463e:	46b2      	mov	sl, r6
 8004640:	46a9      	mov	r9, r5
 8004642:	46a0      	mov	r8, r4
 8004644:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8004646:	4b89      	ldr	r3, [pc, #548]	; (800486c <_ftoa+0x32c>)
 8004648:	e7e7      	b.n	800461a <_ftoa+0xda>
 800464a:	2203      	movs	r2, #3
 800464c:	e7e8      	b.n	8004620 <_ftoa+0xe0>
    value = 0 - value;
 800464e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004650:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004652:	2000      	movs	r0, #0
 8004654:	2100      	movs	r1, #0
 8004656:	f001 fcdb 	bl	8006010 <__aeabi_dsub>
 800465a:	901c      	str	r0, [sp, #112]	; 0x70
 800465c:	911d      	str	r1, [sp, #116]	; 0x74
    negative = true;
 800465e:	2301      	movs	r3, #1
 8004660:	4699      	mov	r9, r3
 8004662:	e7af      	b.n	80045c4 <_ftoa+0x84>
    buf[len++] = '0';
 8004664:	ab0a      	add	r3, sp, #40	; 0x28
 8004666:	2230      	movs	r2, #48	; 0x30
 8004668:	551a      	strb	r2, [r3, r4]
    prec--;
 800466a:	3d01      	subs	r5, #1
    buf[len++] = '0';
 800466c:	3401      	adds	r4, #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800466e:	2c1f      	cmp	r4, #31
 8004670:	d801      	bhi.n	8004676 <_ftoa+0x136>
 8004672:	2d09      	cmp	r5, #9
 8004674:	d8f6      	bhi.n	8004664 <_ftoa+0x124>
  int whole = (int)value;
 8004676:	981c      	ldr	r0, [sp, #112]	; 0x70
 8004678:	991d      	ldr	r1, [sp, #116]	; 0x74
 800467a:	f002 f85b 	bl	8006734 <__aeabi_d2iz>
 800467e:	0007      	movs	r7, r0
  double tmp = (value - whole) * pow10[prec];
 8004680:	f002 f88e 	bl	80067a0 <__aeabi_i2d>
 8004684:	0002      	movs	r2, r0
 8004686:	000b      	movs	r3, r1
 8004688:	981c      	ldr	r0, [sp, #112]	; 0x70
 800468a:	991d      	ldr	r1, [sp, #116]	; 0x74
 800468c:	f001 fcc0 	bl	8006010 <__aeabi_dsub>
 8004690:	00ea      	lsls	r2, r5, #3
 8004692:	4b77      	ldr	r3, [pc, #476]	; (8004870 <_ftoa+0x330>)
 8004694:	189b      	adds	r3, r3, r2
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	9208      	str	r2, [sp, #32]
 800469c:	9309      	str	r3, [sp, #36]	; 0x24
 800469e:	f001 fa4b 	bl	8005b38 <__aeabi_dmul>
  unsigned long frac = (unsigned long)tmp;
 80046a2:	9006      	str	r0, [sp, #24]
 80046a4:	9107      	str	r1, [sp, #28]
 80046a6:	f001 f90b 	bl	80058c0 <__aeabi_d2uiz>
 80046aa:	0006      	movs	r6, r0
  diff = tmp - frac;
 80046ac:	f002 f8a8 	bl	8006800 <__aeabi_ui2d>
 80046b0:	0002      	movs	r2, r0
 80046b2:	000b      	movs	r3, r1
 80046b4:	9806      	ldr	r0, [sp, #24]
 80046b6:	9907      	ldr	r1, [sp, #28]
 80046b8:	f001 fcaa 	bl	8006010 <__aeabi_dsub>
 80046bc:	9006      	str	r0, [sp, #24]
 80046be:	9107      	str	r1, [sp, #28]
  if (diff > 0.5) {
 80046c0:	2200      	movs	r2, #0
 80046c2:	4b6c      	ldr	r3, [pc, #432]	; (8004874 <_ftoa+0x334>)
 80046c4:	f001 f8e8 	bl	8005898 <__aeabi_dcmpgt>
 80046c8:	2800      	cmp	r0, #0
 80046ca:	d02e      	beq.n	800472a <_ftoa+0x1ea>
    ++frac;
 80046cc:	3601      	adds	r6, #1
    if (frac >= pow10[prec]) {
 80046ce:	0030      	movs	r0, r6
 80046d0:	f002 f896 	bl	8006800 <__aeabi_ui2d>
 80046d4:	0002      	movs	r2, r0
 80046d6:	000b      	movs	r3, r1
 80046d8:	9808      	ldr	r0, [sp, #32]
 80046da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046dc:	f001 f8d2 	bl	8005884 <__aeabi_dcmple>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d001      	beq.n	80046e8 <_ftoa+0x1a8>
      ++whole;
 80046e4:	3701      	adds	r7, #1
      frac = 0;
 80046e6:	2600      	movs	r6, #0
  if (prec == 0U) {
 80046e8:	2d00      	cmp	r5, #0
 80046ea:	d12c      	bne.n	8004746 <_ftoa+0x206>
    diff = value - (double)whole;
 80046ec:	0038      	movs	r0, r7
 80046ee:	f002 f857 	bl	80067a0 <__aeabi_i2d>
 80046f2:	0002      	movs	r2, r0
 80046f4:	000b      	movs	r3, r1
 80046f6:	981c      	ldr	r0, [sp, #112]	; 0x70
 80046f8:	991d      	ldr	r1, [sp, #116]	; 0x74
 80046fa:	f001 fc89 	bl	8006010 <__aeabi_dsub>
 80046fe:	0005      	movs	r5, r0
 8004700:	000e      	movs	r6, r1
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8004702:	2200      	movs	r2, #0
 8004704:	4b5b      	ldr	r3, [pc, #364]	; (8004874 <_ftoa+0x334>)
 8004706:	f001 f8b3 	bl	8005870 <__aeabi_dcmplt>
 800470a:	2800      	cmp	r0, #0
 800470c:	d007      	beq.n	800471e <_ftoa+0x1de>
 800470e:	2200      	movs	r2, #0
 8004710:	4b58      	ldr	r3, [pc, #352]	; (8004874 <_ftoa+0x334>)
 8004712:	0028      	movs	r0, r5
 8004714:	0031      	movs	r1, r6
 8004716:	f001 f8bf 	bl	8005898 <__aeabi_dcmpgt>
 800471a:	2800      	cmp	r0, #0
 800471c:	d03e      	beq.n	800479c <_ftoa+0x25c>
 800471e:	07fb      	lsls	r3, r7, #31
 8004720:	d53c      	bpl.n	800479c <_ftoa+0x25c>
      ++whole;
 8004722:	3701      	adds	r7, #1
 8004724:	e03a      	b.n	800479c <_ftoa+0x25c>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004726:	2506      	movs	r5, #6
 8004728:	e750      	b.n	80045cc <_ftoa+0x8c>
  else if (diff < 0.5) {
 800472a:	2200      	movs	r2, #0
 800472c:	4b51      	ldr	r3, [pc, #324]	; (8004874 <_ftoa+0x334>)
 800472e:	9806      	ldr	r0, [sp, #24]
 8004730:	9907      	ldr	r1, [sp, #28]
 8004732:	f001 f89d 	bl	8005870 <__aeabi_dcmplt>
 8004736:	2800      	cmp	r0, #0
 8004738:	d1d6      	bne.n	80046e8 <_ftoa+0x1a8>
  else if ((frac == 0U) || (frac & 1U)) {
 800473a:	2e00      	cmp	r6, #0
 800473c:	d001      	beq.n	8004742 <_ftoa+0x202>
 800473e:	07f3      	lsls	r3, r6, #31
 8004740:	d5d2      	bpl.n	80046e8 <_ftoa+0x1a8>
    ++frac;
 8004742:	3601      	adds	r6, #1
 8004744:	e7d0      	b.n	80046e8 <_ftoa+0x1a8>
 8004746:	46b8      	mov	r8, r7
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004748:	2c1f      	cmp	r4, #31
 800474a:	d811      	bhi.n	8004770 <_ftoa+0x230>
      --count;
 800474c:	3d01      	subs	r5, #1
      buf[len++] = (char)(48U + (frac % 10U));
 800474e:	210a      	movs	r1, #10
 8004750:	0030      	movs	r0, r6
 8004752:	f000 ff87 	bl	8005664 <__aeabi_uidivmod>
 8004756:	1c67      	adds	r7, r4, #1
 8004758:	3130      	adds	r1, #48	; 0x30
 800475a:	ab0a      	add	r3, sp, #40	; 0x28
 800475c:	5519      	strb	r1, [r3, r4]
      if (!(frac /= 10U)) {
 800475e:	210a      	movs	r1, #10
 8004760:	0030      	movs	r0, r6
 8004762:	f000 fef9 	bl	8005558 <__udivsi3>
 8004766:	2e09      	cmp	r6, #9
 8004768:	d90e      	bls.n	8004788 <_ftoa+0x248>
 800476a:	0006      	movs	r6, r0
      buf[len++] = (char)(48U + (frac % 10U));
 800476c:	003c      	movs	r4, r7
 800476e:	e7eb      	b.n	8004748 <_ftoa+0x208>
 8004770:	4647      	mov	r7, r8
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004772:	2c1f      	cmp	r4, #31
 8004774:	d80c      	bhi.n	8004790 <_ftoa+0x250>
 8004776:	1e6b      	subs	r3, r5, #1
 8004778:	2d00      	cmp	r5, #0
 800477a:	d009      	beq.n	8004790 <_ftoa+0x250>
      buf[len++] = '0';
 800477c:	aa0a      	add	r2, sp, #40	; 0x28
 800477e:	2130      	movs	r1, #48	; 0x30
 8004780:	5511      	strb	r1, [r2, r4]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004782:	001d      	movs	r5, r3
      buf[len++] = '0';
 8004784:	3401      	adds	r4, #1
 8004786:	e7f4      	b.n	8004772 <_ftoa+0x232>
 8004788:	003b      	movs	r3, r7
 800478a:	4647      	mov	r7, r8
      buf[len++] = (char)(48U + (frac % 10U));
 800478c:	001c      	movs	r4, r3
 800478e:	e7f0      	b.n	8004772 <_ftoa+0x232>
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004790:	2c1f      	cmp	r4, #31
 8004792:	d803      	bhi.n	800479c <_ftoa+0x25c>
      buf[len++] = '.';
 8004794:	ab0a      	add	r3, sp, #40	; 0x28
 8004796:	222e      	movs	r2, #46	; 0x2e
 8004798:	551a      	strb	r2, [r3, r4]
 800479a:	3401      	adds	r4, #1
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800479c:	2c1f      	cmp	r4, #31
 800479e:	d810      	bhi.n	80047c2 <_ftoa+0x282>
    buf[len++] = (char)(48 + (whole % 10));
 80047a0:	210a      	movs	r1, #10
 80047a2:	0038      	movs	r0, r7
 80047a4:	f001 f848 	bl	8005838 <__aeabi_idivmod>
 80047a8:	1c65      	adds	r5, r4, #1
 80047aa:	3130      	adds	r1, #48	; 0x30
 80047ac:	ab0a      	add	r3, sp, #40	; 0x28
 80047ae:	5519      	strb	r1, [r3, r4]
    if (!(whole /= 10)) {
 80047b0:	210a      	movs	r1, #10
 80047b2:	0038      	movs	r0, r7
 80047b4:	f000 ff5a 	bl	800566c <__divsi3>
 80047b8:	1e07      	subs	r7, r0, #0
 80047ba:	d001      	beq.n	80047c0 <_ftoa+0x280>
    buf[len++] = (char)(48 + (whole % 10));
 80047bc:	002c      	movs	r4, r5
 80047be:	e7ed      	b.n	800479c <_ftoa+0x25c>
 80047c0:	002c      	movs	r4, r5
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80047c2:	2303      	movs	r3, #3
 80047c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d016      	beq.n	80047fa <_ftoa+0x2ba>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80047cc:	2c1f      	cmp	r4, #31
 80047ce:	d806      	bhi.n	80047de <_ftoa+0x29e>
    if (negative) {
 80047d0:	464b      	mov	r3, r9
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d027      	beq.n	8004826 <_ftoa+0x2e6>
      buf[len++] = '-';
 80047d6:	ab0a      	add	r3, sp, #40	; 0x28
 80047d8:	222d      	movs	r2, #45	; 0x2d
 80047da:	551a      	strb	r2, [r3, r4]
 80047dc:	3401      	adds	r4, #1
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80047de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80047e0:	9303      	str	r3, [sp, #12]
 80047e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80047e4:	9302      	str	r3, [sp, #8]
 80047e6:	9401      	str	r4, [sp, #4]
 80047e8:	ab0a      	add	r3, sp, #40	; 0x28
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	465b      	mov	r3, fp
 80047ee:	4652      	mov	r2, sl
 80047f0:	9905      	ldr	r1, [sp, #20]
 80047f2:	9804      	ldr	r0, [sp, #16]
 80047f4:	f7ff fd67 	bl	80042c6 <_out_rev>
 80047f8:	e71e      	b.n	8004638 <_ftoa+0xf8>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80047fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <_ftoa+0x2d2>
 8004800:	464b      	mov	r3, r9
 8004802:	2b00      	cmp	r3, #0
 8004804:	d102      	bne.n	800480c <_ftoa+0x2cc>
 8004806:	330c      	adds	r3, #12
 8004808:	4213      	tst	r3, r2
 800480a:	d002      	beq.n	8004812 <_ftoa+0x2d2>
      width--;
 800480c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800480e:	3b01      	subs	r3, #1
 8004810:	931f      	str	r3, [sp, #124]	; 0x7c
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8004812:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004814:	429c      	cmp	r4, r3
 8004816:	d2d9      	bcs.n	80047cc <_ftoa+0x28c>
 8004818:	2c1f      	cmp	r4, #31
 800481a:	d8d7      	bhi.n	80047cc <_ftoa+0x28c>
      buf[len++] = '0';
 800481c:	ab0a      	add	r3, sp, #40	; 0x28
 800481e:	2230      	movs	r2, #48	; 0x30
 8004820:	551a      	strb	r2, [r3, r4]
 8004822:	3401      	adds	r4, #1
 8004824:	e7f5      	b.n	8004812 <_ftoa+0x2d2>
    else if (flags & FLAGS_PLUS) {
 8004826:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004828:	075b      	lsls	r3, r3, #29
 800482a:	d504      	bpl.n	8004836 <_ftoa+0x2f6>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800482c:	ab0a      	add	r3, sp, #40	; 0x28
 800482e:	222b      	movs	r2, #43	; 0x2b
 8004830:	551a      	strb	r2, [r3, r4]
 8004832:	3401      	adds	r4, #1
 8004834:	e7d3      	b.n	80047de <_ftoa+0x29e>
    else if (flags & FLAGS_SPACE) {
 8004836:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004838:	071b      	lsls	r3, r3, #28
 800483a:	d5d0      	bpl.n	80047de <_ftoa+0x29e>
      buf[len++] = ' ';
 800483c:	ab0a      	add	r3, sp, #40	; 0x28
 800483e:	2220      	movs	r2, #32
 8004840:	551a      	strb	r2, [r3, r4]
 8004842:	3401      	adds	r4, #1
 8004844:	e7cb      	b.n	80047de <_ftoa+0x29e>
    return 0U;
 8004846:	2000      	movs	r0, #0
 8004848:	e6f6      	b.n	8004638 <_ftoa+0xf8>
 800484a:	2000      	movs	r0, #0
 800484c:	e6f4      	b.n	8004638 <_ftoa+0xf8>
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	ffefffff 	.word	0xffefffff
 8004854:	7fefffff 	.word	0x7fefffff
 8004858:	41cdcd65 	.word	0x41cdcd65
 800485c:	c1cdcd65 	.word	0xc1cdcd65
 8004860:	080068a4 	.word	0x080068a4
 8004864:	080068a8 	.word	0x080068a8
 8004868:	0800689c 	.word	0x0800689c
 800486c:	08006898 	.word	0x08006898
 8004870:	08006a48 	.word	0x08006a48
 8004874:	3fe00000 	.word	0x3fe00000

08004878 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT



int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8004878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800487a:	46de      	mov	lr, fp
 800487c:	4657      	mov	r7, sl
 800487e:	464e      	mov	r6, r9
 8004880:	4645      	mov	r5, r8
 8004882:	b5e0      	push	{r5, r6, r7, lr}
 8004884:	b08b      	sub	sp, #44	; 0x2c
 8004886:	0006      	movs	r6, r0
 8004888:	468a      	mov	sl, r1
 800488a:	4691      	mov	r9, r2
 800488c:	9309      	str	r3, [sp, #36]	; 0x24
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
 800488e:	2900      	cmp	r1, #0
 8004890:	d100      	bne.n	8004894 <_vsnprintf+0x1c>
 8004892:	e269      	b.n	8004d68 <_vsnprintf+0x4f0>
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        format++;
        break;
 8004894:	2400      	movs	r4, #0
  while (*format)
 8004896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004898:	7818      	ldrb	r0, [r3, #0]
 800489a:	2800      	cmp	r0, #0
 800489c:	d100      	bne.n	80048a0 <_vsnprintf+0x28>
 800489e:	e265      	b.n	8004d6c <_vsnprintf+0x4f4>
    if (*format != '%') {
 80048a0:	2825      	cmp	r0, #37	; 0x25
 80048a2:	d009      	beq.n	80048b8 <_vsnprintf+0x40>
      out(*format, buffer, idx++, maxlen);
 80048a4:	1c65      	adds	r5, r4, #1
 80048a6:	464b      	mov	r3, r9
 80048a8:	0022      	movs	r2, r4
 80048aa:	4651      	mov	r1, sl
 80048ac:	47b0      	blx	r6
      format++;
 80048ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048b0:	3301      	adds	r3, #1
 80048b2:	9309      	str	r3, [sp, #36]	; 0x24
      out(*format, buffer, idx++, maxlen);
 80048b4:	002c      	movs	r4, r5
      continue;
 80048b6:	e7ee      	b.n	8004896 <_vsnprintf+0x1e>
      format++;
 80048b8:	3301      	adds	r3, #1
 80048ba:	9309      	str	r3, [sp, #36]	; 0x24
    flags = 0U;
 80048bc:	2500      	movs	r5, #0
 80048be:	e02d      	b.n	800491c <_vsnprintf+0xa4>
  return (ch >= '0') && (ch <= '9');
 80048c0:	000b      	movs	r3, r1
 80048c2:	3b30      	subs	r3, #48	; 0x30
 80048c4:	b2db      	uxtb	r3, r3
    if (_is_digit(*format)) {
 80048c6:	2b09      	cmp	r3, #9
 80048c8:	d947      	bls.n	800495a <_vsnprintf+0xe2>
    else if (*format == '*') {
 80048ca:	292a      	cmp	r1, #42	; 0x2a
 80048cc:	d04a      	beq.n	8004964 <_vsnprintf+0xec>
    width = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	9306      	str	r3, [sp, #24]
    if (*format == '.') {
 80048d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d4:	781a      	ldrb	r2, [r3, #0]
 80048d6:	2a2e      	cmp	r2, #46	; 0x2e
 80048d8:	d054      	beq.n	8004984 <_vsnprintf+0x10c>
    precision = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	469b      	mov	fp, r3
    switch (*format) {
 80048de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048e0:	7813      	ldrb	r3, [r2, #0]
 80048e2:	2b6c      	cmp	r3, #108	; 0x6c
 80048e4:	d078      	beq.n	80049d8 <_vsnprintf+0x160>
 80048e6:	d86f      	bhi.n	80049c8 <_vsnprintf+0x150>
 80048e8:	2b68      	cmp	r3, #104	; 0x68
 80048ea:	d100      	bne.n	80048ee <_vsnprintf+0x76>
 80048ec:	e084      	b.n	80049f8 <_vsnprintf+0x180>
 80048ee:	2b6a      	cmp	r3, #106	; 0x6a
 80048f0:	d104      	bne.n	80048fc <_vsnprintf+0x84>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	431d      	orrs	r5, r3
        format++;
 80048f8:	3201      	adds	r2, #1
 80048fa:	9209      	str	r2, [sp, #36]	; 0x24
    switch (*format) {
 80048fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048fe:	7818      	ldrb	r0, [r3, #0]
 8004900:	0003      	movs	r3, r0
 8004902:	3b25      	subs	r3, #37	; 0x25
 8004904:	b2da      	uxtb	r2, r3
 8004906:	2a53      	cmp	r2, #83	; 0x53
 8004908:	d900      	bls.n	800490c <_vsnprintf+0x94>
 800490a:	e223      	b.n	8004d54 <_vsnprintf+0x4dc>
 800490c:	0093      	lsls	r3, r2, #2
 800490e:	4acb      	ldr	r2, [pc, #812]	; (8004c3c <_vsnprintf+0x3c4>)
 8004910:	58d3      	ldr	r3, [r2, r3]
 8004912:	469f      	mov	pc, r3
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004914:	2301      	movs	r3, #1
 8004916:	431d      	orrs	r5, r3
 8004918:	3201      	adds	r2, #1
 800491a:	9209      	str	r2, [sp, #36]	; 0x24
      switch (*format) {
 800491c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800491e:	7811      	ldrb	r1, [r2, #0]
 8004920:	000b      	movs	r3, r1
 8004922:	3b20      	subs	r3, #32
 8004924:	b2d8      	uxtb	r0, r3
 8004926:	2810      	cmp	r0, #16
 8004928:	d8ca      	bhi.n	80048c0 <_vsnprintf+0x48>
 800492a:	0083      	lsls	r3, r0, #2
 800492c:	48c4      	ldr	r0, [pc, #784]	; (8004c40 <_vsnprintf+0x3c8>)
 800492e:	58c3      	ldr	r3, [r0, r3]
 8004930:	469f      	mov	pc, r3
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8004932:	2302      	movs	r3, #2
 8004934:	431d      	orrs	r5, r3
 8004936:	3201      	adds	r2, #1
 8004938:	9209      	str	r2, [sp, #36]	; 0x24
    } while (n);
 800493a:	e7ef      	b.n	800491c <_vsnprintf+0xa4>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800493c:	2304      	movs	r3, #4
 800493e:	431d      	orrs	r5, r3
 8004940:	3201      	adds	r2, #1
 8004942:	9209      	str	r2, [sp, #36]	; 0x24
    } while (n);
 8004944:	e7ea      	b.n	800491c <_vsnprintf+0xa4>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8004946:	2308      	movs	r3, #8
 8004948:	431d      	orrs	r5, r3
 800494a:	3201      	adds	r2, #1
 800494c:	9209      	str	r2, [sp, #36]	; 0x24
    } while (n);
 800494e:	e7e5      	b.n	800491c <_vsnprintf+0xa4>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8004950:	2310      	movs	r3, #16
 8004952:	431d      	orrs	r5, r3
 8004954:	3201      	adds	r2, #1
 8004956:	9209      	str	r2, [sp, #36]	; 0x24
    } while (n);
 8004958:	e7e0      	b.n	800491c <_vsnprintf+0xa4>
      width = _atoi(&format);
 800495a:	a809      	add	r0, sp, #36	; 0x24
 800495c:	f7ff fca1 	bl	80042a2 <_atoi>
 8004960:	9006      	str	r0, [sp, #24]
 8004962:	e7b6      	b.n	80048d2 <_vsnprintf+0x5a>
      const int w = va_arg(va, int);
 8004964:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004966:	1d1a      	adds	r2, r3, #4
 8004968:	9214      	str	r2, [sp, #80]	; 0x50
 800496a:	6818      	ldr	r0, [r3, #0]
      if (w < 0) {
 800496c:	2800      	cmp	r0, #0
 800496e:	db04      	blt.n	800497a <_vsnprintf+0x102>
        width = (unsigned int)w;
 8004970:	9006      	str	r0, [sp, #24]
      format++;
 8004972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004974:	3301      	adds	r3, #1
 8004976:	9309      	str	r3, [sp, #36]	; 0x24
 8004978:	e7ab      	b.n	80048d2 <_vsnprintf+0x5a>
        flags |= FLAGS_LEFT;    // reverse padding
 800497a:	2302      	movs	r3, #2
 800497c:	431d      	orrs	r5, r3
        width = (unsigned int)-w;
 800497e:	4243      	negs	r3, r0
 8004980:	9306      	str	r3, [sp, #24]
 8004982:	e7f6      	b.n	8004972 <_vsnprintf+0xfa>
      flags |= FLAGS_PRECISION;
 8004984:	2280      	movs	r2, #128	; 0x80
 8004986:	00d2      	lsls	r2, r2, #3
 8004988:	4315      	orrs	r5, r2
      format++;
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	9209      	str	r2, [sp, #36]	; 0x24
      if (_is_digit(*format)) {
 800498e:	785a      	ldrb	r2, [r3, #1]
  return (ch >= '0') && (ch <= '9');
 8004990:	0013      	movs	r3, r2
 8004992:	3b30      	subs	r3, #48	; 0x30
 8004994:	b2db      	uxtb	r3, r3
      if (_is_digit(*format)) {
 8004996:	2b09      	cmp	r3, #9
 8004998:	d904      	bls.n	80049a4 <_vsnprintf+0x12c>
      else if (*format == '*') {
 800499a:	2a2a      	cmp	r2, #42	; 0x2a
 800499c:	d007      	beq.n	80049ae <_vsnprintf+0x136>
    precision = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	469b      	mov	fp, r3
 80049a2:	e79c      	b.n	80048de <_vsnprintf+0x66>
        precision = _atoi(&format);
 80049a4:	a809      	add	r0, sp, #36	; 0x24
 80049a6:	f7ff fc7c 	bl	80042a2 <_atoi>
 80049aa:	4683      	mov	fp, r0
 80049ac:	e797      	b.n	80048de <_vsnprintf+0x66>
        const int prec = (int)va_arg(va, int);
 80049ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80049b0:	1d1a      	adds	r2, r3, #4
 80049b2:	9214      	str	r2, [sp, #80]	; 0x50
 80049b4:	6818      	ldr	r0, [r3, #0]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80049b6:	2800      	cmp	r0, #0
 80049b8:	db04      	blt.n	80049c4 <_vsnprintf+0x14c>
 80049ba:	4683      	mov	fp, r0
        format++;
 80049bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049be:	3301      	adds	r3, #1
 80049c0:	9309      	str	r3, [sp, #36]	; 0x24
 80049c2:	e78c      	b.n	80048de <_vsnprintf+0x66>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80049c4:	2000      	movs	r0, #0
 80049c6:	e7f8      	b.n	80049ba <_vsnprintf+0x142>
    switch (*format) {
 80049c8:	2b7a      	cmp	r3, #122	; 0x7a
 80049ca:	d197      	bne.n	80048fc <_vsnprintf+0x84>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80049cc:	2380      	movs	r3, #128	; 0x80
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	431d      	orrs	r5, r3
        format++;
 80049d2:	3201      	adds	r2, #1
 80049d4:	9209      	str	r2, [sp, #36]	; 0x24
        break;
 80049d6:	e791      	b.n	80048fc <_vsnprintf+0x84>
        flags |= FLAGS_LONG;
 80049d8:	2380      	movs	r3, #128	; 0x80
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	432b      	orrs	r3, r5
        format++;
 80049de:	1c51      	adds	r1, r2, #1
 80049e0:	9109      	str	r1, [sp, #36]	; 0x24
        if (*format == 'l') {
 80049e2:	7852      	ldrb	r2, [r2, #1]
 80049e4:	2a6c      	cmp	r2, #108	; 0x6c
 80049e6:	d001      	beq.n	80049ec <_vsnprintf+0x174>
        flags |= FLAGS_LONG;
 80049e8:	001d      	movs	r5, r3
 80049ea:	e787      	b.n	80048fc <_vsnprintf+0x84>
          flags |= FLAGS_LONG_LONG;
 80049ec:	23c0      	movs	r3, #192	; 0xc0
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	431d      	orrs	r5, r3
          format++;
 80049f2:	3101      	adds	r1, #1
 80049f4:	9109      	str	r1, [sp, #36]	; 0x24
 80049f6:	e781      	b.n	80048fc <_vsnprintf+0x84>
        flags |= FLAGS_SHORT;
 80049f8:	2380      	movs	r3, #128	; 0x80
 80049fa:	432b      	orrs	r3, r5
        format++;
 80049fc:	1c51      	adds	r1, r2, #1
 80049fe:	9109      	str	r1, [sp, #36]	; 0x24
        if (*format == 'h') {
 8004a00:	7852      	ldrb	r2, [r2, #1]
 8004a02:	2a68      	cmp	r2, #104	; 0x68
 8004a04:	d001      	beq.n	8004a0a <_vsnprintf+0x192>
        flags |= FLAGS_SHORT;
 8004a06:	001d      	movs	r5, r3
 8004a08:	e778      	b.n	80048fc <_vsnprintf+0x84>
          flags |= FLAGS_CHAR;
 8004a0a:	23c0      	movs	r3, #192	; 0xc0
 8004a0c:	431d      	orrs	r5, r3
          format++;
 8004a0e:	3101      	adds	r1, #1
 8004a10:	9109      	str	r1, [sp, #36]	; 0x24
 8004a12:	e773      	b.n	80048fc <_vsnprintf+0x84>
        if (*format == 'x' || *format == 'X') {
 8004a14:	2878      	cmp	r0, #120	; 0x78
 8004a16:	d009      	beq.n	8004a2c <_vsnprintf+0x1b4>
 8004a18:	2858      	cmp	r0, #88	; 0x58
 8004a1a:	d035      	beq.n	8004a88 <_vsnprintf+0x210>
        else if (*format == 'o') {
 8004a1c:	286f      	cmp	r0, #111	; 0x6f
 8004a1e:	d035      	beq.n	8004a8c <_vsnprintf+0x214>
        else if (*format == 'b') {
 8004a20:	2862      	cmp	r0, #98	; 0x62
 8004a22:	d035      	beq.n	8004a90 <_vsnprintf+0x218>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8004a24:	2310      	movs	r3, #16
 8004a26:	439d      	bics	r5, r3
          base = 10U;
 8004a28:	3b06      	subs	r3, #6
 8004a2a:	e000      	b.n	8004a2e <_vsnprintf+0x1b6>
          base = 16U;
 8004a2c:	2310      	movs	r3, #16
        if (*format == 'X') {
 8004a2e:	2858      	cmp	r0, #88	; 0x58
 8004a30:	d030      	beq.n	8004a94 <_vsnprintf+0x21c>
        if ((*format != 'i') && (*format != 'd')) {
 8004a32:	2869      	cmp	r0, #105	; 0x69
 8004a34:	d003      	beq.n	8004a3e <_vsnprintf+0x1c6>
 8004a36:	2864      	cmp	r0, #100	; 0x64
 8004a38:	d001      	beq.n	8004a3e <_vsnprintf+0x1c6>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004a3a:	220c      	movs	r2, #12
 8004a3c:	4395      	bics	r5, r2
        if (flags & FLAGS_PRECISION) {
 8004a3e:	056a      	lsls	r2, r5, #21
 8004a40:	d501      	bpl.n	8004a46 <_vsnprintf+0x1ce>
          flags &= ~FLAGS_ZEROPAD;
 8004a42:	2201      	movs	r2, #1
 8004a44:	4395      	bics	r5, r2
        if ((*format == 'i') || (*format == 'd')) {
 8004a46:	2869      	cmp	r0, #105	; 0x69
 8004a48:	d027      	beq.n	8004a9a <_vsnprintf+0x222>
 8004a4a:	2864      	cmp	r0, #100	; 0x64
 8004a4c:	d025      	beq.n	8004a9a <_vsnprintf+0x222>
          if (flags & FLAGS_LONG_LONG) {
 8004a4e:	05aa      	lsls	r2, r5, #22
 8004a50:	d442      	bmi.n	8004ad8 <_vsnprintf+0x260>
          else if (flags & FLAGS_LONG) {
 8004a52:	05ea      	lsls	r2, r5, #23
 8004a54:	d469      	bmi.n	8004b2a <_vsnprintf+0x2b2>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004a56:	066a      	lsls	r2, r5, #25
 8004a58:	d57c      	bpl.n	8004b54 <_vsnprintf+0x2dc>
 8004a5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004a5c:	1d11      	adds	r1, r2, #4
 8004a5e:	9114      	str	r1, [sp, #80]	; 0x50
 8004a60:	6811      	ldr	r1, [r2, #0]
 8004a62:	22ff      	movs	r2, #255	; 0xff
 8004a64:	400a      	ands	r2, r1
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8004a66:	9505      	str	r5, [sp, #20]
 8004a68:	9906      	ldr	r1, [sp, #24]
 8004a6a:	9104      	str	r1, [sp, #16]
 8004a6c:	4659      	mov	r1, fp
 8004a6e:	9103      	str	r1, [sp, #12]
 8004a70:	9302      	str	r3, [sp, #8]
 8004a72:	2300      	movs	r3, #0
 8004a74:	9301      	str	r3, [sp, #4]
 8004a76:	9200      	str	r2, [sp, #0]
 8004a78:	464b      	mov	r3, r9
 8004a7a:	0022      	movs	r2, r4
 8004a7c:	4651      	mov	r1, sl
 8004a7e:	0030      	movs	r0, r6
 8004a80:	f7ff fd00 	bl	8004484 <_ntoa_long>
 8004a84:	0004      	movs	r4, r0
 8004a86:	e027      	b.n	8004ad8 <_vsnprintf+0x260>
          base = 16U;
 8004a88:	2310      	movs	r3, #16
 8004a8a:	e7d0      	b.n	8004a2e <_vsnprintf+0x1b6>
          base =  8U;
 8004a8c:	2308      	movs	r3, #8
 8004a8e:	e7ce      	b.n	8004a2e <_vsnprintf+0x1b6>
          base =  2U;
 8004a90:	2302      	movs	r3, #2
 8004a92:	e7cc      	b.n	8004a2e <_vsnprintf+0x1b6>
          flags |= FLAGS_UPPERCASE;
 8004a94:	2220      	movs	r2, #32
 8004a96:	4315      	orrs	r5, r2
 8004a98:	e7cb      	b.n	8004a32 <_vsnprintf+0x1ba>
          if (flags & FLAGS_LONG_LONG) {
 8004a9a:	05aa      	lsls	r2, r5, #22
 8004a9c:	d41c      	bmi.n	8004ad8 <_vsnprintf+0x260>
          else if (flags & FLAGS_LONG) {
 8004a9e:	05ea      	lsls	r2, r5, #23
 8004aa0:	d41e      	bmi.n	8004ae0 <_vsnprintf+0x268>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004aa2:	066a      	lsls	r2, r5, #25
 8004aa4:	d534      	bpl.n	8004b10 <_vsnprintf+0x298>
 8004aa6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004aa8:	1d11      	adds	r1, r2, #4
 8004aaa:	9114      	str	r1, [sp, #80]	; 0x50
 8004aac:	6811      	ldr	r1, [r2, #0]
 8004aae:	22ff      	movs	r2, #255	; 0xff
 8004ab0:	400a      	ands	r2, r1
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004ab2:	17d0      	asrs	r0, r2, #31
 8004ab4:	1811      	adds	r1, r2, r0
 8004ab6:	4041      	eors	r1, r0
 8004ab8:	9505      	str	r5, [sp, #20]
 8004aba:	9806      	ldr	r0, [sp, #24]
 8004abc:	9004      	str	r0, [sp, #16]
 8004abe:	4658      	mov	r0, fp
 8004ac0:	9003      	str	r0, [sp, #12]
 8004ac2:	9302      	str	r3, [sp, #8]
 8004ac4:	0fd2      	lsrs	r2, r2, #31
 8004ac6:	9201      	str	r2, [sp, #4]
 8004ac8:	9100      	str	r1, [sp, #0]
 8004aca:	464b      	mov	r3, r9
 8004acc:	0022      	movs	r2, r4
 8004ace:	4651      	mov	r1, sl
 8004ad0:	0030      	movs	r0, r6
 8004ad2:	f7ff fcd7 	bl	8004484 <_ntoa_long>
 8004ad6:	0004      	movs	r4, r0
        format++;
 8004ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ada:	3301      	adds	r3, #1
 8004adc:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8004ade:	e6da      	b.n	8004896 <_vsnprintf+0x1e>
            const long value = va_arg(va, long);
 8004ae0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004ae2:	1d11      	adds	r1, r2, #4
 8004ae4:	9114      	str	r1, [sp, #80]	; 0x50
 8004ae6:	6812      	ldr	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004ae8:	17d0      	asrs	r0, r2, #31
 8004aea:	1811      	adds	r1, r2, r0
 8004aec:	4041      	eors	r1, r0
 8004aee:	9505      	str	r5, [sp, #20]
 8004af0:	9806      	ldr	r0, [sp, #24]
 8004af2:	9004      	str	r0, [sp, #16]
 8004af4:	4658      	mov	r0, fp
 8004af6:	9003      	str	r0, [sp, #12]
 8004af8:	9302      	str	r3, [sp, #8]
 8004afa:	0fd2      	lsrs	r2, r2, #31
 8004afc:	9201      	str	r2, [sp, #4]
 8004afe:	9100      	str	r1, [sp, #0]
 8004b00:	464b      	mov	r3, r9
 8004b02:	0022      	movs	r2, r4
 8004b04:	4651      	mov	r1, sl
 8004b06:	0030      	movs	r0, r6
 8004b08:	f7ff fcbc 	bl	8004484 <_ntoa_long>
 8004b0c:	0004      	movs	r4, r0
 8004b0e:	e7e3      	b.n	8004ad8 <_vsnprintf+0x260>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004b10:	062a      	lsls	r2, r5, #24
 8004b12:	d505      	bpl.n	8004b20 <_vsnprintf+0x2a8>
 8004b14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004b16:	1d11      	adds	r1, r2, #4
 8004b18:	9114      	str	r1, [sp, #80]	; 0x50
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	5e52      	ldrsh	r2, [r2, r1]
 8004b1e:	e7c8      	b.n	8004ab2 <_vsnprintf+0x23a>
 8004b20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004b22:	1d11      	adds	r1, r2, #4
 8004b24:	9114      	str	r1, [sp, #80]	; 0x50
 8004b26:	6812      	ldr	r2, [r2, #0]
 8004b28:	e7c3      	b.n	8004ab2 <_vsnprintf+0x23a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8004b2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004b2c:	1d11      	adds	r1, r2, #4
 8004b2e:	9114      	str	r1, [sp, #80]	; 0x50
 8004b30:	9505      	str	r5, [sp, #20]
 8004b32:	9906      	ldr	r1, [sp, #24]
 8004b34:	9104      	str	r1, [sp, #16]
 8004b36:	4659      	mov	r1, fp
 8004b38:	9103      	str	r1, [sp, #12]
 8004b3a:	9302      	str	r3, [sp, #8]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	9301      	str	r3, [sp, #4]
 8004b40:	6813      	ldr	r3, [r2, #0]
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	464b      	mov	r3, r9
 8004b46:	0022      	movs	r2, r4
 8004b48:	4651      	mov	r1, sl
 8004b4a:	0030      	movs	r0, r6
 8004b4c:	f7ff fc9a 	bl	8004484 <_ntoa_long>
 8004b50:	0004      	movs	r4, r0
 8004b52:	e7c1      	b.n	8004ad8 <_vsnprintf+0x260>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004b54:	062a      	lsls	r2, r5, #24
 8004b56:	d506      	bpl.n	8004b66 <_vsnprintf+0x2ee>
 8004b58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004b5a:	1d11      	adds	r1, r2, #4
 8004b5c:	9114      	str	r1, [sp, #80]	; 0x50
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	0412      	lsls	r2, r2, #16
 8004b62:	0c12      	lsrs	r2, r2, #16
 8004b64:	e77f      	b.n	8004a66 <_vsnprintf+0x1ee>
 8004b66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004b68:	1d11      	adds	r1, r2, #4
 8004b6a:	9114      	str	r1, [sp, #80]	; 0x50
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	e77a      	b.n	8004a66 <_vsnprintf+0x1ee>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004b70:	2846      	cmp	r0, #70	; 0x46
 8004b72:	d01a      	beq.n	8004baa <_vsnprintf+0x332>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004b74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004b76:	3307      	adds	r3, #7
 8004b78:	2207      	movs	r2, #7
 8004b7a:	4393      	bics	r3, r2
 8004b7c:	001a      	movs	r2, r3
 8004b7e:	3208      	adds	r2, #8
 8004b80:	9214      	str	r2, [sp, #80]	; 0x50
 8004b82:	9504      	str	r5, [sp, #16]
 8004b84:	9a06      	ldr	r2, [sp, #24]
 8004b86:	9203      	str	r2, [sp, #12]
 8004b88:	465a      	mov	r2, fp
 8004b8a:	9202      	str	r2, [sp, #8]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	9200      	str	r2, [sp, #0]
 8004b92:	9301      	str	r3, [sp, #4]
 8004b94:	464b      	mov	r3, r9
 8004b96:	0022      	movs	r2, r4
 8004b98:	4651      	mov	r1, sl
 8004b9a:	0030      	movs	r0, r6
 8004b9c:	f7ff fcd0 	bl	8004540 <_ftoa>
 8004ba0:	0004      	movs	r4, r0
        format++;
 8004ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8004ba8:	e675      	b.n	8004896 <_vsnprintf+0x1e>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004baa:	2320      	movs	r3, #32
 8004bac:	431d      	orrs	r5, r3
 8004bae:	e7e1      	b.n	8004b74 <_vsnprintf+0x2fc>
        if (!(flags & FLAGS_LEFT)) {
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	001a      	movs	r2, r3
 8004bb4:	402a      	ands	r2, r5
 8004bb6:	4693      	mov	fp, r2
 8004bb8:	422b      	tst	r3, r5
 8004bba:	d01e      	beq.n	8004bfa <_vsnprintf+0x382>
        unsigned int l = 1U;
 8004bbc:	2501      	movs	r5, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8004bbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004bc0:	1d1a      	adds	r2, r3, #4
 8004bc2:	9214      	str	r2, [sp, #80]	; 0x50
 8004bc4:	1c62      	adds	r2, r4, #1
 8004bc6:	4690      	mov	r8, r2
 8004bc8:	7818      	ldrb	r0, [r3, #0]
 8004bca:	464b      	mov	r3, r9
 8004bcc:	0022      	movs	r2, r4
 8004bce:	4651      	mov	r1, sl
 8004bd0:	47b0      	blx	r6
        if (flags & FLAGS_LEFT) {
 8004bd2:	465b      	mov	r3, fp
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d114      	bne.n	8004c02 <_vsnprintf+0x38a>
        format++;
 8004bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bda:	3301      	adds	r3, #1
 8004bdc:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8004bde:	4644      	mov	r4, r8
 8004be0:	e659      	b.n	8004896 <_vsnprintf+0x1e>
            out(' ', buffer, idx++, maxlen);
 8004be2:	1c57      	adds	r7, r2, #1
 8004be4:	464b      	mov	r3, r9
 8004be6:	4651      	mov	r1, sl
 8004be8:	2020      	movs	r0, #32
 8004bea:	47b0      	blx	r6
          while (l++ < width) {
 8004bec:	002b      	movs	r3, r5
            out(' ', buffer, idx++, maxlen);
 8004bee:	003a      	movs	r2, r7
          while (l++ < width) {
 8004bf0:	1c5d      	adds	r5, r3, #1
 8004bf2:	429c      	cmp	r4, r3
 8004bf4:	d8f5      	bhi.n	8004be2 <_vsnprintf+0x36a>
 8004bf6:	0014      	movs	r4, r2
 8004bf8:	e7e1      	b.n	8004bbe <_vsnprintf+0x346>
        unsigned int l = 1U;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	0022      	movs	r2, r4
 8004bfe:	9c06      	ldr	r4, [sp, #24]
 8004c00:	e7f6      	b.n	8004bf0 <_vsnprintf+0x378>
 8004c02:	4642      	mov	r2, r8
 8004c04:	46b0      	mov	r8, r6
 8004c06:	9e06      	ldr	r6, [sp, #24]
 8004c08:	e006      	b.n	8004c18 <_vsnprintf+0x3a0>
            out(' ', buffer, idx++, maxlen);
 8004c0a:	1c57      	adds	r7, r2, #1
 8004c0c:	464b      	mov	r3, r9
 8004c0e:	4651      	mov	r1, sl
 8004c10:	2020      	movs	r0, #32
 8004c12:	47c0      	blx	r8
          while (l++ < width) {
 8004c14:	0025      	movs	r5, r4
            out(' ', buffer, idx++, maxlen);
 8004c16:	003a      	movs	r2, r7
          while (l++ < width) {
 8004c18:	1c6c      	adds	r4, r5, #1
 8004c1a:	42ae      	cmp	r6, r5
 8004c1c:	d8f5      	bhi.n	8004c0a <_vsnprintf+0x392>
 8004c1e:	4646      	mov	r6, r8
 8004c20:	4690      	mov	r8, r2
 8004c22:	e7d9      	b.n	8004bd8 <_vsnprintf+0x360>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8004c24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c26:	1d1a      	adds	r2, r3, #4
 8004c28:	9214      	str	r2, [sp, #80]	; 0x50
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4698      	mov	r8, r3
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004c2e:	465b      	mov	r3, fp
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d100      	bne.n	8004c36 <_vsnprintf+0x3be>
 8004c34:	3b01      	subs	r3, #1
 8004c36:	4647      	mov	r7, r8
 8004c38:	e006      	b.n	8004c48 <_vsnprintf+0x3d0>
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	080068b0 	.word	0x080068b0
 8004c40:	08006a00 	.word	0x08006a00
  for (s = str; *s && maxsize--; ++s);
 8004c44:	3701      	adds	r7, #1
 8004c46:	0013      	movs	r3, r2
 8004c48:	783a      	ldrb	r2, [r7, #0]
 8004c4a:	2a00      	cmp	r2, #0
 8004c4c:	d002      	beq.n	8004c54 <_vsnprintf+0x3dc>
 8004c4e:	1e5a      	subs	r2, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1f7      	bne.n	8004c44 <_vsnprintf+0x3cc>
  return (unsigned int)(s - str);
 8004c54:	4643      	mov	r3, r8
 8004c56:	1afa      	subs	r2, r7, r3
 8004c58:	9207      	str	r2, [sp, #28]
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8004c5a:	2380      	movs	r3, #128	; 0x80
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	002f      	movs	r7, r5
 8004c60:	401f      	ands	r7, r3
 8004c62:	421d      	tst	r5, r3
 8004c64:	d003      	beq.n	8004c6e <_vsnprintf+0x3f6>
          l = (l < precision ? l : precision);
 8004c66:	455a      	cmp	r2, fp
 8004c68:	d901      	bls.n	8004c6e <_vsnprintf+0x3f6>
 8004c6a:	465b      	mov	r3, fp
 8004c6c:	9307      	str	r3, [sp, #28]
        }
        if (!(flags & FLAGS_LEFT)) {
 8004c6e:	2302      	movs	r3, #2
 8004c70:	001a      	movs	r2, r3
 8004c72:	402a      	ands	r2, r5
 8004c74:	9208      	str	r2, [sp, #32]
 8004c76:	422b      	tst	r3, r5
 8004c78:	d005      	beq.n	8004c86 <_vsnprintf+0x40e>
 8004c7a:	0022      	movs	r2, r4
 8004c7c:	465c      	mov	r4, fp
 8004c7e:	4645      	mov	r5, r8
 8004c80:	46b0      	mov	r8, r6
 8004c82:	003e      	movs	r6, r7
 8004c84:	e020      	b.n	8004cc8 <_vsnprintf+0x450>
 8004c86:	0022      	movs	r2, r4
 8004c88:	9b07      	ldr	r3, [sp, #28]
 8004c8a:	4651      	mov	r1, sl
 8004c8c:	46ba      	mov	sl, r7
 8004c8e:	000f      	movs	r7, r1
 8004c90:	e006      	b.n	8004ca0 <_vsnprintf+0x428>
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
 8004c92:	1c54      	adds	r4, r2, #1
 8004c94:	464b      	mov	r3, r9
 8004c96:	0039      	movs	r1, r7
 8004c98:	2020      	movs	r0, #32
 8004c9a:	47b0      	blx	r6
          while (l++ < width) {
 8004c9c:	002b      	movs	r3, r5
            out(' ', buffer, idx++, maxlen);
 8004c9e:	0022      	movs	r2, r4
          while (l++ < width) {
 8004ca0:	1c5d      	adds	r5, r3, #1
 8004ca2:	9906      	ldr	r1, [sp, #24]
 8004ca4:	4299      	cmp	r1, r3
 8004ca6:	d8f4      	bhi.n	8004c92 <_vsnprintf+0x41a>
 8004ca8:	003b      	movs	r3, r7
 8004caa:	4657      	mov	r7, sl
 8004cac:	469a      	mov	sl, r3
 8004cae:	9507      	str	r5, [sp, #28]
 8004cb0:	465c      	mov	r4, fp
 8004cb2:	4645      	mov	r5, r8
 8004cb4:	46b0      	mov	r8, r6
 8004cb6:	003e      	movs	r6, r7
 8004cb8:	e006      	b.n	8004cc8 <_vsnprintf+0x450>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004cba:	001c      	movs	r4, r3
          out(*(p++), buffer, idx++, maxlen);
 8004cbc:	3501      	adds	r5, #1
 8004cbe:	1c57      	adds	r7, r2, #1
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	4651      	mov	r1, sl
 8004cc4:	47c0      	blx	r8
 8004cc6:	003a      	movs	r2, r7
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004cc8:	7828      	ldrb	r0, [r5, #0]
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	d004      	beq.n	8004cd8 <_vsnprintf+0x460>
 8004cce:	2e00      	cmp	r6, #0
 8004cd0:	d0f4      	beq.n	8004cbc <_vsnprintf+0x444>
 8004cd2:	1e63      	subs	r3, r4, #1
 8004cd4:	2c00      	cmp	r4, #0
 8004cd6:	d1f0      	bne.n	8004cba <_vsnprintf+0x442>
 8004cd8:	0014      	movs	r4, r2
 8004cda:	4646      	mov	r6, r8
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8004cdc:	9b08      	ldr	r3, [sp, #32]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d103      	bne.n	8004cea <_vsnprintf+0x472>
          while (l++ < width) {
            out(' ', buffer, idx++, maxlen);
          }
        }
        format++;
 8004ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8004ce8:	e5d5      	b.n	8004896 <_vsnprintf+0x1e>
 8004cea:	9f06      	ldr	r7, [sp, #24]
 8004cec:	9b07      	ldr	r3, [sp, #28]
 8004cee:	e006      	b.n	8004cfe <_vsnprintf+0x486>
            out(' ', buffer, idx++, maxlen);
 8004cf0:	1c55      	adds	r5, r2, #1
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	4651      	mov	r1, sl
 8004cf6:	2020      	movs	r0, #32
 8004cf8:	47b0      	blx	r6
          while (l++ < width) {
 8004cfa:	0023      	movs	r3, r4
            out(' ', buffer, idx++, maxlen);
 8004cfc:	002a      	movs	r2, r5
          while (l++ < width) {
 8004cfe:	1c5c      	adds	r4, r3, #1
 8004d00:	429f      	cmp	r7, r3
 8004d02:	d8f5      	bhi.n	8004cf0 <_vsnprintf+0x478>
 8004d04:	0014      	movs	r4, r2
 8004d06:	e7ec      	b.n	8004ce2 <_vsnprintf+0x46a>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8004d08:	2321      	movs	r3, #33	; 0x21
 8004d0a:	431d      	orrs	r5, r3
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004d0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d0e:	1d1a      	adds	r2, r3, #4
 8004d10:	9214      	str	r2, [sp, #80]	; 0x50
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	9505      	str	r5, [sp, #20]
 8004d18:	2308      	movs	r3, #8
 8004d1a:	9304      	str	r3, [sp, #16]
 8004d1c:	465b      	mov	r3, fp
 8004d1e:	9303      	str	r3, [sp, #12]
 8004d20:	2310      	movs	r3, #16
 8004d22:	9302      	str	r3, [sp, #8]
 8004d24:	2300      	movs	r3, #0
 8004d26:	9301      	str	r3, [sp, #4]
 8004d28:	464b      	mov	r3, r9
 8004d2a:	0022      	movs	r2, r4
 8004d2c:	4651      	mov	r1, sl
 8004d2e:	0030      	movs	r0, r6
 8004d30:	f7ff fba8 	bl	8004484 <_ntoa_long>
 8004d34:	0004      	movs	r4, r0
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8004d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d38:	3301      	adds	r3, #1
 8004d3a:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8004d3c:	e5ab      	b.n	8004896 <_vsnprintf+0x1e>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8004d3e:	1c65      	adds	r5, r4, #1
 8004d40:	464b      	mov	r3, r9
 8004d42:	0022      	movs	r2, r4
 8004d44:	4651      	mov	r1, sl
 8004d46:	2025      	movs	r0, #37	; 0x25
 8004d48:	47b0      	blx	r6
        format++;
 8004d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	9309      	str	r3, [sp, #36]	; 0x24
        out('%', buffer, idx++, maxlen);
 8004d50:	002c      	movs	r4, r5
        break;
 8004d52:	e5a0      	b.n	8004896 <_vsnprintf+0x1e>

      default :
        out(*format, buffer, idx++, maxlen);
 8004d54:	1c65      	adds	r5, r4, #1
 8004d56:	464b      	mov	r3, r9
 8004d58:	0022      	movs	r2, r4
 8004d5a:	4651      	mov	r1, sl
 8004d5c:	47b0      	blx	r6
        format++;
 8004d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d60:	3301      	adds	r3, #1
 8004d62:	9309      	str	r3, [sp, #36]	; 0x24
        out(*format, buffer, idx++, maxlen);
 8004d64:	002c      	movs	r4, r5
        break;
 8004d66:	e596      	b.n	8004896 <_vsnprintf+0x1e>
    out = _out_null;
 8004d68:	4e04      	ldr	r6, [pc, #16]	; (8004d7c <_vsnprintf+0x504>)
 8004d6a:	e593      	b.n	8004894 <_vsnprintf+0x1c>
  // termination
  // out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
}
 8004d6c:	0020      	movs	r0, r4
 8004d6e:	b00b      	add	sp, #44	; 0x2c
 8004d70:	bcf0      	pop	{r4, r5, r6, r7}
 8004d72:	46bb      	mov	fp, r7
 8004d74:	46b2      	mov	sl, r6
 8004d76:	46a9      	mov	r9, r5
 8004d78:	46a0      	mov	r8, r4
 8004d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d7c:	080042a1 	.word	0x080042a1

08004d80 <spi_read_single>:
 * 
 * @param reg Register to read
 * @retval Value read from register
 */
static uint8_t spi_read_single(uint8_t reg)
{
 8004d80:	b570      	push	{r4, r5, r6, lr}
 8004d82:	0004      	movs	r4, r0
  spi_chip_select();
 8004d84:	25a0      	movs	r5, #160	; 0xa0
 8004d86:	05ed      	lsls	r5, r5, #23
 8004d88:	2110      	movs	r1, #16
 8004d8a:	0028      	movs	r0, r5
 8004d8c:	f000 f9bc 	bl	8005108 <gpio_clear>
  timers_delay_microseconds(1);
 8004d90:	2001      	movs	r0, #1
 8004d92:	f000 f89d 	bl	8004ed0 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, reg);                   
 8004d96:	b2a1      	uxth	r1, r4
 8004d98:	4c08      	ldr	r4, [pc, #32]	; (8004dbc <spi_read_single+0x3c>)
 8004d9a:	0020      	movs	r0, r4
 8004d9c:	f000 fb08 	bl	80053b0 <spi_xfer>
  uint8_t in =  spi_xfer(RFM_SPI, 0x00);                   
 8004da0:	2100      	movs	r1, #0
 8004da2:	0020      	movs	r0, r4
 8004da4:	f000 fb04 	bl	80053b0 <spi_xfer>
 8004da8:	b2c4      	uxtb	r4, r0
    
  spi_chip_deselect(); 
 8004daa:	2110      	movs	r1, #16
 8004dac:	0028      	movs	r0, r5
 8004dae:	f000 f9a9 	bl	8005104 <gpio_set>
  timers_delay_microseconds(1);
 8004db2:	2001      	movs	r0, #1
 8004db4:	f000 f88c 	bl	8004ed0 <timers_delay_microseconds>

  return in;
}
 8004db8:	0020      	movs	r0, r4
 8004dba:	bd70      	pop	{r4, r5, r6, pc}
 8004dbc:	40013000 	.word	0x40013000

08004dc0 <spi_write_single>:
  spi_chip_deselect();     
  timers_delay_microseconds(1);
}

static void spi_write_single(uint8_t reg, uint8_t data)
{
 8004dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc2:	0005      	movs	r5, r0
 8004dc4:	000e      	movs	r6, r1
  // Set MSB for write operation
  uint8_t cmd = 0x80 | reg;
 8004dc6:	2480      	movs	r4, #128	; 0x80
 8004dc8:	4264      	negs	r4, r4
 8004dca:	4304      	orrs	r4, r0
 8004dcc:	b2e4      	uxtb	r4, r4

  spi_chip_select();
 8004dce:	27a0      	movs	r7, #160	; 0xa0
 8004dd0:	05ff      	lsls	r7, r7, #23
 8004dd2:	2110      	movs	r1, #16
 8004dd4:	0038      	movs	r0, r7
 8004dd6:	f000 f997 	bl	8005108 <gpio_clear>
  timers_delay_microseconds(1);
 8004dda:	2001      	movs	r0, #1
 8004ddc:	f000 f878 	bl	8004ed0 <timers_delay_microseconds>

  spi_xfer(RFM_SPI, cmd);                 
 8004de0:	b2a1      	uxth	r1, r4
 8004de2:	4c15      	ldr	r4, [pc, #84]	; (8004e38 <spi_write_single+0x78>)
 8004de4:	0020      	movs	r0, r4
 8004de6:	f000 fae3 	bl	80053b0 <spi_xfer>
  spi_xfer(RFM_SPI, data);             
 8004dea:	b2b1      	uxth	r1, r6
 8004dec:	0020      	movs	r0, r4
 8004dee:	f000 fadf 	bl	80053b0 <spi_xfer>

  spi_chip_deselect(); 
 8004df2:	2110      	movs	r1, #16
 8004df4:	0038      	movs	r0, r7
 8004df6:	f000 f985 	bl	8005104 <gpio_set>
  timers_delay_microseconds(1);
 8004dfa:	2001      	movs	r0, #1
 8004dfc:	f000 f868 	bl	8004ed0 <timers_delay_microseconds>

  uint8_t curr_data = spi_read_single(reg);
 8004e00:	0028      	movs	r0, r5
 8004e02:	f7ff ffbd 	bl	8004d80 <spi_read_single>
 8004e06:	0004      	movs	r4, r0

  // log_printf(MAIN, "%02x : %02x\n", reg, data);

  if(reg == RFM_REG_12_IRQ_FLAGS)    
 8004e08:	2d12      	cmp	r5, #18
 8004e0a:	d013      	beq.n	8004e34 <spi_write_single+0x74>
    return;

  TIMEOUT(10000, "RFM SPI Write", ((reg << 16) | data), (curr_data == data), ;, timers_delay_microseconds(100); curr_data = spi_read_single(reg););
 8004e0c:	f000 f87e 	bl	8004f0c <timeout_init>
 8004e10:	042a      	lsls	r2, r5, #16
 8004e12:	4332      	orrs	r2, r6
 8004e14:	4909      	ldr	r1, [pc, #36]	; (8004e3c <spi_write_single+0x7c>)
 8004e16:	480a      	ldr	r0, [pc, #40]	; (8004e40 <spi_write_single+0x80>)
 8004e18:	f000 f886 	bl	8004f28 <timeout>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d109      	bne.n	8004e34 <spi_write_single+0x74>
 8004e20:	42b4      	cmp	r4, r6
 8004e22:	d007      	beq.n	8004e34 <spi_write_single+0x74>
 8004e24:	2064      	movs	r0, #100	; 0x64
 8004e26:	f000 f853 	bl	8004ed0 <timers_delay_microseconds>
 8004e2a:	0028      	movs	r0, r5
 8004e2c:	f7ff ffa8 	bl	8004d80 <spi_read_single>
 8004e30:	0004      	movs	r4, r0
 8004e32:	e7ed      	b.n	8004e10 <spi_write_single+0x50>

  // log_printf(MAIN, "%02x : %02x : %02x\n", reg, data, curr_data);
}
 8004e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	40013000 	.word	0x40013000
 8004e3c:	08006a98 	.word	0x08006a98
 8004e40:	00002710 	.word	0x00002710

08004e44 <exti4_15_isr>:
/*////////////////////////////////////////////////////////////////////////////*/
// Interrupts
/*////////////////////////////////////////////////////////////////////////////*/

void exti4_15_isr(void)
{
 8004e44:	b570      	push	{r4, r5, r6, lr}
  uint16_t timer = timers_micros();
 8004e46:	f000 f859 	bl	8004efc <timers_micros>
  
  exti_reset_request(RFM_IO_0_EXTI);
 8004e4a:	2480      	movs	r4, #128	; 0x80
 8004e4c:	0224      	lsls	r4, r4, #8
 8004e4e:	0020      	movs	r0, r4
 8004e50:	f000 f934 	bl	80050bc <exti_reset_request>
  exti_reset_request(RFM_IO_0_EXTI);
 8004e54:	0020      	movs	r0, r4
 8004e56:	f000 f931 	bl	80050bc <exti_reset_request>

  // Store IRQ Flags
  packets_buf[packets_head].flags = get_irq();
 8004e5a:	4d1b      	ldr	r5, [pc, #108]	; (8004ec8 <exti4_15_isr+0x84>)
 8004e5c:	782e      	ldrb	r6, [r5, #0]
  return spi_read_single(RFM_REG_12_IRQ_FLAGS);
 8004e5e:	2012      	movs	r0, #18
 8004e60:	f7ff ff8e 	bl	8004d80 <spi_read_single>
  packets_buf[packets_head].flags = get_irq();
 8004e64:	4c19      	ldr	r4, [pc, #100]	; (8004ecc <exti4_15_isr+0x88>)
 8004e66:	0073      	lsls	r3, r6, #1
 8004e68:	199b      	adds	r3, r3, r6
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	18e3      	adds	r3, r4, r3
 8004e6e:	7418      	strb	r0, [r3, #16]
  spi_write_single(RFM_REG_12_IRQ_FLAGS, irq);
 8004e70:	21ff      	movs	r1, #255	; 0xff
 8004e72:	2012      	movs	r0, #18
 8004e74:	f7ff ffa4 	bl	8004dc0 <spi_write_single>
 8004e78:	21ff      	movs	r1, #255	; 0xff
 8004e7a:	2012      	movs	r0, #18
 8004e7c:	f7ff ffa0 	bl	8004dc0 <spi_write_single>
  clear_irq(RFM_IRQ_ALL);
  clear_irq(RFM_IRQ_ALL);

  // Get signal strength
  packets_buf[packets_head].rssi = spi_read_single(RFM_REG_1A_PKT_RSSI_VALUE);
 8004e80:	201a      	movs	r0, #26
 8004e82:	f7ff ff7d 	bl	8004d80 <spi_read_single>
 8004e86:	782a      	ldrb	r2, [r5, #0]
 8004e88:	b200      	sxth	r0, r0
  packets_buf[packets_head].rssi -= 137;
 8004e8a:	0053      	lsls	r3, r2, #1
 8004e8c:	189b      	adds	r3, r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	18e3      	adds	r3, r4, r3
 8004e92:	3889      	subs	r0, #137	; 0x89
 8004e94:	8298      	strh	r0, [r3, #20]
  packets_buf[packets_head].snr = spi_read_single(RFM_REG_19_PKT_SNR_VALUE) / 4;
 8004e96:	2019      	movs	r0, #25
 8004e98:	f7ff ff72 	bl	8004d80 <spi_read_single>
 8004e9c:	782b      	ldrb	r3, [r5, #0]
 8004e9e:	005a      	lsls	r2, r3, #1
 8004ea0:	18d2      	adds	r2, r2, r3
 8004ea2:	00d2      	lsls	r2, r2, #3
 8004ea4:	18a4      	adds	r4, r4, r2
 8004ea6:	0880      	lsrs	r0, r0, #2
 8004ea8:	74a0      	strb	r0, [r4, #18]

  // Check for CRC error
  packets_buf[packets_head].crc_ok = !(packets_buf[packets_head].flags & RFM_IRQ_PAYLOAD_CRC_ERROR);
 8004eaa:	7c22      	ldrb	r2, [r4, #16]
 8004eac:	0952      	lsrs	r2, r2, #5
 8004eae:	2101      	movs	r1, #1
 8004eb0:	404a      	eors	r2, r1
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	400a      	ands	r2, r1
 8004eb6:	7462      	strb	r2, [r4, #17]

  packets_head = (packets_head + 1) % PACKETS_BUF_SIZE;
 8004eb8:	3301      	adds	r3, #1
 8004eba:	220f      	movs	r2, #15
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	702b      	strb	r3, [r5, #0]

  uint16_t time = timers_micros() - timer;
 8004ec0:	f000 f81c 	bl	8004efc <timers_micros>
  // log_printf(MAIN, "ISR %u %u %u\n", time, packets_head, packets_tail);
}
 8004ec4:	bd70      	pop	{r4, r5, r6, pc}
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	20000190 	.word	0x20000190
 8004ecc:	20000010 	.word	0x20000010

08004ed0 <timers_delay_microseconds>:
    lptimer_start_counter(LPTIM1, LPTIM_CR_CNTSTRT);
}

// Simple delay function. Puts cpu into nop loop timed by lptim1
void timers_delay_microseconds(uint32_t delay_microseconds)
{
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	0004      	movs	r4, r0
    uint32_t curr_time = lptimer_get_counter(LPTIM1);
 8004ed4:	4807      	ldr	r0, [pc, #28]	; (8004ef4 <timers_delay_microseconds+0x24>)
 8004ed6:	f000 f982 	bl	80051de <lptimer_get_counter>
 8004eda:	0005      	movs	r5, r0

    // Limit delay to 16 bit max. Otherwise delay might never end
    if(delay_microseconds > 65000)
 8004edc:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <timers_delay_microseconds+0x28>)
 8004ede:	429c      	cmp	r4, r3
 8004ee0:	d900      	bls.n	8004ee4 <timers_delay_microseconds+0x14>
        delay_microseconds = 65000;
 8004ee2:	001c      	movs	r4, r3

    while (lptimer_get_counter(LPTIM1) - curr_time < delay_microseconds);
 8004ee4:	4803      	ldr	r0, [pc, #12]	; (8004ef4 <timers_delay_microseconds+0x24>)
 8004ee6:	f000 f97a 	bl	80051de <lptimer_get_counter>
 8004eea:	1b40      	subs	r0, r0, r5
 8004eec:	42a0      	cmp	r0, r4
 8004eee:	d3f9      	bcc.n	8004ee4 <timers_delay_microseconds+0x14>
}
 8004ef0:	bd70      	pop	{r4, r5, r6, pc}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	40007c00 	.word	0x40007c00
 8004ef8:	0000fde8 	.word	0x0000fde8

08004efc <timers_micros>:
}
*/

// Returns value of microsecond counter
uint16_t timers_micros(void)
{
 8004efc:	b510      	push	{r4, lr}
    return (uint16_t)lptimer_get_counter(LPTIM1);
 8004efe:	4802      	ldr	r0, [pc, #8]	; (8004f08 <timers_micros+0xc>)
 8004f00:	f000 f96d 	bl	80051de <lptimer_get_counter>
}
 8004f04:	bd10      	pop	{r4, pc}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	40007c00 	.word	0x40007c00

08004f0c <timeout_init>:
}


// Timout functions
void timeout_init(void)
{
 8004f0c:	b510      	push	{r4, lr}
    timeout_counter     = 0; 
 8004f0e:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <timeout_init+0x14>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]
    // timeout_counter     = 2140483648; 
    timeout_timer       = timers_micros(); 
 8004f14:	f7ff fff2 	bl	8004efc <timers_micros>
 8004f18:	4b02      	ldr	r3, [pc, #8]	; (8004f24 <timeout_init+0x18>)
 8004f1a:	8018      	strh	r0, [r3, #0]
}
 8004f1c:	bd10      	pop	{r4, pc}
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	20000194 	.word	0x20000194
 8004f24:	20000198 	.word	0x20000198

08004f28 <timeout>:

bool timeout(uint32_t time_microseconds, char *msg, uint32_t data)
{
 8004f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	0006      	movs	r6, r0
 8004f2e:	9101      	str	r1, [sp, #4]
 8004f30:	0015      	movs	r5, r2
    timeout_counter    += (uint16_t)(timers_micros() - timeout_timer);
 8004f32:	f7ff ffe3 	bl	8004efc <timers_micros>
 8004f36:	4c0d      	ldr	r4, [pc, #52]	; (8004f6c <timeout+0x44>)
 8004f38:	8823      	ldrh	r3, [r4, #0]
 8004f3a:	1ac3      	subs	r3, r0, r3
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	4f0c      	ldr	r7, [pc, #48]	; (8004f70 <timeout+0x48>)
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	4694      	mov	ip, r2
 8004f44:	4463      	add	r3, ip
 8004f46:	603b      	str	r3, [r7, #0]
    timeout_timer       = timers_micros();
 8004f48:	f7ff ffd8 	bl	8004efc <timers_micros>
 8004f4c:	8020      	strh	r0, [r4, #0]

    // log_printf(MAIN, "%u\n", timeout_counter);

    if(timeout_counter > time_microseconds)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	42b3      	cmp	r3, r6
 8004f52:	d802      	bhi.n	8004f5a <timeout+0x32>
    {
        log_printf(MAIN, "Timeout %s %08X\n", msg, data);
        return true;
    }
    else    
        return false;
 8004f54:	2000      	movs	r0, #0
}
 8004f56:	b003      	add	sp, #12
 8004f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
        log_printf(MAIN, "Timeout %s %08X\n", msg, data);
 8004f5a:	002b      	movs	r3, r5
 8004f5c:	9a01      	ldr	r2, [sp, #4]
 8004f5e:	4905      	ldr	r1, [pc, #20]	; (8004f74 <timeout+0x4c>)
 8004f60:	2000      	movs	r0, #0
 8004f62:	f7ff f951 	bl	8004208 <log_printf>
        return true;
 8004f66:	2001      	movs	r0, #1
 8004f68:	e7f5      	b.n	8004f56 <timeout+0x2e>
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	20000198 	.word	0x20000198
 8004f70:	20000194 	.word	0x20000194
 8004f74:	08006aa8 	.word	0x08006aa8

08004f78 <set_gpio_for_standby>:

void set_gpio_for_standby(void)
{   
 8004f78:	b570      	push	{r4, r5, r6, lr}
    // Common
    // LED
    gpio_mode_setup(LED_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, LED);
 8004f7a:	2580      	movs	r5, #128	; 0x80
 8004f7c:	01ed      	lsls	r5, r5, #7
 8004f7e:	24a0      	movs	r4, #160	; 0xa0
 8004f80:	05e4      	lsls	r4, r4, #23
 8004f82:	002b      	movs	r3, r5
 8004f84:	2200      	movs	r2, #0
 8004f86:	2103      	movs	r1, #3
 8004f88:	0020      	movs	r0, r4
 8004f8a:	f000 f8c0 	bl	800510e <gpio_mode_setup>
    gpio_set(LED_PORT, LED);
 8004f8e:	0029      	movs	r1, r5
 8004f90:	0020      	movs	r0, r4
 8004f92:	f000 f8b7 	bl	8005104 <gpio_set>

    // Serial Print
    gpio_mode_setup(SPF_USART_TX_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, SPF_USART_TX);
 8004f96:	2304      	movs	r3, #4
 8004f98:	2201      	movs	r2, #1
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	0020      	movs	r0, r4
 8004f9e:	f000 f8b6 	bl	800510e <gpio_mode_setup>
	gpio_mode_setup(SPF_USART_RX_PORT, GPIO_MODE_OUTPUT, GPIO_PUPD_NONE,  SPF_USART_RX);
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	0020      	movs	r0, r4
 8004faa:	f000 f8b0 	bl	800510e <gpio_mode_setup>
	gpio_set(SPF_USART_RX_PORT, SPF_USART_RX);
 8004fae:	2108      	movs	r1, #8
 8004fb0:	0020      	movs	r0, r4
 8004fb2:	f000 f8a7 	bl	8005104 <gpio_set>

    // Batt Sense
    gpio_mode_setup(BATT_SENS_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, BATT_SENS);
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	2200      	movs	r2, #0
 8004fba:	2103      	movs	r1, #3
 8004fbc:	0020      	movs	r0, r4
 8004fbe:	f000 f8a6 	bl	800510e <gpio_mode_setup>
    
    // RFM
    // SPI
    gpio_mode_setup(RFM_SPI_MISO_PORT,  GPIO_MODE_ANALOG,   GPIO_PUPD_NONE,       RFM_SPI_MISO);
 8004fc2:	2340      	movs	r3, #64	; 0x40
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2103      	movs	r1, #3
 8004fc8:	0020      	movs	r0, r4
 8004fca:	f000 f8a0 	bl	800510e <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_SCK_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_SCK);
 8004fce:	2320      	movs	r3, #32
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	0020      	movs	r0, r4
 8004fd6:	f000 f89a 	bl	800510e <gpio_mode_setup>
    gpio_mode_setup(RFM_SPI_MOSI_PORT,  GPIO_MODE_INPUT,    GPIO_PUPD_PULLDOWN,   RFM_SPI_MOSI);
 8004fda:	2380      	movs	r3, #128	; 0x80
 8004fdc:	2202      	movs	r2, #2
 8004fde:	2100      	movs	r1, #0
 8004fe0:	0020      	movs	r0, r4
 8004fe2:	f000 f894 	bl	800510e <gpio_mode_setup>

    gpio_mode_setup(RFM_SPI_NSS_PORT,   GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_SPI_NSS);
 8004fe6:	2310      	movs	r3, #16
 8004fe8:	2201      	movs	r2, #1
 8004fea:	2100      	movs	r1, #0
 8004fec:	0020      	movs	r0, r4
 8004fee:	f000 f88e 	bl	800510e <gpio_mode_setup>
    gpio_mode_setup(RFM_RESET_PORT,     GPIO_MODE_INPUT,    GPIO_PUPD_PULLUP,     RFM_RESET);
 8004ff2:	4c1e      	ldr	r4, [pc, #120]	; (800506c <set_gpio_for_standby+0xf4>)
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	0020      	movs	r0, r4
 8004ffc:	f000 f887 	bl	800510e <gpio_mode_setup>

    // DIO
    gpio_mode_setup(RFM_IO_0_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_0);
 8005000:	2380      	movs	r3, #128	; 0x80
 8005002:	021b      	lsls	r3, r3, #8
 8005004:	2200      	movs	r2, #0
 8005006:	2103      	movs	r1, #3
 8005008:	0020      	movs	r0, r4
 800500a:	f000 f880 	bl	800510e <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_1_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_1);
 800500e:	2380      	movs	r3, #128	; 0x80
 8005010:	015b      	lsls	r3, r3, #5
 8005012:	2200      	movs	r2, #0
 8005014:	2103      	movs	r1, #3
 8005016:	0020      	movs	r0, r4
 8005018:	f000 f879 	bl	800510e <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_2_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_2);
 800501c:	2380      	movs	r3, #128	; 0x80
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	2200      	movs	r2, #0
 8005022:	2103      	movs	r1, #3
 8005024:	0020      	movs	r0, r4
 8005026:	f000 f872 	bl	800510e <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_3_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_3);
 800502a:	2304      	movs	r3, #4
 800502c:	2200      	movs	r2, #0
 800502e:	2103      	movs	r1, #3
 8005030:	0020      	movs	r0, r4
 8005032:	f000 f86c 	bl	800510e <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_4_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_4);
 8005036:	2380      	movs	r3, #128	; 0x80
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	2200      	movs	r2, #0
 800503c:	2103      	movs	r1, #3
 800503e:	0020      	movs	r0, r4
 8005040:	f000 f865 	bl	800510e <gpio_mode_setup>
    gpio_mode_setup(RFM_IO_5_PORT, GPIO_MODE_ANALOG, GPIO_PUPD_NONE, RFM_IO_5);
 8005044:	2302      	movs	r3, #2
 8005046:	2200      	movs	r2, #0
 8005048:	2103      	movs	r1, #3
 800504a:	0020      	movs	r0, r4
 800504c:	f000 f85f 	bl	800510e <gpio_mode_setup>

    #ifdef _HUB
    #else

    // TMP
    gpio_mode_setup(TEMP_I2C_SCL_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SCL);
 8005050:	2380      	movs	r3, #128	; 0x80
 8005052:	019b      	lsls	r3, r3, #6
 8005054:	2201      	movs	r2, #1
 8005056:	2100      	movs	r1, #0
 8005058:	0020      	movs	r0, r4
 800505a:	f000 f858 	bl	800510e <gpio_mode_setup>
	gpio_mode_setup(TEMP_I2C_SDA_PORT, GPIO_MODE_INPUT, GPIO_PUPD_PULLUP, TEMP_I2C_SDA);
 800505e:	002b      	movs	r3, r5
 8005060:	2201      	movs	r2, #1
 8005062:	2100      	movs	r1, #0
 8005064:	0020      	movs	r0, r4
 8005066:	f000 f852 	bl	800510e <gpio_mode_setup>

    #endif

}
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	50000400 	.word	0x50000400

08005070 <rtc_isr>:

// Override default rtc interrupt handler
void rtc_isr(void)
{ 
 8005070:	b510      	push	{r4, lr}
    exti_reset_request(EXTI20);
 8005072:	2080      	movs	r0, #128	; 0x80
 8005074:	0340      	lsls	r0, r0, #13
 8005076:	f000 f821 	bl	80050bc <exti_reset_request>

    // scb_reset_system();

    log_init();
 800507a:	f7ff f8b9 	bl	80041f0 <log_init>
    log_printf(MAIN, "RTC ISR\n");
 800507e:	490d      	ldr	r1, [pc, #52]	; (80050b4 <rtc_isr+0x44>)
 8005080:	2000      	movs	r0, #0
 8005082:	f7ff f8c1 	bl	8004208 <log_printf>

    if(RTC_ISR & RTC_ISR_WUTF)
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <rtc_isr+0x48>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	055b      	lsls	r3, r3, #21
 800508c:	d400      	bmi.n	8005090 <rtc_isr+0x20>
        pwr_clear_standby_flag();
        rtc_lock();
	    pwr_enable_backup_domain_write_protect();
        set_gpio_for_standby();
    }
}
 800508e:	bd10      	pop	{r4, pc}
        pwr_disable_backup_domain_write_protect();
 8005090:	f000 f8a8 	bl	80051e4 <pwr_disable_backup_domain_write_protect>
        rtc_unlock();
 8005094:	f000 f974 	bl	8005380 <rtc_unlock>
	    rtc_clear_wakeup_flag();
 8005098:	f000 f980 	bl	800539c <rtc_clear_wakeup_flag>
        pwr_clear_wakeup_flag();
 800509c:	f000 f8be 	bl	800521c <pwr_clear_wakeup_flag>
        pwr_clear_standby_flag();
 80050a0:	f000 f8b4 	bl	800520c <pwr_clear_standby_flag>
        rtc_lock();
 80050a4:	f000 f974 	bl	8005390 <rtc_lock>
	    pwr_enable_backup_domain_write_protect();
 80050a8:	f000 f8a6 	bl	80051f8 <pwr_enable_backup_domain_write_protect>
        set_gpio_for_standby();
 80050ac:	f7ff ff64 	bl	8004f78 <set_gpio_for_standby>
}
 80050b0:	e7ed      	b.n	800508e <rtc_isr+0x1e>
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	08006abc 	.word	0x08006abc
 80050b8:	4000280c 	.word	0x4000280c

080050bc <exti_reset_request>:
{
#if defined(EXTI_RPR1) && defined(EXTI_FPR1)
	EXTI_RPR1 = extis;
	EXTI_FPR1 = extis;
#else
	EXTI_PR = extis;
 80050bc:	4b01      	ldr	r3, [pc, #4]	; (80050c4 <exti_reset_request+0x8>)
 80050be:	6018      	str	r0, [r3, #0]
#endif
}
 80050c0:	4770      	bx	lr
 80050c2:	46c0      	nop			; (mov r8, r8)
 80050c4:	40010414 	.word	0x40010414

080050c8 <flash_set_ws>:
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 80050c8:	2101      	movs	r1, #1
	reg32 = FLASH_ACR;
 80050ca:	4a03      	ldr	r2, [pc, #12]	; (80050d8 <flash_set_ws+0x10>)
 80050cc:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 80050ce:	438b      	bics	r3, r1
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 80050d0:	4303      	orrs	r3, r0
	FLASH_ACR = reg32;
 80050d2:	6013      	str	r3, [r2, #0]
}
 80050d4:	4770      	bx	lr
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	40022000 	.word	0x40022000

080050dc <flash_unlock_pecr>:
 * yourself.
 * @sa flash_unlock
 */
void flash_unlock_pecr(void)
{
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY1;
 80050dc:	4b02      	ldr	r3, [pc, #8]	; (80050e8 <flash_unlock_pecr+0xc>)
 80050de:	4a03      	ldr	r2, [pc, #12]	; (80050ec <flash_unlock_pecr+0x10>)
 80050e0:	601a      	str	r2, [r3, #0]
	FLASH_PEKEYR = FLASH_PEKEYR_PEKEY2;
 80050e2:	4a03      	ldr	r2, [pc, #12]	; (80050f0 <flash_unlock_pecr+0x14>)
 80050e4:	601a      	str	r2, [r3, #0]
}
 80050e6:	4770      	bx	lr
 80050e8:	4002200c 	.word	0x4002200c
 80050ec:	89abcdef 	.word	0x89abcdef
 80050f0:	02030405 	.word	0x02030405

080050f4 <flash_lock_pecr>:

void flash_lock_pecr(void)
{
	FLASH_PECR |= FLASH_PECR_PELOCK;
 80050f4:	2301      	movs	r3, #1
 80050f6:	4a02      	ldr	r2, [pc, #8]	; (8005100 <flash_lock_pecr+0xc>)
 80050f8:	6811      	ldr	r1, [r2, #0]
 80050fa:	430b      	orrs	r3, r1
 80050fc:	6013      	str	r3, [r2, #0]
}
 80050fe:	4770      	bx	lr
 8005100:	40022004 	.word	0x40022004

08005104 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8005104:	6181      	str	r1, [r0, #24]
}
 8005106:	4770      	bx	lr

08005108 <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8005108:	0409      	lsls	r1, r1, #16
 800510a:	6181      	str	r1, [r0, #24]
}
 800510c:	4770      	bx	lr

0800510e <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 800510e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005110:	b085      	sub	sp, #20
 8005112:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8005114:	2703      	movs	r7, #3
	pupd = GPIO_PUPDR(gpioport);
 8005116:	2100      	movs	r1, #0
{
 8005118:	9202      	str	r2, [sp, #8]
 800511a:	9303      	str	r3, [sp, #12]
	moder = GPIO_MODER(gpioport);
 800511c:	6802      	ldr	r2, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 800511e:	68c3      	ldr	r3, [r0, #12]
		if (!((1 << i) & gpios)) {
 8005120:	9c03      	ldr	r4, [sp, #12]
 8005122:	2501      	movs	r5, #1
 8005124:	410c      	asrs	r4, r1
 8005126:	422c      	tst	r4, r5
 8005128:	d00a      	beq.n	8005140 <gpio_mode_setup+0x32>
		moder &= ~GPIO_MODE_MASK(i);
 800512a:	003d      	movs	r5, r7
 800512c:	004c      	lsls	r4, r1, #1
 800512e:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8005130:	9e01      	ldr	r6, [sp, #4]
		moder &= ~GPIO_MODE_MASK(i);
 8005132:	43aa      	bics	r2, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 8005134:	43ab      	bics	r3, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 8005136:	9d02      	ldr	r5, [sp, #8]
		moder |= GPIO_MODE(i, mode);
 8005138:	40a6      	lsls	r6, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 800513a:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 800513c:	4332      	orrs	r2, r6
		pupd |= GPIO_PUPD(i, pull_up_down);
 800513e:	432b      	orrs	r3, r5
	for (i = 0; i < 16; i++) {
 8005140:	3101      	adds	r1, #1
 8005142:	2910      	cmp	r1, #16
 8005144:	d1ec      	bne.n	8005120 <gpio_mode_setup+0x12>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 8005146:	6002      	str	r2, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 8005148:	60c3      	str	r3, [r0, #12]
}
 800514a:	b005      	add	sp, #20
 800514c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800514e <gpio_set_output_options>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_output_options(uint32_t gpioport, uint8_t otype, uint8_t speed,
			     uint16_t gpios)
{
 800514e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005150:	9201      	str	r2, [sp, #4]
	uint16_t i;
	uint32_t ospeedr;

	if (otype == 0x1) {
 8005152:	2901      	cmp	r1, #1
 8005154:	d116      	bne.n	8005184 <gpio_set_output_options+0x36>
		GPIO_OTYPER(gpioport) |= gpios;
 8005156:	6841      	ldr	r1, [r0, #4]
 8005158:	4319      	orrs	r1, r3
	} else {
		GPIO_OTYPER(gpioport) &= ~gpios;
	}

	ospeedr = GPIO_OSPEEDR(gpioport);
 800515a:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 800515c:	2601      	movs	r6, #1
			continue;
		}
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 800515e:	2703      	movs	r7, #3
		GPIO_OTYPER(gpioport) &= ~gpios;
 8005160:	6041      	str	r1, [r0, #4]
	ospeedr = GPIO_OSPEEDR(gpioport);
 8005162:	6881      	ldr	r1, [r0, #8]
		if (!((1 << i) & gpios)) {
 8005164:	001d      	movs	r5, r3
 8005166:	4125      	asrs	r5, r4
 8005168:	4235      	tst	r5, r6
 800516a:	d006      	beq.n	800517a <gpio_set_output_options+0x2c>
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 800516c:	003a      	movs	r2, r7
 800516e:	0065      	lsls	r5, r4, #1
 8005170:	40aa      	lsls	r2, r5
 8005172:	4391      	bics	r1, r2
		ospeedr |= GPIO_OSPEED(i, speed);
 8005174:	9a01      	ldr	r2, [sp, #4]
 8005176:	40aa      	lsls	r2, r5
 8005178:	4311      	orrs	r1, r2
	for (i = 0; i < 16; i++) {
 800517a:	3401      	adds	r4, #1
 800517c:	2c10      	cmp	r4, #16
 800517e:	d1f1      	bne.n	8005164 <gpio_set_output_options+0x16>
	}

	GPIO_OSPEEDR(gpioport) = ospeedr;
 8005180:	6081      	str	r1, [r0, #8]
}
 8005182:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		GPIO_OTYPER(gpioport) &= ~gpios;
 8005184:	6841      	ldr	r1, [r0, #4]
 8005186:	4399      	bics	r1, r3
 8005188:	e7e7      	b.n	800515a <gpio_set_output_options+0xc>

0800518a <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 800518a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);
 800518c:	2300      	movs	r3, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 800518e:	2601      	movs	r6, #1
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 8005190:	270f      	movs	r7, #15
	afrl = GPIO_AFRL(gpioport);
 8005192:	6a04      	ldr	r4, [r0, #32]
{
 8005194:	9100      	str	r1, [sp, #0]
	afrh = GPIO_AFRH(gpioport);
 8005196:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8005198:	9201      	str	r2, [sp, #4]
		if (!((1 << i) & gpios)) {
 800519a:	9d01      	ldr	r5, [sp, #4]
 800519c:	411d      	asrs	r5, r3
 800519e:	4235      	tst	r5, r6
 80051a0:	d006      	beq.n	80051b0 <gpio_set_af+0x26>
		afrl &= ~GPIO_AFR_MASK(i);
 80051a2:	003a      	movs	r2, r7
 80051a4:	009d      	lsls	r5, r3, #2
 80051a6:	40aa      	lsls	r2, r5
 80051a8:	4394      	bics	r4, r2
		afrl |= GPIO_AFR(i, alt_func_num);
 80051aa:	9a00      	ldr	r2, [sp, #0]
 80051ac:	40aa      	lsls	r2, r5
 80051ae:	4314      	orrs	r4, r2
	for (i = 0; i < 8; i++) {
 80051b0:	3301      	adds	r3, #1
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	d1f1      	bne.n	800519a <gpio_set_af+0x10>
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 80051b6:	2601      	movs	r6, #1
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 80051b8:	270f      	movs	r7, #15
		if (!((1 << i) & gpios)) {
 80051ba:	9a01      	ldr	r2, [sp, #4]
 80051bc:	411a      	asrs	r2, r3
 80051be:	4232      	tst	r2, r6
 80051c0:	d007      	beq.n	80051d2 <gpio_set_af+0x48>
		afrh &= ~GPIO_AFR_MASK(i - 8);
 80051c2:	003a      	movs	r2, r7
 80051c4:	009d      	lsls	r5, r3, #2
 80051c6:	3d20      	subs	r5, #32
 80051c8:	40aa      	lsls	r2, r5
 80051ca:	4391      	bics	r1, r2
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 80051cc:	9a00      	ldr	r2, [sp, #0]
 80051ce:	40aa      	lsls	r2, r5
 80051d0:	4311      	orrs	r1, r2
	for (i = 8; i < 16; i++) {
 80051d2:	3301      	adds	r3, #1
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d1f0      	bne.n	80051ba <gpio_set_af+0x30>
	}

	GPIO_AFRL(gpioport) = afrl;
 80051d8:	6204      	str	r4, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 80051da:	6241      	str	r1, [r0, #36]	; 0x24
}
 80051dc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

080051de <lptimer_get_counter>:
 * @param[in] lptimer_peripheral lptimer base address (@ref lptim_reg_base)
 * @returns Counter value.
 */
uint16_t lptimer_get_counter(uint32_t lptimer_peripheral)
{
	return LPTIM_CNT(lptimer_peripheral);
 80051de:	69c0      	ldr	r0, [r0, #28]
 80051e0:	b280      	uxth	r0, r0
}
 80051e2:	4770      	bx	lr

080051e4 <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 80051e4:	2380      	movs	r3, #128	; 0x80
 80051e6:	4a03      	ldr	r2, [pc, #12]	; (80051f4 <pwr_disable_backup_domain_write_protect+0x10>)
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	6811      	ldr	r1, [r2, #0]
 80051ec:	430b      	orrs	r3, r1
 80051ee:	6013      	str	r3, [r2, #0]
}
 80051f0:	4770      	bx	lr
 80051f2:	46c0      	nop			; (mov r8, r8)
 80051f4:	40007000 	.word	0x40007000

080051f8 <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 80051f8:	4a02      	ldr	r2, [pc, #8]	; (8005204 <pwr_enable_backup_domain_write_protect+0xc>)
 80051fa:	4903      	ldr	r1, [pc, #12]	; (8005208 <pwr_enable_backup_domain_write_protect+0x10>)
 80051fc:	6813      	ldr	r3, [r2, #0]
 80051fe:	400b      	ands	r3, r1
 8005200:	6013      	str	r3, [r2, #0]
}
 8005202:	4770      	bx	lr
 8005204:	40007000 	.word	0x40007000
 8005208:	fffffeff 	.word	0xfffffeff

0800520c <pwr_clear_standby_flag>:
This is set when the processor returns from a standby mode.
*/

void pwr_clear_standby_flag(void)
{
	PWR_CR |= PWR_CR_CSBF;
 800520c:	2308      	movs	r3, #8
 800520e:	4a02      	ldr	r2, [pc, #8]	; (8005218 <pwr_clear_standby_flag+0xc>)
 8005210:	6811      	ldr	r1, [r2, #0]
 8005212:	430b      	orrs	r3, r1
 8005214:	6013      	str	r3, [r2, #0]
}
 8005216:	4770      	bx	lr
 8005218:	40007000 	.word	0x40007000

0800521c <pwr_clear_wakeup_flag>:
This is set when the processor receives a wakeup signal.
*/

void pwr_clear_wakeup_flag(void)
{
	PWR_CR |= PWR_CR_CWUF;
 800521c:	2304      	movs	r3, #4
 800521e:	4a02      	ldr	r2, [pc, #8]	; (8005228 <pwr_clear_wakeup_flag+0xc>)
 8005220:	6811      	ldr	r1, [r2, #0]
 8005222:	430b      	orrs	r3, r1
 8005224:	6013      	str	r3, [r2, #0]
}
 8005226:	4770      	bx	lr
 8005228:	40007000 	.word	0x40007000

0800522c <rcc_osc_on>:
uint32_t rcc_ahb_frequency = 2097000;
uint32_t rcc_apb1_frequency = 2097000;
uint32_t rcc_apb2_frequency = 2097000;

void rcc_osc_on(enum rcc_osc osc)
{
 800522c:	b500      	push	{lr}
 800522e:	2806      	cmp	r0, #6
 8005230:	d80b      	bhi.n	800524a <rcc_osc_on+0x1e>
 8005232:	f000 f987 	bl	8005544 <__gnu_thumb1_case_uqi>
 8005236:	1004      	.short	0x1004
 8005238:	1b0b1915 	.word	0x1b0b1915
 800523c:	1d          	.byte	0x1d
 800523d:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 800523e:	2380      	movs	r3, #128	; 0x80
 8005240:	4a0c      	ldr	r2, [pc, #48]	; (8005274 <rcc_osc_on+0x48>)
 8005242:	045b      	lsls	r3, r3, #17
 8005244:	6811      	ldr	r1, [r2, #0]
		break;
	case RCC_LSE:
		RCC_CSR |= RCC_CSR_LSEON;
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
 8005246:	430b      	orrs	r3, r1
 8005248:	6013      	str	r3, [r2, #0]
		break;
	}
}
 800524a:	bd00      	pop	{pc}
		RCC_CR |= RCC_CR_MSION;
 800524c:	4a09      	ldr	r2, [pc, #36]	; (8005274 <rcc_osc_on+0x48>)
		RCC_CSR |= RCC_CSR_LSEON;
 800524e:	2380      	movs	r3, #128	; 0x80
 8005250:	6811      	ldr	r1, [r2, #0]
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	e7f7      	b.n	8005246 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSEON;
 8005256:	2380      	movs	r3, #128	; 0x80
 8005258:	4a06      	ldr	r2, [pc, #24]	; (8005274 <rcc_osc_on+0x48>)
 800525a:	025b      	lsls	r3, r3, #9
 800525c:	6811      	ldr	r1, [r2, #0]
 800525e:	e7f2      	b.n	8005246 <rcc_osc_on+0x1a>
		RCC_CRRCR |= RCC_CRRCR_HSI48ON;
 8005260:	4a05      	ldr	r2, [pc, #20]	; (8005278 <rcc_osc_on+0x4c>)
		RCC_CSR |= RCC_CSR_LSION;
 8005262:	2301      	movs	r3, #1
 8005264:	6811      	ldr	r1, [r2, #0]
 8005266:	e7ee      	b.n	8005246 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSI16ON;
 8005268:	4a02      	ldr	r2, [pc, #8]	; (8005274 <rcc_osc_on+0x48>)
 800526a:	e7fa      	b.n	8005262 <rcc_osc_on+0x36>
		RCC_CSR |= RCC_CSR_LSEON;
 800526c:	4a03      	ldr	r2, [pc, #12]	; (800527c <rcc_osc_on+0x50>)
 800526e:	e7ee      	b.n	800524e <rcc_osc_on+0x22>
		RCC_CSR |= RCC_CSR_LSION;
 8005270:	4a02      	ldr	r2, [pc, #8]	; (800527c <rcc_osc_on+0x50>)
 8005272:	e7f6      	b.n	8005262 <rcc_osc_on+0x36>
 8005274:	40021000 	.word	0x40021000
 8005278:	40021008 	.word	0x40021008
 800527c:	40021050 	.word	0x40021050

08005280 <rcc_is_osc_ready>:
	cm3_assert_not_reached();
}


bool rcc_is_osc_ready(enum rcc_osc osc)
{
 8005280:	2300      	movs	r3, #0
 8005282:	b500      	push	{lr}
 8005284:	2806      	cmp	r0, #6
 8005286:	d80a      	bhi.n	800529e <rcc_is_osc_ready+0x1e>
 8005288:	3301      	adds	r3, #1
 800528a:	f000 f95b 	bl	8005544 <__gnu_thumb1_case_uqi>
 800528e:	0a04      	.short	0x0a04
 8005290:	1a160e12 	.word	0x1a160e12
 8005294:	1c          	.byte	0x1c
 8005295:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 8005296:	4a0d      	ldr	r2, [pc, #52]	; (80052cc <rcc_is_osc_ready+0x4c>)
 8005298:	6810      	ldr	r0, [r2, #0]
 800529a:	0e40      	lsrs	r0, r0, #25
	case RCC_MSI:
		return RCC_CR & RCC_CR_MSIRDY;
	case RCC_LSE:
		return RCC_CSR & RCC_CSR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 800529c:	4003      	ands	r3, r0
	}
	return false;
}
 800529e:	0018      	movs	r0, r3
 80052a0:	bd00      	pop	{pc}
		return RCC_CR & RCC_CR_HSERDY;
 80052a2:	4a0a      	ldr	r2, [pc, #40]	; (80052cc <rcc_is_osc_ready+0x4c>)
 80052a4:	6810      	ldr	r0, [r2, #0]
 80052a6:	0c40      	lsrs	r0, r0, #17
 80052a8:	e7f8      	b.n	800529c <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_HSI16RDY;
 80052aa:	4a08      	ldr	r2, [pc, #32]	; (80052cc <rcc_is_osc_ready+0x4c>)
 80052ac:	6810      	ldr	r0, [r2, #0]
 80052ae:	0880      	lsrs	r0, r0, #2
 80052b0:	e7f4      	b.n	800529c <rcc_is_osc_ready+0x1c>
		return RCC_CRRCR & RCC_CRRCR_HSI48RDY;
 80052b2:	4a07      	ldr	r2, [pc, #28]	; (80052d0 <rcc_is_osc_ready+0x50>)
		return RCC_CSR & RCC_CSR_LSIRDY;
 80052b4:	6810      	ldr	r0, [r2, #0]
 80052b6:	0840      	lsrs	r0, r0, #1
 80052b8:	e7f0      	b.n	800529c <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_MSIRDY;
 80052ba:	4a04      	ldr	r2, [pc, #16]	; (80052cc <rcc_is_osc_ready+0x4c>)
		return RCC_CSR & RCC_CSR_LSERDY;
 80052bc:	6810      	ldr	r0, [r2, #0]
 80052be:	0a40      	lsrs	r0, r0, #9
 80052c0:	e7ec      	b.n	800529c <rcc_is_osc_ready+0x1c>
 80052c2:	4a04      	ldr	r2, [pc, #16]	; (80052d4 <rcc_is_osc_ready+0x54>)
 80052c4:	e7fa      	b.n	80052bc <rcc_is_osc_ready+0x3c>
		return RCC_CSR & RCC_CSR_LSIRDY;
 80052c6:	4a03      	ldr	r2, [pc, #12]	; (80052d4 <rcc_is_osc_ready+0x54>)
 80052c8:	e7f4      	b.n	80052b4 <rcc_is_osc_ready+0x34>
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	40021000 	.word	0x40021000
 80052d0:	40021008 	.word	0x40021008
 80052d4:	40021050 	.word	0x40021050

080052d8 <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 80052d8:	b510      	push	{r4, lr}
 80052da:	0004      	movs	r4, r0
	while (!rcc_is_osc_ready(osc));
 80052dc:	0020      	movs	r0, r4
 80052de:	f7ff ffcf 	bl	8005280 <rcc_is_osc_ready>
 80052e2:	2800      	cmp	r0, #0
 80052e4:	d0fa      	beq.n	80052dc <rcc_wait_for_osc_ready+0x4>
}
 80052e6:	bd10      	pop	{r4, pc}

080052e8 <rcc_set_ppre1>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb1pre
 */

void rcc_set_ppre1(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 80052e8:	4a03      	ldr	r2, [pc, #12]	; (80052f8 <rcc_set_ppre1+0x10>)
 80052ea:	4904      	ldr	r1, [pc, #16]	; (80052fc <rcc_set_ppre1+0x14>)
 80052ec:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE1_MASK << RCC_CFGR_PPRE1_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 80052ee:	0200      	lsls	r0, r0, #8
	uint32_t reg = RCC_CFGR
 80052f0:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 80052f2:	4318      	orrs	r0, r3
 80052f4:	6010      	str	r0, [r2, #0]
}
 80052f6:	4770      	bx	lr
 80052f8:	4002100c 	.word	0x4002100c
 80052fc:	fffff8ff 	.word	0xfffff8ff

08005300 <rcc_set_ppre2>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb2pre
 */

void rcc_set_ppre2(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8005300:	4a03      	ldr	r2, [pc, #12]	; (8005310 <rcc_set_ppre2+0x10>)
 8005302:	4904      	ldr	r1, [pc, #16]	; (8005314 <rcc_set_ppre2+0x14>)
 8005304:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE2_MASK << RCC_CFGR_PPRE2_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8005306:	02c0      	lsls	r0, r0, #11
	uint32_t reg = RCC_CFGR
 8005308:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 800530a:	4318      	orrs	r0, r3
 800530c:	6010      	str	r0, [r2, #0]
}
 800530e:	4770      	bx	lr
 8005310:	4002100c 	.word	0x4002100c
 8005314:	ffffc7ff 	.word	0xffffc7ff

08005318 <rcc_set_hpre>:
 * @param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
 */

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8005318:	21f0      	movs	r1, #240	; 0xf0
 800531a:	4a03      	ldr	r2, [pc, #12]	; (8005328 <rcc_set_hpre+0x10>)
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 800531c:	0100      	lsls	r0, r0, #4
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 800531e:	6813      	ldr	r3, [r2, #0]
 8005320:	438b      	bics	r3, r1
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8005322:	4318      	orrs	r0, r3
 8005324:	6010      	str	r0, [r2, #0]
}
 8005326:	4770      	bx	lr
 8005328:	4002100c 	.word	0x4002100c

0800532c <rcc_set_msi_range>:
*
 * @param msi_range desired range @ref rcc_icscr_msirange
 */
void rcc_set_msi_range(uint32_t msi_range)
{
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 800532c:	4a03      	ldr	r2, [pc, #12]	; (800533c <rcc_set_msi_range+0x10>)
 800532e:	4904      	ldr	r1, [pc, #16]	; (8005340 <rcc_set_msi_range+0x14>)
 8005330:	6813      	ldr	r3, [r2, #0]
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8005332:	0340      	lsls	r0, r0, #13
	uint32_t reg32 = RCC_ICSCR & ~(RCC_ICSCR_MSIRANGE_MASK << RCC_ICSCR_MSIRANGE_SHIFT);
 8005334:	400b      	ands	r3, r1
	RCC_ICSCR = reg32 | (msi_range << RCC_ICSCR_MSIRANGE_SHIFT);
 8005336:	4318      	orrs	r0, r3
 8005338:	6010      	str	r0, [r2, #0]
}
 800533a:	4770      	bx	lr
 800533c:	40021004 	.word	0x40021004
 8005340:	ffff1fff 	.word	0xffff1fff

08005344 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8005344:	4b05      	ldr	r3, [pc, #20]	; (800535c <rcc_periph_clock_enable+0x18>)
 8005346:	0942      	lsrs	r2, r0, #5
 8005348:	18d2      	adds	r2, r2, r3
 800534a:	231f      	movs	r3, #31
 800534c:	4018      	ands	r0, r3
 800534e:	3b1e      	subs	r3, #30
 8005350:	4083      	lsls	r3, r0
 8005352:	6811      	ldr	r1, [r2, #0]
 8005354:	430b      	orrs	r3, r1
 8005356:	6013      	str	r3, [r2, #0]
}
 8005358:	4770      	bx	lr
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	40021000 	.word	0x40021000

08005360 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8005360:	4a06      	ldr	r2, [pc, #24]	; (800537c <rcc_periph_reset_pulse+0x1c>)
 8005362:	0943      	lsrs	r3, r0, #5
 8005364:	189b      	adds	r3, r3, r2
 8005366:	221f      	movs	r2, #31
 8005368:	4010      	ands	r0, r2
 800536a:	3a1e      	subs	r2, #30
 800536c:	4082      	lsls	r2, r0
 800536e:	6819      	ldr	r1, [r3, #0]
 8005370:	4311      	orrs	r1, r2
 8005372:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 8005374:	6819      	ldr	r1, [r3, #0]
 8005376:	4391      	bics	r1, r2
 8005378:	6019      	str	r1, [r3, #0]
}
 800537a:	4770      	bx	lr
 800537c:	40021000 	.word	0x40021000

08005380 <rtc_unlock>:
/** @brief Unlock write access to the RTC registers

*/
void rtc_unlock(void)
{
	RTC_WPR = 0xca;
 8005380:	22ca      	movs	r2, #202	; 0xca
 8005382:	4b02      	ldr	r3, [pc, #8]	; (800538c <rtc_unlock+0xc>)
 8005384:	601a      	str	r2, [r3, #0]
	RTC_WPR = 0x53;
 8005386:	3a77      	subs	r2, #119	; 0x77
 8005388:	601a      	str	r2, [r3, #0]
}
 800538a:	4770      	bx	lr
 800538c:	40002824 	.word	0x40002824

08005390 <rtc_lock>:
/** @brief Lock write access to the RTC registers

*/
void rtc_lock(void)
{
	RTC_WPR = 0xff;
 8005390:	22ff      	movs	r2, #255	; 0xff
 8005392:	4b01      	ldr	r3, [pc, #4]	; (8005398 <rtc_lock+0x8>)
 8005394:	601a      	str	r2, [r3, #0]
}
 8005396:	4770      	bx	lr
 8005398:	40002824 	.word	0x40002824

0800539c <rtc_clear_wakeup_flag>:

@details This function should be called first in the rtc_wkup_isr()
*/
void rtc_clear_wakeup_flag(void)
{
	RTC_ISR &= ~RTC_ISR_WUTF;
 800539c:	4a02      	ldr	r2, [pc, #8]	; (80053a8 <rtc_clear_wakeup_flag+0xc>)
 800539e:	4903      	ldr	r1, [pc, #12]	; (80053ac <rtc_clear_wakeup_flag+0x10>)
 80053a0:	6813      	ldr	r3, [r2, #0]
 80053a2:	400b      	ands	r3, r1
 80053a4:	6013      	str	r3, [r2, #0]
}
 80053a6:	4770      	bx	lr
 80053a8:	4000280c 	.word	0x4000280c
 80053ac:	fffffbff 	.word	0xfffffbff

080053b0 <spi_xfer>:
uint16_t spi_xfer(uint32_t spi, uint16_t data)
{
	spi_write(spi, data);

	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 80053b0:	2301      	movs	r3, #1
	SPI_DR(spi) = data;
 80053b2:	60c1      	str	r1, [r0, #12]
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 80053b4:	6882      	ldr	r2, [r0, #8]
 80053b6:	421a      	tst	r2, r3
 80053b8:	d0fc      	beq.n	80053b4 <spi_xfer+0x4>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 80053ba:	68c0      	ldr	r0, [r0, #12]
 80053bc:	b280      	uxth	r0, r0
}
 80053be:	4770      	bx	lr

080053c0 <usart_set_baudrate>:
void usart_set_baudrate(uint32_t usart, uint32_t baud)
{
	uint32_t clock = rcc_apb1_frequency;

#if defined USART1
	if ((usart == USART1)
 80053c0:	4b10      	ldr	r3, [pc, #64]	; (8005404 <usart_set_baudrate+0x44>)
{
 80053c2:	b570      	push	{r4, r5, r6, lr}
 80053c4:	0005      	movs	r5, r0
 80053c6:	000c      	movs	r4, r1
 80053c8:	084e      	lsrs	r6, r1, #1
	if ((usart == USART1)
 80053ca:	4298      	cmp	r0, r3
 80053cc:	d107      	bne.n	80053de <usart_set_baudrate+0x1e>
#if defined USART6
		|| (usart == USART6)
#endif
		) {
		clock = rcc_apb2_frequency;
 80053ce:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <usart_set_baudrate+0x48>)
 80053d0:	6818      	ldr	r0, [r3, #0]
			+ ((clock % baud) * 256 + baud / 2) / baud;
		return;
	}
#endif

	USART_BRR(usart) = (clock + baud / 2) / baud;
 80053d2:	0021      	movs	r1, r4
 80053d4:	1830      	adds	r0, r6, r0
 80053d6:	f000 f8bf 	bl	8005558 <__udivsi3>
 80053da:	60e8      	str	r0, [r5, #12]
 80053dc:	e010      	b.n	8005400 <usart_set_baudrate+0x40>
	uint32_t clock = rcc_apb1_frequency;
 80053de:	4b0b      	ldr	r3, [pc, #44]	; (800540c <usart_set_baudrate+0x4c>)
 80053e0:	6818      	ldr	r0, [r3, #0]
	if (usart == LPUART1) {
 80053e2:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <usart_set_baudrate+0x50>)
 80053e4:	429d      	cmp	r5, r3
 80053e6:	d1f4      	bne.n	80053d2 <usart_set_baudrate+0x12>
		USART_BRR(usart) = (clock / baud) * 256
 80053e8:	f000 f93c 	bl	8005664 <__aeabi_uidivmod>
 80053ec:	0005      	movs	r5, r0
			+ ((clock % baud) * 256 + baud / 2) / baud;
 80053ee:	0208      	lsls	r0, r1, #8
 80053f0:	1980      	adds	r0, r0, r6
 80053f2:	0021      	movs	r1, r4
 80053f4:	f000 f8b0 	bl	8005558 <__udivsi3>
		USART_BRR(usart) = (clock / baud) * 256
 80053f8:	022d      	lsls	r5, r5, #8
 80053fa:	4b06      	ldr	r3, [pc, #24]	; (8005414 <usart_set_baudrate+0x54>)
			+ ((clock % baud) * 256 + baud / 2) / baud;
 80053fc:	1940      	adds	r0, r0, r5
		USART_BRR(usart) = (clock / baud) * 256
 80053fe:	6018      	str	r0, [r3, #0]
}
 8005400:	bd70      	pop	{r4, r5, r6, pc}
 8005402:	46c0      	nop			; (mov r8, r8)
 8005404:	40013800 	.word	0x40013800
 8005408:	2000000c 	.word	0x2000000c
 800540c:	20000008 	.word	0x20000008
 8005410:	40004800 	.word	0x40004800
 8005414:	4000480c 	.word	0x4000480c

08005418 <usart_set_databits>:
@param[in] bits unsigned 32 bit. Word length in bits 8 or 9.
*/

void usart_set_databits(uint32_t usart, uint32_t bits)
{
	if (bits == 8) {
 8005418:	2908      	cmp	r1, #8
 800541a:	d104      	bne.n	8005426 <usart_set_databits+0xe>
		USART_CR1(usart) &= ~USART_CR1_M; /* 8 data bits */
 800541c:	6803      	ldr	r3, [r0, #0]
 800541e:	4a04      	ldr	r2, [pc, #16]	; (8005430 <usart_set_databits+0x18>)
 8005420:	4013      	ands	r3, r2
	} else {
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8005422:	6003      	str	r3, [r0, #0]
	}
}
 8005424:	4770      	bx	lr
		USART_CR1(usart) |= USART_CR1_M;  /* 9 data bits */
 8005426:	2380      	movs	r3, #128	; 0x80
 8005428:	6802      	ldr	r2, [r0, #0]
 800542a:	015b      	lsls	r3, r3, #5
 800542c:	4313      	orrs	r3, r2
 800542e:	e7f8      	b.n	8005422 <usart_set_databits+0xa>
 8005430:	ffffefff 	.word	0xffffefff

08005434 <usart_set_stopbits>:

void usart_set_stopbits(uint32_t usart, uint32_t stopbits)
{
	uint32_t reg32;

	reg32 = USART_CR2(usart);
 8005434:	6843      	ldr	r3, [r0, #4]
	reg32 = (reg32 & ~USART_CR2_STOPBITS_MASK) | stopbits;
 8005436:	4a02      	ldr	r2, [pc, #8]	; (8005440 <usart_set_stopbits+0xc>)
 8005438:	4013      	ands	r3, r2
 800543a:	430b      	orrs	r3, r1
	USART_CR2(usart) = reg32;
 800543c:	6043      	str	r3, [r0, #4]
}
 800543e:	4770      	bx	lr
 8005440:	ffffcfff 	.word	0xffffcfff

08005444 <usart_set_parity>:

void usart_set_parity(uint32_t usart, uint32_t parity)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
 8005444:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_PARITY_MASK) | parity;
 8005446:	4a02      	ldr	r2, [pc, #8]	; (8005450 <usart_set_parity+0xc>)
 8005448:	4013      	ands	r3, r2
 800544a:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 800544c:	6003      	str	r3, [r0, #0]
}
 800544e:	4770      	bx	lr
 8005450:	fffff9ff 	.word	0xfffff9ff

08005454 <usart_set_mode>:
void usart_set_mode(uint32_t usart, uint32_t mode)
{
	uint32_t reg32;

	reg32 = USART_CR1(usart);
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8005454:	220c      	movs	r2, #12
	reg32 = USART_CR1(usart);
 8005456:	6803      	ldr	r3, [r0, #0]
	reg32 = (reg32 & ~USART_MODE_MASK) | mode;
 8005458:	4393      	bics	r3, r2
 800545a:	430b      	orrs	r3, r1
	USART_CR1(usart) = reg32;
 800545c:	6003      	str	r3, [r0, #0]
}
 800545e:	4770      	bx	lr

08005460 <usart_set_flow_control>:

void usart_set_flow_control(uint32_t usart, uint32_t flowcontrol)
{
	uint32_t reg32;

	reg32 = USART_CR3(usart);
 8005460:	6883      	ldr	r3, [r0, #8]
	reg32 = (reg32 & ~USART_FLOWCONTROL_MASK) | flowcontrol;
 8005462:	4a02      	ldr	r2, [pc, #8]	; (800546c <usart_set_flow_control+0xc>)
 8005464:	4013      	ands	r3, r2
 8005466:	430b      	orrs	r3, r1
	USART_CR3(usart) = reg32;
 8005468:	6083      	str	r3, [r0, #8]
}
 800546a:	4770      	bx	lr
 800546c:	fffffcff 	.word	0xfffffcff

08005470 <usart_enable>:
usart_reg_base
*/

void usart_enable(uint32_t usart)
{
	USART_CR1(usart) |= USART_CR1_UE;
 8005470:	2301      	movs	r3, #1
 8005472:	6802      	ldr	r2, [r0, #0]
 8005474:	4313      	orrs	r3, r2
 8005476:	6003      	str	r3, [r0, #0]
}
 8005478:	4770      	bx	lr

0800547a <usart_disable>:
usart_reg_base
*/

void usart_disable(uint32_t usart)
{
	USART_CR1(usart) &= ~USART_CR1_UE;
 800547a:	2201      	movs	r2, #1
 800547c:	6803      	ldr	r3, [r0, #0]
 800547e:	4393      	bics	r3, r2
 8005480:	6003      	str	r3, [r0, #0]
}
 8005482:	4770      	bx	lr

08005484 <usart_send_blocking>:
usart_reg_base
@param[in] data unsigned 16 bit.
*/

void usart_send_blocking(uint32_t usart, uint16_t data)
{
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	000d      	movs	r5, r1
 8005488:	0004      	movs	r4, r0
	usart_wait_send_ready(usart);
 800548a:	f000 f809 	bl	80054a0 <usart_wait_send_ready>
	usart_send(usart, data);
 800548e:	0029      	movs	r1, r5
 8005490:	0020      	movs	r0, r4
 8005492:	f000 f801 	bl	8005498 <usart_send>
}
 8005496:	bd70      	pop	{r4, r5, r6, pc}

08005498 <usart_send>:
 */

void usart_send(uint32_t usart, uint16_t data)
{
	/* Send data. */
	USART_TDR(usart) = (data & USART_TDR_MASK);
 8005498:	05c9      	lsls	r1, r1, #23
 800549a:	0dc9      	lsrs	r1, r1, #23
 800549c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800549e:	4770      	bx	lr

080054a0 <usart_wait_send_ready>:
 */

void usart_wait_send_ready(uint32_t usart)
{
	/* Wait until the data has been transferred into the shift register. */
	while ((USART_ISR(usart) & USART_ISR_TXE) == 0);
 80054a0:	2380      	movs	r3, #128	; 0x80
 80054a2:	69c2      	ldr	r2, [r0, #28]
 80054a4:	421a      	tst	r2, r3
 80054a6:	d0fc      	beq.n	80054a2 <usart_wait_send_ready+0x2>
}
 80054a8:	4770      	bx	lr

080054aa <usart_get_flag>:
 * @returns boolean: flag set.
 */

bool usart_get_flag(uint32_t usart, uint32_t flag)
{
	return ((USART_ISR(usart) & flag) != 0);
 80054aa:	69c0      	ldr	r0, [r0, #28]
 80054ac:	4008      	ands	r0, r1
 80054ae:	1e41      	subs	r1, r0, #1
 80054b0:	4188      	sbcs	r0, r1
 80054b2:	b2c0      	uxtb	r0, r0
}
 80054b4:	4770      	bx	lr

080054b6 <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 80054b6:	e7fe      	b.n	80054b6 <blocking_handler>

080054b8 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 80054b8:	4770      	bx	lr
	...

080054bc <reset_handler>:
{
 80054bc:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 80054be:	4b16      	ldr	r3, [pc, #88]	; (8005518 <reset_handler+0x5c>)
 80054c0:	4a16      	ldr	r2, [pc, #88]	; (800551c <reset_handler+0x60>)
 80054c2:	4917      	ldr	r1, [pc, #92]	; (8005520 <reset_handler+0x64>)
 80054c4:	428b      	cmp	r3, r1
 80054c6:	d318      	bcc.n	80054fa <reset_handler+0x3e>
		*dest++ = 0;
 80054c8:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 80054ca:	4a16      	ldr	r2, [pc, #88]	; (8005524 <reset_handler+0x68>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d317      	bcc.n	8005500 <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	4a15      	ldr	r2, [pc, #84]	; (8005528 <reset_handler+0x6c>)
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 80054d8:	4c14      	ldr	r4, [pc, #80]	; (800552c <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 80054da:	430b      	orrs	r3, r1
 80054dc:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 80054de:	4b14      	ldr	r3, [pc, #80]	; (8005530 <reset_handler+0x74>)
 80054e0:	429c      	cmp	r4, r3
 80054e2:	d30f      	bcc.n	8005504 <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 80054e4:	4c13      	ldr	r4, [pc, #76]	; (8005534 <reset_handler+0x78>)
 80054e6:	4b14      	ldr	r3, [pc, #80]	; (8005538 <reset_handler+0x7c>)
 80054e8:	429c      	cmp	r4, r3
 80054ea:	d30e      	bcc.n	800550a <reset_handler+0x4e>
	(void)main();
 80054ec:	f7fe fde8 	bl	80040c0 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 80054f0:	4c12      	ldr	r4, [pc, #72]	; (800553c <reset_handler+0x80>)
 80054f2:	4b13      	ldr	r3, [pc, #76]	; (8005540 <reset_handler+0x84>)
 80054f4:	429c      	cmp	r4, r3
 80054f6:	d30b      	bcc.n	8005510 <reset_handler+0x54>
}
 80054f8:	bd10      	pop	{r4, pc}
		*dest = *src;
 80054fa:	ca01      	ldmia	r2!, {r0}
 80054fc:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 80054fe:	e7e1      	b.n	80054c4 <reset_handler+0x8>
		*dest++ = 0;
 8005500:	c302      	stmia	r3!, {r1}
 8005502:	e7e3      	b.n	80054cc <reset_handler+0x10>
		(*fp)();
 8005504:	cc08      	ldmia	r4!, {r3}
 8005506:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8005508:	e7e9      	b.n	80054de <reset_handler+0x22>
		(*fp)();
 800550a:	cc08      	ldmia	r4!, {r3}
 800550c:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 800550e:	e7ea      	b.n	80054e6 <reset_handler+0x2a>
		(*fp)();
 8005510:	cc08      	ldmia	r4!, {r3}
 8005512:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8005514:	e7ed      	b.n	80054f2 <reset_handler+0x36>
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	20000000 	.word	0x20000000
 800551c:	08006b08 	.word	0x08006b08
 8005520:	20000010 	.word	0x20000010
 8005524:	2000019c 	.word	0x2000019c
 8005528:	e000ed14 	.word	0xe000ed14
 800552c:	08006b08 	.word	0x08006b08
 8005530:	08006b08 	.word	0x08006b08
 8005534:	08006b08 	.word	0x08006b08
 8005538:	08006b08 	.word	0x08006b08
 800553c:	08006b08 	.word	0x08006b08
 8005540:	08006b08 	.word	0x08006b08

08005544 <__gnu_thumb1_case_uqi>:
 8005544:	b402      	push	{r1}
 8005546:	4671      	mov	r1, lr
 8005548:	0849      	lsrs	r1, r1, #1
 800554a:	0049      	lsls	r1, r1, #1
 800554c:	5c09      	ldrb	r1, [r1, r0]
 800554e:	0049      	lsls	r1, r1, #1
 8005550:	448e      	add	lr, r1
 8005552:	bc02      	pop	{r1}
 8005554:	4770      	bx	lr
 8005556:	46c0      	nop			; (mov r8, r8)

08005558 <__udivsi3>:
 8005558:	2200      	movs	r2, #0
 800555a:	0843      	lsrs	r3, r0, #1
 800555c:	428b      	cmp	r3, r1
 800555e:	d374      	bcc.n	800564a <__udivsi3+0xf2>
 8005560:	0903      	lsrs	r3, r0, #4
 8005562:	428b      	cmp	r3, r1
 8005564:	d35f      	bcc.n	8005626 <__udivsi3+0xce>
 8005566:	0a03      	lsrs	r3, r0, #8
 8005568:	428b      	cmp	r3, r1
 800556a:	d344      	bcc.n	80055f6 <__udivsi3+0x9e>
 800556c:	0b03      	lsrs	r3, r0, #12
 800556e:	428b      	cmp	r3, r1
 8005570:	d328      	bcc.n	80055c4 <__udivsi3+0x6c>
 8005572:	0c03      	lsrs	r3, r0, #16
 8005574:	428b      	cmp	r3, r1
 8005576:	d30d      	bcc.n	8005594 <__udivsi3+0x3c>
 8005578:	22ff      	movs	r2, #255	; 0xff
 800557a:	0209      	lsls	r1, r1, #8
 800557c:	ba12      	rev	r2, r2
 800557e:	0c03      	lsrs	r3, r0, #16
 8005580:	428b      	cmp	r3, r1
 8005582:	d302      	bcc.n	800558a <__udivsi3+0x32>
 8005584:	1212      	asrs	r2, r2, #8
 8005586:	0209      	lsls	r1, r1, #8
 8005588:	d065      	beq.n	8005656 <__udivsi3+0xfe>
 800558a:	0b03      	lsrs	r3, r0, #12
 800558c:	428b      	cmp	r3, r1
 800558e:	d319      	bcc.n	80055c4 <__udivsi3+0x6c>
 8005590:	e000      	b.n	8005594 <__udivsi3+0x3c>
 8005592:	0a09      	lsrs	r1, r1, #8
 8005594:	0bc3      	lsrs	r3, r0, #15
 8005596:	428b      	cmp	r3, r1
 8005598:	d301      	bcc.n	800559e <__udivsi3+0x46>
 800559a:	03cb      	lsls	r3, r1, #15
 800559c:	1ac0      	subs	r0, r0, r3
 800559e:	4152      	adcs	r2, r2
 80055a0:	0b83      	lsrs	r3, r0, #14
 80055a2:	428b      	cmp	r3, r1
 80055a4:	d301      	bcc.n	80055aa <__udivsi3+0x52>
 80055a6:	038b      	lsls	r3, r1, #14
 80055a8:	1ac0      	subs	r0, r0, r3
 80055aa:	4152      	adcs	r2, r2
 80055ac:	0b43      	lsrs	r3, r0, #13
 80055ae:	428b      	cmp	r3, r1
 80055b0:	d301      	bcc.n	80055b6 <__udivsi3+0x5e>
 80055b2:	034b      	lsls	r3, r1, #13
 80055b4:	1ac0      	subs	r0, r0, r3
 80055b6:	4152      	adcs	r2, r2
 80055b8:	0b03      	lsrs	r3, r0, #12
 80055ba:	428b      	cmp	r3, r1
 80055bc:	d301      	bcc.n	80055c2 <__udivsi3+0x6a>
 80055be:	030b      	lsls	r3, r1, #12
 80055c0:	1ac0      	subs	r0, r0, r3
 80055c2:	4152      	adcs	r2, r2
 80055c4:	0ac3      	lsrs	r3, r0, #11
 80055c6:	428b      	cmp	r3, r1
 80055c8:	d301      	bcc.n	80055ce <__udivsi3+0x76>
 80055ca:	02cb      	lsls	r3, r1, #11
 80055cc:	1ac0      	subs	r0, r0, r3
 80055ce:	4152      	adcs	r2, r2
 80055d0:	0a83      	lsrs	r3, r0, #10
 80055d2:	428b      	cmp	r3, r1
 80055d4:	d301      	bcc.n	80055da <__udivsi3+0x82>
 80055d6:	028b      	lsls	r3, r1, #10
 80055d8:	1ac0      	subs	r0, r0, r3
 80055da:	4152      	adcs	r2, r2
 80055dc:	0a43      	lsrs	r3, r0, #9
 80055de:	428b      	cmp	r3, r1
 80055e0:	d301      	bcc.n	80055e6 <__udivsi3+0x8e>
 80055e2:	024b      	lsls	r3, r1, #9
 80055e4:	1ac0      	subs	r0, r0, r3
 80055e6:	4152      	adcs	r2, r2
 80055e8:	0a03      	lsrs	r3, r0, #8
 80055ea:	428b      	cmp	r3, r1
 80055ec:	d301      	bcc.n	80055f2 <__udivsi3+0x9a>
 80055ee:	020b      	lsls	r3, r1, #8
 80055f0:	1ac0      	subs	r0, r0, r3
 80055f2:	4152      	adcs	r2, r2
 80055f4:	d2cd      	bcs.n	8005592 <__udivsi3+0x3a>
 80055f6:	09c3      	lsrs	r3, r0, #7
 80055f8:	428b      	cmp	r3, r1
 80055fa:	d301      	bcc.n	8005600 <__udivsi3+0xa8>
 80055fc:	01cb      	lsls	r3, r1, #7
 80055fe:	1ac0      	subs	r0, r0, r3
 8005600:	4152      	adcs	r2, r2
 8005602:	0983      	lsrs	r3, r0, #6
 8005604:	428b      	cmp	r3, r1
 8005606:	d301      	bcc.n	800560c <__udivsi3+0xb4>
 8005608:	018b      	lsls	r3, r1, #6
 800560a:	1ac0      	subs	r0, r0, r3
 800560c:	4152      	adcs	r2, r2
 800560e:	0943      	lsrs	r3, r0, #5
 8005610:	428b      	cmp	r3, r1
 8005612:	d301      	bcc.n	8005618 <__udivsi3+0xc0>
 8005614:	014b      	lsls	r3, r1, #5
 8005616:	1ac0      	subs	r0, r0, r3
 8005618:	4152      	adcs	r2, r2
 800561a:	0903      	lsrs	r3, r0, #4
 800561c:	428b      	cmp	r3, r1
 800561e:	d301      	bcc.n	8005624 <__udivsi3+0xcc>
 8005620:	010b      	lsls	r3, r1, #4
 8005622:	1ac0      	subs	r0, r0, r3
 8005624:	4152      	adcs	r2, r2
 8005626:	08c3      	lsrs	r3, r0, #3
 8005628:	428b      	cmp	r3, r1
 800562a:	d301      	bcc.n	8005630 <__udivsi3+0xd8>
 800562c:	00cb      	lsls	r3, r1, #3
 800562e:	1ac0      	subs	r0, r0, r3
 8005630:	4152      	adcs	r2, r2
 8005632:	0883      	lsrs	r3, r0, #2
 8005634:	428b      	cmp	r3, r1
 8005636:	d301      	bcc.n	800563c <__udivsi3+0xe4>
 8005638:	008b      	lsls	r3, r1, #2
 800563a:	1ac0      	subs	r0, r0, r3
 800563c:	4152      	adcs	r2, r2
 800563e:	0843      	lsrs	r3, r0, #1
 8005640:	428b      	cmp	r3, r1
 8005642:	d301      	bcc.n	8005648 <__udivsi3+0xf0>
 8005644:	004b      	lsls	r3, r1, #1
 8005646:	1ac0      	subs	r0, r0, r3
 8005648:	4152      	adcs	r2, r2
 800564a:	1a41      	subs	r1, r0, r1
 800564c:	d200      	bcs.n	8005650 <__udivsi3+0xf8>
 800564e:	4601      	mov	r1, r0
 8005650:	4152      	adcs	r2, r2
 8005652:	4610      	mov	r0, r2
 8005654:	4770      	bx	lr
 8005656:	e7ff      	b.n	8005658 <__udivsi3+0x100>
 8005658:	b501      	push	{r0, lr}
 800565a:	2000      	movs	r0, #0
 800565c:	f000 f8f0 	bl	8005840 <__aeabi_idiv0>
 8005660:	bd02      	pop	{r1, pc}
 8005662:	46c0      	nop			; (mov r8, r8)

08005664 <__aeabi_uidivmod>:
 8005664:	2900      	cmp	r1, #0
 8005666:	d0f7      	beq.n	8005658 <__udivsi3+0x100>
 8005668:	e776      	b.n	8005558 <__udivsi3>
 800566a:	4770      	bx	lr

0800566c <__divsi3>:
 800566c:	4603      	mov	r3, r0
 800566e:	430b      	orrs	r3, r1
 8005670:	d47f      	bmi.n	8005772 <__divsi3+0x106>
 8005672:	2200      	movs	r2, #0
 8005674:	0843      	lsrs	r3, r0, #1
 8005676:	428b      	cmp	r3, r1
 8005678:	d374      	bcc.n	8005764 <__divsi3+0xf8>
 800567a:	0903      	lsrs	r3, r0, #4
 800567c:	428b      	cmp	r3, r1
 800567e:	d35f      	bcc.n	8005740 <__divsi3+0xd4>
 8005680:	0a03      	lsrs	r3, r0, #8
 8005682:	428b      	cmp	r3, r1
 8005684:	d344      	bcc.n	8005710 <__divsi3+0xa4>
 8005686:	0b03      	lsrs	r3, r0, #12
 8005688:	428b      	cmp	r3, r1
 800568a:	d328      	bcc.n	80056de <__divsi3+0x72>
 800568c:	0c03      	lsrs	r3, r0, #16
 800568e:	428b      	cmp	r3, r1
 8005690:	d30d      	bcc.n	80056ae <__divsi3+0x42>
 8005692:	22ff      	movs	r2, #255	; 0xff
 8005694:	0209      	lsls	r1, r1, #8
 8005696:	ba12      	rev	r2, r2
 8005698:	0c03      	lsrs	r3, r0, #16
 800569a:	428b      	cmp	r3, r1
 800569c:	d302      	bcc.n	80056a4 <__divsi3+0x38>
 800569e:	1212      	asrs	r2, r2, #8
 80056a0:	0209      	lsls	r1, r1, #8
 80056a2:	d065      	beq.n	8005770 <__divsi3+0x104>
 80056a4:	0b03      	lsrs	r3, r0, #12
 80056a6:	428b      	cmp	r3, r1
 80056a8:	d319      	bcc.n	80056de <__divsi3+0x72>
 80056aa:	e000      	b.n	80056ae <__divsi3+0x42>
 80056ac:	0a09      	lsrs	r1, r1, #8
 80056ae:	0bc3      	lsrs	r3, r0, #15
 80056b0:	428b      	cmp	r3, r1
 80056b2:	d301      	bcc.n	80056b8 <__divsi3+0x4c>
 80056b4:	03cb      	lsls	r3, r1, #15
 80056b6:	1ac0      	subs	r0, r0, r3
 80056b8:	4152      	adcs	r2, r2
 80056ba:	0b83      	lsrs	r3, r0, #14
 80056bc:	428b      	cmp	r3, r1
 80056be:	d301      	bcc.n	80056c4 <__divsi3+0x58>
 80056c0:	038b      	lsls	r3, r1, #14
 80056c2:	1ac0      	subs	r0, r0, r3
 80056c4:	4152      	adcs	r2, r2
 80056c6:	0b43      	lsrs	r3, r0, #13
 80056c8:	428b      	cmp	r3, r1
 80056ca:	d301      	bcc.n	80056d0 <__divsi3+0x64>
 80056cc:	034b      	lsls	r3, r1, #13
 80056ce:	1ac0      	subs	r0, r0, r3
 80056d0:	4152      	adcs	r2, r2
 80056d2:	0b03      	lsrs	r3, r0, #12
 80056d4:	428b      	cmp	r3, r1
 80056d6:	d301      	bcc.n	80056dc <__divsi3+0x70>
 80056d8:	030b      	lsls	r3, r1, #12
 80056da:	1ac0      	subs	r0, r0, r3
 80056dc:	4152      	adcs	r2, r2
 80056de:	0ac3      	lsrs	r3, r0, #11
 80056e0:	428b      	cmp	r3, r1
 80056e2:	d301      	bcc.n	80056e8 <__divsi3+0x7c>
 80056e4:	02cb      	lsls	r3, r1, #11
 80056e6:	1ac0      	subs	r0, r0, r3
 80056e8:	4152      	adcs	r2, r2
 80056ea:	0a83      	lsrs	r3, r0, #10
 80056ec:	428b      	cmp	r3, r1
 80056ee:	d301      	bcc.n	80056f4 <__divsi3+0x88>
 80056f0:	028b      	lsls	r3, r1, #10
 80056f2:	1ac0      	subs	r0, r0, r3
 80056f4:	4152      	adcs	r2, r2
 80056f6:	0a43      	lsrs	r3, r0, #9
 80056f8:	428b      	cmp	r3, r1
 80056fa:	d301      	bcc.n	8005700 <__divsi3+0x94>
 80056fc:	024b      	lsls	r3, r1, #9
 80056fe:	1ac0      	subs	r0, r0, r3
 8005700:	4152      	adcs	r2, r2
 8005702:	0a03      	lsrs	r3, r0, #8
 8005704:	428b      	cmp	r3, r1
 8005706:	d301      	bcc.n	800570c <__divsi3+0xa0>
 8005708:	020b      	lsls	r3, r1, #8
 800570a:	1ac0      	subs	r0, r0, r3
 800570c:	4152      	adcs	r2, r2
 800570e:	d2cd      	bcs.n	80056ac <__divsi3+0x40>
 8005710:	09c3      	lsrs	r3, r0, #7
 8005712:	428b      	cmp	r3, r1
 8005714:	d301      	bcc.n	800571a <__divsi3+0xae>
 8005716:	01cb      	lsls	r3, r1, #7
 8005718:	1ac0      	subs	r0, r0, r3
 800571a:	4152      	adcs	r2, r2
 800571c:	0983      	lsrs	r3, r0, #6
 800571e:	428b      	cmp	r3, r1
 8005720:	d301      	bcc.n	8005726 <__divsi3+0xba>
 8005722:	018b      	lsls	r3, r1, #6
 8005724:	1ac0      	subs	r0, r0, r3
 8005726:	4152      	adcs	r2, r2
 8005728:	0943      	lsrs	r3, r0, #5
 800572a:	428b      	cmp	r3, r1
 800572c:	d301      	bcc.n	8005732 <__divsi3+0xc6>
 800572e:	014b      	lsls	r3, r1, #5
 8005730:	1ac0      	subs	r0, r0, r3
 8005732:	4152      	adcs	r2, r2
 8005734:	0903      	lsrs	r3, r0, #4
 8005736:	428b      	cmp	r3, r1
 8005738:	d301      	bcc.n	800573e <__divsi3+0xd2>
 800573a:	010b      	lsls	r3, r1, #4
 800573c:	1ac0      	subs	r0, r0, r3
 800573e:	4152      	adcs	r2, r2
 8005740:	08c3      	lsrs	r3, r0, #3
 8005742:	428b      	cmp	r3, r1
 8005744:	d301      	bcc.n	800574a <__divsi3+0xde>
 8005746:	00cb      	lsls	r3, r1, #3
 8005748:	1ac0      	subs	r0, r0, r3
 800574a:	4152      	adcs	r2, r2
 800574c:	0883      	lsrs	r3, r0, #2
 800574e:	428b      	cmp	r3, r1
 8005750:	d301      	bcc.n	8005756 <__divsi3+0xea>
 8005752:	008b      	lsls	r3, r1, #2
 8005754:	1ac0      	subs	r0, r0, r3
 8005756:	4152      	adcs	r2, r2
 8005758:	0843      	lsrs	r3, r0, #1
 800575a:	428b      	cmp	r3, r1
 800575c:	d301      	bcc.n	8005762 <__divsi3+0xf6>
 800575e:	004b      	lsls	r3, r1, #1
 8005760:	1ac0      	subs	r0, r0, r3
 8005762:	4152      	adcs	r2, r2
 8005764:	1a41      	subs	r1, r0, r1
 8005766:	d200      	bcs.n	800576a <__divsi3+0xfe>
 8005768:	4601      	mov	r1, r0
 800576a:	4152      	adcs	r2, r2
 800576c:	4610      	mov	r0, r2
 800576e:	4770      	bx	lr
 8005770:	e05d      	b.n	800582e <__divsi3+0x1c2>
 8005772:	0fca      	lsrs	r2, r1, #31
 8005774:	d000      	beq.n	8005778 <__divsi3+0x10c>
 8005776:	4249      	negs	r1, r1
 8005778:	1003      	asrs	r3, r0, #32
 800577a:	d300      	bcc.n	800577e <__divsi3+0x112>
 800577c:	4240      	negs	r0, r0
 800577e:	4053      	eors	r3, r2
 8005780:	2200      	movs	r2, #0
 8005782:	469c      	mov	ip, r3
 8005784:	0903      	lsrs	r3, r0, #4
 8005786:	428b      	cmp	r3, r1
 8005788:	d32d      	bcc.n	80057e6 <__divsi3+0x17a>
 800578a:	0a03      	lsrs	r3, r0, #8
 800578c:	428b      	cmp	r3, r1
 800578e:	d312      	bcc.n	80057b6 <__divsi3+0x14a>
 8005790:	22fc      	movs	r2, #252	; 0xfc
 8005792:	0189      	lsls	r1, r1, #6
 8005794:	ba12      	rev	r2, r2
 8005796:	0a03      	lsrs	r3, r0, #8
 8005798:	428b      	cmp	r3, r1
 800579a:	d30c      	bcc.n	80057b6 <__divsi3+0x14a>
 800579c:	0189      	lsls	r1, r1, #6
 800579e:	1192      	asrs	r2, r2, #6
 80057a0:	428b      	cmp	r3, r1
 80057a2:	d308      	bcc.n	80057b6 <__divsi3+0x14a>
 80057a4:	0189      	lsls	r1, r1, #6
 80057a6:	1192      	asrs	r2, r2, #6
 80057a8:	428b      	cmp	r3, r1
 80057aa:	d304      	bcc.n	80057b6 <__divsi3+0x14a>
 80057ac:	0189      	lsls	r1, r1, #6
 80057ae:	d03a      	beq.n	8005826 <__divsi3+0x1ba>
 80057b0:	1192      	asrs	r2, r2, #6
 80057b2:	e000      	b.n	80057b6 <__divsi3+0x14a>
 80057b4:	0989      	lsrs	r1, r1, #6
 80057b6:	09c3      	lsrs	r3, r0, #7
 80057b8:	428b      	cmp	r3, r1
 80057ba:	d301      	bcc.n	80057c0 <__divsi3+0x154>
 80057bc:	01cb      	lsls	r3, r1, #7
 80057be:	1ac0      	subs	r0, r0, r3
 80057c0:	4152      	adcs	r2, r2
 80057c2:	0983      	lsrs	r3, r0, #6
 80057c4:	428b      	cmp	r3, r1
 80057c6:	d301      	bcc.n	80057cc <__divsi3+0x160>
 80057c8:	018b      	lsls	r3, r1, #6
 80057ca:	1ac0      	subs	r0, r0, r3
 80057cc:	4152      	adcs	r2, r2
 80057ce:	0943      	lsrs	r3, r0, #5
 80057d0:	428b      	cmp	r3, r1
 80057d2:	d301      	bcc.n	80057d8 <__divsi3+0x16c>
 80057d4:	014b      	lsls	r3, r1, #5
 80057d6:	1ac0      	subs	r0, r0, r3
 80057d8:	4152      	adcs	r2, r2
 80057da:	0903      	lsrs	r3, r0, #4
 80057dc:	428b      	cmp	r3, r1
 80057de:	d301      	bcc.n	80057e4 <__divsi3+0x178>
 80057e0:	010b      	lsls	r3, r1, #4
 80057e2:	1ac0      	subs	r0, r0, r3
 80057e4:	4152      	adcs	r2, r2
 80057e6:	08c3      	lsrs	r3, r0, #3
 80057e8:	428b      	cmp	r3, r1
 80057ea:	d301      	bcc.n	80057f0 <__divsi3+0x184>
 80057ec:	00cb      	lsls	r3, r1, #3
 80057ee:	1ac0      	subs	r0, r0, r3
 80057f0:	4152      	adcs	r2, r2
 80057f2:	0883      	lsrs	r3, r0, #2
 80057f4:	428b      	cmp	r3, r1
 80057f6:	d301      	bcc.n	80057fc <__divsi3+0x190>
 80057f8:	008b      	lsls	r3, r1, #2
 80057fa:	1ac0      	subs	r0, r0, r3
 80057fc:	4152      	adcs	r2, r2
 80057fe:	d2d9      	bcs.n	80057b4 <__divsi3+0x148>
 8005800:	0843      	lsrs	r3, r0, #1
 8005802:	428b      	cmp	r3, r1
 8005804:	d301      	bcc.n	800580a <__divsi3+0x19e>
 8005806:	004b      	lsls	r3, r1, #1
 8005808:	1ac0      	subs	r0, r0, r3
 800580a:	4152      	adcs	r2, r2
 800580c:	1a41      	subs	r1, r0, r1
 800580e:	d200      	bcs.n	8005812 <__divsi3+0x1a6>
 8005810:	4601      	mov	r1, r0
 8005812:	4663      	mov	r3, ip
 8005814:	4152      	adcs	r2, r2
 8005816:	105b      	asrs	r3, r3, #1
 8005818:	4610      	mov	r0, r2
 800581a:	d301      	bcc.n	8005820 <__divsi3+0x1b4>
 800581c:	4240      	negs	r0, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d500      	bpl.n	8005824 <__divsi3+0x1b8>
 8005822:	4249      	negs	r1, r1
 8005824:	4770      	bx	lr
 8005826:	4663      	mov	r3, ip
 8005828:	105b      	asrs	r3, r3, #1
 800582a:	d300      	bcc.n	800582e <__divsi3+0x1c2>
 800582c:	4240      	negs	r0, r0
 800582e:	b501      	push	{r0, lr}
 8005830:	2000      	movs	r0, #0
 8005832:	f000 f805 	bl	8005840 <__aeabi_idiv0>
 8005836:	bd02      	pop	{r1, pc}

08005838 <__aeabi_idivmod>:
 8005838:	2900      	cmp	r1, #0
 800583a:	d0f8      	beq.n	800582e <__divsi3+0x1c2>
 800583c:	e716      	b.n	800566c <__divsi3>
 800583e:	4770      	bx	lr

08005840 <__aeabi_idiv0>:
 8005840:	4770      	bx	lr
 8005842:	46c0      	nop			; (mov r8, r8)

08005844 <__aeabi_cdrcmple>:
 8005844:	4684      	mov	ip, r0
 8005846:	1c10      	adds	r0, r2, #0
 8005848:	4662      	mov	r2, ip
 800584a:	468c      	mov	ip, r1
 800584c:	1c19      	adds	r1, r3, #0
 800584e:	4663      	mov	r3, ip
 8005850:	e000      	b.n	8005854 <__aeabi_cdcmpeq>
 8005852:	46c0      	nop			; (mov r8, r8)

08005854 <__aeabi_cdcmpeq>:
 8005854:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005856:	f000 f8ff 	bl	8005a58 <__ledf2>
 800585a:	2800      	cmp	r0, #0
 800585c:	d401      	bmi.n	8005862 <__aeabi_cdcmpeq+0xe>
 800585e:	2100      	movs	r1, #0
 8005860:	42c8      	cmn	r0, r1
 8005862:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08005864 <__aeabi_dcmpeq>:
 8005864:	b510      	push	{r4, lr}
 8005866:	f000 f849 	bl	80058fc <__eqdf2>
 800586a:	4240      	negs	r0, r0
 800586c:	3001      	adds	r0, #1
 800586e:	bd10      	pop	{r4, pc}

08005870 <__aeabi_dcmplt>:
 8005870:	b510      	push	{r4, lr}
 8005872:	f000 f8f1 	bl	8005a58 <__ledf2>
 8005876:	2800      	cmp	r0, #0
 8005878:	db01      	blt.n	800587e <__aeabi_dcmplt+0xe>
 800587a:	2000      	movs	r0, #0
 800587c:	bd10      	pop	{r4, pc}
 800587e:	2001      	movs	r0, #1
 8005880:	bd10      	pop	{r4, pc}
 8005882:	46c0      	nop			; (mov r8, r8)

08005884 <__aeabi_dcmple>:
 8005884:	b510      	push	{r4, lr}
 8005886:	f000 f8e7 	bl	8005a58 <__ledf2>
 800588a:	2800      	cmp	r0, #0
 800588c:	dd01      	ble.n	8005892 <__aeabi_dcmple+0xe>
 800588e:	2000      	movs	r0, #0
 8005890:	bd10      	pop	{r4, pc}
 8005892:	2001      	movs	r0, #1
 8005894:	bd10      	pop	{r4, pc}
 8005896:	46c0      	nop			; (mov r8, r8)

08005898 <__aeabi_dcmpgt>:
 8005898:	b510      	push	{r4, lr}
 800589a:	f000 f86b 	bl	8005974 <__gedf2>
 800589e:	2800      	cmp	r0, #0
 80058a0:	dc01      	bgt.n	80058a6 <__aeabi_dcmpgt+0xe>
 80058a2:	2000      	movs	r0, #0
 80058a4:	bd10      	pop	{r4, pc}
 80058a6:	2001      	movs	r0, #1
 80058a8:	bd10      	pop	{r4, pc}
 80058aa:	46c0      	nop			; (mov r8, r8)

080058ac <__aeabi_dcmpge>:
 80058ac:	b510      	push	{r4, lr}
 80058ae:	f000 f861 	bl	8005974 <__gedf2>
 80058b2:	2800      	cmp	r0, #0
 80058b4:	da01      	bge.n	80058ba <__aeabi_dcmpge+0xe>
 80058b6:	2000      	movs	r0, #0
 80058b8:	bd10      	pop	{r4, pc}
 80058ba:	2001      	movs	r0, #1
 80058bc:	bd10      	pop	{r4, pc}
 80058be:	46c0      	nop			; (mov r8, r8)

080058c0 <__aeabi_d2uiz>:
 80058c0:	b570      	push	{r4, r5, r6, lr}
 80058c2:	2200      	movs	r2, #0
 80058c4:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <__aeabi_d2uiz+0x38>)
 80058c6:	0004      	movs	r4, r0
 80058c8:	000d      	movs	r5, r1
 80058ca:	f7ff ffef 	bl	80058ac <__aeabi_dcmpge>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d104      	bne.n	80058dc <__aeabi_d2uiz+0x1c>
 80058d2:	0020      	movs	r0, r4
 80058d4:	0029      	movs	r1, r5
 80058d6:	f000 ff2d 	bl	8006734 <__aeabi_d2iz>
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <__aeabi_d2uiz+0x38>)
 80058de:	2200      	movs	r2, #0
 80058e0:	0020      	movs	r0, r4
 80058e2:	0029      	movs	r1, r5
 80058e4:	f000 fb94 	bl	8006010 <__aeabi_dsub>
 80058e8:	f000 ff24 	bl	8006734 <__aeabi_d2iz>
 80058ec:	2380      	movs	r3, #128	; 0x80
 80058ee:	061b      	lsls	r3, r3, #24
 80058f0:	469c      	mov	ip, r3
 80058f2:	4460      	add	r0, ip
 80058f4:	e7f1      	b.n	80058da <__aeabi_d2uiz+0x1a>
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	41e00000 	.word	0x41e00000

080058fc <__eqdf2>:
 80058fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058fe:	464f      	mov	r7, r9
 8005900:	4646      	mov	r6, r8
 8005902:	46d6      	mov	lr, sl
 8005904:	4694      	mov	ip, r2
 8005906:	4691      	mov	r9, r2
 8005908:	031a      	lsls	r2, r3, #12
 800590a:	0b12      	lsrs	r2, r2, #12
 800590c:	4d18      	ldr	r5, [pc, #96]	; (8005970 <__eqdf2+0x74>)
 800590e:	b5c0      	push	{r6, r7, lr}
 8005910:	004c      	lsls	r4, r1, #1
 8005912:	030f      	lsls	r7, r1, #12
 8005914:	4692      	mov	sl, r2
 8005916:	005a      	lsls	r2, r3, #1
 8005918:	0006      	movs	r6, r0
 800591a:	4680      	mov	r8, r0
 800591c:	0b3f      	lsrs	r7, r7, #12
 800591e:	2001      	movs	r0, #1
 8005920:	0d64      	lsrs	r4, r4, #21
 8005922:	0fc9      	lsrs	r1, r1, #31
 8005924:	0d52      	lsrs	r2, r2, #21
 8005926:	0fdb      	lsrs	r3, r3, #31
 8005928:	42ac      	cmp	r4, r5
 800592a:	d00a      	beq.n	8005942 <__eqdf2+0x46>
 800592c:	42aa      	cmp	r2, r5
 800592e:	d003      	beq.n	8005938 <__eqdf2+0x3c>
 8005930:	4294      	cmp	r4, r2
 8005932:	d101      	bne.n	8005938 <__eqdf2+0x3c>
 8005934:	4557      	cmp	r7, sl
 8005936:	d00d      	beq.n	8005954 <__eqdf2+0x58>
 8005938:	bce0      	pop	{r5, r6, r7}
 800593a:	46ba      	mov	sl, r7
 800593c:	46b1      	mov	r9, r6
 800593e:	46a8      	mov	r8, r5
 8005940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005942:	003d      	movs	r5, r7
 8005944:	4335      	orrs	r5, r6
 8005946:	d1f7      	bne.n	8005938 <__eqdf2+0x3c>
 8005948:	42a2      	cmp	r2, r4
 800594a:	d1f5      	bne.n	8005938 <__eqdf2+0x3c>
 800594c:	4652      	mov	r2, sl
 800594e:	4665      	mov	r5, ip
 8005950:	432a      	orrs	r2, r5
 8005952:	d1f1      	bne.n	8005938 <__eqdf2+0x3c>
 8005954:	2001      	movs	r0, #1
 8005956:	45c8      	cmp	r8, r9
 8005958:	d1ee      	bne.n	8005938 <__eqdf2+0x3c>
 800595a:	4299      	cmp	r1, r3
 800595c:	d006      	beq.n	800596c <__eqdf2+0x70>
 800595e:	2c00      	cmp	r4, #0
 8005960:	d1ea      	bne.n	8005938 <__eqdf2+0x3c>
 8005962:	433e      	orrs	r6, r7
 8005964:	0030      	movs	r0, r6
 8005966:	1e46      	subs	r6, r0, #1
 8005968:	41b0      	sbcs	r0, r6
 800596a:	e7e5      	b.n	8005938 <__eqdf2+0x3c>
 800596c:	2000      	movs	r0, #0
 800596e:	e7e3      	b.n	8005938 <__eqdf2+0x3c>
 8005970:	000007ff 	.word	0x000007ff

08005974 <__gedf2>:
 8005974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005976:	464e      	mov	r6, r9
 8005978:	4645      	mov	r5, r8
 800597a:	4657      	mov	r7, sl
 800597c:	46de      	mov	lr, fp
 800597e:	0004      	movs	r4, r0
 8005980:	0018      	movs	r0, r3
 8005982:	b5e0      	push	{r5, r6, r7, lr}
 8005984:	0016      	movs	r6, r2
 8005986:	031b      	lsls	r3, r3, #12
 8005988:	0b1b      	lsrs	r3, r3, #12
 800598a:	4d32      	ldr	r5, [pc, #200]	; (8005a54 <__gedf2+0xe0>)
 800598c:	030f      	lsls	r7, r1, #12
 800598e:	004a      	lsls	r2, r1, #1
 8005990:	4699      	mov	r9, r3
 8005992:	0043      	lsls	r3, r0, #1
 8005994:	46a4      	mov	ip, r4
 8005996:	46b0      	mov	r8, r6
 8005998:	0b3f      	lsrs	r7, r7, #12
 800599a:	0d52      	lsrs	r2, r2, #21
 800599c:	0fc9      	lsrs	r1, r1, #31
 800599e:	0d5b      	lsrs	r3, r3, #21
 80059a0:	0fc0      	lsrs	r0, r0, #31
 80059a2:	42aa      	cmp	r2, r5
 80059a4:	d029      	beq.n	80059fa <__gedf2+0x86>
 80059a6:	42ab      	cmp	r3, r5
 80059a8:	d018      	beq.n	80059dc <__gedf2+0x68>
 80059aa:	2a00      	cmp	r2, #0
 80059ac:	d12a      	bne.n	8005a04 <__gedf2+0x90>
 80059ae:	433c      	orrs	r4, r7
 80059b0:	46a3      	mov	fp, r4
 80059b2:	4265      	negs	r5, r4
 80059b4:	4165      	adcs	r5, r4
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d102      	bne.n	80059c0 <__gedf2+0x4c>
 80059ba:	464c      	mov	r4, r9
 80059bc:	4326      	orrs	r6, r4
 80059be:	d027      	beq.n	8005a10 <__gedf2+0x9c>
 80059c0:	2d00      	cmp	r5, #0
 80059c2:	d115      	bne.n	80059f0 <__gedf2+0x7c>
 80059c4:	4281      	cmp	r1, r0
 80059c6:	d028      	beq.n	8005a1a <__gedf2+0xa6>
 80059c8:	2002      	movs	r0, #2
 80059ca:	3901      	subs	r1, #1
 80059cc:	4008      	ands	r0, r1
 80059ce:	3801      	subs	r0, #1
 80059d0:	bcf0      	pop	{r4, r5, r6, r7}
 80059d2:	46bb      	mov	fp, r7
 80059d4:	46b2      	mov	sl, r6
 80059d6:	46a9      	mov	r9, r5
 80059d8:	46a0      	mov	r8, r4
 80059da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059dc:	464d      	mov	r5, r9
 80059de:	432e      	orrs	r6, r5
 80059e0:	d12f      	bne.n	8005a42 <__gedf2+0xce>
 80059e2:	2a00      	cmp	r2, #0
 80059e4:	d1ee      	bne.n	80059c4 <__gedf2+0x50>
 80059e6:	433c      	orrs	r4, r7
 80059e8:	4265      	negs	r5, r4
 80059ea:	4165      	adcs	r5, r4
 80059ec:	2d00      	cmp	r5, #0
 80059ee:	d0e9      	beq.n	80059c4 <__gedf2+0x50>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d1ed      	bne.n	80059d0 <__gedf2+0x5c>
 80059f4:	2001      	movs	r0, #1
 80059f6:	4240      	negs	r0, r0
 80059f8:	e7ea      	b.n	80059d0 <__gedf2+0x5c>
 80059fa:	003d      	movs	r5, r7
 80059fc:	4325      	orrs	r5, r4
 80059fe:	d120      	bne.n	8005a42 <__gedf2+0xce>
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d0eb      	beq.n	80059dc <__gedf2+0x68>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1dd      	bne.n	80059c4 <__gedf2+0x50>
 8005a08:	464c      	mov	r4, r9
 8005a0a:	4326      	orrs	r6, r4
 8005a0c:	d1da      	bne.n	80059c4 <__gedf2+0x50>
 8005a0e:	e7db      	b.n	80059c8 <__gedf2+0x54>
 8005a10:	465b      	mov	r3, fp
 8005a12:	2000      	movs	r0, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0db      	beq.n	80059d0 <__gedf2+0x5c>
 8005a18:	e7d6      	b.n	80059c8 <__gedf2+0x54>
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	dc0a      	bgt.n	8005a34 <__gedf2+0xc0>
 8005a1e:	dbe7      	blt.n	80059f0 <__gedf2+0x7c>
 8005a20:	454f      	cmp	r7, r9
 8005a22:	d8d1      	bhi.n	80059c8 <__gedf2+0x54>
 8005a24:	d010      	beq.n	8005a48 <__gedf2+0xd4>
 8005a26:	2000      	movs	r0, #0
 8005a28:	454f      	cmp	r7, r9
 8005a2a:	d2d1      	bcs.n	80059d0 <__gedf2+0x5c>
 8005a2c:	2900      	cmp	r1, #0
 8005a2e:	d0e1      	beq.n	80059f4 <__gedf2+0x80>
 8005a30:	0008      	movs	r0, r1
 8005a32:	e7cd      	b.n	80059d0 <__gedf2+0x5c>
 8005a34:	4243      	negs	r3, r0
 8005a36:	4158      	adcs	r0, r3
 8005a38:	2302      	movs	r3, #2
 8005a3a:	4240      	negs	r0, r0
 8005a3c:	4018      	ands	r0, r3
 8005a3e:	3801      	subs	r0, #1
 8005a40:	e7c6      	b.n	80059d0 <__gedf2+0x5c>
 8005a42:	2002      	movs	r0, #2
 8005a44:	4240      	negs	r0, r0
 8005a46:	e7c3      	b.n	80059d0 <__gedf2+0x5c>
 8005a48:	45c4      	cmp	ip, r8
 8005a4a:	d8bd      	bhi.n	80059c8 <__gedf2+0x54>
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	45c4      	cmp	ip, r8
 8005a50:	d2be      	bcs.n	80059d0 <__gedf2+0x5c>
 8005a52:	e7eb      	b.n	8005a2c <__gedf2+0xb8>
 8005a54:	000007ff 	.word	0x000007ff

08005a58 <__ledf2>:
 8005a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a5a:	464e      	mov	r6, r9
 8005a5c:	4645      	mov	r5, r8
 8005a5e:	4657      	mov	r7, sl
 8005a60:	46de      	mov	lr, fp
 8005a62:	0004      	movs	r4, r0
 8005a64:	0018      	movs	r0, r3
 8005a66:	b5e0      	push	{r5, r6, r7, lr}
 8005a68:	0016      	movs	r6, r2
 8005a6a:	031b      	lsls	r3, r3, #12
 8005a6c:	0b1b      	lsrs	r3, r3, #12
 8005a6e:	4d31      	ldr	r5, [pc, #196]	; (8005b34 <__ledf2+0xdc>)
 8005a70:	030f      	lsls	r7, r1, #12
 8005a72:	004a      	lsls	r2, r1, #1
 8005a74:	4699      	mov	r9, r3
 8005a76:	0043      	lsls	r3, r0, #1
 8005a78:	46a4      	mov	ip, r4
 8005a7a:	46b0      	mov	r8, r6
 8005a7c:	0b3f      	lsrs	r7, r7, #12
 8005a7e:	0d52      	lsrs	r2, r2, #21
 8005a80:	0fc9      	lsrs	r1, r1, #31
 8005a82:	0d5b      	lsrs	r3, r3, #21
 8005a84:	0fc0      	lsrs	r0, r0, #31
 8005a86:	42aa      	cmp	r2, r5
 8005a88:	d011      	beq.n	8005aae <__ledf2+0x56>
 8005a8a:	42ab      	cmp	r3, r5
 8005a8c:	d014      	beq.n	8005ab8 <__ledf2+0x60>
 8005a8e:	2a00      	cmp	r2, #0
 8005a90:	d12f      	bne.n	8005af2 <__ledf2+0x9a>
 8005a92:	433c      	orrs	r4, r7
 8005a94:	46a3      	mov	fp, r4
 8005a96:	4265      	negs	r5, r4
 8005a98:	4165      	adcs	r5, r4
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d114      	bne.n	8005ac8 <__ledf2+0x70>
 8005a9e:	464c      	mov	r4, r9
 8005aa0:	4326      	orrs	r6, r4
 8005aa2:	d111      	bne.n	8005ac8 <__ledf2+0x70>
 8005aa4:	465b      	mov	r3, fp
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d017      	beq.n	8005adc <__ledf2+0x84>
 8005aac:	e010      	b.n	8005ad0 <__ledf2+0x78>
 8005aae:	003d      	movs	r5, r7
 8005ab0:	4325      	orrs	r5, r4
 8005ab2:	d112      	bne.n	8005ada <__ledf2+0x82>
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d11c      	bne.n	8005af2 <__ledf2+0x9a>
 8005ab8:	464d      	mov	r5, r9
 8005aba:	432e      	orrs	r6, r5
 8005abc:	d10d      	bne.n	8005ada <__ledf2+0x82>
 8005abe:	2a00      	cmp	r2, #0
 8005ac0:	d104      	bne.n	8005acc <__ledf2+0x74>
 8005ac2:	433c      	orrs	r4, r7
 8005ac4:	4265      	negs	r5, r4
 8005ac6:	4165      	adcs	r5, r4
 8005ac8:	2d00      	cmp	r5, #0
 8005aca:	d10d      	bne.n	8005ae8 <__ledf2+0x90>
 8005acc:	4281      	cmp	r1, r0
 8005ace:	d016      	beq.n	8005afe <__ledf2+0xa6>
 8005ad0:	2002      	movs	r0, #2
 8005ad2:	3901      	subs	r1, #1
 8005ad4:	4008      	ands	r0, r1
 8005ad6:	3801      	subs	r0, #1
 8005ad8:	e000      	b.n	8005adc <__ledf2+0x84>
 8005ada:	2002      	movs	r0, #2
 8005adc:	bcf0      	pop	{r4, r5, r6, r7}
 8005ade:	46bb      	mov	fp, r7
 8005ae0:	46b2      	mov	sl, r6
 8005ae2:	46a9      	mov	r9, r5
 8005ae4:	46a0      	mov	r8, r4
 8005ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	d1f7      	bne.n	8005adc <__ledf2+0x84>
 8005aec:	2001      	movs	r0, #1
 8005aee:	4240      	negs	r0, r0
 8005af0:	e7f4      	b.n	8005adc <__ledf2+0x84>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1ea      	bne.n	8005acc <__ledf2+0x74>
 8005af6:	464c      	mov	r4, r9
 8005af8:	4326      	orrs	r6, r4
 8005afa:	d1e7      	bne.n	8005acc <__ledf2+0x74>
 8005afc:	e7e8      	b.n	8005ad0 <__ledf2+0x78>
 8005afe:	429a      	cmp	r2, r3
 8005b00:	dd06      	ble.n	8005b10 <__ledf2+0xb8>
 8005b02:	4243      	negs	r3, r0
 8005b04:	4158      	adcs	r0, r3
 8005b06:	2302      	movs	r3, #2
 8005b08:	4240      	negs	r0, r0
 8005b0a:	4018      	ands	r0, r3
 8005b0c:	3801      	subs	r0, #1
 8005b0e:	e7e5      	b.n	8005adc <__ledf2+0x84>
 8005b10:	429a      	cmp	r2, r3
 8005b12:	dbe9      	blt.n	8005ae8 <__ledf2+0x90>
 8005b14:	454f      	cmp	r7, r9
 8005b16:	d8db      	bhi.n	8005ad0 <__ledf2+0x78>
 8005b18:	d006      	beq.n	8005b28 <__ledf2+0xd0>
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	454f      	cmp	r7, r9
 8005b1e:	d2dd      	bcs.n	8005adc <__ledf2+0x84>
 8005b20:	2900      	cmp	r1, #0
 8005b22:	d0e3      	beq.n	8005aec <__ledf2+0x94>
 8005b24:	0008      	movs	r0, r1
 8005b26:	e7d9      	b.n	8005adc <__ledf2+0x84>
 8005b28:	45c4      	cmp	ip, r8
 8005b2a:	d8d1      	bhi.n	8005ad0 <__ledf2+0x78>
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	45c4      	cmp	ip, r8
 8005b30:	d2d4      	bcs.n	8005adc <__ledf2+0x84>
 8005b32:	e7f5      	b.n	8005b20 <__ledf2+0xc8>
 8005b34:	000007ff 	.word	0x000007ff

08005b38 <__aeabi_dmul>:
 8005b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b3a:	4657      	mov	r7, sl
 8005b3c:	464e      	mov	r6, r9
 8005b3e:	4645      	mov	r5, r8
 8005b40:	46de      	mov	lr, fp
 8005b42:	b5e0      	push	{r5, r6, r7, lr}
 8005b44:	4698      	mov	r8, r3
 8005b46:	030c      	lsls	r4, r1, #12
 8005b48:	004b      	lsls	r3, r1, #1
 8005b4a:	0006      	movs	r6, r0
 8005b4c:	4692      	mov	sl, r2
 8005b4e:	b087      	sub	sp, #28
 8005b50:	0b24      	lsrs	r4, r4, #12
 8005b52:	0d5b      	lsrs	r3, r3, #21
 8005b54:	0fcf      	lsrs	r7, r1, #31
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d06c      	beq.n	8005c34 <__aeabi_dmul+0xfc>
 8005b5a:	4add      	ldr	r2, [pc, #884]	; (8005ed0 <__aeabi_dmul+0x398>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d100      	bne.n	8005b62 <__aeabi_dmul+0x2a>
 8005b60:	e086      	b.n	8005c70 <__aeabi_dmul+0x138>
 8005b62:	0f42      	lsrs	r2, r0, #29
 8005b64:	00e4      	lsls	r4, r4, #3
 8005b66:	4314      	orrs	r4, r2
 8005b68:	2280      	movs	r2, #128	; 0x80
 8005b6a:	0412      	lsls	r2, r2, #16
 8005b6c:	4314      	orrs	r4, r2
 8005b6e:	4ad9      	ldr	r2, [pc, #868]	; (8005ed4 <__aeabi_dmul+0x39c>)
 8005b70:	00c5      	lsls	r5, r0, #3
 8005b72:	4694      	mov	ip, r2
 8005b74:	4463      	add	r3, ip
 8005b76:	9300      	str	r3, [sp, #0]
 8005b78:	2300      	movs	r3, #0
 8005b7a:	4699      	mov	r9, r3
 8005b7c:	469b      	mov	fp, r3
 8005b7e:	4643      	mov	r3, r8
 8005b80:	4642      	mov	r2, r8
 8005b82:	031e      	lsls	r6, r3, #12
 8005b84:	0fd2      	lsrs	r2, r2, #31
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	4650      	mov	r0, sl
 8005b8a:	4690      	mov	r8, r2
 8005b8c:	0b36      	lsrs	r6, r6, #12
 8005b8e:	0d5b      	lsrs	r3, r3, #21
 8005b90:	d100      	bne.n	8005b94 <__aeabi_dmul+0x5c>
 8005b92:	e078      	b.n	8005c86 <__aeabi_dmul+0x14e>
 8005b94:	4ace      	ldr	r2, [pc, #824]	; (8005ed0 <__aeabi_dmul+0x398>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d01d      	beq.n	8005bd6 <__aeabi_dmul+0x9e>
 8005b9a:	49ce      	ldr	r1, [pc, #824]	; (8005ed4 <__aeabi_dmul+0x39c>)
 8005b9c:	0f42      	lsrs	r2, r0, #29
 8005b9e:	468c      	mov	ip, r1
 8005ba0:	9900      	ldr	r1, [sp, #0]
 8005ba2:	4463      	add	r3, ip
 8005ba4:	00f6      	lsls	r6, r6, #3
 8005ba6:	468c      	mov	ip, r1
 8005ba8:	4316      	orrs	r6, r2
 8005baa:	2280      	movs	r2, #128	; 0x80
 8005bac:	449c      	add	ip, r3
 8005bae:	0412      	lsls	r2, r2, #16
 8005bb0:	4663      	mov	r3, ip
 8005bb2:	4316      	orrs	r6, r2
 8005bb4:	00c2      	lsls	r2, r0, #3
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	9900      	ldr	r1, [sp, #0]
 8005bbc:	4643      	mov	r3, r8
 8005bbe:	3101      	adds	r1, #1
 8005bc0:	468c      	mov	ip, r1
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	407b      	eors	r3, r7
 8005bc6:	9301      	str	r3, [sp, #4]
 8005bc8:	290f      	cmp	r1, #15
 8005bca:	d900      	bls.n	8005bce <__aeabi_dmul+0x96>
 8005bcc:	e07e      	b.n	8005ccc <__aeabi_dmul+0x194>
 8005bce:	4bc2      	ldr	r3, [pc, #776]	; (8005ed8 <__aeabi_dmul+0x3a0>)
 8005bd0:	0089      	lsls	r1, r1, #2
 8005bd2:	5859      	ldr	r1, [r3, r1]
 8005bd4:	468f      	mov	pc, r1
 8005bd6:	4652      	mov	r2, sl
 8005bd8:	9b00      	ldr	r3, [sp, #0]
 8005bda:	4332      	orrs	r2, r6
 8005bdc:	d000      	beq.n	8005be0 <__aeabi_dmul+0xa8>
 8005bde:	e156      	b.n	8005e8e <__aeabi_dmul+0x356>
 8005be0:	49bb      	ldr	r1, [pc, #748]	; (8005ed0 <__aeabi_dmul+0x398>)
 8005be2:	2600      	movs	r6, #0
 8005be4:	468c      	mov	ip, r1
 8005be6:	4463      	add	r3, ip
 8005be8:	4649      	mov	r1, r9
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	2302      	movs	r3, #2
 8005bee:	4319      	orrs	r1, r3
 8005bf0:	4689      	mov	r9, r1
 8005bf2:	2002      	movs	r0, #2
 8005bf4:	e7e1      	b.n	8005bba <__aeabi_dmul+0x82>
 8005bf6:	4643      	mov	r3, r8
 8005bf8:	9301      	str	r3, [sp, #4]
 8005bfa:	0034      	movs	r4, r6
 8005bfc:	0015      	movs	r5, r2
 8005bfe:	4683      	mov	fp, r0
 8005c00:	465b      	mov	r3, fp
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d05e      	beq.n	8005cc4 <__aeabi_dmul+0x18c>
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d100      	bne.n	8005c0c <__aeabi_dmul+0xd4>
 8005c0a:	e1f3      	b.n	8005ff4 <__aeabi_dmul+0x4bc>
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d000      	beq.n	8005c12 <__aeabi_dmul+0xda>
 8005c10:	e118      	b.n	8005e44 <__aeabi_dmul+0x30c>
 8005c12:	2200      	movs	r2, #0
 8005c14:	2400      	movs	r4, #0
 8005c16:	2500      	movs	r5, #0
 8005c18:	9b01      	ldr	r3, [sp, #4]
 8005c1a:	0512      	lsls	r2, r2, #20
 8005c1c:	4322      	orrs	r2, r4
 8005c1e:	07db      	lsls	r3, r3, #31
 8005c20:	431a      	orrs	r2, r3
 8005c22:	0028      	movs	r0, r5
 8005c24:	0011      	movs	r1, r2
 8005c26:	b007      	add	sp, #28
 8005c28:	bcf0      	pop	{r4, r5, r6, r7}
 8005c2a:	46bb      	mov	fp, r7
 8005c2c:	46b2      	mov	sl, r6
 8005c2e:	46a9      	mov	r9, r5
 8005c30:	46a0      	mov	r8, r4
 8005c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c34:	0025      	movs	r5, r4
 8005c36:	4305      	orrs	r5, r0
 8005c38:	d100      	bne.n	8005c3c <__aeabi_dmul+0x104>
 8005c3a:	e141      	b.n	8005ec0 <__aeabi_dmul+0x388>
 8005c3c:	2c00      	cmp	r4, #0
 8005c3e:	d100      	bne.n	8005c42 <__aeabi_dmul+0x10a>
 8005c40:	e1ad      	b.n	8005f9e <__aeabi_dmul+0x466>
 8005c42:	0020      	movs	r0, r4
 8005c44:	f000 fe02 	bl	800684c <__clzsi2>
 8005c48:	0001      	movs	r1, r0
 8005c4a:	0002      	movs	r2, r0
 8005c4c:	390b      	subs	r1, #11
 8005c4e:	231d      	movs	r3, #29
 8005c50:	0010      	movs	r0, r2
 8005c52:	1a5b      	subs	r3, r3, r1
 8005c54:	0031      	movs	r1, r6
 8005c56:	0035      	movs	r5, r6
 8005c58:	3808      	subs	r0, #8
 8005c5a:	4084      	lsls	r4, r0
 8005c5c:	40d9      	lsrs	r1, r3
 8005c5e:	4085      	lsls	r5, r0
 8005c60:	430c      	orrs	r4, r1
 8005c62:	489e      	ldr	r0, [pc, #632]	; (8005edc <__aeabi_dmul+0x3a4>)
 8005c64:	1a83      	subs	r3, r0, r2
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4699      	mov	r9, r3
 8005c6c:	469b      	mov	fp, r3
 8005c6e:	e786      	b.n	8005b7e <__aeabi_dmul+0x46>
 8005c70:	0005      	movs	r5, r0
 8005c72:	4325      	orrs	r5, r4
 8005c74:	d000      	beq.n	8005c78 <__aeabi_dmul+0x140>
 8005c76:	e11c      	b.n	8005eb2 <__aeabi_dmul+0x37a>
 8005c78:	2208      	movs	r2, #8
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	2400      	movs	r4, #0
 8005c80:	4691      	mov	r9, r2
 8005c82:	469b      	mov	fp, r3
 8005c84:	e77b      	b.n	8005b7e <__aeabi_dmul+0x46>
 8005c86:	4652      	mov	r2, sl
 8005c88:	4332      	orrs	r2, r6
 8005c8a:	d100      	bne.n	8005c8e <__aeabi_dmul+0x156>
 8005c8c:	e10a      	b.n	8005ea4 <__aeabi_dmul+0x36c>
 8005c8e:	2e00      	cmp	r6, #0
 8005c90:	d100      	bne.n	8005c94 <__aeabi_dmul+0x15c>
 8005c92:	e176      	b.n	8005f82 <__aeabi_dmul+0x44a>
 8005c94:	0030      	movs	r0, r6
 8005c96:	f000 fdd9 	bl	800684c <__clzsi2>
 8005c9a:	0002      	movs	r2, r0
 8005c9c:	3a0b      	subs	r2, #11
 8005c9e:	231d      	movs	r3, #29
 8005ca0:	0001      	movs	r1, r0
 8005ca2:	1a9b      	subs	r3, r3, r2
 8005ca4:	4652      	mov	r2, sl
 8005ca6:	3908      	subs	r1, #8
 8005ca8:	40da      	lsrs	r2, r3
 8005caa:	408e      	lsls	r6, r1
 8005cac:	4316      	orrs	r6, r2
 8005cae:	4652      	mov	r2, sl
 8005cb0:	408a      	lsls	r2, r1
 8005cb2:	9b00      	ldr	r3, [sp, #0]
 8005cb4:	4989      	ldr	r1, [pc, #548]	; (8005edc <__aeabi_dmul+0x3a4>)
 8005cb6:	1a18      	subs	r0, r3, r0
 8005cb8:	0003      	movs	r3, r0
 8005cba:	468c      	mov	ip, r1
 8005cbc:	4463      	add	r3, ip
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	e77a      	b.n	8005bba <__aeabi_dmul+0x82>
 8005cc4:	2400      	movs	r4, #0
 8005cc6:	2500      	movs	r5, #0
 8005cc8:	4a81      	ldr	r2, [pc, #516]	; (8005ed0 <__aeabi_dmul+0x398>)
 8005cca:	e7a5      	b.n	8005c18 <__aeabi_dmul+0xe0>
 8005ccc:	0c2f      	lsrs	r7, r5, #16
 8005cce:	042d      	lsls	r5, r5, #16
 8005cd0:	0c2d      	lsrs	r5, r5, #16
 8005cd2:	002b      	movs	r3, r5
 8005cd4:	0c11      	lsrs	r1, r2, #16
 8005cd6:	0412      	lsls	r2, r2, #16
 8005cd8:	0c12      	lsrs	r2, r2, #16
 8005cda:	4353      	muls	r3, r2
 8005cdc:	4698      	mov	r8, r3
 8005cde:	0013      	movs	r3, r2
 8005ce0:	0028      	movs	r0, r5
 8005ce2:	437b      	muls	r3, r7
 8005ce4:	4699      	mov	r9, r3
 8005ce6:	4348      	muls	r0, r1
 8005ce8:	4448      	add	r0, r9
 8005cea:	4683      	mov	fp, r0
 8005cec:	4640      	mov	r0, r8
 8005cee:	000b      	movs	r3, r1
 8005cf0:	0c00      	lsrs	r0, r0, #16
 8005cf2:	4682      	mov	sl, r0
 8005cf4:	4658      	mov	r0, fp
 8005cf6:	437b      	muls	r3, r7
 8005cf8:	4450      	add	r0, sl
 8005cfa:	9302      	str	r3, [sp, #8]
 8005cfc:	4581      	cmp	r9, r0
 8005cfe:	d906      	bls.n	8005d0e <__aeabi_dmul+0x1d6>
 8005d00:	469a      	mov	sl, r3
 8005d02:	2380      	movs	r3, #128	; 0x80
 8005d04:	025b      	lsls	r3, r3, #9
 8005d06:	4699      	mov	r9, r3
 8005d08:	44ca      	add	sl, r9
 8005d0a:	4653      	mov	r3, sl
 8005d0c:	9302      	str	r3, [sp, #8]
 8005d0e:	0c03      	lsrs	r3, r0, #16
 8005d10:	469b      	mov	fp, r3
 8005d12:	4643      	mov	r3, r8
 8005d14:	041b      	lsls	r3, r3, #16
 8005d16:	0400      	lsls	r0, r0, #16
 8005d18:	0c1b      	lsrs	r3, r3, #16
 8005d1a:	4698      	mov	r8, r3
 8005d1c:	0003      	movs	r3, r0
 8005d1e:	4443      	add	r3, r8
 8005d20:	9304      	str	r3, [sp, #16]
 8005d22:	0c33      	lsrs	r3, r6, #16
 8005d24:	4699      	mov	r9, r3
 8005d26:	002b      	movs	r3, r5
 8005d28:	0436      	lsls	r6, r6, #16
 8005d2a:	0c36      	lsrs	r6, r6, #16
 8005d2c:	4373      	muls	r3, r6
 8005d2e:	4698      	mov	r8, r3
 8005d30:	0033      	movs	r3, r6
 8005d32:	437b      	muls	r3, r7
 8005d34:	469a      	mov	sl, r3
 8005d36:	464b      	mov	r3, r9
 8005d38:	435d      	muls	r5, r3
 8005d3a:	435f      	muls	r7, r3
 8005d3c:	4643      	mov	r3, r8
 8005d3e:	4455      	add	r5, sl
 8005d40:	0c18      	lsrs	r0, r3, #16
 8005d42:	1940      	adds	r0, r0, r5
 8005d44:	4582      	cmp	sl, r0
 8005d46:	d903      	bls.n	8005d50 <__aeabi_dmul+0x218>
 8005d48:	2380      	movs	r3, #128	; 0x80
 8005d4a:	025b      	lsls	r3, r3, #9
 8005d4c:	469a      	mov	sl, r3
 8005d4e:	4457      	add	r7, sl
 8005d50:	0c05      	lsrs	r5, r0, #16
 8005d52:	19eb      	adds	r3, r5, r7
 8005d54:	9305      	str	r3, [sp, #20]
 8005d56:	4643      	mov	r3, r8
 8005d58:	041d      	lsls	r5, r3, #16
 8005d5a:	0c2d      	lsrs	r5, r5, #16
 8005d5c:	0400      	lsls	r0, r0, #16
 8005d5e:	1940      	adds	r0, r0, r5
 8005d60:	0c25      	lsrs	r5, r4, #16
 8005d62:	0424      	lsls	r4, r4, #16
 8005d64:	0c24      	lsrs	r4, r4, #16
 8005d66:	0027      	movs	r7, r4
 8005d68:	4357      	muls	r7, r2
 8005d6a:	436a      	muls	r2, r5
 8005d6c:	4690      	mov	r8, r2
 8005d6e:	002a      	movs	r2, r5
 8005d70:	0c3b      	lsrs	r3, r7, #16
 8005d72:	469a      	mov	sl, r3
 8005d74:	434a      	muls	r2, r1
 8005d76:	4361      	muls	r1, r4
 8005d78:	4441      	add	r1, r8
 8005d7a:	4451      	add	r1, sl
 8005d7c:	4483      	add	fp, r0
 8005d7e:	4588      	cmp	r8, r1
 8005d80:	d903      	bls.n	8005d8a <__aeabi_dmul+0x252>
 8005d82:	2380      	movs	r3, #128	; 0x80
 8005d84:	025b      	lsls	r3, r3, #9
 8005d86:	4698      	mov	r8, r3
 8005d88:	4442      	add	r2, r8
 8005d8a:	043f      	lsls	r7, r7, #16
 8005d8c:	0c0b      	lsrs	r3, r1, #16
 8005d8e:	0c3f      	lsrs	r7, r7, #16
 8005d90:	0409      	lsls	r1, r1, #16
 8005d92:	19c9      	adds	r1, r1, r7
 8005d94:	0027      	movs	r7, r4
 8005d96:	4698      	mov	r8, r3
 8005d98:	464b      	mov	r3, r9
 8005d9a:	4377      	muls	r7, r6
 8005d9c:	435c      	muls	r4, r3
 8005d9e:	436e      	muls	r6, r5
 8005da0:	435d      	muls	r5, r3
 8005da2:	0c3b      	lsrs	r3, r7, #16
 8005da4:	4699      	mov	r9, r3
 8005da6:	19a4      	adds	r4, r4, r6
 8005da8:	444c      	add	r4, r9
 8005daa:	4442      	add	r2, r8
 8005dac:	9503      	str	r5, [sp, #12]
 8005dae:	42a6      	cmp	r6, r4
 8005db0:	d904      	bls.n	8005dbc <__aeabi_dmul+0x284>
 8005db2:	2380      	movs	r3, #128	; 0x80
 8005db4:	025b      	lsls	r3, r3, #9
 8005db6:	4698      	mov	r8, r3
 8005db8:	4445      	add	r5, r8
 8005dba:	9503      	str	r5, [sp, #12]
 8005dbc:	9b02      	ldr	r3, [sp, #8]
 8005dbe:	043f      	lsls	r7, r7, #16
 8005dc0:	445b      	add	r3, fp
 8005dc2:	001e      	movs	r6, r3
 8005dc4:	4283      	cmp	r3, r0
 8005dc6:	4180      	sbcs	r0, r0
 8005dc8:	0423      	lsls	r3, r4, #16
 8005dca:	4698      	mov	r8, r3
 8005dcc:	9b05      	ldr	r3, [sp, #20]
 8005dce:	0c3f      	lsrs	r7, r7, #16
 8005dd0:	4447      	add	r7, r8
 8005dd2:	4698      	mov	r8, r3
 8005dd4:	1876      	adds	r6, r6, r1
 8005dd6:	428e      	cmp	r6, r1
 8005dd8:	4189      	sbcs	r1, r1
 8005dda:	4447      	add	r7, r8
 8005ddc:	4240      	negs	r0, r0
 8005dde:	183d      	adds	r5, r7, r0
 8005de0:	46a8      	mov	r8, r5
 8005de2:	4693      	mov	fp, r2
 8005de4:	4249      	negs	r1, r1
 8005de6:	468a      	mov	sl, r1
 8005de8:	44c3      	add	fp, r8
 8005dea:	429f      	cmp	r7, r3
 8005dec:	41bf      	sbcs	r7, r7
 8005dee:	4580      	cmp	r8, r0
 8005df0:	4180      	sbcs	r0, r0
 8005df2:	9b03      	ldr	r3, [sp, #12]
 8005df4:	44da      	add	sl, fp
 8005df6:	4698      	mov	r8, r3
 8005df8:	4653      	mov	r3, sl
 8005dfa:	4240      	negs	r0, r0
 8005dfc:	427f      	negs	r7, r7
 8005dfe:	4307      	orrs	r7, r0
 8005e00:	0c24      	lsrs	r4, r4, #16
 8005e02:	4593      	cmp	fp, r2
 8005e04:	4192      	sbcs	r2, r2
 8005e06:	458a      	cmp	sl, r1
 8005e08:	4189      	sbcs	r1, r1
 8005e0a:	193f      	adds	r7, r7, r4
 8005e0c:	0ddc      	lsrs	r4, r3, #23
 8005e0e:	9b04      	ldr	r3, [sp, #16]
 8005e10:	0275      	lsls	r5, r6, #9
 8005e12:	431d      	orrs	r5, r3
 8005e14:	1e68      	subs	r0, r5, #1
 8005e16:	4185      	sbcs	r5, r0
 8005e18:	4653      	mov	r3, sl
 8005e1a:	4252      	negs	r2, r2
 8005e1c:	4249      	negs	r1, r1
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	18bf      	adds	r7, r7, r2
 8005e22:	4447      	add	r7, r8
 8005e24:	0df6      	lsrs	r6, r6, #23
 8005e26:	027f      	lsls	r7, r7, #9
 8005e28:	4335      	orrs	r5, r6
 8005e2a:	025a      	lsls	r2, r3, #9
 8005e2c:	433c      	orrs	r4, r7
 8005e2e:	4315      	orrs	r5, r2
 8005e30:	01fb      	lsls	r3, r7, #7
 8005e32:	d400      	bmi.n	8005e36 <__aeabi_dmul+0x2fe>
 8005e34:	e0c1      	b.n	8005fba <__aeabi_dmul+0x482>
 8005e36:	2101      	movs	r1, #1
 8005e38:	086a      	lsrs	r2, r5, #1
 8005e3a:	400d      	ands	r5, r1
 8005e3c:	4315      	orrs	r5, r2
 8005e3e:	07e2      	lsls	r2, r4, #31
 8005e40:	4315      	orrs	r5, r2
 8005e42:	0864      	lsrs	r4, r4, #1
 8005e44:	4926      	ldr	r1, [pc, #152]	; (8005ee0 <__aeabi_dmul+0x3a8>)
 8005e46:	4461      	add	r1, ip
 8005e48:	2900      	cmp	r1, #0
 8005e4a:	dd56      	ble.n	8005efa <__aeabi_dmul+0x3c2>
 8005e4c:	076b      	lsls	r3, r5, #29
 8005e4e:	d009      	beq.n	8005e64 <__aeabi_dmul+0x32c>
 8005e50:	220f      	movs	r2, #15
 8005e52:	402a      	ands	r2, r5
 8005e54:	2a04      	cmp	r2, #4
 8005e56:	d005      	beq.n	8005e64 <__aeabi_dmul+0x32c>
 8005e58:	1d2a      	adds	r2, r5, #4
 8005e5a:	42aa      	cmp	r2, r5
 8005e5c:	41ad      	sbcs	r5, r5
 8005e5e:	426d      	negs	r5, r5
 8005e60:	1964      	adds	r4, r4, r5
 8005e62:	0015      	movs	r5, r2
 8005e64:	01e3      	lsls	r3, r4, #7
 8005e66:	d504      	bpl.n	8005e72 <__aeabi_dmul+0x33a>
 8005e68:	2180      	movs	r1, #128	; 0x80
 8005e6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ee4 <__aeabi_dmul+0x3ac>)
 8005e6c:	00c9      	lsls	r1, r1, #3
 8005e6e:	4014      	ands	r4, r2
 8005e70:	4461      	add	r1, ip
 8005e72:	4a1d      	ldr	r2, [pc, #116]	; (8005ee8 <__aeabi_dmul+0x3b0>)
 8005e74:	4291      	cmp	r1, r2
 8005e76:	dd00      	ble.n	8005e7a <__aeabi_dmul+0x342>
 8005e78:	e724      	b.n	8005cc4 <__aeabi_dmul+0x18c>
 8005e7a:	0762      	lsls	r2, r4, #29
 8005e7c:	08ed      	lsrs	r5, r5, #3
 8005e7e:	0264      	lsls	r4, r4, #9
 8005e80:	0549      	lsls	r1, r1, #21
 8005e82:	4315      	orrs	r5, r2
 8005e84:	0b24      	lsrs	r4, r4, #12
 8005e86:	0d4a      	lsrs	r2, r1, #21
 8005e88:	e6c6      	b.n	8005c18 <__aeabi_dmul+0xe0>
 8005e8a:	9701      	str	r7, [sp, #4]
 8005e8c:	e6b8      	b.n	8005c00 <__aeabi_dmul+0xc8>
 8005e8e:	4a10      	ldr	r2, [pc, #64]	; (8005ed0 <__aeabi_dmul+0x398>)
 8005e90:	2003      	movs	r0, #3
 8005e92:	4694      	mov	ip, r2
 8005e94:	4463      	add	r3, ip
 8005e96:	464a      	mov	r2, r9
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	4691      	mov	r9, r2
 8005ea0:	4652      	mov	r2, sl
 8005ea2:	e68a      	b.n	8005bba <__aeabi_dmul+0x82>
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	4319      	orrs	r1, r3
 8005eaa:	4689      	mov	r9, r1
 8005eac:	2600      	movs	r6, #0
 8005eae:	2001      	movs	r0, #1
 8005eb0:	e683      	b.n	8005bba <__aeabi_dmul+0x82>
 8005eb2:	220c      	movs	r2, #12
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	0005      	movs	r5, r0
 8005eba:	4691      	mov	r9, r2
 8005ebc:	469b      	mov	fp, r3
 8005ebe:	e65e      	b.n	8005b7e <__aeabi_dmul+0x46>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	4699      	mov	r9, r3
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	2400      	movs	r4, #0
 8005ecc:	469b      	mov	fp, r3
 8005ece:	e656      	b.n	8005b7e <__aeabi_dmul+0x46>
 8005ed0:	000007ff 	.word	0x000007ff
 8005ed4:	fffffc01 	.word	0xfffffc01
 8005ed8:	08006ac8 	.word	0x08006ac8
 8005edc:	fffffc0d 	.word	0xfffffc0d
 8005ee0:	000003ff 	.word	0x000003ff
 8005ee4:	feffffff 	.word	0xfeffffff
 8005ee8:	000007fe 	.word	0x000007fe
 8005eec:	2300      	movs	r3, #0
 8005eee:	2480      	movs	r4, #128	; 0x80
 8005ef0:	2500      	movs	r5, #0
 8005ef2:	4a44      	ldr	r2, [pc, #272]	; (8006004 <__aeabi_dmul+0x4cc>)
 8005ef4:	9301      	str	r3, [sp, #4]
 8005ef6:	0324      	lsls	r4, r4, #12
 8005ef8:	e68e      	b.n	8005c18 <__aeabi_dmul+0xe0>
 8005efa:	2001      	movs	r0, #1
 8005efc:	1a40      	subs	r0, r0, r1
 8005efe:	2838      	cmp	r0, #56	; 0x38
 8005f00:	dd00      	ble.n	8005f04 <__aeabi_dmul+0x3cc>
 8005f02:	e686      	b.n	8005c12 <__aeabi_dmul+0xda>
 8005f04:	281f      	cmp	r0, #31
 8005f06:	dd5b      	ble.n	8005fc0 <__aeabi_dmul+0x488>
 8005f08:	221f      	movs	r2, #31
 8005f0a:	0023      	movs	r3, r4
 8005f0c:	4252      	negs	r2, r2
 8005f0e:	1a51      	subs	r1, r2, r1
 8005f10:	40cb      	lsrs	r3, r1
 8005f12:	0019      	movs	r1, r3
 8005f14:	2820      	cmp	r0, #32
 8005f16:	d003      	beq.n	8005f20 <__aeabi_dmul+0x3e8>
 8005f18:	4a3b      	ldr	r2, [pc, #236]	; (8006008 <__aeabi_dmul+0x4d0>)
 8005f1a:	4462      	add	r2, ip
 8005f1c:	4094      	lsls	r4, r2
 8005f1e:	4325      	orrs	r5, r4
 8005f20:	1e6a      	subs	r2, r5, #1
 8005f22:	4195      	sbcs	r5, r2
 8005f24:	002a      	movs	r2, r5
 8005f26:	430a      	orrs	r2, r1
 8005f28:	2107      	movs	r1, #7
 8005f2a:	000d      	movs	r5, r1
 8005f2c:	2400      	movs	r4, #0
 8005f2e:	4015      	ands	r5, r2
 8005f30:	4211      	tst	r1, r2
 8005f32:	d05b      	beq.n	8005fec <__aeabi_dmul+0x4b4>
 8005f34:	210f      	movs	r1, #15
 8005f36:	2400      	movs	r4, #0
 8005f38:	4011      	ands	r1, r2
 8005f3a:	2904      	cmp	r1, #4
 8005f3c:	d053      	beq.n	8005fe6 <__aeabi_dmul+0x4ae>
 8005f3e:	1d11      	adds	r1, r2, #4
 8005f40:	4291      	cmp	r1, r2
 8005f42:	4192      	sbcs	r2, r2
 8005f44:	4252      	negs	r2, r2
 8005f46:	18a4      	adds	r4, r4, r2
 8005f48:	000a      	movs	r2, r1
 8005f4a:	0223      	lsls	r3, r4, #8
 8005f4c:	d54b      	bpl.n	8005fe6 <__aeabi_dmul+0x4ae>
 8005f4e:	2201      	movs	r2, #1
 8005f50:	2400      	movs	r4, #0
 8005f52:	2500      	movs	r5, #0
 8005f54:	e660      	b.n	8005c18 <__aeabi_dmul+0xe0>
 8005f56:	2380      	movs	r3, #128	; 0x80
 8005f58:	031b      	lsls	r3, r3, #12
 8005f5a:	421c      	tst	r4, r3
 8005f5c:	d009      	beq.n	8005f72 <__aeabi_dmul+0x43a>
 8005f5e:	421e      	tst	r6, r3
 8005f60:	d107      	bne.n	8005f72 <__aeabi_dmul+0x43a>
 8005f62:	4333      	orrs	r3, r6
 8005f64:	031c      	lsls	r4, r3, #12
 8005f66:	4643      	mov	r3, r8
 8005f68:	0015      	movs	r5, r2
 8005f6a:	0b24      	lsrs	r4, r4, #12
 8005f6c:	4a25      	ldr	r2, [pc, #148]	; (8006004 <__aeabi_dmul+0x4cc>)
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	e652      	b.n	8005c18 <__aeabi_dmul+0xe0>
 8005f72:	2280      	movs	r2, #128	; 0x80
 8005f74:	0312      	lsls	r2, r2, #12
 8005f76:	4314      	orrs	r4, r2
 8005f78:	0324      	lsls	r4, r4, #12
 8005f7a:	4a22      	ldr	r2, [pc, #136]	; (8006004 <__aeabi_dmul+0x4cc>)
 8005f7c:	0b24      	lsrs	r4, r4, #12
 8005f7e:	9701      	str	r7, [sp, #4]
 8005f80:	e64a      	b.n	8005c18 <__aeabi_dmul+0xe0>
 8005f82:	f000 fc63 	bl	800684c <__clzsi2>
 8005f86:	0003      	movs	r3, r0
 8005f88:	001a      	movs	r2, r3
 8005f8a:	3215      	adds	r2, #21
 8005f8c:	3020      	adds	r0, #32
 8005f8e:	2a1c      	cmp	r2, #28
 8005f90:	dc00      	bgt.n	8005f94 <__aeabi_dmul+0x45c>
 8005f92:	e684      	b.n	8005c9e <__aeabi_dmul+0x166>
 8005f94:	4656      	mov	r6, sl
 8005f96:	3b08      	subs	r3, #8
 8005f98:	2200      	movs	r2, #0
 8005f9a:	409e      	lsls	r6, r3
 8005f9c:	e689      	b.n	8005cb2 <__aeabi_dmul+0x17a>
 8005f9e:	f000 fc55 	bl	800684c <__clzsi2>
 8005fa2:	0001      	movs	r1, r0
 8005fa4:	0002      	movs	r2, r0
 8005fa6:	3115      	adds	r1, #21
 8005fa8:	3220      	adds	r2, #32
 8005faa:	291c      	cmp	r1, #28
 8005fac:	dc00      	bgt.n	8005fb0 <__aeabi_dmul+0x478>
 8005fae:	e64e      	b.n	8005c4e <__aeabi_dmul+0x116>
 8005fb0:	0034      	movs	r4, r6
 8005fb2:	3808      	subs	r0, #8
 8005fb4:	2500      	movs	r5, #0
 8005fb6:	4084      	lsls	r4, r0
 8005fb8:	e653      	b.n	8005c62 <__aeabi_dmul+0x12a>
 8005fba:	9b00      	ldr	r3, [sp, #0]
 8005fbc:	469c      	mov	ip, r3
 8005fbe:	e741      	b.n	8005e44 <__aeabi_dmul+0x30c>
 8005fc0:	4912      	ldr	r1, [pc, #72]	; (800600c <__aeabi_dmul+0x4d4>)
 8005fc2:	0022      	movs	r2, r4
 8005fc4:	4461      	add	r1, ip
 8005fc6:	002e      	movs	r6, r5
 8005fc8:	408d      	lsls	r5, r1
 8005fca:	408a      	lsls	r2, r1
 8005fcc:	40c6      	lsrs	r6, r0
 8005fce:	1e69      	subs	r1, r5, #1
 8005fd0:	418d      	sbcs	r5, r1
 8005fd2:	4332      	orrs	r2, r6
 8005fd4:	432a      	orrs	r2, r5
 8005fd6:	40c4      	lsrs	r4, r0
 8005fd8:	0753      	lsls	r3, r2, #29
 8005fda:	d0b6      	beq.n	8005f4a <__aeabi_dmul+0x412>
 8005fdc:	210f      	movs	r1, #15
 8005fde:	4011      	ands	r1, r2
 8005fe0:	2904      	cmp	r1, #4
 8005fe2:	d1ac      	bne.n	8005f3e <__aeabi_dmul+0x406>
 8005fe4:	e7b1      	b.n	8005f4a <__aeabi_dmul+0x412>
 8005fe6:	0765      	lsls	r5, r4, #29
 8005fe8:	0264      	lsls	r4, r4, #9
 8005fea:	0b24      	lsrs	r4, r4, #12
 8005fec:	08d2      	lsrs	r2, r2, #3
 8005fee:	4315      	orrs	r5, r2
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	e611      	b.n	8005c18 <__aeabi_dmul+0xe0>
 8005ff4:	2280      	movs	r2, #128	; 0x80
 8005ff6:	0312      	lsls	r2, r2, #12
 8005ff8:	4314      	orrs	r4, r2
 8005ffa:	0324      	lsls	r4, r4, #12
 8005ffc:	4a01      	ldr	r2, [pc, #4]	; (8006004 <__aeabi_dmul+0x4cc>)
 8005ffe:	0b24      	lsrs	r4, r4, #12
 8006000:	e60a      	b.n	8005c18 <__aeabi_dmul+0xe0>
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	000007ff 	.word	0x000007ff
 8006008:	0000043e 	.word	0x0000043e
 800600c:	0000041e 	.word	0x0000041e

08006010 <__aeabi_dsub>:
 8006010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006012:	4657      	mov	r7, sl
 8006014:	464e      	mov	r6, r9
 8006016:	4645      	mov	r5, r8
 8006018:	46de      	mov	lr, fp
 800601a:	0004      	movs	r4, r0
 800601c:	b5e0      	push	{r5, r6, r7, lr}
 800601e:	001f      	movs	r7, r3
 8006020:	0010      	movs	r0, r2
 8006022:	030b      	lsls	r3, r1, #12
 8006024:	0f62      	lsrs	r2, r4, #29
 8006026:	004e      	lsls	r6, r1, #1
 8006028:	0fcd      	lsrs	r5, r1, #31
 800602a:	0a5b      	lsrs	r3, r3, #9
 800602c:	0339      	lsls	r1, r7, #12
 800602e:	4313      	orrs	r3, r2
 8006030:	0a49      	lsrs	r1, r1, #9
 8006032:	00e2      	lsls	r2, r4, #3
 8006034:	0f44      	lsrs	r4, r0, #29
 8006036:	4321      	orrs	r1, r4
 8006038:	4cc2      	ldr	r4, [pc, #776]	; (8006344 <__aeabi_dsub+0x334>)
 800603a:	4691      	mov	r9, r2
 800603c:	4692      	mov	sl, r2
 800603e:	00c0      	lsls	r0, r0, #3
 8006040:	007a      	lsls	r2, r7, #1
 8006042:	4680      	mov	r8, r0
 8006044:	0d76      	lsrs	r6, r6, #21
 8006046:	0d52      	lsrs	r2, r2, #21
 8006048:	0fff      	lsrs	r7, r7, #31
 800604a:	42a2      	cmp	r2, r4
 800604c:	d100      	bne.n	8006050 <__aeabi_dsub+0x40>
 800604e:	e0b4      	b.n	80061ba <__aeabi_dsub+0x1aa>
 8006050:	2401      	movs	r4, #1
 8006052:	4067      	eors	r7, r4
 8006054:	46bb      	mov	fp, r7
 8006056:	42bd      	cmp	r5, r7
 8006058:	d100      	bne.n	800605c <__aeabi_dsub+0x4c>
 800605a:	e088      	b.n	800616e <__aeabi_dsub+0x15e>
 800605c:	1ab4      	subs	r4, r6, r2
 800605e:	46a4      	mov	ip, r4
 8006060:	2c00      	cmp	r4, #0
 8006062:	dc00      	bgt.n	8006066 <__aeabi_dsub+0x56>
 8006064:	e0b2      	b.n	80061cc <__aeabi_dsub+0x1bc>
 8006066:	2a00      	cmp	r2, #0
 8006068:	d100      	bne.n	800606c <__aeabi_dsub+0x5c>
 800606a:	e0c5      	b.n	80061f8 <__aeabi_dsub+0x1e8>
 800606c:	4ab5      	ldr	r2, [pc, #724]	; (8006344 <__aeabi_dsub+0x334>)
 800606e:	4296      	cmp	r6, r2
 8006070:	d100      	bne.n	8006074 <__aeabi_dsub+0x64>
 8006072:	e28b      	b.n	800658c <__aeabi_dsub+0x57c>
 8006074:	2280      	movs	r2, #128	; 0x80
 8006076:	0412      	lsls	r2, r2, #16
 8006078:	4311      	orrs	r1, r2
 800607a:	4662      	mov	r2, ip
 800607c:	2a38      	cmp	r2, #56	; 0x38
 800607e:	dd00      	ble.n	8006082 <__aeabi_dsub+0x72>
 8006080:	e1a1      	b.n	80063c6 <__aeabi_dsub+0x3b6>
 8006082:	2a1f      	cmp	r2, #31
 8006084:	dd00      	ble.n	8006088 <__aeabi_dsub+0x78>
 8006086:	e216      	b.n	80064b6 <__aeabi_dsub+0x4a6>
 8006088:	2720      	movs	r7, #32
 800608a:	000c      	movs	r4, r1
 800608c:	1abf      	subs	r7, r7, r2
 800608e:	40bc      	lsls	r4, r7
 8006090:	0002      	movs	r2, r0
 8006092:	46a0      	mov	r8, r4
 8006094:	4664      	mov	r4, ip
 8006096:	40b8      	lsls	r0, r7
 8006098:	40e2      	lsrs	r2, r4
 800609a:	4644      	mov	r4, r8
 800609c:	4314      	orrs	r4, r2
 800609e:	0002      	movs	r2, r0
 80060a0:	1e50      	subs	r0, r2, #1
 80060a2:	4182      	sbcs	r2, r0
 80060a4:	4660      	mov	r0, ip
 80060a6:	40c1      	lsrs	r1, r0
 80060a8:	4322      	orrs	r2, r4
 80060aa:	1a5b      	subs	r3, r3, r1
 80060ac:	4649      	mov	r1, r9
 80060ae:	1a8c      	subs	r4, r1, r2
 80060b0:	45a1      	cmp	r9, r4
 80060b2:	4192      	sbcs	r2, r2
 80060b4:	4252      	negs	r2, r2
 80060b6:	1a9b      	subs	r3, r3, r2
 80060b8:	4698      	mov	r8, r3
 80060ba:	4643      	mov	r3, r8
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	d400      	bmi.n	80060c2 <__aeabi_dsub+0xb2>
 80060c0:	e117      	b.n	80062f2 <__aeabi_dsub+0x2e2>
 80060c2:	4643      	mov	r3, r8
 80060c4:	025b      	lsls	r3, r3, #9
 80060c6:	0a5b      	lsrs	r3, r3, #9
 80060c8:	4698      	mov	r8, r3
 80060ca:	4643      	mov	r3, r8
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d100      	bne.n	80060d2 <__aeabi_dsub+0xc2>
 80060d0:	e16c      	b.n	80063ac <__aeabi_dsub+0x39c>
 80060d2:	4640      	mov	r0, r8
 80060d4:	f000 fbba 	bl	800684c <__clzsi2>
 80060d8:	0002      	movs	r2, r0
 80060da:	3a08      	subs	r2, #8
 80060dc:	2120      	movs	r1, #32
 80060de:	0020      	movs	r0, r4
 80060e0:	4643      	mov	r3, r8
 80060e2:	1a89      	subs	r1, r1, r2
 80060e4:	4093      	lsls	r3, r2
 80060e6:	40c8      	lsrs	r0, r1
 80060e8:	4094      	lsls	r4, r2
 80060ea:	4303      	orrs	r3, r0
 80060ec:	4296      	cmp	r6, r2
 80060ee:	dd00      	ble.n	80060f2 <__aeabi_dsub+0xe2>
 80060f0:	e157      	b.n	80063a2 <__aeabi_dsub+0x392>
 80060f2:	1b96      	subs	r6, r2, r6
 80060f4:	1c71      	adds	r1, r6, #1
 80060f6:	291f      	cmp	r1, #31
 80060f8:	dd00      	ble.n	80060fc <__aeabi_dsub+0xec>
 80060fa:	e1cb      	b.n	8006494 <__aeabi_dsub+0x484>
 80060fc:	2220      	movs	r2, #32
 80060fe:	0018      	movs	r0, r3
 8006100:	0026      	movs	r6, r4
 8006102:	1a52      	subs	r2, r2, r1
 8006104:	4094      	lsls	r4, r2
 8006106:	4090      	lsls	r0, r2
 8006108:	40ce      	lsrs	r6, r1
 800610a:	40cb      	lsrs	r3, r1
 800610c:	1e62      	subs	r2, r4, #1
 800610e:	4194      	sbcs	r4, r2
 8006110:	4330      	orrs	r0, r6
 8006112:	4698      	mov	r8, r3
 8006114:	2600      	movs	r6, #0
 8006116:	4304      	orrs	r4, r0
 8006118:	0763      	lsls	r3, r4, #29
 800611a:	d009      	beq.n	8006130 <__aeabi_dsub+0x120>
 800611c:	230f      	movs	r3, #15
 800611e:	4023      	ands	r3, r4
 8006120:	2b04      	cmp	r3, #4
 8006122:	d005      	beq.n	8006130 <__aeabi_dsub+0x120>
 8006124:	1d23      	adds	r3, r4, #4
 8006126:	42a3      	cmp	r3, r4
 8006128:	41a4      	sbcs	r4, r4
 800612a:	4264      	negs	r4, r4
 800612c:	44a0      	add	r8, r4
 800612e:	001c      	movs	r4, r3
 8006130:	4643      	mov	r3, r8
 8006132:	021b      	lsls	r3, r3, #8
 8006134:	d400      	bmi.n	8006138 <__aeabi_dsub+0x128>
 8006136:	e0df      	b.n	80062f8 <__aeabi_dsub+0x2e8>
 8006138:	4b82      	ldr	r3, [pc, #520]	; (8006344 <__aeabi_dsub+0x334>)
 800613a:	3601      	adds	r6, #1
 800613c:	429e      	cmp	r6, r3
 800613e:	d100      	bne.n	8006142 <__aeabi_dsub+0x132>
 8006140:	e0fb      	b.n	800633a <__aeabi_dsub+0x32a>
 8006142:	4642      	mov	r2, r8
 8006144:	4b80      	ldr	r3, [pc, #512]	; (8006348 <__aeabi_dsub+0x338>)
 8006146:	08e4      	lsrs	r4, r4, #3
 8006148:	401a      	ands	r2, r3
 800614a:	0013      	movs	r3, r2
 800614c:	0571      	lsls	r1, r6, #21
 800614e:	0752      	lsls	r2, r2, #29
 8006150:	025b      	lsls	r3, r3, #9
 8006152:	4322      	orrs	r2, r4
 8006154:	0b1b      	lsrs	r3, r3, #12
 8006156:	0d49      	lsrs	r1, r1, #21
 8006158:	0509      	lsls	r1, r1, #20
 800615a:	07ed      	lsls	r5, r5, #31
 800615c:	4319      	orrs	r1, r3
 800615e:	4329      	orrs	r1, r5
 8006160:	0010      	movs	r0, r2
 8006162:	bcf0      	pop	{r4, r5, r6, r7}
 8006164:	46bb      	mov	fp, r7
 8006166:	46b2      	mov	sl, r6
 8006168:	46a9      	mov	r9, r5
 800616a:	46a0      	mov	r8, r4
 800616c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800616e:	1ab4      	subs	r4, r6, r2
 8006170:	46a4      	mov	ip, r4
 8006172:	2c00      	cmp	r4, #0
 8006174:	dd58      	ble.n	8006228 <__aeabi_dsub+0x218>
 8006176:	2a00      	cmp	r2, #0
 8006178:	d100      	bne.n	800617c <__aeabi_dsub+0x16c>
 800617a:	e09e      	b.n	80062ba <__aeabi_dsub+0x2aa>
 800617c:	4a71      	ldr	r2, [pc, #452]	; (8006344 <__aeabi_dsub+0x334>)
 800617e:	4296      	cmp	r6, r2
 8006180:	d100      	bne.n	8006184 <__aeabi_dsub+0x174>
 8006182:	e13b      	b.n	80063fc <__aeabi_dsub+0x3ec>
 8006184:	2280      	movs	r2, #128	; 0x80
 8006186:	0412      	lsls	r2, r2, #16
 8006188:	4311      	orrs	r1, r2
 800618a:	4662      	mov	r2, ip
 800618c:	2a38      	cmp	r2, #56	; 0x38
 800618e:	dd00      	ble.n	8006192 <__aeabi_dsub+0x182>
 8006190:	e0c1      	b.n	8006316 <__aeabi_dsub+0x306>
 8006192:	2a1f      	cmp	r2, #31
 8006194:	dc00      	bgt.n	8006198 <__aeabi_dsub+0x188>
 8006196:	e1bb      	b.n	8006510 <__aeabi_dsub+0x500>
 8006198:	000c      	movs	r4, r1
 800619a:	3a20      	subs	r2, #32
 800619c:	40d4      	lsrs	r4, r2
 800619e:	0022      	movs	r2, r4
 80061a0:	4664      	mov	r4, ip
 80061a2:	2c20      	cmp	r4, #32
 80061a4:	d004      	beq.n	80061b0 <__aeabi_dsub+0x1a0>
 80061a6:	2740      	movs	r7, #64	; 0x40
 80061a8:	1b3f      	subs	r7, r7, r4
 80061aa:	40b9      	lsls	r1, r7
 80061ac:	4308      	orrs	r0, r1
 80061ae:	4680      	mov	r8, r0
 80061b0:	4644      	mov	r4, r8
 80061b2:	1e61      	subs	r1, r4, #1
 80061b4:	418c      	sbcs	r4, r1
 80061b6:	4314      	orrs	r4, r2
 80061b8:	e0b1      	b.n	800631e <__aeabi_dsub+0x30e>
 80061ba:	000c      	movs	r4, r1
 80061bc:	4304      	orrs	r4, r0
 80061be:	d02a      	beq.n	8006216 <__aeabi_dsub+0x206>
 80061c0:	46bb      	mov	fp, r7
 80061c2:	42bd      	cmp	r5, r7
 80061c4:	d02d      	beq.n	8006222 <__aeabi_dsub+0x212>
 80061c6:	4c61      	ldr	r4, [pc, #388]	; (800634c <__aeabi_dsub+0x33c>)
 80061c8:	46a4      	mov	ip, r4
 80061ca:	44b4      	add	ip, r6
 80061cc:	4664      	mov	r4, ip
 80061ce:	2c00      	cmp	r4, #0
 80061d0:	d05c      	beq.n	800628c <__aeabi_dsub+0x27c>
 80061d2:	1b94      	subs	r4, r2, r6
 80061d4:	46a4      	mov	ip, r4
 80061d6:	2e00      	cmp	r6, #0
 80061d8:	d000      	beq.n	80061dc <__aeabi_dsub+0x1cc>
 80061da:	e115      	b.n	8006408 <__aeabi_dsub+0x3f8>
 80061dc:	464d      	mov	r5, r9
 80061de:	431d      	orrs	r5, r3
 80061e0:	d100      	bne.n	80061e4 <__aeabi_dsub+0x1d4>
 80061e2:	e1c3      	b.n	800656c <__aeabi_dsub+0x55c>
 80061e4:	1e65      	subs	r5, r4, #1
 80061e6:	2c01      	cmp	r4, #1
 80061e8:	d100      	bne.n	80061ec <__aeabi_dsub+0x1dc>
 80061ea:	e20c      	b.n	8006606 <__aeabi_dsub+0x5f6>
 80061ec:	4e55      	ldr	r6, [pc, #340]	; (8006344 <__aeabi_dsub+0x334>)
 80061ee:	42b4      	cmp	r4, r6
 80061f0:	d100      	bne.n	80061f4 <__aeabi_dsub+0x1e4>
 80061f2:	e1f8      	b.n	80065e6 <__aeabi_dsub+0x5d6>
 80061f4:	46ac      	mov	ip, r5
 80061f6:	e10e      	b.n	8006416 <__aeabi_dsub+0x406>
 80061f8:	000a      	movs	r2, r1
 80061fa:	4302      	orrs	r2, r0
 80061fc:	d100      	bne.n	8006200 <__aeabi_dsub+0x1f0>
 80061fe:	e136      	b.n	800646e <__aeabi_dsub+0x45e>
 8006200:	0022      	movs	r2, r4
 8006202:	3a01      	subs	r2, #1
 8006204:	2c01      	cmp	r4, #1
 8006206:	d100      	bne.n	800620a <__aeabi_dsub+0x1fa>
 8006208:	e1c6      	b.n	8006598 <__aeabi_dsub+0x588>
 800620a:	4c4e      	ldr	r4, [pc, #312]	; (8006344 <__aeabi_dsub+0x334>)
 800620c:	45a4      	cmp	ip, r4
 800620e:	d100      	bne.n	8006212 <__aeabi_dsub+0x202>
 8006210:	e0f4      	b.n	80063fc <__aeabi_dsub+0x3ec>
 8006212:	4694      	mov	ip, r2
 8006214:	e731      	b.n	800607a <__aeabi_dsub+0x6a>
 8006216:	2401      	movs	r4, #1
 8006218:	4067      	eors	r7, r4
 800621a:	46bb      	mov	fp, r7
 800621c:	42bd      	cmp	r5, r7
 800621e:	d000      	beq.n	8006222 <__aeabi_dsub+0x212>
 8006220:	e71c      	b.n	800605c <__aeabi_dsub+0x4c>
 8006222:	4c4a      	ldr	r4, [pc, #296]	; (800634c <__aeabi_dsub+0x33c>)
 8006224:	46a4      	mov	ip, r4
 8006226:	44b4      	add	ip, r6
 8006228:	4664      	mov	r4, ip
 800622a:	2c00      	cmp	r4, #0
 800622c:	d100      	bne.n	8006230 <__aeabi_dsub+0x220>
 800622e:	e0cf      	b.n	80063d0 <__aeabi_dsub+0x3c0>
 8006230:	1b94      	subs	r4, r2, r6
 8006232:	46a4      	mov	ip, r4
 8006234:	2e00      	cmp	r6, #0
 8006236:	d100      	bne.n	800623a <__aeabi_dsub+0x22a>
 8006238:	e15c      	b.n	80064f4 <__aeabi_dsub+0x4e4>
 800623a:	4e42      	ldr	r6, [pc, #264]	; (8006344 <__aeabi_dsub+0x334>)
 800623c:	42b2      	cmp	r2, r6
 800623e:	d100      	bne.n	8006242 <__aeabi_dsub+0x232>
 8006240:	e1ec      	b.n	800661c <__aeabi_dsub+0x60c>
 8006242:	2680      	movs	r6, #128	; 0x80
 8006244:	0436      	lsls	r6, r6, #16
 8006246:	4333      	orrs	r3, r6
 8006248:	4664      	mov	r4, ip
 800624a:	2c38      	cmp	r4, #56	; 0x38
 800624c:	dd00      	ble.n	8006250 <__aeabi_dsub+0x240>
 800624e:	e1b3      	b.n	80065b8 <__aeabi_dsub+0x5a8>
 8006250:	2c1f      	cmp	r4, #31
 8006252:	dd00      	ble.n	8006256 <__aeabi_dsub+0x246>
 8006254:	e238      	b.n	80066c8 <__aeabi_dsub+0x6b8>
 8006256:	2620      	movs	r6, #32
 8006258:	1b36      	subs	r6, r6, r4
 800625a:	001c      	movs	r4, r3
 800625c:	40b4      	lsls	r4, r6
 800625e:	464f      	mov	r7, r9
 8006260:	46a0      	mov	r8, r4
 8006262:	4664      	mov	r4, ip
 8006264:	40e7      	lsrs	r7, r4
 8006266:	4644      	mov	r4, r8
 8006268:	433c      	orrs	r4, r7
 800626a:	464f      	mov	r7, r9
 800626c:	40b7      	lsls	r7, r6
 800626e:	003e      	movs	r6, r7
 8006270:	1e77      	subs	r7, r6, #1
 8006272:	41be      	sbcs	r6, r7
 8006274:	4334      	orrs	r4, r6
 8006276:	4666      	mov	r6, ip
 8006278:	40f3      	lsrs	r3, r6
 800627a:	18c9      	adds	r1, r1, r3
 800627c:	1824      	adds	r4, r4, r0
 800627e:	4284      	cmp	r4, r0
 8006280:	419b      	sbcs	r3, r3
 8006282:	425b      	negs	r3, r3
 8006284:	4698      	mov	r8, r3
 8006286:	0016      	movs	r6, r2
 8006288:	4488      	add	r8, r1
 800628a:	e04e      	b.n	800632a <__aeabi_dsub+0x31a>
 800628c:	4a30      	ldr	r2, [pc, #192]	; (8006350 <__aeabi_dsub+0x340>)
 800628e:	1c74      	adds	r4, r6, #1
 8006290:	4214      	tst	r4, r2
 8006292:	d000      	beq.n	8006296 <__aeabi_dsub+0x286>
 8006294:	e0d6      	b.n	8006444 <__aeabi_dsub+0x434>
 8006296:	464a      	mov	r2, r9
 8006298:	431a      	orrs	r2, r3
 800629a:	2e00      	cmp	r6, #0
 800629c:	d000      	beq.n	80062a0 <__aeabi_dsub+0x290>
 800629e:	e15b      	b.n	8006558 <__aeabi_dsub+0x548>
 80062a0:	2a00      	cmp	r2, #0
 80062a2:	d100      	bne.n	80062a6 <__aeabi_dsub+0x296>
 80062a4:	e1a5      	b.n	80065f2 <__aeabi_dsub+0x5e2>
 80062a6:	000a      	movs	r2, r1
 80062a8:	4302      	orrs	r2, r0
 80062aa:	d000      	beq.n	80062ae <__aeabi_dsub+0x29e>
 80062ac:	e1bb      	b.n	8006626 <__aeabi_dsub+0x616>
 80062ae:	464a      	mov	r2, r9
 80062b0:	0759      	lsls	r1, r3, #29
 80062b2:	08d2      	lsrs	r2, r2, #3
 80062b4:	430a      	orrs	r2, r1
 80062b6:	08db      	lsrs	r3, r3, #3
 80062b8:	e027      	b.n	800630a <__aeabi_dsub+0x2fa>
 80062ba:	000a      	movs	r2, r1
 80062bc:	4302      	orrs	r2, r0
 80062be:	d100      	bne.n	80062c2 <__aeabi_dsub+0x2b2>
 80062c0:	e174      	b.n	80065ac <__aeabi_dsub+0x59c>
 80062c2:	0022      	movs	r2, r4
 80062c4:	3a01      	subs	r2, #1
 80062c6:	2c01      	cmp	r4, #1
 80062c8:	d005      	beq.n	80062d6 <__aeabi_dsub+0x2c6>
 80062ca:	4c1e      	ldr	r4, [pc, #120]	; (8006344 <__aeabi_dsub+0x334>)
 80062cc:	45a4      	cmp	ip, r4
 80062ce:	d100      	bne.n	80062d2 <__aeabi_dsub+0x2c2>
 80062d0:	e094      	b.n	80063fc <__aeabi_dsub+0x3ec>
 80062d2:	4694      	mov	ip, r2
 80062d4:	e759      	b.n	800618a <__aeabi_dsub+0x17a>
 80062d6:	4448      	add	r0, r9
 80062d8:	4548      	cmp	r0, r9
 80062da:	4192      	sbcs	r2, r2
 80062dc:	185b      	adds	r3, r3, r1
 80062de:	4698      	mov	r8, r3
 80062e0:	0004      	movs	r4, r0
 80062e2:	4252      	negs	r2, r2
 80062e4:	4490      	add	r8, r2
 80062e6:	4643      	mov	r3, r8
 80062e8:	2602      	movs	r6, #2
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	d500      	bpl.n	80062f0 <__aeabi_dsub+0x2e0>
 80062ee:	e0c4      	b.n	800647a <__aeabi_dsub+0x46a>
 80062f0:	3e01      	subs	r6, #1
 80062f2:	0763      	lsls	r3, r4, #29
 80062f4:	d000      	beq.n	80062f8 <__aeabi_dsub+0x2e8>
 80062f6:	e711      	b.n	800611c <__aeabi_dsub+0x10c>
 80062f8:	4643      	mov	r3, r8
 80062fa:	46b4      	mov	ip, r6
 80062fc:	0759      	lsls	r1, r3, #29
 80062fe:	08e2      	lsrs	r2, r4, #3
 8006300:	430a      	orrs	r2, r1
 8006302:	08db      	lsrs	r3, r3, #3
 8006304:	490f      	ldr	r1, [pc, #60]	; (8006344 <__aeabi_dsub+0x334>)
 8006306:	458c      	cmp	ip, r1
 8006308:	d040      	beq.n	800638c <__aeabi_dsub+0x37c>
 800630a:	4661      	mov	r1, ip
 800630c:	031b      	lsls	r3, r3, #12
 800630e:	0549      	lsls	r1, r1, #21
 8006310:	0b1b      	lsrs	r3, r3, #12
 8006312:	0d49      	lsrs	r1, r1, #21
 8006314:	e720      	b.n	8006158 <__aeabi_dsub+0x148>
 8006316:	4301      	orrs	r1, r0
 8006318:	000c      	movs	r4, r1
 800631a:	1e61      	subs	r1, r4, #1
 800631c:	418c      	sbcs	r4, r1
 800631e:	444c      	add	r4, r9
 8006320:	454c      	cmp	r4, r9
 8006322:	4192      	sbcs	r2, r2
 8006324:	4252      	negs	r2, r2
 8006326:	4690      	mov	r8, r2
 8006328:	4498      	add	r8, r3
 800632a:	4643      	mov	r3, r8
 800632c:	021b      	lsls	r3, r3, #8
 800632e:	d5e0      	bpl.n	80062f2 <__aeabi_dsub+0x2e2>
 8006330:	4b04      	ldr	r3, [pc, #16]	; (8006344 <__aeabi_dsub+0x334>)
 8006332:	3601      	adds	r6, #1
 8006334:	429e      	cmp	r6, r3
 8006336:	d000      	beq.n	800633a <__aeabi_dsub+0x32a>
 8006338:	e09f      	b.n	800647a <__aeabi_dsub+0x46a>
 800633a:	0031      	movs	r1, r6
 800633c:	2300      	movs	r3, #0
 800633e:	2200      	movs	r2, #0
 8006340:	e70a      	b.n	8006158 <__aeabi_dsub+0x148>
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	000007ff 	.word	0x000007ff
 8006348:	ff7fffff 	.word	0xff7fffff
 800634c:	fffff801 	.word	0xfffff801
 8006350:	000007fe 	.word	0x000007fe
 8006354:	2a00      	cmp	r2, #0
 8006356:	d100      	bne.n	800635a <__aeabi_dsub+0x34a>
 8006358:	e160      	b.n	800661c <__aeabi_dsub+0x60c>
 800635a:	000a      	movs	r2, r1
 800635c:	4302      	orrs	r2, r0
 800635e:	d04d      	beq.n	80063fc <__aeabi_dsub+0x3ec>
 8006360:	464a      	mov	r2, r9
 8006362:	075c      	lsls	r4, r3, #29
 8006364:	08d2      	lsrs	r2, r2, #3
 8006366:	4322      	orrs	r2, r4
 8006368:	2480      	movs	r4, #128	; 0x80
 800636a:	08db      	lsrs	r3, r3, #3
 800636c:	0324      	lsls	r4, r4, #12
 800636e:	4223      	tst	r3, r4
 8006370:	d007      	beq.n	8006382 <__aeabi_dsub+0x372>
 8006372:	08ce      	lsrs	r6, r1, #3
 8006374:	4226      	tst	r6, r4
 8006376:	d104      	bne.n	8006382 <__aeabi_dsub+0x372>
 8006378:	465d      	mov	r5, fp
 800637a:	0033      	movs	r3, r6
 800637c:	08c2      	lsrs	r2, r0, #3
 800637e:	0749      	lsls	r1, r1, #29
 8006380:	430a      	orrs	r2, r1
 8006382:	0f51      	lsrs	r1, r2, #29
 8006384:	00d2      	lsls	r2, r2, #3
 8006386:	08d2      	lsrs	r2, r2, #3
 8006388:	0749      	lsls	r1, r1, #29
 800638a:	430a      	orrs	r2, r1
 800638c:	0011      	movs	r1, r2
 800638e:	4319      	orrs	r1, r3
 8006390:	d100      	bne.n	8006394 <__aeabi_dsub+0x384>
 8006392:	e1c8      	b.n	8006726 <__aeabi_dsub+0x716>
 8006394:	2180      	movs	r1, #128	; 0x80
 8006396:	0309      	lsls	r1, r1, #12
 8006398:	430b      	orrs	r3, r1
 800639a:	031b      	lsls	r3, r3, #12
 800639c:	49d5      	ldr	r1, [pc, #852]	; (80066f4 <__aeabi_dsub+0x6e4>)
 800639e:	0b1b      	lsrs	r3, r3, #12
 80063a0:	e6da      	b.n	8006158 <__aeabi_dsub+0x148>
 80063a2:	49d5      	ldr	r1, [pc, #852]	; (80066f8 <__aeabi_dsub+0x6e8>)
 80063a4:	1ab6      	subs	r6, r6, r2
 80063a6:	400b      	ands	r3, r1
 80063a8:	4698      	mov	r8, r3
 80063aa:	e6b5      	b.n	8006118 <__aeabi_dsub+0x108>
 80063ac:	0020      	movs	r0, r4
 80063ae:	f000 fa4d 	bl	800684c <__clzsi2>
 80063b2:	0002      	movs	r2, r0
 80063b4:	3218      	adds	r2, #24
 80063b6:	2a1f      	cmp	r2, #31
 80063b8:	dc00      	bgt.n	80063bc <__aeabi_dsub+0x3ac>
 80063ba:	e68f      	b.n	80060dc <__aeabi_dsub+0xcc>
 80063bc:	0023      	movs	r3, r4
 80063be:	3808      	subs	r0, #8
 80063c0:	4083      	lsls	r3, r0
 80063c2:	2400      	movs	r4, #0
 80063c4:	e692      	b.n	80060ec <__aeabi_dsub+0xdc>
 80063c6:	4308      	orrs	r0, r1
 80063c8:	0002      	movs	r2, r0
 80063ca:	1e50      	subs	r0, r2, #1
 80063cc:	4182      	sbcs	r2, r0
 80063ce:	e66d      	b.n	80060ac <__aeabi_dsub+0x9c>
 80063d0:	4cca      	ldr	r4, [pc, #808]	; (80066fc <__aeabi_dsub+0x6ec>)
 80063d2:	1c72      	adds	r2, r6, #1
 80063d4:	4222      	tst	r2, r4
 80063d6:	d000      	beq.n	80063da <__aeabi_dsub+0x3ca>
 80063d8:	e0ad      	b.n	8006536 <__aeabi_dsub+0x526>
 80063da:	464a      	mov	r2, r9
 80063dc:	431a      	orrs	r2, r3
 80063de:	2e00      	cmp	r6, #0
 80063e0:	d1b8      	bne.n	8006354 <__aeabi_dsub+0x344>
 80063e2:	2a00      	cmp	r2, #0
 80063e4:	d100      	bne.n	80063e8 <__aeabi_dsub+0x3d8>
 80063e6:	e158      	b.n	800669a <__aeabi_dsub+0x68a>
 80063e8:	000a      	movs	r2, r1
 80063ea:	4302      	orrs	r2, r0
 80063ec:	d000      	beq.n	80063f0 <__aeabi_dsub+0x3e0>
 80063ee:	e159      	b.n	80066a4 <__aeabi_dsub+0x694>
 80063f0:	464a      	mov	r2, r9
 80063f2:	0759      	lsls	r1, r3, #29
 80063f4:	08d2      	lsrs	r2, r2, #3
 80063f6:	430a      	orrs	r2, r1
 80063f8:	08db      	lsrs	r3, r3, #3
 80063fa:	e786      	b.n	800630a <__aeabi_dsub+0x2fa>
 80063fc:	464a      	mov	r2, r9
 80063fe:	0759      	lsls	r1, r3, #29
 8006400:	08d2      	lsrs	r2, r2, #3
 8006402:	430a      	orrs	r2, r1
 8006404:	08db      	lsrs	r3, r3, #3
 8006406:	e7c1      	b.n	800638c <__aeabi_dsub+0x37c>
 8006408:	4dba      	ldr	r5, [pc, #744]	; (80066f4 <__aeabi_dsub+0x6e4>)
 800640a:	42aa      	cmp	r2, r5
 800640c:	d100      	bne.n	8006410 <__aeabi_dsub+0x400>
 800640e:	e11e      	b.n	800664e <__aeabi_dsub+0x63e>
 8006410:	2580      	movs	r5, #128	; 0x80
 8006412:	042d      	lsls	r5, r5, #16
 8006414:	432b      	orrs	r3, r5
 8006416:	4664      	mov	r4, ip
 8006418:	2c38      	cmp	r4, #56	; 0x38
 800641a:	dc5d      	bgt.n	80064d8 <__aeabi_dsub+0x4c8>
 800641c:	2c1f      	cmp	r4, #31
 800641e:	dd00      	ble.n	8006422 <__aeabi_dsub+0x412>
 8006420:	e0d0      	b.n	80065c4 <__aeabi_dsub+0x5b4>
 8006422:	2520      	movs	r5, #32
 8006424:	4667      	mov	r7, ip
 8006426:	1b2d      	subs	r5, r5, r4
 8006428:	464e      	mov	r6, r9
 800642a:	001c      	movs	r4, r3
 800642c:	40fe      	lsrs	r6, r7
 800642e:	40ac      	lsls	r4, r5
 8006430:	4334      	orrs	r4, r6
 8006432:	464e      	mov	r6, r9
 8006434:	40ae      	lsls	r6, r5
 8006436:	0035      	movs	r5, r6
 8006438:	40fb      	lsrs	r3, r7
 800643a:	1e6e      	subs	r6, r5, #1
 800643c:	41b5      	sbcs	r5, r6
 800643e:	1ac9      	subs	r1, r1, r3
 8006440:	432c      	orrs	r4, r5
 8006442:	e04e      	b.n	80064e2 <__aeabi_dsub+0x4d2>
 8006444:	464a      	mov	r2, r9
 8006446:	1a14      	subs	r4, r2, r0
 8006448:	45a1      	cmp	r9, r4
 800644a:	4192      	sbcs	r2, r2
 800644c:	4252      	negs	r2, r2
 800644e:	4690      	mov	r8, r2
 8006450:	1a5f      	subs	r7, r3, r1
 8006452:	003a      	movs	r2, r7
 8006454:	4647      	mov	r7, r8
 8006456:	1bd2      	subs	r2, r2, r7
 8006458:	4690      	mov	r8, r2
 800645a:	0212      	lsls	r2, r2, #8
 800645c:	d500      	bpl.n	8006460 <__aeabi_dsub+0x450>
 800645e:	e08b      	b.n	8006578 <__aeabi_dsub+0x568>
 8006460:	4642      	mov	r2, r8
 8006462:	4322      	orrs	r2, r4
 8006464:	d000      	beq.n	8006468 <__aeabi_dsub+0x458>
 8006466:	e630      	b.n	80060ca <__aeabi_dsub+0xba>
 8006468:	2300      	movs	r3, #0
 800646a:	2500      	movs	r5, #0
 800646c:	e74d      	b.n	800630a <__aeabi_dsub+0x2fa>
 800646e:	464a      	mov	r2, r9
 8006470:	0759      	lsls	r1, r3, #29
 8006472:	08d2      	lsrs	r2, r2, #3
 8006474:	430a      	orrs	r2, r1
 8006476:	08db      	lsrs	r3, r3, #3
 8006478:	e744      	b.n	8006304 <__aeabi_dsub+0x2f4>
 800647a:	4642      	mov	r2, r8
 800647c:	4b9e      	ldr	r3, [pc, #632]	; (80066f8 <__aeabi_dsub+0x6e8>)
 800647e:	0861      	lsrs	r1, r4, #1
 8006480:	401a      	ands	r2, r3
 8006482:	0013      	movs	r3, r2
 8006484:	2201      	movs	r2, #1
 8006486:	4014      	ands	r4, r2
 8006488:	430c      	orrs	r4, r1
 800648a:	07da      	lsls	r2, r3, #31
 800648c:	085b      	lsrs	r3, r3, #1
 800648e:	4698      	mov	r8, r3
 8006490:	4314      	orrs	r4, r2
 8006492:	e641      	b.n	8006118 <__aeabi_dsub+0x108>
 8006494:	001a      	movs	r2, r3
 8006496:	3e1f      	subs	r6, #31
 8006498:	40f2      	lsrs	r2, r6
 800649a:	0016      	movs	r6, r2
 800649c:	2920      	cmp	r1, #32
 800649e:	d003      	beq.n	80064a8 <__aeabi_dsub+0x498>
 80064a0:	2240      	movs	r2, #64	; 0x40
 80064a2:	1a51      	subs	r1, r2, r1
 80064a4:	408b      	lsls	r3, r1
 80064a6:	431c      	orrs	r4, r3
 80064a8:	1e62      	subs	r2, r4, #1
 80064aa:	4194      	sbcs	r4, r2
 80064ac:	2300      	movs	r3, #0
 80064ae:	4334      	orrs	r4, r6
 80064b0:	4698      	mov	r8, r3
 80064b2:	2600      	movs	r6, #0
 80064b4:	e71d      	b.n	80062f2 <__aeabi_dsub+0x2e2>
 80064b6:	000c      	movs	r4, r1
 80064b8:	3a20      	subs	r2, #32
 80064ba:	40d4      	lsrs	r4, r2
 80064bc:	0022      	movs	r2, r4
 80064be:	4664      	mov	r4, ip
 80064c0:	2c20      	cmp	r4, #32
 80064c2:	d004      	beq.n	80064ce <__aeabi_dsub+0x4be>
 80064c4:	2740      	movs	r7, #64	; 0x40
 80064c6:	1b3f      	subs	r7, r7, r4
 80064c8:	40b9      	lsls	r1, r7
 80064ca:	4308      	orrs	r0, r1
 80064cc:	4680      	mov	r8, r0
 80064ce:	4644      	mov	r4, r8
 80064d0:	1e61      	subs	r1, r4, #1
 80064d2:	418c      	sbcs	r4, r1
 80064d4:	4322      	orrs	r2, r4
 80064d6:	e5e9      	b.n	80060ac <__aeabi_dsub+0x9c>
 80064d8:	464c      	mov	r4, r9
 80064da:	4323      	orrs	r3, r4
 80064dc:	001c      	movs	r4, r3
 80064de:	1e63      	subs	r3, r4, #1
 80064e0:	419c      	sbcs	r4, r3
 80064e2:	1b04      	subs	r4, r0, r4
 80064e4:	42a0      	cmp	r0, r4
 80064e6:	419b      	sbcs	r3, r3
 80064e8:	425b      	negs	r3, r3
 80064ea:	1acb      	subs	r3, r1, r3
 80064ec:	4698      	mov	r8, r3
 80064ee:	465d      	mov	r5, fp
 80064f0:	0016      	movs	r6, r2
 80064f2:	e5e2      	b.n	80060ba <__aeabi_dsub+0xaa>
 80064f4:	464e      	mov	r6, r9
 80064f6:	431e      	orrs	r6, r3
 80064f8:	d100      	bne.n	80064fc <__aeabi_dsub+0x4ec>
 80064fa:	e0ae      	b.n	800665a <__aeabi_dsub+0x64a>
 80064fc:	1e66      	subs	r6, r4, #1
 80064fe:	2c01      	cmp	r4, #1
 8006500:	d100      	bne.n	8006504 <__aeabi_dsub+0x4f4>
 8006502:	e0fd      	b.n	8006700 <__aeabi_dsub+0x6f0>
 8006504:	4f7b      	ldr	r7, [pc, #492]	; (80066f4 <__aeabi_dsub+0x6e4>)
 8006506:	42bc      	cmp	r4, r7
 8006508:	d100      	bne.n	800650c <__aeabi_dsub+0x4fc>
 800650a:	e107      	b.n	800671c <__aeabi_dsub+0x70c>
 800650c:	46b4      	mov	ip, r6
 800650e:	e69b      	b.n	8006248 <__aeabi_dsub+0x238>
 8006510:	4664      	mov	r4, ip
 8006512:	2220      	movs	r2, #32
 8006514:	1b12      	subs	r2, r2, r4
 8006516:	000c      	movs	r4, r1
 8006518:	4094      	lsls	r4, r2
 800651a:	0007      	movs	r7, r0
 800651c:	4090      	lsls	r0, r2
 800651e:	46a0      	mov	r8, r4
 8006520:	4664      	mov	r4, ip
 8006522:	1e42      	subs	r2, r0, #1
 8006524:	4190      	sbcs	r0, r2
 8006526:	4662      	mov	r2, ip
 8006528:	40e7      	lsrs	r7, r4
 800652a:	4644      	mov	r4, r8
 800652c:	40d1      	lsrs	r1, r2
 800652e:	433c      	orrs	r4, r7
 8006530:	4304      	orrs	r4, r0
 8006532:	185b      	adds	r3, r3, r1
 8006534:	e6f3      	b.n	800631e <__aeabi_dsub+0x30e>
 8006536:	4c6f      	ldr	r4, [pc, #444]	; (80066f4 <__aeabi_dsub+0x6e4>)
 8006538:	42a2      	cmp	r2, r4
 800653a:	d100      	bne.n	800653e <__aeabi_dsub+0x52e>
 800653c:	e0d5      	b.n	80066ea <__aeabi_dsub+0x6da>
 800653e:	4448      	add	r0, r9
 8006540:	185b      	adds	r3, r3, r1
 8006542:	4548      	cmp	r0, r9
 8006544:	4189      	sbcs	r1, r1
 8006546:	4249      	negs	r1, r1
 8006548:	185b      	adds	r3, r3, r1
 800654a:	07dc      	lsls	r4, r3, #31
 800654c:	0840      	lsrs	r0, r0, #1
 800654e:	085b      	lsrs	r3, r3, #1
 8006550:	4698      	mov	r8, r3
 8006552:	0016      	movs	r6, r2
 8006554:	4304      	orrs	r4, r0
 8006556:	e6cc      	b.n	80062f2 <__aeabi_dsub+0x2e2>
 8006558:	2a00      	cmp	r2, #0
 800655a:	d000      	beq.n	800655e <__aeabi_dsub+0x54e>
 800655c:	e082      	b.n	8006664 <__aeabi_dsub+0x654>
 800655e:	000a      	movs	r2, r1
 8006560:	4302      	orrs	r2, r0
 8006562:	d140      	bne.n	80065e6 <__aeabi_dsub+0x5d6>
 8006564:	2380      	movs	r3, #128	; 0x80
 8006566:	2500      	movs	r5, #0
 8006568:	031b      	lsls	r3, r3, #12
 800656a:	e713      	b.n	8006394 <__aeabi_dsub+0x384>
 800656c:	074b      	lsls	r3, r1, #29
 800656e:	08c2      	lsrs	r2, r0, #3
 8006570:	431a      	orrs	r2, r3
 8006572:	465d      	mov	r5, fp
 8006574:	08cb      	lsrs	r3, r1, #3
 8006576:	e6c5      	b.n	8006304 <__aeabi_dsub+0x2f4>
 8006578:	464a      	mov	r2, r9
 800657a:	1a84      	subs	r4, r0, r2
 800657c:	42a0      	cmp	r0, r4
 800657e:	4192      	sbcs	r2, r2
 8006580:	1acb      	subs	r3, r1, r3
 8006582:	4252      	negs	r2, r2
 8006584:	1a9b      	subs	r3, r3, r2
 8006586:	4698      	mov	r8, r3
 8006588:	465d      	mov	r5, fp
 800658a:	e59e      	b.n	80060ca <__aeabi_dsub+0xba>
 800658c:	464a      	mov	r2, r9
 800658e:	0759      	lsls	r1, r3, #29
 8006590:	08d2      	lsrs	r2, r2, #3
 8006592:	430a      	orrs	r2, r1
 8006594:	08db      	lsrs	r3, r3, #3
 8006596:	e6f9      	b.n	800638c <__aeabi_dsub+0x37c>
 8006598:	464a      	mov	r2, r9
 800659a:	1a14      	subs	r4, r2, r0
 800659c:	45a1      	cmp	r9, r4
 800659e:	4192      	sbcs	r2, r2
 80065a0:	1a5b      	subs	r3, r3, r1
 80065a2:	4252      	negs	r2, r2
 80065a4:	1a9b      	subs	r3, r3, r2
 80065a6:	4698      	mov	r8, r3
 80065a8:	2601      	movs	r6, #1
 80065aa:	e586      	b.n	80060ba <__aeabi_dsub+0xaa>
 80065ac:	464a      	mov	r2, r9
 80065ae:	0759      	lsls	r1, r3, #29
 80065b0:	08d2      	lsrs	r2, r2, #3
 80065b2:	430a      	orrs	r2, r1
 80065b4:	08db      	lsrs	r3, r3, #3
 80065b6:	e6a5      	b.n	8006304 <__aeabi_dsub+0x2f4>
 80065b8:	464c      	mov	r4, r9
 80065ba:	4323      	orrs	r3, r4
 80065bc:	001c      	movs	r4, r3
 80065be:	1e63      	subs	r3, r4, #1
 80065c0:	419c      	sbcs	r4, r3
 80065c2:	e65b      	b.n	800627c <__aeabi_dsub+0x26c>
 80065c4:	4665      	mov	r5, ip
 80065c6:	001e      	movs	r6, r3
 80065c8:	3d20      	subs	r5, #32
 80065ca:	40ee      	lsrs	r6, r5
 80065cc:	2c20      	cmp	r4, #32
 80065ce:	d005      	beq.n	80065dc <__aeabi_dsub+0x5cc>
 80065d0:	2540      	movs	r5, #64	; 0x40
 80065d2:	1b2d      	subs	r5, r5, r4
 80065d4:	40ab      	lsls	r3, r5
 80065d6:	464c      	mov	r4, r9
 80065d8:	431c      	orrs	r4, r3
 80065da:	46a2      	mov	sl, r4
 80065dc:	4654      	mov	r4, sl
 80065de:	1e63      	subs	r3, r4, #1
 80065e0:	419c      	sbcs	r4, r3
 80065e2:	4334      	orrs	r4, r6
 80065e4:	e77d      	b.n	80064e2 <__aeabi_dsub+0x4d2>
 80065e6:	074b      	lsls	r3, r1, #29
 80065e8:	08c2      	lsrs	r2, r0, #3
 80065ea:	431a      	orrs	r2, r3
 80065ec:	465d      	mov	r5, fp
 80065ee:	08cb      	lsrs	r3, r1, #3
 80065f0:	e6cc      	b.n	800638c <__aeabi_dsub+0x37c>
 80065f2:	000a      	movs	r2, r1
 80065f4:	4302      	orrs	r2, r0
 80065f6:	d100      	bne.n	80065fa <__aeabi_dsub+0x5ea>
 80065f8:	e736      	b.n	8006468 <__aeabi_dsub+0x458>
 80065fa:	074b      	lsls	r3, r1, #29
 80065fc:	08c2      	lsrs	r2, r0, #3
 80065fe:	431a      	orrs	r2, r3
 8006600:	465d      	mov	r5, fp
 8006602:	08cb      	lsrs	r3, r1, #3
 8006604:	e681      	b.n	800630a <__aeabi_dsub+0x2fa>
 8006606:	464a      	mov	r2, r9
 8006608:	1a84      	subs	r4, r0, r2
 800660a:	42a0      	cmp	r0, r4
 800660c:	4192      	sbcs	r2, r2
 800660e:	1acb      	subs	r3, r1, r3
 8006610:	4252      	negs	r2, r2
 8006612:	1a9b      	subs	r3, r3, r2
 8006614:	4698      	mov	r8, r3
 8006616:	465d      	mov	r5, fp
 8006618:	2601      	movs	r6, #1
 800661a:	e54e      	b.n	80060ba <__aeabi_dsub+0xaa>
 800661c:	074b      	lsls	r3, r1, #29
 800661e:	08c2      	lsrs	r2, r0, #3
 8006620:	431a      	orrs	r2, r3
 8006622:	08cb      	lsrs	r3, r1, #3
 8006624:	e6b2      	b.n	800638c <__aeabi_dsub+0x37c>
 8006626:	464a      	mov	r2, r9
 8006628:	1a14      	subs	r4, r2, r0
 800662a:	45a1      	cmp	r9, r4
 800662c:	4192      	sbcs	r2, r2
 800662e:	1a5f      	subs	r7, r3, r1
 8006630:	4252      	negs	r2, r2
 8006632:	1aba      	subs	r2, r7, r2
 8006634:	4690      	mov	r8, r2
 8006636:	0212      	lsls	r2, r2, #8
 8006638:	d56b      	bpl.n	8006712 <__aeabi_dsub+0x702>
 800663a:	464a      	mov	r2, r9
 800663c:	1a84      	subs	r4, r0, r2
 800663e:	42a0      	cmp	r0, r4
 8006640:	4192      	sbcs	r2, r2
 8006642:	1acb      	subs	r3, r1, r3
 8006644:	4252      	negs	r2, r2
 8006646:	1a9b      	subs	r3, r3, r2
 8006648:	4698      	mov	r8, r3
 800664a:	465d      	mov	r5, fp
 800664c:	e564      	b.n	8006118 <__aeabi_dsub+0x108>
 800664e:	074b      	lsls	r3, r1, #29
 8006650:	08c2      	lsrs	r2, r0, #3
 8006652:	431a      	orrs	r2, r3
 8006654:	465d      	mov	r5, fp
 8006656:	08cb      	lsrs	r3, r1, #3
 8006658:	e698      	b.n	800638c <__aeabi_dsub+0x37c>
 800665a:	074b      	lsls	r3, r1, #29
 800665c:	08c2      	lsrs	r2, r0, #3
 800665e:	431a      	orrs	r2, r3
 8006660:	08cb      	lsrs	r3, r1, #3
 8006662:	e64f      	b.n	8006304 <__aeabi_dsub+0x2f4>
 8006664:	000a      	movs	r2, r1
 8006666:	4302      	orrs	r2, r0
 8006668:	d090      	beq.n	800658c <__aeabi_dsub+0x57c>
 800666a:	464a      	mov	r2, r9
 800666c:	075c      	lsls	r4, r3, #29
 800666e:	08d2      	lsrs	r2, r2, #3
 8006670:	4314      	orrs	r4, r2
 8006672:	2280      	movs	r2, #128	; 0x80
 8006674:	08db      	lsrs	r3, r3, #3
 8006676:	0312      	lsls	r2, r2, #12
 8006678:	4213      	tst	r3, r2
 800667a:	d008      	beq.n	800668e <__aeabi_dsub+0x67e>
 800667c:	08ce      	lsrs	r6, r1, #3
 800667e:	4216      	tst	r6, r2
 8006680:	d105      	bne.n	800668e <__aeabi_dsub+0x67e>
 8006682:	08c0      	lsrs	r0, r0, #3
 8006684:	0749      	lsls	r1, r1, #29
 8006686:	4308      	orrs	r0, r1
 8006688:	0004      	movs	r4, r0
 800668a:	465d      	mov	r5, fp
 800668c:	0033      	movs	r3, r6
 800668e:	0f61      	lsrs	r1, r4, #29
 8006690:	00e2      	lsls	r2, r4, #3
 8006692:	0749      	lsls	r1, r1, #29
 8006694:	08d2      	lsrs	r2, r2, #3
 8006696:	430a      	orrs	r2, r1
 8006698:	e678      	b.n	800638c <__aeabi_dsub+0x37c>
 800669a:	074b      	lsls	r3, r1, #29
 800669c:	08c2      	lsrs	r2, r0, #3
 800669e:	431a      	orrs	r2, r3
 80066a0:	08cb      	lsrs	r3, r1, #3
 80066a2:	e632      	b.n	800630a <__aeabi_dsub+0x2fa>
 80066a4:	4448      	add	r0, r9
 80066a6:	185b      	adds	r3, r3, r1
 80066a8:	4548      	cmp	r0, r9
 80066aa:	4192      	sbcs	r2, r2
 80066ac:	4698      	mov	r8, r3
 80066ae:	4252      	negs	r2, r2
 80066b0:	4490      	add	r8, r2
 80066b2:	4643      	mov	r3, r8
 80066b4:	0004      	movs	r4, r0
 80066b6:	021b      	lsls	r3, r3, #8
 80066b8:	d400      	bmi.n	80066bc <__aeabi_dsub+0x6ac>
 80066ba:	e61a      	b.n	80062f2 <__aeabi_dsub+0x2e2>
 80066bc:	4642      	mov	r2, r8
 80066be:	4b0e      	ldr	r3, [pc, #56]	; (80066f8 <__aeabi_dsub+0x6e8>)
 80066c0:	2601      	movs	r6, #1
 80066c2:	401a      	ands	r2, r3
 80066c4:	4690      	mov	r8, r2
 80066c6:	e614      	b.n	80062f2 <__aeabi_dsub+0x2e2>
 80066c8:	4666      	mov	r6, ip
 80066ca:	001f      	movs	r7, r3
 80066cc:	3e20      	subs	r6, #32
 80066ce:	40f7      	lsrs	r7, r6
 80066d0:	2c20      	cmp	r4, #32
 80066d2:	d005      	beq.n	80066e0 <__aeabi_dsub+0x6d0>
 80066d4:	2640      	movs	r6, #64	; 0x40
 80066d6:	1b36      	subs	r6, r6, r4
 80066d8:	40b3      	lsls	r3, r6
 80066da:	464c      	mov	r4, r9
 80066dc:	431c      	orrs	r4, r3
 80066de:	46a2      	mov	sl, r4
 80066e0:	4654      	mov	r4, sl
 80066e2:	1e63      	subs	r3, r4, #1
 80066e4:	419c      	sbcs	r4, r3
 80066e6:	433c      	orrs	r4, r7
 80066e8:	e5c8      	b.n	800627c <__aeabi_dsub+0x26c>
 80066ea:	0011      	movs	r1, r2
 80066ec:	2300      	movs	r3, #0
 80066ee:	2200      	movs	r2, #0
 80066f0:	e532      	b.n	8006158 <__aeabi_dsub+0x148>
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	000007ff 	.word	0x000007ff
 80066f8:	ff7fffff 	.word	0xff7fffff
 80066fc:	000007fe 	.word	0x000007fe
 8006700:	464a      	mov	r2, r9
 8006702:	1814      	adds	r4, r2, r0
 8006704:	4284      	cmp	r4, r0
 8006706:	4192      	sbcs	r2, r2
 8006708:	185b      	adds	r3, r3, r1
 800670a:	4698      	mov	r8, r3
 800670c:	4252      	negs	r2, r2
 800670e:	4490      	add	r8, r2
 8006710:	e5e9      	b.n	80062e6 <__aeabi_dsub+0x2d6>
 8006712:	4642      	mov	r2, r8
 8006714:	4322      	orrs	r2, r4
 8006716:	d100      	bne.n	800671a <__aeabi_dsub+0x70a>
 8006718:	e6a6      	b.n	8006468 <__aeabi_dsub+0x458>
 800671a:	e5ea      	b.n	80062f2 <__aeabi_dsub+0x2e2>
 800671c:	074b      	lsls	r3, r1, #29
 800671e:	08c2      	lsrs	r2, r0, #3
 8006720:	431a      	orrs	r2, r3
 8006722:	08cb      	lsrs	r3, r1, #3
 8006724:	e632      	b.n	800638c <__aeabi_dsub+0x37c>
 8006726:	2200      	movs	r2, #0
 8006728:	4901      	ldr	r1, [pc, #4]	; (8006730 <__aeabi_dsub+0x720>)
 800672a:	0013      	movs	r3, r2
 800672c:	e514      	b.n	8006158 <__aeabi_dsub+0x148>
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	000007ff 	.word	0x000007ff

08006734 <__aeabi_d2iz>:
 8006734:	000a      	movs	r2, r1
 8006736:	b530      	push	{r4, r5, lr}
 8006738:	4c13      	ldr	r4, [pc, #76]	; (8006788 <__aeabi_d2iz+0x54>)
 800673a:	0053      	lsls	r3, r2, #1
 800673c:	0309      	lsls	r1, r1, #12
 800673e:	0005      	movs	r5, r0
 8006740:	0b09      	lsrs	r1, r1, #12
 8006742:	2000      	movs	r0, #0
 8006744:	0d5b      	lsrs	r3, r3, #21
 8006746:	0fd2      	lsrs	r2, r2, #31
 8006748:	42a3      	cmp	r3, r4
 800674a:	dd04      	ble.n	8006756 <__aeabi_d2iz+0x22>
 800674c:	480f      	ldr	r0, [pc, #60]	; (800678c <__aeabi_d2iz+0x58>)
 800674e:	4283      	cmp	r3, r0
 8006750:	dd02      	ble.n	8006758 <__aeabi_d2iz+0x24>
 8006752:	4b0f      	ldr	r3, [pc, #60]	; (8006790 <__aeabi_d2iz+0x5c>)
 8006754:	18d0      	adds	r0, r2, r3
 8006756:	bd30      	pop	{r4, r5, pc}
 8006758:	2080      	movs	r0, #128	; 0x80
 800675a:	0340      	lsls	r0, r0, #13
 800675c:	4301      	orrs	r1, r0
 800675e:	480d      	ldr	r0, [pc, #52]	; (8006794 <__aeabi_d2iz+0x60>)
 8006760:	1ac0      	subs	r0, r0, r3
 8006762:	281f      	cmp	r0, #31
 8006764:	dd08      	ble.n	8006778 <__aeabi_d2iz+0x44>
 8006766:	480c      	ldr	r0, [pc, #48]	; (8006798 <__aeabi_d2iz+0x64>)
 8006768:	1ac3      	subs	r3, r0, r3
 800676a:	40d9      	lsrs	r1, r3
 800676c:	000b      	movs	r3, r1
 800676e:	4258      	negs	r0, r3
 8006770:	2a00      	cmp	r2, #0
 8006772:	d1f0      	bne.n	8006756 <__aeabi_d2iz+0x22>
 8006774:	0018      	movs	r0, r3
 8006776:	e7ee      	b.n	8006756 <__aeabi_d2iz+0x22>
 8006778:	4c08      	ldr	r4, [pc, #32]	; (800679c <__aeabi_d2iz+0x68>)
 800677a:	40c5      	lsrs	r5, r0
 800677c:	46a4      	mov	ip, r4
 800677e:	4463      	add	r3, ip
 8006780:	4099      	lsls	r1, r3
 8006782:	000b      	movs	r3, r1
 8006784:	432b      	orrs	r3, r5
 8006786:	e7f2      	b.n	800676e <__aeabi_d2iz+0x3a>
 8006788:	000003fe 	.word	0x000003fe
 800678c:	0000041d 	.word	0x0000041d
 8006790:	7fffffff 	.word	0x7fffffff
 8006794:	00000433 	.word	0x00000433
 8006798:	00000413 	.word	0x00000413
 800679c:	fffffbed 	.word	0xfffffbed

080067a0 <__aeabi_i2d>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d016      	beq.n	80067d4 <__aeabi_i2d+0x34>
 80067a6:	17c3      	asrs	r3, r0, #31
 80067a8:	18c5      	adds	r5, r0, r3
 80067aa:	405d      	eors	r5, r3
 80067ac:	0fc4      	lsrs	r4, r0, #31
 80067ae:	0028      	movs	r0, r5
 80067b0:	f000 f84c 	bl	800684c <__clzsi2>
 80067b4:	4a11      	ldr	r2, [pc, #68]	; (80067fc <__aeabi_i2d+0x5c>)
 80067b6:	1a12      	subs	r2, r2, r0
 80067b8:	280a      	cmp	r0, #10
 80067ba:	dc16      	bgt.n	80067ea <__aeabi_i2d+0x4a>
 80067bc:	0003      	movs	r3, r0
 80067be:	002e      	movs	r6, r5
 80067c0:	3315      	adds	r3, #21
 80067c2:	409e      	lsls	r6, r3
 80067c4:	230b      	movs	r3, #11
 80067c6:	1a18      	subs	r0, r3, r0
 80067c8:	40c5      	lsrs	r5, r0
 80067ca:	0553      	lsls	r3, r2, #21
 80067cc:	032d      	lsls	r5, r5, #12
 80067ce:	0b2d      	lsrs	r5, r5, #12
 80067d0:	0d5b      	lsrs	r3, r3, #21
 80067d2:	e003      	b.n	80067dc <__aeabi_i2d+0x3c>
 80067d4:	2400      	movs	r4, #0
 80067d6:	2300      	movs	r3, #0
 80067d8:	2500      	movs	r5, #0
 80067da:	2600      	movs	r6, #0
 80067dc:	051b      	lsls	r3, r3, #20
 80067de:	432b      	orrs	r3, r5
 80067e0:	07e4      	lsls	r4, r4, #31
 80067e2:	4323      	orrs	r3, r4
 80067e4:	0030      	movs	r0, r6
 80067e6:	0019      	movs	r1, r3
 80067e8:	bd70      	pop	{r4, r5, r6, pc}
 80067ea:	380b      	subs	r0, #11
 80067ec:	4085      	lsls	r5, r0
 80067ee:	0553      	lsls	r3, r2, #21
 80067f0:	032d      	lsls	r5, r5, #12
 80067f2:	2600      	movs	r6, #0
 80067f4:	0b2d      	lsrs	r5, r5, #12
 80067f6:	0d5b      	lsrs	r3, r3, #21
 80067f8:	e7f0      	b.n	80067dc <__aeabi_i2d+0x3c>
 80067fa:	46c0      	nop			; (mov r8, r8)
 80067fc:	0000041e 	.word	0x0000041e

08006800 <__aeabi_ui2d>:
 8006800:	b510      	push	{r4, lr}
 8006802:	1e04      	subs	r4, r0, #0
 8006804:	d010      	beq.n	8006828 <__aeabi_ui2d+0x28>
 8006806:	f000 f821 	bl	800684c <__clzsi2>
 800680a:	4b0f      	ldr	r3, [pc, #60]	; (8006848 <__aeabi_ui2d+0x48>)
 800680c:	1a1b      	subs	r3, r3, r0
 800680e:	280a      	cmp	r0, #10
 8006810:	dc11      	bgt.n	8006836 <__aeabi_ui2d+0x36>
 8006812:	220b      	movs	r2, #11
 8006814:	0021      	movs	r1, r4
 8006816:	1a12      	subs	r2, r2, r0
 8006818:	40d1      	lsrs	r1, r2
 800681a:	3015      	adds	r0, #21
 800681c:	030a      	lsls	r2, r1, #12
 800681e:	055b      	lsls	r3, r3, #21
 8006820:	4084      	lsls	r4, r0
 8006822:	0b12      	lsrs	r2, r2, #12
 8006824:	0d5b      	lsrs	r3, r3, #21
 8006826:	e001      	b.n	800682c <__aeabi_ui2d+0x2c>
 8006828:	2300      	movs	r3, #0
 800682a:	2200      	movs	r2, #0
 800682c:	051b      	lsls	r3, r3, #20
 800682e:	4313      	orrs	r3, r2
 8006830:	0020      	movs	r0, r4
 8006832:	0019      	movs	r1, r3
 8006834:	bd10      	pop	{r4, pc}
 8006836:	0022      	movs	r2, r4
 8006838:	380b      	subs	r0, #11
 800683a:	4082      	lsls	r2, r0
 800683c:	055b      	lsls	r3, r3, #21
 800683e:	0312      	lsls	r2, r2, #12
 8006840:	2400      	movs	r4, #0
 8006842:	0b12      	lsrs	r2, r2, #12
 8006844:	0d5b      	lsrs	r3, r3, #21
 8006846:	e7f1      	b.n	800682c <__aeabi_ui2d+0x2c>
 8006848:	0000041e 	.word	0x0000041e

0800684c <__clzsi2>:
 800684c:	211c      	movs	r1, #28
 800684e:	2301      	movs	r3, #1
 8006850:	041b      	lsls	r3, r3, #16
 8006852:	4298      	cmp	r0, r3
 8006854:	d301      	bcc.n	800685a <__clzsi2+0xe>
 8006856:	0c00      	lsrs	r0, r0, #16
 8006858:	3910      	subs	r1, #16
 800685a:	0a1b      	lsrs	r3, r3, #8
 800685c:	4298      	cmp	r0, r3
 800685e:	d301      	bcc.n	8006864 <__clzsi2+0x18>
 8006860:	0a00      	lsrs	r0, r0, #8
 8006862:	3908      	subs	r1, #8
 8006864:	091b      	lsrs	r3, r3, #4
 8006866:	4298      	cmp	r0, r3
 8006868:	d301      	bcc.n	800686e <__clzsi2+0x22>
 800686a:	0900      	lsrs	r0, r0, #4
 800686c:	3904      	subs	r1, #4
 800686e:	a202      	add	r2, pc, #8	; (adr r2, 8006878 <__clzsi2+0x2c>)
 8006870:	5c10      	ldrb	r0, [r2, r0]
 8006872:	1840      	adds	r0, r0, r1
 8006874:	4770      	bx	lr
 8006876:	46c0      	nop			; (mov r8, r8)
 8006878:	02020304 	.word	0x02020304
 800687c:	01010101 	.word	0x01010101
	...
 8006888:	736e6553 	.word	0x736e6553
 800688c:	5320726f 	.word	0x5320726f
 8006890:	74726174 	.word	0x74726174
 8006894:	0000000a 	.word	0x0000000a
 8006898:	00696e66 	.word	0x00696e66
 800689c:	2b696e66 	.word	0x2b696e66
 80068a0:	00000000 	.word	0x00000000
 80068a4:	006e616e 	.word	0x006e616e
 80068a8:	2d696e66 	.word	0x2d696e66
 80068ac:	00000000 	.word	0x00000000
 80068b0:	08004d3e 	.word	0x08004d3e
 80068b4:	08004d54 	.word	0x08004d54
 80068b8:	08004d54 	.word	0x08004d54
 80068bc:	08004d54 	.word	0x08004d54
 80068c0:	08004d54 	.word	0x08004d54
 80068c4:	08004d54 	.word	0x08004d54
 80068c8:	08004d54 	.word	0x08004d54
 80068cc:	08004d54 	.word	0x08004d54
 80068d0:	08004d54 	.word	0x08004d54
 80068d4:	08004d54 	.word	0x08004d54
 80068d8:	08004d54 	.word	0x08004d54
 80068dc:	08004d54 	.word	0x08004d54
 80068e0:	08004d54 	.word	0x08004d54
 80068e4:	08004d54 	.word	0x08004d54
 80068e8:	08004d54 	.word	0x08004d54
 80068ec:	08004d54 	.word	0x08004d54
 80068f0:	08004d54 	.word	0x08004d54
 80068f4:	08004d54 	.word	0x08004d54
 80068f8:	08004d54 	.word	0x08004d54
 80068fc:	08004d54 	.word	0x08004d54
 8006900:	08004d54 	.word	0x08004d54
 8006904:	08004d54 	.word	0x08004d54
 8006908:	08004d54 	.word	0x08004d54
 800690c:	08004d54 	.word	0x08004d54
 8006910:	08004d54 	.word	0x08004d54
 8006914:	08004d54 	.word	0x08004d54
 8006918:	08004d54 	.word	0x08004d54
 800691c:	08004d54 	.word	0x08004d54
 8006920:	08004d54 	.word	0x08004d54
 8006924:	08004d54 	.word	0x08004d54
 8006928:	08004d54 	.word	0x08004d54
 800692c:	08004d54 	.word	0x08004d54
 8006930:	08004d54 	.word	0x08004d54
 8006934:	08004b70 	.word	0x08004b70
 8006938:	08004d54 	.word	0x08004d54
 800693c:	08004d54 	.word	0x08004d54
 8006940:	08004d54 	.word	0x08004d54
 8006944:	08004d54 	.word	0x08004d54
 8006948:	08004d54 	.word	0x08004d54
 800694c:	08004d54 	.word	0x08004d54
 8006950:	08004d54 	.word	0x08004d54
 8006954:	08004d54 	.word	0x08004d54
 8006958:	08004d54 	.word	0x08004d54
 800695c:	08004d54 	.word	0x08004d54
 8006960:	08004d54 	.word	0x08004d54
 8006964:	08004d54 	.word	0x08004d54
 8006968:	08004d54 	.word	0x08004d54
 800696c:	08004d54 	.word	0x08004d54
 8006970:	08004d54 	.word	0x08004d54
 8006974:	08004d54 	.word	0x08004d54
 8006978:	08004d54 	.word	0x08004d54
 800697c:	08004a14 	.word	0x08004a14
 8006980:	08004d54 	.word	0x08004d54
 8006984:	08004d54 	.word	0x08004d54
 8006988:	08004d54 	.word	0x08004d54
 800698c:	08004d54 	.word	0x08004d54
 8006990:	08004d54 	.word	0x08004d54
 8006994:	08004d54 	.word	0x08004d54
 8006998:	08004d54 	.word	0x08004d54
 800699c:	08004d54 	.word	0x08004d54
 80069a0:	08004d54 	.word	0x08004d54
 80069a4:	08004a14 	.word	0x08004a14
 80069a8:	08004bb0 	.word	0x08004bb0
 80069ac:	08004a14 	.word	0x08004a14
 80069b0:	08004d54 	.word	0x08004d54
 80069b4:	08004b70 	.word	0x08004b70
 80069b8:	08004d54 	.word	0x08004d54
 80069bc:	08004d54 	.word	0x08004d54
 80069c0:	08004a14 	.word	0x08004a14
 80069c4:	08004d54 	.word	0x08004d54
 80069c8:	08004d54 	.word	0x08004d54
 80069cc:	08004d54 	.word	0x08004d54
 80069d0:	08004d54 	.word	0x08004d54
 80069d4:	08004d54 	.word	0x08004d54
 80069d8:	08004a14 	.word	0x08004a14
 80069dc:	08004d08 	.word	0x08004d08
 80069e0:	08004d54 	.word	0x08004d54
 80069e4:	08004d54 	.word	0x08004d54
 80069e8:	08004c24 	.word	0x08004c24
 80069ec:	08004d54 	.word	0x08004d54
 80069f0:	08004a14 	.word	0x08004a14
 80069f4:	08004d54 	.word	0x08004d54
 80069f8:	08004d54 	.word	0x08004d54
 80069fc:	08004a14 	.word	0x08004a14
 8006a00:	08004946 	.word	0x08004946
 8006a04:	080048c0 	.word	0x080048c0
 8006a08:	080048c0 	.word	0x080048c0
 8006a0c:	08004950 	.word	0x08004950
 8006a10:	080048c0 	.word	0x080048c0
 8006a14:	080048c0 	.word	0x080048c0
 8006a18:	080048c0 	.word	0x080048c0
 8006a1c:	080048c0 	.word	0x080048c0
 8006a20:	080048c0 	.word	0x080048c0
 8006a24:	080048c0 	.word	0x080048c0
 8006a28:	080048c0 	.word	0x080048c0
 8006a2c:	0800493c 	.word	0x0800493c
 8006a30:	080048c0 	.word	0x080048c0
 8006a34:	08004932 	.word	0x08004932
 8006a38:	080048c0 	.word	0x080048c0
 8006a3c:	080048c0 	.word	0x080048c0
 8006a40:	08004914 	.word	0x08004914
 8006a44:	00000000 	.word	0x00000000

08006a48 <pow10.4126>:
 8006a48:	00000000 3ff00000 00000000 40240000     .......?......$@
 8006a58:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8006a68:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8006a78:	00000000 412e8480 00000000 416312d0     .......A......cA
 8006a88:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8006a98:	204d4652 20495053 74697257 00000065     RFM SPI Write...
 8006aa8:	656d6954 2074756f 25207325 0a583830     Timeout %s %08X.
 8006ab8:	00000000 20435452 0a525349 00000000     ....RTC ISR.....
 8006ac8:	08005ccc 08005bfa 08005bfa 08005bf6     .\...[...[...[..
 8006ad8:	08005c00 08005c00 08005eec 08005bf6     .\...\...^...[..
 8006ae8:	08005c00 08005eec 08005c00 08005bf6     .\...^...\...[..
 8006af8:	08005e8a 08005e8a 08005e8a 08005f56     .^...^...^..V_..
