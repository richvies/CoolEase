
Hub/build/Hub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018d0  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .preinit_array 00000000  080018d0  080018d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .init_array   00000000  080018d0  080018d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000000  080018d0  080018d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000000c  20000000  080018d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000184  2000000c  080018dc  0002000c  2**2
                  ALLOC
  6 .debug_info   00009a7e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001b9d  00000000  00000000  00029a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_loc    00003691  00000000  00000000  0002b627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 000003f8  00000000  00000000  0002ecb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_ranges 000004f8  00000000  00000000  0002f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  00004d32  00000000  00000000  0002f5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   000044fd  00000000  00000000  000342da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00010868  00000000  00000000  000387d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .comment      0000004c  00000000  00000000  0004903f  2**0
                  CONTENTS, READONLY
 15 .ARM.attributes 0000002a  00000000  00000000  0004908b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000a08  00000000  00000000  000490b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 20 00 20 f5 0f 00 08 f3 0f 00 08 f1 0f 00 08     . . ............
	...
 800002c:	f3 0f 00 08 00 00 00 00 00 00 00 00 f3 0f 00 08     ................
 800003c:	f3 0f 00 08 f1 0f 00 08 f1 0f 00 08 f1 0f 00 08     ................
 800004c:	f1 0f 00 08 f1 0f 00 08 f1 0f 00 08 f1 0f 00 08     ................
 800005c:	f1 0f 00 08 f1 0f 00 08 f1 0f 00 08 f1 0f 00 08     ................
 800006c:	f1 0f 00 08 f1 0f 00 08 f1 0f 00 08 f1 0f 00 08     ................
 800007c:	f1 0f 00 08 f1 0f 00 08 f1 0f 00 08 f1 0f 00 08     ................
 800008c:	f1 0f 00 08 f1 0f 00 08 f1 0f 00 08 f1 0f 00 08     ................
 800009c:	f1 0f 00 08 f1 0f 00 08 f1 0f 00 08 f1 0f 00 08     ................
 80000ac:	f1 0f 00 08 f1 0f 00 08 f1 0f 00 08 f1 0f 00 08     ................
 80000bc:	f1 0f 00 08                                         ....

080000c0 <hid_control_request>:
			void (**complete)(usbd_device *, struct usb_setup_data *))
{
	(void)complete;
	(void)dev;

	if((req->bmRequestType != 0x81) ||
 80000c0:	7808      	ldrb	r0, [r1, #0]
 80000c2:	2881      	cmp	r0, #129	; 0x81
 80000c4:	d110      	bne.n	80000e8 <hid_control_request+0x28>
	   (req->bRequest != USB_REQ_GET_DESCRIPTOR) ||
 80000c6:	7848      	ldrb	r0, [r1, #1]
	if((req->bmRequestType != 0x81) ||
 80000c8:	2806      	cmp	r0, #6
 80000ca:	d10f      	bne.n	80000ec <hid_control_request+0x2c>
	   (req->wValue != 0x2200))
 80000cc:	7888      	ldrb	r0, [r1, #2]
 80000ce:	78c9      	ldrb	r1, [r1, #3]
 80000d0:	0209      	lsls	r1, r1, #8
 80000d2:	4301      	orrs	r1, r0
	   (req->bRequest != USB_REQ_GET_DESCRIPTOR) ||
 80000d4:	2088      	movs	r0, #136	; 0x88
 80000d6:	0180      	lsls	r0, r0, #6
 80000d8:	4281      	cmp	r1, r0
 80000da:	d109      	bne.n	80000f0 <hid_control_request+0x30>
		return USBD_REQ_NOTSUPP;

	/* Handle the HID report descriptor. */
	*buf = (uint8_t *)hid_report_descriptor;
 80000dc:	4905      	ldr	r1, [pc, #20]	; (80000f4 <hid_control_request+0x34>)
 80000de:	6011      	str	r1, [r2, #0]
	*len = sizeof(hid_report_descriptor);
 80000e0:	2219      	movs	r2, #25
 80000e2:	801a      	strh	r2, [r3, #0]

	return USBD_REQ_HANDLED;
 80000e4:	2001      	movs	r0, #1
 80000e6:	e000      	b.n	80000ea <hid_control_request+0x2a>
		return USBD_REQ_NOTSUPP;
 80000e8:	2000      	movs	r0, #0
}
 80000ea:	4770      	bx	lr
		return USBD_REQ_NOTSUPP;
 80000ec:	2000      	movs	r0, #0
 80000ee:	e7fc      	b.n	80000ea <hid_control_request+0x2a>
 80000f0:	2000      	movs	r0, #0
 80000f2:	e7fa      	b.n	80000ea <hid_control_request+0x2a>
 80000f4:	08001860 	.word	0x08001860

080000f8 <hid_in_callback>:
uint8_t const hid_in_report_buf[64] = "In Report";
uint8_t const hid_out_report_buf[64];

/** @brief HID IN Callback */
void hid_in_callback(usbd_device *usbd_dev, uint8_t ea);
void hid_in_callback(usbd_device *usbd_dev, uint8_t ea){
 80000f8:	b510      	push	{r4, lr}
    usbd_ep_write_packet(usbd_dev, ea, hid_out_report_buf, sizeof(hid_out_report_buf) / sizeof(uint8_t));
 80000fa:	2340      	movs	r3, #64	; 0x40
 80000fc:	4a01      	ldr	r2, [pc, #4]	; (8000104 <hid_in_callback+0xc>)
 80000fe:	f000 fa08 	bl	8000512 <usbd_ep_write_packet>
}
 8000102:	bd10      	pop	{r4, pc}
 8000104:	08001820 	.word	0x08001820

08000108 <hid_out_callback>:

/** @brief HID OUT Callback */
void hid_out_callback(usbd_device *usbd_dev, uint8_t ea);
void hid_out_callback(usbd_device *usbd_dev, uint8_t ea){
 8000108:	b570      	push	{r4, r5, r6, lr}
 800010a:	0004      	movs	r4, r0
 800010c:	000d      	movs	r5, r1
    usbd_ep_read_packet(usbd_dev, ea, hid_out_report_buf, sizeof(hid_out_report_buf) / sizeof(uint8_t));
 800010e:	4e06      	ldr	r6, [pc, #24]	; (8000128 <hid_out_callback+0x20>)
 8000110:	2340      	movs	r3, #64	; 0x40
 8000112:	0032      	movs	r2, r6
 8000114:	f000 fa04 	bl	8000520 <usbd_ep_read_packet>
    usbd_ep_write_packet(usbd_dev, ea, hid_out_report_buf, sizeof(hid_out_report_buf) / sizeof(uint8_t));
 8000118:	2340      	movs	r3, #64	; 0x40
 800011a:	0032      	movs	r2, r6
 800011c:	0029      	movs	r1, r5
 800011e:	0020      	movs	r0, r4
 8000120:	f000 f9f7 	bl	8000512 <usbd_ep_write_packet>
}
 8000124:	bd70      	pop	{r4, r5, r6, pc}
 8000126:	46c0      	nop			; (mov r8, r8)
 8000128:	08001820 	.word	0x08001820

0800012c <hid_set_config>:
/** @brief Configuration callback to setup device as HID 
 * 
 * Sets up HID endpoints 
*/
static void hid_set_config(usbd_device *dev, uint16_t wValue)
{
 800012c:	b510      	push	{r4, lr}
 800012e:	b082      	sub	sp, #8
 8000130:	0004      	movs	r4, r0
	(void)wValue;
	(void)dev;

	usbd_ep_setup(dev, ENDPOINT_HID_IN, USB_ENDPOINT_ATTR_INTERRUPT, 64, hid_in_callback);
 8000132:	4b0b      	ldr	r3, [pc, #44]	; (8000160 <hid_set_config+0x34>)
 8000134:	9300      	str	r3, [sp, #0]
 8000136:	2340      	movs	r3, #64	; 0x40
 8000138:	2203      	movs	r2, #3
 800013a:	2181      	movs	r1, #129	; 0x81
 800013c:	f000 f9c9 	bl	80004d2 <usbd_ep_setup>
    usbd_ep_setup(dev, ENDPOINT_HID_OUT, USB_ENDPOINT_ATTR_INTERRUPT, 64, hid_out_callback);
 8000140:	4b08      	ldr	r3, [pc, #32]	; (8000164 <hid_set_config+0x38>)
 8000142:	9300      	str	r3, [sp, #0]
 8000144:	2340      	movs	r3, #64	; 0x40
 8000146:	2203      	movs	r2, #3
 8000148:	2101      	movs	r1, #1
 800014a:	0020      	movs	r0, r4
 800014c:	f000 f9c1 	bl	80004d2 <usbd_ep_setup>

	usbd_register_control_callback(
 8000150:	4b05      	ldr	r3, [pc, #20]	; (8000168 <hid_set_config+0x3c>)
 8000152:	227f      	movs	r2, #127	; 0x7f
 8000154:	2101      	movs	r1, #1
 8000156:	0020      	movs	r0, r4
 8000158:	f000 fab6 	bl	80006c8 <usbd_register_control_callback>
	// systick_set_clocksource(STK_CSR_CLKSOURCE_AHB_DIV8);
	// /* SysTick interrupt every N clock pulses: set reload to N-1 */
	// systick_set_reload(99999);
	// systick_interrupt_enable();
	// systick_counter_enable();
}
 800015c:	b002      	add	sp, #8
 800015e:	bd10      	pop	{r4, pc}
 8000160:	080000f9 	.word	0x080000f9
 8000164:	08000109 	.word	0x08000109
 8000168:	080000c1 	.word	0x080000c1

0800016c <usb_clock_init>:
    return 0;
}

/** @brief Setup CPU and peripheral clocks for usb */
static void usb_clock_init(void)
{
 800016c:	b510      	push	{r4, lr}
    /** Set flash, 16Mhz -> 0 waitstates */
	flash_set_ws(FLASH_ACR_LATENCY_0WS);
 800016e:	2000      	movs	r0, #0
 8000170:	f000 f888 	bl	8000284 <flash_set_ws>

    /** Turn on HSI16 osc */ 
    rcc_osc_on(RCC_HSI16);
 8000174:	2003      	movs	r0, #3
 8000176:	f000 f88f 	bl	8000298 <rcc_osc_on>
    rcc_wait_for_osc_ready(RCC_HSI16);
 800017a:	2003      	movs	r0, #3
 800017c:	f000 f910 	bl	80003a0 <rcc_wait_for_osc_ready>

    /** Select CPU Clock */
    rcc_set_sysclk_source(RCC_HSI16);
 8000180:	2003      	movs	r0, #3
 8000182:	f000 f91f 	bl	80003c4 <rcc_set_sysclk_source>
    /** HSI is now the wakeup clock */
    RCC_CFGR |= RCC_CFGR_STOPWUCK_HSI16;
 8000186:	4a1f      	ldr	r2, [pc, #124]	; (8000204 <usb_clock_init+0x98>)
 8000188:	6811      	ldr	r1, [r2, #0]
 800018a:	2380      	movs	r3, #128	; 0x80
 800018c:	021b      	lsls	r3, r3, #8
 800018e:	430b      	orrs	r3, r1
 8000190:	6013      	str	r3, [r2, #0]

    /** Set prescalers for AHB, APB1, APB2 */
    rcc_set_hpre(RCC_CFGR_HPRE_NODIV);				/**< AHB -> 16Mhz */
 8000192:	2000      	movs	r0, #0
 8000194:	f000 f954 	bl	8000440 <rcc_set_hpre>
    rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);			/**< APB1 ->16Mhz */
 8000198:	2000      	movs	r0, #0
 800019a:	f000 f939 	bl	8000410 <rcc_set_ppre1>
    rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);			/**< APB2 ->16Mhz */
 800019e:	2000      	movs	r0, #0
 80001a0:	f000 f942 	bl	8000428 <rcc_set_ppre2>

    /** Set Peripheral Clock Frequencies used */
	rcc_ahb_frequency = 16000000;
 80001a4:	4b18      	ldr	r3, [pc, #96]	; (8000208 <usb_clock_init+0x9c>)
 80001a6:	4a19      	ldr	r2, [pc, #100]	; (800020c <usb_clock_init+0xa0>)
 80001a8:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 16000000;
 80001aa:	4a19      	ldr	r2, [pc, #100]	; (8000210 <usb_clock_init+0xa4>)
 80001ac:	6013      	str	r3, [r2, #0]
	rcc_apb2_frequency = 16000000;
 80001ae:	4a19      	ldr	r2, [pc, #100]	; (8000214 <usb_clock_init+0xa8>)
 80001b0:	6013      	str	r3, [r2, #0]
    

    /** Enable the VREF for HSI48 */
    rcc_periph_clock_enable(RCC_SYSCFG);
 80001b2:	20d0      	movs	r0, #208	; 0xd0
 80001b4:	00c0      	lsls	r0, r0, #3
 80001b6:	f000 f94d 	bl	8000454 <rcc_periph_clock_enable>
    SYSCFG_CFGR3 |= 0x01;
 80001ba:	4a17      	ldr	r2, [pc, #92]	; (8000218 <usb_clock_init+0xac>)
 80001bc:	6813      	ldr	r3, [r2, #0]
 80001be:	2101      	movs	r1, #1
 80001c0:	430b      	orrs	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
    while (!(SYSCFG_CFGR3 & SYSCFG_CFGR3_VREFINT_RDYF)) { }
 80001c4:	4b14      	ldr	r3, [pc, #80]	; (8000218 <usb_clock_init+0xac>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	005b      	lsls	r3, r3, #1
 80001ca:	d5fb      	bpl.n	80001c4 <usb_clock_init+0x58>
    SYSCFG_CFGR3 |= SYSCFG_CFGR3_ENREF_HSI48;
 80001cc:	4a12      	ldr	r2, [pc, #72]	; (8000218 <usb_clock_init+0xac>)
 80001ce:	6811      	ldr	r1, [r2, #0]
 80001d0:	2380      	movs	r3, #128	; 0x80
 80001d2:	019b      	lsls	r3, r3, #6
 80001d4:	430b      	orrs	r3, r1
 80001d6:	6013      	str	r3, [r2, #0]
    while (!(SYSCFG_CFGR3 & SYSCFG_CFGR3_REF_HSI48_RDYF)) { }
 80001d8:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <usb_clock_init+0xac>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	015b      	lsls	r3, r3, #5
 80001de:	d5fb      	bpl.n	80001d8 <usb_clock_init+0x6c>

    /** Enable HSI48 */
	rcc_osc_on(RCC_HSI48);
 80001e0:	2002      	movs	r0, #2
 80001e2:	f000 f859 	bl	8000298 <rcc_osc_on>
	rcc_wait_for_osc_ready(RCC_HSI48);
 80001e6:	2002      	movs	r0, #2
 80001e8:	f000 f8da 	bl	80003a0 <rcc_wait_for_osc_ready>

    rcc_periph_clock_enable(RCC_USB);
 80001ec:	480b      	ldr	r0, [pc, #44]	; (800021c <usb_clock_init+0xb0>)
 80001ee:	f000 f931 	bl	8000454 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_CRS);
 80001f2:	480b      	ldr	r0, [pc, #44]	; (8000220 <usb_clock_init+0xb4>)
 80001f4:	f000 f92e 	bl	8000454 <rcc_periph_clock_enable>

    rcc_set_hsi48_source_rc48();
 80001f8:	f000 f8da 	bl	80003b0 <rcc_set_hsi48_source_rc48>
  
    /** turn off MSI */
    rcc_osc_off(RCC_MSI);
 80001fc:	2004      	movs	r0, #4
 80001fe:	f000 f875 	bl	80002ec <rcc_osc_off>
}
 8000202:	bd10      	pop	{r4, pc}
 8000204:	4002100c 	.word	0x4002100c
 8000208:	00f42400 	.word	0x00f42400
 800020c:	20000000 	.word	0x20000000
 8000210:	20000004 	.word	0x20000004
 8000214:	20000008 	.word	0x20000008
 8000218:	40010020 	.word	0x40010020
 800021c:	00000717 	.word	0x00000717
 8000220:	0000071b 	.word	0x0000071b

08000224 <main>:
{   
 8000224:	b510      	push	{r4, lr}
 8000226:	b084      	sub	sp, #16
    usb_clock_init();
 8000228:	f7ff ffa0 	bl	800016c <usb_clock_init>
    SET_REG(USB_CNTR_REG, USB_CNTR_FRES);
 800022c:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <main+0x40>)
 800022e:	2301      	movs	r3, #1
 8000230:	6013      	str	r3, [r2, #0]
    SET_REG(USB_CNTR_REG, 0);
 8000232:	2300      	movs	r3, #0
 8000234:	6013      	str	r3, [r2, #0]
    SET_REG(USB_ISTR_REG, 0);
 8000236:	4a0c      	ldr	r2, [pc, #48]	; (8000268 <main+0x44>)
 8000238:	6013      	str	r3, [r2, #0]
    usbd_device *usbd_dev = usbd_init(&st_usbfs_v2_usb_driver, &dev_desc, &cfg_desc, string_desc, sizeof(string_desc) / sizeof(const char*), usbd_control_buffer, sizeof(usbd_control_buffer));
 800023a:	3380      	adds	r3, #128	; 0x80
 800023c:	9302      	str	r3, [sp, #8]
 800023e:	4b0b      	ldr	r3, [pc, #44]	; (800026c <main+0x48>)
 8000240:	9301      	str	r3, [sp, #4]
 8000242:	2304      	movs	r3, #4
 8000244:	9300      	str	r3, [sp, #0]
 8000246:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <main+0x4c>)
 8000248:	4a0a      	ldr	r2, [pc, #40]	; (8000274 <main+0x50>)
 800024a:	490b      	ldr	r1, [pc, #44]	; (8000278 <main+0x54>)
 800024c:	480b      	ldr	r0, [pc, #44]	; (800027c <main+0x58>)
 800024e:	f000 f90f 	bl	8000470 <usbd_init>
 8000252:	0004      	movs	r4, r0
    usbd_register_set_config_callback(usbd_dev, hid_set_config);
 8000254:	490a      	ldr	r1, [pc, #40]	; (8000280 <main+0x5c>)
 8000256:	f000 fdcd 	bl	8000df4 <usbd_register_set_config_callback>
      usbd_poll(usbd_dev);
 800025a:	0020      	movs	r0, r4
 800025c:	f000 f932 	bl	80004c4 <usbd_poll>
    while (1)
 8000260:	e7fb      	b.n	800025a <main+0x36>
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	40005c40 	.word	0x40005c40
 8000268:	40005c44 	.word	0x40005c44
 800026c:	2000000c 	.word	0x2000000c
 8000270:	0800188c 	.word	0x0800188c
 8000274:	080017b8 	.word	0x080017b8
 8000278:	080017c8 	.word	0x080017c8
 800027c:	0800189c 	.word	0x0800189c
 8000280:	0800012d 	.word	0x0800012d

08000284 <flash_set_ws>:
void flash_set_ws(uint32_t ws)
{
	uint32_t reg32;

	reg32 = FLASH_ACR;
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 8000284:	2101      	movs	r1, #1
	reg32 = FLASH_ACR;
 8000286:	4a03      	ldr	r2, [pc, #12]	; (8000294 <flash_set_ws+0x10>)
 8000288:	6813      	ldr	r3, [r2, #0]
	reg32 &= ~(FLASH_ACR_LATENCY_MASK << FLASH_ACR_LATENCY_SHIFT);
 800028a:	438b      	bics	r3, r1
	reg32 |= (ws << FLASH_ACR_LATENCY_SHIFT);
 800028c:	4303      	orrs	r3, r0
	FLASH_ACR = reg32;
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	4770      	bx	lr
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	40022000 	.word	0x40022000

08000298 <rcc_osc_on>:
uint32_t rcc_ahb_frequency = 2097000;
uint32_t rcc_apb1_frequency = 2097000;
uint32_t rcc_apb2_frequency = 2097000;

void rcc_osc_on(enum rcc_osc osc)
{
 8000298:	b500      	push	{lr}
 800029a:	2806      	cmp	r0, #6
 800029c:	d80b      	bhi.n	80002b6 <rcc_osc_on+0x1e>
 800029e:	f001 f96f 	bl	8001580 <__gnu_thumb1_case_uqi>
 80002a2:	1004      	.short	0x1004
 80002a4:	1b0b1915 	.word	0x1b0b1915
 80002a8:	1d          	.byte	0x1d
 80002a9:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR |= RCC_CR_PLLON;
 80002aa:	2380      	movs	r3, #128	; 0x80
 80002ac:	4a0c      	ldr	r2, [pc, #48]	; (80002e0 <rcc_osc_on+0x48>)
 80002ae:	045b      	lsls	r3, r3, #17
 80002b0:	6811      	ldr	r1, [r2, #0]
		break;
	case RCC_LSE:
		RCC_CSR |= RCC_CSR_LSEON;
		break;
	case RCC_LSI:
		RCC_CSR |= RCC_CSR_LSION;
 80002b2:	430b      	orrs	r3, r1
 80002b4:	6013      	str	r3, [r2, #0]
		break;
	}
}
 80002b6:	bd00      	pop	{pc}
		RCC_CR |= RCC_CR_MSION;
 80002b8:	4a09      	ldr	r2, [pc, #36]	; (80002e0 <rcc_osc_on+0x48>)
		RCC_CSR |= RCC_CSR_LSEON;
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	6811      	ldr	r1, [r2, #0]
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	e7f7      	b.n	80002b2 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSEON;
 80002c2:	2380      	movs	r3, #128	; 0x80
 80002c4:	4a06      	ldr	r2, [pc, #24]	; (80002e0 <rcc_osc_on+0x48>)
 80002c6:	025b      	lsls	r3, r3, #9
 80002c8:	6811      	ldr	r1, [r2, #0]
 80002ca:	e7f2      	b.n	80002b2 <rcc_osc_on+0x1a>
		RCC_CRRCR |= RCC_CRRCR_HSI48ON;
 80002cc:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <rcc_osc_on+0x4c>)
		RCC_CSR |= RCC_CSR_LSION;
 80002ce:	2301      	movs	r3, #1
 80002d0:	6811      	ldr	r1, [r2, #0]
 80002d2:	e7ee      	b.n	80002b2 <rcc_osc_on+0x1a>
		RCC_CR |= RCC_CR_HSI16ON;
 80002d4:	4a02      	ldr	r2, [pc, #8]	; (80002e0 <rcc_osc_on+0x48>)
 80002d6:	e7fa      	b.n	80002ce <rcc_osc_on+0x36>
		RCC_CSR |= RCC_CSR_LSEON;
 80002d8:	4a03      	ldr	r2, [pc, #12]	; (80002e8 <rcc_osc_on+0x50>)
 80002da:	e7ee      	b.n	80002ba <rcc_osc_on+0x22>
		RCC_CSR |= RCC_CSR_LSION;
 80002dc:	4a02      	ldr	r2, [pc, #8]	; (80002e8 <rcc_osc_on+0x50>)
 80002de:	e7f6      	b.n	80002ce <rcc_osc_on+0x36>
 80002e0:	40021000 	.word	0x40021000
 80002e4:	40021008 	.word	0x40021008
 80002e8:	40021050 	.word	0x40021050

080002ec <rcc_osc_off>:

void rcc_osc_off(enum rcc_osc osc)
{
 80002ec:	b500      	push	{lr}
 80002ee:	2806      	cmp	r0, #6
 80002f0:	d80a      	bhi.n	8000308 <rcc_osc_off+0x1c>
 80002f2:	f001 f945 	bl	8001580 <__gnu_thumb1_case_uqi>
 80002f6:	0e04      	.short	0x0e04
 80002f8:	190a1712 	.word	0x190a1712
 80002fc:	1b          	.byte	0x1b
 80002fd:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CR &= ~RCC_CR_PLLON;
 80002fe:	4a0c      	ldr	r2, [pc, #48]	; (8000330 <rcc_osc_off+0x44>)
 8000300:	490c      	ldr	r1, [pc, #48]	; (8000334 <rcc_osc_off+0x48>)
 8000302:	6813      	ldr	r3, [r2, #0]
		break;
	case RCC_HSI16:
		RCC_CR &= ~RCC_CR_HSI16ON;
		break;
	case RCC_LSE:
		RCC_CSR &= ~RCC_CSR_LSEON;
 8000304:	400b      	ands	r3, r1
		break;
	case RCC_LSI:
		RCC_CSR &= ~RCC_CSR_LSION;
 8000306:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8000308:	bd00      	pop	{pc}
		RCC_CR &= ~RCC_CR_MSION;
 800030a:	4a09      	ldr	r2, [pc, #36]	; (8000330 <rcc_osc_off+0x44>)
		RCC_CSR &= ~RCC_CSR_LSEON;
 800030c:	6813      	ldr	r3, [r2, #0]
 800030e:	490a      	ldr	r1, [pc, #40]	; (8000338 <rcc_osc_off+0x4c>)
 8000310:	e7f8      	b.n	8000304 <rcc_osc_off+0x18>
		RCC_CR &= ~RCC_CR_HSEON;
 8000312:	4a07      	ldr	r2, [pc, #28]	; (8000330 <rcc_osc_off+0x44>)
 8000314:	4909      	ldr	r1, [pc, #36]	; (800033c <rcc_osc_off+0x50>)
 8000316:	6813      	ldr	r3, [r2, #0]
 8000318:	e7f4      	b.n	8000304 <rcc_osc_off+0x18>
		RCC_CRRCR &= ~RCC_CRRCR_HSI48ON;
 800031a:	4a09      	ldr	r2, [pc, #36]	; (8000340 <rcc_osc_off+0x54>)
		RCC_CSR &= ~RCC_CSR_LSION;
 800031c:	2101      	movs	r1, #1
 800031e:	6813      	ldr	r3, [r2, #0]
 8000320:	438b      	bics	r3, r1
 8000322:	e7f0      	b.n	8000306 <rcc_osc_off+0x1a>
		RCC_CR &= ~RCC_CR_HSI16ON;
 8000324:	4a02      	ldr	r2, [pc, #8]	; (8000330 <rcc_osc_off+0x44>)
 8000326:	e7f9      	b.n	800031c <rcc_osc_off+0x30>
		RCC_CSR &= ~RCC_CSR_LSEON;
 8000328:	4a06      	ldr	r2, [pc, #24]	; (8000344 <rcc_osc_off+0x58>)
 800032a:	e7ef      	b.n	800030c <rcc_osc_off+0x20>
		RCC_CSR &= ~RCC_CSR_LSION;
 800032c:	4a05      	ldr	r2, [pc, #20]	; (8000344 <rcc_osc_off+0x58>)
 800032e:	e7f5      	b.n	800031c <rcc_osc_off+0x30>
 8000330:	40021000 	.word	0x40021000
 8000334:	feffffff 	.word	0xfeffffff
 8000338:	fffffeff 	.word	0xfffffeff
 800033c:	fffeffff 	.word	0xfffeffff
 8000340:	40021008 	.word	0x40021008
 8000344:	40021050 	.word	0x40021050

08000348 <rcc_is_osc_ready>:
	cm3_assert_not_reached();
}


bool rcc_is_osc_ready(enum rcc_osc osc)
{
 8000348:	2300      	movs	r3, #0
 800034a:	b500      	push	{lr}
 800034c:	2806      	cmp	r0, #6
 800034e:	d80a      	bhi.n	8000366 <rcc_is_osc_ready+0x1e>
 8000350:	3301      	adds	r3, #1
 8000352:	f001 f915 	bl	8001580 <__gnu_thumb1_case_uqi>
 8000356:	0a04      	.short	0x0a04
 8000358:	1a160e12 	.word	0x1a160e12
 800035c:	1c          	.byte	0x1c
 800035d:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		return RCC_CR & RCC_CR_PLLRDY;
 800035e:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <rcc_is_osc_ready+0x4c>)
 8000360:	6810      	ldr	r0, [r2, #0]
 8000362:	0e40      	lsrs	r0, r0, #25
	case RCC_MSI:
		return RCC_CR & RCC_CR_MSIRDY;
	case RCC_LSE:
		return RCC_CSR & RCC_CSR_LSERDY;
	case RCC_LSI:
		return RCC_CSR & RCC_CSR_LSIRDY;
 8000364:	4003      	ands	r3, r0
	}
	return false;
}
 8000366:	0018      	movs	r0, r3
 8000368:	bd00      	pop	{pc}
		return RCC_CR & RCC_CR_HSERDY;
 800036a:	4a0a      	ldr	r2, [pc, #40]	; (8000394 <rcc_is_osc_ready+0x4c>)
 800036c:	6810      	ldr	r0, [r2, #0]
 800036e:	0c40      	lsrs	r0, r0, #17
 8000370:	e7f8      	b.n	8000364 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_HSI16RDY;
 8000372:	4a08      	ldr	r2, [pc, #32]	; (8000394 <rcc_is_osc_ready+0x4c>)
 8000374:	6810      	ldr	r0, [r2, #0]
 8000376:	0880      	lsrs	r0, r0, #2
 8000378:	e7f4      	b.n	8000364 <rcc_is_osc_ready+0x1c>
		return RCC_CRRCR & RCC_CRRCR_HSI48RDY;
 800037a:	4a07      	ldr	r2, [pc, #28]	; (8000398 <rcc_is_osc_ready+0x50>)
		return RCC_CSR & RCC_CSR_LSIRDY;
 800037c:	6810      	ldr	r0, [r2, #0]
 800037e:	0840      	lsrs	r0, r0, #1
 8000380:	e7f0      	b.n	8000364 <rcc_is_osc_ready+0x1c>
		return RCC_CR & RCC_CR_MSIRDY;
 8000382:	4a04      	ldr	r2, [pc, #16]	; (8000394 <rcc_is_osc_ready+0x4c>)
		return RCC_CSR & RCC_CSR_LSERDY;
 8000384:	6810      	ldr	r0, [r2, #0]
 8000386:	0a40      	lsrs	r0, r0, #9
 8000388:	e7ec      	b.n	8000364 <rcc_is_osc_ready+0x1c>
 800038a:	4a04      	ldr	r2, [pc, #16]	; (800039c <rcc_is_osc_ready+0x54>)
 800038c:	e7fa      	b.n	8000384 <rcc_is_osc_ready+0x3c>
		return RCC_CSR & RCC_CSR_LSIRDY;
 800038e:	4a03      	ldr	r2, [pc, #12]	; (800039c <rcc_is_osc_ready+0x54>)
 8000390:	e7f4      	b.n	800037c <rcc_is_osc_ready+0x34>
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	40021000 	.word	0x40021000
 8000398:	40021008 	.word	0x40021008
 800039c:	40021050 	.word	0x40021050

080003a0 <rcc_wait_for_osc_ready>:

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
 80003a0:	b510      	push	{r4, lr}
 80003a2:	0004      	movs	r4, r0
	while (!rcc_is_osc_ready(osc));
 80003a4:	0020      	movs	r0, r4
 80003a6:	f7ff ffcf 	bl	8000348 <rcc_is_osc_ready>
 80003aa:	2800      	cmp	r0, #0
 80003ac:	d0fa      	beq.n	80003a4 <rcc_wait_for_osc_ready+0x4>
}
 80003ae:	bd10      	pop	{r4, pc}

080003b0 <rcc_set_hsi48_source_rc48>:
/*---------------------------------------------------------------------------*/
/** @brief RCC Set HSI48 clock source to the RC48 (CRS)
 */
void rcc_set_hsi48_source_rc48(void)
{
	RCC_CCIPR |= RCC_CCIPR_HSI48SEL;
 80003b0:	2380      	movs	r3, #128	; 0x80
 80003b2:	4a03      	ldr	r2, [pc, #12]	; (80003c0 <rcc_set_hsi48_source_rc48+0x10>)
 80003b4:	04db      	lsls	r3, r3, #19
 80003b6:	6811      	ldr	r1, [r2, #0]
 80003b8:	430b      	orrs	r3, r1
 80003ba:	6013      	str	r3, [r2, #0]
}
 80003bc:	4770      	bx	lr
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	4002104c 	.word	0x4002104c

080003c4 <rcc_set_sysclk_source>:
 *
 * @param[in] osc Oscillator ID. Only HSE, HSI16, MSI and PLL have effect.
 */

void rcc_set_sysclk_source(enum rcc_osc osc)
{
 80003c4:	b500      	push	{lr}
 80003c6:	2804      	cmp	r0, #4
 80003c8:	d812      	bhi.n	80003f0 <rcc_set_sysclk_source+0x2c>
 80003ca:	f001 f8d9 	bl	8001580 <__gnu_thumb1_case_uqi>
 80003ce:	0903      	.short	0x0903
 80003d0:	1211      	.short	0x1211
 80003d2:	19          	.byte	0x19
 80003d3:	00          	.byte	0x00
	switch (osc) {
	case RCC_PLL:
		RCC_CFGR |=  RCC_CFGR_SW_PLL;
 80003d4:	2303      	movs	r3, #3
 80003d6:	4a0d      	ldr	r2, [pc, #52]	; (800040c <rcc_set_sysclk_source+0x48>)
 80003d8:	6811      	ldr	r1, [r2, #0]
 80003da:	430b      	orrs	r3, r1
		break;
	case RCC_HSI16:
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_HSI16;
		break;
	case RCC_MSI:
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_MSI;
 80003dc:	6013      	str	r3, [r2, #0]
	case RCC_HSI48:
	case RCC_LSE:
	case RCC_LSI:
		break;
	}
}
 80003de:	e007      	b.n	80003f0 <rcc_set_sysclk_source+0x2c>
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_HSE;
 80003e0:	2203      	movs	r2, #3
 80003e2:	490a      	ldr	r1, [pc, #40]	; (800040c <rcc_set_sysclk_source+0x48>)
 80003e4:	680b      	ldr	r3, [r1, #0]
 80003e6:	4393      	bics	r3, r2
 80003e8:	001a      	movs	r2, r3
 80003ea:	2302      	movs	r3, #2
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_HSI16;
 80003ec:	4313      	orrs	r3, r2
 80003ee:	600b      	str	r3, [r1, #0]
}
 80003f0:	bd00      	pop	{pc}
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_HSI16;
 80003f2:	2203      	movs	r2, #3
 80003f4:	4905      	ldr	r1, [pc, #20]	; (800040c <rcc_set_sysclk_source+0x48>)
 80003f6:	680b      	ldr	r3, [r1, #0]
 80003f8:	4393      	bics	r3, r2
 80003fa:	001a      	movs	r2, r3
 80003fc:	2301      	movs	r3, #1
 80003fe:	e7f5      	b.n	80003ec <rcc_set_sysclk_source+0x28>
		RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW_MASK) | RCC_CFGR_SW_MSI;
 8000400:	2103      	movs	r1, #3
 8000402:	4a02      	ldr	r2, [pc, #8]	; (800040c <rcc_set_sysclk_source+0x48>)
 8000404:	6813      	ldr	r3, [r2, #0]
 8000406:	438b      	bics	r3, r1
 8000408:	e7e8      	b.n	80003dc <rcc_set_sysclk_source+0x18>
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	4002100c 	.word	0x4002100c

08000410 <rcc_set_ppre1>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb1pre
 */

void rcc_set_ppre1(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8000410:	4a03      	ldr	r2, [pc, #12]	; (8000420 <rcc_set_ppre1+0x10>)
 8000412:	4904      	ldr	r1, [pc, #16]	; (8000424 <rcc_set_ppre1+0x14>)
 8000414:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE1_MASK << RCC_CFGR_PPRE1_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 8000416:	0200      	lsls	r0, r0, #8
	uint32_t reg = RCC_CFGR
 8000418:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 800041a:	4318      	orrs	r0, r3
 800041c:	6010      	str	r0, [r2, #0]
}
 800041e:	4770      	bx	lr
 8000420:	4002100c 	.word	0x4002100c
 8000424:	fffff8ff 	.word	0xfffff8ff

08000428 <rcc_set_ppre2>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb2pre
 */

void rcc_set_ppre2(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8000428:	4a03      	ldr	r2, [pc, #12]	; (8000438 <rcc_set_ppre2+0x10>)
 800042a:	4904      	ldr	r1, [pc, #16]	; (800043c <rcc_set_ppre2+0x14>)
 800042c:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE2_MASK << RCC_CFGR_PPRE2_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 800042e:	02c0      	lsls	r0, r0, #11
	uint32_t reg = RCC_CFGR
 8000430:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8000432:	4318      	orrs	r0, r3
 8000434:	6010      	str	r0, [r2, #0]
}
 8000436:	4770      	bx	lr
 8000438:	4002100c 	.word	0x4002100c
 800043c:	ffffc7ff 	.word	0xffffc7ff

08000440 <rcc_set_hpre>:
 * @param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
 */

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8000440:	21f0      	movs	r1, #240	; 0xf0
 8000442:	4a03      	ldr	r2, [pc, #12]	; (8000450 <rcc_set_hpre+0x10>)
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8000444:	0100      	lsls	r0, r0, #4
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8000446:	6813      	ldr	r3, [r2, #0]
 8000448:	438b      	bics	r3, r1
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 800044a:	4318      	orrs	r0, r3
 800044c:	6010      	str	r0, [r2, #0]
}
 800044e:	4770      	bx	lr
 8000450:	4002100c 	.word	0x4002100c

08000454 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <rcc_periph_clock_enable+0x18>)
 8000456:	0942      	lsrs	r2, r0, #5
 8000458:	18d2      	adds	r2, r2, r3
 800045a:	231f      	movs	r3, #31
 800045c:	4018      	ands	r0, r3
 800045e:	3b1e      	subs	r3, #30
 8000460:	4083      	lsls	r3, r0
 8000462:	6811      	ldr	r1, [r2, #0]
 8000464:	430b      	orrs	r3, r1
 8000466:	6013      	str	r3, [r2, #0]
}
 8000468:	4770      	bx	lr
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	40021000 	.word	0x40021000

08000470 <usbd_init>:
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char * const *strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 8000470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000472:	001d      	movs	r5, r3
 8000474:	ab0a      	add	r3, sp, #40	; 0x28
 8000476:	881b      	ldrh	r3, [r3, #0]
 8000478:	0016      	movs	r6, r2
 800047a:	9301      	str	r3, [sp, #4]
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 800047c:	6803      	ldr	r3, [r0, #0]
{
 800047e:	000f      	movs	r7, r1
 8000480:	0004      	movs	r4, r0
	usbd_dev = driver->init();
 8000482:	4798      	blx	r3

	usbd_dev->driver = driver;
 8000484:	0003      	movs	r3, r0
 8000486:	33dc      	adds	r3, #220	; 0xdc
 8000488:	601c      	str	r4, [r3, #0]
	usbd_dev->desc = dev;
	usbd_dev->config = conf;
	usbd_dev->strings = strings;
	usbd_dev->num_strings = num_strings;
 800048a:	9b08      	ldr	r3, [sp, #32]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
	    _usbd_control_in;

	int i;
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
		usbd_dev->user_callback_set_config[i] = NULL;
 800048c:	0002      	movs	r2, r0
	usbd_dev->num_strings = num_strings;
 800048e:	60c3      	str	r3, [r0, #12]
	usbd_dev->ctrl_buf = control_buffer;
 8000490:	9b09      	ldr	r3, [sp, #36]	; 0x24
		usbd_dev->user_callback_set_config[i] = NULL;
 8000492:	32c8      	adds	r2, #200	; 0xc8
	usbd_dev->ctrl_buf = control_buffer;
 8000494:	6103      	str	r3, [r0, #16]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 8000496:	9b01      	ldr	r3, [sp, #4]
	usbd_dev->desc = dev;
 8000498:	6007      	str	r7, [r0, #0]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 800049a:	8283      	strh	r3, [r0, #20]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <usbd_init+0x48>)
	usbd_dev->config = conf;
 800049e:	6046      	str	r6, [r0, #4]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 80004a0:	6703      	str	r3, [r0, #112]	; 0x70
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <usbd_init+0x4c>)
	usbd_dev->strings = strings;
 80004a4:	6085      	str	r5, [r0, #8]
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 80004a6:	66c3      	str	r3, [r0, #108]	; 0x6c
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <usbd_init+0x50>)
 80004aa:	6683      	str	r3, [r0, #104]	; 0x68
		usbd_dev->user_callback_set_config[i] = NULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	6013      	str	r3, [r2, #0]
 80004b0:	6053      	str	r3, [r2, #4]
 80004b2:	6093      	str	r3, [r2, #8]
 80004b4:	60d3      	str	r3, [r2, #12]
	}

	return usbd_dev;
}
 80004b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80004b8:	080006f9 	.word	0x080006f9
 80004bc:	08000763 	.word	0x08000763
 80004c0:	080007e5 	.word	0x080007e5

080004c4 <usbd_poll>:
}

/* Functions to wrap the low-level driver */
void usbd_poll(usbd_device *usbd_dev)
{
	usbd_dev->driver->poll(usbd_dev);
 80004c4:	0003      	movs	r3, r0
{
 80004c6:	b510      	push	{r4, lr}
	usbd_dev->driver->poll(usbd_dev);
 80004c8:	33dc      	adds	r3, #220	; 0xdc
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ce:	4798      	blx	r3
}
 80004d0:	bd10      	pop	{r4, pc}

080004d2 <usbd_ep_setup>:
	}
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size, usbd_endpoint_callback callback)
{
 80004d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 80004d4:	0004      	movs	r4, r0
 80004d6:	9d06      	ldr	r5, [sp, #24]
 80004d8:	34dc      	adds	r4, #220	; 0xdc
 80004da:	6824      	ldr	r4, [r4, #0]
 80004dc:	9500      	str	r5, [sp, #0]
 80004de:	68a4      	ldr	r4, [r4, #8]
 80004e0:	47a0      	blx	r4
}
 80004e2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080004e4 <_usbd_reset>:
{
 80004e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	usbd_dev->current_address = 0;
 80004e6:	2500      	movs	r5, #0
{
 80004e8:	0004      	movs	r4, r0
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 80004ea:	6803      	ldr	r3, [r0, #0]
	usbd_dev->current_address = 0;
 80004ec:	82c5      	strh	r5, [r0, #22]
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 80004ee:	79db      	ldrb	r3, [r3, #7]
 80004f0:	002a      	movs	r2, r5
 80004f2:	0029      	movs	r1, r5
 80004f4:	9500      	str	r5, [sp, #0]
 80004f6:	f7ff ffec 	bl	80004d2 <usbd_ep_setup>
	usbd_dev->driver->set_address(usbd_dev, 0);
 80004fa:	0023      	movs	r3, r4
 80004fc:	33dc      	adds	r3, #220	; 0xdc
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	0029      	movs	r1, r5
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	0020      	movs	r0, r4
 8000506:	4798      	blx	r3
	if (usbd_dev->user_callback_reset) {
 8000508:	69e3      	ldr	r3, [r4, #28]
 800050a:	42ab      	cmp	r3, r5
 800050c:	d000      	beq.n	8000510 <_usbd_reset+0x2c>
		usbd_dev->user_callback_reset();
 800050e:	4798      	blx	r3
}
 8000510:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000512 <usbd_ep_write_packet>:

uint16_t usbd_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			 const void *buf, uint16_t len)
{
 8000512:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 8000514:	0004      	movs	r4, r0
 8000516:	34dc      	adds	r4, #220	; 0xdc
 8000518:	6824      	ldr	r4, [r4, #0]
 800051a:	69e4      	ldr	r4, [r4, #28]
 800051c:	47a0      	blx	r4
}
 800051e:	bd10      	pop	{r4, pc}

08000520 <usbd_ep_read_packet>:

uint16_t usbd_ep_read_packet(usbd_device *usbd_dev, uint8_t addr, void *buf,
			     uint16_t len)
{
 8000520:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 8000522:	0004      	movs	r4, r0
 8000524:	34dc      	adds	r4, #220	; 0xdc
 8000526:	6824      	ldr	r4, [r4, #0]
 8000528:	6a24      	ldr	r4, [r4, #32]
 800052a:	47a0      	blx	r4
}
 800052c:	bd10      	pop	{r4, pc}

0800052e <usbd_ep_stall_set>:

void usbd_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 800052e:	0003      	movs	r3, r0
{
 8000530:	b510      	push	{r4, lr}
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 8000532:	33dc      	adds	r3, #220	; 0xdc
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	691b      	ldr	r3, [r3, #16]
 8000538:	4798      	blx	r3
}
 800053a:	bd10      	pop	{r4, pc}

0800053c <usbd_ep_stall_get>:

uint8_t usbd_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 800053c:	0003      	movs	r3, r0
{
 800053e:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 8000540:	33dc      	adds	r3, #220	; 0xdc
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4798      	blx	r3
}
 8000548:	bd10      	pop	{r4, pc}

0800054a <usbd_ep_nak_set>:

void usbd_ep_nak_set(usbd_device *usbd_dev, uint8_t addr, uint8_t nak)
{
	usbd_dev->driver->ep_nak_set(usbd_dev, addr, nak);
 800054a:	0003      	movs	r3, r0
{
 800054c:	b510      	push	{r4, lr}
	usbd_dev->driver->ep_nak_set(usbd_dev, addr, nak);
 800054e:	33dc      	adds	r3, #220	; 0xdc
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	4798      	blx	r3
}
 8000556:	bd10      	pop	{r4, pc}

08000558 <usb_control_send_chunk>:

	return -1;
}

static void usb_control_send_chunk(usbd_device *usbd_dev)
{
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0005      	movs	r5, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
 800055c:	6803      	ldr	r3, [r0, #0]
{
 800055e:	0004      	movs	r4, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
 8000560:	79d9      	ldrb	r1, [r3, #7]
			usbd_dev->control_state.ctrl_len) {
 8000562:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8000564:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000566:	352c      	adds	r5, #44	; 0x2c
	if (usbd_dev->desc->bMaxPacketSize0 <
 8000568:	4299      	cmp	r1, r3
 800056a:	d20e      	bcs.n	800058a <usb_control_send_chunk+0x32>
		/* Data stage, normal transmission */
		usbd_ep_write_packet(usbd_dev, 0,
 800056c:	000b      	movs	r3, r1
 800056e:	2100      	movs	r1, #0
 8000570:	f7ff ffcf 	bl	8000512 <usbd_ep_write_packet>
				     usbd_dev->control_state.ctrl_buf,
				     usbd_dev->desc->bMaxPacketSize0);
		usbd_dev->control_state.state = DATA_IN;
 8000574:	2302      	movs	r3, #2
 8000576:	702b      	strb	r3, [r5, #0]
		usbd_dev->control_state.ctrl_buf +=
			usbd_dev->desc->bMaxPacketSize0;
 8000578:	6823      	ldr	r3, [r4, #0]
 800057a:	79d9      	ldrb	r1, [r3, #7]
		usbd_dev->control_state.ctrl_buf +=
 800057c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800057e:	185a      	adds	r2, r3, r1
		usbd_dev->control_state.ctrl_len -=
 8000580:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf +=
 8000582:	63a2      	str	r2, [r4, #56]	; 0x38
		usbd_dev->control_state.ctrl_len -=
 8000584:	1a5b      	subs	r3, r3, r1
 8000586:	87a3      	strh	r3, [r4, #60]	; 0x3c
			DATA_IN : LAST_DATA_IN;
		usbd_dev->control_state.needs_zlp = false;
		usbd_dev->control_state.ctrl_len = 0;
		usbd_dev->control_state.ctrl_buf = NULL;
	}
}
 8000588:	bd70      	pop	{r4, r5, r6, pc}
		usbd_ep_write_packet(usbd_dev, 0,
 800058a:	2100      	movs	r1, #0
 800058c:	f7ff ffc1 	bl	8000512 <usbd_ep_write_packet>
			usbd_dev->control_state.needs_zlp ?
 8000590:	0022      	movs	r2, r4
 8000592:	3244      	adds	r2, #68	; 0x44
			DATA_IN : LAST_DATA_IN;
 8000594:	7813      	ldrb	r3, [r2, #0]
 8000596:	4259      	negs	r1, r3
 8000598:	414b      	adcs	r3, r1
 800059a:	3302      	adds	r3, #2
		usbd_dev->control_state.state =
 800059c:	702b      	strb	r3, [r5, #0]
		usbd_dev->control_state.needs_zlp = false;
 800059e:	2300      	movs	r3, #0
 80005a0:	7013      	strb	r3, [r2, #0]
		usbd_dev->control_state.ctrl_len = 0;
 80005a2:	87a3      	strh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf = NULL;
 80005a4:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80005a6:	e7ef      	b.n	8000588 <usb_control_send_chunk+0x30>

080005a8 <usb_control_request_dispatch>:
{
	int i, result = 0;
	struct user_control_callback *cb = usbd_dev->user_control_callback;

	/* Call user command hook function. */
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 80005a8:	0003      	movs	r3, r0
{
 80005aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ac:	0005      	movs	r5, r0
 80005ae:	0004      	movs	r4, r0
 80005b0:	000e      	movs	r6, r1
 80005b2:	b087      	sub	sp, #28
 80005b4:	3368      	adds	r3, #104	; 0x68
 80005b6:	3548      	adds	r5, #72	; 0x48
 80005b8:	9305      	str	r3, [sp, #20]
		if (cb[i].cb == NULL) {
 80005ba:	682b      	ldr	r3, [r5, #0]
 80005bc:	0027      	movs	r7, r4
 80005be:	469c      	mov	ip, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	3338      	adds	r3, #56	; 0x38
 80005c4:	9304      	str	r3, [sp, #16]
 80005c6:	4663      	mov	r3, ip
 80005c8:	373c      	adds	r7, #60	; 0x3c
 80005ca:	9703      	str	r7, [sp, #12]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d107      	bne.n	80005e0 <usb_control_request_dispatch+0x38>
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 80005d0:	0031      	movs	r1, r6
 80005d2:	0020      	movs	r0, r4
 80005d4:	9b03      	ldr	r3, [sp, #12]
 80005d6:	9a04      	ldr	r2, [sp, #16]
 80005d8:	f000 fc86 	bl	8000ee8 <_usbd_standard_request>
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 80005dc:	b007      	add	sp, #28
 80005de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
 80005e0:	7831      	ldrb	r1, [r6, #0]
 80005e2:	796b      	ldrb	r3, [r5, #5]
 80005e4:	792a      	ldrb	r2, [r5, #4]
 80005e6:	400b      	ands	r3, r1
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d004      	beq.n	80005f6 <usb_control_request_dispatch+0x4e>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 80005ec:	9b05      	ldr	r3, [sp, #20]
 80005ee:	3508      	adds	r5, #8
 80005f0:	429d      	cmp	r5, r3
 80005f2:	d1e2      	bne.n	80005ba <usb_control_request_dispatch+0x12>
 80005f4:	e7ec      	b.n	80005d0 <usb_control_request_dispatch+0x28>
			result = cb[i].cb(usbd_dev, req,
 80005f6:	0023      	movs	r3, r4
 80005f8:	3340      	adds	r3, #64	; 0x40
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	0031      	movs	r1, r6
 80005fe:	0020      	movs	r0, r4
 8000600:	4667      	mov	r7, ip
 8000602:	9b03      	ldr	r3, [sp, #12]
 8000604:	9a04      	ldr	r2, [sp, #16]
 8000606:	47b8      	blx	r7
			if (result == USBD_REQ_HANDLED ||
 8000608:	2801      	cmp	r0, #1
 800060a:	d8ef      	bhi.n	80005ec <usb_control_request_dispatch+0x44>
 800060c:	e7e6      	b.n	80005dc <usb_control_request_dispatch+0x34>

0800060e <stall_transaction>:
{
 800060e:	b510      	push	{r4, lr}
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8000610:	2201      	movs	r2, #1
{
 8000612:	0004      	movs	r4, r0
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8000614:	2100      	movs	r1, #0
 8000616:	f7ff ff8a 	bl	800052e <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 800061a:	2300      	movs	r3, #0
 800061c:	342c      	adds	r4, #44	; 0x2c
 800061e:	7023      	strb	r3, [r4, #0]
}
 8000620:	bd10      	pop	{r4, pc}

08000622 <usb_control_recv_chunk>:
{
 8000622:	b570      	push	{r4, r5, r6, lr}
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8000624:	6803      	ldr	r3, [r0, #0]
 8000626:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8000628:	8ec5      	ldrh	r5, [r0, #54]	; 0x36
 800062a:	79db      	ldrb	r3, [r3, #7]
{
 800062c:	0004      	movs	r4, r0
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 800062e:	1aad      	subs	r5, r5, r2
 8000630:	429d      	cmp	r5, r3
 8000632:	dd00      	ble.n	8000636 <usb_control_recv_chunk+0x14>
 8000634:	001d      	movs	r5, r3
				       usbd_dev->control_state.ctrl_buf +
 8000636:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8000638:	b2ae      	uxth	r6, r5
				       usbd_dev->control_state.ctrl_buf +
 800063a:	189a      	adds	r2, r3, r2
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 800063c:	2100      	movs	r1, #0
 800063e:	0033      	movs	r3, r6
 8000640:	0020      	movs	r0, r4
 8000642:	f7ff ff6d 	bl	8000520 <usbd_ep_read_packet>
	if (size != packetsize) {
 8000646:	4286      	cmp	r6, r0
 8000648:	d005      	beq.n	8000656 <usb_control_recv_chunk+0x34>
		stall_transaction(usbd_dev);
 800064a:	0020      	movs	r0, r4
 800064c:	f7ff ffdf 	bl	800060e <stall_transaction>
		return -1;
 8000650:	2001      	movs	r0, #1
 8000652:	4240      	negs	r0, r0
}
 8000654:	bd70      	pop	{r4, r5, r6, pc}
	usbd_dev->control_state.ctrl_len += size;
 8000656:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8000658:	b2a8      	uxth	r0, r5
 800065a:	18f6      	adds	r6, r6, r3
 800065c:	87a6      	strh	r6, [r4, #60]	; 0x3c
	return packetsize;
 800065e:	e7f9      	b.n	8000654 <usb_control_recv_chunk+0x32>

08000660 <usb_control_setup_read>:

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 8000660:	b570      	push	{r4, r5, r6, lr}
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8000662:	6903      	ldr	r3, [r0, #16]
{
 8000664:	0004      	movs	r4, r0
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8000666:	6383      	str	r3, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = req->wLength;
 8000668:	79cb      	ldrb	r3, [r1, #7]
 800066a:	798a      	ldrb	r2, [r1, #6]
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	4313      	orrs	r3, r2
 8000670:	8783      	strh	r3, [r0, #60]	; 0x3c
{
 8000672:	000d      	movs	r5, r1

	if (usb_control_request_dispatch(usbd_dev, req)) {
 8000674:	f7ff ff98 	bl	80005a8 <usb_control_request_dispatch>
 8000678:	2800      	cmp	r0, #0
 800067a:	d021      	beq.n	80006c0 <usb_control_setup_read+0x60>
		if (req->wLength) {
 800067c:	79eb      	ldrb	r3, [r5, #7]
 800067e:	79aa      	ldrb	r2, [r5, #6]
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	4313      	orrs	r3, r2
 8000684:	d013      	beq.n	80006ae <usb_control_setup_read+0x4e>
			usbd_dev->control_state.needs_zlp =
				needs_zlp(usbd_dev->control_state.ctrl_len,
 8000686:	6822      	ldr	r2, [r4, #0]
 8000688:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800068a:	79d1      	ldrb	r1, [r2, #7]
	return false;
 800068c:	2200      	movs	r2, #0
	if (len < wLength) {
 800068e:	4283      	cmp	r3, r0
 8000690:	d906      	bls.n	80006a0 <usb_control_setup_read+0x40>
		if (len && (len % ep_size == 0)) {
 8000692:	4290      	cmp	r0, r2
 8000694:	d004      	beq.n	80006a0 <usb_control_setup_read+0x40>
 8000696:	f001 f863 	bl	8001760 <__aeabi_idivmod>
 800069a:	424a      	negs	r2, r1
 800069c:	414a      	adcs	r2, r1
 800069e:	b2d2      	uxtb	r2, r2
			usbd_dev->control_state.needs_zlp =
 80006a0:	0023      	movs	r3, r4
 80006a2:	3344      	adds	r3, #68	; 0x44
					req->wLength,
					usbd_dev->desc->bMaxPacketSize0);
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 80006a4:	0020      	movs	r0, r4
			usbd_dev->control_state.needs_zlp =
 80006a6:	701a      	strb	r2, [r3, #0]
			usb_control_send_chunk(usbd_dev);
 80006a8:	f7ff ff56 	bl	8000558 <usb_control_send_chunk>
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
	}
}
 80006ac:	bd70      	pop	{r4, r5, r6, pc}
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 80006ae:	001a      	movs	r2, r3
 80006b0:	0019      	movs	r1, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f7ff ff2d 	bl	8000512 <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 80006b8:	2304      	movs	r3, #4
 80006ba:	342c      	adds	r4, #44	; 0x2c
 80006bc:	7023      	strb	r3, [r4, #0]
}
 80006be:	e7f5      	b.n	80006ac <usb_control_setup_read+0x4c>
		stall_transaction(usbd_dev);
 80006c0:	0020      	movs	r0, r4
 80006c2:	f7ff ffa4 	bl	800060e <stall_transaction>
}
 80006c6:	e7f1      	b.n	80006ac <usb_control_setup_read+0x4c>

080006c8 <usbd_register_control_callback>:
{
 80006c8:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (usbd_dev->user_control_callback[i].cb) {
 80006ca:	0007      	movs	r7, r0
{
 80006cc:	0004      	movs	r4, r0
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 80006ce:	2500      	movs	r5, #0
		if (usbd_dev->user_control_callback[i].cb) {
 80006d0:	3748      	adds	r7, #72	; 0x48
 80006d2:	00ee      	lsls	r6, r5, #3
 80006d4:	59b8      	ldr	r0, [r7, r6]
 80006d6:	2800      	cmp	r0, #0
 80006d8:	d005      	beq.n	80006e6 <usbd_register_control_callback+0x1e>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 80006da:	3501      	adds	r5, #1
 80006dc:	2d04      	cmp	r5, #4
 80006de:	d1f8      	bne.n	80006d2 <usbd_register_control_callback+0xa>
	return -1;
 80006e0:	2001      	movs	r0, #1
 80006e2:	4240      	negs	r0, r0
}
 80006e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		usbd_dev->user_control_callback[i].type = type;
 80006e6:	19a4      	adds	r4, r4, r6
 80006e8:	0025      	movs	r5, r4
 80006ea:	354c      	adds	r5, #76	; 0x4c
 80006ec:	7029      	strb	r1, [r5, #0]
		usbd_dev->user_control_callback[i].type_mask = type_mask;
 80006ee:	0021      	movs	r1, r4
 80006f0:	314d      	adds	r1, #77	; 0x4d
 80006f2:	700a      	strb	r2, [r1, #0]
		usbd_dev->user_control_callback[i].cb = callback;
 80006f4:	64a3      	str	r3, [r4, #72]	; 0x48
		return 0;
 80006f6:	e7f5      	b.n	80006e4 <usbd_register_control_callback+0x1c>

080006f8 <_usbd_control_setup>:

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 80006f8:	b570      	push	{r4, r5, r6, lr}
	struct usb_setup_data *req = &usbd_dev->control_state.req;
	(void)ea;

	usbd_dev->control_state.complete = NULL;
 80006fa:	2500      	movs	r5, #0
{
 80006fc:	0004      	movs	r4, r0

	usbd_ep_nak_set(usbd_dev, 0, 1);
 80006fe:	2201      	movs	r2, #1
 8000700:	0029      	movs	r1, r5
	usbd_dev->control_state.complete = NULL;
 8000702:	6405      	str	r5, [r0, #64]	; 0x40
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 8000704:	0006      	movs	r6, r0
	usbd_ep_nak_set(usbd_dev, 0, 1);
 8000706:	f7ff ff20 	bl	800054a <usbd_ep_nak_set>

	if (req->wLength == 0) {
 800070a:	0023      	movs	r3, r4
 800070c:	3336      	adds	r3, #54	; 0x36
 800070e:	781a      	ldrb	r2, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	781b      	ldrb	r3, [r3, #0]
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 8000714:	3630      	adds	r6, #48	; 0x30
	if (req->wLength == 0) {
 8000716:	021b      	lsls	r3, r3, #8
 8000718:	4313      	orrs	r3, r2
 800071a:	42ab      	cmp	r3, r5
 800071c:	d104      	bne.n	8000728 <_usbd_control_setup+0x30>
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
		usb_control_setup_read(usbd_dev, req);
 800071e:	0031      	movs	r1, r6
 8000720:	0020      	movs	r0, r4
 8000722:	f7ff ff9d 	bl	8000660 <usb_control_setup_read>
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 8000726:	bd70      	pop	{r4, r5, r6, pc}
	} else if (req->bmRequestType & 0x80) {
 8000728:	7832      	ldrb	r2, [r6, #0]
 800072a:	2a7f      	cmp	r2, #127	; 0x7f
 800072c:	d8f7      	bhi.n	800071e <_usbd_control_setup+0x26>
	if (req->wLength > usbd_dev->ctrl_buf_len) {
 800072e:	8aa2      	ldrh	r2, [r4, #20]
 8000730:	429a      	cmp	r2, r3
 8000732:	d203      	bcs.n	800073c <_usbd_control_setup+0x44>
		stall_transaction(usbd_dev);
 8000734:	0020      	movs	r0, r4
 8000736:	f7ff ff6a 	bl	800060e <stall_transaction>
		return;
 800073a:	e7f4      	b.n	8000726 <_usbd_control_setup+0x2e>
		usbd_dev->control_state.state = LAST_DATA_OUT;
 800073c:	0029      	movs	r1, r5
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 800073e:	6922      	ldr	r2, [r4, #16]
	usbd_dev->control_state.ctrl_len = 0;
 8000740:	87a5      	strh	r5, [r4, #60]	; 0x3c
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8000742:	63a2      	str	r2, [r4, #56]	; 0x38
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8000744:	6822      	ldr	r2, [r4, #0]
	usbd_ep_nak_set(usbd_dev, 0, 0);
 8000746:	0020      	movs	r0, r4
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8000748:	79d2      	ldrb	r2, [r2, #7]
		usbd_dev->control_state.state = LAST_DATA_OUT;
 800074a:	429a      	cmp	r2, r3
 800074c:	4169      	adcs	r1, r5
 800074e:	0022      	movs	r2, r4
 8000750:	000b      	movs	r3, r1
 8000752:	322c      	adds	r2, #44	; 0x2c
 8000754:	3305      	adds	r3, #5
 8000756:	7013      	strb	r3, [r2, #0]
	usbd_ep_nak_set(usbd_dev, 0, 0);
 8000758:	0029      	movs	r1, r5
 800075a:	002a      	movs	r2, r5
 800075c:	f7ff fef5 	bl	800054a <usbd_ep_nak_set>
}
 8000760:	e7e1      	b.n	8000726 <_usbd_control_setup+0x2e>

08000762 <_usbd_control_out>:

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
 8000762:	b570      	push	{r4, r5, r6, lr}
	(void)ea;

	switch (usbd_dev->control_state.state) {
 8000764:	0005      	movs	r5, r0
 8000766:	352c      	adds	r5, #44	; 0x2c
 8000768:	782b      	ldrb	r3, [r5, #0]
{
 800076a:	0004      	movs	r4, r0
	switch (usbd_dev->control_state.state) {
 800076c:	2b06      	cmp	r3, #6
 800076e:	d011      	beq.n	8000794 <_usbd_control_out+0x32>
 8000770:	2b07      	cmp	r3, #7
 8000772:	d026      	beq.n	80007c2 <_usbd_control_out+0x60>
 8000774:	2b05      	cmp	r3, #5
 8000776:	d121      	bne.n	80007bc <_usbd_control_out+0x5a>
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8000778:	f7ff ff53 	bl	8000622 <usb_control_recv_chunk>
 800077c:	2800      	cmp	r0, #0
 800077e:	db08      	blt.n	8000792 <_usbd_control_out+0x30>
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
					usbd_dev->control_state.ctrl_len) <=
 8000780:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
		if ((usbd_dev->control_state.req.wLength -
 8000782:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000784:	1a9b      	subs	r3, r3, r2
					usbd_dev->desc->bMaxPacketSize0) {
 8000786:	6822      	ldr	r2, [r4, #0]
 8000788:	79d2      	ldrb	r2, [r2, #7]
		if ((usbd_dev->control_state.req.wLength -
 800078a:	4293      	cmp	r3, r2
 800078c:	dc01      	bgt.n	8000792 <_usbd_control_out+0x30>
			usbd_dev->control_state.state = LAST_DATA_OUT;
 800078e:	2306      	movs	r3, #6
		 */
		if (usb_control_request_dispatch(usbd_dev,
					&(usbd_dev->control_state.req))) {
			/* Go to status stage on success. */
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
			usbd_dev->control_state.state = STATUS_IN;
 8000790:	702b      	strb	r3, [r5, #0]
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8000792:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8000794:	f7ff ff45 	bl	8000622 <usb_control_recv_chunk>
 8000798:	2800      	cmp	r0, #0
 800079a:	dbfa      	blt.n	8000792 <_usbd_control_out+0x30>
		if (usb_control_request_dispatch(usbd_dev,
 800079c:	0021      	movs	r1, r4
 800079e:	0020      	movs	r0, r4
 80007a0:	3130      	adds	r1, #48	; 0x30
 80007a2:	f7ff ff01 	bl	80005a8 <usb_control_request_dispatch>
 80007a6:	2800      	cmp	r0, #0
 80007a8:	d007      	beq.n	80007ba <_usbd_control_out+0x58>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 80007aa:	2300      	movs	r3, #0
 80007ac:	0020      	movs	r0, r4
 80007ae:	001a      	movs	r2, r3
 80007b0:	0019      	movs	r1, r3
 80007b2:	f7ff feae 	bl	8000512 <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 80007b6:	2304      	movs	r3, #4
 80007b8:	e7ea      	b.n	8000790 <_usbd_control_out+0x2e>
			stall_transaction(usbd_dev);
 80007ba:	0020      	movs	r0, r4
		stall_transaction(usbd_dev);
 80007bc:	f7ff ff27 	bl	800060e <stall_transaction>
}
 80007c0:	e7e7      	b.n	8000792 <_usbd_control_out+0x30>
		usbd_ep_read_packet(usbd_dev, 0, NULL, 0);
 80007c2:	2300      	movs	r3, #0
 80007c4:	001a      	movs	r2, r3
 80007c6:	0019      	movs	r1, r3
 80007c8:	f7ff feaa 	bl	8000520 <usbd_ep_read_packet>
		usbd_dev->control_state.state = IDLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	702b      	strb	r3, [r5, #0]
		if (usbd_dev->control_state.complete) {
 80007d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d003      	beq.n	80007de <_usbd_control_out+0x7c>
			usbd_dev->control_state.complete(usbd_dev,
 80007d6:	0021      	movs	r1, r4
 80007d8:	0020      	movs	r0, r4
 80007da:	3130      	adds	r1, #48	; 0x30
 80007dc:	4798      	blx	r3
		usbd_dev->control_state.complete = NULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 80007e2:	e7d6      	b.n	8000792 <_usbd_control_out+0x30>

080007e4 <_usbd_control_in>:

void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
 80007e4:	b570      	push	{r4, r5, r6, lr}
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 80007e6:	0005      	movs	r5, r0
 80007e8:	352c      	adds	r5, #44	; 0x2c
 80007ea:	782b      	ldrb	r3, [r5, #0]
{
 80007ec:	0004      	movs	r4, r0
	switch (usbd_dev->control_state.state) {
 80007ee:	2b03      	cmp	r3, #3
 80007f0:	d006      	beq.n	8000800 <_usbd_control_in+0x1c>
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	d00b      	beq.n	800080e <_usbd_control_in+0x2a>
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d121      	bne.n	800083e <_usbd_control_in+0x5a>
	case DATA_IN:
		usb_control_send_chunk(usbd_dev);
 80007fa:	f7ff fead 	bl	8000558 <usb_control_send_chunk>
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 80007fe:	bd70      	pop	{r4, r5, r6, pc}
		usbd_dev->control_state.state = STATUS_OUT;
 8000800:	2307      	movs	r3, #7
		usbd_ep_nak_set(usbd_dev, 0, 0);
 8000802:	2200      	movs	r2, #0
		usbd_dev->control_state.state = STATUS_OUT;
 8000804:	702b      	strb	r3, [r5, #0]
		usbd_ep_nak_set(usbd_dev, 0, 0);
 8000806:	0011      	movs	r1, r2
 8000808:	f7ff fe9f 	bl	800054a <usbd_ep_nak_set>
		break;
 800080c:	e7f7      	b.n	80007fe <_usbd_control_in+0x1a>
		if (usbd_dev->control_state.complete) {
 800080e:	0006      	movs	r6, r0
 8000810:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000812:	3630      	adds	r6, #48	; 0x30
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <_usbd_control_in+0x38>
			usbd_dev->control_state.complete(usbd_dev,
 8000818:	0031      	movs	r1, r6
 800081a:	4798      	blx	r3
		if ((req->bmRequestType == 0) &&
 800081c:	7833      	ldrb	r3, [r6, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d10a      	bne.n	8000838 <_usbd_control_in+0x54>
 8000822:	7873      	ldrb	r3, [r6, #1]
 8000824:	2b05      	cmp	r3, #5
 8000826:	d107      	bne.n	8000838 <_usbd_control_in+0x54>
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8000828:	0023      	movs	r3, r4
 800082a:	3332      	adds	r3, #50	; 0x32
 800082c:	7819      	ldrb	r1, [r3, #0]
 800082e:	33aa      	adds	r3, #170	; 0xaa
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	0020      	movs	r0, r4
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	4798      	blx	r3
		usbd_dev->control_state.state = IDLE;
 8000838:	2300      	movs	r3, #0
 800083a:	702b      	strb	r3, [r5, #0]
		break;
 800083c:	e7df      	b.n	80007fe <_usbd_control_in+0x1a>
		stall_transaction(usbd_dev);
 800083e:	f7ff fee6 	bl	800060e <stall_transaction>
}
 8000842:	e7dc      	b.n	80007fe <_usbd_control_in+0x1a>

08000844 <usb_standard_set_address>:

static enum usbd_request_return_codes
usb_standard_set_address(usbd_device *usbd_dev,
			 struct usb_setup_data *req, uint8_t **buf,
			 uint16_t *len)
{
 8000844:	b510      	push	{r4, lr}
	(void)req;
	(void)buf;
	(void)len;

	/* The actual address is only latched at the STATUS IN stage. */
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 8000846:	780c      	ldrb	r4, [r1, #0]
 8000848:	2c00      	cmp	r4, #0
 800084a:	d114      	bne.n	8000876 <usb_standard_set_address+0x32>
 800084c:	78cb      	ldrb	r3, [r1, #3]
 800084e:	788a      	ldrb	r2, [r1, #2]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	4313      	orrs	r3, r2
 8000854:	2b7f      	cmp	r3, #127	; 0x7f
 8000856:	d80c      	bhi.n	8000872 <usb_standard_set_address+0x2e>
		return USBD_REQ_NOTSUPP;
	}

	usbd_dev->current_address = req->wValue;
 8000858:	7583      	strb	r3, [r0, #22]

	/*
	 * Special workaround for STM32F10[57] that require the address
	 * to be set here. This is undocumented!
	 */
	if (usbd_dev->driver->set_address_before_status) {
 800085a:	0003      	movs	r3, r0
 800085c:	33dc      	adds	r3, #220	; 0xdc
 800085e:	681b      	ldr	r3, [r3, #0]
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
	}

	return USBD_REQ_HANDLED;
 8000860:	3401      	adds	r4, #1
	if (usbd_dev->driver->set_address_before_status) {
 8000862:	001a      	movs	r2, r3
 8000864:	3230      	adds	r2, #48	; 0x30
 8000866:	7812      	ldrb	r2, [r2, #0]
 8000868:	2a00      	cmp	r2, #0
 800086a:	d002      	beq.n	8000872 <usb_standard_set_address+0x2e>
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
 800086c:	7889      	ldrb	r1, [r1, #2]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4798      	blx	r3
}
 8000872:	0020      	movs	r0, r4
 8000874:	bd10      	pop	{r4, pc}
		return USBD_REQ_NOTSUPP;
 8000876:	2400      	movs	r4, #0
 8000878:	e7fb      	b.n	8000872 <usb_standard_set_address+0x2e>

0800087a <usb_standard_set_configuration>:

static enum usbd_request_return_codes
usb_standard_set_configuration(usbd_device *usbd_dev,
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
 800087a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	(void)req;
	(void)buf;
	(void)len;

	if (req->wValue > 0) {
 800087c:	78ca      	ldrb	r2, [r1, #3]
 800087e:	788b      	ldrb	r3, [r1, #2]
 8000880:	0212      	lsls	r2, r2, #8
{
 8000882:	0004      	movs	r4, r0
 8000884:	000d      	movs	r5, r1
	if (req->wValue > 0) {
 8000886:	431a      	orrs	r2, r3
 8000888:	d010      	beq.n	80008ac <usb_standard_set_configuration+0x32>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 800088a:	6803      	ldr	r3, [r0, #0]
			if (req->wValue
			    == usbd_dev->config[i].bConfigurationValue) {
 800088c:	260d      	movs	r6, #13
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 800088e:	7c58      	ldrb	r0, [r3, #17]
 8000890:	2300      	movs	r3, #0
 8000892:	4298      	cmp	r0, r3
 8000894:	d801      	bhi.n	800089a <usb_standard_set_configuration+0x20>
				found_index = i;
				break;
			}
		}
		if (found_index < 0) {
			return USBD_REQ_NOTSUPP;
 8000896:	2000      	movs	r0, #0
			}
		}
	}

	return USBD_REQ_HANDLED;
}
 8000898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			    == usbd_dev->config[i].bConfigurationValue) {
 800089a:	0031      	movs	r1, r6
 800089c:	4359      	muls	r1, r3
 800089e:	6867      	ldr	r7, [r4, #4]
 80008a0:	1879      	adds	r1, r7, r1
			if (req->wValue
 80008a2:	7949      	ldrb	r1, [r1, #5]
 80008a4:	4291      	cmp	r1, r2
 80008a6:	d003      	beq.n	80008b0 <usb_standard_set_configuration+0x36>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 80008a8:	3301      	adds	r3, #1
 80008aa:	e7f2      	b.n	8000892 <usb_standard_set_configuration+0x18>
	int found_index = -1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	425b      	negs	r3, r3
	usbd_dev->current_config = found_index + 1;
 80008b0:	3301      	adds	r3, #1
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	75e3      	strb	r3, [r4, #23]
	if (usbd_dev->current_config > 0) {
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d10c      	bne.n	80008d4 <usb_standard_set_configuration+0x5a>
	usbd_dev->driver->ep_reset(usbd_dev);
 80008ba:	0023      	movs	r3, r4
	if (usbd_dev->user_callback_set_config[0]) {
 80008bc:	0026      	movs	r6, r4
	usbd_dev->driver->ep_reset(usbd_dev);
 80008be:	33dc      	adds	r3, #220	; 0xdc
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	0020      	movs	r0, r4
 80008c4:	68db      	ldr	r3, [r3, #12]
	if (usbd_dev->user_callback_set_config[0]) {
 80008c6:	36c8      	adds	r6, #200	; 0xc8
	usbd_dev->driver->ep_reset(usbd_dev);
 80008c8:	4798      	blx	r3
	if (usbd_dev->user_callback_set_config[0]) {
 80008ca:	6833      	ldr	r3, [r6, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d11c      	bne.n	800090a <usb_standard_set_configuration+0x90>
	return USBD_REQ_HANDLED;
 80008d0:	2001      	movs	r0, #1
 80008d2:	e7e1      	b.n	8000898 <usb_standard_set_configuration+0x1e>
		cfg = &usbd_dev->config[usbd_dev->current_config - 1];
 80008d4:	220d      	movs	r2, #13
 80008d6:	4353      	muls	r3, r2
 80008d8:	6862      	ldr	r2, [r4, #4]
 80008da:	3b0d      	subs	r3, #13
 80008dc:	18d3      	adds	r3, r2, r3
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 80008de:	2200      	movs	r2, #0
				*cfg->interface[i].cur_altsetting = 0;
 80008e0:	0016      	movs	r6, r2
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 80008e2:	7919      	ldrb	r1, [r3, #4]
 80008e4:	4291      	cmp	r1, r2
 80008e6:	d9e8      	bls.n	80008ba <usb_standard_set_configuration+0x40>
			if (cfg->interface[i].cur_altsetting) {
 80008e8:	7a98      	ldrb	r0, [r3, #10]
 80008ea:	7a59      	ldrb	r1, [r3, #9]
 80008ec:	0200      	lsls	r0, r0, #8
 80008ee:	4308      	orrs	r0, r1
 80008f0:	7ad9      	ldrb	r1, [r3, #11]
 80008f2:	0409      	lsls	r1, r1, #16
 80008f4:	4308      	orrs	r0, r1
 80008f6:	7b19      	ldrb	r1, [r3, #12]
 80008f8:	0609      	lsls	r1, r1, #24
 80008fa:	4301      	orrs	r1, r0
 80008fc:	0110      	lsls	r0, r2, #4
 80008fe:	5841      	ldr	r1, [r0, r1]
 8000900:	2900      	cmp	r1, #0
 8000902:	d000      	beq.n	8000906 <usb_standard_set_configuration+0x8c>
				*cfg->interface[i].cur_altsetting = 0;
 8000904:	700e      	strb	r6, [r1, #0]
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8000906:	3201      	adds	r2, #1
 8000908:	e7eb      	b.n	80008e2 <usb_standard_set_configuration+0x68>
			usbd_dev->user_control_callback[i].cb = NULL;
 800090a:	2300      	movs	r3, #0
 800090c:	0027      	movs	r7, r4
 800090e:	64a3      	str	r3, [r4, #72]	; 0x48
 8000910:	6523      	str	r3, [r4, #80]	; 0x50
 8000912:	65a3      	str	r3, [r4, #88]	; 0x58
 8000914:	6623      	str	r3, [r4, #96]	; 0x60
		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8000916:	37d8      	adds	r7, #216	; 0xd8
			if (usbd_dev->user_callback_set_config[i]) {
 8000918:	6833      	ldr	r3, [r6, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d005      	beq.n	800092a <usb_standard_set_configuration+0xb0>
				usbd_dev->user_callback_set_config[i](usbd_dev,
 800091e:	78e9      	ldrb	r1, [r5, #3]
 8000920:	78aa      	ldrb	r2, [r5, #2]
 8000922:	0209      	lsls	r1, r1, #8
 8000924:	0020      	movs	r0, r4
 8000926:	4311      	orrs	r1, r2
 8000928:	4798      	blx	r3
		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 800092a:	3604      	adds	r6, #4
 800092c:	42b7      	cmp	r7, r6
 800092e:	d1f3      	bne.n	8000918 <usb_standard_set_configuration+0x9e>
 8000930:	e7ce      	b.n	80008d0 <usb_standard_set_configuration+0x56>

08000932 <usb_standard_get_configuration>:
			       struct usb_setup_data *req,
			       uint8_t **buf, uint16_t *len)
{
	(void)req;

	if (*len > 1) {
 8000932:	8819      	ldrh	r1, [r3, #0]
{
 8000934:	b510      	push	{r4, lr}
	if (*len > 1) {
 8000936:	2901      	cmp	r1, #1
 8000938:	d901      	bls.n	800093e <usb_standard_get_configuration+0xc>
		*len = 1;
 800093a:	2101      	movs	r1, #1
 800093c:	8019      	strh	r1, [r3, #0]
	}
	if (usbd_dev->current_config > 0) {
 800093e:	7dc1      	ldrb	r1, [r0, #23]
 8000940:	6814      	ldr	r4, [r2, #0]
 8000942:	2900      	cmp	r1, #0
 8000944:	d008      	beq.n	8000958 <usb_standard_get_configuration+0x26>
		const struct usb_config_descriptor *cfg =
			&usbd_dev->config[usbd_dev->current_config - 1];
		(*buf)[0] = cfg->bConfigurationValue;
 8000946:	220d      	movs	r2, #13
 8000948:	4351      	muls	r1, r2
 800094a:	6843      	ldr	r3, [r0, #4]
 800094c:	185b      	adds	r3, r3, r1
 800094e:	3b0d      	subs	r3, #13
 8000950:	795b      	ldrb	r3, [r3, #5]
 8000952:	7023      	strb	r3, [r4, #0]
	} else {
		(*buf)[0] = 0;
	}

	return USBD_REQ_HANDLED;
}
 8000954:	2001      	movs	r0, #1
 8000956:	bd10      	pop	{r4, pc}
		(*buf)[0] = 0;
 8000958:	7021      	strb	r1, [r4, #0]
 800095a:	e7fb      	b.n	8000954 <usb_standard_get_configuration+0x22>

0800095c <usb_standard_get_interface>:

static enum usbd_request_return_codes
usb_standard_get_interface(usbd_device *usbd_dev,
			   struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 800095c:	b570      	push	{r4, r5, r6, lr}
	uint8_t *cur_altsetting;
	const struct usb_config_descriptor *cfx =
		&usbd_dev->config[usbd_dev->current_config - 1];
 800095e:	240d      	movs	r4, #13
 8000960:	7dc5      	ldrb	r5, [r0, #23]
	const struct usb_config_descriptor *cfx =
 8000962:	6840      	ldr	r0, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 8000964:	436c      	muls	r4, r5
 8000966:	3c0d      	subs	r4, #13
	const struct usb_config_descriptor *cfx =
 8000968:	1904      	adds	r4, r0, r4

	if (req->wIndex >= cfx->bNumInterfaces) {
 800096a:	794d      	ldrb	r5, [r1, #5]
 800096c:	7908      	ldrb	r0, [r1, #4]
 800096e:	7926      	ldrb	r6, [r4, #4]
 8000970:	022d      	lsls	r5, r5, #8
 8000972:	4305      	orrs	r5, r0
		return USBD_REQ_NOTSUPP;
 8000974:	2000      	movs	r0, #0
	if (req->wIndex >= cfx->bNumInterfaces) {
 8000976:	42ae      	cmp	r6, r5
 8000978:	d917      	bls.n	80009aa <usb_standard_get_interface+0x4e>
	}

	*len = 1;
 800097a:	3001      	adds	r0, #1
 800097c:	8018      	strh	r0, [r3, #0]
	cur_altsetting = cfx->interface[req->wIndex].cur_altsetting;
 800097e:	7aa3      	ldrb	r3, [r4, #10]
 8000980:	7a60      	ldrb	r0, [r4, #9]
 8000982:	021b      	lsls	r3, r3, #8
 8000984:	4303      	orrs	r3, r0
 8000986:	7ae0      	ldrb	r0, [r4, #11]
 8000988:	0400      	lsls	r0, r0, #16
 800098a:	4303      	orrs	r3, r0
 800098c:	7b20      	ldrb	r0, [r4, #12]
 800098e:	790c      	ldrb	r4, [r1, #4]
 8000990:	0600      	lsls	r0, r0, #24
 8000992:	4318      	orrs	r0, r3
 8000994:	794b      	ldrb	r3, [r1, #5]
 8000996:	021b      	lsls	r3, r3, #8
 8000998:	4323      	orrs	r3, r4
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	581b      	ldr	r3, [r3, r0]
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 800099e:	1e19      	subs	r1, r3, #0
 80009a0:	d000      	beq.n	80009a4 <usb_standard_get_interface+0x48>
 80009a2:	7819      	ldrb	r1, [r3, #0]

	return USBD_REQ_HANDLED;
 80009a4:	2001      	movs	r0, #1
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 80009a6:	6813      	ldr	r3, [r2, #0]
 80009a8:	7019      	strb	r1, [r3, #0]
}
 80009aa:	bd70      	pop	{r4, r5, r6, pc}

080009ac <usb_standard_device_get_status>:
	(void)usbd_dev;
	(void)req;

	/* bit 0: self powered */
	/* bit 1: remote wakeup */
	if (*len > 2) {
 80009ac:	8819      	ldrh	r1, [r3, #0]
 80009ae:	2902      	cmp	r1, #2
 80009b0:	d901      	bls.n	80009b6 <usb_standard_device_get_status+0xa>
		*len = 2;
 80009b2:	2102      	movs	r1, #2
 80009b4:	8019      	strh	r1, [r3, #0]
	}
	(*buf)[0] = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	6811      	ldr	r1, [r2, #0]
	(*buf)[1] = 0;

	return USBD_REQ_HANDLED;
}
 80009ba:	2001      	movs	r0, #1
	(*buf)[0] = 0;
 80009bc:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	7053      	strb	r3, [r2, #1]
}
 80009c2:	4770      	bx	lr

080009c4 <usb_standard_endpoint_get_status>:

static enum usbd_request_return_codes
usb_standard_endpoint_get_status(usbd_device *usbd_dev,
				 struct usb_setup_data *req,
				 uint8_t **buf, uint16_t *len)
{
 80009c4:	b510      	push	{r4, lr}
 80009c6:	0014      	movs	r4, r2
	(void)req;

	if (*len > 2) {
 80009c8:	881a      	ldrh	r2, [r3, #0]
 80009ca:	2a02      	cmp	r2, #2
 80009cc:	d901      	bls.n	80009d2 <usb_standard_endpoint_get_status+0xe>
		*len = 2;
 80009ce:	2202      	movs	r2, #2
 80009d0:	801a      	strh	r2, [r3, #0]
	}
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 80009d2:	7909      	ldrb	r1, [r1, #4]
 80009d4:	f7ff fdb2 	bl	800053c <usbd_ep_stall_get>
 80009d8:	1e43      	subs	r3, r0, #1
 80009da:	4198      	sbcs	r0, r3
	(*buf)[1] = 0;
 80009dc:	2200      	movs	r2, #0
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 80009de:	6823      	ldr	r3, [r4, #0]
 80009e0:	7018      	strb	r0, [r3, #0]
	(*buf)[1] = 0;
 80009e2:	6823      	ldr	r3, [r4, #0]

	return USBD_REQ_HANDLED;
}
 80009e4:	2001      	movs	r0, #1
	(*buf)[1] = 0;
 80009e6:	705a      	strb	r2, [r3, #1]
}
 80009e8:	bd10      	pop	{r4, pc}

080009ea <usb_standard_endpoint_stall>:

static enum usbd_request_return_codes
usb_standard_endpoint_stall(usbd_device *usbd_dev,
			    struct usb_setup_data *req,
			    uint8_t **buf, uint16_t *len)
{
 80009ea:	b510      	push	{r4, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 1);
 80009ec:	2201      	movs	r2, #1
 80009ee:	7909      	ldrb	r1, [r1, #4]
 80009f0:	f7ff fd9d 	bl	800052e <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 80009f4:	2001      	movs	r0, #1
 80009f6:	bd10      	pop	{r4, pc}

080009f8 <usb_standard_endpoint_unstall>:

static enum usbd_request_return_codes
usb_standard_endpoint_unstall(usbd_device *usbd_dev,
			      struct usb_setup_data *req,
			      uint8_t **buf, uint16_t *len)
{
 80009f8:	b510      	push	{r4, lr}
	(void)buf;
	(void)len;

	usbd_ep_stall_set(usbd_dev, req->wIndex, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	7909      	ldrb	r1, [r1, #4]
 80009fe:	f7ff fd96 	bl	800052e <usbd_ep_stall_set>

	return USBD_REQ_HANDLED;
}
 8000a02:	2001      	movs	r0, #1
 8000a04:	bd10      	pop	{r4, pc}

08000a06 <usb_standard_set_interface>:
{
 8000a06:	b570      	push	{r4, r5, r6, lr}
		&usbd_dev->config[usbd_dev->current_config - 1];
 8000a08:	260d      	movs	r6, #13
{
 8000a0a:	001d      	movs	r5, r3
		&usbd_dev->config[usbd_dev->current_config - 1];
 8000a0c:	7dc3      	ldrb	r3, [r0, #23]
	if (req->wIndex >= cfx->bNumInterfaces) {
 8000a0e:	794c      	ldrb	r4, [r1, #5]
		&usbd_dev->config[usbd_dev->current_config - 1];
 8000a10:	435e      	muls	r6, r3
	const struct usb_config_descriptor *cfx =
 8000a12:	6843      	ldr	r3, [r0, #4]
		&usbd_dev->config[usbd_dev->current_config - 1];
 8000a14:	3e0d      	subs	r6, #13
	const struct usb_config_descriptor *cfx =
 8000a16:	199e      	adds	r6, r3, r6
	if (req->wIndex >= cfx->bNumInterfaces) {
 8000a18:	790b      	ldrb	r3, [r1, #4]
 8000a1a:	0224      	lsls	r4, r4, #8
 8000a1c:	431c      	orrs	r4, r3
 8000a1e:	7933      	ldrb	r3, [r6, #4]
		return USBD_REQ_NOTSUPP;
 8000a20:	2200      	movs	r2, #0
	if (req->wIndex >= cfx->bNumInterfaces) {
 8000a22:	42a3      	cmp	r3, r4
 8000a24:	d92b      	bls.n	8000a7e <usb_standard_set_interface+0x78>
	iface = &cfx->interface[req->wIndex];
 8000a26:	7ab2      	ldrb	r2, [r6, #10]
 8000a28:	7a73      	ldrb	r3, [r6, #9]
 8000a2a:	0212      	lsls	r2, r2, #8
 8000a2c:	431a      	orrs	r2, r3
 8000a2e:	7af3      	ldrb	r3, [r6, #11]
 8000a30:	0124      	lsls	r4, r4, #4
 8000a32:	041b      	lsls	r3, r3, #16
 8000a34:	431a      	orrs	r2, r3
 8000a36:	7b33      	ldrb	r3, [r6, #12]
 8000a38:	061b      	lsls	r3, r3, #24
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	191b      	adds	r3, r3, r4
	if (req->wValue >= iface->num_altsetting) {
 8000a3e:	78cc      	ldrb	r4, [r1, #3]
 8000a40:	788a      	ldrb	r2, [r1, #2]
 8000a42:	791e      	ldrb	r6, [r3, #4]
 8000a44:	0224      	lsls	r4, r4, #8
 8000a46:	4314      	orrs	r4, r2
		return USBD_REQ_NOTSUPP;
 8000a48:	2200      	movs	r2, #0
	if (req->wValue >= iface->num_altsetting) {
 8000a4a:	42a6      	cmp	r6, r4
 8000a4c:	d917      	bls.n	8000a7e <usb_standard_set_interface+0x78>
	if (iface->cur_altsetting) {
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	2a00      	cmp	r2, #0
 8000a52:	d012      	beq.n	8000a7a <usb_standard_set_interface+0x74>
		*iface->cur_altsetting = req->wValue;
 8000a54:	7014      	strb	r4, [r2, #0]
	if (usbd_dev->user_callback_set_altsetting) {
 8000a56:	0003      	movs	r3, r0
 8000a58:	33d8      	adds	r3, #216	; 0xd8
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d008      	beq.n	8000a72 <usb_standard_set_interface+0x6c>
			usbd_dev->user_callback_set_altsetting(usbd_dev,
 8000a60:	78ca      	ldrb	r2, [r1, #3]
 8000a62:	788c      	ldrb	r4, [r1, #2]
 8000a64:	0212      	lsls	r2, r2, #8
 8000a66:	4322      	orrs	r2, r4
 8000a68:	790c      	ldrb	r4, [r1, #4]
 8000a6a:	7949      	ldrb	r1, [r1, #5]
 8000a6c:	0209      	lsls	r1, r1, #8
 8000a6e:	4321      	orrs	r1, r4
 8000a70:	4798      	blx	r3
	*len = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	2201      	movs	r2, #1
 8000a76:	802b      	strh	r3, [r5, #0]
	return USBD_REQ_HANDLED;
 8000a78:	e001      	b.n	8000a7e <usb_standard_set_interface+0x78>
	} else if (req->wValue > 0) {
 8000a7a:	2c00      	cmp	r4, #0
 8000a7c:	d0eb      	beq.n	8000a56 <usb_standard_set_interface+0x50>
}
 8000a7e:	0010      	movs	r0, r2
 8000a80:	bd70      	pop	{r4, r5, r6, pc}
	...

08000a84 <usb_standard_get_descriptor>:
{
 8000a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a86:	b08f      	sub	sp, #60	; 0x3c
 8000a88:	9305      	str	r3, [sp, #20]
 8000a8a:	0014      	movs	r4, r2
	descr_idx = usb_descriptor_index(req->wValue);
 8000a8c:	78ca      	ldrb	r2, [r1, #3]
 8000a8e:	788b      	ldrb	r3, [r1, #2]
 8000a90:	0212      	lsls	r2, r2, #8
 8000a92:	4313      	orrs	r3, r2
{
 8000a94:	0006      	movs	r6, r0
	return wValue >> 8;
 8000a96:	0a12      	lsrs	r2, r2, #8
	switch (usb_descriptor_type(req->wValue)) {
 8000a98:	2a02      	cmp	r2, #2
 8000a9a:	d013      	beq.n	8000ac4 <usb_standard_get_descriptor+0x40>
 8000a9c:	2a03      	cmp	r2, #3
 8000a9e:	d100      	bne.n	8000aa2 <usb_standard_get_descriptor+0x1e>
 8000aa0:	e152      	b.n	8000d48 <usb_standard_get_descriptor+0x2c4>
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	2a01      	cmp	r2, #1
 8000aa6:	d10b      	bne.n	8000ac0 <usb_standard_get_descriptor+0x3c>
		*buf = (uint8_t *) usbd_dev->desc;
 8000aa8:	6833      	ldr	r3, [r6, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 8000aaa:	7819      	ldrb	r1, [r3, #0]
		*buf = (uint8_t *) usbd_dev->desc;
 8000aac:	6023      	str	r3, [r4, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 8000aae:	9b05      	ldr	r3, [sp, #20]
 8000ab0:	881a      	ldrh	r2, [r3, #0]
 8000ab2:	1c0b      	adds	r3, r1, #0
 8000ab4:	4291      	cmp	r1, r2
 8000ab6:	d900      	bls.n	8000aba <usb_standard_get_descriptor+0x36>
 8000ab8:	1c13      	adds	r3, r2, #0
 8000aba:	9a05      	ldr	r2, [sp, #20]
 8000abc:	8013      	strh	r3, [r2, #0]
		return USBD_REQ_HANDLED;
 8000abe:	2001      	movs	r0, #1
}
 8000ac0:	b00f      	add	sp, #60	; 0x3c
 8000ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*buf = usbd_dev->ctrl_buf;
 8000ac4:	6902      	ldr	r2, [r0, #16]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8000ac6:	b2db      	uxtb	r3, r3
		*buf = usbd_dev->ctrl_buf;
 8000ac8:	6022      	str	r2, [r4, #0]
 8000aca:	9206      	str	r2, [sp, #24]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8000acc:	9a05      	ldr	r2, [sp, #20]
 8000ace:	8814      	ldrh	r4, [r2, #0]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8000ad0:	220d      	movs	r2, #13
 8000ad2:	4353      	muls	r3, r2
 8000ad4:	6842      	ldr	r2, [r0, #4]
 8000ad6:	18d1      	adds	r1, r2, r3
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8000ad8:	5cd3      	ldrb	r3, [r2, r3]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8000ada:	9104      	str	r1, [sp, #16]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8000adc:	1c1f      	adds	r7, r3, #0
 8000ade:	42a3      	cmp	r3, r4
 8000ae0:	d900      	bls.n	8000ae4 <usb_standard_get_descriptor+0x60>
 8000ae2:	1c27      	adds	r7, r4, #0
 8000ae4:	b2bb      	uxth	r3, r7
 8000ae6:	001a      	movs	r2, r3
 8000ae8:	9904      	ldr	r1, [sp, #16]
 8000aea:	9806      	ldr	r0, [sp, #24]
 8000aec:	9303      	str	r3, [sp, #12]
 8000aee:	f000 fd37 	bl	8001560 <memcpy>
	buf += count;
 8000af2:	9a03      	ldr	r2, [sp, #12]
 8000af4:	9b06      	ldr	r3, [sp, #24]
 8000af6:	4694      	mov	ip, r2
	len -= count;
 8000af8:	1aa4      	subs	r4, r4, r2
	buf += count;
 8000afa:	4463      	add	r3, ip
 8000afc:	9302      	str	r3, [sp, #8]
	len -= count;
 8000afe:	b2a3      	uxth	r3, r4
 8000b00:	9301      	str	r3, [sp, #4]
	totallen += cfg->bLength;
 8000b02:	9b04      	ldr	r3, [sp, #16]
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	ab0c      	add	r3, sp, #48	; 0x30
 8000b08:	80da      	strh	r2, [r3, #6]
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	9307      	str	r3, [sp, #28]
 8000b0e:	9b04      	ldr	r3, [sp, #16]
 8000b10:	791a      	ldrb	r2, [r3, #4]
 8000b12:	466b      	mov	r3, sp
 8000b14:	8b9b      	ldrh	r3, [r3, #28]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d80a      	bhi.n	8000b30 <usb_standard_get_descriptor+0xac>
	memcpy((tmpbuf + 2), &totallen, sizeof(uint16_t));
 8000b1a:	9806      	ldr	r0, [sp, #24]
 8000b1c:	ab0c      	add	r3, sp, #48	; 0x30
 8000b1e:	2202      	movs	r2, #2
 8000b20:	1d99      	adds	r1, r3, #6
 8000b22:	3002      	adds	r0, #2
 8000b24:	f000 fd1c 	bl	8001560 <memcpy>
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8000b28:	9b05      	ldr	r3, [sp, #20]
 8000b2a:	9a03      	ldr	r2, [sp, #12]
 8000b2c:	801a      	strh	r2, [r3, #0]
		return USBD_REQ_HANDLED;
 8000b2e:	e7c6      	b.n	8000abe <usb_standard_get_descriptor+0x3a>
		if (cfg->interface[i].iface_assoc) {
 8000b30:	9b07      	ldr	r3, [sp, #28]
 8000b32:	9a04      	ldr	r2, [sp, #16]
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	930b      	str	r3, [sp, #44]	; 0x2c
 8000b38:	9b04      	ldr	r3, [sp, #16]
 8000b3a:	7a92      	ldrb	r2, [r2, #10]
 8000b3c:	7a5b      	ldrb	r3, [r3, #9]
 8000b3e:	0212      	lsls	r2, r2, #8
 8000b40:	431a      	orrs	r2, r3
 8000b42:	9b04      	ldr	r3, [sp, #16]
 8000b44:	7adb      	ldrb	r3, [r3, #11]
 8000b46:	041b      	lsls	r3, r3, #16
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	9b04      	ldr	r3, [sp, #16]
 8000b4c:	7b1b      	ldrb	r3, [r3, #12]
 8000b4e:	061b      	lsls	r3, r3, #24
 8000b50:	4313      	orrs	r3, r2
 8000b52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000b54:	189b      	adds	r3, r3, r2
 8000b56:	689c      	ldr	r4, [r3, #8]
 8000b58:	2c00      	cmp	r4, #0
 8000b5a:	d01d      	beq.n	8000b98 <usb_standard_get_descriptor+0x114>
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 8000b5c:	7823      	ldrb	r3, [r4, #0]
 8000b5e:	9a01      	ldr	r2, [sp, #4]
 8000b60:	1c1f      	adds	r7, r3, #0
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d901      	bls.n	8000b6a <usb_standard_get_descriptor+0xe6>
 8000b66:	466b      	mov	r3, sp
 8000b68:	889f      	ldrh	r7, [r3, #4]
 8000b6a:	b2bf      	uxth	r7, r7
 8000b6c:	003a      	movs	r2, r7
 8000b6e:	0021      	movs	r1, r4
 8000b70:	9802      	ldr	r0, [sp, #8]
 8000b72:	f000 fcf5 	bl	8001560 <memcpy>
			buf += count;
 8000b76:	9b02      	ldr	r3, [sp, #8]
 8000b78:	19db      	adds	r3, r3, r7
 8000b7a:	9302      	str	r3, [sp, #8]
			len -= count;
 8000b7c:	9b01      	ldr	r3, [sp, #4]
 8000b7e:	1bdb      	subs	r3, r3, r7
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	9301      	str	r3, [sp, #4]
			total += count;
 8000b84:	9b03      	ldr	r3, [sp, #12]
 8000b86:	18ff      	adds	r7, r7, r3
 8000b88:	b2bb      	uxth	r3, r7
 8000b8a:	9303      	str	r3, [sp, #12]
			totallen += assoc->bLength;
 8000b8c:	ab0c      	add	r3, sp, #48	; 0x30
 8000b8e:	1d9a      	adds	r2, r3, #6
 8000b90:	8811      	ldrh	r1, [r2, #0]
 8000b92:	7823      	ldrb	r3, [r4, #0]
 8000b94:	185b      	adds	r3, r3, r1
 8000b96:	8013      	strh	r3, [r2, #0]
{
 8000b98:	2300      	movs	r3, #0
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 8000b9a:	9a04      	ldr	r2, [sp, #16]
 8000b9c:	9308      	str	r3, [sp, #32]
 8000b9e:	9b04      	ldr	r3, [sp, #16]
 8000ba0:	7a92      	ldrb	r2, [r2, #10]
 8000ba2:	7a5b      	ldrb	r3, [r3, #9]
 8000ba4:	0212      	lsls	r2, r2, #8
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	9b04      	ldr	r3, [sp, #16]
 8000baa:	7adb      	ldrb	r3, [r3, #11]
 8000bac:	041b      	lsls	r3, r3, #16
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	9b04      	ldr	r3, [sp, #16]
 8000bb2:	7b1b      	ldrb	r3, [r3, #12]
 8000bb4:	061b      	lsls	r3, r3, #24
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000bba:	189b      	adds	r3, r3, r2
 8000bbc:	466a      	mov	r2, sp
 8000bbe:	7919      	ldrb	r1, [r3, #4]
 8000bc0:	8c12      	ldrh	r2, [r2, #32]
 8000bc2:	4291      	cmp	r1, r2
 8000bc4:	d802      	bhi.n	8000bcc <usb_standard_get_descriptor+0x148>
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8000bc6:	9b07      	ldr	r3, [sp, #28]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	e79f      	b.n	8000b0c <usb_standard_get_descriptor+0x88>
			const struct usb_interface_descriptor *iface =
 8000bcc:	68da      	ldr	r2, [r3, #12]
 8000bce:	2315      	movs	r3, #21
 8000bd0:	9908      	ldr	r1, [sp, #32]
 8000bd2:	434b      	muls	r3, r1
 8000bd4:	18d4      	adds	r4, r2, r3
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8000bd6:	5cd3      	ldrb	r3, [r2, r3]
 8000bd8:	9a01      	ldr	r2, [sp, #4]
 8000bda:	1c1f      	adds	r7, r3, #0
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d901      	bls.n	8000be4 <usb_standard_get_descriptor+0x160>
 8000be0:	466b      	mov	r3, sp
 8000be2:	889f      	ldrh	r7, [r3, #4]
 8000be4:	b2bf      	uxth	r7, r7
 8000be6:	003a      	movs	r2, r7
 8000be8:	0021      	movs	r1, r4
 8000bea:	9802      	ldr	r0, [sp, #8]
 8000bec:	f000 fcb8 	bl	8001560 <memcpy>
			buf += count;
 8000bf0:	9b02      	ldr	r3, [sp, #8]
			totallen += iface->bLength;
 8000bf2:	7826      	ldrb	r6, [r4, #0]
			buf += count;
 8000bf4:	19db      	adds	r3, r3, r7
 8000bf6:	9302      	str	r3, [sp, #8]
			len -= count;
 8000bf8:	9b01      	ldr	r3, [sp, #4]
 8000bfa:	1bdb      	subs	r3, r3, r7
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	9301      	str	r3, [sp, #4]
			total += count;
 8000c00:	9b03      	ldr	r3, [sp, #12]
 8000c02:	18ff      	adds	r7, r7, r3
 8000c04:	b2bb      	uxth	r3, r7
 8000c06:	9303      	str	r3, [sp, #12]
			totallen += iface->bLength;
 8000c08:	ab0c      	add	r3, sp, #48	; 0x30
 8000c0a:	88da      	ldrh	r2, [r3, #6]
 8000c0c:	18b6      	adds	r6, r6, r2
 8000c0e:	b2b6      	uxth	r6, r6
 8000c10:	80de      	strh	r6, [r3, #6]
			if (iface->extra) {
 8000c12:	7ba3      	ldrb	r3, [r4, #14]
 8000c14:	7b61      	ldrb	r1, [r4, #13]
 8000c16:	021b      	lsls	r3, r3, #8
 8000c18:	430b      	orrs	r3, r1
 8000c1a:	7be1      	ldrb	r1, [r4, #15]
 8000c1c:	0409      	lsls	r1, r1, #16
 8000c1e:	430b      	orrs	r3, r1
 8000c20:	7c21      	ldrb	r1, [r4, #16]
 8000c22:	0609      	lsls	r1, r1, #24
 8000c24:	4319      	orrs	r1, r3
 8000c26:	d024      	beq.n	8000c72 <usb_standard_get_descriptor+0x1ee>
				       count = MIN(len, iface->extralen));
 8000c28:	7ca3      	ldrb	r3, [r4, #18]
 8000c2a:	7c65      	ldrb	r5, [r4, #17]
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	432b      	orrs	r3, r5
 8000c30:	7ce5      	ldrb	r5, [r4, #19]
 8000c32:	042d      	lsls	r5, r5, #16
 8000c34:	432b      	orrs	r3, r5
 8000c36:	7d25      	ldrb	r5, [r4, #20]
 8000c38:	062d      	lsls	r5, r5, #24
 8000c3a:	431d      	orrs	r5, r3
 8000c3c:	9b01      	ldr	r3, [sp, #4]
 8000c3e:	429d      	cmp	r5, r3
 8000c40:	dd00      	ble.n	8000c44 <usb_standard_get_descriptor+0x1c0>
 8000c42:	001d      	movs	r5, r3
 8000c44:	b2af      	uxth	r7, r5
				memcpy(buf, iface->extra,
 8000c46:	003a      	movs	r2, r7
 8000c48:	9802      	ldr	r0, [sp, #8]
 8000c4a:	f000 fc89 	bl	8001560 <memcpy>
				buf += count;
 8000c4e:	9b02      	ldr	r3, [sp, #8]
 8000c50:	19db      	adds	r3, r3, r7
 8000c52:	9302      	str	r3, [sp, #8]
				len -= count;
 8000c54:	9b01      	ldr	r3, [sp, #4]
 8000c56:	1bdb      	subs	r3, r3, r7
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	9301      	str	r3, [sp, #4]
				total += count;
 8000c5c:	9b03      	ldr	r3, [sp, #12]
 8000c5e:	19df      	adds	r7, r3, r7
 8000c60:	b2bb      	uxth	r3, r7
 8000c62:	9303      	str	r3, [sp, #12]
				totallen += iface->extralen;
 8000c64:	7ca3      	ldrb	r3, [r4, #18]
 8000c66:	7c62      	ldrb	r2, [r4, #17]
 8000c68:	021b      	lsls	r3, r3, #8
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	199e      	adds	r6, r3, r6
 8000c6e:	ab0c      	add	r3, sp, #48	; 0x30
 8000c70:	80de      	strh	r6, [r3, #6]
{
 8000c72:	2300      	movs	r3, #0
 8000c74:	9309      	str	r3, [sp, #36]	; 0x24
			for (k = 0; k < iface->bNumEndpoints; k++) {
 8000c76:	466b      	mov	r3, sp
 8000c78:	7922      	ldrb	r2, [r4, #4]
 8000c7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d802      	bhi.n	8000c86 <usb_standard_get_descriptor+0x202>
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 8000c80:	9b08      	ldr	r3, [sp, #32]
 8000c82:	3301      	adds	r3, #1
 8000c84:	e789      	b.n	8000b9a <usb_standard_get_descriptor+0x116>
				    &iface->endpoint[k];
 8000c86:	7aa2      	ldrb	r2, [r4, #10]
 8000c88:	7a63      	ldrb	r3, [r4, #9]
 8000c8a:	0212      	lsls	r2, r2, #8
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	7ae3      	ldrb	r3, [r4, #11]
				const struct usb_endpoint_descriptor *ep =
 8000c90:	9909      	ldr	r1, [sp, #36]	; 0x24
				    &iface->endpoint[k];
 8000c92:	041b      	lsls	r3, r3, #16
 8000c94:	431a      	orrs	r2, r3
 8000c96:	7b23      	ldrb	r3, [r4, #12]
 8000c98:	061b      	lsls	r3, r3, #24
 8000c9a:	4313      	orrs	r3, r2
				const struct usb_endpoint_descriptor *ep =
 8000c9c:	220f      	movs	r2, #15
 8000c9e:	434a      	muls	r2, r1
 8000ca0:	189d      	adds	r5, r3, r2
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 8000ca2:	5c9b      	ldrb	r3, [r3, r2]
 8000ca4:	9a01      	ldr	r2, [sp, #4]
 8000ca6:	1c1f      	adds	r7, r3, #0
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d901      	bls.n	8000cb0 <usb_standard_get_descriptor+0x22c>
 8000cac:	466b      	mov	r3, sp
 8000cae:	889f      	ldrh	r7, [r3, #4]
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	003a      	movs	r2, r7
 8000cb4:	0029      	movs	r1, r5
 8000cb6:	9802      	ldr	r0, [sp, #8]
 8000cb8:	f000 fc52 	bl	8001560 <memcpy>
				buf += count;
 8000cbc:	9b02      	ldr	r3, [sp, #8]
				totallen += ep->bLength;
 8000cbe:	aa0c      	add	r2, sp, #48	; 0x30
				buf += count;
 8000cc0:	19db      	adds	r3, r3, r7
 8000cc2:	9302      	str	r3, [sp, #8]
				len -= count;
 8000cc4:	9b01      	ldr	r3, [sp, #4]
				totallen += ep->bLength;
 8000cc6:	88d1      	ldrh	r1, [r2, #6]
				len -= count;
 8000cc8:	1bdb      	subs	r3, r3, r7
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	9301      	str	r3, [sp, #4]
				total += count;
 8000cce:	9b03      	ldr	r3, [sp, #12]
 8000cd0:	18ff      	adds	r7, r7, r3
 8000cd2:	b2bb      	uxth	r3, r7
 8000cd4:	9303      	str	r3, [sp, #12]
				totallen += ep->bLength;
 8000cd6:	782b      	ldrb	r3, [r5, #0]
 8000cd8:	185b      	adds	r3, r3, r1
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	930a      	str	r3, [sp, #40]	; 0x28
 8000cde:	80d3      	strh	r3, [r2, #6]
				if (ep->extra) {
 8000ce0:	7a2b      	ldrb	r3, [r5, #8]
 8000ce2:	79e9      	ldrb	r1, [r5, #7]
 8000ce4:	021b      	lsls	r3, r3, #8
 8000ce6:	430b      	orrs	r3, r1
 8000ce8:	7a69      	ldrb	r1, [r5, #9]
 8000cea:	0409      	lsls	r1, r1, #16
 8000cec:	430b      	orrs	r3, r1
 8000cee:	7aa9      	ldrb	r1, [r5, #10]
 8000cf0:	0609      	lsls	r1, r1, #24
 8000cf2:	4319      	orrs	r1, r3
 8000cf4:	d025      	beq.n	8000d42 <usb_standard_get_descriptor+0x2be>
					       count = MIN(len, ep->extralen));
 8000cf6:	7b2b      	ldrb	r3, [r5, #12]
 8000cf8:	7aee      	ldrb	r6, [r5, #11]
 8000cfa:	021b      	lsls	r3, r3, #8
 8000cfc:	4333      	orrs	r3, r6
 8000cfe:	7b6e      	ldrb	r6, [r5, #13]
 8000d00:	0436      	lsls	r6, r6, #16
 8000d02:	4333      	orrs	r3, r6
 8000d04:	7bae      	ldrb	r6, [r5, #14]
 8000d06:	0636      	lsls	r6, r6, #24
 8000d08:	431e      	orrs	r6, r3
 8000d0a:	9b01      	ldr	r3, [sp, #4]
 8000d0c:	429e      	cmp	r6, r3
 8000d0e:	dd00      	ble.n	8000d12 <usb_standard_get_descriptor+0x28e>
 8000d10:	001e      	movs	r6, r3
 8000d12:	b2b7      	uxth	r7, r6
					memcpy(buf, ep->extra,
 8000d14:	003a      	movs	r2, r7
 8000d16:	9802      	ldr	r0, [sp, #8]
 8000d18:	f000 fc22 	bl	8001560 <memcpy>
					buf += count;
 8000d1c:	9b02      	ldr	r3, [sp, #8]
 8000d1e:	19db      	adds	r3, r3, r7
 8000d20:	9302      	str	r3, [sp, #8]
					len -= count;
 8000d22:	9b01      	ldr	r3, [sp, #4]
 8000d24:	1bdb      	subs	r3, r3, r7
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	9301      	str	r3, [sp, #4]
					total += count;
 8000d2a:	9b03      	ldr	r3, [sp, #12]
 8000d2c:	19df      	adds	r7, r3, r7
 8000d2e:	b2bb      	uxth	r3, r7
 8000d30:	9303      	str	r3, [sp, #12]
					totallen += ep->extralen;
 8000d32:	7b2b      	ldrb	r3, [r5, #12]
 8000d34:	7aea      	ldrb	r2, [r5, #11]
 8000d36:	021b      	lsls	r3, r3, #8
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000d3c:	189b      	adds	r3, r3, r2
 8000d3e:	aa0c      	add	r2, sp, #48	; 0x30
 8000d40:	80d3      	strh	r3, [r2, #6]
			for (k = 0; k < iface->bNumEndpoints; k++) {
 8000d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d44:	3301      	adds	r3, #1
 8000d46:	e795      	b.n	8000c74 <usb_standard_get_descriptor+0x1f0>
 8000d48:	b2db      	uxtb	r3, r3
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;
 8000d4a:	6905      	ldr	r5, [r0, #16]
		if (descr_idx == 0) {
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d110      	bne.n	8000d72 <usb_standard_get_descriptor+0x2ee>
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 8000d50:	3309      	adds	r3, #9
 8000d52:	70ab      	strb	r3, [r5, #2]
 8000d54:	3b05      	subs	r3, #5
 8000d56:	70eb      	strb	r3, [r5, #3]
			*len = MIN(*len, sd->bLength);
 8000d58:	9a05      	ldr	r2, [sp, #20]
			sd->bLength = sizeof(sd->bLength) +
 8000d5a:	702b      	strb	r3, [r5, #0]
			*len = MIN(*len, sd->bLength);
 8000d5c:	8811      	ldrh	r1, [r2, #0]
 8000d5e:	1c0a      	adds	r2, r1, #0
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d900      	bls.n	8000d66 <usb_standard_get_descriptor+0x2e2>
 8000d64:	1c1a      	adds	r2, r3, #0
 8000d66:	9b05      	ldr	r3, [sp, #20]
 8000d68:	801a      	strh	r2, [r3, #0]
		sd->bDescriptorType = USB_DT_STRING;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	706b      	strb	r3, [r5, #1]
		*buf = (uint8_t *)sd;
 8000d6e:	6025      	str	r5, [r4, #0]
 8000d70:	e6a5      	b.n	8000abe <usb_standard_get_descriptor+0x3a>
			if (!usbd_dev->strings) {
 8000d72:	6887      	ldr	r7, [r0, #8]
			array_idx = descr_idx - 1;
 8000d74:	3b01      	subs	r3, #1
				return USBD_REQ_NOTSUPP;
 8000d76:	1e38      	subs	r0, r7, #0
			if (!usbd_dev->strings) {
 8000d78:	d100      	bne.n	8000d7c <usb_standard_get_descriptor+0x2f8>
 8000d7a:	e6a1      	b.n	8000ac0 <usb_standard_get_descriptor+0x3c>
			if (array_idx >= usbd_dev->num_strings) {
 8000d7c:	68f2      	ldr	r2, [r6, #12]
				return USBD_REQ_NOTSUPP;
 8000d7e:	2000      	movs	r0, #0
			if (array_idx >= usbd_dev->num_strings) {
 8000d80:	429a      	cmp	r2, r3
 8000d82:	dc00      	bgt.n	8000d86 <usb_standard_get_descriptor+0x302>
 8000d84:	e69c      	b.n	8000ac0 <usb_standard_get_descriptor+0x3c>
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 8000d86:	794a      	ldrb	r2, [r1, #5]
 8000d88:	7908      	ldrb	r0, [r1, #4]
 8000d8a:	4913      	ldr	r1, [pc, #76]	; (8000dd8 <usb_standard_get_descriptor+0x354>)
 8000d8c:	0212      	lsls	r2, r2, #8
 8000d8e:	4302      	orrs	r2, r0
				return USBD_REQ_NOTSUPP;
 8000d90:	2000      	movs	r0, #0
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 8000d92:	428a      	cmp	r2, r1
 8000d94:	d000      	beq.n	8000d98 <usb_standard_get_descriptor+0x314>
 8000d96:	e693      	b.n	8000ac0 <usb_standard_get_descriptor+0x3c>
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	59de      	ldr	r6, [r3, r7]
 8000d9c:	0030      	movs	r0, r6
 8000d9e:	f000 fbe8 	bl	8001572 <strlen>
				      sizeof(sd->bLength) +
 8000da2:	3001      	adds	r0, #1
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8000da4:	0040      	lsls	r0, r0, #1
			*len = MIN(*len, sd->bLength);
 8000da6:	9b05      	ldr	r3, [sp, #20]
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8000da8:	b2c0      	uxtb	r0, r0
 8000daa:	7028      	strb	r0, [r5, #0]
			*len = MIN(*len, sd->bLength);
 8000dac:	881a      	ldrh	r2, [r3, #0]
 8000dae:	1c13      	adds	r3, r2, #0
 8000db0:	4282      	cmp	r2, r0
 8000db2:	d900      	bls.n	8000db6 <usb_standard_get_descriptor+0x332>
 8000db4:	1c03      	adds	r3, r0, #0
 8000db6:	9a05      	ldr	r2, [sp, #20]
 8000db8:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < (*len / 2) - 1; i++) {
 8000dba:	2300      	movs	r3, #0
 8000dbc:	9a05      	ldr	r2, [sp, #20]
 8000dbe:	8812      	ldrh	r2, [r2, #0]
 8000dc0:	0852      	lsrs	r2, r2, #1
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	ddd0      	ble.n	8000d6a <usb_standard_get_descriptor+0x2e6>
				sd->wData[i] =
 8000dc8:	5cf1      	ldrb	r1, [r6, r3]
 8000dca:	005a      	lsls	r2, r3, #1
 8000dcc:	18aa      	adds	r2, r5, r2
 8000dce:	7091      	strb	r1, [r2, #2]
 8000dd0:	2100      	movs	r1, #0
			for (i = 0; i < (*len / 2) - 1; i++) {
 8000dd2:	3301      	adds	r3, #1
				sd->wData[i] =
 8000dd4:	70d1      	strb	r1, [r2, #3]
			for (i = 0; i < (*len / 2) - 1; i++) {
 8000dd6:	e7f1      	b.n	8000dbc <usb_standard_get_descriptor+0x338>
 8000dd8:	00000409 	.word	0x00000409

08000ddc <usb_standard_interface_get_status>:
 8000ddc:	8819      	ldrh	r1, [r3, #0]
 8000dde:	2902      	cmp	r1, #2
 8000de0:	d901      	bls.n	8000de6 <usb_standard_interface_get_status+0xa>
 8000de2:	2102      	movs	r1, #2
 8000de4:	8019      	strh	r1, [r3, #0]
 8000de6:	2300      	movs	r3, #0
 8000de8:	6811      	ldr	r1, [r2, #0]
 8000dea:	2001      	movs	r0, #1
 8000dec:	700b      	strb	r3, [r1, #0]
 8000dee:	6812      	ldr	r2, [r2, #0]
 8000df0:	7053      	strb	r3, [r2, #1]
 8000df2:	4770      	bx	lr

08000df4 <usbd_register_set_config_callback>:
{
 8000df4:	b510      	push	{r4, lr}
		if (usbd_dev->user_callback_set_config[i]) {
 8000df6:	0004      	movs	r4, r0
{
 8000df8:	0002      	movs	r2, r0
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8000dfa:	2300      	movs	r3, #0
		if (usbd_dev->user_callback_set_config[i]) {
 8000dfc:	34c8      	adds	r4, #200	; 0xc8
 8000dfe:	0098      	lsls	r0, r3, #2
 8000e00:	5820      	ldr	r0, [r4, r0]
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d007      	beq.n	8000e16 <usbd_register_set_config_callback+0x22>
			if (usbd_dev->user_callback_set_config[i] == callback) {
 8000e06:	4288      	cmp	r0, r1
 8000e08:	d009      	beq.n	8000e1e <usbd_register_set_config_callback+0x2a>
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d1f6      	bne.n	8000dfe <usbd_register_set_config_callback+0xa>
	return -1;
 8000e10:	2001      	movs	r0, #1
 8000e12:	4240      	negs	r0, r0
}
 8000e14:	bd10      	pop	{r4, pc}
		usbd_dev->user_callback_set_config[i] = callback;
 8000e16:	3332      	adds	r3, #50	; 0x32
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	5099      	str	r1, [r3, r2]
		return 0;
 8000e1c:	e7fa      	b.n	8000e14 <usbd_register_set_config_callback+0x20>
				return 0;
 8000e1e:	2000      	movs	r0, #0
 8000e20:	e7f8      	b.n	8000e14 <usbd_register_set_config_callback+0x20>
	...

08000e24 <_usbd_standard_request_device>:

enum usbd_request_return_codes
_usbd_standard_request_device(usbd_device *usbd_dev,
			      struct usb_setup_data *req, uint8_t **buf,
			      uint16_t *len)
{
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	0005      	movs	r5, r0
 8000e28:	7848      	ldrb	r0, [r1, #1]
 8000e2a:	2809      	cmp	r0, #9
 8000e2c:	d812      	bhi.n	8000e54 <_usbd_standard_request_device+0x30>
 8000e2e:	f000 fba7 	bl	8001580 <__gnu_thumb1_case_uqi>
 8000e32:	110d      	.short	0x110d
 8000e34:	0f111111 	.word	0x0f111111
 8000e38:	0509110b 	.word	0x0509110b
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8000e3c:	4c06      	ldr	r4, [pc, #24]	; (8000e58 <_usbd_standard_request_device+0x34>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 8000e3e:	0028      	movs	r0, r5
 8000e40:	47a0      	blx	r4
}
 8000e42:	bd70      	pop	{r4, r5, r6, pc}
		command = usb_standard_get_configuration;
 8000e44:	4c05      	ldr	r4, [pc, #20]	; (8000e5c <_usbd_standard_request_device+0x38>)
		break;
 8000e46:	e7fa      	b.n	8000e3e <_usbd_standard_request_device+0x1a>
		command = usb_standard_get_descriptor;
 8000e48:	4c05      	ldr	r4, [pc, #20]	; (8000e60 <_usbd_standard_request_device+0x3c>)
		break;
 8000e4a:	e7f8      	b.n	8000e3e <_usbd_standard_request_device+0x1a>
		command = usb_standard_device_get_status;
 8000e4c:	4c05      	ldr	r4, [pc, #20]	; (8000e64 <_usbd_standard_request_device+0x40>)
		break;
 8000e4e:	e7f6      	b.n	8000e3e <_usbd_standard_request_device+0x1a>
		command = usb_standard_set_address;
 8000e50:	4c05      	ldr	r4, [pc, #20]	; (8000e68 <_usbd_standard_request_device+0x44>)
 8000e52:	e7f4      	b.n	8000e3e <_usbd_standard_request_device+0x1a>
	switch (req->bRequest) {
 8000e54:	2000      	movs	r0, #0
 8000e56:	e7f4      	b.n	8000e42 <_usbd_standard_request_device+0x1e>
 8000e58:	0800087b 	.word	0x0800087b
 8000e5c:	08000933 	.word	0x08000933
 8000e60:	08000a85 	.word	0x08000a85
 8000e64:	080009ad 	.word	0x080009ad
 8000e68:	08000845 	.word	0x08000845

08000e6c <_usbd_standard_request_interface>:

enum usbd_request_return_codes
_usbd_standard_request_interface(usbd_device *usbd_dev,
				 struct usb_setup_data *req, uint8_t **buf,
				 uint16_t *len)
{
 8000e6c:	b570      	push	{r4, r5, r6, lr}
	enum usbd_request_return_codes (*command)(usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8000e6e:	784c      	ldrb	r4, [r1, #1]
{
 8000e70:	0005      	movs	r5, r0
	switch (req->bRequest) {
 8000e72:	2c0a      	cmp	r4, #10
 8000e74:	d008      	beq.n	8000e88 <_usbd_standard_request_interface+0x1c>
 8000e76:	2c0b      	cmp	r4, #11
 8000e78:	d008      	beq.n	8000e8c <_usbd_standard_request_interface+0x20>
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	4284      	cmp	r4, r0
 8000e7e:	d102      	bne.n	8000e86 <_usbd_standard_request_interface+0x1a>
		break;
	case USB_REQ_SET_INTERFACE:
		command = usb_standard_set_interface;
		break;
	case USB_REQ_GET_STATUS:
		command = usb_standard_interface_get_status;
 8000e80:	4c03      	ldr	r4, [pc, #12]	; (8000e90 <_usbd_standard_request_interface+0x24>)

	if (!command) {
		return USBD_REQ_NOTSUPP;
	}

	return command(usbd_dev, req, buf, len);
 8000e82:	0028      	movs	r0, r5
 8000e84:	47a0      	blx	r4
}
 8000e86:	bd70      	pop	{r4, r5, r6, pc}
		command = usb_standard_get_interface;
 8000e88:	4c02      	ldr	r4, [pc, #8]	; (8000e94 <_usbd_standard_request_interface+0x28>)
 8000e8a:	e7fa      	b.n	8000e82 <_usbd_standard_request_interface+0x16>
	switch (req->bRequest) {
 8000e8c:	4c02      	ldr	r4, [pc, #8]	; (8000e98 <_usbd_standard_request_interface+0x2c>)
 8000e8e:	e7f8      	b.n	8000e82 <_usbd_standard_request_interface+0x16>
 8000e90:	08000ddd 	.word	0x08000ddd
 8000e94:	0800095d 	.word	0x0800095d
 8000e98:	08000a07 	.word	0x08000a07

08000e9c <_usbd_standard_request_endpoint>:

enum usbd_request_return_codes
_usbd_standard_request_endpoint(usbd_device *usbd_dev,
				struct usb_setup_data *req, uint8_t **buf,
				uint16_t *len)
{
 8000e9c:	b570      	push	{r4, r5, r6, lr}
 8000e9e:	0005      	movs	r5, r0
	enum usbd_request_return_codes (*command) (usbd_device *usbd_dev,
		struct usb_setup_data *req,
		uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8000ea0:	7848      	ldrb	r0, [r1, #1]
 8000ea2:	2801      	cmp	r0, #1
 8000ea4:	d005      	beq.n	8000eb2 <_usbd_standard_request_endpoint+0x16>
 8000ea6:	2803      	cmp	r0, #3
 8000ea8:	d00c      	beq.n	8000ec4 <_usbd_standard_request_endpoint+0x28>
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d013      	beq.n	8000ed6 <_usbd_standard_request_endpoint+0x3a>
		 */
		break;
	}

	if (!command) {
		return USBD_REQ_NOTSUPP;
 8000eae:	2000      	movs	r0, #0
	}

	return command(usbd_dev, req, buf, len);
}
 8000eb0:	bd70      	pop	{r4, r5, r6, pc}
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8000eb2:	78c8      	ldrb	r0, [r1, #3]
 8000eb4:	788c      	ldrb	r4, [r1, #2]
 8000eb6:	0200      	lsls	r0, r0, #8
 8000eb8:	4320      	orrs	r0, r4
			command = usb_standard_endpoint_unstall;
 8000eba:	4c08      	ldr	r4, [pc, #32]	; (8000edc <_usbd_standard_request_endpoint+0x40>)
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8000ebc:	d1f7      	bne.n	8000eae <_usbd_standard_request_endpoint+0x12>
	return command(usbd_dev, req, buf, len);
 8000ebe:	0028      	movs	r0, r5
 8000ec0:	47a0      	blx	r4
 8000ec2:	e7f5      	b.n	8000eb0 <_usbd_standard_request_endpoint+0x14>
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8000ec4:	78cc      	ldrb	r4, [r1, #3]
 8000ec6:	7888      	ldrb	r0, [r1, #2]
 8000ec8:	0224      	lsls	r4, r4, #8
 8000eca:	4304      	orrs	r4, r0
		return USBD_REQ_NOTSUPP;
 8000ecc:	2000      	movs	r0, #0
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8000ece:	4284      	cmp	r4, r0
 8000ed0:	d1ee      	bne.n	8000eb0 <_usbd_standard_request_endpoint+0x14>
			command = usb_standard_endpoint_stall;
 8000ed2:	4c03      	ldr	r4, [pc, #12]	; (8000ee0 <_usbd_standard_request_endpoint+0x44>)
 8000ed4:	e7f3      	b.n	8000ebe <_usbd_standard_request_endpoint+0x22>
	switch (req->bRequest) {
 8000ed6:	4c03      	ldr	r4, [pc, #12]	; (8000ee4 <_usbd_standard_request_endpoint+0x48>)
 8000ed8:	e7f1      	b.n	8000ebe <_usbd_standard_request_endpoint+0x22>
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	080009f9 	.word	0x080009f9
 8000ee0:	080009eb 	.word	0x080009eb
 8000ee4:	080009c5 	.word	0x080009c5

08000ee8 <_usbd_standard_request>:

enum usbd_request_return_codes
_usbd_standard_request(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len)
{
 8000ee8:	b570      	push	{r4, r5, r6, lr}
	/* FIXME: Have class/vendor requests as well. */
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) {
 8000eea:	780d      	ldrb	r5, [r1, #0]
 8000eec:	2660      	movs	r6, #96	; 0x60
 8000eee:	002c      	movs	r4, r5
 8000ef0:	4034      	ands	r4, r6
 8000ef2:	4235      	tst	r5, r6
 8000ef4:	d112      	bne.n	8000f1c <_usbd_standard_request+0x34>
		return USBD_REQ_NOTSUPP;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
 8000ef6:	3e41      	subs	r6, #65	; 0x41
 8000ef8:	4035      	ands	r5, r6
 8000efa:	2d01      	cmp	r5, #1
 8000efc:	d008      	beq.n	8000f10 <_usbd_standard_request+0x28>
 8000efe:	2d02      	cmp	r5, #2
 8000f00:	d009      	beq.n	8000f16 <_usbd_standard_request+0x2e>
 8000f02:	2d00      	cmp	r5, #0
 8000f04:	d102      	bne.n	8000f0c <_usbd_standard_request+0x24>
	case USB_REQ_TYPE_DEVICE:
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
 8000f06:	f7ff ff8d 	bl	8000e24 <_usbd_standard_request_device>
	case USB_REQ_TYPE_INTERFACE:
		return _usbd_standard_request_interface(usbd_dev, req,
							buf, len);
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 8000f0a:	0004      	movs	r4, r0
	default:
		return USBD_REQ_NOTSUPP;
	}
}
 8000f0c:	0020      	movs	r0, r4
 8000f0e:	bd70      	pop	{r4, r5, r6, pc}
		return _usbd_standard_request_interface(usbd_dev, req,
 8000f10:	f7ff ffac 	bl	8000e6c <_usbd_standard_request_interface>
 8000f14:	e7f9      	b.n	8000f0a <_usbd_standard_request+0x22>
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 8000f16:	f7ff ffc1 	bl	8000e9c <_usbd_standard_request_endpoint>
 8000f1a:	e7f6      	b.n	8000f0a <_usbd_standard_request+0x22>
		return USBD_REQ_NOTSUPP;
 8000f1c:	2400      	movs	r4, #0
 8000f1e:	e7f5      	b.n	8000f0c <_usbd_standard_request+0x24>

08000f20 <st_usbfs_v2_disconnect>:
}

static void st_usbfs_v2_disconnect(usbd_device *usbd_dev, bool disconnected)
{
	(void)usbd_dev;
	uint16_t reg = GET_REG(USB_BCDR_REG);
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <st_usbfs_v2_disconnect+0x18>)
 8000f22:	6803      	ldr	r3, [r0, #0]
	if (disconnected) {
 8000f24:	2900      	cmp	r1, #0
 8000f26:	d004      	beq.n	8000f32 <st_usbfs_v2_disconnect+0x12>
		SET_REG(USB_BCDR_REG, reg | USB_BCDR_DPPU);
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <st_usbfs_v2_disconnect+0x1c>)
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	b29b      	uxth	r3, r3
	} else {
		SET_REG(USB_BCDR_REG, reg & ~USB_BCDR_DPPU);
 8000f2e:	6003      	str	r3, [r0, #0]
	}
}
 8000f30:	4770      	bx	lr
		SET_REG(USB_BCDR_REG, reg & ~USB_BCDR_DPPU);
 8000f32:	045b      	lsls	r3, r3, #17
 8000f34:	0c5b      	lsrs	r3, r3, #17
 8000f36:	e7fa      	b.n	8000f2e <st_usbfs_v2_disconnect+0xe>
 8000f38:	40005c58 	.word	0x40005c58
 8000f3c:	ffff8000 	.word	0xffff8000

08000f40 <st_usbfs_v2_usbd_init>:
{
 8000f40:	b510      	push	{r4, lr}
	rcc_periph_clock_enable(RCC_USB);
 8000f42:	4809      	ldr	r0, [pc, #36]	; (8000f68 <st_usbfs_v2_usbd_init+0x28>)
 8000f44:	f7ff fa86 	bl	8000454 <rcc_periph_clock_enable>
	SET_REG(USB_CNTR_REG, 0);
 8000f48:	2300      	movs	r3, #0
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <st_usbfs_v2_usbd_init+0x2c>)
	SET_REG(USB_BTABLE_REG, 0);
 8000f4c:	4908      	ldr	r1, [pc, #32]	; (8000f70 <st_usbfs_v2_usbd_init+0x30>)
	SET_REG(USB_CNTR_REG, 0);
 8000f4e:	6013      	str	r3, [r2, #0]
	SET_REG(USB_BTABLE_REG, 0);
 8000f50:	600b      	str	r3, [r1, #0]
	SET_REG(USB_ISTR_REG, 0);
 8000f52:	4908      	ldr	r1, [pc, #32]	; (8000f74 <st_usbfs_v2_usbd_init+0x34>)
}
 8000f54:	4808      	ldr	r0, [pc, #32]	; (8000f78 <st_usbfs_v2_usbd_init+0x38>)
	SET_REG(USB_ISTR_REG, 0);
 8000f56:	600b      	str	r3, [r1, #0]
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
 8000f58:	239c      	movs	r3, #156	; 0x9c
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	6013      	str	r3, [r2, #0]
	SET_REG(USB_BCDR_REG, USB_BCDR_DPPU);
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <st_usbfs_v2_usbd_init+0x3c>)
 8000f62:	0212      	lsls	r2, r2, #8
 8000f64:	601a      	str	r2, [r3, #0]
}
 8000f66:	bd10      	pop	{r4, pc}
 8000f68:	00000717 	.word	0x00000717
 8000f6c:	40005c40 	.word	0x40005c40
 8000f70:	40005c50 	.word	0x40005c50
 8000f74:	40005c44 	.word	0x40005c44
 8000f78:	2000008c 	.word	0x2000008c
 8000f7c:	40005c58 	.word	0x40005c58

08000f80 <st_usbfs_copy_to_pm>:
	for (i = 0; i < len; i += 2) {
 8000f80:	2300      	movs	r3, #0
{
 8000f82:	b5f0      	push	{r4, r5, r6, r7, lr}
		*PM++ = (uint16_t)lbuf[i+1] << 8 | lbuf[i];
 8000f84:	1c4f      	adds	r7, r1, #1
 8000f86:	18c6      	adds	r6, r0, r3
	for (i = 0; i < len; i += 2) {
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d800      	bhi.n	8000f8e <st_usbfs_copy_to_pm+0xe>
}
 8000f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*PM++ = (uint16_t)lbuf[i+1] << 8 | lbuf[i];
 8000f8e:	5cfd      	ldrb	r5, [r7, r3]
 8000f90:	5ccc      	ldrb	r4, [r1, r3]
 8000f92:	022d      	lsls	r5, r5, #8
 8000f94:	432c      	orrs	r4, r5
 8000f96:	8034      	strh	r4, [r6, #0]
	for (i = 0; i < len; i += 2) {
 8000f98:	3302      	adds	r3, #2
 8000f9a:	e7f4      	b.n	8000f86 <st_usbfs_copy_to_pm+0x6>

08000f9c <st_usbfs_copy_from_pm>:
	uint8_t odd = len & 1;
 8000f9c:	2301      	movs	r3, #1
{
 8000f9e:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t odd = len & 1;
 8000fa0:	0014      	movs	r4, r2
	if (((uintptr_t) buf) & 0x01) {
 8000fa2:	0006      	movs	r6, r0
	len >>= 1;
 8000fa4:	40da      	lsrs	r2, r3
	uint8_t odd = len & 1;
 8000fa6:	401c      	ands	r4, r3
	if (((uintptr_t) buf) & 0x01) {
 8000fa8:	4218      	tst	r0, r3
 8000faa:	d11e      	bne.n	8000fea <st_usbfs_copy_from_pm+0x4e>
	const volatile uint16_t *PM = vPM;
 8000fac:	000e      	movs	r6, r1
	len >>= 1;
 8000fae:	0013      	movs	r3, r2
 8000fb0:	0005      	movs	r5, r0
		for (; len; PM++, buf += 2, len--) {
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d011      	beq.n	8000fda <st_usbfs_copy_from_pm+0x3e>
			*(uint16_t *) buf = *PM;
 8000fb6:	8837      	ldrh	r7, [r6, #0]
		for (; len; PM++, buf += 2, len--) {
 8000fb8:	3b01      	subs	r3, #1
			*(uint16_t *) buf = *PM;
 8000fba:	802f      	strh	r7, [r5, #0]
		for (; len; PM++, buf += 2, len--) {
 8000fbc:	3602      	adds	r6, #2
 8000fbe:	3502      	adds	r5, #2
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	e7f6      	b.n	8000fb2 <st_usbfs_copy_from_pm+0x16>
			uint16_t value = *PM;
 8000fc4:	883b      	ldrh	r3, [r7, #0]
		for (; len; PM++, len--) {
 8000fc6:	3d01      	subs	r5, #1
			uint16_t value = *PM;
 8000fc8:	b29b      	uxth	r3, r3
			*(uint8_t *) buf++ = value;
 8000fca:	7033      	strb	r3, [r6, #0]
			*(uint8_t *) buf++ = value >> 8;
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	7073      	strb	r3, [r6, #1]
		for (; len; PM++, len--) {
 8000fd0:	3702      	adds	r7, #2
 8000fd2:	b2ad      	uxth	r5, r5
 8000fd4:	3602      	adds	r6, #2
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	d1f4      	bne.n	8000fc4 <st_usbfs_copy_from_pm+0x28>
 8000fda:	0052      	lsls	r2, r2, #1
 8000fdc:	1880      	adds	r0, r0, r2
 8000fde:	188a      	adds	r2, r1, r2
	if (odd) {
 8000fe0:	2c00      	cmp	r4, #0
 8000fe2:	d001      	beq.n	8000fe8 <st_usbfs_copy_from_pm+0x4c>
		*(uint8_t *) buf = *(uint8_t *) PM;
 8000fe4:	7813      	ldrb	r3, [r2, #0]
 8000fe6:	7003      	strb	r3, [r0, #0]
}
 8000fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const volatile uint16_t *PM = vPM;
 8000fea:	000f      	movs	r7, r1
	len >>= 1;
 8000fec:	0015      	movs	r5, r2
 8000fee:	e7f2      	b.n	8000fd6 <st_usbfs_copy_from_pm+0x3a>

08000ff0 <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 8000ff0:	e7fe      	b.n	8000ff0 <blocking_handler>

08000ff2 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 8000ff2:	4770      	bx	lr

08000ff4 <reset_handler>:
{
 8000ff4:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <reset_handler+0x5c>)
 8000ff8:	4a16      	ldr	r2, [pc, #88]	; (8001054 <reset_handler+0x60>)
 8000ffa:	4917      	ldr	r1, [pc, #92]	; (8001058 <reset_handler+0x64>)
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	d318      	bcc.n	8001032 <reset_handler+0x3e>
		*dest++ = 0;
 8001000:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 8001002:	4a16      	ldr	r2, [pc, #88]	; (800105c <reset_handler+0x68>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d317      	bcc.n	8001038 <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	4a15      	ldr	r2, [pc, #84]	; (8001060 <reset_handler+0x6c>)
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001010:	4c14      	ldr	r4, [pc, #80]	; (8001064 <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 8001012:	430b      	orrs	r3, r1
 8001014:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <reset_handler+0x74>)
 8001018:	429c      	cmp	r4, r3
 800101a:	d30f      	bcc.n	800103c <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 800101c:	4c13      	ldr	r4, [pc, #76]	; (800106c <reset_handler+0x78>)
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <reset_handler+0x7c>)
 8001020:	429c      	cmp	r4, r3
 8001022:	d30e      	bcc.n	8001042 <reset_handler+0x4e>
	(void)main();
 8001024:	f7ff f8fe 	bl	8000224 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001028:	4c12      	ldr	r4, [pc, #72]	; (8001074 <reset_handler+0x80>)
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <reset_handler+0x84>)
 800102c:	429c      	cmp	r4, r3
 800102e:	d30b      	bcc.n	8001048 <reset_handler+0x54>
}
 8001030:	bd10      	pop	{r4, pc}
		*dest = *src;
 8001032:	ca01      	ldmia	r2!, {r0}
 8001034:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 8001036:	e7e1      	b.n	8000ffc <reset_handler+0x8>
		*dest++ = 0;
 8001038:	c302      	stmia	r3!, {r1}
 800103a:	e7e3      	b.n	8001004 <reset_handler+0x10>
		(*fp)();
 800103c:	cc08      	ldmia	r4!, {r3}
 800103e:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001040:	e7e9      	b.n	8001016 <reset_handler+0x22>
		(*fp)();
 8001042:	cc08      	ldmia	r4!, {r3}
 8001044:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8001046:	e7ea      	b.n	800101e <reset_handler+0x2a>
		(*fp)();
 8001048:	cc08      	ldmia	r4!, {r3}
 800104a:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 800104c:	e7ed      	b.n	800102a <reset_handler+0x36>
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	20000000 	.word	0x20000000
 8001054:	080018d0 	.word	0x080018d0
 8001058:	2000000c 	.word	0x2000000c
 800105c:	20000190 	.word	0x20000190
 8001060:	e000ed14 	.word	0xe000ed14
 8001064:	080018d0 	.word	0x080018d0
 8001068:	080018d0 	.word	0x080018d0
 800106c:	080018d0 	.word	0x080018d0
 8001070:	080018d0 	.word	0x080018d0
 8001074:	080018d0 	.word	0x080018d0
 8001078:	080018d0 	.word	0x080018d0

0800107c <st_usbfs_set_address>:

void st_usbfs_set_address(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	/* Set device address and enable. */
	SET_REG(USB_DADDR_REG, (addr & USB_DADDR_ADDR) | USB_DADDR_EF);
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	4319      	orrs	r1, r3
 8001080:	4b01      	ldr	r3, [pc, #4]	; (8001088 <st_usbfs_set_address+0xc>)
 8001082:	6019      	str	r1, [r3, #0]
}
 8001084:	4770      	bx	lr
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	40005c4c 	.word	0x40005c4c

0800108c <st_usbfs_set_ep_rx_bufsize>:
	 *	0		0		0			??? "Not allowed" according to RM0091, RM0008
	 *	1		0		1			2
	 *	61		0		31			62
	 *	63		1		1			64
	 */
	if (size > 62) {
 800108c:	2a3e      	cmp	r2, #62	; 0x3e
 800108e:	d910      	bls.n	80010b2 <st_usbfs_set_ep_rx_bufsize+0x26>
		/* Round up, div by 32 and sub 1 == (size + 31)/32 - 1 == (size-1)/32)*/
		size = ((size - 1) >> 5) & 0x1F;
		realsize = (size + 1) << 5;
		/* Set BL_SIZE bit (no macro for this) */
		size |= (1<<5);
 8001090:	2320      	movs	r3, #32
		size = ((size - 1) >> 5) & 0x1F;
 8001092:	3a01      	subs	r2, #1
 8001094:	0592      	lsls	r2, r2, #22
 8001096:	0ed2      	lsrs	r2, r2, #27
		realsize = (size + 1) << 5;
 8001098:	0150      	lsls	r0, r2, #5
 800109a:	3020      	adds	r0, #32
		size |= (1<<5);
 800109c:	431a      	orrs	r2, r3
		/* round up and div by 2 */
		size = (size + 1) >> 1;
		realsize = size << 1;
	}
	/* write to the BL_SIZE and NUM_BLOCK fields */
	USB_SET_EP_RX_COUNT(ep, size << 10);
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <st_usbfs_set_ep_rx_bufsize+0x30>)
 80010a0:	00c9      	lsls	r1, r1, #3
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	0292      	lsls	r2, r2, #10
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	18c9      	adds	r1, r1, r3
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <st_usbfs_set_ep_rx_bufsize+0x34>)
 80010ac:	18c9      	adds	r1, r1, r3
 80010ae:	800a      	strh	r2, [r1, #0]
	return realsize;
}
 80010b0:	4770      	bx	lr
		size = (size + 1) >> 1;
 80010b2:	3201      	adds	r2, #1
 80010b4:	0852      	lsrs	r2, r2, #1
		realsize = size << 1;
 80010b6:	0050      	lsls	r0, r2, #1
 80010b8:	b280      	uxth	r0, r0
 80010ba:	e7f0      	b.n	800109e <st_usbfs_set_ep_rx_bufsize+0x12>
 80010bc:	40005c50 	.word	0x40005c50
 80010c0:	40006006 	.word	0x40006006

080010c4 <st_usbfs_ep_setup>:

void st_usbfs_ep_setup(usbd_device *dev, uint8_t addr, uint8_t type,
		uint16_t max_size,
		void (*callback) (usbd_device *usbd_dev,
		uint8_t ep))
{
 80010c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c6:	0005      	movs	r5, r0
	/* Translate USB standard type codes to STM32. */
	const uint16_t typelookup[] = {
 80010c8:	4837      	ldr	r0, [pc, #220]	; (80011a8 <st_usbfs_ep_setup+0xe4>)
{
 80010ca:	b085      	sub	sp, #20
	const uint16_t typelookup[] = {
 80010cc:	9002      	str	r0, [sp, #8]
 80010ce:	20c0      	movs	r0, #192	; 0xc0
		[USB_ENDPOINT_ATTR_ISOCHRONOUS] = USB_EP_TYPE_ISO,
		[USB_ENDPOINT_ATTR_BULK] = USB_EP_TYPE_BULK,
		[USB_ENDPOINT_ATTR_INTERRUPT] = USB_EP_TYPE_INTERRUPT,
	};
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;
 80010d0:	267f      	movs	r6, #127	; 0x7f
	const uint16_t typelookup[] = {
 80010d2:	04c0      	lsls	r0, r0, #19
 80010d4:	9003      	str	r0, [sp, #12]
	addr &= 0x7f;
 80010d6:	400e      	ands	r6, r1

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
 80010d8:	4834      	ldr	r0, [pc, #208]	; (80011ac <st_usbfs_ep_setup+0xe8>)
 80010da:	00b4      	lsls	r4, r6, #2
 80010dc:	1824      	adds	r4, r4, r0
 80010de:	6820      	ldr	r0, [r4, #0]
 80010e0:	4f33      	ldr	r7, [pc, #204]	; (80011b0 <st_usbfs_ep_setup+0xec>)
	USB_SET_EP_TYPE(addr, typelookup[type]);
 80010e2:	0052      	lsls	r2, r2, #1
	USB_SET_EP_ADDR(addr, addr);
 80010e4:	4038      	ands	r0, r7
 80010e6:	4330      	orrs	r0, r6
 80010e8:	b280      	uxth	r0, r0
 80010ea:	6020      	str	r0, [r4, #0]
	USB_SET_EP_TYPE(addr, typelookup[type]);
 80010ec:	6827      	ldr	r7, [r4, #0]
 80010ee:	4831      	ldr	r0, [pc, #196]	; (80011b4 <st_usbfs_ep_setup+0xf0>)
 80010f0:	4038      	ands	r0, r7
 80010f2:	af02      	add	r7, sp, #8
 80010f4:	5bd2      	ldrh	r2, [r2, r7]
 80010f6:	4f30      	ldr	r7, [pc, #192]	; (80011b8 <st_usbfs_ep_setup+0xf4>)
 80010f8:	4310      	orrs	r0, r2
 80010fa:	b280      	uxth	r0, r0
 80010fc:	b24a      	sxtb	r2, r1
 80010fe:	6020      	str	r0, [r4, #0]

	if (dir || (addr == 0)) {
 8001100:	4694      	mov	ip, r2
 8001102:	482e      	ldr	r0, [pc, #184]	; (80011bc <st_usbfs_ep_setup+0xf8>)
 8001104:	2a00      	cmp	r2, #0
 8001106:	db22      	blt.n	800114e <st_usbfs_ep_setup+0x8a>
 8001108:	2e00      	cmp	r6, #0
 800110a:	d020      	beq.n	800114e <st_usbfs_ep_setup+0x8a>
		dev->pm_top += max_size;
	}

	if (!dir) {
		uint16_t realsize;
		USB_SET_EP_RX_ADDR(addr, dev->pm_top);
 800110c:	6800      	ldr	r0, [r0, #0]
 800110e:	00f2      	lsls	r2, r6, #3
 8001110:	b280      	uxth	r0, r0
 8001112:	1812      	adds	r2, r2, r0
 8001114:	482a      	ldr	r0, [pc, #168]	; (80011c0 <st_usbfs_ep_setup+0xfc>)
 8001116:	8b29      	ldrh	r1, [r5, #24]
 8001118:	1812      	adds	r2, r2, r0
 800111a:	8011      	strh	r1, [r2, #0]
		realsize = st_usbfs_set_ep_rx_bufsize(dev, addr, max_size);
 800111c:	0028      	movs	r0, r5
 800111e:	001a      	movs	r2, r3
 8001120:	0031      	movs	r1, r6
 8001122:	f7ff ffb3 	bl	800108c <st_usbfs_set_ep_rx_bufsize>
		if (callback) {
 8001126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001128:	2b00      	cmp	r3, #0
 800112a:	d136      	bne.n	800119a <st_usbfs_ep_setup+0xd6>
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
			    (void *)callback;
		}
		USB_CLR_EP_RX_DTOG(addr);
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	4a25      	ldr	r2, [pc, #148]	; (80011c4 <st_usbfs_ep_setup+0x100>)
 8001130:	4013      	ands	r3, r2
 8001132:	6023      	str	r3, [r4, #0]
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	4a24      	ldr	r2, [pc, #144]	; (80011c8 <st_usbfs_ep_setup+0x104>)
 8001138:	401a      	ands	r2, r3
 800113a:	23c0      	movs	r3, #192	; 0xc0
 800113c:	019b      	lsls	r3, r3, #6
 800113e:	4053      	eors	r3, r2
 8001140:	433b      	orrs	r3, r7
 8001142:	b29b      	uxth	r3, r3
 8001144:	6023      	str	r3, [r4, #0]
		dev->pm_top += realsize;
 8001146:	8b2b      	ldrh	r3, [r5, #24]
 8001148:	18c0      	adds	r0, r0, r3
 800114a:	8328      	strh	r0, [r5, #24]
	}
}
 800114c:	e023      	b.n	8001196 <st_usbfs_ep_setup+0xd2>
		USB_SET_EP_TX_ADDR(addr, dev->pm_top);
 800114e:	6802      	ldr	r2, [r0, #0]
 8001150:	8b29      	ldrh	r1, [r5, #24]
 8001152:	b292      	uxth	r2, r2
 8001154:	9101      	str	r1, [sp, #4]
 8001156:	00f1      	lsls	r1, r6, #3
 8001158:	1889      	adds	r1, r1, r2
 800115a:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <st_usbfs_ep_setup+0x108>)
 800115c:	1889      	adds	r1, r1, r2
 800115e:	9a01      	ldr	r2, [sp, #4]
 8001160:	800a      	strh	r2, [r1, #0]
		if (callback) {
 8001162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001164:	2a00      	cmp	r2, #0
 8001166:	d004      	beq.n	8001172 <st_usbfs_ep_setup+0xae>
			dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
 8001168:	220c      	movs	r2, #12
 800116a:	4372      	muls	r2, r6
 800116c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800116e:	18aa      	adds	r2, r5, r2
 8001170:	6691      	str	r1, [r2, #104]	; 0x68
		USB_CLR_EP_TX_DTOG(addr);
 8001172:	6822      	ldr	r2, [r4, #0]
 8001174:	4916      	ldr	r1, [pc, #88]	; (80011d0 <st_usbfs_ep_setup+0x10c>)
 8001176:	400a      	ands	r2, r1
 8001178:	6022      	str	r2, [r4, #0]
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 800117a:	6822      	ldr	r2, [r4, #0]
 800117c:	4915      	ldr	r1, [pc, #84]	; (80011d4 <st_usbfs_ep_setup+0x110>)
 800117e:	4011      	ands	r1, r2
 8001180:	2220      	movs	r2, #32
 8001182:	404a      	eors	r2, r1
 8001184:	433a      	orrs	r2, r7
 8001186:	b292      	uxth	r2, r2
 8001188:	6022      	str	r2, [r4, #0]
		dev->pm_top += max_size;
 800118a:	8b2a      	ldrh	r2, [r5, #24]
 800118c:	189a      	adds	r2, r3, r2
 800118e:	832a      	strh	r2, [r5, #24]
	if (!dir) {
 8001190:	4662      	mov	r2, ip
 8001192:	2a00      	cmp	r2, #0
 8001194:	daba      	bge.n	800110c <st_usbfs_ep_setup+0x48>
}
 8001196:	b005      	add	sp, #20
 8001198:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
 800119a:	230c      	movs	r3, #12
 800119c:	435e      	muls	r6, r3
 800119e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011a0:	19ae      	adds	r6, r5, r6
 80011a2:	66f3      	str	r3, [r6, #108]	; 0x6c
 80011a4:	e7c2      	b.n	800112c <st_usbfs_ep_setup+0x68>
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	04000200 	.word	0x04000200
 80011ac:	40005c00 	.word	0x40005c00
 80011b0:	ffff8f80 	.word	0xffff8f80
 80011b4:	ffff898f 	.word	0xffff898f
 80011b8:	ffff8080 	.word	0xffff8080
 80011bc:	40005c50 	.word	0x40005c50
 80011c0:	40006004 	.word	0x40006004
 80011c4:	0000cf8f 	.word	0x0000cf8f
 80011c8:	0000bf8f 	.word	0x0000bf8f
 80011cc:	40006000 	.word	0x40006000
 80011d0:	00008fcf 	.word	0x00008fcf
 80011d4:	00008fbf 	.word	0x00008fbf

080011d8 <st_usbfs_endpoints_reset>:

void st_usbfs_endpoints_reset(usbd_device *dev)
{
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <st_usbfs_endpoints_reset+0x30>)
	int i;

	/* Reset all endpoints. */
	for (i = 1; i < 8; i++) {
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 80011dc:	4e0b      	ldr	r6, [pc, #44]	; (800120c <st_usbfs_endpoints_reset+0x34>)
 80011de:	490c      	ldr	r1, [pc, #48]	; (8001210 <st_usbfs_endpoints_reset+0x38>)
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 80011e0:	4d0c      	ldr	r5, [pc, #48]	; (8001214 <st_usbfs_endpoints_reset+0x3c>)
	for (i = 1; i < 8; i++) {
 80011e2:	4c0d      	ldr	r4, [pc, #52]	; (8001218 <st_usbfs_endpoints_reset+0x40>)
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 80011e4:	6813      	ldr	r3, [r2, #0]
 80011e6:	4033      	ands	r3, r6
 80011e8:	430b      	orrs	r3, r1
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	6013      	str	r3, [r2, #0]
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 80011ee:	6813      	ldr	r3, [r2, #0]
 80011f0:	402b      	ands	r3, r5
 80011f2:	430b      	orrs	r3, r1
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	c208      	stmia	r2!, {r3}
	for (i = 1; i < 8; i++) {
 80011f8:	42a2      	cmp	r2, r4
 80011fa:	d1f3      	bne.n	80011e4 <st_usbfs_endpoints_reset+0xc>
	}
	dev->pm_top = USBD_PM_TOP + (2 * dev->desc->bMaxPacketSize0);
 80011fc:	6803      	ldr	r3, [r0, #0]
 80011fe:	79db      	ldrb	r3, [r3, #7]
 8001200:	3320      	adds	r3, #32
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	8303      	strh	r3, [r0, #24]
}
 8001206:	bd70      	pop	{r4, r5, r6, pc}
 8001208:	40005c04 	.word	0x40005c04
 800120c:	ffff8fbf 	.word	0xffff8fbf
 8001210:	ffff8080 	.word	0xffff8080
 8001214:	ffffbf8f 	.word	0xffffbf8f
 8001218:	40005c20 	.word	0x40005c20

0800121c <st_usbfs_ep_stall_set>:

void st_usbfs_ep_stall_set(usbd_device *dev, uint8_t addr,
				   uint8_t stall)
{
 800121c:	b530      	push	{r4, r5, lr}
 800121e:	4822      	ldr	r0, [pc, #136]	; (80012a8 <st_usbfs_ep_stall_set+0x8c>)
	(void)dev;
	if (addr == 0) {
 8001220:	2900      	cmp	r1, #0
 8001222:	d126      	bne.n	8001272 <st_usbfs_ep_stall_set+0x56>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8001224:	4c21      	ldr	r4, [pc, #132]	; (80012ac <st_usbfs_ep_stall_set+0x90>)
 8001226:	4d22      	ldr	r5, [pc, #136]	; (80012b0 <st_usbfs_ep_stall_set+0x94>)
 8001228:	6823      	ldr	r3, [r4, #0]
 800122a:	401d      	ands	r5, r3
 800122c:	2310      	movs	r3, #16
 800122e:	2a00      	cmp	r2, #0
 8001230:	d100      	bne.n	8001234 <st_usbfs_ep_stall_set+0x18>
 8001232:	18db      	adds	r3, r3, r3
 8001234:	406b      	eors	r3, r5
 8001236:	b21b      	sxth	r3, r3
 8001238:	4303      	orrs	r3, r0
 800123a:	b29b      	uxth	r3, r3
 800123c:	6023      	str	r3, [r4, #0]
		if (!stall) {
			USB_CLR_EP_TX_DTOG(addr);
		}
	} else {
		/* Reset to DATA0 if clearing stall condition. */
		if (!stall) {
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <st_usbfs_ep_stall_set+0x90>)
 8001240:	0089      	lsls	r1, r1, #2
 8001242:	18c9      	adds	r1, r1, r3
 8001244:	2a00      	cmp	r2, #0
 8001246:	d103      	bne.n	8001250 <st_usbfs_ep_stall_set+0x34>
			USB_CLR_EP_RX_DTOG(addr);
 8001248:	680b      	ldr	r3, [r1, #0]
 800124a:	4c1a      	ldr	r4, [pc, #104]	; (80012b4 <st_usbfs_ep_stall_set+0x98>)
 800124c:	4023      	ands	r3, r4
 800124e:	600b      	str	r3, [r1, #0]
		}

		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 8001250:	680c      	ldr	r4, [r1, #0]
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <st_usbfs_ep_stall_set+0x9c>)
 8001254:	401c      	ands	r4, r3
 8001256:	0013      	movs	r3, r2
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	4193      	sbcs	r3, r2
 800125c:	425a      	negs	r2, r3
 800125e:	23c0      	movs	r3, #192	; 0xc0
 8001260:	0352      	lsls	r2, r2, #13
 8001262:	019b      	lsls	r3, r3, #6
 8001264:	18d2      	adds	r2, r2, r3
 8001266:	4062      	eors	r2, r4
 8001268:	b212      	sxth	r2, r2
 800126a:	4302      	orrs	r2, r0
 800126c:	b292      	uxth	r2, r2
 800126e:	600a      	str	r2, [r1, #0]
				   USB_EP_RX_STAT_VALID);
	}
}
 8001270:	e019      	b.n	80012a6 <st_usbfs_ep_stall_set+0x8a>
	if (addr & 0x80) {
 8001272:	b24b      	sxtb	r3, r1
 8001274:	2b00      	cmp	r3, #0
 8001276:	dae2      	bge.n	800123e <st_usbfs_ep_stall_set+0x22>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8001278:	237f      	movs	r3, #127	; 0x7f
 800127a:	4019      	ands	r1, r3
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <st_usbfs_ep_stall_set+0x90>)
 800127e:	0089      	lsls	r1, r1, #2
 8001280:	18c9      	adds	r1, r1, r3
 8001282:	680b      	ldr	r3, [r1, #0]
 8001284:	4c0a      	ldr	r4, [pc, #40]	; (80012b0 <st_usbfs_ep_stall_set+0x94>)
 8001286:	401c      	ands	r4, r3
 8001288:	2310      	movs	r3, #16
 800128a:	2a00      	cmp	r2, #0
 800128c:	d100      	bne.n	8001290 <st_usbfs_ep_stall_set+0x74>
 800128e:	18db      	adds	r3, r3, r3
 8001290:	4063      	eors	r3, r4
 8001292:	b21b      	sxth	r3, r3
 8001294:	4318      	orrs	r0, r3
 8001296:	b280      	uxth	r0, r0
 8001298:	6008      	str	r0, [r1, #0]
		if (!stall) {
 800129a:	2a00      	cmp	r2, #0
 800129c:	d103      	bne.n	80012a6 <st_usbfs_ep_stall_set+0x8a>
			USB_CLR_EP_TX_DTOG(addr);
 800129e:	680b      	ldr	r3, [r1, #0]
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <st_usbfs_ep_stall_set+0xa0>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	600b      	str	r3, [r1, #0]
}
 80012a6:	bd30      	pop	{r4, r5, pc}
 80012a8:	ffff8080 	.word	0xffff8080
 80012ac:	40005c00 	.word	0x40005c00
 80012b0:	00008fbf 	.word	0x00008fbf
 80012b4:	0000cf8f 	.word	0x0000cf8f
 80012b8:	0000bf8f 	.word	0x0000bf8f
 80012bc:	00008fcf 	.word	0x00008fcf

080012c0 <st_usbfs_ep_stall_get>:

uint8_t st_usbfs_ep_stall_get(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	if (addr & 0x80) {
 80012c0:	b24b      	sxtb	r3, r1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	da0c      	bge.n	80012e0 <st_usbfs_ep_stall_get+0x20>
		if ((*USB_EP_REG(addr & 0x7F) & USB_EP_TX_STAT) ==
 80012c6:	237f      	movs	r3, #127	; 0x7f
 80012c8:	4019      	ands	r1, r3
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <st_usbfs_ep_stall_get+0x34>)
 80012cc:	0089      	lsls	r1, r1, #2
 80012ce:	18c9      	adds	r1, r1, r3
 80012d0:	2330      	movs	r3, #48	; 0x30
 80012d2:	6808      	ldr	r0, [r1, #0]
 80012d4:	4018      	ands	r0, r3
 80012d6:	3810      	subs	r0, #16
		    USB_EP_TX_STAT_STALL) {
			return 1;
		}
	} else {
		if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) ==
 80012d8:	4243      	negs	r3, r0
 80012da:	4158      	adcs	r0, r3
			return 1;
 80012dc:	b2c0      	uxtb	r0, r0
		    USB_EP_RX_STAT_STALL) {
			return 1;
		}
	}
	return 0;
}
 80012de:	4770      	bx	lr
		if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) ==
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <st_usbfs_ep_stall_get+0x34>)
 80012e2:	0089      	lsls	r1, r1, #2
 80012e4:	18c9      	adds	r1, r1, r3
 80012e6:	23c0      	movs	r3, #192	; 0xc0
 80012e8:	6808      	ldr	r0, [r1, #0]
 80012ea:	019b      	lsls	r3, r3, #6
 80012ec:	4018      	ands	r0, r3
 80012ee:	4b02      	ldr	r3, [pc, #8]	; (80012f8 <st_usbfs_ep_stall_get+0x38>)
 80012f0:	18c0      	adds	r0, r0, r3
 80012f2:	e7f1      	b.n	80012d8 <st_usbfs_ep_stall_get+0x18>
 80012f4:	40005c00 	.word	0x40005c00
 80012f8:	fffff000 	.word	0xfffff000

080012fc <st_usbfs_ep_nak_set>:

void st_usbfs_ep_nak_set(usbd_device *dev, uint8_t addr, uint8_t nak)
{
	(void)dev;
	/* It does not make sense to force NAK on IN endpoints. */
	if (addr & 0x80) {
 80012fc:	b24b      	sxtb	r3, r1
{
 80012fe:	b510      	push	{r4, lr}
	if (addr & 0x80) {
 8001300:	2b00      	cmp	r3, #0
 8001302:	db11      	blt.n	8001328 <st_usbfs_ep_nak_set+0x2c>
		return;
	}

	st_usbfs_force_nak[addr] = nak;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <st_usbfs_ep_nak_set+0x3c>)
 8001306:	4c0d      	ldr	r4, [pc, #52]	; (800133c <st_usbfs_ep_nak_set+0x40>)
 8001308:	545a      	strb	r2, [r3, r1]

	if (nak) {
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <st_usbfs_ep_nak_set+0x44>)
 800130c:	0089      	lsls	r1, r1, #2
 800130e:	480d      	ldr	r0, [pc, #52]	; (8001344 <st_usbfs_ep_nak_set+0x48>)
 8001310:	18c9      	adds	r1, r1, r3
 8001312:	2a00      	cmp	r2, #0
 8001314:	d009      	beq.n	800132a <st_usbfs_ep_nak_set+0x2e>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_NAK);
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	680a      	ldr	r2, [r1, #0]
 800131a:	019b      	lsls	r3, r3, #6
 800131c:	4022      	ands	r2, r4
 800131e:	b292      	uxth	r2, r2
	} else {
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001320:	4053      	eors	r3, r2
 8001322:	4303      	orrs	r3, r0
 8001324:	b29b      	uxth	r3, r3
 8001326:	600b      	str	r3, [r1, #0]
	}
}
 8001328:	bd10      	pop	{r4, pc}
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 800132a:	22c0      	movs	r2, #192	; 0xc0
 800132c:	680b      	ldr	r3, [r1, #0]
 800132e:	0192      	lsls	r2, r2, #6
 8001330:	4023      	ands	r3, r4
 8001332:	b29b      	uxth	r3, r3
 8001334:	e7f4      	b.n	8001320 <st_usbfs_ep_nak_set+0x24>
 8001336:	46c0      	nop			; (mov r8, r8)
 8001338:	20000188 	.word	0x20000188
 800133c:	ffffbf8f 	.word	0xffffbf8f
 8001340:	40005c00 	.word	0x40005c00
 8001344:	ffff8080 	.word	0xffff8080

08001348 <st_usbfs_ep_write_packet>:

uint16_t st_usbfs_ep_write_packet(usbd_device *dev, uint8_t addr,
				     const void *buf, uint16_t len)
{
 8001348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800134a:	000c      	movs	r4, r1
 800134c:	001d      	movs	r5, r3
	(void)dev;
	addr &= 0x7F;
 800134e:	237f      	movs	r3, #127	; 0x7f
{
 8001350:	0011      	movs	r1, r2

	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 8001352:	2230      	movs	r2, #48	; 0x30
	addr &= 0x7F;
 8001354:	401c      	ands	r4, r3
	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <st_usbfs_ep_write_packet+0x5c>)
 8001358:	00a6      	lsls	r6, r4, #2
 800135a:	18f6      	adds	r6, r6, r3
 800135c:	6833      	ldr	r3, [r6, #0]
 800135e:	4013      	ands	r3, r2
 8001360:	4293      	cmp	r3, r2
 8001362:	d01c      	beq.n	800139e <st_usbfs_ep_write_packet+0x56>
		return 0;
	}

	st_usbfs_copy_to_pm(USB_GET_EP_TX_BUFF(addr), buf, len);
 8001364:	4810      	ldr	r0, [pc, #64]	; (80013a8 <st_usbfs_ep_write_packet+0x60>)
 8001366:	4f11      	ldr	r7, [pc, #68]	; (80013ac <st_usbfs_ep_write_packet+0x64>)
 8001368:	0002      	movs	r2, r0
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	00e4      	lsls	r4, r4, #3
 800136e:	b29b      	uxth	r3, r3
 8001370:	18e3      	adds	r3, r4, r3
 8001372:	181b      	adds	r3, r3, r0
 8001374:	8818      	ldrh	r0, [r3, #0]
 8001376:	1880      	adds	r0, r0, r2
 8001378:	002a      	movs	r2, r5
 800137a:	f7ff fe01 	bl	8000f80 <st_usbfs_copy_to_pm>
	USB_SET_EP_TX_COUNT(addr, len);
 800137e:	6839      	ldr	r1, [r7, #0]
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <st_usbfs_ep_write_packet+0x68>)
 8001382:	b289      	uxth	r1, r1
 8001384:	1864      	adds	r4, r4, r1
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 8001386:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <st_usbfs_ep_write_packet+0x6c>)
	USB_SET_EP_TX_COUNT(addr, len);
 8001388:	18e4      	adds	r4, r4, r3
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 800138a:	6833      	ldr	r3, [r6, #0]
	USB_SET_EP_TX_COUNT(addr, len);
 800138c:	8025      	strh	r5, [r4, #0]
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 800138e:	4013      	ands	r3, r2
 8001390:	2230      	movs	r2, #48	; 0x30
 8001392:	4053      	eors	r3, r2
 8001394:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <st_usbfs_ep_write_packet+0x70>)
 8001396:	4313      	orrs	r3, r2
 8001398:	6033      	str	r3, [r6, #0]

	return len;
}
 800139a:	0028      	movs	r0, r5
 800139c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 800139e:	2500      	movs	r5, #0
 80013a0:	e7fb      	b.n	800139a <st_usbfs_ep_write_packet+0x52>
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	40005c00 	.word	0x40005c00
 80013a8:	40006000 	.word	0x40006000
 80013ac:	40005c50 	.word	0x40005c50
 80013b0:	40006002 	.word	0x40006002
 80013b4:	00008fbf 	.word	0x00008fbf
 80013b8:	00008080 	.word	0x00008080

080013bc <st_usbfs_ep_read_packet>:

uint16_t st_usbfs_ep_read_packet(usbd_device *dev, uint8_t addr,
					 void *buf, uint16_t len)
{
 80013bc:	0010      	movs	r0, r2
	(void)dev;
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 80013be:	22c0      	movs	r2, #192	; 0xc0
{
 80013c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c2:	001c      	movs	r4, r3
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <st_usbfs_ep_read_packet+0x84>)
 80013c6:	008d      	lsls	r5, r1, #2
 80013c8:	18ed      	adds	r5, r5, r3
 80013ca:	682b      	ldr	r3, [r5, #0]
 80013cc:	0192      	lsls	r2, r2, #6
{
 80013ce:	000f      	movs	r7, r1
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 80013d0:	4013      	ands	r3, r2
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d032      	beq.n	800143c <st_usbfs_ep_read_packet+0x80>
		return 0;
	}

	len = MIN(USB_GET_EP_RX_COUNT(addr) & 0x3ff, len);
 80013d6:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <st_usbfs_ep_read_packet+0x88>)
 80013d8:	00ce      	lsls	r6, r1, #3
 80013da:	6813      	ldr	r3, [r2, #0]
 80013dc:	491a      	ldr	r1, [pc, #104]	; (8001448 <st_usbfs_ep_read_packet+0x8c>)
 80013de:	b29b      	uxth	r3, r3
 80013e0:	18f3      	adds	r3, r6, r3
 80013e2:	185b      	adds	r3, r3, r1
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	059b      	lsls	r3, r3, #22
 80013e8:	0d9b      	lsrs	r3, r3, #22
 80013ea:	429c      	cmp	r4, r3
 80013ec:	d906      	bls.n	80013fc <st_usbfs_ep_read_packet+0x40>
 80013ee:	6813      	ldr	r3, [r2, #0]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	18f3      	adds	r3, r6, r3
 80013f4:	185b      	adds	r3, r3, r1
 80013f6:	881c      	ldrh	r4, [r3, #0]
 80013f8:	05a4      	lsls	r4, r4, #22
 80013fa:	0da4      	lsrs	r4, r4, #22
	st_usbfs_copy_from_pm(buf, USB_GET_EP_RX_BUFF(addr), len);
 80013fc:	6813      	ldr	r3, [r2, #0]
 80013fe:	0022      	movs	r2, r4
 8001400:	b29b      	uxth	r3, r3
 8001402:	18f6      	adds	r6, r6, r3
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <st_usbfs_ep_read_packet+0x90>)
 8001406:	18f6      	adds	r6, r6, r3
 8001408:	8831      	ldrh	r1, [r6, #0]
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <st_usbfs_ep_read_packet+0x94>)
 800140c:	18c9      	adds	r1, r1, r3
 800140e:	f7ff fdc5 	bl	8000f9c <st_usbfs_copy_from_pm>
	USB_CLR_EP_RX_CTR(addr);
 8001412:	682b      	ldr	r3, [r5, #0]
 8001414:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <st_usbfs_ep_read_packet+0x98>)
 8001416:	401a      	ands	r2, r3
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	4313      	orrs	r3, r2
 800141c:	602b      	str	r3, [r5, #0]

	if (!st_usbfs_force_nak[addr]) {
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <st_usbfs_ep_read_packet+0x9c>)
 8001420:	5ddb      	ldrb	r3, [r3, r7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d108      	bne.n	8001438 <st_usbfs_ep_read_packet+0x7c>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001426:	682b      	ldr	r3, [r5, #0]
 8001428:	4a0c      	ldr	r2, [pc, #48]	; (800145c <st_usbfs_ep_read_packet+0xa0>)
 800142a:	401a      	ands	r2, r3
 800142c:	23c0      	movs	r3, #192	; 0xc0
 800142e:	019b      	lsls	r3, r3, #6
 8001430:	4053      	eors	r3, r2
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <st_usbfs_ep_read_packet+0xa4>)
 8001434:	4313      	orrs	r3, r2
 8001436:	602b      	str	r3, [r5, #0]
	}

	return len;
}
 8001438:	0020      	movs	r0, r4
 800143a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 800143c:	2400      	movs	r4, #0
 800143e:	e7fb      	b.n	8001438 <st_usbfs_ep_read_packet+0x7c>
 8001440:	40005c00 	.word	0x40005c00
 8001444:	40005c50 	.word	0x40005c50
 8001448:	40006006 	.word	0x40006006
 800144c:	40006004 	.word	0x40006004
 8001450:	40006000 	.word	0x40006000
 8001454:	00000f0f 	.word	0x00000f0f
 8001458:	20000188 	.word	0x20000188
 800145c:	0000bf8f 	.word	0x0000bf8f
 8001460:	00008080 	.word	0x00008080

08001464 <st_usbfs_poll>:

void st_usbfs_poll(usbd_device *dev)
{
 8001464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t istr = *USB_ISTR_REG;
 8001466:	4b35      	ldr	r3, [pc, #212]	; (800153c <st_usbfs_poll+0xd8>)
{
 8001468:	0004      	movs	r4, r0
	uint16_t istr = *USB_ISTR_REG;
 800146a:	681d      	ldr	r5, [r3, #0]

	if (istr & USB_ISTR_RESET) {
 800146c:	001f      	movs	r7, r3
 800146e:	b2aa      	uxth	r2, r5
 8001470:	9201      	str	r2, [sp, #4]
 8001472:	056a      	lsls	r2, r5, #21
 8001474:	d506      	bpl.n	8001484 <st_usbfs_poll+0x20>
		USB_CLR_ISTR_RESET();
 8001476:	4a32      	ldr	r2, [pc, #200]	; (8001540 <st_usbfs_poll+0xdc>)
 8001478:	601a      	str	r2, [r3, #0]
		dev->pm_top = USBD_PM_TOP;
 800147a:	2340      	movs	r3, #64	; 0x40
 800147c:	8303      	strh	r3, [r0, #24]
		_usbd_reset(dev);
 800147e:	f7ff f831 	bl	80004e4 <_usbd_reset>
	if (dev->user_callback_sof) {
		*USB_CNTR_REG |= USB_CNTR_SOFM;
	} else {
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
	}
}
 8001482:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	if (istr & USB_ISTR_CTR) {
 8001484:	042b      	lsls	r3, r5, #16
 8001486:	d520      	bpl.n	80014ca <st_usbfs_poll+0x66>
		uint8_t ep = istr & USB_ISTR_EP_ID;
 8001488:	230f      	movs	r3, #15
		if (istr & USB_ISTR_DIR) {
 800148a:	2210      	movs	r2, #16
		uint8_t ep = istr & USB_ISTR_EP_ID;
 800148c:	401d      	ands	r5, r3
		if (istr & USB_ISTR_DIR) {
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <st_usbfs_poll+0xe0>)
 8001490:	00ae      	lsls	r6, r5, #2
 8001492:	18f6      	adds	r6, r6, r3
 8001494:	9901      	ldr	r1, [sp, #4]
 8001496:	9b01      	ldr	r3, [sp, #4]
 8001498:	4013      	ands	r3, r2
 800149a:	4211      	tst	r1, r2
 800149c:	d03a      	beq.n	8001514 <st_usbfs_poll+0xb0>
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
 800149e:	6833      	ldr	r3, [r6, #0]
				type = USB_TRANSACTION_OUT;
 80014a0:	3a0f      	subs	r2, #15
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
 80014a2:	051b      	lsls	r3, r3, #20
 80014a4:	d506      	bpl.n	80014b4 <st_usbfs_poll+0x50>
				st_usbfs_ep_read_packet(dev, ep, &dev->control_state.req, 8);
 80014a6:	0002      	movs	r2, r0
 80014a8:	2308      	movs	r3, #8
 80014aa:	3230      	adds	r2, #48	; 0x30
 80014ac:	0029      	movs	r1, r5
 80014ae:	f7ff ff85 	bl	80013bc <st_usbfs_ep_read_packet>
				type = USB_TRANSACTION_SETUP;
 80014b2:	2202      	movs	r2, #2
		if (dev->user_callback_ctr[ep][type]) {
 80014b4:	2303      	movs	r3, #3
 80014b6:	436b      	muls	r3, r5
 80014b8:	189b      	adds	r3, r3, r2
 80014ba:	331a      	adds	r3, #26
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	591b      	ldr	r3, [r3, r4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d030      	beq.n	8001526 <st_usbfs_poll+0xc2>
			dev->user_callback_ctr[ep][type] (dev, ep);
 80014c4:	0029      	movs	r1, r5
 80014c6:	0020      	movs	r0, r4
 80014c8:	4798      	blx	r3
	if (istr & USB_ISTR_SUSP) {
 80014ca:	9b01      	ldr	r3, [sp, #4]
 80014cc:	051b      	lsls	r3, r3, #20
 80014ce:	d505      	bpl.n	80014dc <st_usbfs_poll+0x78>
		USB_CLR_ISTR_SUSP();
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <st_usbfs_poll+0xe4>)
 80014d2:	603b      	str	r3, [r7, #0]
		if (dev->user_callback_suspend) {
 80014d4:	6a23      	ldr	r3, [r4, #32]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d000      	beq.n	80014dc <st_usbfs_poll+0x78>
			dev->user_callback_suspend();
 80014da:	4798      	blx	r3
	if (istr & USB_ISTR_WKUP) {
 80014dc:	9b01      	ldr	r3, [sp, #4]
 80014de:	04db      	lsls	r3, r3, #19
 80014e0:	d505      	bpl.n	80014ee <st_usbfs_poll+0x8a>
		USB_CLR_ISTR_WKUP();
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <st_usbfs_poll+0xe8>)
 80014e4:	603b      	str	r3, [r7, #0]
		if (dev->user_callback_resume) {
 80014e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d000      	beq.n	80014ee <st_usbfs_poll+0x8a>
			dev->user_callback_resume();
 80014ec:	4798      	blx	r3
	if (istr & USB_ISTR_SOF) {
 80014ee:	9b01      	ldr	r3, [sp, #4]
 80014f0:	4d17      	ldr	r5, [pc, #92]	; (8001550 <st_usbfs_poll+0xec>)
 80014f2:	059b      	lsls	r3, r3, #22
 80014f4:	d505      	bpl.n	8001502 <st_usbfs_poll+0x9e>
 80014f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		USB_CLR_ISTR_SOF();
 80014f8:	4a16      	ldr	r2, [pc, #88]	; (8001554 <st_usbfs_poll+0xf0>)
 80014fa:	603a      	str	r2, [r7, #0]
		if (dev->user_callback_sof) {
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d019      	beq.n	8001534 <st_usbfs_poll+0xd0>
			dev->user_callback_sof();
 8001500:	4798      	blx	r3
	if (dev->user_callback_sof) {
 8001502:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001504:	2b00      	cmp	r3, #0
 8001506:	d015      	beq.n	8001534 <st_usbfs_poll+0xd0>
		*USB_CNTR_REG |= USB_CNTR_SOFM;
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	682a      	ldr	r2, [r5, #0]
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4313      	orrs	r3, r2
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
 8001510:	602b      	str	r3, [r5, #0]
 8001512:	e7b6      	b.n	8001482 <st_usbfs_poll+0x1e>
			USB_CLR_EP_TX_CTR(ep);
 8001514:	6832      	ldr	r2, [r6, #0]
 8001516:	4910      	ldr	r1, [pc, #64]	; (8001558 <st_usbfs_poll+0xf4>)
 8001518:	400a      	ands	r2, r1
 800151a:	2180      	movs	r1, #128	; 0x80
 800151c:	0209      	lsls	r1, r1, #8
 800151e:	430a      	orrs	r2, r1
 8001520:	6032      	str	r2, [r6, #0]
			type = USB_TRANSACTION_IN;
 8001522:	001a      	movs	r2, r3
 8001524:	e7c6      	b.n	80014b4 <st_usbfs_poll+0x50>
			USB_CLR_EP_RX_CTR(ep);
 8001526:	6833      	ldr	r3, [r6, #0]
 8001528:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <st_usbfs_poll+0xf4>)
 800152a:	401a      	ands	r2, r3
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	4313      	orrs	r3, r2
 8001530:	6033      	str	r3, [r6, #0]
 8001532:	e7ca      	b.n	80014ca <st_usbfs_poll+0x66>
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
 8001534:	682b      	ldr	r3, [r5, #0]
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <st_usbfs_poll+0xf8>)
 8001538:	4013      	ands	r3, r2
 800153a:	e7e9      	b.n	8001510 <st_usbfs_poll+0xac>
 800153c:	40005c44 	.word	0x40005c44
 8001540:	0000fbff 	.word	0x0000fbff
 8001544:	40005c00 	.word	0x40005c00
 8001548:	0000f7ff 	.word	0x0000f7ff
 800154c:	0000efff 	.word	0x0000efff
 8001550:	40005c40 	.word	0x40005c40
 8001554:	0000fdff 	.word	0x0000fdff
 8001558:	00000f0f 	.word	0x00000f0f
 800155c:	fffffdff 	.word	0xfffffdff

08001560 <memcpy>:
 8001560:	2300      	movs	r3, #0
 8001562:	b510      	push	{r4, lr}
 8001564:	429a      	cmp	r2, r3
 8001566:	d100      	bne.n	800156a <memcpy+0xa>
 8001568:	bd10      	pop	{r4, pc}
 800156a:	5ccc      	ldrb	r4, [r1, r3]
 800156c:	54c4      	strb	r4, [r0, r3]
 800156e:	3301      	adds	r3, #1
 8001570:	e7f8      	b.n	8001564 <memcpy+0x4>

08001572 <strlen>:
 8001572:	2300      	movs	r3, #0
 8001574:	5cc2      	ldrb	r2, [r0, r3]
 8001576:	3301      	adds	r3, #1
 8001578:	2a00      	cmp	r2, #0
 800157a:	d1fb      	bne.n	8001574 <strlen+0x2>
 800157c:	1e58      	subs	r0, r3, #1
 800157e:	4770      	bx	lr

08001580 <__gnu_thumb1_case_uqi>:
 8001580:	b402      	push	{r1}
 8001582:	4671      	mov	r1, lr
 8001584:	0849      	lsrs	r1, r1, #1
 8001586:	0049      	lsls	r1, r1, #1
 8001588:	5c09      	ldrb	r1, [r1, r0]
 800158a:	0049      	lsls	r1, r1, #1
 800158c:	448e      	add	lr, r1
 800158e:	bc02      	pop	{r1}
 8001590:	4770      	bx	lr
 8001592:	46c0      	nop			; (mov r8, r8)

08001594 <__divsi3>:
 8001594:	4603      	mov	r3, r0
 8001596:	430b      	orrs	r3, r1
 8001598:	d47f      	bmi.n	800169a <__divsi3+0x106>
 800159a:	2200      	movs	r2, #0
 800159c:	0843      	lsrs	r3, r0, #1
 800159e:	428b      	cmp	r3, r1
 80015a0:	d374      	bcc.n	800168c <__divsi3+0xf8>
 80015a2:	0903      	lsrs	r3, r0, #4
 80015a4:	428b      	cmp	r3, r1
 80015a6:	d35f      	bcc.n	8001668 <__divsi3+0xd4>
 80015a8:	0a03      	lsrs	r3, r0, #8
 80015aa:	428b      	cmp	r3, r1
 80015ac:	d344      	bcc.n	8001638 <__divsi3+0xa4>
 80015ae:	0b03      	lsrs	r3, r0, #12
 80015b0:	428b      	cmp	r3, r1
 80015b2:	d328      	bcc.n	8001606 <__divsi3+0x72>
 80015b4:	0c03      	lsrs	r3, r0, #16
 80015b6:	428b      	cmp	r3, r1
 80015b8:	d30d      	bcc.n	80015d6 <__divsi3+0x42>
 80015ba:	22ff      	movs	r2, #255	; 0xff
 80015bc:	0209      	lsls	r1, r1, #8
 80015be:	ba12      	rev	r2, r2
 80015c0:	0c03      	lsrs	r3, r0, #16
 80015c2:	428b      	cmp	r3, r1
 80015c4:	d302      	bcc.n	80015cc <__divsi3+0x38>
 80015c6:	1212      	asrs	r2, r2, #8
 80015c8:	0209      	lsls	r1, r1, #8
 80015ca:	d065      	beq.n	8001698 <__divsi3+0x104>
 80015cc:	0b03      	lsrs	r3, r0, #12
 80015ce:	428b      	cmp	r3, r1
 80015d0:	d319      	bcc.n	8001606 <__divsi3+0x72>
 80015d2:	e000      	b.n	80015d6 <__divsi3+0x42>
 80015d4:	0a09      	lsrs	r1, r1, #8
 80015d6:	0bc3      	lsrs	r3, r0, #15
 80015d8:	428b      	cmp	r3, r1
 80015da:	d301      	bcc.n	80015e0 <__divsi3+0x4c>
 80015dc:	03cb      	lsls	r3, r1, #15
 80015de:	1ac0      	subs	r0, r0, r3
 80015e0:	4152      	adcs	r2, r2
 80015e2:	0b83      	lsrs	r3, r0, #14
 80015e4:	428b      	cmp	r3, r1
 80015e6:	d301      	bcc.n	80015ec <__divsi3+0x58>
 80015e8:	038b      	lsls	r3, r1, #14
 80015ea:	1ac0      	subs	r0, r0, r3
 80015ec:	4152      	adcs	r2, r2
 80015ee:	0b43      	lsrs	r3, r0, #13
 80015f0:	428b      	cmp	r3, r1
 80015f2:	d301      	bcc.n	80015f8 <__divsi3+0x64>
 80015f4:	034b      	lsls	r3, r1, #13
 80015f6:	1ac0      	subs	r0, r0, r3
 80015f8:	4152      	adcs	r2, r2
 80015fa:	0b03      	lsrs	r3, r0, #12
 80015fc:	428b      	cmp	r3, r1
 80015fe:	d301      	bcc.n	8001604 <__divsi3+0x70>
 8001600:	030b      	lsls	r3, r1, #12
 8001602:	1ac0      	subs	r0, r0, r3
 8001604:	4152      	adcs	r2, r2
 8001606:	0ac3      	lsrs	r3, r0, #11
 8001608:	428b      	cmp	r3, r1
 800160a:	d301      	bcc.n	8001610 <__divsi3+0x7c>
 800160c:	02cb      	lsls	r3, r1, #11
 800160e:	1ac0      	subs	r0, r0, r3
 8001610:	4152      	adcs	r2, r2
 8001612:	0a83      	lsrs	r3, r0, #10
 8001614:	428b      	cmp	r3, r1
 8001616:	d301      	bcc.n	800161c <__divsi3+0x88>
 8001618:	028b      	lsls	r3, r1, #10
 800161a:	1ac0      	subs	r0, r0, r3
 800161c:	4152      	adcs	r2, r2
 800161e:	0a43      	lsrs	r3, r0, #9
 8001620:	428b      	cmp	r3, r1
 8001622:	d301      	bcc.n	8001628 <__divsi3+0x94>
 8001624:	024b      	lsls	r3, r1, #9
 8001626:	1ac0      	subs	r0, r0, r3
 8001628:	4152      	adcs	r2, r2
 800162a:	0a03      	lsrs	r3, r0, #8
 800162c:	428b      	cmp	r3, r1
 800162e:	d301      	bcc.n	8001634 <__divsi3+0xa0>
 8001630:	020b      	lsls	r3, r1, #8
 8001632:	1ac0      	subs	r0, r0, r3
 8001634:	4152      	adcs	r2, r2
 8001636:	d2cd      	bcs.n	80015d4 <__divsi3+0x40>
 8001638:	09c3      	lsrs	r3, r0, #7
 800163a:	428b      	cmp	r3, r1
 800163c:	d301      	bcc.n	8001642 <__divsi3+0xae>
 800163e:	01cb      	lsls	r3, r1, #7
 8001640:	1ac0      	subs	r0, r0, r3
 8001642:	4152      	adcs	r2, r2
 8001644:	0983      	lsrs	r3, r0, #6
 8001646:	428b      	cmp	r3, r1
 8001648:	d301      	bcc.n	800164e <__divsi3+0xba>
 800164a:	018b      	lsls	r3, r1, #6
 800164c:	1ac0      	subs	r0, r0, r3
 800164e:	4152      	adcs	r2, r2
 8001650:	0943      	lsrs	r3, r0, #5
 8001652:	428b      	cmp	r3, r1
 8001654:	d301      	bcc.n	800165a <__divsi3+0xc6>
 8001656:	014b      	lsls	r3, r1, #5
 8001658:	1ac0      	subs	r0, r0, r3
 800165a:	4152      	adcs	r2, r2
 800165c:	0903      	lsrs	r3, r0, #4
 800165e:	428b      	cmp	r3, r1
 8001660:	d301      	bcc.n	8001666 <__divsi3+0xd2>
 8001662:	010b      	lsls	r3, r1, #4
 8001664:	1ac0      	subs	r0, r0, r3
 8001666:	4152      	adcs	r2, r2
 8001668:	08c3      	lsrs	r3, r0, #3
 800166a:	428b      	cmp	r3, r1
 800166c:	d301      	bcc.n	8001672 <__divsi3+0xde>
 800166e:	00cb      	lsls	r3, r1, #3
 8001670:	1ac0      	subs	r0, r0, r3
 8001672:	4152      	adcs	r2, r2
 8001674:	0883      	lsrs	r3, r0, #2
 8001676:	428b      	cmp	r3, r1
 8001678:	d301      	bcc.n	800167e <__divsi3+0xea>
 800167a:	008b      	lsls	r3, r1, #2
 800167c:	1ac0      	subs	r0, r0, r3
 800167e:	4152      	adcs	r2, r2
 8001680:	0843      	lsrs	r3, r0, #1
 8001682:	428b      	cmp	r3, r1
 8001684:	d301      	bcc.n	800168a <__divsi3+0xf6>
 8001686:	004b      	lsls	r3, r1, #1
 8001688:	1ac0      	subs	r0, r0, r3
 800168a:	4152      	adcs	r2, r2
 800168c:	1a41      	subs	r1, r0, r1
 800168e:	d200      	bcs.n	8001692 <__divsi3+0xfe>
 8001690:	4601      	mov	r1, r0
 8001692:	4152      	adcs	r2, r2
 8001694:	4610      	mov	r0, r2
 8001696:	4770      	bx	lr
 8001698:	e05d      	b.n	8001756 <__divsi3+0x1c2>
 800169a:	0fca      	lsrs	r2, r1, #31
 800169c:	d000      	beq.n	80016a0 <__divsi3+0x10c>
 800169e:	4249      	negs	r1, r1
 80016a0:	1003      	asrs	r3, r0, #32
 80016a2:	d300      	bcc.n	80016a6 <__divsi3+0x112>
 80016a4:	4240      	negs	r0, r0
 80016a6:	4053      	eors	r3, r2
 80016a8:	2200      	movs	r2, #0
 80016aa:	469c      	mov	ip, r3
 80016ac:	0903      	lsrs	r3, r0, #4
 80016ae:	428b      	cmp	r3, r1
 80016b0:	d32d      	bcc.n	800170e <__divsi3+0x17a>
 80016b2:	0a03      	lsrs	r3, r0, #8
 80016b4:	428b      	cmp	r3, r1
 80016b6:	d312      	bcc.n	80016de <__divsi3+0x14a>
 80016b8:	22fc      	movs	r2, #252	; 0xfc
 80016ba:	0189      	lsls	r1, r1, #6
 80016bc:	ba12      	rev	r2, r2
 80016be:	0a03      	lsrs	r3, r0, #8
 80016c0:	428b      	cmp	r3, r1
 80016c2:	d30c      	bcc.n	80016de <__divsi3+0x14a>
 80016c4:	0189      	lsls	r1, r1, #6
 80016c6:	1192      	asrs	r2, r2, #6
 80016c8:	428b      	cmp	r3, r1
 80016ca:	d308      	bcc.n	80016de <__divsi3+0x14a>
 80016cc:	0189      	lsls	r1, r1, #6
 80016ce:	1192      	asrs	r2, r2, #6
 80016d0:	428b      	cmp	r3, r1
 80016d2:	d304      	bcc.n	80016de <__divsi3+0x14a>
 80016d4:	0189      	lsls	r1, r1, #6
 80016d6:	d03a      	beq.n	800174e <__divsi3+0x1ba>
 80016d8:	1192      	asrs	r2, r2, #6
 80016da:	e000      	b.n	80016de <__divsi3+0x14a>
 80016dc:	0989      	lsrs	r1, r1, #6
 80016de:	09c3      	lsrs	r3, r0, #7
 80016e0:	428b      	cmp	r3, r1
 80016e2:	d301      	bcc.n	80016e8 <__divsi3+0x154>
 80016e4:	01cb      	lsls	r3, r1, #7
 80016e6:	1ac0      	subs	r0, r0, r3
 80016e8:	4152      	adcs	r2, r2
 80016ea:	0983      	lsrs	r3, r0, #6
 80016ec:	428b      	cmp	r3, r1
 80016ee:	d301      	bcc.n	80016f4 <__divsi3+0x160>
 80016f0:	018b      	lsls	r3, r1, #6
 80016f2:	1ac0      	subs	r0, r0, r3
 80016f4:	4152      	adcs	r2, r2
 80016f6:	0943      	lsrs	r3, r0, #5
 80016f8:	428b      	cmp	r3, r1
 80016fa:	d301      	bcc.n	8001700 <__divsi3+0x16c>
 80016fc:	014b      	lsls	r3, r1, #5
 80016fe:	1ac0      	subs	r0, r0, r3
 8001700:	4152      	adcs	r2, r2
 8001702:	0903      	lsrs	r3, r0, #4
 8001704:	428b      	cmp	r3, r1
 8001706:	d301      	bcc.n	800170c <__divsi3+0x178>
 8001708:	010b      	lsls	r3, r1, #4
 800170a:	1ac0      	subs	r0, r0, r3
 800170c:	4152      	adcs	r2, r2
 800170e:	08c3      	lsrs	r3, r0, #3
 8001710:	428b      	cmp	r3, r1
 8001712:	d301      	bcc.n	8001718 <__divsi3+0x184>
 8001714:	00cb      	lsls	r3, r1, #3
 8001716:	1ac0      	subs	r0, r0, r3
 8001718:	4152      	adcs	r2, r2
 800171a:	0883      	lsrs	r3, r0, #2
 800171c:	428b      	cmp	r3, r1
 800171e:	d301      	bcc.n	8001724 <__divsi3+0x190>
 8001720:	008b      	lsls	r3, r1, #2
 8001722:	1ac0      	subs	r0, r0, r3
 8001724:	4152      	adcs	r2, r2
 8001726:	d2d9      	bcs.n	80016dc <__divsi3+0x148>
 8001728:	0843      	lsrs	r3, r0, #1
 800172a:	428b      	cmp	r3, r1
 800172c:	d301      	bcc.n	8001732 <__divsi3+0x19e>
 800172e:	004b      	lsls	r3, r1, #1
 8001730:	1ac0      	subs	r0, r0, r3
 8001732:	4152      	adcs	r2, r2
 8001734:	1a41      	subs	r1, r0, r1
 8001736:	d200      	bcs.n	800173a <__divsi3+0x1a6>
 8001738:	4601      	mov	r1, r0
 800173a:	4663      	mov	r3, ip
 800173c:	4152      	adcs	r2, r2
 800173e:	105b      	asrs	r3, r3, #1
 8001740:	4610      	mov	r0, r2
 8001742:	d301      	bcc.n	8001748 <__divsi3+0x1b4>
 8001744:	4240      	negs	r0, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d500      	bpl.n	800174c <__divsi3+0x1b8>
 800174a:	4249      	negs	r1, r1
 800174c:	4770      	bx	lr
 800174e:	4663      	mov	r3, ip
 8001750:	105b      	asrs	r3, r3, #1
 8001752:	d300      	bcc.n	8001756 <__divsi3+0x1c2>
 8001754:	4240      	negs	r0, r0
 8001756:	b501      	push	{r0, lr}
 8001758:	2000      	movs	r0, #0
 800175a:	f000 f805 	bl	8001768 <__aeabi_idiv0>
 800175e:	bd02      	pop	{r1, pc}

08001760 <__aeabi_idivmod>:
 8001760:	2900      	cmp	r1, #0
 8001762:	d0f8      	beq.n	8001756 <__divsi3+0x1c2>
 8001764:	e716      	b.n	8001594 <__divsi3>
 8001766:	4770      	bx	lr

08001768 <__aeabi_idiv0>:
 8001768:	4770      	bx	lr
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	6c6f6f43 	.word	0x6c6f6f43
 8001770:	65736145 	.word	0x65736145
 8001774:	00000000 	.word	0x00000000
 8001778:	6c6f6f43 	.word	0x6c6f6f43
 800177c:	65736145 	.word	0x65736145
 8001780:	62754820 	.word	0x62754820
 8001784:	00000000 	.word	0x00000000
 8001788:	34333231 	.word	0x34333231
 800178c:	00000035 	.word	0x00000035
 8001790:	74737543 	.word	0x74737543
 8001794:	48206d6f 	.word	0x48206d6f
 8001798:	43204449 	.word	0x43204449
 800179c:	69666e6f 	.word	0x69666e6f
 80017a0:	73754367 	.word	0x73754367
 80017a4:	206d6f74 	.word	0x206d6f74
 80017a8:	20444948 	.word	0x20444948
 80017ac:	65746e49 	.word	0x65746e49
 80017b0:	63616672 	.word	0x63616672
 80017b4:	00000065 	.word	0x00000065

080017b8 <cfg_desc>:
 80017b8:	00000209 80040101 00187cc8 00000008     .........|......

080017c8 <dev_desc>:
 80017c8:	02000112 40000000 57500483 02010200     .......@..PW....
 80017d8:	00000103                                ....

080017dc <hid_function>:
 80017dc:	01112109 19220100 00000000              .!....".....

080017e8 <hid_interface>:
 80017e8:	00000409 00000302 00180005 0017dc08     ................
 80017f8:	00000908 00000000                       ........

08001800 <hid_interface_endpoints>:
 8001800:	03810507 00010040 00000000 07000000     ....@...........
 8001810:	40030105 00000100 00000000 00000000     ...@............

08001820 <hid_out_report_buf>:
	...

08001860 <hid_report_descriptor>:
 8001860:	09ff0006 0901a101 26001501 087500ff     ...........&..u.
 8001870:	02814095 02910109 000000c0              .@..........

0800187c <interfaces>:
 800187c:	00000000 00000001 00000000 080017e8     ................

0800188c <string_desc>:
 800188c:	0800176c 08001778 08001788 08001790     l...x...........

0800189c <st_usbfs_v2_usb_driver>:
 800189c:	08000f41 0800107d 080010c5 080011d9     A...}...........
 80018ac:	0800121d 080012fd 080012c1 08001349     ............I...
 80018bc:	080013bd 08001465 08000f21 00000000     ....e...!.......
 80018cc:	00000000                                ....
